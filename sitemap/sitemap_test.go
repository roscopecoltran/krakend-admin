// sitemaps_test.go
package sitemap

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/stretchrcom/testify/assert"
)

/*
func Test_(t *testing.T) {

}

func Benchmark_(b *testing.B) {

}
*/

var xmlGzip_Valid = []byte{0x1f, 0x8b, 0x08, 0x08, 0x25, 0xca, 0xcf, 0x52, 0x02, 0x00, 0x54, 0x65, 0x73, 0x74, 0x58, 0x6d,
	0x6c, 0x2e, 0x78, 0x6d, 0x6c, 0x00, 0xc5, 0x94, 0x5f, 0x6f, 0x82, 0x30, 0x14, 0xc5, 0xdf, 0xfd,
	0x14, 0x86, 0xc4, 0xbd, 0x49, 0x6f, 0x5b, 0x0a, 0x94, 0x21, 0x26, 0xf3, 0xd5, 0x3d, 0x6d, 0x0f,
	0x7b, 0x65, 0x78, 0x15, 0x32, 0xa0, 0x8c, 0x56, 0xd1, 0x6f, 0xbf, 0xaa, 0x98, 0x65, 0xc9, 0x34,
	0x9a, 0xb8, 0x8c, 0x07, 0xfe, 0xf4, 0x9e, 0x73, 0xee, 0xef, 0x92, 0xb4, 0xf1, 0x74, 0x5b, 0x95,
	0xc3, 0x0d, 0xb6, 0xba, 0x50, 0xf5, 0xc4, 0xa1, 0x2e, 0x38, 0xd3, 0x64, 0x10, 0xaf, 0xdb, 0x52,
	0xa3, 0x19, 0xda, 0x5a, 0xad, 0xa3, 0xad, 0x2e, 0x26, 0x4e, 0x6e, 0x4c, 0x13, 0x11, 0xd2, 0x75,
	0x9d, 0xdb, 0x71, 0x57, 0xb5, 0x2b, 0xc2, 0x00, 0x28, 0x79, 0x7b, 0x9e, 0xbf, 0x64, 0x39, 0x56,
	0xe9, 0xb8, 0xa8, 0xb5, 0x49, 0xeb, 0x0c, 0x9d, 0xa3, 0xeb, 0x87, 0x43, 0x17, 0xc6, 0x4a, 0x1a,
	0x7d, 0xf0, 0xe9, 0x83, 0x5e, 0x93, 0x7e, 0x91, 0x80, 0x2b, 0xad, 0x47, 0x17, 0xd1, 0xb1, 0x30,
	0x57, 0x59, 0x6a, 0x2c, 0xcc, 0x4d, 0x01, 0xc3, 0x1b, 0xb4, 0xa7, 0x77, 0x77, 0xab, 0x17, 0x4e,
	0x32, 0x18, 0xee, 0x87, 0xb5, 0x0f, 0x7b, 0xc5, 0xa5, 0xca, 0x92, 0x7d, 0x92, 0xb6, 0x51, 0x4d,
	0xb9, 0xd6, 0xee, 0x4a, 0xa9, 0x55, 0x89, 0x6e, 0xa6, 0x2a, 0x42, 0x81, 0x73, 0xc9, 0x40, 0x30,
	0xa0, 0x1c, 0x58, 0xe0, 0x07, 0x5e, 0x10, 0xc8, 0x98, 0x58, 0x4b, 0x6f, 0x6e, 0xda, 0x42, 0xb5,
	0x85, 0xd9, 0x25, 0xe0, 0x8a, 0x98, 0x9c, 0xbe, 0xfa, 0x62, 0x96, 0xa7, 0xf5, 0x0a, 0x97, 0x2d,
	0x7e, 0x26, 0x1d, 0xe2, 0x47, 0xb9, 0x8b, 0xc9, 0xf7, 0xd2, 0xa9, 0x7b, 0xaa, 0x4d, 0xa5, 0x16,
	0xc9, 0xbe, 0xc3, 0x98, 0xd2, 0x31, 0x0b, 0x5e, 0x01, 0x22, 0xf0, 0x23, 0xc1, 0xc6, 0x20, 0x22,
	0x00, 0xdb, 0xad, 0x97, 0x0c, 0xac, 0x9c, 0x1c, 0xb8, 0xaf, 0xa6, 0x97, 0x16, 0xd7, 0xb7, 0xc9,
	0x1e, 0x84, 0x4c, 0x84, 0x5c, 0x08, 0x60, 0x67, 0xe8, 0xd9, 0x45, 0xfc, 0x4a, 0xd5, 0x26, 0xbf,
	0x1f, 0xff, 0xf5, 0xbf, 0xdf, 0x07, 0xc9, 0xa9, 0x6f, 0xc3, 0xed, 0x4d, 0xfa, 0x9c, 0x33, 0xe1,
	0x9d, 0x19, 0x20, 0xb8, 0x38, 0xc0, 0x0e, 0xd3, 0xf6, 0x7e, 0xfc, 0x57, 0xe3, 0x87, 0x61, 0x20,
	0x3d, 0xdf, 0x67, 0x81, 0x94, 0xd4, 0x0b, 0x05, 0xf3, 0x24, 0xff, 0x15, 0x9f, 0x5e, 0x62, 0x5f,
	0xa4, 0xc5, 0x9f, 0xa2, 0xf7, 0x5b, 0x68, 0x83, 0xf5, 0x1a, 0x2d, 0xf6, 0x1e, 0x7d, 0xfa, 0x8e,
	0xb8, 0x9c, 0x68, 0x83, 0xdd, 0x43, 0x5a, 0x35, 0x8f, 0x5d, 0x8e, 0x38, 0x69, 0x72, 0xec, 0x46,
	0x33, 0x3e, 0x7a, 0x9a, 0xfd, 0xf7, 0x08, 0xe4, 0x78, 0x52, 0x25, 0x5f, 0xcd, 0x3b, 0x83, 0x7d,
	0xc8, 0x04, 0x00, 0x00}

func Test_xmlSitemapPage(t *testing.T) {
	reader := bytes.NewBuffer(xmlGzip_Valid)
	sitemap_page, err := NewSitemapPage(reader)
	assert.Nil(t, err, fmt.Sprintf("unexpected error from NewSitemapPage: %s", err))

	test_SitemapPageIterator_Normal(t, sitemap_page)
}

func Test_SitemapPageSizeLimitations(t *testing.T) {
	buf := make([]byte, max_sitemap_page_size+1)

	reader := bytes.NewBuffer(buf)
	_, err := NewSitemapPage(reader)
	assert.NotNil(t, err, fmt.Sprintf("expected error from NewSitemapPage"))
}

var plainGzip_Valid = []byte{0x1f, 0x8b, 0x08, 0x08, 0x3a, 0xca, 0xcf, 0x52, 0x02, 0x00, 0x54, 0x65, 0x73, 0x74, 0x54, 0x78,
	0x74, 0x2e, 0x74, 0x78, 0x74, 0x00, 0x7d, 0xcc, 0x31, 0x0e, 0xc2, 0x30, 0x0c, 0x85, 0xe1, 0x1d,
	0x89, 0x63, 0x94, 0xb1, 0x75, 0xec, 0xc4, 0x89, 0x91, 0x2a, 0x24, 0x7a, 0x13, 0x90, 0x69, 0x87,
	0x42, 0x22, 0x25, 0x25, 0xd7, 0x27, 0x88, 0x99, 0x2e, 0x6f, 0x79, 0x9f, 0xfe, 0xa5, 0x94, 0x94,
	0xcf, 0xc3, 0x90, 0xd6, 0x2d, 0xf7, 0x73, 0x8c, 0xf3, 0xaa, 0xfd, 0x3d, 0x3e, 0x07, 0x03, 0x44,
	0x82, 0xe0, 0x10, 0x0c, 0x01, 0x7a, 0xf6, 0xd6, 0x7b, 0x39, 0x1e, 0xfe, 0x73, 0x69, 0x3f, 0x37,
	0x6c, 0x21, 0xa0, 0x0b, 0xe4, 0x1c, 0xe0, 0x1e, 0x67, 0x10, 0x32, 0xdc, 0xea, 0x6d, 0x84, 0x89,
	0xd0, 0xd9, 0x3d, 0x1e, 0x82, 0x17, 0xcb, 0x8c, 0x5e, 0xc4, 0xd8, 0xe0, 0xd0, 0x0a, 0xfd, 0x78,
	0xd3, 0xb5, 0xd6, 0xfe, 0xad, 0xaf, 0x4d, 0x1b, 0xfd, 0xf2, 0xcb, 0x4d, 0xf5, 0x31, 0xe6, 0xa2,
	0xf5, 0x54, 0x17, 0xd5, 0x31, 0x2d, 0x5a, 0xbb, 0x89, 0xba, 0xeb, 0xf4, 0x01, 0x6b, 0xd7, 0x1b,
	0xd9, 0xed, 0x00, 0x00, 0x00}

func Test_plainSitemapPage(t *testing.T) {
	reader := bytes.NewBuffer(plainGzip_Valid)
	sitemap_page, err := NewSitemapPage(reader)
	assert.Nil(t, err, fmt.Sprintf("unexpected error from NewSitemapPage: %s", err))

	test_SitemapPageIterator_Normal(t, sitemap_page)
}

var xmlIndexGzip_Valid = []byte{0x1f, 0x8b, 0x08, 0x08, 0x55, 0xad, 0xf5, 0x52, 0x02, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73,
	0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x78, 0x6d, 0x6c,
	0x00, 0xc5, 0x92, 0x51, 0x0e, 0x83, 0x20, 0x0c, 0x86, 0x9f, 0xdd, 0x5d, 0x4a, 0x05, 0xb3, 0x87,
	0x2d, 0x84, 0xbb, 0x10, 0x74, 0x8e, 0x64, 0x0c, 0x93, 0x36, 0x61, 0xd9, 0xe9, 0x05, 0x95, 0x78,
	0x00, 0x4d, 0xe4, 0xe9, 0xa3, 0x6d, 0xfe, 0x7e, 0x0f, 0xd5, 0xe4, 0x79, 0x08, 0x76, 0xf2, 0xdf,
	0x7e, 0xf8, 0x99, 0x5b, 0x53, 0xff, 0x19, 0x1b, 0xfd, 0x89, 0xce, 0xbc, 0x99, 0xa7, 0x27, 0x62,
	0x4a, 0x49, 0x8c, 0xc4, 0x96, 0xbd, 0x13, 0x2e, 0x06, 0x24, 0x85, 0xdb, 0x24, 0x55, 0x80, 0xb6,
	0x3c, 0x88, 0x2f, 0xb8, 0x17, 0x10, 0xe3, 0x5f, 0x63, 0x4e, 0x58, 0x93, 0x2c, 0x71, 0x88, 0xbd,
	0x51, 0xad, 0xec, 0x40, 0x4a, 0x50, 0x8f, 0xdc, 0x5b, 0x6b, 0x65, 0x69, 0x8d, 0x38, 0x41, 0x40,
	0x5e, 0x2d, 0xa0, 0xae, 0x16, 0xe8, 0x0e, 0x0a, 0x2c, 0xb8, 0xdf, 0xc4, 0x0c, 0xb7, 0x0d, 0x00,
	0x15, 0x22, 0x02, 0x00, 0x00}

func Test_xmlSitemapIndex(t *testing.T) {
	reader := bytes.NewBuffer(xmlIndexGzip_Valid)
	sitemap_index, err := NewSitemapIndex(reader)
	assert.Nil(t, err, fmt.Sprintf("unexpected error from NewSitemapIndex: %s", err))

	test_SitemapIndexIterator_Normal(t, sitemap_index)
}

func Test_SitemapIndexSizeLimitations(t *testing.T) {
	buf := make([]byte, max_sitemap_index_size+1)

	reader := bytes.NewBuffer(buf)
	_, err := NewSitemapIndex(reader)
	assert.NotNil(t, err, fmt.Sprintf("expected error from NewSitemapIndex"))
}

func Test_Sitemap_xmlPage(t *testing.T) {
	test_Sitemap_Normal(t, xmlGzip_Valid)
}

func Test_Sitemap_plainPage(t *testing.T) {
	test_Sitemap_Normal(t, plainGzip_Valid)
}

func Test_Sitemap_xmlIndex(t *testing.T) {
	test_Sitemap_Normal(t, xmlIndexGzip_Valid)
}

func test_Sitemap_Normal(t *testing.T, data []byte) {
	reader := bytes.NewBuffer(data)
	sitemap, err := NewSitemap(reader)
	assert.Nil(t, err, fmt.Sprintf("unexpected error from NewSitemap: %s", err))

	test_SitemapPageIterator_Normal(t, sitemap)
}

#%RAML 0.8
title: SYNQ Video
version: "1.9.1"
baseUri: "https://api.synq.fm/v1"
protocols: [HTTP]
schemas: 
    - 
        StreamConfigurationObject: |-
                {"simple":false,"type":"object","properties":{"rtmp_host":{"required":false,"type":"string","example":"ec2-54-171-205-23.eu-west-1.compute.amazonaws.com"},"rtmp_key":{"required":false,"type":"string","example":"live\/ce29d1cb5da48a564d2c9f62be7ade06"},"rtmp_port":{"required":false,"type":"string","example":"1935"},"rtmp_url":{"required":false,"type":"string","example":"rtmp:\/\/ec2-54-171-205-23.eu-west-1.compute.amazonaws.com:1935\/live\/ce29d1cb5da48a564d2c9f62be7ade06"}}}
        UploadParameterObject: '{"simple":false,"type":"object","properties":{"AWSAccessKeyId":{"required":false,"type":"string"},"Content-Type":{"required":false,"type":"string"},"Policy":{"required":false,"type":"string"},"Signature":{"required":false,"type":"string"},"acl":{"required":false,"type":"string"},"action":{"required":false,"type":"string"},"key":{"required":false,"type":"string"}}}'
        VideoObject: '{"simple":false,"required":["created_at","state","updated_at","userdata","video_id"],"type":"object","properties":{"created_at":{"required":false,"type":"string"},"input":{"required":false,"type":"object","properties":{}},"outputs":{"required":false,"type":"object","properties":{}},"state":{"required":false,"type":"string"},"updated_at":{"required":false,"type":"string"},"userdata":{"required":false,"type":"object","properties":{}},"video_id":{"required":false,"type":"string"}},"example":"{created_at=2017-03-07T12:03:34.477Z, state=created, updated_at=2017-03-07T12:03:34.477Z, userdata={}, video_id=5747740852d14db58f47a5858f0bbcf7}"}'
        ErrorObject: |-
                {"simple":false,"required":["message","name","url"],"type":"object","properties":{"details":{"required":false,"type":"object","properties":{}},"message":{"required":false,"type":"string"},"name":{"required":false,"type":"string"},"url":{"required":false,"type":"string"}},"example":"{message=A lengthy, human-readable description of the error that has occurred., name=Some error occurred., url=http:\/\/docs.synq.fm\/api\/v1\/error\/some_error_code}"}
securitySchemes: 
    - 
        apiKey: 
            type: x-apiKey
            describedBy: 
                headers: 
                    Authorization: 
                        type: string
                        required: false
                        repeat: false
securedBy: 
    - 
        apiKey
/video/uploader: 
    displayName: /video/uploader
    post: 
        description: Returns an embeddable url, that contains an uploader widget that allows you to easily upload any mp4. Great way to simplify the uploading process for end users.
        body: 
            application/x-www-form-urlencoded: 
                formParameters: 
                    api_key: 
                        type: string
                        required: true
                        repeat: false
                        enum: [a1df31e82e614c89b3f16f2f9ce431c2]
                        default: a1df31e82e614c89b3f16f2f9ce431c2
                    timeout: 
                        description: How long the uploader widget works for. Anything from '30 minutes' to '2 days'.
                        type: string
                        required: false
                        repeat: false
                        default: "2 hours"
                    video_id: 
                        description: The ID of the video you are going to upload into. The video needs to have been previously created.
                        type: string
                        required: true
                        repeat: false
        responses: 
            "200": 
                description: A JSON object with an embeddable url to an uploader page/widget.
                body: 
                    text/plain: 
                        schema: '{"type":"object","required":false,"properties":{"uploader_url":{"type":"string","example":"https://uploader.synq.fm/uploader/5920d3dfe2dc4b36bd83df6f37ae9bc1?token=18d3bfa5aa4046df9202e6b5ac74760a"}}}'
            "400": 
                description: An error occurred
/video/create: 
    displayName: /video/create
    post: 
        description: Create a new video, optionally setting some metadata fields. You may optionally set some of the metadata associated with the video. Only fields inside the "userdata" field can be set.
        body: 
            application/x-www-form-urlencoded: 
                formParameters: 
                    userdata: 
                        description: Additional metadata that will be associated with the video
                        type: string
                        required: false
                        repeat: false
                    api_key: 
                        type: string
                        required: true
                        repeat: false
                        enum: [a1df31e82e614c89b3f16f2f9ce431c2]
                        default: a1df31e82e614c89b3f16f2f9ce431c2
        responses: 
            "200": 
                description: A video object, containing all metadata members.
                body: 
                    application/json: 
                        schema: ""
            "400": 
                description: An error occurred
                body: 
                    application/json: 
                        schema: ""
/video/stream: 
    displayName: /video/stream
    post: 
        description: Returns a stream url that you can stream to from your broadcasting software, and a playback url people can use to watch the stream.
        body: 
            application/x-www-form-urlencoded: 
                formParameters: 
                    api_key: 
                        type: string
                        required: true
                        repeat: false
                        enum: [a1df31e82e614c89b3f16f2f9ce431c2]
                        default: a1df31e82e614c89b3f16f2f9ce431c2
                    video_id: 
                        description: The ID of the video you want to stream to. The video needs to have been previously created.
                        type: string
                        required: true
                        repeat: false
        responses: 
            "200": 
                description: A JSON object with urls for streaming.
                body: 
                    text/plain: 
                        schema: '{"type":"object","required":false,"properties":{"playback_url":{"type":"string","example":"http://stmr1.synq.fm:8081/abr/58a6657b73039192a1000006/playlist.m3u8"},"stream_url":{"type":"string","example":"rtmp://stmr1.synq.fm:1935/live/58a6657b73039192a1000006?publishsign=aWQ9NTc4N2I5MDI5MzRjY2RlMjcwMDAwMDA4JnNpZ249VTJCTU84bTRPS0R6OW9NanRUdkVLUT09JmlwPTg5LjE5MS4yNi41Nw=="}}}'
            "400": 
                description: An error occurred
/video/update: 
    displayName: /video/update
    post: 
        description: Update a video's metadata through JavaScript code. Only fields inside the "userdata" object can be set.
        body: 
            application/x-www-form-urlencoded: 
                formParameters: 
                    api_key: 
                        type: string
                        required: true
                        repeat: false
                        enum: [a1df31e82e614c89b3f16f2f9ce431c2]
                        default: a1df31e82e614c89b3f16f2f9ce431c2
                    source: 
                        description: JavaScript code to execute on the video object.
                        type: string
                        required: true
                        repeat: false
                    video_id: 
                        description: The ID of the video whose metadata will be updated
                        type: string
                        required: true
                        repeat: false
        responses: 
            "200": 
                description: A video object, containing all metadata members.
            "400": 
                description: An error occurred
/video/details: 
    displayName: /video/details
    post: 
        description: Return details about a video. You may optionally request that only some of the metadata fields are returned.
        body: 
            application/x-www-form-urlencoded: 
                formParameters: 
                    api_key: 
                        type: string
                        required: true
                        repeat: false
                        enum: [a1df31e82e614c89b3f16f2f9ce431c2]
                        default: a1df31e82e614c89b3f16f2f9ce431c2
                    video_id: 
                        description: ID of the video to retrieve the metadata from
                        type: string
                        required: true
                        repeat: false
        responses: 
            "200": 
                description: A video object, containing all metadata members.
            "400": 
                description: An error occurred
/video/query: 
    displayName: /video/query
    post: 
        description: "Find videos matching any criteria, by running a JavaScript function over each video object. A detailed tutorial on how to use this functionality is available on the [documentation page](https://www.synq.fm/queries-video-api/)."
        body: 
            application/x-www-form-urlencoded: 
                formParameters: 
                    filter: 
                        description: JavaScript code to be run over each video object, to determine what should be returend.
                        type: string
                        required: true
                        repeat: false
                    api_key: 
                        type: string
                        required: true
                        repeat: false
                        enum: [a1df31e82e614c89b3f16f2f9ce431c2]
                        default: a1df31e82e614c89b3f16f2f9ce431c2
        responses: 
            "200": 
                description: An array of arbitrary elements, up to one element for each video object
                body: 
                    application/json: 
                        schema: '{"type":"array","required":false,"items":{"type":"object","required":false,"properties":{}}}'
            "400": 
                description: An error occurred
/video/upload: 
    displayName: /video/upload
    post: 
        description: |
            Return parameters needed for uploading a video file to Amazon Simple Storage Service. See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html as well as the language-specific code-examples.
            #### *Example request*
            ```shell
            curl -s https://api.synq.fm/v1/video/upload \
              -F api_key=${SYNQ_API_KEY} \
              -F video_id=2d81c30ce62f4dfdb501dbca96c7ae56
            ```
            
            #### *Example response*
            ```json
            {
              "action": "https://synqfm.s3.amazonaws.com/",
              "AWSAccessKeyId": "AKIAIP77Y7MMX3ITZMFA",
              "Content-Type": "video/mp4",
              "Policy": "eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19",
              "Signature": "ysqDemlKXKr6hKzVFP0hCGgf/cs=",
              "acl": "public-read",
              "key": "projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4"
            }
            ```
            
            To upload the file, you can then make a multipart POST request to the URL in `action`, and for all the other parameters returned, set them as form parameters.
            
            Given the parameters above, you would upload a file `test.mp4` using cURL like this:
            
            ```shell
            curl -s https://synqfm.s3.amazonaws.com/ \
              -F AWSAccessKeyId="AKIAIP77Y7MMX3ITZMFA" \
              -F Content-Type="video/mp4" \
              -F Policy="eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19" \
              -F Signature="ysqDemlKXKr6hKzVFP0hCGgf/cs=" \
              -F acl="public-read" \
              -F key="projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4" \
              -F file="@my_video_file.mp4"
            ```
        body: 
            application/x-www-form-urlencoded: 
                formParameters: 
                    api_key: 
                        type: string
                        required: true
                        repeat: false
                        enum: [a1df31e82e614c89b3f16f2f9ce431c2]
                        default: a1df31e82e614c89b3f16f2f9ce431c2
                    video_id: 
                        description: The ID of the video you are going to upload into. The video needs to have been previously created.
                        type: string
                        required: true
                        repeat: false
        responses: 
            "200": 
                description: An object containing all parameters needed for uploading the file.
            "400": 
                description: An error occurred
documentation: 
    - 
        title: API Description
        content: |
            * [Sign up for a developer API key!](https://www.synq.fm/register)
            * [SYNQ API Guide](/)
#Vendor extensions not implemented

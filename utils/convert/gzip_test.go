package convert

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"math"
	"testing"

	"github.com/stretchrcom/testify/assert"
)

/*
func Test_(t *testing.T) {

}

func Benchmark_(b *testing.B) {

}
*/

var plainGzip_Valid = []byte{0x1f, 0x8b, 0x08, 0x08, 0x3a, 0xca, 0xcf, 0x52, 0x02, 0x00, 0x54, 0x65, 0x73, 0x74, 0x54, 0x78,
	0x74, 0x2e, 0x74, 0x78, 0x74, 0x00, 0x7d, 0xcc, 0x31, 0x0e, 0xc2, 0x30, 0x0c, 0x85, 0xe1, 0x1d,
	0x89, 0x63, 0x94, 0xb1, 0x75, 0xec, 0xc4, 0x89, 0x91, 0x2a, 0x24, 0x7a, 0x13, 0x90, 0x69, 0x87,
	0x42, 0x22, 0x25, 0x25, 0xd7, 0x27, 0x88, 0x99, 0x2e, 0x6f, 0x79, 0x9f, 0xfe, 0xa5, 0x94, 0x94,
	0xcf, 0xc3, 0x90, 0xd6, 0x2d, 0xf7, 0x73, 0x8c, 0xf3, 0xaa, 0xfd, 0x3d, 0x3e, 0x07, 0x03, 0x44,
	0x82, 0xe0, 0x10, 0x0c, 0x01, 0x7a, 0xf6, 0xd6, 0x7b, 0x39, 0x1e, 0xfe, 0x73, 0x69, 0x3f, 0x37,
	0x6c, 0x21, 0xa0, 0x0b, 0xe4, 0x1c, 0xe0, 0x1e, 0x67, 0x10, 0x32, 0xdc, 0xea, 0x6d, 0x84, 0x89,
	0xd0, 0xd9, 0x3d, 0x1e, 0x82, 0x17, 0xcb, 0x8c, 0x5e, 0xc4, 0xd8, 0xe0, 0xd0, 0x0a, 0xfd, 0x78,
	0xd3, 0xb5, 0xd6, 0xfe, 0xad, 0xaf, 0x4d, 0x1b, 0xfd, 0xf2, 0xcb, 0x4d, 0xf5, 0x31, 0xe6, 0xa2,
	0xf5, 0x54, 0x17, 0xd5, 0x31, 0x2d, 0x5a, 0xbb, 0x89, 0xba, 0xeb, 0xf4, 0x01, 0x6b, 0xd7, 0x1b,
	0xd9, 0xed, 0x00, 0x00, 0x00}

var plain_Answer = []string{`https://plus.google.com/103392052013027674779`,
	`https://plus.google.com/109779601340825835502`,
	`https://plus.google.com/106093162011629633254`,
	`https://plus.google.com/108879466279914852493`,
	`http://www.venuecom.com?beef=stew&whee=phew%C3%BC`}

func Test_Unzip_Normal(t *testing.T) {
	reader := bytes.NewBuffer(plainGzip_Valid)

	mem_seek, gzip_err := UnGzipTransform(reader, math.MaxInt64)
	assert.Nil(t, gzip_err, fmt.Sprintf("unexpected error from UnGzipTransform: %s", gzip_err))

	scanner := bufio.NewScanner(mem_seek)
	for index := 0; index < len(plain_Answer); index++ {
		scanned := scanner.Scan()
		scan_err := scanner.Err()
		assert.True(t, scanned && (scan_err == nil), fmt.Sprintf("unexpect failure of Scan(), scanned: %s, scan_err: %s", scanned, scan_err))
		assert.Equal(t, plain_Answer[index], scanner.Text())
	}
}

var plainText = []byte(`https://plus.google.com/103392052013027674779
https://plus.google.com/109779601340825835502
https://plus.google.com/106093162011629633254
https://plus.google.com/108879466279914852493
http://www.venuecom.com?beef=stew&whee=phew%C3%BC`)

func Test_Unzip_WrongFormat(t *testing.T) {
	reader := bytes.NewBuffer(plainText)

	mem_seek, gzip_err := UnGzipTransform(reader, math.MaxInt64)
	assert.NotNil(t, gzip_err, fmt.Sprintf("expected error from UnGzipTransform"))
	assert.True(t, gzip_err.GzipFailed(), fmt.Sprintf("expected true from GzipFailed"))
	bytes, _ := ioutil.ReadAll(mem_seek)
	assert.Equal(t, string(plainText), string(bytes))
}

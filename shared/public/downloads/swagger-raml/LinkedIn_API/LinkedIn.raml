#%RAML 0.8
title: LinkedIn
version: v1
baseUri: "https://api.linkedin.com/v1"
protocols: [HTTP]
schemas: 
    - 
        error-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="error">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:short" name="status"/>
                        <xs:element type="xs:long" name="timestamp"/>
                        <xs:element type="xs:string" name="request-id"/>
                        <xs:element type="xs:byte" name="error-code"/>
                        <xs:element type="xs:string" name="message"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        group-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="group">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:string" name="name"/>
                        <xs:element type="xs:string" name="short-description"/>
                        <xs:element type="xs:string" name="description"/>
                        <xs:element name="relation-to-viewer">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="membership-state"/>
                              <xs:element type="xs:string" name="available-actions"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="posts"/>
                        <xs:element type="xs:byte" name="counts-by-category"/>
                        <xs:element type="xs:string" name="is-open-to-non-members"/>
                        <xs:element type="xs:string" name="category"/>
                        <xs:element type="xs:anyURI" name="website-url"/>
                        <xs:element type="xs:string" name="locale"/>
                        <xs:element name="location">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="name"/>
                              <xs:element name="country">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:short" name="postal-code"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="allow-member-invites"/>
                        <xs:element type="xs:anyURI" name="site-group-url"/>
                        <xs:element type="xs:anyURI" name="small-logo-url"/>
                        <xs:element type="xs:anyURI" name="large-logo-url"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        jobUpdate-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="job">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="position">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="description"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="compensation">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="salary">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="description"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        posts-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="posts">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="post">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="id"/>
                              <xs:element name="type">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="code"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                              <xs:element name="creator">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="first-name"/>
                                    <xs:element type="xs:string" name="last-name"/>
                                    <xs:element type="xs:string" name="headline"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                              <xs:element type="xs:string" name="title"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                      <xs:attribute type="xs:byte" name="total"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        companyShare-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="share">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="visibility">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="comment"/>
                        <xs:element name="content">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="submitted-url"/>
                              <xs:element type="xs:string" name="title"/>
                              <xs:element type="xs:string" name="description"/>
                              <xs:element type="xs:anyURI" name="submitted-image-url"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="share-target-reach">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="share-targets">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="share-target" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="code"/>
                                          <xs:element name="tvalues">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:string" name="tvalue"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        groupMembership-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="group-membership">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="group">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:int" name="id"/>
                              <xs:sequence minOccurs="0">
                              <xs:element type="xs:string" name="name"/>
                              </xs:sequence>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="show-group-logo-in-profile"/>
                        <xs:element name="email-digest-frequency">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="email-announcements-from-managers"/>
                        <xs:element type="xs:string" name="allow-messages-from-members"/>
                        <xs:element type="xs:string" name="email-for-every-new-post"/>
                        <xs:element name="membership-state">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        connections-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="connections">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="person">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="id"/>
                              <xs:element type="xs:string" name="first-name"/>
                              <xs:element type="xs:string" name="last-name"/>
                              <xs:element type="xs:string" name="headline"/>
                              <xs:element name="location">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="name"/>
                                    <xs:element name="country">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="code"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                              <xs:element type="xs:string" name="industry"/>
                              <xs:element name="api-standard-profile-request">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:anyURI" name="url"/>
                                    <xs:element name="headers">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element name="http-header">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:string" name="name"/>
                                                <xs:element type="xs:string" name="value"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                              <xs:element name="site-standard-profile-request">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:anyURI" name="url"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                              <xs:element type="xs:anyURI" name="picture-url"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                      <xs:attribute type="xs:short" name="total"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        groupPosts-xml: |
                <?xml version="1.0" encoding="UTF-8"?>
                <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                  <xsd:element name="posts">
                    <xsd:complexType>
                      <xsd:sequence>
                        <xsd:element name="post" minOccurs="0" maxOccurs="1">
                          <xsd:complexType>
                            <xsd:sequence>
                              <xsd:element name="id" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                              <xsd:element name="type" minOccurs="0" maxOccurs="1">
                                <xsd:complexType>
                                  <xsd:sequence>
                                    <xsd:element name="code" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                                  </xsd:sequence>
                                </xsd:complexType>
                              </xsd:element>
                              <xsd:element name="creator" minOccurs="0" maxOccurs="1">
                                <xsd:complexType>
                                  <xsd:sequence>
                                    <xsd:element name="id" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                                    <xsd:element name="first-name" minOccurs="0" maxOccurs="1" type="xsd:string"/>
                                    <xsd:element name="last-name" minOccurs="0" maxOccurs="1" type="xsd:string"/>
                                    <xsd:element name="headline" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                                  </xsd:sequence>
                                </xsd:complexType>
                              </xsd:element>
                              <xsd:element name="title" minOccurs="0" maxOccurs="1" type="xsd:string"/>
                            </xsd:sequence>
                          </xsd:complexType>
                        </xsd:element>
                      </xsd:sequence>
                      <xsd:attribute name="total" type="xsd:int" use="required"/>
                    </xsd:complexType>
                  </xsd:element>
                </xsd:schema>
        companySearch-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="company-search">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="companies">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="company" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:int" name="id"/>
                                    <xs:element type="xs:string" name="name"/>
                                    <xs:element type="xs:anyURI" name="logo-url"/>
                                    <xs:element type="xs:string" name="type"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:short" name="total"/>
                            <xs:attribute type="xs:byte" name="count"/>
                            <xs:attribute type="xs:byte" name="start"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:short" name="num-results"/>
                        <xs:element name="facets">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="facet">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="code"/>
                                    <xs:element type="xs:string" name="name"/>
                                    <xs:element name="buckets">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element name="bucket" maxOccurs="unbounded" minOccurs="0">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:string" name="code"/>
                                                <xs:element type="xs:string" name="name"/>
                                                <xs:element type="xs:short" name="count"/>
                                                <xs:element type="xs:string" name="selected"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                        <xs:attribute type="xs:byte" name="total"/>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        peopleSearch-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="people-search">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="people">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="person" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="first-name"/>
                                    <xs:element type="xs:string" name="last-name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:integer" name="total"/>
                            <xs:attribute type="xs:integer" name="count"/>
                            <xs:attribute type="xs:integer" name="start"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:integer" name="num-results"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        people-gm-group-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="group-membership">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="show-group-logo-in-profile"/>
                        <xs:element name="email-digest-frequency">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="email-announcements-from-managers"/>
                        <xs:element type="xs:string" name="allow-messages-from-members"/>
                        <xs:element type="xs:string" name="email-for-every-new-post"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        jobGet-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="job">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:long" name="expiration-timestamp"/>
                        <xs:element name="company">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:int" name="id"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="position">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="title"/>
                              <xs:element name="location">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="name"/>
                                    <xs:element name="country">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="code"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="location-description"/>
                        <xs:element name="job-poster">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="id"/>
                              <xs:element type="xs:string" name="first-name"/>
                              <xs:element type="xs:string" name="last-name"/>
                              <xs:element type="xs:string" name="headline"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        comments-xml: |
                <?xml version="1.0" encoding="UTF-8"?>
                <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                  <xsd:element name="comments">
                    <xsd:complexType>
                      <xsd:sequence>
                        <xsd:element name="comment" minOccurs="0" maxOccurs="1">
                          <xsd:complexType>
                            <xsd:sequence>
                              <xsd:element name="id" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                              <xsd:element name="text" minOccurs="0" maxOccurs="1" type="xsd:string"/>
                              <xsd:element name="creator" minOccurs="0" maxOccurs="1">
                                <xsd:complexType>
                                  <xsd:sequence>
                                    <xsd:element name="id" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                                    <xsd:element name="first-name" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                                    <xsd:element name="last-name" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                                    <xsd:element name="headline" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                                  </xsd:sequence>
                                </xsd:complexType>
                              </xsd:element>
                              <xsd:element name="creation-timestamp" minOccurs="0" maxOccurs="1" type="xsd:int"/>
                              <xsd:element name="relation-to-viewer" minOccurs="0" maxOccurs="1">
                                <xsd:complexType>
                                  <xsd:sequence>
                                    <xsd:element name="available-actions" minOccurs="0" maxOccurs="1">
                                      <xsd:complexType>
                                        <xsd:sequence>
                                          <xsd:element name="action" minOccurs="0" maxOccurs="1">
                                            <xsd:complexType>
                                              <xsd:sequence>
                                                <xsd:element name="code" minOccurs="0" maxOccurs="1" type="xsd:normalizedString"/>
                                              </xsd:sequence>
                                            </xsd:complexType>
                                          </xsd:element>
                                        </xsd:sequence>
                                        <xsd:attribute name="total" type="xsd:int" use="required"/>
                                      </xsd:complexType>
                                    </xsd:element>
                                  </xsd:sequence>
                                </xsd:complexType>
                              </xsd:element>
                            </xsd:sequence>
                          </xsd:complexType>
                        </xsd:element>
                      </xsd:sequence>
                      <xsd:attribute name="total" type="xsd:int" use="required"/>
                    </xsd:complexType>
                  </xsd:element>
                </xsd:schema>
        update-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="update">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:long" name="timestamp"/>
                        <xs:element type="xs:string" name="update-type"/>
                        <xs:element name="update-content">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="company">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:short" name="id"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                              <xs:element name="company-person-update">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="person">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:int" name="id"/>
                                          <xs:element type="xs:string" name="first-name"/>
                                          <xs:element type="xs:string" name="last-name"/>
                                          <xs:element type="xs:string" name="headline"/>
                                          <xs:element type="xs:anyURI" name="picture-url"/>
                                          <xs:element name="api-standard-profile-request">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:anyURI" name="url"/>
                                                <xs:element name="headers">
                                                  <xs:complexType>
                                                    <xs:sequence>
                                                      <xs:element name="http-header">
                                                        <xs:complexType>
                                                          <xs:sequence>
                                                            <xs:element type="xs:string" name="name"/>
                                                            <xs:element type="xs:string" name="value"/>
                                                          </xs:sequence>
                                                        </xs:complexType>
                                                      </xs:element>
                                                    </xs:sequence>
                                                    <xs:attribute type="xs:byte" name="total"/>
                                                  </xs:complexType>
                                                </xs:element>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                          <xs:element name="site-standard-profile-request">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:anyURI" name="url"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="action">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="code"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="old-position">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="title"/>
                                          <xs:element name="company">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:string" name="name"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="new-position">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="title"/>
                                          <xs:element name="company">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:short" name="id"/>
                                                <xs:element type="xs:string" name="name"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        products-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="products">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="product" maxOccurs="unbounded" minOccurs="0">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:short" name="id"/>
                              <xs:element type="xs:string" name="name"/>
                              <xs:element name="type">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="code"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                              <xs:element type="xs:byte" name="num-recommendations"/>
                              <xs:element name="recommendations" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="recommendation" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element name="recommender">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:string" name="id"/>
                                                <xs:element type="xs:string" name="first-name"/>
                                                <xs:element type="xs:string" name="last-name"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                          <xs:element type="xs:int" name="id"/>
                                          <xs:element type="xs:short" name="product-id"/>
                                          <xs:element type="xs:long" name="timestamp"/>
                                          <xs:element type="xs:string" name="text" minOccurs="0"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                  <xs:attribute type="xs:byte" name="count" use="optional"/>
                                  <xs:attribute type="xs:byte" name="start" use="optional"/>
                                </xs:complexType>
                              </xs:element>
                              <xs:element name="product-category">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="code"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                              <xs:element type="xs:anyURI" name="website-url"/>
                              <xs:element type="xs:string" name="disclaimer" minOccurs="0"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                      <xs:attribute type="xs:byte" name="total"/>
                      <xs:attribute type="xs:byte" name="count"/>
                      <xs:attribute type="xs:byte" name="start"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        networkStats-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="network-stats">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="property" maxOccurs="unbounded" minOccurs="0">
                          <xs:complexType>
                            <xs:simpleContent>
                              <xs:extension base="xs:short">
                                <xs:attribute type="xs:string" name="key" use="optional"/>
                              </xs:extension>
                            </xs:simpleContent>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                      <xs:attribute type="xs:byte" name="total"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        jobSuggestions-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="job-suggestions">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="jobs">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="job" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:int" name="id"/>
                                    <xs:element name="company">
                                      <xs:complexType mixed="true">
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="id" minOccurs="0"/>
                                          <xs:element type="xs:string" name="name" minOccurs="0"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="salary" minOccurs="0"/>
                                    <xs:element name="job-poster">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="id"/>
                                          <xs:element type="xs:string" name="first-name"/>
                                          <xs:element type="xs:string" name="last-name"/>
                                          <xs:element type="xs:string" name="headline"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="description-snippet"/>
                                    <xs:element type="xs:string" name="location-description"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                            <xs:attribute type="xs:byte" name="count"/>
                            <xs:attribute type="xs:byte" name="start"/>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        activity-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="activity">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="content-type"/>
                        <xs:element type="xs:string" name="body"/>
                      </xs:sequence>
                      <xs:attribute type="xs:string" name="locale"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        followedCompanies-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="companies">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="company" maxOccurs="unbounded" minOccurs="0">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:int" name="id"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                      <xs:attribute type="xs:byte" name="total"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        jobBookmarks-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="job-bookmarks">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="job-bookmark" maxOccurs="unbounded" minOccurs="0">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="is-applied"/>
                              <xs:element type="xs:string" name="is-saved"/>
                              <xs:element type="xs:long" name="saved-timestamp"/>
                              <xs:element name="job">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:int" name="id"/>
                                    <xs:element type="xs:string" name="active"/>
                                    <xs:element name="company">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:int" name="id"/>
                                          <xs:element type="xs:string" name="name"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="position">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="title"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="description-snippet"/>
                                    <xs:element type="xs:long" name="posting-timestamp"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                      <xs:attribute type="xs:byte" name="total"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        companyStatistics-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="company-statistics">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="status-update-statistics">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="views-by-month">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="view-by-month" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element name="date">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:short" name="year"/>
                                                <xs:element type="xs:byte" name="month"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                          <xs:element type="xs:byte" name="clicks" minOccurs="0"/>
                                          <xs:element type="xs:byte" name="likes" minOccurs="0"/>
                                          <xs:element type="xs:byte" name="comments" minOccurs="0"/>
                                          <xs:element type="xs:byte" name="shares" minOccurs="0"/>
                                          <xs:element type="xs:short" name="impressions" minOccurs="0"/>
                                          <xs:element type="xs:float" name="engagement" minOccurs="0"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                  <xs:attribute type="xs:byte" name="total"/>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="follow-statistics">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:byte" name="count"/>
                              <xs:element type="xs:byte" name="employee-count"/>
                              <xs:element type="xs:byte" name="non-employee-count"/>
                              <xs:element name="seniorities">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="seniority" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:byte" name="entry-key"/>
                                          <xs:element type="xs:byte" name="entry-value"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                  <xs:attribute type="xs:byte" name="total"/>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        updates-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="network">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="updates">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="update">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:long" name="timestamp"/>
                                    <xs:element type="xs:string" name="update-key"/>
                                    <xs:element type="xs:string" name="update-type"/>
                                    <xs:element name="update-content">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element name="person">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:string" name="id"/>
                                                <xs:element type="xs:string" name="first-name"/>
                                                <xs:element type="xs:string" name="last-name"/>
                                                <xs:element type="xs:string" name="headline"/>
                                                <xs:element type="xs:string" name="current-status"/>
                                                <xs:element name="api-standard-profile-request">
                                                  <xs:complexType>
                                                    <xs:sequence>
                                                      <xs:element type="xs:anyURI" name="url"/>
                                                      <xs:element name="headers">
                                                        <xs:complexType>
                                                          <xs:sequence>
                                                            <xs:element name="http-header">
                                                              <xs:complexType>
                                                                <xs:sequence>
                                                                  <xs:element type="xs:string" name="name"/>
                                                                  <xs:element type="xs:string" name="value"/>
                                                                </xs:sequence>
                                                              </xs:complexType>
                                                            </xs:element>
                                                          </xs:sequence>
                                                          <xs:attribute type="xs:byte" name="total"/>
                                                        </xs:complexType>
                                                      </xs:element>
                                                    </xs:sequence>
                                                  </xs:complexType>
                                                </xs:element>
                                                <xs:element name="site-standard-profile-request">
                                                  <xs:complexType>
                                                    <xs:sequence>
                                                      <xs:element type="xs:anyURI" name="url"/>
                                                    </xs:sequence>
                                                  </xs:complexType>
                                                </xs:element>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="is-commentable"/>
                                    <xs:element name="update-comments">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element name="update-comment">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:int" name="id"/>
                                                <xs:element type="xs:byte" name="sequence-number"/>
                                                <xs:element type="xs:long" name="timestamp"/>
                                                <xs:element type="xs:string" name="comment"/>
                                                <xs:element name="person">
                                                  <xs:complexType>
                                                    <xs:sequence>
                                                      <xs:element type="xs:string" name="id"/>
                                                      <xs:element type="xs:string" name="first-name"/>
                                                      <xs:element type="xs:string" name="last-name"/>
                                                      <xs:element type="xs:string" name="headline"/>
                                                      <xs:element name="api-standard-profile-request">
                                                        <xs:complexType>
                                                          <xs:sequence>
                                                            <xs:element type="xs:anyURI" name="url"/>
                                                            <xs:element name="headers">
                                                              <xs:complexType>
                                                                <xs:sequence>
                                                                  <xs:element name="http-header">
                                                                    <xs:complexType>
                                                                      <xs:sequence>
                                                                        <xs:element type="xs:string" name="name"/>
                                                                        <xs:element type="xs:string" name="value"/>
                                                                      </xs:sequence>
                                                                    </xs:complexType>
                                                                  </xs:element>
                                                                </xs:sequence>
                                                                <xs:attribute type="xs:byte" name="total"/>
                                                              </xs:complexType>
                                                            </xs:element>
                                                          </xs:sequence>
                                                        </xs:complexType>
                                                      </xs:element>
                                                      <xs:element name="site-standard-profile-request">
                                                        <xs:complexType>
                                                          <xs:sequence>
                                                            <xs:element type="xs:anyURI" name="url"/>
                                                          </xs:sequence>
                                                        </xs:complexType>
                                                      </xs:element>
                                                    </xs:sequence>
                                                  </xs:complexType>
                                                </xs:element>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                        <xs:attribute type="xs:byte" name="total"/>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="is-likable"/>
                                    <xs:element type="xs:string" name="is-liked"/>
                                    <xs:element type="xs:byte" name="num-likes"/>
                                    <xs:element name="likes">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element name="like">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element name="person">
                                                  <xs:complexType>
                                                    <xs:sequence>
                                                      <xs:element type="xs:string" name="id"/>
                                                      <xs:element type="xs:string" name="first-name"/>
                                                      <xs:element type="xs:string" name="last-name"/>
                                                      <xs:element type="xs:string" name="headline"/>
                                                    </xs:sequence>
                                                  </xs:complexType>
                                                </xs:element>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                        <xs:attribute type="xs:byte" name="total"/>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        mailboxItem-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="mailbox-item">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="recipients">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="recipient" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="person">
                                      <xs:complexType>
                                        <xs:simpleContent>
                                          <xs:extension base="xs:string">
                                            <xs:attribute type="xs:string" name="path" use="optional"/>
                                          </xs:extension>
                                        </xs:simpleContent>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="subject"/>
                        <xs:element type="xs:string" name="body"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        comment-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="comment">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="text"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        personShare-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="update">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="update-key"/>
                        <xs:element type="xs:anyURI" name="update-url"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        post-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="post">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="id"/>
                        <xs:element name="parent-group">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:int" name="id"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="type">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="creator">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="id"/>
                              <xs:element type="xs:string" name="first-name"/>
                              <xs:element type="xs:string" name="last-name"/>
                              <xs:element type="xs:string" name="headline"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="title"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        company-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="company">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:string" name="name"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        jobBookmark-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="job-bookmark">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="job">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="id"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        error-schema: |
                {
                    "type":"object",
                    "$schema": "http://json-schema.org/draft-03/schema",
                    "id": "http://jsonschema.net",
                    "required":false,
                    "properties":{
                        "errorCode": {
                            "type":"number",
                            "id": "http://jsonschema.net/errorCode",
                            "required":false
                        },
                        "message": {
                            "type":"string",
                            "id": "http://jsonschema.net/message",
                            "required":false
                        },
                        "requestId": {
                            "type":"string",
                            "id": "http://jsonschema.net/requestId",
                            "required":false
                        },
                        "status": {
                            "type":"number",
                            "id": "http://jsonschema.net/status",
                            "required":false
                        },
                        "timestamp": {
                            "type":"number",
                            "id": "http://jsonschema.net/timestamp",
                            "required":false
                        }
                    }
                }
        folowing-company-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="company">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:short" name="id"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        companyShare: |
                {
                  "required" : true ,
                  "$schema" : "http://json-schema.org/draft-03/schema" ,
                  "type" : "object" ,
                  "properties" : {
                    "visibility" : {
                      "type" : "object" ,
                      "required" : false ,
                      "properties" : {
                        "code" : {
                          "type" : "string" ,
                          "required" : false
                        }
                      }
                    } ,
                    "comment" : {
                      "type" : "string" ,
                      "required" : false
                    } ,
                    "content" : {
                      "type" : "object" ,
                      "required" : false ,
                      "properties" : {
                        "submitted-url" : {
                          "type" : "string" ,
                          "required" : false
                        } ,
                        "title" : {
                          "type" : "string" ,
                          "required" : false
                        } ,
                        "description" : {
                          "type" : "string" ,
                          "required" : false
                        } ,
                        "submitted‐image-url" : {
                          "type" : "string" ,
                          "required" : false
                        }
                      }
                    }
                  }
                }
        groupPost-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="post">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="title"/>
                        <xs:element type="xs:string" name="summary"/>
                        <xs:element name="content">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="submitted-url"/>
                              <xs:element type="xs:string" name="submitted-image-url"/>
                              <xs:element type="xs:string" name="title"/>
                              <xs:element type="xs:string" name="description"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        people: |
                {
                    "type":"object",
                    "$schema": "http://json-schema.org/draft-03/schema",
                    "id": "http://jsonschema.net",
                    "required":false,
                    "properties":{
                        "firstName": {
                            "type":"string",
                            "id": "http://jsonschema.net/firstName",
                            "required":false
                        },
                        "headline": {
                            "type":"string",
                            "id": "http://jsonschema.net/headline",
                            "required":false
                        },
                        "lastName": {
                            "type":"string",
                            "id": "http://jsonschema.net/lastName",
                            "required":false
                        },
                        "siteStandardProfileRequest": {
                            "type":"object",
                            "id": "http://jsonschema.net/siteStandardProfileRequest",
                            "required":false,
                            "properties":{
                                "url": {
                                    "type":"string",
                                    "id": "http://jsonschema.net/siteStandardProfileRequest/url",
                                    "required":false
                                }
                            }
                        }
                    }
                }
        companies-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="companies">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="company" maxOccurs="unbounded" minOccurs="0">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:float" name="id"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                            <xs:attribute type="xs:string" name="key" use="optional"/>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                      <xs:attribute type="xs:byte" name="total"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        company-about-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="company">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:short" name="id"/>
                        <xs:element type="xs:string" name="universal-name"/>
                        <xs:element type="xs:string" name="name"/>
                        <xs:element type="xs:string" name="ticker"/>
                        <xs:element type="xs:anyURI" name="logo-url"/>
                        <xs:element type="xs:string" name="description"/>
                        <xs:element name="company-type">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="industries">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="industry">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:byte" name="code"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="size"/>
                        <xs:element name="specialties">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="specialty" maxOccurs="unbounded" minOccurs="0"/>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:anyURI" name="blog-rss-url"/>
                        <xs:element type="xs:string" name="twitter-id"/>
                        <xs:element type="xs:anyURI" name="square-logo-url"/>
                        <xs:element name="locations">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="location" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="address">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="street1"/>
                                          <xs:element type="xs:string" name="city"/>
                                          <xs:element type="xs:int" name="postal-code"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="contact-info">
                                      <xs:complexType mixed="true">
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="phone1" minOccurs="0"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:short" name="founded-year"/>
                        <xs:element name="email-domains">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="email-domain"/>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:anyURI" name="website-url"/>
                        <xs:element name="status">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="employee-count-range">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        currentUser: |
                {
                    "type":"object",
                    "$schema": "http://json-schema.org/draft-03/schema",
                    "id": "http://jsonschema.net",
                    "required":false,
                    "properties":{
                        "firstName": {
                            "type":"string",
                            "id": "http://jsonschema.net/firstName",
                            "required":false
                        },
                        "headline": {
                            "type":"string",
                            "id": "http://jsonschema.net/headline",
                            "required":false
                        },
                        "lastName": {
                            "type":"string",
                            "id": "http://jsonschema.net/lastName",
                            "required":false
                        },
                        "siteStandardProfileRequest": {
                            "type":"object",
                            "id": "http://jsonschema.net/siteStandardProfileRequest",
                            "required":false,
                            "properties":{
                                "url": {
                                    "type":"string",
                                    "id": "http://jsonschema.net/siteStandardProfileRequest/url",
                                    "required":false
                                }
                            }
                        }
                    }
                }
        update-comment-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="update-comment">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="comment"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        is-liked-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="is-liked" type="xs:string"/>
                </xs:schema>
        currentUser-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="person">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:string" name="first-name"/>
                        <xs:element type="xs:string" name="last-name"/>
                        <xs:element type="xs:string" name="headline"/>
                        <xs:element name="location">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="name"/>
                              <xs:element name="country">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:short" name="code"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="industry"/>
                        <xs:element type="xs:byte" name="distance"/>
                        <xs:element name="relation-to-viewer">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:byte" name="distance"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:byte" name="num-recommenders"/>
                        <xs:element type="xs:string" name="current-status"/>
                        <xs:element type="xs:long" name="current-status-timestamp"/>
                        <xs:element name="connections">
                          <xs:complexType>
                            <xs:simpleContent>
                              <xs:extension base="xs:string">
                                <xs:attribute type="xs:byte" name="total"/>
                              </xs:extension>
                            </xs:simpleContent>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="summary"/>
                        <xs:element name="positions">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="position" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="title"/>
                                    <xs:element type="xs:string" name="summary"/>
                                    <xs:element name="start-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                          <xs:element type="xs:string" name="month"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="is-current"/>
                                    <xs:element name="company">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="educations">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="education" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="school-name"/>
                                    <xs:element type="xs:string" name="degree"/>
                                    <xs:element name="start-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="end-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="member-url-resources">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="member-url" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:anyURI" name="url"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="api-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                              <xs:element name="headers">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="http-header" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                          <xs:element type="xs:string" name="value"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="site-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:anyURI" name="picture-url"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        jobSearch-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="job-search">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="jobs">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="job" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:int" name="id"/>
                                    <xs:element name="position">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element name="location">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:string" name="name"/>
                                                <xs:element name="country">
                                                  <xs:complexType>
                                                    <xs:sequence>
                                                      <xs:element type="xs:string" name="code"/>
                                                    </xs:sequence>
                                                  </xs:complexType>
                                                </xs:element>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="job-poster">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="first-name"/>
                                          <xs:element type="xs:string" name="last-name"/>
                                          <xs:element name="relation-to-viewer">
                                            <xs:complexType>
                                              <xs:sequence>
                                                <xs:element type="xs:byte" name="distance"/>
                                              </xs:sequence>
                                            </xs:complexType>
                                          </xs:element>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="posting-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                          <xs:element type="xs:byte" name="month"/>
                                          <xs:element type="xs:byte" name="day"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="count"/>
                            <xs:attribute type="xs:byte" name="start"/>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        people-share-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="share">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="comment"/>
                        <xs:element name="content">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="title"/>
                              <xs:element type="xs:string" name="description"/>
                              <xs:element type="xs:string" name="submitted-url"/>
                              <xs:element type="xs:anyURI" name="submitted-image-url"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="visibility">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        person-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="person">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:string" name="first-name"/>
                        <xs:element type="xs:string" name="last-name"/>
                        <xs:element type="xs:string" name="headline"/>
                        <xs:element name="location">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="name"/>
                              <xs:element name="country">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:short" name="code"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="industry"/>
                        <xs:element type="xs:byte" name="distance"/>
                        <xs:element type="xs:byte" name="num-recommenders"/>
                        <xs:element type="xs:string" name="current-status"/>
                        <xs:element type="xs:long" name="current-status-timestamp"/>
                        <xs:element name="connections">
                          <xs:complexType>
                            <xs:simpleContent>
                              <xs:extension base="xs:string">
                                <xs:attribute type="xs:byte" name="total"/>
                              </xs:extension>
                            </xs:simpleContent>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="summary"/>
                        <xs:element name="positions">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="position" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="title"/>
                                    <xs:element type="xs:string" name="summary"/>
                                    <xs:element name="start-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                          <xs:element type="xs:string" name="month"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="is-current"/>
                                    <xs:element name="company">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="member-url-resources">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="member-url" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:anyURI" name="url"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="api-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                              <xs:element name="headers">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="http-header" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                          <xs:element type="xs:string" name="value"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="site-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:anyURI" name="picture-url"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
        job-xml: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="job">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:long" name="expiration-timestamp"/>
                        <xs:element name="company">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:int" name="id"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="position">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="title"/>
                              <xs:element name="location">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="name"/>
                                    <xs:element name="country">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="code"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="location-description"/>
                        <xs:element name="job-poster">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="id"/>
                              <xs:element type="xs:string" name="first-name"/>
                              <xs:element type="xs:string" name="last-name"/>
                              <xs:element type="xs:string" name="headline"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
securitySchemes: 
    - 
        apiKey: 
            type: x-apiKey
            describedBy: 
                headers: 
                    Authorization: 
                        type: string
                        required: false
                        repeat: false
securedBy: 
    - 
        apiKey
/people/~/group-memberships/{groupId}/posts{fieldSelectors}: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        groupId: 
            displayName: groupId
            type: string
            required: true
            repeat: false
    get: 
        description: |
            Returns a Group's Discussion Posts
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            role: 
                description: |
                    Filter for posts related to the caller. Valid only for group-memberships/{id}/posts resource.
                type: string
                required: true
                repeat: false
                enum: [creator, commenter, follower]
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
            category: 
                description: |
                    Category of posts.
                type: string
                required: false
                repeat: false
                enum: [discussion]
            modified-since: 
                description: |
                    Timestamp filter for posts created after the specified value.
                type: integer
                required: false
                repeat: false
                example: "1302727083000"
            order: 
                description: |
                    Sort order for posts.
                type: string
                required: false
                repeat: false
                enum: [recency, popularity]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: posts-xml
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/companies/{companyId}/num-followers: 
    uriParameters: 
        companyId: 
            displayName: companyId
            description: The unique internal numeric company identifier.
            type: string
            required: true
            repeat: false
    get: 
        queryParameters: 
            geographies: 
                description: See geographies for the valid values.
                type: string
                required: false
                repeat: false
                maxLength: 10
                example: af.eg
            jobFunc: 
                description: See job functions for the valid values.
                type: string
                required: false
                repeat: false
                maxLength: 10
                example: jobFunc=it
            industries: 
                description: See industry codes for the valid values.
                type: string
                required: false
                repeat: false
                maxLength: 10
                example: "47"
            companySizes: 
                description: Specify the size range for the company.
                type: string
                required: false
                repeat: false
                enum: [self, "1-10", "11-50", "51-200", "201-500", "501-1000", "1001-5000", "5001-10000", "10001"]
                maxLength: 10
                example: self
            seniorities: 
                description: Specify the level of seniority to target.
                type: string
                required: false
                repeat: false
                enum: [d, c, en, ic, m, o, p, tr, up, vp]
                example: c
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: companyShare-xml
                    application/json: 
                        schema: companyShare
                        example: |
                            {
                              "visibility" : {
                                "code" : "anyone"
                              } ,
                              "comment" : "Testing a full company share!" ,
                              "content" : {
                                "submitted-url" : "http://www.example.com/content.html" ,
                                "title" : "Test Share with Content" ,
                                "description" : "content description" ,
                                "submitted‐image-url" : "http://www.example.com/image.jpg"
                              }
                            }
        protocols: [HTTP]
/people/~/network/updates: 
    get: 
        description: Retreive updates.
        queryParameters: 
            before: 
                description: "timestamp before which to retrieve updates for (Ex: 1243834824000) note: precision is milliseconds since the epoch"
                type: string
                required: false
                repeat: false
                example: "1243834824000"
            scope: 
                description: self to return member's feed. Omitted to return aggregated network feed.
                type: string
                required: false
                repeat: false
                example: self
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            after: 
                description: "timestamp after which to retrieve updates for (Ex: 1243834824000) note: precision is milliseconds since the epoch"
                type: string
                required: false
                repeat: false
                example: "1243834824000"
            type: 
                description: Any valid Network Update Type from the table below. Types must be in all capital letters. To specify more than one Network Update type, add the type parameter to the resource URL for each type.
                type: string
                required: false
                repeat: false
                enum: [PROF, CCEM, APPS, SVPR, STAT, JGRP, MSFC, VIRL, PREC, PICU, JOBP, CONN, CMPY, SHAR, APPM, PFOL, PRFX]
                example: JOBP
            show-hidden-members: 
                description: true or false. default is false. Whether to display updates from people the member has chosen to "hide" from their update stream.
                type: boolean
                required: false
                repeat: false
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: update-xml
                        example: |
                            <update>
                               <timestamp>1315338683355</timestamp>
                               <update-type>CMPY</update-type>
                               <update-content>
                                  <company>
                                     <id>1337</id>
                                     <name>LinkedIn</name>
                                  </company>
                                  <company-person-update>
                                      <person>
                                          <id>14381178</id>
                                              <first-name>Patrick</first-name>
                                              <last-name>Smith</last-name>
                                              <headline>Enterprise Relationship Manager at LinkedIn</headline>
                                              <picture-url>http://media.linkedin.com/mpr/mprx/0_gPLYkP6SpokSOnUc0-vDkA9DYulmpzUc0tA3krFxTW5YiluBAvztoKPlKGAlx-sRyKF8wBMg5HkD</picture-url>
                                              <api-standard-profile-request>
                                                  <url>http://api.linkedin.com/v1/people/14381178</url>
                                                  <headers total="1">
                                                       <http-header>
                                                          <name>x-li-auth-token</name>
                                                          <value>name:4gRT</value>
                                                       </http-header>
                                                  </headers>
                                              </api-standard-profile-request>
                                              <site-standard-profile-request>
                                                    <url>http://www.linkedin.com/profile?viewProfile=&amp;key=14381178&amp;authToken=4gRT&amp;authType=name&amp;trk=api*</url>
                                              </site-standard-profile-request>
                                         </person>
                                         <action>
                                            <code>joined</code>
                                         </action>
                                         <old-position>
                                              <title>Actor</title>
                                              <company>
                                                   <name>IndependentContractor</name>
                                              </company>
                                         </old-position>
                                         <new-position>
                                              <title>Enterprise Relationship Manager</title>
                                              <company>
                                                   <id>1337</id>
                                                   <name>LinkedIn</name>
                                              </company>
                                         </new-position>
                                     </company-person-update>
                                 </update-content>
                            </update>
                    application/json: 
        protocols: [HTTP]
    /key={NetworkUpdateKey}/likes: 
        description: |
            This is base resource type described common request and response headers and error response codes
        uriParameters: 
            NetworkUpdateKey: 
                displayName: NetworkUpdateKey
                type: string
                required: true
                repeat: false
        get: 
            description: Use a similar syntax to retrive the complete list of people who liked an update
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            queryParameters: 
                format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            responses: 
                "200": 
                    description: |
                        Request succeeded  
                    body: 
                        application/xml: 
                            schema: updates-xml
                            example: |
                                <network>
                                  <updates total="1">
                                    <update>
                                      <timestamp>1257187431000</timestamp>
                                      <update-key>STAT-54321-11</update-key>
                                      <update-type>STAT</update-type>
                                      <update-content>
                                        <person>
                                          <id>abcdefg</id>
                                          <first-name>Richard</first-name>
                                          <last-name>Brautigan</last-name>
                                          <headline>Author</headline>
                                          <current-status>is thinking about rivers.</current-status>
                                          <api-standard-profile-request>
                                            <url>http://api.linkedin.com/v1/people/abcdefg:full</url>
                                            <headers total="1">
                                              <http-header>
                                                <name>x-li-auth-token</name>
                                                <value>name:abcdefg</value>
                                              </http-header>
                                            </headers>
                                          </api-standard-profile-request>
                                          <site-standard-profile-request>
                                            <url>http://www.linkedin.com/profile?viewProfile=&amp;key=abcdefg&amp;authToken=abcdefg&amp;authType=name</url>
                                          </site-standard-profile-request>
                                        </person>
                                      </update-content>
                                      <is-commentable>true</is-commentable>
                                      <update-comments total="1">
                                        <update-comment>
                                          <id>22995112</id>
                                          <sequence-number>0</sequence-number>
                                          <timestamp>1284737901266</timestamp>
                                          <comment>You've got me thinking about trout.</comment>
                                          <person>
                                            <id>zyxwvut</id>
                                            <first-name>Gertrude</first-name>
                                            <last-name>Stein</last-name>
                                            <headline>Author</headline>
                                            <api-standard-profile-request>
                                              <url>http://api.linkedin.com/v1/people/dsfsf:full</url>
                                              <headers total="1">
                                                <http-header>
                                                  <name>x-li-auth-token</name>
                                                  <value>name:dsfsf</value>
                                                </http-header>
                                              </headers>
                                            </api-standard-profile-request>
                                            <site-standard-profile-request>
                                              <url>http://www.linkedin.com/profile?viewProfile=&amp;key=dsfsf&amp;authToken=dsfsf&amp;authType=name</url>
                                            </site-standard-profile-request>
                                          </person>
                                        </update-comment>
                                      </update-comments>
                                      <is-likable>true</is-likable>
                                      <is-liked>true</is-liked>
                                      <num-likes>1</num-likes>
                                      <likes total="1">
                                        <like>
                                          <person>
                                            <id>POfcN6JhcU</id>
                                            <first-name>George</first-name>
                                            <last-name>Washington</last-name>
                                            <headline>President, United States of America</headline>
                                          </person>
                                        </like>
                                      </likes> 
                                    </update>
                                  </updates>
                                </network>
                        application/json: 
                        text/xml: 
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
    /key={NetworkUpdateKey}/update-comments: 
        description: |
            This is base resource type described common request and response headers and error response codes
        uriParameters: 
            NetworkUpdateKey: 
                displayName: NetworkUpdateKey
                type: string
                required: true
                repeat: false
        get: 
            description: By default, a network update containing more than 10 comments will only return you the most recent five. To retrieve all comments for a given network update
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            queryParameters: 
                format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            responses: 
                "200": 
                    description: |
                        Request succeeded  
                    body: 
                        application/json: 
                        text/xml: 
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
        post: 
            description: |
                When you want to post a new comment to an existing update:
                Ensure update/is-commentable is set to true
                Take the update/update-key from an existing update and POST to the following URL structure:
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            body: 
                application/xml: 
                    schema: update-comment-xml
                    example: |
                        <?xml version='1.0' encoding='UTF-8'?>
                        <update-comment>
                          <comment>Save me a trout, Richard!</comment>
                        </update-comment>
            responses: 
                "200": 
                    description: |
                        Request succeeded
                    body: 
                        application/json: 
                        text/xml: 
                "201": 
                    description: |
                        Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                    body: 
                        application/json: 
                        text/xml: 
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
    /key={NetworkUpdateKey}/is-liked: 
        description: |
            This is base resource type described common request and response headers and error response codes
        uriParameters: 
            NetworkUpdateKey: 
                displayName: NetworkUpdateKey
                type: string
                required: true
                repeat: false
        put: 
            description: A successful comment PUT will return a 201 Content Created status code.
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            body: 
                application/xml: 
                    schema: is-liked-xml
                    example: |
                        <?xml version='1.0' encoding='UTF-8'?>
                        <is-liked>true</is-liked>
            responses: 
                "200": 
                    description: |
                        Request succeeded
                    body: 
                        application/json: 
                        text/xml: 
                "201": 
                    description: |
                        Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.   
                    body: 
                        application/json: 
                        text/xml: 
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
/people/~/shares: 
    description: |
        This is base resource type described common request and response headers and error response codes
    post: 
        description: Post a share
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: personShare-xml
                example: |
                    <share>
                      <comment>Check out the LinkedIn Share API!</comment>
                      <content>
                        <title>LinkedIn Developers Documentation On Using the Share API</title>
                        <description>Leverage the Share API to maximize engagement on user-generated content on LinkedIn</description>
                        <submitted-url>https://developer.linkedin.com/documents/share-api</submitted-url>
                        <submitted-image-url>http://m3.licdn.com/media/p/3/000/124/1a6/089a29a.png</submitted-image-url> 
                      </content>
                      <visibility> 
                        <code>anyone</code> 
                      </visibility>
                    </share>
            application/json: 
        responses: 
            "200": 
                description: |
                    Request succeeded
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/url={publicProfileUrl}/connections{fieldSelectors}: 
    displayName: Connections API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        publicProfileUrl: 
            displayName: publicProfileUrl
            type: string
            required: true
            repeat: false
    get: 
        description: |
            Returns a list of 1st degree connections for a user who has granted access to his/her accoun
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
            modified: 
                description: |
                    Values are updated or new.
                type: string
                required: false
                repeat: false
                enum: [updated, new]
            modified-since: 
                description: |
                    Value as a Unix time stamp of milliseconds since epoch.
                type: integer
                required: false
                repeat: false
                minimum: 0
                example: "1267401600000"
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: connections-xml
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/url={publicProfileUrl}{fieldSelectors}: 
    displayName: Profile API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        publicProfileUrl: 
            displayName: publicProfileUrl
            type: string
            required: true
            repeat: false
    get: 
        description: |
            Returns profile of user by URL
        queryParameters: 
            secure-urls: 
                description: |
                    secure-urls query parameter indicates that you want the URLs in your response to be HTTPS
                type: boolean
                required: false
                repeat: false
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: person-xml
                    application/json: 
        protocols: [HTTP]
/people/~/connections{fieldSelectors}: 
    displayName: Connections API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        description: |
            Returns a list of 1st degree connections for a user who has granted access to his/her accoun
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
            modified: 
                description: |
                    Values are updated or new.
                type: string
                required: false
                repeat: false
                enum: [updated, new]
            modified-since: 
                description: |
                    Value as a Unix time stamp of milliseconds since epoch.
                type: integer
                required: false
                repeat: false
                minimum: 0
                example: "1267401600000"
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: connections-xml
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/jobs: 
    displayName: Job Lookup API
    description: |
        This is base resource type described common request and response headers and error response codes
    post: 
        description: Post a job
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
            Content-Type: 
                type: string
                required: false
                repeat: false
                enum: [text/xml]
        body: 
            application/xml: 
                schema: job-xml
                example: |
                    <job>
                      <partner-job-id>LIJ-13239292</partner-job-id>
                      <contract-id>1234</contract-id>
                      <customer-job-code>DE247X</customer-job-code>
                      <company>
                        <id>1234</id>
                        <name>Company ABC</name>
                        <description>A great company</description>
                      </company>
                      <position>
                        <title>Chief Architect</title>
                        <description>This is a great job.</description>
                        <skills-and-experience>Programming, financial analysis, and  thought leadership.</skills-and-experience>
                        <location>
                         <country>
                           <code>us</code>
                          </country>
                          <postal-code>10012</postal-code>
                          <name>Midtown Manhattan</name>
                        </location>
                        <job-functions>
                          <job-function>
                            <code>acct</code>
                          </job-function>
                                <job-function>
                                  <code>dsgn</code>
                                </job-function>
                            </job-functions>
                        <industries>
                          <industry>
                            <code>38</code>
                          </industry>
                          <industry>
                            <code>44</code>
                          </industry>
                        </industries>
                        <job-type>
                          <code>C</code>
                        </job-type>
                        <experience-level>
                          <code>4</code>
                        </experience-level>
                      </position>
                      <salary>$100,000-120,000 per year</salary>
                      <referral-bonus>$5,000 for employees</referral-bonus>
                      <poster>
                        <display>true</display>
                        <role>
                          <code>R</code>
                        </role>
                            <email-address>user@contract.com</email-address>
                      </poster>
                      <how-to-apply>
                        <application-url>http://www.linkedin.com</application-url>
                      </how-to-apply>
                      <tracking-pixel-url>http://www.linkedin.com/track.gif</tracking-pixel-url>
                    </job>
            application/json: 
        responses: 
            "200": 
                description: |
                    Request succeeded
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "402": 
                description: No job inventory available
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "409": 
                description: |
                    Duplicate job.Happens when you try to Post a New Job, but another job with the same Partner Job Id already exists. Partner Job Id has to be unique. So either repost with a new Partner Job Id, or edit the existing job.
                    Job is closed. Happens when you try to update or renew a job that has already been closed. Renew is not ReOpen. To reopen a closed job, post it again.
                    Job is expired. Happens when you try to update a job that has been expired. 
                    Make a renew call. You can edit and renew a job in the same call.
        protocols: [HTTP]
    /partner-job-id={partnerJobId}: 
        uriParameters: 
            partnerJobId: 
                displayName: partnerJobId
                description: Unique ID for the job created by the partner (must be unique for each job posted).
                type: string
                required: true
                repeat: false
                maxLength: 50
        get: 
            responses: 
                "200": 
                    body: 
                        application/xml: 
                            schema: jobUpdate-xml
                        application/json: 
            protocols: [HTTP]
        put: 
            description: Edit or renew a job
            body: 
                application/xml: 
                    schema: jobUpdate-xml
                    example: |
                        <job>
                          <position> 
                            <description>This is a great job.</description>
                          </position>
                          <compensation>
                            <salary>
                              <description>$100k per year + benefits</description>
                            </salary>
                          </compensation>
                        </job>
                application/json: 
            responses: 
                "200": 
            protocols: [HTTP]
        delete: 
            description: |
                Close calls should not include XML; only the URL is required.
                An HTTP DELETE must be used to close a job.
            protocols: [HTTP]
    /{jobId}{fieldSelectors}: 
        description: |
            Describes field selectors uri path parameter
        uriParameters: 
            jobId: 
                displayName: Job ID
                description: |
                    The unique identifier for a job.
                type: string
                required: true
                repeat: false
            fieldSelectors: 
                displayName: Field Selectors
                description: |
                    Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                    By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                    It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                    a critical factor in any web application, and more so for anyone relying on external APIs.
                    
                    Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                    contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                    your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                    
                    Examples
                    --------
                    To get a member's ID, first name, last name, and industry:
                      `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                    
                    Or the same set of information for their connections:
                      `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                    
                    Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                    job titles and not the rest of the information about positions:
                      `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                    
                    Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                    similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                    current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                    
                      `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
                type: string
                required: false
                repeat: false
                example: ":(id,first-name,last-name,industry)"
        get: 
            description: |
                Returns Job info
            responses: 
                "200": 
                    body: 
                        application/xml: 
                            schema: jobGet-xml
                        application/json: 
            protocols: [HTTP]
/companies/{companyId}/is-company-share-enabled: 
    description: |
        This is base resource type described common request and response headers and error response codes
    uriParameters: 
        companyId: 
            displayName: companyId
            description: The unique internal numeric company identifier.
            type: string
            required: true
            repeat: false
    get: 
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/~/network/network-stats: 
    description: |
        This is base resource type described common request and response headers and error response codes
    get: 
        description: Information about the member's network, such as how many connections they have one and two degrees away.
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: networkStats-xml
                        example: |
                            <network-stats total="2">
                              <property key="degree-1-count">123</property>
                              <property key="degree-2-count">13633</property>
                            </network-stats>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/~/mailbox: 
    description: |
        This is base resource type described common request and response headers and error response codes
    post: 
        description: |
            This call requires that you identify only the person being invited. The inviter will always come from the access token you use when you make the call. There are two methods of identifying the user being invited:
            Member ID + auth token: If the invitee was found using a search API call, then the search result will have included the member ID and auth token to make the API call. Use both of those to identify the member to invite.
            Email: For all other cases, you can use email address to identify the member to invite.
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: mailboxItem-xml
                example: |
                    <?xml version='1.0' encoding='UTF-8'?>
                    <mailbox-item>
                      <recipients>
                        <recipient>
                          <person path='/people/~'/>
                        </recipient>
                        <recipient>
                          <person path="/people/abcdefg" />
                        </recipient>
                      </recipients>
                      <subject>Congratulations on your new position.</subject>
                      <body>You're certainly the best person for the job!</body>
                    </mailbox-item>
            application/json: 
        responses: 
            "200": 
                description: |
                    Request succeeded
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/companies/{companyId}{fieldSelectors}: 
    description: |
        This is base resource type described common request and response headers and error response codes
    uriParameters: 
        companyId: 
            displayName: companyId
            description: The unique internal numeric company identifier.
            type: string
            required: true
            repeat: false
        fieldSelectors: 
            displayName: fieldSelectors
            type: string
            required: true
            repeat: false
    get: 
        description: Returns a single company if found.
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: company-about-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <company>
                              <id>1337</id>
                              <universal-name>linkedin</universal-name>
                              <name>LinkedIn</name>
                              <ticker>LNKD</ticker>
                              <logo-url>http://media.linkedin.com/mpr/mpr/p/2/000/072/3f9/35d2127.png</logo-url>
                              <description>LinkedIn takes your professional network online, giving you access to people, jobs and opportunities like never before. Built upon trusted connections and relationships, LinkedIn has established the worldÕs largest and most powerful professional network. Currently, more than 200 million professionals are on LinkedIn, including executives from all five hundred of the Fortune 500 companies, as well as a wide range of household names in technology, financial services, media, consumer packaged goods, entertainment, and numerous other industries. LinkedIn is backed by world-class investors including Sequoia Capital, Greylock, the European Founders Fund, Bessemer Venture Partners, Bain Capital, Goldman Sachs, SAP Ventures, and The McGraw-Hill Companies</description>
                              <company-type>
                                <code>P</code>
                                <name>Privately Held</name>
                              </company-type>
                              <industries total="1">
                                <industry>
                                  <code>6</code>
                                  <name>Internet</name>
                                </industry>
                              </industries>
                              <size>501-1000</size>
                              <specialties total="8">
                                <specialty>Online Professional Network</specialty>
                                <specialty>Jobs</specialty>
                                <specialty>People Search</specialty>
                                <specialty>Company Search</specialty>
                                <specialty>Address Book</specialty>
                                <specialty>Advertising</specialty>
                                <specialty>Professional Identity</specialty>
                                <specialty>Group Collaboration</specialty>
                              </specialties>
                              <blog-rss-url>http://feeds.feedburner.com/LinkedInBlog</blog-rss-url>
                              <twitter-id>linkedin</twitter-id>
                              <square-logo-url>http://media.linkedin.com/mpr/mpr/p/3/000/072/3db/1283f2d.png</square-logo-url>
                              <locations total="15">
                                <location>
                                  <address>
                                    <street1>2029 Stierlin Court</street1>
                                    <city>Mountain View</city>
                                    <postal-code>94043</postal-code>
                                  </address>
                                  <contact-info>
                                  </contact-info>
                                </location>
                                <location>
                                  <address>
                                    <street1>2126 N 117th Ave</street1>
                                    <city>Omaha</city>
                                    <postal-code>68164</postal-code>
                                  </address>
                                  <contact-info>
                                    <phone1>(402) 452-2320</phone1>
                                  </contact-info>
                                </location>
                                <location>
                                  <address>
                                    <street1>15 Shady Brook Lane</street1>
                                    <city>Belmont</city>
                                    <postal-code>02478</postal-code>
                                  </address>
                                  <contact-info>
                                  </contact-info>
                                </location>
                                <location>
                                  <address>
                                    <street1>2126 N 117th Ave</street1>
                                    <city>Omaha</city>
                                    <postal-code>68164</postal-code>
                                  </address>
                                  <contact-info>
                                    <phone1>(402) 452-2320</phone1>
                                  </contact-info>
                                </location>
                                <location>
                                  <address>
                                    <street1>2029 Stierlin Court</street1>
                                    <city>Mountain View</city>
                                    <postal-code>94043</postal-code>
                                  </address>
                                  <contact-info>
                                  </contact-info>
                                </location>
                                <location>
                                  <address>
                                    <street1>2029 Stierlin Court</street1>
                                    <city>Mountain View</city>
                                    <postal-code>94043</postal-code>
                                  </address>
                                  <contact-info>
                                  </contact-info>
                                </location>
                                <location>
                                  <address>
                                    <street1>30 S. Wacker Drive</street1>
                                    <city>Chicago</city>
                                    <postal-code>60606</postal-code>
                                  </address>
                                  <contact-info>
                                  </contact-info>
                                </location>
                              </locations>
                              <founded-year>2003</founded-year>
                              <email-domains total="1">
                                <email-domain>linkedin.com</email-domain>
                              </email-domains>
                              <website-url>http://www.linkedin.com</website-url>
                              <status>
                               <code>OPR</code>
                               <name>Operating</name>
                              </status>
                              <employee-count-range>
                                <code>F</code>
                                <name>501-1000</name>
                              </employee-count-range>
                            </company>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/~/following/companies: 
    description: |
        This is base resource type described common request and response headers and error response codes
    get: 
        description: Retrieve a list of companies a member is following
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: companies-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <companies count="10" start="0">
                              <company>
                                <id>49648</id>
                                <name>Merix Financial</name>
                              </company>
                              <company>
                                <id>118370</id>
                                <name>Movaya Wireless</name>
                              </company>
                              <company>
                                <id>119265</id>
                                <name>Maison Martin Margiela</name>
                              </company>
                              <company>
                                <id>112571</id>
                                <name>CoActive</name>
                              </company>
                              <company>
                                <id>97548</id>
                                <name>Actronic</name>
                              </company>
                              <company>
                                <id>1115987</id>
                                <name>EELA</name>
                              </company>
                              <company>
                                <id>2204291</id>
                                <name>OfftheHookHats.org</name>
                              </company>
                              <company>
                                <id>1973202</id>
                                <name>Ministry of Communication and Information Technology</name>
                              </company>
                              <company>
                                <id>2102550</id>
                                <name>Lundsbergs skola</name>
                              </company>
                              <company>
                                <id>1086137</id>
                                <name>Netsolve Limited</name>
                              </company>
                            </companies>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    post: 
        description: Start following a company
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: company-xml
                example: |
                    <company>
                      <id>162479</id>
                      <name>Apple</name>
                    </company>
            application/json: 
        responses: 
            "200": 
                description: |
                    Request succeeded
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    /id={id}: 
        description: |
            This is base resource type described common request and response headers and error response codes
        uriParameters: 
            id: 
                displayName: id
                type: string
                required: true
                repeat: false
        delete: 
            description: Stop following a company
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            responses: 
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "204": 
                    description: |
                        Your request to DELETE a record was successful
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
/companies/{companyId}/company-statistics: 
    description: |
        This is base resource type described common request and response headers and error response codes
    uriParameters: 
        companyId: 
            displayName: companyId
            description: The unique internal numeric company identifier.
            type: string
            required: true
            repeat: false
    get: 
        description: The Company Statistics API provides the ability to retrieve statistics for a particular company page. These stats can give you insights on both company share and follower metrics. Currently, the numbers provided are not real-time. The analytics breakdown for a company page is provided on a daily basis.
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: companyStatistics-xml
                        example: |
                            <company-statistics>
                              <status-update-statistics>
                                <views-by-month total="12">
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>11</month>
                                    </date>
                                    <clicks>1</clicks>
                                    <likes>0</likes>
                                    <comments>0</comments>
                                    <shares>0</shares>
                                    <impressions>150</impressions>
                                    <engagement>0.006666666666666667</engagement>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>10</month>
                                    </date>
                                    <clicks>0</clicks>
                                    <likes>1</likes>
                                    <comments>1</comments>
                                    <shares>0</shares>
                                    <impressions>654</impressions>
                                    <engagement>0.0030581039755351682</engagement>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>9</month>
                                    </date>
                                    <clicks>1</clicks>
                                    <likes>3</likes>
                                    <comments>2</comments>
                                    <shares>0</shares>
                                    <impressions>4463</impressions>
                                    <engagement>0.0013443871835088505</engagement>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>8</month>
                                    </date>
                                    <clicks>15</clicks>
                                    <likes>16</likes>
                                    <comments>71</comments>
                                    <shares>1</shares>
                                    <impressions>7106</impressions>
                                    <engagement>0.01449479313256403</engagement>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>7</month>
                                    </date>
                                    <clicks>0</clicks>
                                    <likes>0</likes>
                                    <comments>0</comments>
                                    <shares>0</shares>
                                    <impressions>0</impressions>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>6</month>
                                    </date>
                                    <clicks>0</clicks>
                                    <likes>0</likes>
                                    <comments>0</comments>
                                    <shares>0</shares>
                                    <impressions>0</impressions>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>5</month>
                                    </date>
                                    <clicks>0</clicks>
                                    <likes>0</likes>
                                    <comments>0</comments>
                                    <shares>0</shares>
                                    <impressions>0</impressions>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>4</month>
                                    </date>
                                    <clicks>0</clicks>
                                    <likes>0</likes>
                                    <comments>0</comments>
                                    <shares>0</shares>
                                    <impressions>0</impressions>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>3</month>
                                    </date>
                                    <clicks>0</clicks>
                                    <likes>0</likes>
                                    <comments>0</comments>
                                    <shares>0</shares>
                                    <impressions>0</impressions>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>2</month>
                                    </date>
                                    <clicks>0</clicks>
                                    <likes>0</likes>
                                    <comments>0</comments>
                                    <shares>0</shares>
                                    <impressions>0</impressions>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2012</year>
                                      <month>1</month>
                                    </date>
                                    <clicks>0</clicks>
                                    <likes>0</likes>
                                    <comments>0</comments>
                                    <shares>0</shares>
                                    <impressions>0</impressions>
                                  </view-by-month>
                                  <view-by-month>
                                    <date>
                                      <year>2011</year>
                                      <month>12</month>
                                    </date>
                                  </view-by-month>
                                </views-by-month>
                              </status-update-statistics>
                              <follow-statistics>
                                <count>11</count>
                                <employee-count>0</employee-count>
                                <non-employee-count>11</non-employee-count>
                                <seniorities total="11">
                                  <seniority>
                                    <entry-key>4</entry-key>
                                    <entry-value>5</entry-value>
                                  </seniority>
                                  <seniority>
                                    <entry-key>3</entry-key>
                                    <entry-value>4</entry-value>
                                  </seniority>
                                  <seniority>
                                    <entry-key>6</entry-key>
                                    <entry-value>1</entry-value>
                                  </seniority>
                                  <seniority>
                                    <entry-key>0</entry-key>
                                    <entry-value>0</entry-value>
                                  </seniority>
                            	 </seniorities>
                                </follow-statistics>
                            </company-statistics>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/companies/{companyId}/products{fieldSelectors}: 
    description: |
        This is base resource type described common request and response headers and error response codes
    uriParameters: 
        fieldSelectors: 
            displayName: fieldSelectors
            type: string
            required: true
            repeat: false
        companyId: 
            displayName: companyId
            description: The unique internal numeric company identifier.
            type: string
            required: true
            repeat: false
    get: 
        description: |
            Use the Company Products API to:
            Return a list of products and services supported by a company
            Return recommendations for a particular product
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: products-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <products total="32" count="5" start="0">
                              <product>
                                <id>1353</id>
                                <name>LinkedIn Content Ads</name>
                                <type>
                                  <code>P</code>
                                  <name>PRODUCT</name>
                                </type>
                                <num-recommendations>2</num-recommendations>
                                <recommendations count="2" start="0">
                                  <recommendation>
                                    <recommender>
                                      <id>G4HI670roP</id>
                                      <first-name>Jane</first-name>
                                      <last-name>Doe</last-name>
                                    </recommender>
                                    <id>22974</id>
                                    <product-id>1353</product-id>
                                    <timestamp>1292234549556</timestamp>
                                  </recommendation>
                                  <recommendation>
                                    <recommender>
                                      <id>Fmfl3zkirV</id>
                                      <first-name>Alex</first-name>
                                      <last-name>Jones</last-name>
                                    </recommender>
                                    <id>3463</id>
                                    <product-id>1353</product-id>
                                    <timestamp>1289225062991</timestamp>
                                  </recommendation>
                                </recommendations>
                                <product-category>
                                  <code>INT</code>
                                  <name>Internet</name>
                                </product-category>
                                <website-url>http://marketing.linkedinlabs.com/solutions/</website-url>
                              </product>
                              <product>
                                <id>1355</id>
                                <name>LinkedIn Polls Sponsorship</name>
                                <type>
                                  <code>P</code>
                                  <name>PRODUCT</name>
                                </type>
                                <num-recommendations>2</num-recommendations>
                                <recommendations count="2" start="0">
                                  <recommendation>
                                    <recommender>
                                      <id>Rh5L39Whxb</id>
                                      <first-name>John</first-name>
                                      <last-name>Smith</last-name>
                                    </recommender>
                                    <id>27619</id>
                                    <product-id>1355</product-id>
                                    <timestamp>1292992221392</timestamp>
                                    <text>Great Tool, with Polls Sponsorship our brands will be more dynamic .</text>
                                  </recommendation>
                                  <recommendation>
                                    <recommender>
                                      <id>bkVEjNay9w</id>
                                      <first-name>Ann</first-name>
                                      <last-name>White</last-name>
                                    </recommender>
                                    <id>8867</id>
                                    <product-id>1355</product-id>
                                    <timestamp>1289981830700</timestamp>
                                    <text>It is a good product. I recommend this product. User can post a poll option should be there.</text>
                                  </recommendation>
                                </recommendations>
                                <product-category>
                                  <code>INT</code>
                                  <name>Internet</name>
                                </product-category>
                                <website-url>http://www.linkedin.com/opensocialInstallation/preview?_ch_panel_id=1&amp;_applicationId=1900</website-url>
                              </product>
                              <product>
                                <id>1358</id>
                                <name>LinkedIn Events Sponsorship</name>
                                <type>
                                  <code>P</code>
                                  <name>PRODUCT</name>
                                </type>
                                <num-recommendations>0</num-recommendations>
                                <product-category>
                                  <code>MARKET</code>
                                  <name>Marketing &amp; Advertising</name>
                                </product-category>
                                <website-url>http://marketing.linkedin.com/events/</website-url>
                              </product>
                              <product>
                                <id>1436</id>
                                <name>LinkedIn</name>
                                <type>
                                  <code>P</code>
                                  <name>PRODUCT</name>
                                </type>
                                <num-recommendations>53</num-recommendations>
                                <recommendations count="3" start="0">
                                  <recommendation>
                                    <recommender>
                                      <id>ZZfj0hLcmb</id>
                                      <first-name>Mike</first-name>
                                      <last-name>Last</last-name>
                                    </recommender>
                                    <id>56231</id>
                                    <product-id>1436</product-id>
                                    <timestamp>1300369622727</timestamp>
                                  </recommendation>
                                  <recommendation>
                                    <recommender>
                                      <id>OcU4BIwnvx</id>
                                      <first-name>Juan</first-name>
                                      <last-name>Gomez</last-name>
                                    </recommender>
                                    <id>84383</id>
                                    <product-id>1436</product-id>
                                    <timestamp>1306340637027</timestamp>
                                  </recommendation>
                                  <recommendation>
                                    <recommender>
                                      <id>pfEkdotMmy</id>
                                      <first-name>Paul</first-name>
                                      <last-name>Tim</last-name>
                                    </recommender>
                                    <id>74292</id>
                                    <product-id>1436</product-id>
                                    <timestamp>1304503262773</timestamp>
                                    <text>this is good one</text>
                                  </recommendation>
                                </recommendations>
                                <product-category>
                                  <code>INT</code>
                                  <name>Internet</name>
                                </product-category>
                                <website-url>http://www.linkedin.com</website-url>
                              </product>
                              <product>
                                <id>1437</id>
                                <name>LinkedIn Mobile</name>
                                <type>
                                  <code>P</code>
                                  <name>PRODUCT</name>
                                </type>
                                <num-recommendations>16</num-recommendations>
                                <recommendations count="3" start="0">
                                  <recommendation>
                                    <recommender>
                                      <id>Rh5L39Whxb</id>
                                      <first-name>Jim</first-name>
                                      <last-name>Barr</last-name>
                                    </recommender>
                                    <id>6444</id>
                                    <product-id>1437</product-id>
                                    <timestamp>1289511725870</timestamp>
                                    <text></text>
                                  </recommendation>
                                  <recommendation>
                                    <recommender>
                                      <id>IWZk3OIvZR</id>
                                      <first-name>Liz</first-name>
                                      <last-name>Was</last-name>
                                    </recommender>
                                    <id>77788</id>
                                    <product-id>1437</product-id>
                                    <timestamp>1305153209849</timestamp>
                                    <text>Great, easy to use app that allows you to build your network on the go as well as post updates and keep in touch. One of the most used apps on my iPhone!</text>
                                  </recommendation>
                                  <recommendation>
                                    <recommender>
                                      <id>jFYCuJLixi</id>
                                      <first-name>Al</first-name>
                                      <last-name>Saiz</last-name>
                                    </recommender>
                                    <id>74250</id>
                                    <product-id>1437</product-id>
                                    <timestamp>1304497741316</timestamp>
                                  </recommendation>
                                </recommendations>
                                <product-category>
                                  <code>INT</code>
                                  <name>Internet</name>
                                </product-category>
                                <website-url>http://www.linkedin.com/static?key=mobile</website-url>
                                <disclaimer></disclaimer>
                              </product>
                            </products>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/comments/{commentId}{fieldSelectors}: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        commentId: 
            displayName: Comment ID
            description: |
                The unique identifier for a comment
            type: integer
            required: true
            repeat: false
    get: 
        description: |
            Returns Comments
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    delete: 
        description: |
            Deletes a Comment
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "204": 
                description: |
                    Your request to DELETE a record was successful
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/companies/{companyId}/updates: 
    uriParameters: 
        companyId: 
            displayName: companyId
            description: The unique internal numeric company identifier.
            type: string
            required: true
            repeat: false
    get: 
        description: To retrieve the company's updates
        queryParameters: 
            event-type: 
                description: Any valid Company Update Type from the table below.
                type: string
                required: false
                repeat: false
                example: event-type=status-update
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: update-xml
                        example: |
                            <update>
                               <timestamp>1315338683355</timestamp>
                               <update-type>CMPY</update-type>
                               <update-content>
                                  <company>
                                     <id>1337</id>
                                     <name>LinkedIn</name>
                                  </company>
                                  <company-person-update>
                                      <person>
                                          <id>14381178</id>
                                              <first-name>Patrick</first-name>
                                              <last-name>Smith</last-name>
                                              <headline>Enterprise Relationship Manager at LinkedIn</headline>
                                              <picture-url>http://media.linkedin.com/mpr/mprx/0_gPLYkP6SpokSOnUc0-vDkA9DYulmpzUc0tA3krFxTW5YiluBAvztoKPlKGAlx-sRyKF8wBMg5HkD</picture-url>
                                              <api-standard-profile-request>
                                                  <url>http://api.linkedin.com/v1/people/14381178</url>
                                                  <headers total="1">
                                                       <http-header>
                                                          <name>x-li-auth-token</name>
                                                          <value>name:4gRT</value>
                                                       </http-header>
                                                  </headers>
                                              </api-standard-profile-request>
                                              <site-standard-profile-request>
                                                    <url>http://www.linkedin.com/profile?viewProfile=&amp;key=14381178&amp;authToken=4gRT&amp;authType=name&amp;trk=api*</url>
                                              </site-standard-profile-request>
                                         </person>
                                         <action>
                                            <code>joined</code>
                                         </action>
                                         <old-position>
                                              <title>Actor</title>
                                              <company>
                                                   <name>IndependentContractor</name>
                                              </company>
                                         </old-position>
                                         <new-position>
                                              <title>Enterprise Relationship Manager</title>
                                              <company>
                                                   <id>1337</id>
                                                   <name>LinkedIn</name>
                                              </company>
                                         </new-position>
                                     </company-person-update>
                                 </update-content>
                            </update>
                    application/json: 
        protocols: [HTTP]
    /key={CompanyUpdateKey}/update-comments: 
        description: |
            This is base resource type described common request and response headers and error response codes
        uriParameters: 
            companyId: 
                displayName: companyId
                description: The unique internal numeric company identifier.
                type: string
                required: true
                repeat: false
            CompanyUpdateKey: 
                displayName: CompanyUpdateKey
                type: string
                required: true
                repeat: false
        get: 
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            queryParameters: 
                event-type: 
                    description: Any valid Company Update Type from the table below.
                    type: string
                    required: false
                    repeat: false
                    example: event-type=status-update
                count: 
                    description: Maximum
                    type: integer
                    required: false
                    repeat: false
                    default: "10"
                    example: count=10
                start: 
                    description: The offset by which to start Network Update pagination
                    type: string
                    required: false
                    repeat: false
                    example: start=0
                format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            responses: 
                "200": 
                    description: |
                        Request succeeded  
                    body: 
                        application/json: 
                        text/xml: 
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
    /key={CompanyUpdateKey}/likes: 
        description: |
            This is base resource type described common request and response headers and error response codes
        uriParameters: 
            companyId: 
                displayName: companyId
                description: The unique internal numeric company identifier.
                type: string
                required: true
                repeat: false
            CompanyUpdateKey: 
                displayName: CompanyUpdateKey
                type: string
                required: true
                repeat: false
        get: 
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            queryParameters: 
                event-type: 
                    description: Any valid Company Update Type from the table below.
                    type: string
                    required: false
                    repeat: false
                    example: event-type=status-update
                count: 
                    description: Maximum
                    type: integer
                    required: false
                    repeat: false
                    default: "10"
                    example: count=10
                start: 
                    description: The offset by which to start Network Update pagination
                    type: string
                    required: false
                    repeat: false
                    example: start=0
                format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            responses: 
                "200": 
                    description: |
                        Request succeeded  
                    body: 
                        application/json: 
                        text/xml: 
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
/companies/{companyId}/relation-to-viewer/is-company-share-enabled: 
    description: |
        This is base resource type described common request and response headers and error response codes
    uriParameters: 
        companyId: 
            displayName: companyId
            description: The unique internal numeric company identifier.
            type: string
            required: true
            repeat: false
    get: 
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/companies/universal-name={companyName}: 
    description: |
        This is base resource type described common request and response headers and error response codes
    uriParameters: 
        companyName: 
            displayName: companyName
            description: The unique string identifier for a company.
            type: string
            required: true
            repeat: false
            example: universal-name=linkedin
    get: 
        description: Returns a single company if found.
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: company-xml
                        example: |
                            <company>
                              <id>162479</id>
                              <name>Apple</name>
                            </company>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/id={peopleId}{fieldSelectors}: 
    displayName: Profile API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        peopleId: 
            displayName: peopleId
            type: string
            required: true
            repeat: false
    get: 
        description: |
            Returns profile of user by ID
        queryParameters: 
            secure-urls: 
                description: |
                    secure-urls query parameter indicates that you want the URLs in your response to be HTTPS
                type: boolean
                required: false
                repeat: false
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: person-xml
                    application/json: 
        protocols: [HTTP]
/people/~/group-memberships/{groupId}{fieldSelectors}: 
    displayName: Groups API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        groupId: 
            displayName: Numeric group ID
            description: |
                The unique identifier for a LinkedIn group
            type: integer
            required: true
            repeat: false
    get: 
        description: |
            Returns Group settings
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
            membership-state: 
                description: |
                    The state of the callers membership to the specified group. Use the value member to retrieve the groups to which a
                    user belongs.
                type: string
                required: false
                repeat: false
                enum: [non-member, awaiting-confirmation, awaiting-parent-group-confirmation, member, moderator, manager, owner]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: people-gm-group-xml
                        example: |
                            <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
                            <group-membership>
                              <show-group-logo-in-profile>true</show-group-logo-in-profile>
                              <email-digest-frequency>
                                <code>daily</code>
                              </email-digest-frequency>
                              <email-announcements-from-managers>true</email-announcements-from-managers>
                              <allow-messages-from-members>true</allow-messages-from-members>
                              <email-for-every-new-post>true</email-for-every-new-post>
                            </group-membership>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    put: 
        description: |
            Change Group settings
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: people-gm-group-xml
                example: |
                    <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
                    <group-membership>
                      <show-group-logo-in-profile>true</show-group-logo-in-profile>
                      <email-digest-frequency>
                        <code>daily</code>
                      </email-digest-frequency>
                      <email-announcements-from-managers>true</email-announcements-from-managers>
                      <allow-messages-from-members>true</allow-messages-from-members>
                      <email-for-every-new-post>true</email-for-every-new-post>
                    </group-membership>
        responses: 
            "200": 
                description: OK
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.   
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    delete: 
        description: Leave a Group
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "204": 
                description: |
                    Your request to DELETE a record was successful
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/id={peopleId}/connections{fieldSelectors}: 
    displayName: Connections API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        peopleId: 
            displayName: peopleId
            type: string
            required: true
            repeat: false
    get: 
        description: |
            Returns a list of 1st degree connections for a user who has granted access to his/her accoun
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
            modified: 
                description: |
                    Values are updated or new.
                type: string
                required: false
                repeat: false
                enum: [updated, new]
            modified-since: 
                description: |
                    Value as a Unix time stamp of milliseconds since epoch.
                type: integer
                required: false
                repeat: false
                minimum: 0
                example: "1267401600000"
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: connections-xml
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people-search{fieldSelectors}: 
    displayName: People Search API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        description: |
            Returns information about people
        queryParameters: 
            company-name: 
                description: |
                    Members who have a matching company name on their profile. company-name can be combined with the current-company parameter
                    to specifies whether the person is or is not still working at the company.
                    
                    It's often valuable to not be too specific with the company name. LinkedIn has made great efforts at standardizing company names,
                    but including suffixes such as "Inc" and "Company" may overly limit your search, missing people who did not include those suffixes
                    on their company names. It's usually better to  search for the basic name of the company and all different versions will be returned.
                    This does increase the possibility of a false positive match return, though, so consider the most specific terms you can use.
                    For example, consider using "Acme" instead of "Acme, Inc" to find people from a company called Acme, Inc. But this runs the risk
                    of finding people from different companies with Acme in the title, such as "Acme Vending" and "Acme Services".
                type: string
                required: false
                repeat: false
            country-code: 
                description: |
                    Matches members with a location in a specific country. Values are defined in by ISO 3166 standard. Country codes must be in all lower case.
                type: string
                required: false
                repeat: false
            distance: 
                description: |
                    Matches members within a distance from a central point. This is measured in miles. This is best used in combination with both country-code
                    and postal-code.
                type: string
                required: false
                repeat: false
            keywords: 
                description: |
                    Members who have all the keywords anywhere in their profile. Use this field when you don't know how to
                    more accurately map the input to a more specific parameter. (Don't forget to URL encode this data.)
                type: string
                required: false
                repeat: false
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            sort: 
                description: |
                    "Controls the search result order. There are four options:
                    connections: Number of connections per person, from largest to smallest.
                    recommenders: Number of recommendations per person, from largest to smallest.
                    distance: Degree of separation within the member's network, from first degree, then second degree, and then all others mixed together, including third degree and out-of-network.
                    relevance: Relevance of results based on the query, from most to least relevant.          
                    By default, results are ordered by the number of connections."
                type: string
                required: false
                repeat: false
                enum: [connections, recommenders, distance, relevance]
                default: connections
            title: 
                description: |
                    Matches members with that title on their profile. Works with the current-title parameter.
                type: string
                required: false
                repeat: false
            first-name: 
                description: |
                    Members with a matching first name. Matches must be exact. Multiple words should be separated by a space.
                type: string
                required: false
                repeat: false
            facets: 
                description: |
                    "Use facets to discover for a member:          
                    Who in their network works at a specific company, or group of companies.
                    How the people their network cluster together. What locations or industries are the most popular?          
                    Where their connections graduated from school."
                type: string
                required: false
                repeat: false
            postal-code: 
                description: |
                    Matches members centered around a Postal Code. Must be combined with the country-code parameter. Not supported for all countries.
                type: string
                required: false
                repeat: false
            current-school: 
                description: |
                    Valid values are true or false. A value of true matches members who currently attend the school specified in the school-name parameter.
                    A value of false matches members who once attended the school. Omitting the parameter matches members who currently or once attended
                    the school.
                type: boolean
                required: false
                repeat: false
            current-company: 
                description: |
                    Valid values are true or false. A value of true matches members who currently work at the company specified in the company-name parameter.
                    A value of false matches members who once worked at the company. Omitting the parameter matches members who currently or once worked
                    the company.
                type: boolean
                required: false
                repeat: false
            school-name: 
                description: |
                    Members who have a matching school name on their profile. school-name can be combined with the current-school parameter to specifies
                    whether the person is or is not still at the school.
                    
                    It's often valuable to not be too specific with the school name. The same explation provided with company name applies:
                    "Yale" vs. "Yale University".
                type: string
                required: false
                repeat: false
            facet: 
                description: |
                    Facet values to search over.
                type: string
                required: false
                repeat: false
            current-title: 
                description: |
                    Valid values are true or false. A value of true matches members whose title is currently the one specified in the title-name parameter.
                    A value of false matches members who once had that title. Omitting the parameter matches members who currently or once had that title.
                type: boolean
                required: false
                repeat: false
            last-name: 
                description: |
                    Members with a matching last name. Matches must be exactly. Multiple words should be separated by a space.
                type: string
                required: false
                repeat: false
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: peopleSearch-xml
                    application/json: 
        protocols: [HTTP]
/job-search{fieldSelectors}: 
    displayName: Job Search API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        description: |
            Returns Jobs found by some criteria
        queryParameters: 
            job-title: 
                description: Matches jobs with the same job title.
                type: string
                required: false
                repeat: false
            postal-code: 
                description: Matches jobs centered around a Postal Code. Must be combined with the country-code parameter. Not supported for all countries.
                type: string
                required: false
                repeat: false
            country-code: 
                description: Matches jobs with a location in a specific country. Values are defined in by ISO 3166 standard. Country codes must be in all lower case.
                type: string
                required: false
                repeat: false
            company-name: 
                description: |
                    Jobs with a matching company name. It's often valuable to not be too specific with the company name. LinkedIn has made great efforts at standardizing company names, but including suffixes such as "Inc" and "Company" may overly limit your search, missing people who did not include those suffixes on their company names. It's usually better to  search for the basic name of the company and all different versions will be returned. This does increase the possibility of a false positive match return, though, so consider the most specific terms you can use. For example, consider using "Acme" instead of "Acme, Inc" to find people from a company called Acme, Inc. But this runs the risk of finding people from different companies with Acme in the title, such as "Acme Vending" and "Acme Services".
                type: string
                required: false
                repeat: false
                example: Acme Vending
            distance: 
                description: Matches jobs within a distance from a central point. This is measured in miles. This is best used in combination with both country-code and postal-code.
                type: string
                required: false
                repeat: false
            keywords: 
                description: |
                    Members who have all the keywords anywhere in their profile. Use this field when you don't know how to
                    more accurately map the input to a more specific parameter. (Don't forget to URL encode this data.)
                type: string
                required: false
                repeat: false
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            sort: 
                description: |
                    "Controls the search result order. There are four options:
                    connections: Number of connections per person, from largest to smallest.
                    recommenders: Number of recommendations per person, from largest to smallest.
                    distance: Degree of separation within the member's network, from first degree, then second degree, and then all others mixed together, including third degree and out-of-network.
                    relevance: Relevance of results based on the query, from most to least relevant.          
                    By default, results are ordered by the number of connections."
                type: string
                required: false
                repeat: false
                enum: [connections, recommenders, distance, relevance]
                default: connections
            facet: 
                description: |
                    Facet values to search over.
                type: string
                required: false
                repeat: false
            facets: 
                description: |
                    |Parameter| Definition| Values|
                    |---|---|---|
                    |company|The job postings by company.|| 
                    |date-posted|The job postings by the date posted.|Format: YearMonthDay (e.g. 20121031)|
                    |location|A geographical region. This is not necessarily a country. It could be a city or regional area, such as San Francisco Bay Area.|A geographical code, such as us:84 for San Francisco Bay Area or fr:0 for France.|
                    |job-function|The job postings by job function.|| 
                    |industry|An industry field.|Industry values are listed on a separate page.|
                    |salary|The job postings based on salary.||
                type: string
                required: false
                repeat: false
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: jobSearch-xml
                    application/json: 
        protocols: [HTTP]
/companies{fieldSelectors}: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            email-domains: 
                description: Company email domains.
                type: string
                required: false
                repeat: false
                example: email-domain=apple.com
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
            is-company-admin: 
                description: The authenticated user is an administrator
                type: boolean
                required: false
                repeat: false
                example: is-company-admin=true
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: companies-xml
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/groups/{groupId}{fieldSelectors}: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        groupId: 
            displayName: Numeric group ID
            description: |
                The unique identifier for a LinkedIn group
            type: integer
            required: true
            repeat: false
    get: 
        description: |
            Returns Group's Profile Details
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: group-xml
                    application/json: 
        protocols: [HTTP]
/people/~/person-activities: 
    description: |
        This is base resource type described common request and response headers and error response codes
    post: 
        description: The Post Network Update API allows you to send in an activity from your site to be posted to the first degree connections of the LinkedIn user. Network updates are the LinkedIn term for news feed activities and appear on the center column of the home page. Use it when a user on your site performs some activity on your site that they want to broadcast to their connections. For example, you might send a message "Peter Smith booked a trip to London, England on October 30."
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: activity-xml
                example: |
                    <activity locale="en_US">
                        <content-type>linkedin-html</content-type>
                        <body>&amp;lt;a href=&amp;quot;http://www.linkedin.com/profile?viewProfile=&amp;amp;key=3639896&amp;amp;authToken=JdAa&amp;amp;authType=name&amp;amp;trk=api*a119686*s128146*&amp;quot;&amp;gt;Kirsten Jones&amp;lt;/a&amp;gt; is reading about &amp;lt;a href=&amp;quot;http://www.tigers.com&amp;quot;&amp;gt;Tigers&amp;lt;/a&amp;gt;http://www.tigers.com&amp;gt;Tigers&amp;lt;/a&amp;gt;..</body>
                    </activity>
            application/json: 
        responses: 
            "200": 
                description: |
                    Request succeeded
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/groups/{groupId}/posts: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        groupId: 
            displayName: groupId
            type: string
            required: true
            repeat: false
    get: 
        description: |
            Returns a Group's Discussion Posts
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            role: 
                description: |
                    Filter for posts related to the caller. Valid only for group-memberships/{id}/posts resource.
                type: string
                required: true
                repeat: false
                enum: [creator, commenter, follower]
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
            category: 
                description: |
                    Category of posts.
                type: string
                required: false
                repeat: false
                enum: [discussion]
            modified-since: 
                description: |
                    Timestamp filter for posts created after the specified value.
                type: integer
                required: false
                repeat: false
                example: "1302727083000"
            order: 
                description: |
                    Sort order for posts.
                type: string
                required: false
                repeat: false
                enum: [recency, popularity]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: groupPosts-xml
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    post: 
        description: Sharing content with a post is fairly straight forward. Simply make a POST call to the Groups API
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: groupPost-xml
            application/json: 
        responses: 
            "200": 
                description: |
                    Request succeeded
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/~/job-bookmarks: 
    displayName: Job Bookmarks and Suggestions API
    description: |
        This is base resource type described common request and response headers and error response codes
    get: 
        description: |
            Returns Job Bookmarks
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: jobBookmarks-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <job-bookmarks total="2">
                              <job-bookmark>
                                <is-applied>false</is-applied>
                                <is-saved>true</is-saved>
                                <saved-timestamp>1306261147000</saved-timestamp>
                                <job>
                                  <id>1641165</id>
                                  <active>true</active>
                                  <company>
                                    <id>35876</id>
                                    <name>ClairMail</name>
                                  </company>
                                  <position>
                                    <title>Senior Technical Writer</title>
                                  </position>
                                  <description-snippet>The Technical Writer will be responsible for creating, maintaining and 
                            updating documentation, including internal and external facing technical documentation of ClairMail software, 
                            such as user guides, installation guides, configuration guides, and developers guides. The products are 
                            enterprise software products and the audience is technical, so the candidate must be able to understand highly tec</description-snippet>
                                  <posting-timestamp>1306256696000</posting-timestamp>
                                </job>
                              </job-bookmark>
                              <job-bookmark>
                                <is-applied>false</is-applied>
                                <is-saved>true</is-saved>
                                <saved-timestamp>1306261165000</saved-timestamp>
                                <job>
                                  <id>1578133</id>
                                  <active>true</active>
                                  <company>
                                    <id>26909</id>
                                    <name>Greenplum</name>
                                  </company>
                                  <position>
                                    <title>Senior Manager Technical Publications</title>
                                  </position>
                                  <description-snippet>Greenplum is seeking an experienced Senior Manager, Technical Publications to 
                            support its worldwide technical content demand and generation efforts.  The Senior Manager will report to the 
                            Vice-President of Engineering, and will be responsible for developing work plans, establishing technical and 
                            other functional objectives, assigning tasks, and managing groups/teams. Maintains schedules and coordi</description-snippet>
                                  <posting-timestamp>1303854887000</posting-timestamp>
                                </job>
                              </job-bookmark>
                            </job-bookmarks>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    post: 
        description: |
            Bookmarking a Job
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: jobBookmark-xml
                example: |
                    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                      <job-bookmark>
                        <job>
                          <id>{job-id}</id>
                        </job>
                      </job-bookmark>
            application/json: 
        responses: 
            "200": 
                description: OK
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    /{jobId}: 
        description: |
            This is base resource type described common request and response headers and error response codes
        uriParameters: 
            jobId: 
                displayName: Job ID
                description: |
                    The unique identifier for a job.
                type: string
                required: true
                repeat: false
        delete: 
            description: |
                Deleting a Job Bookmark
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            responses: 
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "204": 
                    description: |
                        Your request to DELETE a record was successful
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
/people/~/suggestions/job-suggestions{fieldSelectors}: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        description: |
            Retrieving a List of a Member's Suggested Jobs
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: jobSuggestions-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <job-suggestions>
                              <jobs total="50" count="10" start="0">
                                <job>
                                  <id>1577323</id>
                                  <company>
                                    <id>1281</id>
                                    <name>Unisys</name>
                                  </company>
                                  <job-poster>
                                    <id>OHYinXGMKT</id>
                                    <first-name>Joanne</first-name>
                                    <last-name>Rawls</last-name>
                                    <headline>Recruiting Lead at Unisys Corporation</headline>
                                  </job-poster>
                                  <description-snippet>Unisys is expanding our Federal Proposal Development Center and looking for talented professionals to join our team. As a Senior Technical Writer, you will be responsible for: Analyzing Request for Proposals (RFP) and work with Solution Architects to package company services into a technical proposal response; write technical proposals that spell out what the company can offer to the agency seek</description-snippet>
                                  <location-description>Reston, VA  </location-description>
                                </job>
                                <job>
                                  <id>1579926</id>
                                  <company>
                                    <id>15759</id>
                                    <name>Velti</name>
                                  </company>
                                  <salary>Negotiable</salary>
                                  <job-poster>
                                    <id>UlfGF2nmYN</id>
                                    <first-name>Maria</first-name>
                                    <last-name>Maragoudakis-Gregoriou</last-name>
                                    <headline>Experienced Business Manager with extensive international and start-up experience</headline>
                                  </job-poster>
                                  <description-snippet>Senior Technical Writer (Job Code: SF-SRTCR) Velti is a leading global provider of mobile marketing and advertising software solutions that enable brands, advertising agencies, mobile operators, and media companies to implement highly targeted, interactive, and measurable campaigns by communicating with and engaging consumers via their mobile devices. Job DescriptionThe Senior Technical Writer pos</description-snippet>
                                  <location-description>San Francisco</location-description>
                                </job>
                                <job>
                                  <id>1609091</id>
                                  <company>
                                  </company>
                                  <salary>Annual Salary, Bonus</salary>
                                  <job-poster>
                                    <id>VLhDZNHMmG</id>
                                    <first-name>Ties</first-name>
                                    <last-name>van de Voort</last-name>
                                    <headline>International Corporate Recruiter at SDL Tridion</headline>
                                  </job-poster>
                                  <description-snippet>The Senior Technical Support Engineer works in a team of support engineers and reports to the Manager Customer Support. The Senior Technical Support Engineer is guarding and meeting service levels as agreed with customers, partners and the internal organization. The Senior Technical Support Engineer independently provides complex technical support to customers and partners, provides onsite support</description-snippet>
                                  <location-description>New York</location-description>
                                </job>
                             </jobs>
                            </job-suggestions>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/~{fieldSelectors}: 
    displayName: Profile API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        description: |
            Returns profile of the current user
        queryParameters: 
            secure-urls: 
                description: |
                    secure-urls query parameter indicates that you want the URLs in your response to be HTTPS
                type: boolean
                required: false
                repeat: false
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: currentUser-xml
                    application/json: 
        protocols: [HTTP]
/people/~/group-memberships{fieldSelectors}: 
    displayName: Groups API
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        description: |
            Returns Group Memberships for a User
        queryParameters: 
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            membership-state: 
                description: |
                    The state of the callers membership to the specified group. Use the value member to retrieve the groups to which a
                    user belongs.
                type: string
                required: false
                repeat: false
                enum: [non-member, awaiting-confirmation, awaiting-parent-group-confirmation, member, moderator, manager, owner]
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: groupMembership-xml
                    application/json: 
        protocols: [HTTP]
    post: 
        description: |
            POSTs additional group settings information
        body: 
            application/xml: 
                schema: groupMembership-xml
            application/json: 
        responses: 
            "200": 
                description: OK
        protocols: [HTTP]
/people/~/suggestions/to-follow/companies: 
    description: |
        This is base resource type described common request and response headers and error response codes
    get: 
        description: You can retrieve a collection of suggested companies for the current user.
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: companies-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <companies count="10" start="0">
                              <company>
                                <id>49648</id>
                                <name>Merix Financial</name>
                              </company>
                              <company>
                                <id>118370</id>
                                <name>Movaya Wireless</name>
                              </company>
                              <company>
                                <id>119265</id>
                                <name>Maison Martin Margiela</name>
                              </company>
                              <company>
                                <id>112571</id>
                                <name>CoActive</name>
                              </company>
                              <company>
                                <id>97548</id>
                                <name>Actronic</name>
                              </company>
                              <company>
                                <id>1115987</id>
                                <name>EELA</name>
                              </company>
                              <company>
                                <id>2204291</id>
                                <name>OfftheHookHats.org</name>
                              </company>
                              <company>
                                <id>1973202</id>
                                <name>Ministry of Communication and Information Technology</name>
                              </company>
                              <company>
                                <id>2102550</id>
                                <name>Lundsbergs skola</name>
                              </company>
                              <company>
                                <id>1086137</id>
                                <name>Netsolve Limited</name>
                              </company>
                            </companies>
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/companies/{companyId}/shares: 
    description: |
        This is base resource type described common request and response headers and error response codes
    uriParameters: 
        companyId: 
            displayName: companyId
            description: The unique internal numeric company identifier.
            type: string
            required: true
            repeat: false
    post: 
        description: Full company share with content
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: companyShare-xml
                example: |
                    <share>
                      <visibility>
                      <code>anyone</code>
                      </visibility>
                      <comment>Testing a targeted share!</comment>
                      <content>
                        <submitted-url>http://www.example.com/content.html</submitted-url>
                        <title>Test Share with Content</title>
                        <description>content description</description>
                        <submitted-image-url>http://www.example.com/image.jpg</submitted-image-url>
                      </content>
                      <share-target-reach>
                        <share-targets>
                          <share-target>
                            <code>geos</code>
                            <tvalues>
                              <tvalue>as</tvalue>
                            </tvalues>
                          </share-target>
                          <share-target>
                            <code>jobFunc</code>
                            <tvalues>
                              <tvalue>acct</tvalue>
                            </tvalues>
                          </share-target>
                        </share-targets>
                      </share-target-reach>
                    </share>
            application/json: 
                schema: companyShare
                example: |
                    {
                      "visibility" : {
                        "code" : "anyone"
                      } ,
                      "comment" : "Testing a full company share!" ,
                      "content" : {
                        "submitted-url" : "http://www.example.com/content.html" ,
                        "title" : "Test Share with Content" ,
                        "description" : "content description" ,
                        "submitted‐image-url" : "http://www.example.com/image.jpg"
                      }
                    }
        responses: 
            "200": 
                description: |
                    Request succeeded
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: Created on success
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/people/~/suggestions/groups{fieldSelectors}: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        description: |
            Get Suggested Groups for a User
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    /{groupId}: 
        description: |
            This is base resource type described common request and response headers and error response codes
        uriParameters: 
            fieldSelectors: 
                displayName: Field Selectors
                description: |
                    Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                    By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                    It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                    a critical factor in any web application, and more so for anyone relying on external APIs.
                    
                    Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                    contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                    your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                    
                    Examples
                    --------
                    To get a member's ID, first name, last name, and industry:
                      `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                    
                    Or the same set of information for their connections:
                      `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                    
                    Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                    job titles and not the rest of the information about positions:
                      `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                    
                    Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                    similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                    current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                    
                      `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
                type: string
                required: false
                repeat: false
                example: ":(id,first-name,last-name,industry)"
            groupId: 
                displayName: Numeric group ID
                description: |
                    The unique identifier for a LinkedIn group
                type: integer
                required: true
                repeat: false
        delete: 
            description: |
                Remove a Group Suggestion for a Use
            headers: 
                x-li-format: 
                    description: |
                        Type of data
                    type: string
                    required: false
                    repeat: false
                    enum: [xml, json, jsonp]
            responses: 
                "200": 
                    description: OK
                "400": 
                    description: |
                        Your request was not formatted correctly
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "401": 
                    description: |
                        The OAuth signature was bad
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "500": 
                    description: |
                        There was an application error on the LinkedIn server.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "204": 
                    description: |
                        Your request to DELETE a record was successful
                "403": 
                    description: |
                        Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "404": 
                    description: |
                        The resource was not found (i.e. you asked for a non-existent user or URL)
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
                "405": 
                    description: |
                        Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                    body: 
                        application/json: 
                            schema: error-schema
                            example: |
                                {
                                  "errorCode": 0,
                                  "message": "Invalid access token.",
                                  "requestId": "Y703T8HXBF",
                                  "status": 401,
                                  "timestamp": 1378122137646
                                }
                        text/xml: 
                            schema: error-xml
                            example: |
                                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                                <error>
                                  <status>401</status>
                                  <timestamp>1378122242574</timestamp>
                                  <request-id>8PQJRYO7JK</request-id>
                                  <error-code>0</error-code>
                                  <message>Invalid access token.</message>
                                </error>
            protocols: [HTTP]
/posts/{postId}/comments: 
    description: |
        This is base resource type described common request and response headers and error response codes
    uriParameters: 
        postId: 
            displayName: postId
            type: string
            required: true
            repeat: false
    get: 
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        queryParameters: 
            format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        responses: 
            "200": 
                description: |
                    Request succeeded  
                body: 
                    application/xml: 
                        schema: comments-xml
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
    post: 
        description: Add a Comment to a Post
        headers: 
            x-li-format: 
                description: |
                    Type of data
                type: string
                required: false
                repeat: false
                enum: [xml, json, jsonp]
        body: 
            application/xml: 
                schema: comment-xml
                example: |
                    <comment>
                    <text>Comment text</text>
                    </comment>
            application/json: 
        responses: 
            "200": 
                description: |
                    Request succeeded
                body: 
                    application/json: 
                    text/xml: 
            "201": 
                description: |
                    Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.
                body: 
                    application/json: 
                    text/xml: 
            "400": 
                description: |
                    Your request was not formatted correctly
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "401": 
                description: |
                    The OAuth signature was bad
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "500": 
                description: |
                    There was an application error on the LinkedIn server.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "403": 
                description: |
                    Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "404": 
                description: |
                    The resource was not found (i.e. you asked for a non-existent user or URL)
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
            "405": 
                description: |
                    Usually this means you used the wrong HTTP method (GET when you should POST, etc) 
                body: 
                    application/json: 
                        schema: error-schema
                        example: |
                            {
                              "errorCode": 0,
                              "message": "Invalid access token.",
                              "requestId": "Y703T8HXBF",
                              "status": 401,
                              "timestamp": 1378122137646
                            }
                    text/xml: 
                        schema: error-xml
                        example: |
                            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <error>
                              <status>401</status>
                              <timestamp>1378122242574</timestamp>
                              <request-id>8PQJRYO7JK</request-id>
                              <error-code>0</error-code>
                              <message>Invalid access token.</message>
                            </error>
        protocols: [HTTP]
/company-search{fieldSelectors}: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
    get: 
        description: |
            Use the Company Search API to find companies using keywords, industry, location, or some other criteria. It returns a collection of matching companies. Each entry can contain much of the information available on the company page.
            The API can also return facets. Facets provide you with data about the collection of companies, such as which companies are located in a certain area, size of the companies, and the industry a company is in. You can then use this data to make a new API call that further refines your original request. This is similar to clicking the buttons on the left-hand side of the LinkedIn Search results page.
        queryParameters: 
            keywords: 
                description: |
                    Members who have all the keywords anywhere in their profile. Use this field when you don't know how to
                    more accurately map the input to a more specific parameter. (Don't forget to URL encode this data.)
                type: string
                required: false
                repeat: false
            count: 
                description: Maximum
                type: integer
                required: false
                repeat: false
                default: "10"
                example: count=10
            start: 
                description: The offset by which to start Network Update pagination
                type: string
                required: false
                repeat: false
                example: start=0
            hq-only: 
                description: Matching companies by the headquarters location. When this is set to "true" and a location facet is used, this restricts returned companies to only those whose headquarters resides in the specified location.
                type: string
                required: false
                repeat: false
            sort: 
                description: |
                    "Controls the search result order. There are four options:
                    connections: Number of connections per person, from largest to smallest.
                    recommenders: Number of recommendations per person, from largest to smallest.
                    distance: Degree of separation within the member's network, from first degree, then second degree, and then all others mixed together, including third degree and out-of-network.
                    relevance: Relevance of results based on the query, from most to least relevant.          
                    By default, results are ordered by the number of connections."
                type: string
                required: false
                repeat: false
                enum: [connections, recommenders, distance, relevance]
                default: connections
            facet: 
                description: |
                    Facet values to search over.
                type: string
                required: false
                repeat: false
            facets: 
                description: |
                    |Parameter| Definition| Values|
                    |---|---|---|
                    |location|A geographical region. This is not necessarily a country. It could be a city or regional area, such as San Francisco Bay Area.|A geographical code, such as us:84 for San Francisco Bay Area or fr:0 for France.| 
                    |industry|An industry field.|Industry codes are listed on a separate page.|
                    |network|Collection of companies based on relationship.||
                    |company-size|The company collection based on size range specified.|Valid values are: B: 1-10 C: 11-50 D: 51-200 E: 201-500 F: 501-1000 G: 1001-5000 H: 5001-10,000 I: 10,000+|
                    |num-followers-range|The company collection based on the number of followers.||
                    |fortune|The company collection based on the Fortune ranking.||
                type: string
                required: false
                repeat: false
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: companySearch-xml
                    application/json: 
        protocols: [HTTP]
/posts/{postId}{fieldSelectors}: 
    description: |
        Describes field selectors uri path parameter
    uriParameters: 
        fieldSelectors: 
            displayName: Field Selectors
            description: |
                Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
                By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
                It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
                a critical factor in any web application, and more so for anyone relying on external APIs.
                
                Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
                contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
                your resource URLs, ensure that the parenthesis used in selectors remain unescaped.
                
                Examples
                --------
                To get a member's ID, first name, last name, and industry:
                  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`
                
                Or the same set of information for their connections:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`
                
                Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
                job titles and not the rest of the information about positions:
                  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`
                
                Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
                similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
                current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL
                
                  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
            type: string
            required: false
            repeat: false
            example: ":(id,first-name,last-name,industry)"
        postId: 
            displayName: Post ID
            description: |
                The unique identifier for a post
            type: string
            required: true
            repeat: false
    get: 
        description: |
            Returns Discussion Post
        responses: 
            "200": 
                body: 
                    application/xml: 
                        schema: post-xml
                    application/json: 
        protocols: [HTTP]
    delete: 
        description: |
            Deletes a Post
        protocols: [HTTP]
documentation: 
    - 
        title: Headline
        content: LinkedIn is a business-oriented social networking se
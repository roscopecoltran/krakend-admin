syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package docusign;

message PostV2AccountsRequest {
    newAccountDefinition newAccountDefinition = 1;
    // When set to **true**, creates the account using a preview billing plan.
    string preview_billing_plan = 2;
}

message GetV2AccountsAccountIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, includes the account settings for the account in the response.
    string include_account_settings = 2;
}

message DeleteV2AccountsAccountIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message GetV2AccountsAccountIdBilling_chargesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies which billing charges to return.
    // Valid values are:
    // 
    // * envelopes
    // * seats
    string include_charges = 2;
}

message GetV2AccountsAccountIdBilling_invoicesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies the date/time of the earliest invoice in the account to retrieve.
    string from_date = 2;
    // Specifies the date/time of the latest invoice in the account to retrieve.
    string to_date = 3;
}

message GetV2AccountsAccountIdBilling_invoicesInvoiceIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string invoiceId = 2;
}

message GetV2AccountsAccountIdBilling_invoices_past_dueRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message GetV2AccountsAccountIdBilling_paymentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies the date/time of the earliest payment in the account to retrieve.
    string from_date = 2;
    // Specifies the date/time of the latest payment in the account to retrieve.
    string to_date = 3;
}

message PostV2AccountsAccountIdBilling_paymentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    billingPaymentRequest billingPaymentRequest = 2;
}

message GetV2AccountsAccountIdBilling_paymentsPaymentIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string paymentId = 2;
}

message GetV2AccountsAccountIdBilling_planRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, excludes credit card information from the response.
    string include_credit_card_information = 2;
    // When set to **true**, the `canUpgrade` and `renewalStatus` properities are included the response and an array of `supportedCountries` property is added to the `billingAddress` information.
    string include_metadata = 3;
    // When set to **true**, excludes successor information from the response.
    string include_successor_plans = 4;
}

message PutV2AccountsAccountIdBilling_planRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    billingPlanInformation billingPlanInformation = 2;
    // When set to **true**, updates the account using a preview billing plan.
    string preview_billing_plan = 3;
}

message GetV2AccountsAccountIdBilling_planCredit_cardRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PutV2AccountsAccountIdBilling_planPurchased_envelopesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    purchasedEnvelopesInformation purchasedEnvelopesInformation = 2;
}

message GetV2AccountsAccountIdBrandsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, excludes distributor brand information from the response set.
    string exclude_distributor_brand = 2;
    // When set to **true**, returns the logos associated with the brand.
    string include_logos = 3;
}

message PostV2AccountsAccountIdBrandsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    brand brand = 2;
}

message DeleteV2AccountsAccountIdBrandsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    brandsRequest brandsRequest = 2;
}

message GetV2AccountsAccountIdBrandsBrandIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
    string include_external_references = 3;
    string include_logos = 4;
}

message PutV2AccountsAccountIdBrandsBrandIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    brand brand = 2;
    // The unique identifier of a brand.
    string brandId = 3;
}

message DeleteV2AccountsAccountIdBrandsBrandIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
}

message GetV2AccountsAccountIdBrandsBrandIdFileRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
}

message GetV2AccountsAccountIdBrandsBrandIdLogosLogoTypeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
    // One of **Primary**, **Secondary** or **Email**.
    string logoType = 3;
}

message PutV2AccountsAccountIdBrandsBrandIdLogosLogoTypeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
    // One of **Primary**, **Secondary** or **Email**.
    string logoType = 3;
}

message DeleteV2AccountsAccountIdBrandsBrandIdLogosLogoTypeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
    // One of **Primary**, **Secondary** or **Email**.
    string logoType = 3;
}

message GetV2AccountsAccountIdBrandsBrandIdResourcesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
}

message GetV2AccountsAccountIdBrandsBrandIdResourcesResourceContentTypeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
    string langcode = 3;
    string resourceContentType = 4;
    string return_master = 5;
}

message PutV2AccountsAccountIdBrandsBrandIdResourcesResourceContentTypeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a brand.
    string brandId = 2;
    string resourceContentType = 3;
}

message GetV2AccountsAccountIdBulk_envelopesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The number of results to return. This can be 1 to 20.
    string count = 2;
    // Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include="failed,queued") 
    // 
    // Valid values: 
    // * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided.
    // * failed - Entries with a failed status.
    // * processing - Entries with a processing status.
    // * queued - Entries with a queued status.
    // * sent - Entries with a sent status. 
    string include = 3;
    // The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0.
    string start_position = 4;
}

message GetV2AccountsAccountIdBulk_envelopesBatchIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string batchId = 2;
    // Specifies the number of entries to return.
    string count = 3;
    // Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include="failed,queued") 
    // 
    // Valid values: 
    // * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided.
    // * failed - Entries with a failed status.
    // * processing - Entries with a processing status.
    // * queued - Entries with a queued status.
    // * sent - Entries with a sent status. 
    string include = 4;
    // Specifies the location in the list of envelopes from which to start.
    string start_position = 5;
}

message DeleteV2AccountsAccountIdCaptive_recipientsRecipientPartRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    captiveRecipientInformation captiveRecipientInformation = 2;
    string recipientPart = 3;
}

message PostV2AccountsAccountIdChunked_uploadsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    chunkedUploadRequest chunkedUploadRequest = 2;
}

message GetV2AccountsAccountIdChunked_uploadsChunkedUploadIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string chunkedUploadId = 2;
    // A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
    string include = 3;
}

message PutV2AccountsAccountIdChunked_uploadsChunkedUploadIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string action = 2;
    string chunkedUploadId = 3;
}

message DeleteV2AccountsAccountIdChunked_uploadsChunkedUploadIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string chunkedUploadId = 2;
}

message PutV2AccountsAccountIdChunked_uploadsChunkedUploadIdChunkedUploadPartSeqRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string chunkedUploadId = 2;
    string chunkedUploadPartSeq = 3;
    chunkedUploadRequest chunkedUploadRequest = 4;
}

message GetV2AccountsAccountIdConnectRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PutV2AccountsAccountIdConnectRequest {
    ConnectConfigurations ConnectConfigurations = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message PostV2AccountsAccountIdConnectRequest {
    ConnectConfigurations ConnectConfigurations = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message PutV2AccountsAccountIdConnectEnvelopesRetry_queueRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    connectFailureFilter connectFailureFilter = 2;
}

message PutV2AccountsAccountIdConnectEnvelopesEnvelopeIdRetry_queueRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message GetV2AccountsAccountIdConnectFailuresRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
    string from_date = 2;
    // End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
    string to_date = 3;
}

message DeleteV2AccountsAccountIdConnectFailuresFailureIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the failed connect log entry.
    string failureId = 2;
}

message GetV2AccountsAccountIdConnectLogsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
    string from_date = 2;
    // End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
    string to_date = 3;
}

message DeleteV2AccountsAccountIdConnectLogsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message GetV2AccountsAccountIdConnectLogsLogIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When true, the connectDebugLog information is included in the response.
    string additional_info = 2;
    // The ID of the connect log entry
    string logId = 3;
}

message DeleteV2AccountsAccountIdConnectLogsLogIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the connect log entry
    string logId = 2;
}

message GetV2AccountsAccountIdConnectConnectIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the custom Connect configuration being accessed.
    string connectId = 2;
}

message DeleteV2AccountsAccountIdConnectConnectIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the custom Connect configuration being accessed.
    string connectId = 2;
}

message GetV2AccountsAccountIdConnectConnectIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the custom Connect configuration being accessed.
    string connectId = 2;
    // Optional. Number of items to return.
    string count = 3;
    // Filters the returned user records by the email address or a sub-string of email address.
    string email_substring = 4;
    string list_included_users = 5;
    // The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
    string start_position = 6;
    // Filters the results by user status.
    // You can specify a comma-separated
    // list of the following statuses:
    // 
    // * ActivationRequired 
    // * ActivationSent 
    // * Active
    // * Closed 
    // * Disabled
    string status = 7;
    // Filters the user records returned by the user name or a sub-string of user name.
    string user_name_substring = 8;
}

message GetV2AccountsAccountIdConsumer_disclosureRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies the language used in the response. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk), and Vietnamese (vi).
    // 
    // Additionally, the value can be set to `browser` to automatically detect the browser language being used by the viewer and display the disclosure in that language. 
    string langCode = 2;
}

message GetV2AccountsAccountIdConsumer_disclosureLangCodeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The simple type enumeration the language used in the response. The supported languages, with the language value shown in parenthesis, are:Arabic (ar), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi). Additionally, the value can be set to "browser" to automatically detect the browser language being used by the viewer and display the disclosure in that language.
    string langCode = 2;
}

message PutV2AccountsAccountIdConsumer_disclosureLangCodeRequest {
    EnvelopeConsumerDisclosures EnvelopeConsumerDisclosures = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // Reserved for DocuSign.
    string include_metadata = 3;
    // The simple type enumeration the language used in the response. The supported languages, with the language value shown in parenthesis, are:Arabic (ar), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi). Additionally, the value can be set to "browser" to automatically detect the browser language being used by the viewer and display the disclosure in that language.
    string langCode = 4;
}

message PutV2AccountsAccountIdContactsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    contactModRequest contactModRequest = 2;
}

message PostV2AccountsAccountIdContactsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    contactModRequest contactModRequest = 2;
}

message DeleteV2AccountsAccountIdContactsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    contactModRequest contactModRequest = 2;
}

message GetV2AccountsAccountIdContactsContactIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string cloud_provider = 2;
    // The unique identifier of a person in the contacts address book.
    string contactId = 3;
}

message DeleteV2AccountsAccountIdContactsContactIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The unique identifier of a person in the contacts address book.
    string contactId = 2;
}

message GetV2AccountsAccountIdCustom_fieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PostV2AccountsAccountIdCustom_fieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string apply_to_templates = 2;
    customField customField = 3;
}

message PutV2AccountsAccountIdCustom_fieldsCustomFieldIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string apply_to_templates = 2;
    customField customField = 3;
    string customFieldId = 4;
}

message DeleteV2AccountsAccountIdCustom_fieldsCustomFieldIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string apply_to_templates = 2;
    string customFieldId = 3;
}

message PostV2AccountsAccountIdEMortgageTransactionsRequest {
    EMortgageTransactions EMortgageTransactions = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message GetV2AccountsAccountIdEnvelopesRequest {
    // Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed.
    string ac_status = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // Reserved for DocuSign.
    string block = 3;
    // Optional. Number of items to return.
    string count = 4;
    // Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: `custom_envelope_field_name=desired_value`
    // 
    // The value portion of the query can use partial strings by adding '%' (percent sign) around the custom field query value. 
    // 
    // Example 1: If you have an envelope custom field named "Region" and you want to search for all envelopes where the value is "West" you would use set this parameter to `Region=West`. 
    // 
    // Example 2: To search for envelopes where the `ApplicationID` custom field has the value or partial value of "DocuSign" in the field, set this parameter to `ApplicationId=%DocuSign%` This would match envelopes where the custom field's value is "DocuSign for Salesforce" or "DocuSign envelope". 
    string custom_field = 5;
    // Limit results to envelopes
    // sent by the account user
    // with this email address.
    // 
    // `user_name` must be given as well,
    // and both `email` and `user_name`
    // must refer to an existing account user.
    string email = 6;
    // Comma separated list of `envelopeId` values.
    string envelope_ids = 7;
    // Reserved for DocuSign.
    string exclude = 8;
    // Reserved for DocuSign.
    string folder_ids = 9;
    // Reserved for DocuSign.
    string folder_types = 10;
    // Specifies the date and time
    // to start looking for status changes.
    // This parameter is required
    // unless `envelopeIds` or `transactionIds`
    // are set.
    // 
    // 
    // Although you can use any date format
    // supported by the .NET system library's
    // [`DateTime.Parse()`][msoft] function,
    // DocuSign recommends
    // using [ISO 8601][] format dates
    // with an explicit time zone offset
    // If you do not provide
    // a time zone offset,
    // the method uses the server's time zone.
    // 
    // For example, the following dates and times refer to the same instant:
    // 
    // * `2017-05-02T01:44Z`
    // * `2017-05-01T21:44-04:00`
    // * `2017-05-01T18:44-07:00`
    // 
    // 
    // [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v=vs.110).aspx#StringToParse
    // [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601
    string from_date = 11;
    // The status value checked for in the `from_date` to `to_date` time period. 
    // 
    // Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.
    // 
    // If `Changed` is specified, then envelopes that changed status during the period will be returned. 
    // 
    // For example, if `Created` is specified, then envelopes created during the period are found. 
    // 
    // The default is `Changed`.
    string from_to_status = 12;
    // Reserved for DocuSign.
    string include = 13;
    string include_purge_information = 14;
    // Reserved for DocuSign.
    string intersecting_folder_ids = 15;
    // Reserved for DocuSign.
    string order = 16;
    // Reserved for DocuSign.
    string order_by = 17;
    // Reserved for DocuSign.
    string powerformids = 18;
    // Reserved for DocuSign.
    string search_text = 19;
    // Reserved for DocuSign.
    string start_position = 20;
    // A comma-separated list of current envelope statuses to included in the response. Possible values are:
    // 
    // * completed
    // * created
    // * declined
    // * deleted
    // * delivered
    // * processing
    // * sent
    // * signed
    // * timedout
    // * voided
    // 
    // The `any` value is equivalent to any status.
    // 
    string status = 21;
    // Specifies the date and time
    // to stop looking for status changes.
    // The default is the current date and time.
    // 
    // Although you can use any date format
    // supported by the .NET system library's
    // [`DateTime.Parse()`][msoft] function,
    // DocuSign recommends
    // using [ISO 8601][] format dates
    // with an explicit time zone offset
    // If you do not provide
    // a time zone offset,
    // the method uses the server's time zone.
    // 
    // For example, the following dates and times refer to the same instant:
    // 
    // * `2017-05-02T01:44Z`
    // * `2017-05-01T21:44-04:00`
    // * `2017-05-01T18:44-07:00`
    // 
    // 
    // [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v=vs.110).aspx#StringToParse
    // [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601
    string to_date = 22;
    // A comma-separated list of envelope transaction IDs.
    // Transaction IDs are only valid for seven days.
    string transaction_ids = 23;
    // Reserved for DocuSign.
    string user_filter = 24;
    // Reserved for DocuSign.
    string user_id = 25;
    // Limit results to envelopes
    // sent by the account user
    // with this user name.
    // 
    // `email` must be given as well,
    // and both `email` and `user_name`
    // must refer to an existing account user.
    string user_name = 26;
}

message PostV2AccountsAccountIdEnvelopesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Reserved for DocuSign.
    string cdse_mode = 2;
    // Reserved for DocuSign.
    string completed_documents_only = 3;
    envelopeDefinition envelopeDefinition = 4;
    // When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the `status` field is set to `created`.)
    // 
    // ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates.
    string merge_roles_on_draft = 5;
}

message PutV2AccountsAccountIdEnvelopesStatusRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Reserved for DocuSign.
    string email = 2;
    envelopeIdsRequest envelopeIdsRequest = 3;
    // The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.
    // 
    // This is required unless parameters `envelopeIds` and/or `transactionIds` are set.
    string from_date = 4;
    // Reserved for DocuSign.
    string start_position = 5;
    // Optional date/time setting
    // that specifies the last date/time 
    // or envelope status changes in the result set. 
    // 
    // Default: "now", the time that you call the method. 
    string to_date = 6;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When true, envelope information can be added or modified.
    string advanced_update = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // Reserved for DocuSign.
    string include = 4;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdRequest {
    Envelopes Envelopes = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes.
    string advanced_update = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
    // When set to **true**, sends the specified envelope again.
    string resend_envelope = 5;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    envelopeAttachmentsRequest envelopeAttachmentsRequest = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    envelopeAttachmentsRequest envelopeAttachmentsRequest = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsAttachmentIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string attachmentId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsAttachmentIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    attachment attachment = 2;
    string attachmentId = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdAudit_eventsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fieldsRequest {
    EnvelopeCustomFields EnvelopeCustomFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fieldsRequest {
    EnvelopeCustomFields EnvelopeCustomFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fieldsRequest {
    EnvelopeCustomFields EnvelopeCustomFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // Reserved for DocuSign.
    string include_metadata = 3;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When **true**, document fields
    // can be added or modified
    // while adding or modifying envelope documents.
    string apply_document_fields = 2;
    envelopeDefinition envelopeDefinition = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    envelopeDefinition envelopeDefinition = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **false**, the envelope signing certificate is removed from the download.
    string certificate = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    string encoding = 4;
    // When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API.
    string encrypt = 5;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 6;
    // Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).
    string language = 7;
    string recipient_id = 8;
    // When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.
    string show_changes = 9;
    // When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.
    string watermark = 10;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When **true**, document fields
    // can be added or modified
    // while adding or modifying envelope documents.
    string apply_document_fields = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFieldsRequest {
    EnvelopeDocumentFields EnvelopeDocumentFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFieldsRequest {
    EnvelopeDocumentFields EnvelopeDocumentFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFieldsRequest {
    EnvelopeDocumentFields EnvelopeDocumentFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The maximum number of results to be returned by this request.
    string count = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310.
    string dpi = 4;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 5;
    // Sets the maximum height (in pixels) of the returned image.
    string max_height = 6;
    // Sets the maximum width (in pixels) of the returned image.
    string max_width = 7;
    string nocache = 8;
    string show_changes = 9;
    // The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
    string start_position = 10;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The page number being accessed.
    string pageNumber = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberPage_imageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // Sets the dpi for the image.
    string dpi = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
    // Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting.
    string max_height = 5;
    // Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting.
    string max_width = 6;
    // The page number being accessed.
    string pageNumber = 7;
    string show_changes = 8;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberPage_imageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The page number being accessed.
    string pageNumber = 4;
    pageRequest pageRequest = 5;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The page number being accessed.
    string pageNumber = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    string page_numbers = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplatesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // A comma-separated list
    // that limits the results.
    // Valid values:
    // 
    // * applied
    // * matched
    string include = 4;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplatesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    documentTemplateList documentTemplateList = 3;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 4;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplatesTemplateIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settingsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settingsRequest {
    EnvelopeEmailSettings EnvelopeEmailSettings = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settingsRequest {
    EnvelopeEmailSettings EnvelopeEmailSettings = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settingsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdForm_dataRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdLockRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdLockRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    lockRequest lockRequest = 3;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdLockRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    lockRequest lockRequest = 3;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdLockRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdNotificationRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdNotificationRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    envelopeNotificationRequest envelopeNotificationRequest = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    //  When set to **true** and `include_tabs` is set to **true**, all tabs with anchor tab properties are included in the response.
    string include_anchor_tab_locations = 3;
    //  When set to **true**, the extended properties are included in the response.
    string include_extended = 4;
    // Reserved for DocuSign.
    string include_metadata = 5;
    // When set to **true**, the tab information associated with the recipient is included in the response.
    string include_tabs = 6;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRequest {
    EnvelopeRecipients EnvelopeRecipients = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // When set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
    string resend_envelope = 4;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRequest {
    EnvelopeRecipients EnvelopeRecipients = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // When set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
    string resend_envelope = 4;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRequest {
    EnvelopeRecipients EnvelopeRecipients = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsDocument_visibilityRequest {
    EnvelopeDocumentVisibility EnvelopeDocumentVisibility = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // If **true**
    // include the tabs in the the result.
    string include_tabs = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
    // Reserved for DocuSign.
    string start_position = 5;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    bulkRecipientsRequest bulkRecipientsRequest = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdConsumer_disclosureRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    string langCode = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdConsumer_disclosureLangCodeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    string langCode = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdDocument_visibilityRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdDocument_visibilityRequest {
    EnvelopeDocumentVisibility EnvelopeDocumentVisibility = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdInitials_imageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
    string include_chrome = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdInitials_imageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignatureRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignature_imageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // When set to **true**, indicates the chromed version of the signature image should be retrieved.
    string include_chrome = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignature_imageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // When set to **true**, all tabs with anchor tab properties are included in the response.
    string include_anchor_tab_locations = 3;
    // Reserved for DocuSign.
    string include_metadata = 4;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 5;
}

message PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabsRequest {
    EnvelopeRecipientTabs EnvelopeRecipientTabs = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabsRequest {
    EnvelopeRecipientTabs EnvelopeRecipientTabs = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabsRequest {
    EnvelopeRecipientTabs EnvelopeRecipientTabs = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
}

message GetV2AccountsAccountIdEnvelopesEnvelopeIdTemplatesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    // The possible values are:  matching_applied - This returns template matching information for the template.
    string include = 3;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdTemplatesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    documentTemplateList documentTemplateList = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsCorrectRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    correctViewRequest correctViewRequest = 2;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 3;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsEditRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    returnUrlRequest returnUrlRequest = 3;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsRecipientRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    recipientViewRequest recipientViewRequest = 3;
}

message PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsSenderRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The envelope's GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec
    string envelopeId = 2;
    returnUrlRequest returnUrlRequest = 3;
}

message GetV2AccountsAccountIdFoldersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Reserved for DocuSign.
    string include = 2;
    string include_items = 3;
    // Reserved for DocuSign.
    string start_position = 4;
    // Specifies the items that are returned. Valid values are: 
    // 
    // * include - The folder list will return normal folders plus template folders. 
    // * only - Only the list of template folders are returned.
    string template = 5;
    // Reserved for DocuSign.
    string user_filter = 6;
}

message GetV2AccountsAccountIdFoldersFolderIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the folder being accessed.
    string folderId = 2;
    //  Only return items on or after this date. If no value is provided, the default search is the previous 30 days.
    string from_date = 3;
    string include_items = 4;
    //  The email of the folder owner.
    string owner_email = 5;
    //  The name of the folder owner.
    string owner_name = 6;
    //  The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.
    string search_text = 7;
    // The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0.
    string start_position = 8;
    // The current status of the envelope. If no value is provided, the default search is all/any status.
    string status = 9;
    // Only return items up to this date. If no value is provided, the default search is to the current date.
    string to_date = 10;
}

message PutV2AccountsAccountIdFoldersFolderIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the folder being accessed.
    string folderId = 2;
    foldersRequest foldersRequest = 3;
}

message GetV2AccountsAccountIdGroupsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Number of records to return. The number must be greater than 1 and less than or equal to 100.
    string count = 2;
    // Filters the groups returned by the group name or a sub-string of group name.
    string group_name = 3;
    string group_type = 4;
    string search_text = 5;
    // Starting value for the list.
    string start_position = 6;
}

message PutV2AccountsAccountIdGroupsRequest {
    Groups Groups = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message PostV2AccountsAccountIdGroupsRequest {
    Groups Groups = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message DeleteV2AccountsAccountIdGroupsRequest {
    Groups Groups = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message GetV2AccountsAccountIdGroupsGroupIdBrandsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the group being accessed.
    string groupId = 2;
}

message PutV2AccountsAccountIdGroupsGroupIdBrandsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    brandsRequest brandsRequest = 2;
    // The ID of the group being accessed.
    string groupId = 3;
}

message DeleteV2AccountsAccountIdGroupsGroupIdBrandsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    brandsRequest brandsRequest = 2;
    // The ID of the group being accessed.
    string groupId = 3;
}

message GetV2AccountsAccountIdGroupsGroupIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Number of records to return. The number must be greater than 1 and less than or equal to 100.
    string count = 2;
    // The ID of the group being accessed.
    string groupId = 3;
    // Starting value for the list.
    string start_position = 4;
}

message PutV2AccountsAccountIdGroupsGroupIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the group being accessed.
    string groupId = 2;
    userInfoList userInfoList = 3;
}

message DeleteV2AccountsAccountIdGroupsGroupIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the group being accessed.
    string groupId = 2;
    userInfoList userInfoList = 3;
}

message GetV2AccountsAccountIdPayment_gateway_accountsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message GetV2AccountsAccountIdPermission_profilesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Reserved for DocuSign.
    string include = 2;
}

message PostV2AccountsAccountIdPermission_profilesRequest {
    AccountPermissionProfiles AccountPermissionProfiles = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
    string include = 3;
}

message GetV2AccountsAccountIdPermission_profilesPermissionProfileIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
    string include = 2;
    string permissionProfileId = 3;
}

message PutV2AccountsAccountIdPermission_profilesPermissionProfileIdRequest {
    AccountPermissionProfiles AccountPermissionProfiles = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
    string include = 3;
    string permissionProfileId = 4;
}

message DeleteV2AccountsAccountIdPermission_profilesPermissionProfileIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string permissionProfileId = 2;
}

message GetV2AccountsAccountIdPowerformsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
    string from_date = 2;
    // An optional value that sets the direction order used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * asc = ascending sort order
    // * desc = descending sort order
    string order = 3;
    // An optional value that sets the file attribute used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * modified
    // * name
    string order_by = 4;
    // End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
    string to_date = 5;
}

message PostV2AccountsAccountIdPowerformsRequest {
    PowerForms PowerForms = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message DeleteV2AccountsAccountIdPowerformsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    powerFormsRequest powerFormsRequest = 2;
}

message GetV2AccountsAccountIdPowerformsSendersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
    string start_position = 2;
}

message GetV2AccountsAccountIdPowerformsPowerFormIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string powerFormId = 2;
}

message PutV2AccountsAccountIdPowerformsPowerFormIdRequest {
    PowerForms PowerForms = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    string powerFormId = 3;
}

message DeleteV2AccountsAccountIdPowerformsPowerFormIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string powerFormId = 2;
}

message GetV2AccountsAccountIdPowerformsPowerFormIdForm_dataRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
    string from_date = 2;
    string powerFormId = 3;
    // End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
    string to_date = 4;
}

message GetV2AccountsAccountIdRecipient_namesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The email address for the user
    string email = 2;
}

message GetV2AccountsAccountIdSearch_foldersSearchFolderIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies that all envelopes that match the criteria are returned.
    string all = 2;
    // Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100.
    string count = 3;
    // Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days.
    string from_date = 4;
    // When set to **true**, the recipient information is returned in the response.
    string include_recipients = 5;
    // Specifies the order in which the list is returned. Valid values are: `asc` for ascending order, and `desc` for descending order.
    string order = 6;
    // Specifies the property used to sort the list. Valid values are: `action_required`, `created`, `completed`, `sent`, `signer_list`, `status`, or `subject`.
    string order_by = 7;
    // Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.
    string searchFolderId = 8;
    // Specifies the the starting location in the result set of the items that are returned.
    string start_position = 9;
    // Specifies the end of the date range to return.
    string to_date = 10;
}

message GetV2AccountsAccountIdSettingsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PutV2AccountsAccountIdSettingsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    accountSettingsInformation accountSettingsInformation = 2;
}

message GetV2AccountsAccountIdSettingsEnote_configurationRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PutV2AccountsAccountIdSettingsEnote_configurationRequest {
    ENoteConfigurations ENoteConfigurations = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message DeleteV2AccountsAccountIdSettingsEnote_configurationRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message GetV2AccountsAccountIdSettingsPassword_rulesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PutV2AccountsAccountIdSettingsPassword_rulesRequest {
    AccountPasswordRules AccountPasswordRules = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message GetV2AccountsAccountIdSettingsTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PutV2AccountsAccountIdSettingsTabsRequest {
    AccountTabSettings AccountTabSettings = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message GetV2AccountsAccountIdShared_accessRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies maximum number of results included in the response. If no value is specified, this defaults to 1000.
    string count = 2;
    string envelopes_not_shared_user_status = 3;
    // A comma separated list of folder ID GUIDs.
    string folder_ids = 4;
    // Reserved:
    string item_type = 5;
    // This can be used to filter user names in the response. The wild-card '*' (asterisk) can be used around the string.
    string search_text = 6;
    // Reserved:
    string shared = 7;
    // Reserved:
    string start_position = 8;
    // Reserved:
    string user_ids = 9;
}

message PutV2AccountsAccountIdShared_accessRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    accountSharedAccess accountSharedAccess = 2;
    string item_type = 3;
    string user_ids = 4;
}

message GetV2AccountsAccountIdSignatureProvidersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message GetV2AccountsAccountIdSigning_groupsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string group_type = 2;
    // When set to **true**, the response includes the signing group members.
    string include_users = 3;
}

message PutV2AccountsAccountIdSigning_groupsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    signingGroupInformation signingGroupInformation = 2;
}

message PostV2AccountsAccountIdSigning_groupsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    signingGroupInformation signingGroupInformation = 2;
}

message DeleteV2AccountsAccountIdSigning_groupsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    signingGroupInformation signingGroupInformation = 2;
}

message GetV2AccountsAccountIdSigning_groupsSigningGroupIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string signingGroupId = 2;
}

message PutV2AccountsAccountIdSigning_groupsSigningGroupIdRequest {
    SigningGroups SigningGroups = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    string signingGroupId = 3;
}

message GetV2AccountsAccountIdSigning_groupsSigningGroupIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string signingGroupId = 2;
}

message PutV2AccountsAccountIdSigning_groupsSigningGroupIdUsersRequest {
    SigningGroupUsers SigningGroupUsers = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    string signingGroupId = 3;
}

message DeleteV2AccountsAccountIdSigning_groupsSigningGroupIdUsersRequest {
    SigningGroupUsers SigningGroupUsers = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    string signingGroupId = 3;
}

message GetV2AccountsAccountIdSupported_languagesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message GetV2AccountsAccountIdTab_definitionsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, only custom tabs are returned in the response.
    string custom_tab_only = 2;
}

message PostV2AccountsAccountIdTab_definitionsRequest {
    CustomTabs CustomTabs = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message GetV2AccountsAccountIdTab_definitionsCustomTabIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string customTabId = 2;
}

message PutV2AccountsAccountIdTab_definitionsCustomTabIdRequest {
    CustomTabs CustomTabs = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    string customTabId = 3;
}

message DeleteV2AccountsAccountIdTab_definitionsCustomTabIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string customTabId = 2;
}

message GetV2AccountsAccountIdTemplatesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Number of records to return in the cache.
    string count = 2;
    // The query value can be a folder name or folder ID. The response will only return templates in the specified folder.
    string folder = 3;
    // A comma separated list of folder ID GUIDs.
    string folder_ids = 4;
    string folder_types = 5;
    // Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
    string from_date = 6;
    // A comma-separated list
    // of additional template attributes
    // to include in the response.
    // Valid values are:
    // 
    // * custom_fields
    // * documents
    // * folders
    // * notifications
    // * recipients
    string include = 7;
    // Sets the direction order used to sort the list. Valid values are: -asc = ascending sort order (a to z)  -desc = descending sort order (z to a)
    string order = 8;
    // Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used.
    string order_by = 9;
    // The search text used to search the names of templates.
    string search_text = 10;
    string shared = 11;
    // If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected.
    string shared_by_me = 12;
    // The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero).
    string start_position = 13;
    // End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
    string to_date = 14;
    // Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used.
    string used_from_date = 15;
    // End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date.
    string used_to_date = 16;
    // Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user.
    string user_filter = 17;
    string user_id = 18;
}

message PostV2AccountsAccountIdTemplatesRequest {
    Templates Templates = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message GetV2AccountsAccountIdTemplatesTemplateIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
    string include = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message PutV2AccountsAccountIdTemplatesTemplateIdRequest {
    Templates Templates = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message GetV2AccountsAccountIdTemplatesTemplateIdCustom_fieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the template being accessed.
    string templateId = 2;
}

message PutV2AccountsAccountIdTemplatesTemplateIdCustom_fieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    templateCustomFields templateCustomFields = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message PostV2AccountsAccountIdTemplatesTemplateIdCustom_fieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    templateCustomFields templateCustomFields = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdCustom_fieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    templateCustomFields templateCustomFields = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message GetV2AccountsAccountIdTemplatesTemplateIdDocumentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the template being accessed.
    string templateId = 2;
}

message PutV2AccountsAccountIdTemplatesTemplateIdDocumentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When **true**, document fields
    // can be added or modified
    // while adding or modifying envelope documents.
    string apply_document_fields = 2;
    envelopeDefinition envelopeDefinition = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdDocumentsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    envelopeDefinition envelopeDefinition = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    string encrypt = 3;
    string show_changes = 4;
    // The ID of the template being accessed.
    string templateId = 5;
}

message PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When **true**, document fields
    // can be added or modified
    // while adding or modifying envelope documents.
    string apply_document_fields = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    envelopeDefinition envelopeDefinition = 4;
    string is_envelope_definition = 5;
    // The ID of the template being accessed.
    string templateId = 6;
}

message GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFieldsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFieldsRequest {
    TemplateDocumentFields TemplateDocumentFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message PostV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFieldsRequest {
    TemplateDocumentFields TemplateDocumentFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFieldsRequest {
    TemplateDocumentFields TemplateDocumentFields = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The maximum number of results to be returned by this request.
    string count = 2;
    // The ID of the document being accessed.
    string documentId = 3;
    // Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310.
    string dpi = 4;
    // Sets the maximum height (in pixels) of the returned image.
    string max_height = 5;
    // Sets the maximum width (in pixels) of the returned image.
    string max_width = 6;
    string nocache = 7;
    string show_changes = 8;
    // The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
    string start_position = 9;
    // The ID of the template being accessed.
    string templateId = 10;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The page number being accessed.
    string pageNumber = 3;
    pageRequest pageRequest = 4;
    // The ID of the template being accessed.
    string templateId = 5;
}

message GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberPage_imageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310.
    string dpi = 3;
    // Sets the maximum height (in pixels) of the returned image.
    string max_height = 4;
    // Sets the maximum width (in pixels) of the returned image.
    string max_width = 5;
    // The page number being accessed.
    string pageNumber = 6;
    string show_changes = 7;
    // The ID of the template being accessed.
    string templateId = 8;
}

message PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberPage_imageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The page number being accessed.
    string pageNumber = 3;
    pageRequest pageRequest = 4;
    // The ID of the template being accessed.
    string templateId = 5;
}

message GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    // The page number being accessed.
    string pageNumber = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the document being accessed.
    string documentId = 2;
    string page_numbers = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message GetV2AccountsAccountIdTemplatesTemplateIdLockRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the template being accessed.
    string templateId = 2;
}

message PutV2AccountsAccountIdTemplatesTemplateIdLockRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    lockRequest lockRequest = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message PostV2AccountsAccountIdTemplatesTemplateIdLockRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    lockRequest lockRequest = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdLockRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    lockRequest lockRequest = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message GetV2AccountsAccountIdTemplatesTemplateIdNotificationRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the template being accessed.
    string templateId = 2;
}

message PutV2AccountsAccountIdTemplatesTemplateIdNotificationRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the template being accessed.
    string templateId = 2;
    templateNotificationRequest templateNotificationRequest = 3;
}

message GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    //  When set to **true** and `include_tabs` is set to **true**, all tabs with anchor tab properties are included in the response.
    string include_anchor_tab_locations = 2;
    //  When set to **true**, the extended properties are included in the response.
    string include_extended = 3;
    // When set to **true**, the tab information associated with the recipient is included in the response.
    string include_tabs = 4;
    // The ID of the template being accessed.
    string templateId = 5;
}

message PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
    string resend_envelope = 2;
    // The ID of the template being accessed.
    string templateId = 3;
    templateRecipients templateRecipients = 4;
}

message PostV2AccountsAccountIdTemplatesTemplateIdRecipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
    string resend_envelope = 2;
    // The ID of the template being accessed.
    string templateId = 3;
    templateRecipients templateRecipients = 4;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the template being accessed.
    string templateId = 2;
    templateRecipients templateRecipients = 3;
}

message PutV2AccountsAccountIdTemplatesTemplateIdRecipientsDocument_visibilityRequest {
    TemplateDocumentVisibility TemplateDocumentVisibility = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
    templateRecipients templateRecipients = 4;
}

message GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, the tab information associated with the recipient is included in the response.
    string include_tabs = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
    // Reserved for DocuSign.
    string start_position = 4;
    // The ID of the template being accessed.
    string templateId = 5;
}

message PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    bulkRecipientsRequest bulkRecipientsRequest = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipientsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdDocument_visibilityRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdDocument_visibilityRequest {
    TemplateDocumentVisibility TemplateDocumentVisibility = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 3;
    // The ID of the template being accessed.
    string templateId = 4;
}

message GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, all tabs with anchor tab properties are included in the response.
    string include_anchor_tab_locations = 2;
    // Reserved for DocuSign.
    string include_metadata = 3;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 4;
    // The ID of the template being accessed.
    string templateId = 5;
}

message PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
    templateTabs templateTabs = 4;
}

message PostV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
    templateTabs templateTabs = 4;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The `recipientId` used when the envelope or template was created.
    string recipientId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
    templateTabs templateTabs = 4;
}

message PostV2AccountsAccountIdTemplatesTemplateIdViewsEditRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    returnUrlRequest returnUrlRequest = 2;
    // The ID of the template being accessed.
    string templateId = 3;
}

message PutV2AccountsAccountIdTemplatesTemplateIdTemplatePartRequest {
    Groups Groups = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
    // Currently, the only defined part is **groups**.
    string templatePart = 4;
}

message DeleteV2AccountsAccountIdTemplatesTemplateIdTemplatePartRequest {
    Groups Groups = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The ID of the template being accessed.
    string templateId = 3;
    // Currently, the only defined part is **groups**.
    string templatePart = 4;
}

message GetV2AccountsAccountIdUnsupported_file_typesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message GetV2AccountsAccountIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, the full list of user information is returned for each user in the account.
    string additional_info = 2;
    // Number of records to return. The number must be greater than 0 and less than or equal to 100.
    string count = 3;
    string email = 4;
    // Filters the returned user records by the email address or a sub-string of email address.
    string email_substring = 5;
    // Filters user records returned by one or more group Id's.
    string group_id = 6;
    string include_usersettings_for_csv = 7;
    string login_status = 8;
    string not_group_id = 9;
    // Starting value for the list.
    string start_position = 10;
    // Filters the results by user status.
    // You can specify a comma-separated
    // list of the following statuses:
    // 
    // * ActivationRequired 
    // * ActivationSent 
    // * Active
    // * Closed 
    // * Disabled
    string status = 11;
    // Filters the user records returned by the user name or a sub-string of user name.
    string user_name_substring = 12;
}

message PutV2AccountsAccountIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    userInformationList userInformationList = 2;
}

message PostV2AccountsAccountIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    newUsersDefinition newUsersDefinition = 2;
}

message DeleteV2AccountsAccountIdUsersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    userInfoList userInfoList = 2;
}

message GetV2AccountsAccountIdUsersUserIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, the full list of user information is returned for each user in the account.
    string additional_info = 2;
    string email = 3;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 4;
}

message PutV2AccountsAccountIdUsersUserIdRequest {
    Users Users = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message GetV2AccountsAccountIdUsersUserIdCloud_storageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    //  The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
    // 
    // The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
    string redirectUrl = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message PostV2AccountsAccountIdUsersUserIdCloud_storageRequest {
    CloudStorageProviders CloudStorageProviders = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message DeleteV2AccountsAccountIdUsersUserIdCloud_storageRequest {
    CloudStorageProviders CloudStorageProviders = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message GetV2AccountsAccountIdUsersUserIdCloud_storageServiceIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    //  The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
    // 
    // The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
    string redirectUrl = 2;
    // The ID of the service to access. 
    // 
    // Valid values are the service name ("Box") or the numerical serviceId ("4136").
    string serviceId = 3;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 4;
}

message DeleteV2AccountsAccountIdUsersUserIdCloud_storageServiceIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the service to access. 
    // 
    // Valid values are the service name ("Box") or the numerical serviceId ("4136").
    string serviceId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message GetV2AccountsAccountIdUsersUserIdCloud_storageServiceIdFoldersRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // A comma separated list of folder IDs included in the request.
    string cloud_storage_folder_path = 2;
    // An optional value that sets how many items are included in the response. 
    // 
    // The default setting for this is 25.
    string count = 3;
    // An optional value that sets the direction order used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * asc = ascending sort order
    // * desc = descending sort order
    string order = 4;
    // An optional value that sets the file attribute used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * modified
    // * name
    string order_by = 5;
    string search_text = 6;
    // The ID of the service to access. 
    // 
    // Valid values are the service name ("Box") or the numerical serviceId ("4136").
    string serviceId = 7;
    // Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.
    string start_position = 8;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 9;
}

message GetV2AccountsAccountIdUsersUserIdCloud_storageServiceIdFoldersFolderIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string cloud_storage_folder_path = 2;
    // An optional value that sets how many items are included in the response. 
    // 
    // The default setting for this is 25.
    string count = 3;
    // The ID of the folder being accessed.
    string folderId = 4;
    // An optional value that sets the direction order used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * asc = ascending sort order
    // * desc = descending sort order
    string order = 5;
    // An optional value that sets the file attribute used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * modified
    // * name
    string order_by = 6;
    string search_text = 7;
    // The ID of the service to access. 
    // 
    // Valid values are the service name ("Box") or the numerical serviceId ("4136").
    string serviceId = 8;
    // Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.
    string start_position = 9;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 10;
}

message GetV2AccountsAccountIdUsersUserIdCustom_settingsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
}

message PutV2AccountsAccountIdUsersUserIdCustom_settingsRequest {
    UserCustomSettings UserCustomSettings = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message DeleteV2AccountsAccountIdUsersUserIdCustom_settingsRequest {
    UserCustomSettings UserCustomSettings = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message GetV2AccountsAccountIdUsersUserIdProfileRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
}

message PutV2AccountsAccountIdUsersUserIdProfileRequest {
    UserProfiles UserProfiles = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message GetV2AccountsAccountIdUsersUserIdProfileImageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string encoding = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message PutV2AccountsAccountIdUsersUserIdProfileImageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
}

message DeleteV2AccountsAccountIdUsersUserIdProfileImageRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
}

message GetV2AccountsAccountIdUsersUserIdSettingsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
}

message PutV2AccountsAccountIdUsersUserIdSettingsRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
    userSettingsInformation userSettingsInformation = 3;
}

message GetV2AccountsAccountIdUsersUserIdSignaturesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    string stamp_type = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message PutV2AccountsAccountIdUsersUserIdSignaturesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
    userSignaturesInformation userSignaturesInformation = 3;
}

message PostV2AccountsAccountIdUsersUserIdSignaturesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
    userSignaturesInformation userSignaturesInformation = 3;
}

message GetV2AccountsAccountIdUsersUserIdSignaturesSignatureIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the signature being accessed.
    string signatureId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message PutV2AccountsAccountIdUsersUserIdSignaturesSignatureIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // When set to **true**, closes the current signature.
    string close_existing_signature = 2;
    // The ID of the signature being accessed.
    string signatureId = 3;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 4;
    userSignatureDefinition userSignatureDefinition = 5;
}

message DeleteV2AccountsAccountIdUsersUserIdSignaturesSignatureIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the signature being accessed.
    string signatureId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message GetV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageTypeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // One of **signature_image** or **initials_image**.
    string imageType = 2;
    string include_chrome = 3;
    // The ID of the signature being accessed.
    string signatureId = 4;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 5;
}

message PutV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageTypeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // One of **signature_image** or **initials_image**.
    string imageType = 2;
    // The ID of the signature being accessed.
    string signatureId = 3;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 4;
}

message DeleteV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageTypeRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // One of **signature_image** or **initials_image**.
    string imageType = 2;
    // The ID of the signature being accessed.
    string signatureId = 3;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 4;
}

message GetV2AccountsAccountIdUsersUserIdSocialRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
}

message PutV2AccountsAccountIdUsersUserIdSocialRequest {
    UserSocialAccountLogins UserSocialAccountLogins = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message DeleteV2AccountsAccountIdUsersUserIdSocialRequest {
    UserSocialAccountLogins UserSocialAccountLogins = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 3;
}

message PostV2AccountsAccountIdViewsConsoleRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    consoleViewRequest consoleViewRequest = 2;
}

message GetV2AccountsAccountIdWatermarkRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PutV2AccountsAccountIdWatermarkRequest {
    AccountWatermarks AccountWatermarks = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message PutV2AccountsAccountIdWatermarkPreviewRequest {
    AccountWatermarks AccountWatermarks = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message GetV2AccountsAccountIdWorkspacesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
}

message PostV2AccountsAccountIdWorkspacesRequest {
    Workspaces Workspaces = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
}

message GetV2AccountsAccountIdWorkspacesWorkspaceIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies the workspace ID GUID.
    string workspaceId = 2;
}

message PutV2AccountsAccountIdWorkspacesWorkspaceIdRequest {
    Workspaces Workspaces = 1;
    // The external account number (int) or account ID Guid.
    string accountId = 2;
    // Specifies the workspace ID GUID.
    string workspaceId = 3;
}

message DeleteV2AccountsAccountIdWorkspacesWorkspaceIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies the workspace ID GUID.
    string workspaceId = 2;
}

message GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The maximum number of results to be returned by this request.
    string count = 2;
    // The ID of the folder being accessed.
    string folderId = 3;
    // When set to **true**, file information is returned in the response along with folder information. The default is **false**.
    string include_files = 4;
    // When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**.
    string include_sub_folders = 5;
    // When set to **true**, thumbnails are returned as part of the response.  The default is **false**.
    string include_thumbnails = 6;
    // Set to **true** to return extended details about the user. The default is **false**.
    string include_user_detail = 7;
    // The position within the total result set from which to start returning values.
    string start_position = 8;
    // Specifies the workspace ID GUID.
    string workspaceId = 9;
    // If set, then the results are filtered to those associated with the specified userId.
    string workspace_user_id = 10;
}

message DeleteV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the folder being accessed.
    string folderId = 2;
    // Specifies the workspace ID GUID.
    string workspaceId = 3;
    workspaceItemList workspaceItemList = 4;
}

message PostV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The ID of the folder being accessed.
    string folderId = 2;
    // Specifies the workspace ID GUID.
    string workspaceId = 3;
}

message GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies the room file ID GUID.
    string fileId = 2;
    // The ID of the folder being accessed.
    string folderId = 3;
    // When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**.
    string is_download = 4;
    // When set to **true** the file returned as a PDF.
    string pdf_version = 5;
    // Specifies the workspace ID GUID.
    string workspaceId = 6;
}

message PutV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileIdRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // Specifies the room file ID GUID.
    string fileId = 2;
    // The ID of the folder being accessed.
    string folderId = 3;
    // Specifies the workspace ID GUID.
    string workspaceId = 4;
}

message GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileIdPagesRequest {
    // The external account number (int) or account ID Guid.
    string accountId = 1;
    // The maximum number of results to be returned by this request.
    string count = 2;
    // Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310.
    string dpi = 3;
    // Specifies the room file ID GUID.
    string fileId = 4;
    // The ID of the folder being accessed.
    string folderId = 5;
    // Sets the maximum height (in pixels) of the returned image.
    string max_height = 6;
    // Sets the maximum width (in pixels) of the returned image.
    string max_width = 7;
    // The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
    string start_position = 8;
    // Specifies the workspace ID GUID.
    string workspaceId = 9;
}

message GetV2Billing_plansBillingPlanIdRequest {
    // The ID of the billing plan being accessed.
    string billingPlanId = 1;
}

message GetV2DiagnosticsRequest_logsRequest {
    string encoding = 1;
}

message GetV2DiagnosticsRequest_logsRequestLogIdRequest {
    string requestLogId = 1;
}

message PutV2DiagnosticsSettingsRequest {
    RequestLogs RequestLogs = 1;
}

message GetV2Login_informationRequest {
    // Reserved for DocuSign.
    string api_password = 1;
    string embed_account_id_guid = 2;
    // When set to **true**, shows the account ID GUID in the response.
    string include_account_id_guid = 3;
    // Determines whether login settings are returned in the response.
    // 
    // Valid Values:
    // 
    // * all -  All the login settings are returned. 
    // * none - no login settings are returned.
    string login_settings = 4;
}

message PutV2Login_informationLoginPartRequest {
    // Currently, only the value **password** is supported.
    string loginPart = 1;
    userPasswordInformation userPasswordInformation = 2;
}

message AccountBrands {
    // The list of brands.
    repeated brand brands = 1;
    // The brand seen by envelope recipients when a brand is not explicitly set.
    string recipientBrandIdDefault = 2;
    // The brand seen by envelope senders when a brand is not explicitly set.
    string senderBrandIdDefault = 3;
}

message AccountConsumerDisclosures {
    // A GUID identifying the account associated with the consumer disclosure
    string accountEsignId = 1;
    // Indicates whether the customer can withdraw their acceptance of the consumer disclosure.
    string allowCDWithdraw = 2;
    settingsMetadata allowCDWithdrawMetadata = 3;
    string changeEmail = 4;
    string changeEmailOther = 5;
    // The name of the company associated with the consumer disclosure.
    string companyName = 6;
    // The phone number of the company associated with the consumer disclosure.
    string companyPhone = 7;
    string copyCostPerPage = 8;
    // Specifies the fee collection method for cases in which the customer requires paper copies of the document.
    // 
    // Maximum Length: 255 characters
    string copyFeeCollectionMethod = 9;
    string copyRequestEmail = 10;
    string custom = 11;
    string enableEsign = 12;
    // The Electronic Record and Signature Disclosure text. The disclosure text includes the html formatting.
    string esignAgreement = 13;
    string esignText = 14;
    string languageCode = 15;
    string mustAgreeToEsign = 16;
    string pdfId = 17;
    string useBrand = 18;
    string useConsumerDisclosureWithinAccount = 19;
    settingsMetadata useConsumerDisclosureWithinAccountMetadata = 20;
    // Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 100 characters.
    string withdrawAddressLine1 = 21;
    // Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 100 characters.
    string withdrawAddressLine2 = 22;
    // Indicates whether the customer can withdraw consent by email.
    string withdrawByEmail = 23;
    // Indicates whether the customer can withdraw consent by postal mail.
    string withdrawByMail = 24;
    // Indicates whether the customer can withdraw consent by phone.
    string withdrawByPhone = 25;
    // Contains the city of the postal address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 50 characters.
    string withdrawCity = 26;
    // Indicates the consequences of withdrawing consent.
    string withdrawConsequences = 27;
    // Contains the email address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 100 characters.
    string withdrawEmail = 28;
    // Indicates other information need to withdraw consent.
    // 
    // Maximum length: 255 characters.
    string withdrawOther = 29;
    // Contains the phone number which a customer can call to register consent withdrawal notification.
    // 
    // Maximum length: 20 characters.
    string withdrawPhone = 30;
    // Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 20 characters.
    string withdrawPostalCode = 31;
    // Contains the state of the postal address to which a customer can send a consent withdrawal notification.
    string withdrawState = 32;
}

message AccountCustomFields {
    // An array of list custom fields.
    repeated listCustomField listCustomFields = 1;
    // An array of text custom fields.
    repeated textCustomField textCustomFields = 2;
}

message AccountPasswordRules {
    string expirePassword = 1;
    string expirePasswordDays = 2;
    accountPasswordExpirePasswordDays expirePasswordDaysMetadata = 3;
    string lockoutDurationMinutes = 4;
    accountPasswordLockoutDurationMinutes lockoutDurationMinutesMetadata = 5;
    string lockoutDurationType = 6;
    accountPasswordLockoutDurationType lockoutDurationTypeMetadata = 7;
    string minimumPasswordAgeDays = 8;
    accountPasswordMinimumPasswordAgeDays minimumPasswordAgeDaysMetadata = 9;
    string minimumPasswordLength = 10;
    accountMinimumPasswordLength minimumPasswordLengthMetadata = 11;
    string passwordIncludeDigit = 12;
    string passwordIncludeDigitOrSpecialCharacter = 13;
    string passwordIncludeLowerCase = 14;
    string passwordIncludeSpecialCharacter = 15;
    string passwordIncludeUpperCase = 16;
    string passwordStrengthType = 17;
    accountPasswordStrengthType passwordStrengthTypeMetadata = 18;
    string questionsRequired = 19;
    accountPasswordQuestionsRequired questionsRequiredMetadata = 20;
}

message AccountPermissionProfiles {
    string modifiedByUsername = 1;
    string modifiedDateTime = 2;
    string permissionProfileId = 3;
    string permissionProfileName = 4;
    accountRoleSettings settings = 5;
    string userCount = 6;
    repeated Users users = 7;
}

message AccountSignatureProviders {
    repeated accountSignatureProvider signatureProviders = 1;
}

message AccountTabSettings {
    string allowTabOrder = 1;
    settingsMetadata allowTabOrderMetadata = 2;
    string approveDeclineTabsEnabled = 3;
    settingsMetadata approveDeclineTabsMetadata = 4;
    string calculatedFieldsEnabled = 5;
    settingsMetadata calculatedFieldsMetadata = 6;
    string checkboxTabsEnabled = 7;
    settingsMetadata checkboxTabsMetadata = 8;
    string dataFieldRegexEnabled = 9;
    settingsMetadata dataFieldRegexMetadata = 10;
    string dataFieldSizeEnabled = 11;
    settingsMetadata dataFieldSizeMetadata = 12;
    string firstLastEmailTabsEnabled = 13;
    settingsMetadata firstLastEmailTabsMetadata = 14;
    string listTabsEnabled = 15;
    settingsMetadata listTabsMetadata = 16;
    string noteTabsEnabled = 17;
    settingsMetadata noteTabsMetadata = 18;
    string radioTabsEnabled = 19;
    settingsMetadata radioTabsMetadata = 20;
    string savingCustomTabsEnabled = 21;
    settingsMetadata savingCustomTabsMetadata = 22;
    string senderToChangeTabAssignmentsEnabled = 23;
    settingsMetadata senderToChangeTabAssignmentsMetadata = 24;
    string sharedCustomTabsEnabled = 25;
    settingsMetadata sharedCustomTabsMetadata = 26;
    string tabDataLabelEnabled = 27;
    settingsMetadata tabDataLabelMetadata = 28;
    string tabLocationEnabled = 29;
    settingsMetadata tabLocationMetadata = 30;
    string tabLockingEnabled = 31;
    settingsMetadata tabLockingMetadata = 32;
    string tabScaleEnabled = 33;
    settingsMetadata tabScaleMetadata = 34;
    string tabTextFormattingEnabled = 35;
    settingsMetadata tabTextFormattingMetadata = 36;
    string textTabsEnabled = 37;
    settingsMetadata textTabsMetadata = 38;
}

message AccountWatermarks {
    string displayAngle = 1;
    string enabled = 2;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 3;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 4;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 5;
    string id = 6;
    string imageBase64 = 7;
    string transparency = 8;
    string watermarkText = 9;
}

message Accounts {
    // The GUID associated with the account ID.
    string accountIdGuid = 1;
    // The name of the current account.
    string accountName = 2;
    // When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.
    string allowTransactionRooms = 3;
    // Reserved: TBD
    string billingPeriodDaysRemaining = 4;
    // Reserved: TBD
    string billingPeriodEndDate = 5;
    // Reserved: TBD
    string billingPeriodEnvelopesAllowed = 6;
    // Reserved: TBD
    string billingPeriodEnvelopesSent = 7;
    // Reserved: TBD
    string billingPeriodStartDate = 8;
    // Reserved: TBD
    string billingProfile = 9;
    // Reserved: TBD
    string canCancelRenewal = 10;
    // When set to **true**, specifies that you can upgrade the account through the API.
    string canUpgrade = 11;
    string connectPermission = 12;
    string createdDate = 13;
    // Specifies the ISO currency code for the account.
    string currencyCode = 14;
    // Identifies the plan that was used create this account.
    string currentPlanId = 15;
    // The code that identifies the billing plan groups and plans for the new account.
    string distributorCode = 16;
    string docuSignLandingUrl = 17;
    string envelopeSendingBlocked = 18;
    string envelopeUnitPrice = 19;
    //  A complex element that contains up to four Question/Answer pairs for forgotten password information for a user.
    string forgottenPasswordQuestionsCount = 20;
    string isDowngrade = 21;
    string paymentMethod = 22;
    // Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.
    string planClassification = 23;
    // The date that the current plan will end.
    string planEndDate = 24;
    // The name of the Billing Plan.
    string planName = 25;
    // The date that the Account started using the current plan.
    string planStartDate = 26;
    string seatsAllowed = 27;
    string seatsInUse = 28;
    string status21CFRPart11 = 29;
    string suspensionDate = 30;
    string suspensionStatus = 31;
}

message Authentication {
    // Contains a token that can be used for authentication in API calls instead of using the user name and password. Only returned if the `api_password=true` query string is added to the URL.
    string apiPassword = 1;
    // The list of accounts that authenticating user is a member of.
    repeated loginAccount loginAccounts = 2;
}

message BillingPlans {
    // The Billing address for the account.
    accountAddress billingAddress = 1;
    // When set to **true**, the credit card address information is the same as that returned as the billing address. If false, then the billing address is considered a billing contact address, and the credit card address can be different.
    string billingAddressIsCreditCardAddress = 2;
    accountBillingPlan billingPlan = 3;
    // A complex type that has information about the credit card used to pay for this account.
    creditCardInformation creditCardInformation = 4;
    paymentProcessorInformation paymentProcessorInformation = 5;
    // Contains information describing discounts and promotions.
    referralInformation referralInformation = 6;
    repeated billingPlan successorPlans = 7;
}

message BulkEnvelopes {
    // Reserved: TBD
    repeated bulkEnvelopeStatus bulkEnvelopeStatuses = 1;
    // The last position in the result set.
    string endPosition = 2;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message ChunkedUploads {
    string checksum = 1;
    string chunkedUploadId = 2;
    repeated chunkedUploadPart chunkedUploadParts = 3;
    string chunkedUploadUri = 4;
    string committed = 5;
    string expirationDateTime = 6;
    string maxChunkedUploadParts = 7;
    string maxTotalSize = 8;
    string totalSize = 9;
}

message CloudStorage {
    // The last position in the result set.
    string endPosition = 1;
    externalDocServiceErrorDetails errorDetails = 2;
    string id = 3;
    repeated externalFile items = 4;
    string name = 5;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 6;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 7;
    // The number of results returned in this response.
    string resultSetSize = 8;
    // Starting position of the current result set.
    string startPosition = 9;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 10;
}

message CloudStorageProviders {
    // An Array containing the storage providers associated with the user.
    repeated cloudStorageProvider storageProviders = 1;
}

message ConnectConfigurations {
    // When set to **true**, the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect.
    string allUsers = 1;
    // When set to **true**, data is sent to the urlToPublishTo web address. This option can be set to false to stop sending data while maintaining the Connect configuration information.
    string allowEnvelopePublish = 2;
    // If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
    string configurationType = 3;
    //  Specifies the DocuSign generated ID for the Connect configuration.
    string connectId = 4;
    // This turns Connect logging on or off. When set to **true**, logging is turned on.
    string enableLog = 5;
    // A comma separated list of Envelope related events that are tracked through Connect. The possible event values are: Sent, Delivered, Completed, Declined, and Voided.
    string envelopeEvents = 6;
    string includeCertSoapHeader = 7;
    // When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.
    string includeCertificateOfCompletion = 8;
    // When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API.
    string includeDocumentFields = 9;
    // When set to **true**, Connect will send the PDF document along with the update XML.
    string includeDocuments = 10;
    // When set to **true**, Connect will include the voidedReason for voided envelopes.
    string includeEnvelopeVoidReason = 11;
    // When set to **true**, Connect will include the sender account as Custom Field in the data.
    string includeSenderAccountasCustomField = 12;
    // When set to **true**, Connect will include the envelope time zone information.
    string includeTimeZoneInformation = 13;
    // The name of the Connect configuration. The name helps identify the configuration in the list.
    string name = 14;
    // A comma separated list of *Recipient* related events that will trigger a notification to your webhook Connect listener. The possible event values are: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
    string recipientEvents = 15;
    // When set to **true**, and a publication message fails to be acknowledged, the message goes back into the queue and the system will retry delivery after a successful acknowledgement is received. If the delivery fails a second time, the message is not returned to the queue for sending until Connect receives a successful acknowledgement and it has been at least 24 hours since the previous retry. There is a maximum of ten retries Alternately, you can use Republish Connect Information to manually republish the envelope information.
    string requiresAcknowledgement = 16;
    // When set to **true**, Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol.
    string signMessageWithX509Certificate = 17;
    // The namespace of the SOAP interface.
    // 
    // The namespace value must be set if useSoapInterface is set to true.
    string soapNamespace = 18;
    // This is the web address and name of your listener or Retrieving Service endpoint. You need to include HTTPS:// in the web address.
    string urlToPublishTo = 19;
    // When set to **true**, indicates that the `urlToPublishTo` property contains a SOAP endpoint.
    string useSoapInterface = 20;
    // A comma separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When a tracked event occurs for a set user, the a notification message is sent to your Connect listener. 
    // 
    // ###### Note: If allUsers is set to `false` then you must provide a list of user ids.
    string userIds = 21;
}

message ConnectEvents {
    // An array of containing failure information from the Connect failure log.
    repeated connectLog failures = 1;
    // A complex type containing Connect log information. It is divided into two sections, one for regular logs and one for Connect failures.
    repeated connectLog logs = 2;
    // Record count.
    string totalRecords = 3;
    // Type of the user. Valid values: type_owner, type_participant.
    string type = 4;
}

message Contacts {
    // The unique identifier of a person in the contacts address book.
    string contactId = 1;
    repeated contactPhoneNumber contactPhoneNumbers = 2;
    string contactUri = 3;
    repeated string emails = 4;
    errorDetails errorDetails = 5;
    string name = 6;
    string organization = 7;
    // When set to **true**, this custom tab is shared.
    string shared = 8;
    string signingGroup = 9;
    // The display name for the signing group. 
    // 
    // Maximum Length: 100 characters.
    string signingGroupName = 10;
}

message CustomTabs {
    // An optional string that is used to auto-match tabs to strings located in the documents of an envelope.
    string anchor = 1;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 2;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 3;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 4;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // The user name of the DocuSign user who created this object.
    string createdByDisplayName = 11;
    // The userId of the DocuSign user who created this object.
    string createdByUserId = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // When set to **true**, the custom tab is editable. Otherwise the custom tab cannot be modified.
    string editable = 15;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 16;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 17;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 18;
    // Height of the tab in pixels.
    string height = 19;
    // When set to **true**, the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs.
    string includedInEmail = 20;
    // The original value of the tab.
    string initialValue = 21;
    // When set to **true**, the information in the tab is italic.
    string italic = 22;
    // If the tab is a list, this represents the values that are possible for the tab.
    repeated string items = 23;
    // The UTC DateTime this object was last modified. This is in ISO8601 format.
    string lastModified = 24;
    // The User Name of the DocuSign user who last modified this object.
    string lastModifiedByDisplayName = 25;
    // The userId of the DocuSign user who last modified this object.
    string lastModifiedByUserId = 26;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 27;
    // The maximum number of entry characters supported by the custom tab.
    string maximumLength = 28;
    mergeField mergeField = 29;
    string name = 30;
    // When set to **true**, the signer is required to fill out this tab
    string required = 31;
    string scaleValue = 32;
    // When set to **true**, this custom tab is shared.
    string shared = 33;
    string stampType = 34;
    propertyMetadata stampTypeMetadata = 35;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 36;
    // The type of this tab. Values are: Approve, CheckBox, Company, Date, DateSigned,	Decline, Email,	EmailAddress, EnvelopeId, FirstName, Formula, FullName,	InitialHere, InitialHereOptional, LastName, List, Note, Number,	Radio, SignerAttachment, SignHere, SignHereOptional, Ssn, Text, Title, Zip5, or Zip5Dash4.
    string type = 37;
    // When set to **true**, the information in the tab is underlined.
    string underline = 38;
    // The message displayed if the custom tab fails input validation (either custom of embedded).
    string validationMessage = 39;
    // A regular expressionn used to validate input for the tab.
    string validationPattern = 40;
    // Width of the tab in pixels.
    string width = 41;
}

message EMortgageTransactions {
    string documentData = 1;
    string dptName = 2;
    string transactionName = 3;
    string transactionTypeName = 4;
}

message ENoteConfigurations {
    string connectConfigured = 1;
    string eNoteConfigured = 2;
    string organization = 3;
    string password = 4;
    string userName = 5;
}

message EnvelopeAttachments {
    string accessControl = 1;
    string attachmentId = 2;
    string attachmentType = 3;
    errorDetails errorDetails = 4;
    string label = 5;
    string name = 6;
}

message EnvelopeBulkRecipients {
    // A complex type containing information about the bulk recipients in the response.
    repeated bulkRecipient bulkRecipients = 1;
    // The last position in the result set.
    string endPosition = 2;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message EnvelopeConsumerDisclosures {
    // A GUID identifying the account associated with the consumer disclosure
    string accountEsignId = 1;
    // Indicates whether the customer can withdraw their acceptance of the consumer disclosure.
    string allowCDWithdraw = 2;
    settingsMetadata allowCDWithdrawMetadata = 3;
    string changeEmail = 4;
    string changeEmailOther = 5;
    // The name of the company associated with the consumer disclosure.
    string companyName = 6;
    // The phone number of the company associated with the consumer disclosure.
    string companyPhone = 7;
    string copyCostPerPage = 8;
    // Specifies the fee collection method for cases in which the customer requires paper copies of the document.
    // 
    // Maximum Length: 255 characters
    string copyFeeCollectionMethod = 9;
    string copyRequestEmail = 10;
    string custom = 11;
    string enableEsign = 12;
    // The Electronic Record and Signature Disclosure text. The disclosure text includes the html formatting.
    string esignAgreement = 13;
    string esignText = 14;
    string languageCode = 15;
    string mustAgreeToEsign = 16;
    string pdfId = 17;
    string useBrand = 18;
    string useConsumerDisclosureWithinAccount = 19;
    settingsMetadata useConsumerDisclosureWithinAccountMetadata = 20;
    // Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 100 characters.
    string withdrawAddressLine1 = 21;
    // Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 100 characters.
    string withdrawAddressLine2 = 22;
    // Indicates whether the customer can withdraw consent by email.
    string withdrawByEmail = 23;
    // Indicates whether the customer can withdraw consent by postal mail.
    string withdrawByMail = 24;
    // Indicates whether the customer can withdraw consent by phone.
    string withdrawByPhone = 25;
    // Contains the city of the postal address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 50 characters.
    string withdrawCity = 26;
    // Indicates the consequences of withdrawing consent.
    string withdrawConsequences = 27;
    // Contains the email address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 100 characters.
    string withdrawEmail = 28;
    // Indicates other information need to withdraw consent.
    // 
    // Maximum length: 255 characters.
    string withdrawOther = 29;
    // Contains the phone number which a customer can call to register consent withdrawal notification.
    // 
    // Maximum length: 20 characters.
    string withdrawPhone = 30;
    // Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.
    // 
    // Maximum length: 20 characters.
    string withdrawPostalCode = 31;
    // Contains the state of the postal address to which a customer can send a consent withdrawal notification.
    string withdrawState = 32;
}

message EnvelopeCustomFields {
    // An array of list custom fields.
    repeated listCustomField listCustomFields = 1;
    // An array of text custom fields.
    repeated textCustomField textCustomFields = 2;
}

message EnvelopeDocumentFields {
    // The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements: 
    // 
    // * name - A string that can be a maximum of 50 characters. 
    // * value - A string that can be a maximum of 200 characters.
    // 
    // *IMPORTANT*: If you are using xml, the name/value pair is contained in a nameValue element. 
    repeated nameValue documentFields = 1;
}

message EnvelopeDocumentTabs {
    // A tab that allows the recipient to approve documents
    // without placing a signature or initials on the
    // document. If the recipient clicks the Approve tab during the signing
    // process, the recipient is considered to have signed the document. No
    // information is shown on the document for the approval, but it is
    // recorded as a signature in the envelope history.
    repeated approve approveTabs = 1;
    // Specifies a tag on the document in a location where the recipient can select an option.
    repeated checkbox checkboxTabs = 2;
    // Specifies a tag on the document where you want the recipient's company name to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated company companyTabs = 3;
    // Specifies a tab on the document where the date the document was signed will automatically appear.
    repeated dateSigned dateSignedTabs = 4;
    // Specifies a tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained. 
    // 
    // If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format.
    repeated date dateTabs = 5;
    // Specifies a tag on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tag during the signing process, the envelope is voided.
    repeated decline declineTabs = 6;
    // Specifies a location on the document where you want where you want the recipient's email, as entered in the recipient information, to display.
    repeated emailAddress emailAddressTabs = 7;
    // Specifies a tag on the document where you want the recipient to enter an email. Email tags are single-line fields that accept any characters. The system checks that a valid email format (i.e. xxx@yyy.zzz) is entered in the tag. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated email emailTabs = 8;
    // Specifies a tag on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab, it is for informational purposes only.
    repeated envelopeId envelopeIdTabs = 9;
    // Specifies tag on a document where you want the recipient's first name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name.
    repeated firstName firstNameTabs = 10;
    // A list of formula tabs.
    // 
    // The value of a formula tab is calculated
    // from the values of other
    // number or date tabs in the document.
    // When the recipient completes the underlying fields,
    // the formula tab calculates and displays the result.
    // 
    // The `formula` property of the tab
    // contains the references
    // to the underlying tabs.
    // See [Calculated Fields][calculatedfields]
    // in the DocuSign Support Center
    // to learn more about formulas.
    // 
    // If a formula tab contains
    // a `paymentDetails` property,
    // the tab is considered a payment item.
    // See [Requesting Payments Along with Signatures][paymentguide]
    // in the DocuSign Support Center
    // to learn more about payments.
    // 
    // [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
    // [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    repeated formulaTab formulaTabs = 11;
    // Specifies a tag on the document where you want the recipient's name to appear.
    repeated fullName fullNameTabs = 12;
    // Specifies a tag location in the document at which a recipient will place their initials. The `optional` parameter specifies whether the initials are required or optional.
    repeated initialHere initialHereTabs = 13;
    // Specifies a tag on a document where you want the recipient's last name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name.
    repeated lastName lastNameTabs = 14;
    // Specify this tag to give your recipient a list of options, presented as a drop-down list, from which they can select.
    repeated list listTabs = 15;
    // Specifies a location on the document where you want to place additional information, in the form of a note, for a recipient.
    repeated note noteTabs = 16;
    // Specifies a tag on the document where you want the recipient to enter a number. It uses the same parameters as a Text tab, with the validation message and pattern set for number information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated number numberTabs = 17;
    // Specifies a tag on the document in a location where the recipient can select one option from a group of options using a radio button. The radio buttons do not have to be on the same page in a document.
    repeated radioGroup radioGroupTabs = 18;
    // A complex type the contains information about the tag that specifies where the recipient places their signature in the document. The "optional" parameter sets if the signature is required or optional.
    repeated signHere signHereTabs = 19;
    // Specifies a tag on the document when you want the recipient to add supporting documents to an envelope.
    repeated signerAttachment signerAttachmentTabs = 20;
    // Specifies a tag on the document where you want the recipient to enter a Social Security Number (SSN). A SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated ssn ssnTabs = 21;
    // Specifies a that that is an adaptable field that allows the recipient to enter different text information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated text textTabs = 22;
    // Specifies a tag on the document where you want the recipient's title to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated title titleTabs = 23;
    repeated view viewTabs = 24;
    // Specifies a tag on the document where you want the recipient to enter a ZIP code. The ZIP code can be a five numbers or the ZIP+4 format with nine numbers. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated zip zipTabs = 25;
}

message EnvelopeDocumentVisibility {
    repeated documentVisibility documentVisibility = 1;
}

message EnvelopeDocuments {
    repeated envelopeDocument envelopeDocuments = 1;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 2;
}

message EnvelopeEmailSettings {
    // A list of email addresses that receive a copy of all email communications for an envelope. You can use this for archiving purposes.
    repeated bccEmailAddress bccEmailAddresses = 1;
    string replyEmailAddressOverride = 2;
    string replyEmailNameOverride = 3;
}

message EnvelopeFormData {
    // Specifies the subject of the email that is sent to all recipients.
    // 
    // See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.
    string emailSubject = 1;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 2;
    repeated nameValue formData = 3;
    repeated recipientFormData recipientFormData = 4;
    // The date and time the envelope was sent.
    string sentDateTime = 5;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 6;
}

message EnvelopeLocks {
    errorDetails errorDetails = 1;
    // Sets the time, in seconds, until the lock expires when there is no activity on the envelope.
    // 
    // If no value is entered, then the default value of 300 seconds is used. The maximum value is 1,800 seconds.
    // 
    // The lock duration can be extended.
    string lockDurationInSeconds = 2;
    // A unique identifier provided to the owner of the envelope lock.   Used to prove ownership of the lock.
    string lockToken = 3;
    // The type of envelope lock.  Currently "edit" is the only supported type.
    string lockType = 4;
    // Specifies the friendly name of  the application that is locking the envelope.
    string lockedByApp = 5;
    // A complex type containing information about the user that has the Envelope or Template locked.
    userInfo lockedByUser = 6;
    // The datetime until the envelope lock expires.
    string lockedUntilDateTime = 7;
    // Reserved for future use.
    // 
    // Indicates whether a scratchpad is used for editing information.
    string useScratchPad = 8;
}

message EnvelopeRecipientTabs {
    // A tab that allows the recipient to approve documents
    // without placing a signature or initials on the
    // document. If the recipient clicks the Approve tab during the signing
    // process, the recipient is considered to have signed the document. No
    // information is shown on the document for the approval, but it is
    // recorded as a signature in the envelope history.
    repeated approve approveTabs = 1;
    // Specifies a tag on the document in a location where the recipient can select an option.
    repeated checkbox checkboxTabs = 2;
    // Specifies a tag on the document where you want the recipient's company name to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated company companyTabs = 3;
    // Specifies a tab on the document where the date the document was signed will automatically appear.
    repeated dateSigned dateSignedTabs = 4;
    // Specifies a tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained. 
    // 
    // If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format.
    repeated date dateTabs = 5;
    // Specifies a tag on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tag during the signing process, the envelope is voided.
    repeated decline declineTabs = 6;
    // Specifies a location on the document where you want where you want the recipient's email, as entered in the recipient information, to display.
    repeated emailAddress emailAddressTabs = 7;
    // Specifies a tag on the document where you want the recipient to enter an email. Email tags are single-line fields that accept any characters. The system checks that a valid email format (i.e. xxx@yyy.zzz) is entered in the tag. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated email emailTabs = 8;
    // Specifies a tag on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab, it is for informational purposes only.
    repeated envelopeId envelopeIdTabs = 9;
    // Specifies tag on a document where you want the recipient's first name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name.
    repeated firstName firstNameTabs = 10;
    // A list of formula tabs.
    // 
    // The value of a formula tab is calculated
    // from the values of other
    // number or date tabs in the document.
    // When the recipient completes the underlying fields,
    // the formula tab calculates and displays the result.
    // 
    // The `formula` property of the tab
    // contains the references
    // to the underlying tabs.
    // See [Calculated Fields][calculatedfields]
    // in the DocuSign Support Center
    // to learn more about formulas.
    // 
    // If a formula tab contains
    // a `paymentDetails` property,
    // the tab is considered a payment item.
    // See [Requesting Payments Along with Signatures][paymentguide]
    // in the DocuSign Support Center
    // to learn more about payments.
    // 
    // [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
    // [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    repeated formulaTab formulaTabs = 11;
    // Specifies a tag on the document where you want the recipient's name to appear.
    repeated fullName fullNameTabs = 12;
    // Specifies a tag location in the document at which a recipient will place their initials. The `optional` parameter specifies whether the initials are required or optional.
    repeated initialHere initialHereTabs = 13;
    // Specifies a tag on a document where you want the recipient's last name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name.
    repeated lastName lastNameTabs = 14;
    // Specify this tag to give your recipient a list of options, presented as a drop-down list, from which they can select.
    repeated list listTabs = 15;
    // Specifies a location on the document where you want to place additional information, in the form of a note, for a recipient.
    repeated note noteTabs = 16;
    // Specifies a tag on the document where you want the recipient to enter a number. It uses the same parameters as a Text tab, with the validation message and pattern set for number information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated number numberTabs = 17;
    // Specifies a tag on the document in a location where the recipient can select one option from a group of options using a radio button. The radio buttons do not have to be on the same page in a document.
    repeated radioGroup radioGroupTabs = 18;
    // A complex type the contains information about the tag that specifies where the recipient places their signature in the document. The "optional" parameter sets if the signature is required or optional.
    repeated signHere signHereTabs = 19;
    // Specifies a tag on the document when you want the recipient to add supporting documents to an envelope.
    repeated signerAttachment signerAttachmentTabs = 20;
    // Specifies a tag on the document where you want the recipient to enter a Social Security Number (SSN). A SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated ssn ssnTabs = 21;
    // Specifies a that that is an adaptable field that allows the recipient to enter different text information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated text textTabs = 22;
    // Specifies a tag on the document where you want the recipient's title to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated title titleTabs = 23;
    repeated view viewTabs = 24;
    // Specifies a tag on the document where you want the recipient to enter a ZIP code. The ZIP code can be a five numbers or the ZIP+4 format with nine numbers. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated zip zipTabs = 25;
}

message EnvelopeRecipients {
    // A complex type defining the management and access rights of a recipient assigned assigned as an agent on the document.
    repeated agent agents = 1;
    // A complex type containing information about recipients who should receive a copy of the envelope, but does not need to sign it.
    repeated carbonCopy carbonCopies = 2;
    // A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
    repeated certifiedDelivery certifiedDeliveries = 3;
    string currentRoutingOrder = 4;
    // A complex type defining the management and access rights of a recipient assigned assigned as an editor on the document.
    repeated editor editors = 5;
    errorDetails errorDetails = 6;
    // Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
    repeated inPersonSigner inPersonSigners = 7;
    // Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
    repeated intermediary intermediaries = 8;
    // The list of recipient event statuses that will trigger Connect to send updates to the url. It can be a two-part list with:
    // 
    // * recipientEventStatusCode - The recipient status, this can be Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
    // * includeDocuments - When set to **true**, the envelope time zone information is included in the message.
    string recipientCount = 9;
    // A complex type containing information about the Signer recipient.
    repeated signer signers = 10;
}

message EnvelopeTemplates {
    repeated templateSummary templates = 1;
}

message EnvelopeViews {
    // The view URL to be navigated to.
    string url = 1;
}

message Envelopes {
    // When set to **true**, Document Markup is enabled for envelope. Account must have Document Markup enabled to use this
    string allowMarkup = 1;
    // When set to **true**, the recipient can redirect an envelope to a more appropriate recipient.
    string allowReassign = 2;
    // When set to **true**, the envelope is queued for processing and the value of the `status` property is set to 'Processing'. Additionally, get status calls return 'Processing' until completed.
    string asynchronous = 3;
    string attachmentsUri = 4;
    // Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.
    string authoritativeCopy = 5;
    // Specifies whether auto navigation is set for the recipient.
    string autoNavigation = 6;
    // The unique identifier of a brand.
    string brandId = 7;
    string brandLock = 8;
    // Retrieves a URI for an endpoint that allows you to easily retrieve certificate information.
    string certificateUri = 9;
    // Specifies the date and time this item was completed.
    string completedDateTime = 10;
    // Indicates the date and time the item was created.
    string createdDateTime = 11;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    AccountCustomFields customFields = 12;
    // Contains a URI for an endpoint that you can use to retrieve the custom fields.
    string customFieldsUri = 13;
    // The date and time the recipient declined the document.
    string declinedDateTime = 14;
    // Specifies the data and time the item was deleted.
    string deletedDateTime = 15;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 16;
    string documentsCombinedUri = 17;
    // Contains a URI for an endpoint that you can use to retrieve the documents.
    string documentsUri = 18;
    // This is the same as the email body. If specified it is included in email body for all envelope recipients.
    string emailBlurb = 19;
    // A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent. 
    // 
    // When the emailSettings information is used for an envelope, it only applies to that envelope. 
    // 
    // **IMPORTANT**: The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings. 
    // 
    // EmailSettings consists of: 
    // 
    // * replyEmailAddressOverride - The Reply To email used for the envelope. DocuSign will verify that a correct email format is used, but does not verify that the email is active. Maximum Length: 100 characters.
    // * replyEmailNameOverride - The name associated with the Reply To email address. Maximum Length: 100 characters.
    // * bccEmailAddresses - An array of up to five email addresses to which the envelope is sent to as a BCC email. Only users with canManageAccount setting set to true can use this option. 
    // DocuSign verifies that the email format is correct, but does not verify that the email is active. Using this overrides the BCC for Email Archive information setting for this envelope. Maximum Length: 100 characters.
    // *Example*: if your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
    EnvelopeEmailSettings emailSettings = 20;
    // Specifies the subject of the email that is sent to all recipients.
    // 
    // See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.
    string emailSubject = 21;
    // When set to **true**, the signer is allowed to print the document and sign it on paper.
    string enableWetSign = 22;
    // When set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    // 
    // Your account must have Document Visibility enabled to use this.
    string enforceSignerVisibility = 23;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 24;
    // When set to **true**, Envelope ID Stamping is enabled.
    string envelopeIdStamping = 25;
    // Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.
    string envelopeUri = 26;
    string initialSentDateTime = 27;
    // When set to **true**, indicates that this module is enabled on the account.
    string is21CFRPart11 = 28;
    string isSignatureProviderEnvelope = 29;
    // The date and time the item was last modified.
    string lastModifiedDateTime = 30;
    EnvelopeLocks lockInformation = 31;
    // When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 
    // 
    // Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 
    // 
    // However, if the `messageLock` node is set to true**** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
    string messageLock = 32;
    // A complex element that specifies the notification options for the envelope. It consists of:
    // 
    // * useAccountDefaults - When set to **true**, the account default notification settings are used for the envelope. 
    // * reminders - A complex element that specifies reminder settings for the envelope. It consists of: 
    // 
    //    * reminderEnabled - When set to **true**, a reminder message is sent to the recipient.
    //    * reminderDelay - An interger that sets the number of days after the recipient receives the envelope that reminder emails are sent to the recipient. 
    //    * reminderFrequency - An interger that sets the interval, in days, between reminder emails. 
    // 
    // * expirations - A complex element that specifies the expiration settings for the envelope. It consists of:
    // 
    //    * expireEnabled - When set to **true**, the envelope expires (is no longer available for signing) in the set number of days. If false, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used. 
    //    * expireAfter - An integer that sets the number of days the envelope is active.
    //    * expireWarn - An integer that sets the number of days before envelope expiration that an expiration warning email is sent to the recipient. If set to 0 (zero), no warning email is sent. 
    notification notification = 33;
    // Contains a URI for an endpoint that you can use to retrieve the notifications.
    string notificationUri = 34;
    string purgeState = 35;
    EnvelopeRecipients recipients = 36;
    // When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
    string recipientsLock = 37;
    // Contains a URI for an endpoint that you can use to retrieve the recipients.
    string recipientsUri = 38;
    // The date and time the envelope was sent.
    string sentDateTime = 39;
    // Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online.
    string signingLocation = 40;
    // Indicates the envelope status. Valid values are:
    // 
    // * created - The envelope is created as a draft. It can be modified and sent later.
    // * sent - The envelope is sent to the recipients.
    string status = 41;
    // The data and time the status changed.
    string statusChangedDateTime = 42;
    // Contains a URI for an endpoint which you can use to retrieve the templates.
    string templatesUri = 43;
    //  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
    string transactionId = 44;
    // When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 
    // 
    // If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
    string useDisclosure = 45;
    // The date and time the envelope or template was voided.
    string voidedDateTime = 46;
    // The reason the envelope or template was voided.
    string voidedReason = 47;
}

message Folders {
    // A collection of folder objects returned in a response.
    repeated folder folders = 1;
}

message GroupBrands {
    // The list of brands.
    repeated brand brands = 1;
    // The brand seen by envelope recipients when a brand is not explicitly set.
    string recipientBrandIdDefault = 2;
    // The brand seen by envelope senders when a brand is not explicitly set.
    string senderBrandIdDefault = 3;
}

message GroupUsers {
    // The last position in the result set.
    string endPosition = 1;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 2;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 3;
    // The number of results returned in this response.
    string resultSetSize = 4;
    // Starting position of the current result set.
    string startPosition = 5;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 6;
    repeated userInfo users = 7;
}

message Groups {
    // The last position in the result set.
    string endPosition = 1;
    // A collection group objects containing information about the groups returned.
    repeated group groups = 2;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message Invoices {
    // Reserved: TBD
    string amount = 1;
    // Reserved: TBD
    string balance = 2;
    // Reserved: TBD
    string dueDate = 3;
    // Reserved: TBD
    string invoiceId = 4;
    // Reserved: TBD
    repeated billingInvoiceItem invoiceItems = 5;
    // Reserved: TBD
    string invoiceNumber = 6;
    // Contains a URI for an endpoint that you can use to retrieve invoice information.
    string invoiceUri = 7;
    string nonTaxableAmount = 8;
    string pdfAvailable = 9;
    string taxableAmount = 10;
}

message PaymentGatewayAccounts {
    string displayName = 1;
    string paymentGateway = 2;
    string paymentGatewayAccountId = 3;
}

message Payments {
    // Reserved: TBD
    string amount = 1;
    // A sender-defined description of the line item.
    string description = 2;
    string paymentDate = 3;
    string paymentId = 4;
    // When set to **true**, a PDF version of the invoice is available. 
    // 
    // To get the PDF, make the call again and change "Accept:" in the header to "Accept: application/pdf".
    string paymentNumber = 5;
}

message PowerFormData {
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 1;
    // An array of powerform recipients.
    repeated powerFormFormDataRecipient recipients = 2;
}

message PowerForms {
    // Indicates the date and time the item was created.
    string createdDateTime = 1;
    // Specifies the email body of the message sent to the recipient. 
    // 
    // Maximum length: 10000 characters.
    string emailBody = 2;
    // Specifies the subject of the email that is sent to all recipients.
    // 
    // See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.
    string emailSubject = 3;
    repeated Envelopes envelopes = 4;
    errorDetails errorDetails = 5;
    string instructions = 6;
    string isActive = 7;
    string lastUsed = 8;
    string limitUseInterval = 9;
    string limitUseIntervalEnabled = 10;
    string limitUseIntervalUnits = 11;
    string maxUseEnabled = 12;
    string name = 13;
    string powerFormId = 14;
    string powerFormUrl = 15;
    // An array of powerform recipients.
    repeated powerFormRecipient recipients = 16;
    string senderName = 17;
    string senderUserId = 18;
    string signingMode = 19;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 20;
    string templateName = 21;
    string timesUsed = 22;
    string uri = 23;
    string usesRemaining = 24;
}

message RequestLogs {
    // Specifies the maximum number of API requests to log.
    string apiRequestLogMaxEntries = 1;
    // Indicates the remaining number of API requests that can be logged.
    string apiRequestLogRemainingEntries = 2;
    //  When set to **true**, enables API request logging for the user.
    string apiRequestLogging = 3;
}

message Resources {
    repeated nameValue resources = 1;
}

message Services {
    // Reserved: TBD
    string buildBranch = 1;
    // Reserved: TBD
    string buildBranchDeployedDateTime = 2;
    // Reserved: TBD
    string buildSHA = 3;
    // Reserved: TBD
    string buildVersion = 4;
    repeated string linkedSites = 5;
    repeated serviceVersion serviceVersions = 6;
}

message SigningGroupUsers {
    repeated signingGroupUser users = 1;
}

message SigningGroups {
    // The UTC DateTime when the workspace user authorization was created.
    string created = 1;
    string createdBy = 2;
    errorDetails errorDetails = 3;
    string groupEmail = 4;
    // The name of the group.
    string groupName = 5;
    // The group type.
    string groupType = 6;
    string modified = 7;
    string modifiedBy = 8;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 9;
    repeated signingGroupUser users = 10;
}

message TemplateBulkRecipients {
    // A complex type containing information about the bulk recipients in the response.
    repeated bulkRecipient bulkRecipients = 1;
    // The last position in the result set.
    string endPosition = 2;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message TemplateCustomFields {
    // An array of list custom fields.
    repeated listCustomField listCustomFields = 1;
    // An array of text custom fields.
    repeated textCustomField textCustomFields = 2;
}

message TemplateDocumentFields {
    // The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements: 
    // 
    // * name - A string that can be a maximum of 50 characters. 
    // * value - A string that can be a maximum of 200 characters.
    // 
    // *IMPORTANT*: If you are using xml, the name/value pair is contained in a nameValue element. 
    repeated nameValue documentFields = 1;
}

message TemplateDocumentTabs {
    // A tab that allows the recipient to approve documents
    // without placing a signature or initials on the
    // document. If the recipient clicks the Approve tab during the signing
    // process, the recipient is considered to have signed the document. No
    // information is shown on the document for the approval, but it is
    // recorded as a signature in the envelope history.
    repeated approve approveTabs = 1;
    // Specifies a tag on the document in a location where the recipient can select an option.
    repeated checkbox checkboxTabs = 2;
    // Specifies a tag on the document where you want the recipient's company name to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated company companyTabs = 3;
    // Specifies a tab on the document where the date the document was signed will automatically appear.
    repeated dateSigned dateSignedTabs = 4;
    // Specifies a tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained. 
    // 
    // If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format.
    repeated date dateTabs = 5;
    // Specifies a tag on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tag during the signing process, the envelope is voided.
    repeated decline declineTabs = 6;
    // Specifies a location on the document where you want where you want the recipient's email, as entered in the recipient information, to display.
    repeated emailAddress emailAddressTabs = 7;
    // Specifies a tag on the document where you want the recipient to enter an email. Email tags are single-line fields that accept any characters. The system checks that a valid email format (i.e. xxx@yyy.zzz) is entered in the tag. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated email emailTabs = 8;
    // Specifies a tag on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab, it is for informational purposes only.
    repeated envelopeId envelopeIdTabs = 9;
    // Specifies tag on a document where you want the recipient's first name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name.
    repeated firstName firstNameTabs = 10;
    // A list of formula tabs.
    // 
    // The value of a formula tab is calculated
    // from the values of other
    // number or date tabs in the document.
    // When the recipient completes the underlying fields,
    // the formula tab calculates and displays the result.
    // 
    // The `formula` property of the tab
    // contains the references
    // to the underlying tabs.
    // See [Calculated Fields][calculatedfields]
    // in the DocuSign Support Center
    // to learn more about formulas.
    // 
    // If a formula tab contains
    // a `paymentDetails` property,
    // the tab is considered a payment item.
    // See [Requesting Payments Along with Signatures][paymentguide]
    // in the DocuSign Support Center
    // to learn more about payments.
    // 
    // [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
    // [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    repeated formulaTab formulaTabs = 11;
    // Specifies a tag on the document where you want the recipient's name to appear.
    repeated fullName fullNameTabs = 12;
    // Specifies a tag location in the document at which a recipient will place their initials. The `optional` parameter specifies whether the initials are required or optional.
    repeated initialHere initialHereTabs = 13;
    // Specifies a tag on a document where you want the recipient's last name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name.
    repeated lastName lastNameTabs = 14;
    // Specify this tag to give your recipient a list of options, presented as a drop-down list, from which they can select.
    repeated list listTabs = 15;
    // Specifies a location on the document where you want to place additional information, in the form of a note, for a recipient.
    repeated note noteTabs = 16;
    // Specifies a tag on the document where you want the recipient to enter a number. It uses the same parameters as a Text tab, with the validation message and pattern set for number information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated number numberTabs = 17;
    // Specifies a tag on the document in a location where the recipient can select one option from a group of options using a radio button. The radio buttons do not have to be on the same page in a document.
    repeated radioGroup radioGroupTabs = 18;
    // A complex type the contains information about the tag that specifies where the recipient places their signature in the document. The "optional" parameter sets if the signature is required or optional.
    repeated signHere signHereTabs = 19;
    // Specifies a tag on the document when you want the recipient to add supporting documents to an envelope.
    repeated signerAttachment signerAttachmentTabs = 20;
    // Specifies a tag on the document where you want the recipient to enter a Social Security Number (SSN). A SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated ssn ssnTabs = 21;
    // Specifies a that that is an adaptable field that allows the recipient to enter different text information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated text textTabs = 22;
    // Specifies a tag on the document where you want the recipient's title to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated title titleTabs = 23;
    repeated view viewTabs = 24;
    // Specifies a tag on the document where you want the recipient to enter a ZIP code. The ZIP code can be a five numbers or the ZIP+4 format with nine numbers. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated zip zipTabs = 25;
}

message TemplateDocumentVisibility {
    repeated documentVisibility documentVisibility = 1;
}

message TemplateDocuments {
    repeated envelopeDocument templateDocuments = 1;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 2;
}

message TemplateLocks {
    errorDetails errorDetails = 1;
    // Sets the time, in seconds, until the lock expires when there is no activity on the envelope.
    // 
    // If no value is entered, then the default value of 300 seconds is used. The maximum value is 1,800 seconds.
    // 
    // The lock duration can be extended.
    string lockDurationInSeconds = 2;
    // A unique identifier provided to the owner of the envelope lock.   Used to prove ownership of the lock.
    string lockToken = 3;
    // The type of envelope lock.  Currently "edit" is the only supported type.
    string lockType = 4;
    // Specifies the friendly name of  the application that is locking the envelope.
    string lockedByApp = 5;
    // A complex type containing information about the user that has the Envelope or Template locked.
    userInfo lockedByUser = 6;
    // The datetime until the envelope lock expires.
    string lockedUntilDateTime = 7;
    // Reserved for future use.
    // 
    // Indicates whether a scratchpad is used for editing information.
    string useScratchPad = 8;
}

message TemplateRecipientTabs {
    // A tab that allows the recipient to approve documents
    // without placing a signature or initials on the
    // document. If the recipient clicks the Approve tab during the signing
    // process, the recipient is considered to have signed the document. No
    // information is shown on the document for the approval, but it is
    // recorded as a signature in the envelope history.
    repeated approve approveTabs = 1;
    // Specifies a tag on the document in a location where the recipient can select an option.
    repeated checkbox checkboxTabs = 2;
    // Specifies a tag on the document where you want the recipient's company name to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated company companyTabs = 3;
    // Specifies a tab on the document where the date the document was signed will automatically appear.
    repeated dateSigned dateSignedTabs = 4;
    // Specifies a tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained. 
    // 
    // If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format.
    repeated date dateTabs = 5;
    // Specifies a tag on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tag during the signing process, the envelope is voided.
    repeated decline declineTabs = 6;
    // Specifies a location on the document where you want where you want the recipient's email, as entered in the recipient information, to display.
    repeated emailAddress emailAddressTabs = 7;
    // Specifies a tag on the document where you want the recipient to enter an email. Email tags are single-line fields that accept any characters. The system checks that a valid email format (i.e. xxx@yyy.zzz) is entered in the tag. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated email emailTabs = 8;
    // Specifies a tag on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab, it is for informational purposes only.
    repeated envelopeId envelopeIdTabs = 9;
    // Specifies tag on a document where you want the recipient's first name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name.
    repeated firstName firstNameTabs = 10;
    // A list of formula tabs.
    // 
    // The value of a formula tab is calculated
    // from the values of other
    // number or date tabs in the document.
    // When the recipient completes the underlying fields,
    // the formula tab calculates and displays the result.
    // 
    // The `formula` property of the tab
    // contains the references
    // to the underlying tabs.
    // See [Calculated Fields][calculatedfields]
    // in the DocuSign Support Center
    // to learn more about formulas.
    // 
    // If a formula tab contains
    // a `paymentDetails` property,
    // the tab is considered a payment item.
    // See [Requesting Payments Along with Signatures][paymentguide]
    // in the DocuSign Support Center
    // to learn more about payments.
    // 
    // [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
    // [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    repeated formulaTab formulaTabs = 11;
    // Specifies a tag on the document where you want the recipient's name to appear.
    repeated fullName fullNameTabs = 12;
    // Specifies a tag location in the document at which a recipient will place their initials. The `optional` parameter specifies whether the initials are required or optional.
    repeated initialHere initialHereTabs = 13;
    // Specifies a tag on a document where you want the recipient's last name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name.
    repeated lastName lastNameTabs = 14;
    // Specify this tag to give your recipient a list of options, presented as a drop-down list, from which they can select.
    repeated list listTabs = 15;
    // Specifies a location on the document where you want to place additional information, in the form of a note, for a recipient.
    repeated note noteTabs = 16;
    // Specifies a tag on the document where you want the recipient to enter a number. It uses the same parameters as a Text tab, with the validation message and pattern set for number information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated number numberTabs = 17;
    // Specifies a tag on the document in a location where the recipient can select one option from a group of options using a radio button. The radio buttons do not have to be on the same page in a document.
    repeated radioGroup radioGroupTabs = 18;
    // A complex type the contains information about the tag that specifies where the recipient places their signature in the document. The "optional" parameter sets if the signature is required or optional.
    repeated signHere signHereTabs = 19;
    // Specifies a tag on the document when you want the recipient to add supporting documents to an envelope.
    repeated signerAttachment signerAttachmentTabs = 20;
    // Specifies a tag on the document where you want the recipient to enter a Social Security Number (SSN). A SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated ssn ssnTabs = 21;
    // Specifies a that that is an adaptable field that allows the recipient to enter different text information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated text textTabs = 22;
    // Specifies a tag on the document where you want the recipient's title to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated title titleTabs = 23;
    repeated view viewTabs = 24;
    // Specifies a tag on the document where you want the recipient to enter a ZIP code. The ZIP code can be a five numbers or the ZIP+4 format with nine numbers. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated zip zipTabs = 25;
}

message TemplateRecipients {
    // A complex type defining the management and access rights of a recipient assigned assigned as an agent on the document.
    repeated agent agents = 1;
    // A complex type containing information about recipients who should receive a copy of the envelope, but does not need to sign it.
    repeated carbonCopy carbonCopies = 2;
    // A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
    repeated certifiedDelivery certifiedDeliveries = 3;
    string currentRoutingOrder = 4;
    // A complex type defining the management and access rights of a recipient assigned assigned as an editor on the document.
    repeated editor editors = 5;
    errorDetails errorDetails = 6;
    // Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
    repeated inPersonSigner inPersonSigners = 7;
    // Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
    repeated intermediary intermediaries = 8;
    // The list of recipient event statuses that will trigger Connect to send updates to the url. It can be a two-part list with:
    // 
    // * recipientEventStatusCode - The recipient status, this can be Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
    // * includeDocuments - When set to **true**, the envelope time zone information is included in the message.
    string recipientCount = 9;
    // A complex type containing information about the Signer recipient.
    repeated signer signers = 10;
}

message TemplateViews {
    // The view URL to be navigated to.
    string url = 1;
}

message Templates {
    // When set to **true**, Document Markup is enabled for envelope. Account must have Document Markup enabled to use this
    string allowMarkup = 1;
    // When set to **true**, the recipient can redirect an envelope to a more appropriate recipient.
    string allowReassign = 2;
    // When set to **true**, the envelope is queued for processing and the value of the `status` property is set to 'Processing'. Additionally, get status calls return 'Processing' until completed.
    string asynchronous = 3;
    string attachmentsUri = 4;
    // Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.
    string authoritativeCopy = 5;
    // Specifies whether auto navigation is set for the recipient.
    string autoNavigation = 6;
    // The unique identifier of a brand.
    string brandId = 7;
    string brandLock = 8;
    // Retrieves a URI for an endpoint that allows you to easily retrieve certificate information.
    string certificateUri = 9;
    // Specifies the date and time this item was completed.
    string completedDateTime = 10;
    // Indicates the date and time the item was created.
    string createdDateTime = 11;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    AccountCustomFields customFields = 12;
    // Contains a URI for an endpoint that you can use to retrieve the custom fields.
    string customFieldsUri = 13;
    // The date and time the recipient declined the document.
    string declinedDateTime = 14;
    // Specifies the data and time the item was deleted.
    string deletedDateTime = 15;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 16;
    // Complex element contains the details on the documents in the envelope.
    repeated document documents = 17;
    string documentsCombinedUri = 18;
    // Contains a URI for an endpoint that you can use to retrieve the documents.
    string documentsUri = 19;
    string emailBlurb = 20;
    EnvelopeEmailSettings emailSettings = 21;
    // Specifies the subject of the email that is sent to all recipients.
    // 
    // See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.
    string emailSubject = 22;
    // When set to **true**, the signer is allowed to print the document and sign it on paper.
    string enableWetSign = 23;
    // When set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    // 
    // Your account must have Document Visibility enabled to use this.
    string enforceSignerVisibility = 24;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 25;
    // When set to **true**, Envelope ID Stamping is enabled.
    string envelopeIdStamping = 26;
    // A complex element containing the following information:
    // 
    // templateId: Unique identifier of the template. If this is not provided, DocuSign will generate a value. 
    // 
    // name: Name of the template. Maximum length: 100 characters.
    // 
    // shared: When set to **true**, the template is shared with the Everyone group in the account. If false, the template is only shared with the Administrator group.
    // 
    // password: Password, if the template is locked.
    // 
    // description: Description of the template. Maximum Length: 500 characters.
    // 
    // pageCount: Number of document pages in the template.
    // 
    // folderName: The name of the folder the template is located in.
    // 
    // folderId: The ID for the folder.
    // 
    // owner: The userName, email, userId, userType, and userStatus for the template owner.
    envelopeTemplateDefinition envelopeTemplateDefinition = 27;
    // Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.
    string envelopeUri = 28;
    string initialSentDateTime = 29;
    // When set to **true**, indicates that this module is enabled on the account.
    string is21CFRPart11 = 30;
    string isSignatureProviderEnvelope = 31;
    // The date and time the item was last modified.
    string lastModifiedDateTime = 32;
    EnvelopeLocks lockInformation = 33;
    // When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 
    // 
    // Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 
    // 
    // However, if the `messageLock` node is set to true**** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
    string messageLock = 34;
    notification notification = 35;
    // Contains a URI for an endpoint that you can use to retrieve the notifications.
    string notificationUri = 36;
    string purgeState = 37;
    EnvelopeRecipients recipients = 38;
    // When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
    string recipientsLock = 39;
    // Contains a URI for an endpoint that you can use to retrieve the recipients.
    string recipientsUri = 40;
    // The date and time the envelope was sent.
    string sentDateTime = 41;
    // Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online.
    string signingLocation = 42;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 43;
    // The data and time the status changed.
    string statusChangedDateTime = 44;
    // Contains a URI for an endpoint which you can use to retrieve the templates.
    string templatesUri = 45;
    //  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
    string transactionId = 46;
    // When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 
    // 
    // If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
    string useDisclosure = 47;
    // The date and time the envelope or template was voided.
    string voidedDateTime = 48;
    // The reason the envelope or template was voided.
    string voidedReason = 49;
}

message UserCustomSettings {
    // The name/value pair information for the user custom setting.
    repeated nameValue customSettings = 1;
}

message UserProfiles {
    addressInformation_v2 address = 1;
    // These properties cannot be modified in the PUT. 
    // 
    // Indicates the authentication methods used by the user.
    repeated authenticationMethod authenticationMethods = 2;
    // The name of the user's Company.
    string companyName = 3;
    //  When set to **true**, the user's company and title information are shown on the ID card.
    string displayOrganizationInfo = 4;
    // When set to **true**, the user's Address and Phone number are shown on the ID card.
    string displayPersonalInfo = 5;
    // When set to **true**, the user's ID card can be viewed from signed documents and envelope history.
    string displayProfile = 6;
    // When set to **true**, the user's usage information is shown on the ID card.
    string displayUsageHistory = 7;
    string profileImageUri = 8;
    // The title of the user.
    string title = 9;
    // A complex element consisting of: 
    // 
    // * lastSentDateTime - the date and time the user last sent an envelope. 
    // * lastSignedDateTime - the date and time the user last signed an envelope.
    // * sentCount - the number of envelopes the user has sent.
    // * signedCount - the number of envelopes the user has signed. 
    usageHistory usageHistory = 10;
    Users userDetails = 11;
    string userProfileLastModifiedDate = 12;
}

message UserSignatures {
    // The date and time the user adopted their signature.
    string adoptedDateTime = 1;
    // Indicates the date and time the item was created.
    string createdDateTime = 2;
    dateStampProperties dateStampProperties = 3;
    errorDetails errorDetails = 4;
    string externalID = 5;
    // One of **signature_image** or **initials_image**.
    string imageType = 6;
    string initials150ImageId = 7;
    // Contains the URI for an endpoint that you can use to retrieve the initials image.
    string initialsImageUri = 8;
    string isDefault = 9;
    string phoneticName = 10;
    string signature150ImageId = 11;
    // The font type for the signature, if the signature is not drawn. The supported font types are:
    // 
    // "7_DocuSign", "1_DocuSign", "6_DocuSign", "8_DocuSign", "3_DocuSign", "Mistral", "4_DocuSign", "2_DocuSign", "5_DocuSign", "Rage Italic"
    string signatureFont = 12;
    // Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.
    string signatureId = 13;
    // Contains the URI for an endpoint that you can use to retrieve the signature image.
    string signatureImageUri = 14;
    //  The initials associated with the signature.
    string signatureInitials = 15;
    // Specifies the user signature name.
    string signatureName = 16;
    string signatureType = 17;
    string stampFormat = 18;
    string stampImageUri = 19;
    string stampSizeMM = 20;
    string stampType = 21;
}

message UserSocialAccountLogins {
    // The users email address.
    string email = 1;
    errorDetails errorDetails = 2;
    // The social account provider (Facebook, Yahoo, etc.)
    string provider = 3;
    // The ID provided by the Socal Account.
    string socialId = 4;
    // The full user name for the account.
    string userName = 5;
}

message Users {
    userAccountManagementGranularInformation accountManagementGranular = 1;
    // The activation code the new user must enter when activating their account.
    string activationAccessCode = 2;
    // Indicates the date and time the item was created.
    string createdDateTime = 3;
    // The name/value pair information for the user custom setting.
    repeated nameValue customSettings = 4;
    string email = 5;
    // Specifies whether the user is enabled for updates from DocuSign Connect. Valid values: true or false.
    string enableConnectForUser = 6;
    errorDetails errorDetails = 7;
    // The user's first name. 
    // Maximum Length: 50 characters.
    string firstName = 8;
    // A complex element that has up to four Question/Answer pairs for forgotten password information.
    forgottenPasswordInformation forgottenPasswordInfo = 9;
    // A list of the group information for groups to add the user to. Group information can be found by calling [ML:GET group information]. The only required parameter is groupId. 
    // 
    // The parameters are:
    // 
    // * groupId - The DocuSign group ID for the group.
    // * groupName - The name of the group
    // * permissionProfileId - The ID of the permission profile associated with the group.
    // * groupType - The group type.
    repeated group groupList = 10;
    // Specifies the email for the signing host. It is a Required element for In Person Signers recipient Type. 
    // Maximum Length: 100 characters.
    addressInformation_v2 homeAddress = 11;
    // Contains the URI for an endpoint that you can use to retrieve the initials image.
    string initialsImageUri = 12;
    // Determines if the feature set is actively set as part of the plan.
    string isAdmin = 13;
    // Shows the date-time when the user last logged on to the system.
    string lastLogin = 14;
    // The user's last name. 
    // Maximum Length: 50 characters.
    string lastName = 15;
    // Shows the current status of the user's password. Possible values are: 
    // 
    // * password_reset
    // * password_active
    // * password_expired
    // * password_locked
    // * password_reset_failed 
    string loginStatus = 16;
    // The user's middle name. 
    // Maximum Length: 50 characters.
    string middleName = 17;
    string password = 18;
    string passwordExpiration = 19;
    string permissionProfileId = 20;
    string permissionProfileName = 21;
    string profileImageUri = 22;
    // When set to **true**, specifies that an additional activation email is sent to the user if they fail a log on before activating their account.
    string sendActivationOnInvalidLogin = 23;
    // Contains the URI for an endpoint that you can use to retrieve the signature image.
    string signatureImageUri = 24;
    // The suffix for the user's name. 
    // 
    // Maximum Length: 50 characters.
    string suffixName = 25;
    // The title of the user.
    string title = 26;
    string uri = 27;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 28;
    string userName = 29;
    string userProfileLastModifiedDate = 30;
    //  The name/value pair information for user settings. These determine the actions that a user can take in the account. The `[ML:userSettings]` are listed and described below.
    repeated nameValue userSettings = 31;
    string userStatus = 32;
    string userType = 33;
    addressInformation_v2 workAddress = 34;
}

message WorkspaceItems {
    workspaceUserAuthorization callerAuthorization = 1;
    string contentType = 2;
    // The UTC DateTime when the workspace item was created.
    string created = 3;
    string createdById = 4;
    workspaceUser createdByInformation = 5;
    string extension = 6;
    string fileSize = 7;
    string fileUri = 8;
    string id = 9;
    //  If true, this supersedes need for bit mask permission with workspaceUserAuthorization
    string isPublic = 10;
    // Utc date and time the comment was last updated (can only be done by creator.)
    string lastModified = 11;
    // Utc date and time the comment was last updated (can only be done by creator)
    string lastModifiedById = 12;
    workspaceUser lastModifiedByInformation = 13;
    // A simple string description of the item, such as a file name or a folder name.
    string name = 14;
    string pageCount = 15;
    // The ID of the parent folder. This is the GUID of the parent folder, or the special value 'root' for the root folder.
    string parentFolderId = 16;
    string parentFolderUri = 17;
    // The type of the workspace item. Valid values are file, folder.
    string type = 18;
    string uri = 19;
}

message Workspaces {
    string billableAccountId = 1;
    // The UTC DateTime when the workspace user authorization was created.
    string created = 2;
    workspaceUser createdByInformation = 3;
    // Utc date and time the comment was last updated (can only be done by creator.)
    string lastModified = 4;
    workspaceUser lastModifiedByInformation = 5;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 6;
    // The relative URL that may be used to access the workspace.
    string workspaceBaseUrl = 7;
    // Text describing the purpose of the workspace.
    string workspaceDescription = 8;
    // The id of the workspace, always populated.
    string workspaceId = 9;
    // The name of the workspace.
    string workspaceName = 10;
    // The relative URI that may be used to access the workspace.
    string workspaceUri = 11;
}

message AccountAddress {
    // First Line of the address.
    // Maximum length: 100 characters.
    string address1 = 1;
    // Second Line of the address.
    // Maximum length: 100 characters.
    string address2 = 2;
    // The city value of the address.
    string city = 3;
    // Specifies the country associated with the address.
    string country = 4;
    string email = 5;
    string fax = 6;
    // The user's first name. 
    // Maximum Length: 50 characters.
    string firstName = 7;
    string lastName = 8;
    string phone = 9;
    string postalCode = 10;
    // The state or province associated with the address.
    string state = 11;
    // Contains an array of countries supported by the billing plan.
    repeated country supportedCountries = 12;
}

message AccountBillingPlan {
    // Reserved:
    repeated addOn addOns = 1;
    // Reserved: TBD
    string canCancelRenewal = 2;
    // When set to **true**, specifies that you can upgrade the account through the API.
    string canUpgrade = 3;
    // Specifies the ISO currency code for the account.
    string currencyCode = 4;
    // When set to **true**, then customer support is provided as part of the account plan.
    string enableSupport = 5;
    // The number of seats (users) included.
    string includedSeats = 6;
    // Reserved: TBD
    string incrementalSeats = 7;
    string isDowngrade = 8;
    //  Any other percentage discount for the plan.
    string otherDiscountPercent = 9;
    string paymentCycle = 10;
    //  The payment method used with the plan. The possible values are: CreditCard, PurchaseOrder, Premium, or Freemium.
    string paymentMethod = 11;
    string perSeatPrice = 12;
    // Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.
    string planClassification = 13;
    // A complex type that sets the feature sets for the account. It contains the following information (all string content):
    // 
    // * currencyFeatureSetPrices - Contains the currencyCode and currencySymbol for the alternate currency values for envelopeFee, fixedFee, seatFee that are configured for this plan feature set.
    // * envelopeFee - An incremental envelope cost for plans with envelope overages (when isEnabled=true).
    // * featureSetId - A unique ID for the feature set.
    // * fixedFee - A one-time fee associated with the plan (when isEnabled=true).
    // * isActive - Specifies whether the feature set is actively set as part of the plan.
    // * isEnabled - Specifies whether the feature set is actively enabled as part of the plan.
    // * name - The name of the feature set.
    // * seatFee - An incremental seat cost for seat-based plans (when isEnabled=true).
    repeated featureSet planFeatureSets = 14;
    // The DocuSign Plan ID for the account.
    string planId = 15;
    // The name of the Billing Plan.
    string planName = 16;
    // The renewal status for the account. The acceptable values are:
    // 
    // * auto: The account automatically renews.
    // * queued_for_close: Account will be closed at the billingPeriodEndDate.
    // * queued_for_downgrade: Account will be downgraded at the billingPeriodEndDate.
    string renewalStatus = 17;
    //  A complex type that contains any seat discount information.
    // 
    // Values are: BeginSeatCount, EndSeatCount, and SeatDiscountPercent.
    repeated seatDiscount seatDiscounts = 18;
    // The support incident fee charged for each support incident.
    string supportIncidentFee = 19;
    // The support plan fee charged for this plan.
    string supportPlanFee = 20;
}

message AccountMinimumPasswordLength {
    string maximumLength = 1;
    string minimumLength = 2;
}

message AccountPasswordExpirePasswordDays {
    string maximumDays = 1;
    string minimumDays = 2;
}

message AccountPasswordLockoutDurationMinutes {
    string maximumMinutes = 1;
    string minimumMinutes = 2;
}

message AccountPasswordLockoutDurationType {
    repeated string options = 1;
}

message AccountPasswordMinimumPasswordAgeDays {
    string maximumAge = 1;
    string minimumAge = 2;
}

message AccountPasswordQuestionsRequired {
    string maximumQuestions = 1;
    string minimumQuestions = 2;
}

message AccountPasswordStrengthType {
    repeated accountPasswordStrengthTypeOption options = 1;
}

message AccountPasswordStrengthTypeOption {
    string minimumLength = 1;
    string name = 2;
    string passwordIncludeDigit = 3;
    string passwordIncludeDigitOrSpecialCharacter = 4;
    string passwordIncludeLowerCase = 5;
    string passwordIncludeSpecialCharacter = 6;
    string passwordIncludeUpperCase = 7;
}

message AccountRoleSettings {
    string allowAccountManagement = 1;
    settingsMetadata allowAccountManagementMetadata = 2;
    string allowApiAccess = 3;
    settingsMetadata allowApiAccessMetadata = 4;
    string allowApiAccessToAccount = 5;
    settingsMetadata allowApiAccessToAccountMetadata = 6;
    string allowApiSendingOnBehalfOfOthers = 7;
    settingsMetadata allowApiSendingOnBehalfOfOthersMetadata = 8;
    string allowApiSequentialSigning = 9;
    settingsMetadata allowApiSequentialSigningMetadata = 10;
    string allowBulkSending = 11;
    settingsMetadata allowBulkSendingMetadata = 12;
    string allowDocuSignDesktopClient = 13;
    settingsMetadata allowDocuSignDesktopClientMetadata = 14;
    string allowEnvelopeSending = 15;
    settingsMetadata allowEnvelopeSendingMetadata = 16;
    string allowSendersToSetRecipientEmailLanguage = 17;
    settingsMetadata allowSendersToSetRecipientEmailLanguageMetadata = 18;
    string allowSignerAttachments = 19;
    settingsMetadata allowSignerAttachmentsMetadata = 20;
    string allowSupplementalDocuments = 21;
    settingsMetadata allowSupplementalDocumentsMetadata = 22;
    string allowTaggingInSendAndCorrect = 23;
    settingsMetadata allowTaggingInSendAndCorrectMetadata = 24;
    string allowVaulting = 25;
    settingsMetadata allowVaultingMetadata = 26;
    string allowWetSigningOverride = 27;
    settingsMetadata allowWetSigningOverrideMetadata = 28;
    string allowedAddressBookAccess = 29;
    settingsMetadata allowedAddressBookAccessMetadata = 30;
    string allowedTemplateAccess = 31;
    settingsMetadata allowedTemplateAccessMetadata = 32;
    string allowedToBeEnvelopeTransferRecipient = 33;
    settingsMetadata allowedToBeEnvelopeTransferRecipientMetadata = 34;
    string canCreateWorkspaces = 35;
    settingsMetadata canCreateWorkspacesMetadata = 36;
    string disableDocumentUpload = 37;
    settingsMetadata disableDocumentUploadMetadata = 38;
    string disableOtherActions = 39;
    settingsMetadata disableOtherActionsMetadata = 40;
    string enableApiRequestLogging = 41;
    settingsMetadata enableApiRequestLoggingMetadata = 42;
    string enableRecipientViewingNotifications = 43;
    settingsMetadata enableRecipientViewingNotificationsMetadata = 44;
    string enableSequentialSigningInterface = 45;
    settingsMetadata enableSequentialSigningInterfaceMetadata = 46;
    string enableTransactionPointIntegration = 47;
    settingsMetadata enableTransactionPointIntegrationMetadata = 48;
    string powerFormRole = 49;
    settingsMetadata powerFormRoleMetadata = 50;
    string receiveCompletedSelfSignedDocumentsAsEmailLinks = 51;
    settingsMetadata receiveCompletedSelfSignedDocumentsAsEmailLinksMetadata = 52;
    string supplementalDocumentsMustAccept = 53;
    settingsMetadata supplementalDocumentsMustAcceptMetadata = 54;
    string supplementalDocumentsMustRead = 55;
    settingsMetadata supplementalDocumentsMustReadMetadata = 56;
    string supplementalDocumentsMustView = 57;
    settingsMetadata supplementalDocumentsMustViewMetadata = 58;
    string useNewDocuSignExperienceInterface = 59;
    settingsMetadata useNewDocuSignExperienceInterfaceMetadata = 60;
    string useNewSendingInterface = 61;
    settingsMetadata useNewSendingInterfaceMetadata = 62;
    string vaultingMode = 63;
    settingsMetadata vaultingModeMetadata = 64;
}

message AccountSettingsInformation {
    // The list of
    // [account settings][accountsettings]
    // that determine
    // the features available for the account.
    // Note that some features are determined
    // by the plan used to create the account and cannot be overridden.
    // 
    // [accountsettings]: /esign/restapi/Accounts/Accounts/create/#account-settings
    repeated nameValue accountSettings = 1;
}

message AccountSharedAccess {
    // The account ID associated with the envelope.
    string accountId = 1;
    // The last position in the result set.
    string endPosition = 2;
    // A complex type containing an errorCode and message identifying the error that occurred.
    errorDetails errorDetails = 3;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 4;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 5;
    // The number of results returned in this response.
    string resultSetSize = 6;
    // A complex type containing the shared access information to an envelope for the users specified in the request.
    repeated memberSharedItems sharedAccess = 7;
    // Starting position of the current result set.
    string startPosition = 8;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 9;
}

message AccountSignatureProvider {
    string isRequired = 1;
    string priority = 2;
    string signatureProviderDisplayName = 3;
    string signatureProviderId = 4;
    // The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. [The current provider list.](../../../../guide/appendix/standards_based_signatures.html#signature-provider-options)
    string signatureProviderName = 5;
    repeated accountSignatureProviderOption signatureProviderOptionsMetadata = 6;
    repeated signatureProviderRequiredOption signatureProviderRequiredOptions = 7;
}

message AccountSignatureProviderOption {
    string signatureProviderOptionDisplayName = 1;
    string signatureProviderOptionId = 2;
    string signatureProviderOptionName = 3;
}

message AddOn {
    // Reserved:
    string active = 1;
    // Reserved:
    string addOnId = 2;
    string id = 3;
    // Reserved:
    string name = 4;
}

message AddressInformation {
    // The city associated with the address.
    string city = 1;
    // Specifies the country associated with the address.
    string country = 2;
    // A Fax number associated with the address if one is available.
    string fax = 3;
    // A phone number associated with the address.
    string phone = 4;
    // The state or province associated with the address.
    string state = 5;
    // The first line of the address.
    string street1 = 6;
    // The second line of the address (optional).
    string street2 = 7;
    // The zip or postal code associated with the address.
    string zip = 8;
}

message AddressInformationInput {
    // A complex type that contains the following information for the new account (all string content): address1, address2, city, country, fax, phone, postalCode and state.
    // 
    // ###### Note: If country is US (United States) then State codes are validated for US States.
    // 
    // Otherwise, State is treated as a non-validated string and serves the purpose of entering a state/province/region.
    // The maximum characters for the strings are:
    // 
    // * address1, address2, city, country and state: 100 characters
    // * postalCode, phone, and fax: 20 characters
    addressInformation addressInformation = 1;
    // Specifies the display level for the recipient. 
    // Valid values are: 
    // 
    // * ReadOnly
    // * Editable
    // * DoNotDisplay
    string displayLevelCode = 2;
    // When set to **true**, the information needs to be returned in the response.
    string receiveInResponse = 3;
}

message AddressInformation_v2 {
    // First Line of the address.
    // Maximum length: 100 characters.
    string address1 = 1;
    // Second Line of the address.
    // Maximum length: 100 characters.
    string address2 = 2;
    string city = 3;
    // Specifies the country associated with the address.
    string country = 4;
    string fax = 5;
    string phone = 6;
    string postalCode = 7;
    // The state or province associated with the address.
    string stateOrProvince = 8;
}

message Agent {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
    string addAccessCodeToEmail = 2;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 3;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated string customFields = 4;
    // The date and time the recipient declined the document.
    string declinedDateTime = 5;
    // The reason the recipient declined the document.
    string declinedReason = 6;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 7;
    // Reserved: For DocuSign use only.
    string deliveryMethod = 8;
    repeated documentVisibility documentVisibility = 9;
    // Email id of the recipient. Notification of the document to sign is sent to this email id. 
    // 
    // Maximum length: 100 characters.
    string email = 10;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 11;
    string emailRecipientPostSigningURL = 12;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 13;
    errorDetails errorDetails = 14;
    // Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    // 
    // When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    repeated string excludedDocuments = 15;
    // Reserved:
    string faxNumber = 16;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 17;
    // A complex element that contains input information related to a recipient ID check. It can include the following information.
    // 
    // addressInformationInput: Used to set recipient address information and consists of:
    // 
    // * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // dobInformationInput: Used to set recipient date of birth information and consists of:
    // 
    // * dateOfBirth: Specifies the recipient's date, month and year of birth.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn4InformationInput: Used to set the last four digits of the recipient's SSN information and consists of:
    // 
    // * ssn4: Specifies the last four digits of the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn9InformationInput: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of: 
    // * ssn9: Specifies the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    idCheckInformationInput idCheckInformationInput = 18;
    // When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
    string inheritEmailNotificationConfiguration = 19;
    string name = 20;
    // A note sent to the recipient in the signing email.
    // This note is unique to this recipient.
    // In the user interface,
    // it appears near the upper left corner
    // of the document
    // on the signing screen.
    // 
    // Maximum Length: 1000 characters.
    string note = 21;
    // A complex type that Contains the elements:
    // 
    // * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose.
    // * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use.
    // * recordVoicePrint - Reserved.
    // * validateRecipProvidedNumber - Reserved.
    recipientPhoneAuthentication phoneAuthentication = 22;
    // Reserved:
    repeated recipientAttachment recipientAttachments = 23;
    authenticationStatus recipientAuthenticationStatus = 24;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 25;
    string recipientIdGuid = 26;
    // When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
    string requireIdLookup = 27;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 28;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 29;
    // Contains the name/value pair information for the SAML assertion attributes:
    // 
    // * name - The name of the SAML assertion attribute.
    // * value - The value associated with the named SAML assertion attribute. 
    // 
    // Your account must be set up to use SSO to use this.
    recipientSAMLAuthentication samlAuthentication = 30;
    // The date and time the envelope was sent.
    string sentDateTime = 31;
    // Reserved: For DocuSign use only.
    string signedDateTime = 32;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 33;
    // The display name for the signing group. 
    // 
    // Maximum Length: 100 characters.
    string signingGroupName = 34;
    // A complex type that contains information about users in the signing group.
    repeated userInfo signingGroupUsers = 35;
    // Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication. 
    recipientSMSAuthentication smsAuthentication = 36;
    //  Lists the social ID type that can be used for recipient authentication.
    repeated socialAuthentication socialAuthentications = 37;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 38;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 39;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 40;
    string totalTabCount = 41;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 42;
}

message ApiRequestLog {
    // Indicates the date and time the item was created.
    string createdDateTime = 1;
    // A sender-defined description of the line item.
    string description = 2;
    string requestLogId = 3;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 4;
}

message ApiRequestLogsResult {
    // Reserved: TBD
    repeated apiRequestLog apiRequestLogs = 1;
}

message AppStoreProduct {
    string marketPlace = 1;
    // The Product ID from the AppStore.
    string productId = 2;
}

message AppStoreReceipt {
    // The Product ID from the AppStore.
    string productId = 1;
    // Reserved: TBD
    string receiptData = 2;
}

message Approve {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    //  Specifies the approval text displayed in the tab.
    string buttonText = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 14;
    errorDetails errorDetails = 15;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 16;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 17;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 18;
    // Height of the tab in pixels.
    int32 height = 19;
    // When set to **true**, the information in the tab is italic.
    string italic = 20;
    mergeField mergeField = 21;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 22;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 23;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 24;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 25;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 26;
    string tabOrder = 27;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 28;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 29;
    // When set to **true**, the information in the tab is underlined.
    string underline = 30;
    // Width of the tab in pixels.
    int32 width = 31;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 32;
    // This indicates the vertical offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string yPosition = 33;
}

message Attachment {
    string accessControl = 1;
    string attachmentId = 2;
    // Specifies the type of the attachment for the recipient.
    string attachmentType = 3;
    string data = 4;
    string label = 5;
    string name = 6;
    string remoteUrl = 7;
}

message AuthenticationMethod {
    // Indicates the type of authentication. Valid values are: PhoneAuth, STAN, ISCheck, OFAC, AccessCode, AgeVerify, or SSOAuth.
    string authenticationType = 1;
    // The last provider that authenticated the user.
    string lastProvider = 2;
    //  The data and time the user last used the authentication method.
    string lastTimestamp = 3;
    // The number of times the authentication method was used.
    int32 totalCount = 4;
}

message AuthenticationStatus {
    eventResult accessCodeResult = 1;
    eventResult ageVerifyResult = 2;
    eventResult anySocialIDResult = 3;
    eventResult facebookResult = 4;
    eventResult googleResult = 5;
    eventResult idLookupResult = 6;
    eventResult idQuestionsResult = 7;
    eventResult linkedinResult = 8;
    eventResult liveIDResult = 9;
    eventResult ofacResult = 10;
    eventResult openIDResult = 11;
    eventResult phoneAuthResult = 12;
    eventResult sTANPinResult = 13;
    eventResult salesforceResult = 14;
    eventResult signatureProviderResult = 15;
    eventResult smsAuthResult = 16;
    eventResult twitterResult = 17;
    eventResult yahooResult = 18;
}

message BccEmailAddress {
    // Only users with canManageAccount setting can use this option. An array of up to 5 email addresses the envelope is sent to as a BCC email. 
    //  
    // Example: If your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
    string bccEmailAddressId = 1;
    // Specifies the BCC email address. DocuSign verifies that the email format is correct, but does not verify that the email is active.Using this overrides the BCC for Email Archive information setting for this envelope.
    // 
    // Maximum of length: 100 characters.
    string email = 2;
}

message BillingCharge {
    // Reserved: TBD
    string allowedQuantity = 1;
    // Reserved: TBD
    string blocked = 2;
    // Provides information on what services the charge item is for.
    // 
    // The following table provides a description of the different chargeName values available at this time.
    // 
    // | chargeName | Description |
    // | --- | --- |
    // | id_check | ID Check Charge |
    // | in_person_signing | In Person Signing charge |
    // | envelopes Included | Sent Envelopes for the account |
    // | age_verify | Age verification check |
    // | ofac | OFAC Check |
    // | id_confirm | ID confirmation check |
    // | student_authentication | STAN PIN authentication check |
    // | wet_sign_fax | Pages for returning signed documents by fax |
    // | attachment_fax | Pages for returning attachments by fax |
    // | phone_authentication | Phone authentication charge |
    // | powerforms | PowerForm envelopes sent |
    // | signer_payments | Payment processing charge |
    // | outbound_fax | Send by fax charge |
    // | bulk_recipient_envelopes | Bulk Recipient Envelopes sent |
    // | sms_authentications | SMS authentication charge |
    // | saml_authentications | SAML authentication charge |
    // | express_signer_certificate | DocuSign Express Certificate charge |
    // | personal_signer_certificate | Personal Signer Certificate charge |
    // | safe_certificate | SAFE BioPharma Signer Certificate charge |
    // | seats | Included active seats charge |
    // | open_trust_certificate | OpenTrust Signer Certificate charge |
    string chargeName = 3;
    // Reserved: TBD
    string chargeType = 4;
    // Reserved: TBD
    string chargeUnitOfMeasure = 5;
    repeated billingDiscount discounts = 6;
    string firstEffectiveDate = 7;
    string includedQuantity = 8;
    // Reserved: TBD
    string incrementalQuantity = 9;
    string lastEffectiveDate = 10;
    repeated billingPrice prices = 11;
    // Reserved: TBD
    string unitPrice = 12;
    string usedQuantity = 13;
}

message BillingChargeResponse {
    // Reserved: TBD
    repeated billingCharge billingChargeItems = 1;
}

message BillingDiscount {
    // Reserved: TBD
    string beginQuantity = 1;
    string discount = 2;
    string endQuantity = 3;
}

message BillingInvoiceItem {
    // Reserved: TBD
    string chargeAmount = 1;
    // Reserved: TBD
    string chargeName = 2;
    // Reserved: TBD
    string invoiceItemId = 3;
    // The quantity of envelopes to add to the account.
    string quantity = 4;
    // Reserved: TBD
    string unitPrice = 5;
}

message BillingInvoicesResponse {
    // Reserved: TBD
    repeated Invoices billingInvoices = 1;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 2;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 3;
}

message BillingInvoicesSummary {
    // Reserved: TBD
    repeated Invoices billingInvoices = 1;
    string pastDueBalance = 2;
    string paymentAllowed = 3;
}

message BillingPayment {
    // Reserved: TBD
    string amount = 1;
    // Reserved: TBD
    string invoiceId = 2;
    string paymentId = 3;
}

message BillingPaymentRequest {
    // The payment amount for the past due invoices. This value must match the pastDueBalance value retrieved using Get Past Due Invoices.
    string paymentAmount = 1;
}

message BillingPaymentResponse {
    // Reserved: TBD
    repeated billingPayment billingPayments = 1;
}

message BillingPaymentsResponse {
    // Reserved: TBD
    repeated Payments billingPayments = 1;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 2;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 3;
}

message BillingPlan {
    // Reserved: TBD
    repeated appStoreProduct appStoreProducts = 1;
    // Contains the currencyCode and currencySymbol for the alternate currency values for envelopeFee, fixedFee, and seatFee that are configured for this plan feature set.
    repeated currencyPlanPrice currencyPlanPrices = 2;
    // When set to **true**, then customer support is provided as part of the account plan.
    string enableSupport = 3;
    // The number of seats (users) included.
    string includedSeats = 4;
    string otherDiscountPercent = 5;
    //  The payment cycle associated with the plan. The possible values are: Monthly or Annually.
    string paymentCycle = 6;
    string paymentMethod = 7;
    // The per seat price for the plan.
    string perSeatPrice = 8;
    // Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.
    string planClassification = 9;
    // A complex type that sets the feature sets for the account.
    repeated featureSet planFeatureSets = 10;
    // The DocuSign Plan ID for the account.
    string planId = 11;
    // The name of the Billing Plan.
    string planName = 12;
    repeated seatDiscount seatDiscounts = 13;
    // The support incident fee charged for each support incident.
    string supportIncidentFee = 14;
    // The support plan fee charged for this plan.
    string supportPlanFee = 15;
}

message BillingPlanInformation {
    appStoreReceipt appStoreReceipt = 1;
    accountAddress billingAddress = 2;
    // A complex type that has information about the credit card used to pay for this account.
    creditCardInformation creditCardInformation = 3;
    string downgradeReason = 4;
    // When set to **true**, then customer support is provided as part of the account plan.
    string enableSupport = 5;
    // The number of seats (users) included.
    string includedSeats = 6;
    // Reserved: TBD
    string incrementalSeats = 7;
    paymentProcessorInformation paymentProcessorInformation = 8;
    // An object used to identify the features and attributes of the account being created.
    planInformation planInformation = 9;
    // A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry 
    // 
    // ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only. 
    referralInformation referralInformation = 10;
    string renewalStatus = 11;
    // Reserved for DocuSign use only.
    string saleDiscountAmount = 12;
    // Reserved for DocuSign use only.
    string saleDiscountFixedAmount = 13;
    // Reserved for DocuSign use only.
    string saleDiscountPercent = 14;
    // Reserved for DocuSign use only.
    string saleDiscountPeriods = 15;
    // Reserved for DocuSign use only.
    string saleDiscountSeatPriceOverride = 16;
}

message BillingPlanPreview {
    // Specifies the ISO currency code for the account.
    string currencyCode = 1;
    Invoices invoice = 2;
    string isProrated = 3;
    string subtotalAmount = 4;
    string taxAmount = 5;
    string totalAmount = 6;
}

message BillingPlanResponse {
    billingPlan billingPlan = 1;
    repeated billingPlan successorPlans = 2;
}

message BillingPlanUpdateResponse {
    string accountPaymentMethod = 1;
    billingPlanPreview billingPlanPreview = 2;
    // Specifies the ISO currency code for the account.
    string currencyCode = 3;
    // The number of seats (users) included.
    string includedSeats = 4;
    string paymentCycle = 5;
    string paymentMethod = 6;
    // The DocuSign Plan ID for the account.
    string planId = 7;
    string planName = 8;
}

message BillingPlansResponse {
    // Reserved: TBD
    repeated billingPlan billingPlans = 1;
}

message BillingPrice {
    // Reserved: TBD
    string beginQuantity = 1;
    string endQuantity = 2;
    // Reserved: TBD
    string unitPrice = 3;
}

message Brand {
    // The name of the company associated with this brand.
    string brandCompany = 1;
    // The ID used to identify a specific brand in API calls.
    string brandId = 2;
    // The name of the brand.
    string brandName = 3;
    repeated nameValue colors = 4;
    repeated brandEmailContent emailContent = 5;
    errorDetails errorDetails = 6;
    string isOverridingCompanyName = 7;
    string isSendingDefault = 8;
    string isSigningDefault = 9;
    repeated nameValue landingPages = 10;
    repeated brandLink links = 11;
    brandLogos logos = 12;
    brandResourceUrls resources = 13;
}

message BrandEmailContent {
    string content = 1;
    string emailContentType = 2;
    string emailToLink = 3;
    string linkText = 4;
}

message BrandLink {
    string linkText = 1;
    string linkType = 2;
    string showLink = 3;
    string urlOrMailTo = 4;
}

message BrandLogos {
    string email = 1;
    string primary = 2;
    string secondary = 3;
}

message BrandRequest {
    // The ID of the brand used in API calls
    string brandId = 1;
}

message BrandResourceUrls {
    string email = 1;
    string sending = 2;
    string signing = 3;
    string signingCaptive = 4;
}

message BrandResources {
    userInfo createdByUserInfo = 1;
    string createdDate = 2;
    userInfo modifiedByUserInfo = 3;
    string modifiedDate = 4;
    repeated string modifiedTemplates = 5;
    string resourcesContentType = 6;
    string resourcesContentUri = 7;
}

message BrandResourcesList {
    repeated brandResources resourcesContentTypes = 1;
}

message BrandsRequest {
    // The list of brands.
    repeated brandRequest brands = 1;
}

message BulkEnvelope {
    // Reserved: TBD
    string bulkRecipientRow = 1;
    // Indicates the status of the bulk send operation. Returned values can be:
    // * queued
    // * processing
    // * sent
    // * failed
    string bulkStatus = 2;
    string email = 3;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 4;
    // Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.
    string envelopeUri = 5;
    errorDetails errorDetails = 6;
    string name = 7;
    string submittedDateTime = 8;
    //  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
    string transactionId = 9;
}

message BulkEnvelopeStatus {
    // Specifies an identifier which can be used to retrieve a more detailed status of individual bulk recipient batches.
    string batchId = 1;
    // The number of items returned in this response.
    string batchSize = 2;
    // Reserved: TBD
    repeated bulkEnvelope bulkEnvelopes = 3;
    // Reserved: TBD
    string bulkEnvelopesBatchUri = 4;
    // The last position in the result set.
    string endPosition = 5;
    // The number of entries with a status of failed.
    string failed = 6;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 7;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 8;
    // The number of entries with a status of queued.
    string queued = 9;
    // The number of results returned in this response.
    string resultSetSize = 10;
    // The number of entries with a status of sent.
    string sent = 11;
    // Starting position of the current result set.
    string startPosition = 12;
    string submittedDate = 13;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 14;
}

message BulkRecipient {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // Specifies the recipient's email address. 
    // 
    // Maximum length: 100 characters.
    string email = 2;
    // Array or errors.
    repeated errorDetails errorDetails = 3;
    // Specifies the authentication check used for the signer. If blank then no authentication check is required for the signer. Only one value can be used in this field.
    // 
    // The acceptable values are:
    // 
    // * KBA: Enables the normal ID check authentication set up for your account.
    // * Phone: Enables phone authentication.
    // * SMS: Enables SMS authentication.
    string identification = 4;
    // Specifies the recipient's name. 
    // 
    // Maximum length: 50 characters.
    string name = 5;
    // A note sent to the recipient in the signing email.
    // This note is unique to this recipient.
    // In the user interface,
    // it appears near the upper left corner
    // of the document
    // on the signing screen.
    // 
    // Maximum Length: 1000 characters.
    string note = 6;
    // This is only used if the Identification field value is Phone or SMS. The value for this field can be a valid telephone number or, if Phone, usersupplied (SMS authentication cannot use a user supplied number). Parenthesis and dashes can be used in the telephone number.
    // 
    // If `usersupplied` is used, the signer supplies his or her own telephone number.
    string phoneNumber = 7;
    repeated bulkRecipientSignatureProvider recipientSignatureProviderInfo = 8;
    string rowNumber = 9;
    // Specifies values used to populate recipient tabs with information. This allows each bulk recipient signer to have different values for their associated tabs. Any number of `tabLabel` columns can be added to the bulk recipient file.
    // 
    // The information used in the bulk recipient file header must be the same as the `tabLabel` for the tab.
    // 
    // The values entered in this column are automatically inserted into the corresponding tab for the recipient in the same row.
    // 
    // Note that this option cannot be used for tabs that do not have data or that are automatically populated data such as Signature, Full Name, Email Address, Company, Title, and Date Signed tabs.
    repeated bulkRecipientTabLabel tabLabels = 10;
}

message BulkRecipientSignatureProvider {
    string name = 1;
    // Specifies the value of the tab.
    string value = 2;
}

message BulkRecipientTabLabel {
    string name = 1;
    // Specifies the value of the tab.
    string value = 2;
}

message BulkRecipientsRequest {
    // A complex type containing information about the bulk recipients in the request.
    repeated bulkRecipient bulkRecipients = 1;
}

message BulkRecipientsSummaryResponse {
    // A complex type containing information about the bulk recipients in the response.
    repeated bulkRecipient bulkRecipients = 1;
    // The number of items returned in this response.
    string bulkRecipientsCount = 2;
    // Contains a URI for an endpoint that allows you to easily retrieve bulk recipient information.
    string bulkRecipientsUri = 3;
    // Array or errors.
    repeated errorDetails errorDetails = 4;
}

message BulkRecipientsUpdateResponse {
    signer signer = 1;
}

message CaptiveRecipient {
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 1;
    // Specifies the email address associated with the captive recipient.
    string email = 2;
    errorDetails errorDetails = 3;
    // Specifies the user name associated with the captive recipient.
    string userName = 4;
}

message CaptiveRecipientInformation {
    // A complex type containing information about one or more captive recipients.
    repeated captiveRecipient captiveRecipients = 1;
}

message CarbonCopy {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
    string addAccessCodeToEmail = 2;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 3;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated string customFields = 4;
    // The date and time the recipient declined the document.
    string declinedDateTime = 5;
    // The reason the recipient declined the document.
    string declinedReason = 6;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 7;
    // Reserved: For DocuSign use only.
    string deliveryMethod = 8;
    repeated documentVisibility documentVisibility = 9;
    // Email id of the recipient. Notification of the document to sign is sent to this email id. 
    // 
    // Maximum length: 100 characters.
    string email = 10;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 11;
    string emailRecipientPostSigningURL = 12;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 13;
    errorDetails errorDetails = 14;
    // Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    // 
    // When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    repeated string excludedDocuments = 15;
    // Reserved:
    string faxNumber = 16;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 17;
    // A complex element that contains input information related to a recipient ID check. It can include the following information.
    // 
    // addressInformationInput: Used to set recipient address information and consists of:
    // 
    // * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // dobInformationInput: Used to set recipient date of birth information and consists of:
    // 
    // * dateOfBirth: Specifies the recipient's date, month and year of birth.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn4InformationInput: Used to set the last four digits of the recipient's SSN information and consists of:
    // 
    // * ssn4: Specifies the last four digits of the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn9InformationInput: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of: 
    // * ssn9: Specifies the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    idCheckInformationInput idCheckInformationInput = 18;
    // When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
    string inheritEmailNotificationConfiguration = 19;
    // legal name of the recipient.
    // 
    // Maximum Length: 100 characters.
    string name = 20;
    // A note sent to the recipient in the signing email.
    // This note is unique to this recipient.
    // In the user interface,
    // it appears near the upper left corner
    // of the document
    // on the signing screen.
    // 
    // Maximum Length: 1000 characters.
    string note = 21;
    // A complex type that Contains the elements:
    // 
    // * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose.
    // * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use.
    // * recordVoicePrint - Reserved.
    // * validateRecipProvidedNumber - Reserved.
    recipientPhoneAuthentication phoneAuthentication = 22;
    // Reserved:
    repeated recipientAttachment recipientAttachments = 23;
    authenticationStatus recipientAuthenticationStatus = 24;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 25;
    string recipientIdGuid = 26;
    // When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
    string requireIdLookup = 27;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 28;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 29;
    recipientSAMLAuthentication samlAuthentication = 30;
    // The date and time the envelope was sent.
    string sentDateTime = 31;
    // Reserved: For DocuSign use only.
    string signedDateTime = 32;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 33;
    // The display name for the signing group. 
    // 
    // Maximum Length: 100 characters.
    string signingGroupName = 34;
    // A complex type that contains information about users in the signing group.
    repeated userInfo signingGroupUsers = 35;
    // Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication. 
    recipientSMSAuthentication smsAuthentication = 36;
    //  Lists the social ID type that can be used for recipient authentication.
    repeated socialAuthentication socialAuthentications = 37;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 38;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 39;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 40;
    string totalTabCount = 41;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 42;
}

message CertifiedDelivery {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
    string addAccessCodeToEmail = 2;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 3;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated string customFields = 4;
    // The date and time the recipient declined the document.
    string declinedDateTime = 5;
    // The reason the recipient declined the document.
    string declinedReason = 6;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 7;
    // Reserved: For DocuSign use only.
    string deliveryMethod = 8;
    repeated documentVisibility documentVisibility = 9;
    string email = 10;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 11;
    string emailRecipientPostSigningURL = 12;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 13;
    errorDetails errorDetails = 14;
    // Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    // 
    // When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    repeated string excludedDocuments = 15;
    // Reserved:
    string faxNumber = 16;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 17;
    // A complex element that contains input information related to a recipient ID check. It can include the following information.
    // 
    // addressInformationInput: Used to set recipient address information and consists of:
    // 
    // * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // dobInformationInput: Used to set recipient date of birth information and consists of:
    // 
    // * dateOfBirth: Specifies the recipient's date, month and year of birth.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn4InformationInput: Used to set the last four digits of the recipient's SSN information and consists of:
    // 
    // * ssn4: Specifies the last four digits of the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn9InformationInput: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of: 
    // * ssn9: Specifies the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    idCheckInformationInput idCheckInformationInput = 18;
    // When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
    string inheritEmailNotificationConfiguration = 19;
    string name = 20;
    // A note sent to the recipient in the signing email.
    // This note is unique to this recipient.
    // In the user interface,
    // it appears near the upper left corner
    // of the document
    // on the signing screen.
    // 
    // Maximum Length: 1000 characters.
    string note = 21;
    // A complex type that Contains the elements:
    // 
    // * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose.
    // * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use.
    // * recordVoicePrint - Reserved.
    // * validateRecipProvidedNumber - Reserved.
    recipientPhoneAuthentication phoneAuthentication = 22;
    // Reserved:
    repeated recipientAttachment recipientAttachments = 23;
    authenticationStatus recipientAuthenticationStatus = 24;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 25;
    string recipientIdGuid = 26;
    // When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
    string requireIdLookup = 27;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 28;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 29;
    recipientSAMLAuthentication samlAuthentication = 30;
    // The date and time the envelope was sent.
    string sentDateTime = 31;
    // Reserved: For DocuSign use only.
    string signedDateTime = 32;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 33;
    // The display name for the signing group. 
    // 
    // Maximum Length: 100 characters.
    string signingGroupName = 34;
    // A complex type that contains information about users in the signing group.
    repeated userInfo signingGroupUsers = 35;
    // Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication. 
    recipientSMSAuthentication smsAuthentication = 36;
    //  Lists the social ID type that can be used for recipient authentication.
    repeated socialAuthentication socialAuthentications = 37;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 38;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 39;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 40;
    string totalTabCount = 41;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 42;
}

message Checkbox {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 9;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 10;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 11;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 12;
    errorDetails errorDetails = 13;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 14;
    mergeField mergeField = 15;
    // Specifies the tool tip text for the tab.
    string name = 16;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 17;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 18;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 19;
    // When set to **true**, the signer is required to fill out this tab
    string required = 20;
    // When set to **true**, the checkbox is selected.
    string selected = 21;
    // When set to **true**, this custom tab is shared.
    string shared = 22;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 23;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 24;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 25;
    string tabOrder = 26;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 27;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 28;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 29;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 30;
}

message ChunkedUploadPart {
    string sequence = 1;
    // Reserved: TBD
    string size = 2;
}

message ChunkedUploadRequest {
    string chunkedUploadId = 1;
    string data = 2;
}

message CloudStorageProvider {
    // The authentication URL used for the cloud storage provider. This information is only included in the response if the user has not passed authentication for the cloud storage provider. If the redirectUrl query string is provided, the returnUrl is appended to the authenticationUrl.
    string authenticationUrl = 1;
    errorDetails errorDetails = 2;
    // The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
    // 
    // The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
    string redirectUrl = 3;
    // The service name for the cloud storage provider.
    string service = 4;
    // The DocuSign generated ID for the cloud storage provider
    string serviceId = 5;
}

message Company {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // When set to **true**, the information in the tab is italic.
    string italic = 20;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 21;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 22;
    mergeField mergeField = 23;
    // Specifies the tool tip text for the tab.
    string name = 24;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 25;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 26;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 27;
    // When set to **true**, the signer is required to fill out this tab
    string required = 28;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 29;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 30;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 31;
    string tabOrder = 32;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 33;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 34;
    // When set to **true**, the information in the tab is underlined.
    string underline = 35;
    // Specifies the value of the tab.
    string value = 36;
    // Width of the tab in pixels.
    int32 width = 37;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 38;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 39;
}

message CompositeTemplate {
    // The identify of this composite template. It is used as a reference when adding document object information. If used, the document's `content-disposition` must include the composite template ID to which the document should be added. If a composite template ID is not specified in the content-disposition, the document is applied based on the value of the `documentId` property only. If no document object is specified, the composite template inherits the first document.
    string compositeTemplateId = 1;
    document document = 2;
    //  Zero or more inline templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value.
    repeated inlineTemplate inlineTemplates = 3;
    string pdfMetaDataTemplateSequence = 4;
    // 0 or more server-side templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value
    repeated serverTemplate serverTemplates = 5;
}

message ConnectConfigResults {
    // Array of Connect Configurations
    repeated ConnectConfigurations configurations = 1;
    // Record count.
    string totalRecords = 2;
}

message ConnectDebugLog {
    string connectConfig = 1;
    errorDetails errorDetails = 2;
    string eventDateTime = 3;
    string eventDescription = 4;
    string payload = 5;
}

message ConnectFailureFilter {
    repeated string envelopeIds = 1;
    string synchronous = 2;
}

message ConnectFailureResult {
    // Reserved: TBD
    string configId = 1;
    // Reserved: TBD
    string configUrl = 2;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 3;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 4;
    string statusMessage = 5;
}

message ConnectFailureResults {
    repeated connectFailureResult retryQueue = 1;
}

message ConnectLog {
    // The account ID associated with the envelope.
    string accountId = 1;
    // The web address of the listener or Retrieving Service end point for Connect.
    string configUrl = 2;
    // A complex element containing information about the Connect configuration, error details, date/time, description and payload.
    // 
    // This is only included in the response if the query additional_info=true is used.
    repeated connectDebugLog connectDebugLog = 3;
    // The identifier for the Connect configuration that failed. If an account has multiple Connect configurations, this value is used to look up the Connect configuration for the failed post.
    string connectId = 4;
    // The date and time the entry was created.
    string created = 5;
    // The email that sent the envelope.
    string email = 6;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 7;
    // The error that caused the Connect post to fail.
    string error = 8;
    // The failure log ID for the failure.
    string failureId = 9;
    // The URI for the failure.
    string failureUri = 10;
    // The date and time the last attempt to post.
    string lastTry = 11;
    // The Connect log ID for the entry.
    string logId = 12;
    // The URI for the log item.
    string logUri = 13;
    // The number of times the Connect post has been retried.
    string retryCount = 14;
    // The UEI to retry to publish the Connect failure.
    string retryUri = 15;
    // The new envelope status for the failed Connect post. The possible values are: Any, Voided, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut, Template, or Processing.
    string status = 16;
    // The envelope subject.
    string subject = 17;
    // The name of the envelope sender.
    string userName = 18;
}

message ConsoleViewRequest {
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 1;
    // The URL to be redirected to after the console view session has ended.
    string returnUrl = 2;
}

message ContactGetResponse {
    repeated Contacts contacts = 1;
    // The last position in the result set.
    string endPosition = 2;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message ContactModRequest {
    repeated Contacts contacts = 1;
}

message ContactPhoneNumber {
    string phoneNumber = 1;
    string phoneType = 2;
}

message ContactUpdateResponse {
    repeated Contacts contacts = 1;
}

message CorrectViewRequest {
    // The url used after correct/send view session has ended. DocuSign redirects to the url and includes an event parameter that can be used by your app. The event parameters returned are: 
    // 
    // * send (user corrected and sent the envelope)
    // * save (user saved the envelope)
    // * cancel (user canceled the transaction.)
    // * error (there was an error when performing the correct or send)
    // * sessionEnd (the session ended before the user completed a different action)
    // 
    // ###### Note: Include https:// in the URL or the redirect might not succeed on some browsers.
    string returnUrl = 1;
    // Specifies whether the window is displayed with or without dressing.
    string suppressNavigation = 2;
}

message Country {
    string isoCode = 1;
    string name = 2;
    string provinceValidated = 3;
    repeated province provinces = 4;
}

message CreditCardInformation {
    // A complex element containing the credit card billing address information. 
    // 
    // This can be the same as billing address and follows the same rules as billingAddress. It contains the following elements: street1, street2, city, state, zip, zipPlus4, phone, fax, and country.
    addressInformation address = 1;
    // The number on the credit card.
    string cardNumber = 2;
    // The credit card type. Valid values are: visa, mastercard, or amex.
    string cardType = 3;
    // The month that the credit card expires (1-12).
    string expirationMonth = 4;
    // The year 4 digit year in which the credit card expires.
    string expirationYear = 5;
    // The exact name printed on the credit card.
    string nameOnCard = 6;
}

message CreditCardTypes {
    // An array containing supported credit card types.
    repeated string cardTypes = 1;
}

message CurrencyFeatureSetPrice {
    // Specifies the alternate ISO currency code for the account.
    string currencyCode = 1;
    // Specifies the alternate currency symbol for the account.
    string currencySymbol = 2;
    // An incremental envelope cost for plans with envelope overages (when `isEnabled` is set to **true**.)
    string envelopeFee = 3;
    // Specifies a one-time fee associated with the plan (when `isEnabled` is set to **true**.)
    string fixedFee = 4;
    // Specifies an incremental seat cost for seat-based plans (when `isEnabled` is set to **true**.)
    string seatFee = 5;
}

message CurrencyPlanPrice {
    // Specifies the ISO currency code for the account.
    string currencyCode = 1;
    // Specifies the currency symbol for the account.
    string currencySymbol = 2;
    string perSeatPrice = 3;
    // The support incident fee charged for each support incident.
    string supportIncidentFee = 4;
    // The support plan fee charged for this plan.
    string supportPlanFee = 5;
    // A simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi).
    creditCardTypes supportedCardTypes = 6;
}

message CustomField {
    string customFieldType = 1;
    errorDetails errorDetails = 2;
    // An ID used to specify a custom field.
    string fieldId = 3;
    repeated string listItems = 4;
    string name = 5;
    // When set to **true**, the signer is required to fill out this tab
    string required = 6;
    // A boolean indicating if the value should be displayed.
    string show = 7;
    // Specifies the value of the tab.
    string value = 8;
}

message CustomField_v2 {
    // If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
    string configurationType = 1;
    errorDetails errorDetails = 2;
    // An ID used to specify a custom field.
    string fieldId = 3;
    string name = 4;
    // When set to **true**, the signer is required to fill out this tab
    string required = 5;
    // A boolean indicating if the value should be displayed.
    string show = 6;
    // The value of the custom field.
    string value = 7;
}

message CustomFieldsEnvelope {
    // An array of list custom fields.
    repeated listCustomField listCustomFields = 1;
    // An array of text custom fields.
    repeated textCustomField textCustomFields = 2;
}

message Date {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // When set to **true**, the information in the tab is italic.
    string italic = 20;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 21;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 22;
    mergeField mergeField = 23;
    string name = 24;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 25;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 26;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 27;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 28;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 29;
    // When set to **true**, the signer is required to fill out this tab
    string required = 30;
    // When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 
    // 
    // This value tab can only be changed by modifying (PUT) the template. 
    // 
    // Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
    string senderRequired = 31;
    // When set to **true**, this custom tab is shared.
    string shared = 32;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 33;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 34;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 35;
    string tabOrder = 36;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 37;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 38;
    // When set to **true**, the information in the tab is underlined.
    string underline = 39;
    // The message displayed if the custom tab fails input validation (either custom of embedded).
    string validationMessage = 40;
    // A regular expressionn used to validate input for the tab.
    string validationPattern = 41;
    // Specifies the value of the tab.
    string value = 42;
    // Width of the tab in pixels.
    int32 width = 43;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 44;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 45;
}

message DateSigned {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 10;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 11;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 12;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 13;
    errorDetails errorDetails = 14;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 15;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 16;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 17;
    // When set to **true**, the information in the tab is italic.
    string italic = 18;
    mergeField mergeField = 19;
    string name = 20;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 21;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 22;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 23;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 24;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 25;
    string tabOrder = 26;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 27;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 28;
    // When set to **true**, the information in the tab is underlined.
    string underline = 29;
    // Specifies the value of the tab.
    string value = 30;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 31;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 32;
}

message DateStampProperties {
    string dateAreaHeight = 1;
    string dateAreaWidth = 2;
    string dateAreaX = 3;
    string dateAreaY = 4;
}

message Decline {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    //  Specifies the decline text displayed in the tab.
    string buttonText = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // The reason the recipient declined the document.
    string declineReason = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // Height of the tab in pixels.
    int32 height = 20;
    // When set to **true**, the information in the tab is italic.
    string italic = 21;
    mergeField mergeField = 22;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 23;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 24;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 25;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 26;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 27;
    string tabOrder = 28;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 29;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 30;
    // When set to **true**, the information in the tab is underlined.
    string underline = 31;
    // Width of the tab in pixels.
    int32 width = 32;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 33;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 34;
}

message DobInformationInput {
    // Specifies the recipient's date, month, and year of birth.
    string dateOfBirth = 1;
    // Specifies the display level for the recipient. 
    // Valid values are: 
    // 
    // * ReadOnly
    // * Editable
    // * DoNotDisplay
    string displayLevelCode = 2;
    // When set to **true**, the information needs to be returned in the response.
    string receiveInResponse = 3;
}

message Document {
    // Reserved: TBD
    string applyAnchorTabs = 1;
    // This string sets the display and behavior properties of
    // the document during signing. The possible values are:
    // 
    // * `modal`<br>
    //   The document is shown as a supplement action strip
    //   and can be viewed, downloaded, or printed in a modal window.
    //   This is the recommended value for supplemental documents. 
    // 
    // * `download`<br>
    //   The document is shown as a supplement action strip
    //   and can be viewed, downloaded, or printed in a new browser window. 
    // 
    // * `inline`<br>
    //   The document is shown in the normal signing window.
    //   This value is not used with supplemental documents,
    //   but is the default value for all other documents.
    string display = 2;
    // The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding.
    string documentBase64 = 3;
    repeated nameValue documentFields = 4;
    string documentGroup = 5;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 6;
    // When set to **true**, the document is been already encrypted by the sender for use with the DocuSign Key Manager Security Appliance.
    string encryptedWithKeyManager = 7;
    // The file extension type of the document. If the document is not a PDF it is converted to a PDF.
    string fileExtension = 8;
    string fileFormatHint = 9;
    // When set to **true**,
    // the document is included in the combined document download. 
    // The default value is **true**.
    string includeInDownload = 10;
    // Matchboxes define areas in a document for document matching when you are creating envelopes. They are only used when you upload and edit a template. 
    // 
    // A matchbox consists of 5 elements:
    // 
    // * pageNumber - The document page number  on which the matchbox will appear. 
    // * xPosition - The x position of the matchbox on a page. 
    // * yPosition - The y position of the matchbox on a page.
    // * width - The width of the matchbox. 
    // * height - The height of the matchbox. 
    repeated matchBox matchBoxes = 11;
    string name = 12;
    // An optional value that sets the direction order used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * asc = ascending sort order
    // * desc = descending sort order
    string order = 13;
    string pages = 14;
    string password = 15;
    // The file id from the cloud storage service where the document is located. This information is returned using [ML:GET /folders] or [ML:/folders/{folderid}].
    string remoteUrl = 16;
    // Sets how the signer interacts with the supplemental document.
    // The possible values are: 
    // 
    // *	`no_interaction`<br>
    //   No recipient action is required. 
    // 
    // *	`view`<br>
    //   The recipient is required to view the document. 
    // 
    // *	`accept`<br>
    //   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document. 
    // 
    // *	`view_accept`<br>
    //   The recipient is required to view and accept the document.  
    // 
    string signerMustAcknowledge = 17;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 18;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 19;
    // When set to **true**, PDF form field data is transformed into document tab values when the PDF form field name matches the DocuSign custom tab tabLabel. The resulting PDF form data is also returned in the PDF meta data when requesting the document PDF. See the [ML:Transform PDF Fields] section for more information about how fields are transformed into DocuSign tabs.
    string transformPdfFields = 20;
    string uri = 21;
}

message DocumentTemplate {
    string documentEndPage = 1;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 2;
    string documentStartPage = 3;
    errorDetails errorDetails = 4;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 5;
}

message DocumentTemplateList {
    repeated documentTemplate documentTemplates = 1;
}

message DocumentVisibility {
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 1;
    errorDetails errorDetails = 2;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 3;
    string rights = 4;
    string visible = 5;
}

message Editor {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
    string addAccessCodeToEmail = 2;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 3;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated string customFields = 4;
    // The date and time the recipient declined the document.
    string declinedDateTime = 5;
    // The reason the recipient declined the document.
    string declinedReason = 6;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 7;
    // Reserved: For DocuSign use only.
    string deliveryMethod = 8;
    repeated documentVisibility documentVisibility = 9;
    // Email id of the recipient. Notification of the document to sign is sent to this email id. 
    // 
    // Maximum length: 100 characters.
    string email = 10;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 11;
    string emailRecipientPostSigningURL = 12;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 13;
    errorDetails errorDetails = 14;
    // Reserved:
    string faxNumber = 15;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 16;
    // A complex element that contains input information related to a recipient ID check. It can include the following information.
    // 
    // addressInformationInput: Used to set recipient address information and consists of:
    // 
    // * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // dobInformationInput: Used to set recipient date of birth information and consists of:
    // 
    // * dateOfBirth: Specifies the recipient's date, month and year of birth.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn4InformationInput: Used to set the last four digits of the recipient's SSN information and consists of:
    // 
    // * ssn4: Specifies the last four digits of the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn9InformationInput: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of: 
    // * ssn9: Specifies the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    idCheckInformationInput idCheckInformationInput = 17;
    // When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
    string inheritEmailNotificationConfiguration = 18;
    // legal name of the recipient.
    // 
    // Maximum Length: 100 characters.
    string name = 19;
    // A note sent to the recipient in the signing email.
    // This note is unique to this recipient.
    // In the user interface,
    // it appears near the upper left corner
    // of the document
    // on the signing screen.
    // 
    // Maximum Length: 1000 characters.
    string note = 20;
    // A complex type that Contains the elements:
    // 
    // * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose.
    // * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use.
    // * recordVoicePrint - Reserved.
    // * validateRecipProvidedNumber - Reserved.
    recipientPhoneAuthentication phoneAuthentication = 21;
    // Reserved:
    repeated recipientAttachment recipientAttachments = 22;
    authenticationStatus recipientAuthenticationStatus = 23;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 24;
    string recipientIdGuid = 25;
    // When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
    string requireIdLookup = 26;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 27;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 28;
    recipientSAMLAuthentication samlAuthentication = 29;
    // The date and time the envelope was sent.
    string sentDateTime = 30;
    // Reserved: For DocuSign use only.
    string signedDateTime = 31;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 32;
    // The display name for the signing group. 
    // 
    // Maximum Length: 100 characters.
    string signingGroupName = 33;
    // A complex type that contains information about users in the signing group.
    repeated userInfo signingGroupUsers = 34;
    // Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication. 
    recipientSMSAuthentication smsAuthentication = 35;
    //  Lists the social ID type that can be used for recipient authentication.
    repeated socialAuthentication socialAuthentications = 36;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 37;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 38;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 39;
    string totalTabCount = 40;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 41;
}

message Email {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // When set to **true**, the information in the tab is italic.
    string italic = 20;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 21;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 22;
    mergeField mergeField = 23;
    string name = 24;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 25;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 26;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 27;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 28;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 29;
    // When set to **true**, the signer is required to fill out this tab
    string required = 30;
    // When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 
    // 
    // This value tab can only be changed by modifying (PUT) the template. 
    // 
    // Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
    string senderRequired = 31;
    // When set to **true**, this custom tab is shared.
    string shared = 32;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 33;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 34;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 35;
    string tabOrder = 36;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 37;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 38;
    // When set to **true**, the information in the tab is underlined.
    string underline = 39;
    // The message displayed if the custom tab fails input validation (either custom of embedded).
    string validationMessage = 40;
    // A regular expressionn used to validate input for the tab.
    string validationPattern = 41;
    // Specifies the value of the tab.
    string value = 42;
    // Width of the tab in pixels.
    int32 width = 43;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 44;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 45;
}

message EmailAddress {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 10;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 11;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 12;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 13;
    errorDetails errorDetails = 14;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 15;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 16;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 17;
    // When set to **true**, the information in the tab is italic.
    string italic = 18;
    mergeField mergeField = 19;
    string name = 20;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 21;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 22;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 23;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 24;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 25;
    string tabOrder = 26;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 27;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 28;
    // When set to **true**, the information in the tab is underlined.
    string underline = 29;
    // Specifies the value of the tab.
    string value = 30;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 31;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 32;
}

message EnvelopeAttachmentsRequest {
    repeated attachment attachments = 1;
}

message EnvelopeAttachmentsResult {
    repeated EnvelopeAttachments attachments = 1;
}

message EnvelopeAuditEvent {
    repeated nameValue eventFields = 1;
}

message EnvelopeAuditEventResponse {
    // Reserved: TBD
    repeated envelopeAuditEvent auditEvents = 1;
}

message EnvelopeDefinition {
    // Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account. 
    // 
    // ###### Note: This information is currently generated from the DocuSign web console by setting the reading zones when creating a template, exporting the reading zone string information, and adding it here.
    string accessibility = 1;
    // When set to **true**, Document Markup is enabled for envelope. Account must have Document Markup enabled to use this
    string allowMarkup = 2;
    // When set to **true**, the recipient can redirect an envelope to a more appropriate recipient.
    string allowReassign = 3;
    // When set to **true**, this enables the Recursive Recipients feature and allows a recipient to appear more than once in the routing order.
    string allowRecipientRecursion = 4;
    // When set to **true**, the envelope is queued for processing and the value of the `status` property is set to 'Processing'. Additionally, get status calls return 'Processing' until completed.
    string asynchronous = 5;
    repeated attachment attachments = 6;
    string attachmentsUri = 7;
    // Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.
    string authoritativeCopy = 8;
    // Specifies whether auto navigation is set for the recipient.
    string autoNavigation = 9;
    // This sets the brand profile format used for the envelope. The value in the string is the brandId associated with the profile. Account branding must be enabled for the account to use this option.
    string brandId = 10;
    string brandLock = 11;
    // Retrieves a URI for an endpoint that allows you to easily retrieve certificate information.
    string certificateUri = 12;
    // Specifies the date and time this item was completed.
    string completedDateTime = 13;
    // A complex type that can be added to create envelopes from a combination of DocuSign templates and PDF forms. The basic envelope remains the same, while the Composite Template adds new document and template overlays into the envelope. There can be any number of Composite Template structures in the envelope.
    repeated compositeTemplate compositeTemplates = 14;
    // Indicates the date and time the item was created.
    string createdDateTime = 15;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    AccountCustomFields customFields = 16;
    // Contains a URI for an endpoint that you can use to retrieve the custom fields.
    string customFieldsUri = 17;
    // The date and time the recipient declined the document.
    string declinedDateTime = 18;
    // Specifies the data and time the item was deleted.
    string deletedDateTime = 19;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 20;
    // Complex element contains the details on the documents in the envelope.
    repeated document documents = 21;
    string documentsCombinedUri = 22;
    // Contains a URI for an endpoint that you can use to retrieve the documents.
    string documentsUri = 23;
    // Optional element. This is the same as the email body. If specified it is included in email body for all envelope recipients. This can be a maximum of 10000 characters
    string emailBlurb = 24;
    // This optional complex element allows sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent. When the emailSettings information is used for an envelope, it only applies to that envelope. **IMPORTANT:** The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings.
    EnvelopeEmailSettings emailSettings = 25;
    // Specifies the subject of the email that is sent to all recipients.
    // 
    // See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.
    string emailSubject = 26;
    // When set to **true**, the signer is allowed to print the document and sign it on paper.
    string enableWetSign = 27;
    // When set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    // 
    // Your account must have Document Visibility enabled to use this.
    string enforceSignerVisibility = 28;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 29;
    // When set to **true**, Envelope ID Stamping is enabled.
    string envelopeIdStamping = 30;
    // Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.
    string envelopeUri = 31;
    // This optional object is used to register a webhook that will receive status changes for this envelope.
    eventNotification eventNotification = 32;
    string initialSentDateTime = 33;
    // When set to **true**, indicates that this module is enabled on the account.
    string is21CFRPart11 = 34;
    string isSignatureProviderEnvelope = 35;
    // The date and time the item was last modified.
    string lastModifiedDateTime = 36;
    EnvelopeLocks lockInformation = 37;
    // When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 
    // 
    // Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 
    // 
    // However, if the `messageLock` node is set to true**** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
    string messageLock = 38;
    // An optional complex element that specifies the notification options for the envelope.
    notification notification = 39;
    // Contains a URI for an endpoint that you can use to retrieve the notifications.
    string notificationUri = 40;
    string password = 41;
    // Initiates a purge request. Valid values are:
    // * documents_queued: Places envelope documents in the purge queue.
    // * documents_and_metadata_queued: Places envelope documents and metadata in the purge queue.
    string purgeState = 42;
    // Specifies the envelope recipients.
    EnvelopeRecipients recipients = 43;
    // When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
    string recipientsLock = 44;
    // Contains a URI for an endpoint that you can use to retrieve the recipients.
    string recipientsUri = 45;
    // The date and time the envelope was sent.
    string sentDateTime = 46;
    // Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online.
    string signingLocation = 47;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 48;
    // The data and time the status changed.
    string statusChangedDateTime = 49;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 50;
    // Specifies the template recipients. Each roleName in the template must have a recipient assigned to it. This is made up elements:
    // 
    // * email - The recipient's email address.
    // * name - The recipient's name.
    // * roleName - The template roleName associated with the recipient.
    // * clientUserId - Optional, this sets if the signer is This specifies if the recipient is embedded or remote. If the clientUserId is not null then the recipient is embedded. Note that if a ClientUserId is used and the account settings SignerMustHaveAccount or SignerMustLoginToSign are true, an error is generated on sending.
    // * defaultRecipient - Optional, When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
    // * routingOrder - This specifies the routing order of the recipient in the envelope.
    // * accessCode - This optional element specifies the access code a recipient has to enter to validate the identity. This can be a maximum of 50 characters.
    // * inPersonSignerName - Optional, if the template role is an in person signer, this is the full legal name of the signer. This can be a maximum of 100 characters.
    // * emailNotification - This is an optional complex element that has a role specific emailSubject, emailBody, and language. It follows the same format as the emailNotification node for Recipients.
    // * tabs - This allows the tab values to be specified for matching to tabs in the template.
    repeated templateRole templateRoles = 51;
    // Contains a URI for an endpoint which you can use to retrieve the templates.
    string templatesUri = 52;
    //  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
    string transactionId = 53;
    // When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 
    // 
    // If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
    string useDisclosure = 54;
    // The date and time the envelope or template was voided.
    string voidedDateTime = 55;
    // The reason the envelope or template was voided.
    string voidedReason = 56;
}

message EnvelopeDocument {
    string attachmentTabId = 1;
    repeated signatureType availableDocumentTypes = 2;
    string containsPdfFormFields = 3;
    // This string sets the display and behavior properties of
    // the document during signing. The possible values are:
    // 
    // * `modal`<br>
    //   The document is shown as a supplement action strip
    //   and can be viewed, downloaded, or printed in a modal window.
    //   This is the recommended value for supplemental documents. 
    // 
    // * `download`<br>
    //   The document is shown as a supplement action strip
    //   and can be viewed, downloaded, or printed in a new browser window. 
    // 
    // * `inline`<br>
    //   The document is shown in the normal signing window.
    //   This value is not used with supplemental documents,
    //   but is the default value for all other documents.
    string display = 4;
    repeated nameValue documentFields = 5;
    string documentGroup = 6;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 7;
    errorDetails errorDetails = 8;
    // When set to **true**,
    // the document is included in the combined document download. 
    // The default value is **true**.
    string includeInDownload = 9;
    string name = 10;
    // An optional value that sets the direction order used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * asc = ascending sort order
    // * desc = descending sort order
    string order = 11;
    string pages = 12;
    // Sets how the signer interacts with the supplemental document.
    // The possible values are: 
    // 
    // *	`no_interaction`<br>
    //   No recipient action is required. 
    // 
    // *	`view`<br>
    //   The recipient is required to view the document. 
    // 
    // *	`accept`<br>
    //   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document. 
    // 
    // *	`view_accept`<br>
    //   The recipient is required to view and accept the document.  
    // 
    string signerMustAcknowledge = 13;
    // Type of the user. Valid values: type_owner, type_participant.
    string type = 14;
    string uri = 15;
}

message EnvelopeEvent {
    // An envelope status for which your webhook should be called. Values: Draft, Sent, Delivered, Completed, Declined, or Voided.
    string envelopeEventStatusCode = 1;
    // reserved
    string includeDocuments = 2;
}

message EnvelopeId {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 10;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 11;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 12;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 13;
    errorDetails errorDetails = 14;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 15;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 16;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 17;
    // When set to **true**, the information in the tab is italic.
    string italic = 18;
    mergeField mergeField = 19;
    string name = 20;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 21;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 22;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 23;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 24;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 25;
    string tabOrder = 26;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 27;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 28;
    // When set to **true**, the information in the tab is underlined.
    string underline = 29;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 30;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 31;
}

message EnvelopeIdsRequest {
    repeated string envelopeIds = 1;
    //  A list of transaction Id's used to determining the status of envelopes sent asynchronously. See **transactionId** property on envelopes.
    repeated string transactionIds = 2;
}

message EnvelopeNotificationRequest {
    // A complex element that specifies the expiration settings for the envelope.
    expirations expirations = 1;
    // A complex element that specifies reminder settings for the envelope
    reminders reminders = 2;
    // When set to **true**, the account default notification settings are used for the envelope.
    string useAccountDefaults = 3;
}

message EnvelopeSummary {
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 1;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 2;
    // The DateTime that the envelope changed status (i.e. was created or sent.)
    string statusDateTime = 3;
    string uri = 4;
}

message EnvelopeTemplateDefinition {
    // A sender-defined description of the line item.
    string description = 1;
    // The ID for the folder.
    string folderId = 2;
    //  The name of the folder in which the template is located.
    string folderName = 3;
    // The URI of the folder.
    string folderUri = 4;
    // Utc date and time the comment was last updated (can only be done by creator.)
    string lastModified = 5;
    userInfo lastModifiedBy = 6;
    string name = 7;
    // The user's new password.
    string newPassword = 8;
    // The userName, email, userId, userType, and userStatus for the template owner.
    userInfo owner = 9;
    // An integer value specifying the number of document pages in the template. Omit this property if not submitting a page count.
    int32 pageCount = 10;
    string parentFolderUri = 11;
    string password = 12;
    // When set to **true**, this custom tab is shared.
    string shared = 13;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 14;
    string uri = 15;
}

message EnvelopeTemplateResult {
    // When set to **true**, Document Markup is enabled for envelope. Account must have Document Markup enabled to use this
    string allowMarkup = 1;
    // When set to **true**, the recipient can redirect an envelope to a more appropriate recipient.
    string allowReassign = 2;
    // When set to **true**, the envelope is queued for processing and the value of the `status` property is set to 'Processing'. Additionally, get status calls return 'Processing' until completed.
    string asynchronous = 3;
    string attachmentsUri = 4;
    // Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.
    string authoritativeCopy = 5;
    // Specifies whether auto navigation is set for the recipient.
    string autoNavigation = 6;
    // The unique identifier of a brand.
    string brandId = 7;
    string brandLock = 8;
    // Retrieves a URI for an endpoint that allows you to easily retrieve certificate information.
    string certificateUri = 9;
    // Specifies the date and time this item was completed.
    string completedDateTime = 10;
    // Indicates the date and time the item was created.
    string createdDateTime = 11;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    AccountCustomFields customFields = 12;
    // Contains a URI for an endpoint that you can use to retrieve the custom fields.
    string customFieldsUri = 13;
    // The date and time the recipient declined the document.
    string declinedDateTime = 14;
    // Specifies the data and time the item was deleted.
    string deletedDateTime = 15;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 16;
    // A sender-defined description of the line item.
    string description = 17;
    // Complex element contains the details on the documents in the envelope.
    repeated document documents = 18;
    string documentsCombinedUri = 19;
    // Contains a URI for an endpoint that you can use to retrieve the documents.
    string documentsUri = 20;
    string emailBlurb = 21;
    EnvelopeEmailSettings emailSettings = 22;
    // Specifies the subject of the email that is sent to all recipients.
    // 
    // See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.
    string emailSubject = 23;
    // When set to **true**, the signer is allowed to print the document and sign it on paper.
    string enableWetSign = 24;
    // When set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    // 
    // Your account must have Document Visibility enabled to use this.
    string enforceSignerVisibility = 25;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 26;
    // When set to **true**, Envelope ID Stamping is enabled.
    string envelopeIdStamping = 27;
    // Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.
    string envelopeUri = 28;
    // The ID of the folder being accessed.
    string folderId = 29;
    string folderName = 30;
    string folderUri = 31;
    string initialSentDateTime = 32;
    // When set to **true**, indicates that this module is enabled on the account.
    string is21CFRPart11 = 33;
    string isSignatureProviderEnvelope = 34;
    // Utc date and time the comment was last updated (can only be done by creator.)
    string lastModified = 35;
    // The date and time the item was last modified.
    string lastModifiedDateTime = 36;
    EnvelopeLocks lockInformation = 37;
    // When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 
    // 
    // Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 
    // 
    // However, if the `messageLock` node is set to true**** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
    string messageLock = 38;
    string name = 39;
    notification notification = 40;
    // Contains a URI for an endpoint that you can use to retrieve the notifications.
    string notificationUri = 41;
    userInfo owner = 42;
    int32 pageCount = 43;
    string parentFolderUri = 44;
    string password = 45;
    string purgeState = 46;
    EnvelopeRecipients recipients = 47;
    // When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
    string recipientsLock = 48;
    // Contains a URI for an endpoint that you can use to retrieve the recipients.
    string recipientsUri = 49;
    // The date and time the envelope was sent.
    string sentDateTime = 50;
    // When set to **true**, this custom tab is shared.
    string shared = 51;
    // Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online.
    string signingLocation = 52;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 53;
    // The data and time the status changed.
    string statusChangedDateTime = 54;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 55;
    // Contains a URI for an endpoint which you can use to retrieve the templates.
    string templatesUri = 56;
    //  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
    string transactionId = 57;
    string uri = 58;
    // When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 
    // 
    // If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
    string useDisclosure = 59;
    // The date and time the envelope or template was voided.
    string voidedDateTime = 60;
    // The reason the envelope or template was voided.
    string voidedReason = 61;
}

message EnvelopeTemplateResults {
    // The last position in the result set.
    string endPosition = 1;
    // The list of requested templates.
    repeated envelopeTemplateResult envelopeTemplates = 2;
    // A collection of folder objects returned in a response.
    repeated folder folders = 3;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 4;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 5;
    // The number of results returned in this response.
    string resultSetSize = 6;
    // Starting position of the current result set.
    string startPosition = 7;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 8;
}

message EnvelopeTransactionStatus {
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 1;
    errorDetails errorDetails = 2;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 3;
    //  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
    string transactionId = 4;
}

message EnvelopeUpdateSummary {
    bulkEnvelopeStatus bulkEnvelopeStatus = 1;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 2;
    errorDetails errorDetails = 3;
    repeated listCustomField listCustomFieldUpdateResults = 4;
    EnvelopeLocks lockInformation = 5;
    repeated recipientUpdateResponse recipientUpdateResults = 6;
    EnvelopeRecipientTabs tabUpdateResults = 7;
    repeated textCustomField textCustomFieldUpdateResults = 8;
}

message EnvelopesInformation {
    // The last position in the result set.
    string endPosition = 1;
    // Array of envelope statuses and transaction Ids in the result set.
    repeated envelopeTransactionStatus envelopeTransactionStatuses = 2;
    // Set of envelope information
    repeated Envelopes envelopes = 3;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 4;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 5;
    // The number of results returned in this response.
    string resultSetSize = 6;
    // Starting position of the current result set.
    string startPosition = 7;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 8;
}

message ErrorDetails {
    // An error code associated with the error.
    string errorCode = 1;
    // A short error message.
    string message = 2;
}

message EventNotification {
    // A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property. 
    // 
    // To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
    repeated envelopeEvent envelopeEvents = 1;
    // When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.
    string includeCertificateOfCompletion = 2;
    // When set to **true**, the Connect service will send the DocuSign signedby certificate as part of the SOAP xml. The certificate is included in the XML message as `wsse:BinarySecurityToken`.
    string includeCertificateWithSoap = 3;
    // When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API.
    string includeDocumentFields = 4;
    // When set to **true**, the XML webhook messages will include the envelope's PDF documents. Including the PDF documents will greatly increase the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger.
    string includeDocuments = 5;
    // When set to **true**, if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope.
    string includeEnvelopeVoidReason = 6;
    // When set to **true**, Connect will include the sender account as Custom Field in the data.
    string includeSenderAccountAsCustomField = 7;
    // When set to **true**, the envelope's time zone information is included in the webhook messages.
    string includeTimeZone = 8;
    // When set to **true**, the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be downloaded via the [ConnectEvents resource](../../../Connect/ConnectEvents/)
    string loggingEnabled = 9;
    // An array of recipient event statuses that will trigger Connect to send notifications to your webhook listener at the url endpoint specified in the `url` property. 
    // 
    // To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
    repeated recipientEvent recipientEvents = 10;
    // When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures.
    string requireAcknowledgment = 11;
    // When set to **true**, notification messages are digitally signed with an [X509 certificate](https://trust.docusign.com/en-us/trust-certifications/docusign-public-certificates/).
    string signMessageWithX509Cert = 12;
    // The namespace of the SOAP interface.
    // 
    // The namespace value must be set if useSoapInterface is set to true.
    string soapNameSpace = 13;
    // The endpoint to which webhook notification messages are sent via an HTTP/S POST request. For the DocuSign production platform, the url must start with https. For the demo platform, either http or https is ok.
    string url = 14;
    // When set to **true**, the notifications are sent to your endpoint as SOAP requests.
    string useSoapInterface = 15;
}

message EventResult {
    string eventTimestamp = 1;
    string failureDescription = 2;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 3;
    string vendorFailureStatusCode = 4;
}

message Expirations {
    // An integer that sets the number of days the envelope is active.
    string expireAfter = 1;
    // When set to **true**, the envelope expires (is no longer available for signing) in the set number of days. If false, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
    string expireEnabled = 2;
    // An integer that sets the number of days before envelope expiration that an expiration warning email is sent to the recipient. If set to 0 (zero), no warning email is sent.
    string expireWarn = 3;
}

message ExternalDocServiceErrorDetails {
    // Reserved: TBD
    string authenticationUrl = 1;
    string errorCode = 2;
    string message = 3;
}

message ExternalFile {
    string date = 1;
    string id = 2;
    string img = 3;
    string name = 4;
    // Reserved: TBD
    string size = 5;
    string supported = 6;
    // Type of the user. Valid values: type_owner, type_participant.
    string type = 7;
    string uri = 8;
}

message FeatureSet {
    // A complex type that contains alternate currency values that are configured for this plan feature set.
    repeated currencyFeatureSetPrice currencyFeatureSetPrices = 1;
    string envelopeFee = 2;
    // A unique ID for the feature set.
    string featureSetId = 3;
    string fixedFee = 4;
    // When set to **true**, indicates that this module is enabled on the account.
    string is21CFRPart11 = 5;
    string isActive = 6;
    // Specifies whether the feature set is actively enabled as part of the plan.
    string isEnabled = 7;
    string name = 8;
    // An incremental seat cost for seat-based plans. Only valid when isEnabled for the feature set is set to true.
    string seatFee = 9;
}

message FileType {
    string fileExtension = 1;
    // The mime-type of a file type listed in a fileTypes collection.
    string mimeType = 2;
}

message FileTypeList {
    // A collection of file types.
    repeated fileType fileTypes = 1;
}

message Filter {
    // Access token information.
    string actionRequired = 1;
    string expires = 2;
    string folderIds = 3;
    string fromDateTime = 4;
    string isTemplate = 5;
    // An optional value that sets the direction order used to sort the item list. 
    // 
    // Valid values are: 
    // 
    // * asc = ascending sort order
    // * desc = descending sort order
    string order = 6;
    string orderBy = 7;
    string searchTarget = 8;
    string searchText = 9;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 10;
    // Must be set to "bearer".
    string toDateTime = 11;
}

message FirstName {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 10;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 11;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 12;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 13;
    errorDetails errorDetails = 14;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 15;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 16;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 17;
    // When set to **true**, the information in the tab is italic.
    string italic = 18;
    mergeField mergeField = 19;
    string name = 20;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 21;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 22;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 23;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 24;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 25;
    string tabOrder = 26;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 27;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 28;
    // When set to **true**, the information in the tab is underlined.
    string underline = 29;
    // Specifies the value of the tab.
    string value = 30;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 31;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 32;
}

message Folder {
    errorDetails errorDetails = 1;
    filter filter = 2;
    // The ID of the folder being accessed.
    string folderId = 3;
    // A collection of folder objects returned in a response.
    repeated folder folders = 4;
    string name = 5;
    string ownerEmail = 6;
    string ownerUserId = 7;
    string ownerUserName = 8;
    string parentFolderId = 9;
    string parentFolderUri = 10;
    // Type of the user. Valid values: type_owner, type_participant.
    string type = 11;
    string uri = 12;
}

message FolderItem {
    // Specifies the date and time this item was completed.
    string completedDateTime = 1;
    // Indicates the date and time the item was created.
    string createdDateTime = 2;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated customField_v2 customFields = 3;
    // A sender-defined description of the line item.
    string description = 4;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 5;
    // Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.
    string envelopeUri = 6;
    // When set to **true**, indicates that this module is enabled on the account.
    string is21CFRPart11 = 7;
    string isSignatureProviderEnvelope = 8;
    // Utc date and time the comment was last updated (can only be done by creator.)
    string lastModified = 9;
    string name = 10;
    // Name of the envelope owner.
    string ownerName = 11;
    int32 pageCount = 12;
    string password = 13;
    string senderEmail = 14;
    // Name of the envelope sender.
    string senderName = 15;
    // The date and time the envelope was sent.
    string sentDateTime = 16;
    // When set to **true**, this custom tab is shared.
    string shared = 17;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 18;
    string subject = 19;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 20;
    string uri = 21;
}

message FolderItemResponse {
    // The last position in the result set.
    string endPosition = 1;
    // A list of the envelopes in the specified folder or folders.
    repeated folderItem_v2 folderItems = 2;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    string totalRows = 7;
}

message FolderItem_v2 {
    // Specifies the date and time this item was completed.
    string completedDateTime = 1;
    // Indicates the date and time the item was created.
    string createdDateTime = 2;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 3;
    // Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.
    string envelopeUri = 4;
    // The date and time the envelope is set to expire.
    string expireDateTime = 5;
    // The ID of the folder being accessed.
    string folderId = 6;
    string folderUri = 7;
    // When set to **true**, indicates that this module is enabled on the account.
    string is21CFRPart11 = 8;
    string isSignatureProviderEnvelope = 9;
    // The date and time the item was last modified.
    string lastModifiedDateTime = 10;
    string ownerName = 11;
    EnvelopeRecipients recipients = 12;
    // Contains a URI for an endpoint that you can use to retrieve the recipients.
    string recipientsUri = 13;
    string senderCompany = 14;
    string senderEmail = 15;
    string senderName = 16;
    string senderUserId = 17;
    // The date and time the envelope was sent.
    string sentDateTime = 18;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 19;
    string subject = 20;
}

message FolderItemsResponse {
    // The last position in the result set.
    string endPosition = 1;
    // A list of the envelopes in the specified folder or folders.
    repeated folderItem folderItems = 2;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message FoldersRequest {
    repeated string envelopeIds = 1;
    //  The folder ID the envelope is being moved from.
    string fromFolderId = 2;
}

message ForgottenPasswordInformation {
    // The answer to the first forgotten password challenge question.
    string forgottenPasswordAnswer1 = 1;
    // The answer to the second forgotten password challenge question.
    string forgottenPasswordAnswer2 = 2;
    // The answer to the third forgotten password challenge question.
    string forgottenPasswordAnswer3 = 3;
    // The answer to the fourth forgotten password challenge question.
    string forgottenPasswordAnswer4 = 4;
    // The first challenge question presented to a user who has forgotten their password.
    string forgottenPasswordQuestion1 = 5;
    // The second challenge question presented to a user who has forgotten their password.
    string forgottenPasswordQuestion2 = 6;
    // The third challenge question presented to a user who has forgotten their password.
    string forgottenPasswordQuestion3 = 7;
    // The fourth challenge question presented to a user who has forgotten their password.
    string forgottenPasswordQuestion4 = 8;
}

message FormulaTab {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // Contains the formula
    // for calculating the value of
    // this tab.
    // 
    // Use a tab's `tabLabel`,
    // enclosed in brackets,
    // to refer to it.
    // 
    // For example,
    // you want to present the total cost
    // of two items, tax included.
    // 
    // The cost of each item is stored
    // in number tabs labeled Item1 and Item2.
    // The tax rate is in a number tab
    // labeled TaxRate.
    // 
    // The formula string for this property
    // would be:
    // `([Item1] + [Item2]) * (1 + [TaxRate])`
    // 
    // See [Calculated Fields][calculatedfields]
    // in the DocuSign Support Center
    // to learn more about formulas.
    // 
    // Maximum Length: 2000 characters
    // 
    // [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
    string formula = 20;
    string hidden = 21;
    // When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number.
    string isPaymentAmount = 22;
    // When set to **true**, the information in the tab is italic.
    string italic = 23;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 24;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 25;
    mergeField mergeField = 26;
    string name = 27;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 28;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 29;
    // This property indicates
    // that this formula tab
    // is a payment item.
    // See [Requesting Payments Along with Signatures][paymentguide]
    // in the DocuSign Support Center
    // to learn more about payments.
    // 
    // [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    paymentDetails paymentDetails = 30;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 31;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 32;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 33;
    // When set to **true**, the signer is required to fill out this tab
    string required = 34;
    string roundDecimalPlaces = 35;
    // When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 
    // 
    // This value tab can only be changed by modifying (PUT) the template. 
    // 
    // Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
    string senderRequired = 36;
    // When set to **true**, this custom tab is shared.
    string shared = 37;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 38;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 39;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 40;
    string tabOrder = 41;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 42;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 43;
    // When set to **true**, the information in the tab is underlined.
    string underline = 44;
    // The message displayed if the custom tab fails input validation (either custom of embedded).
    string validationMessage = 45;
    // A regular expressionn used to validate input for the tab.
    string validationPattern = 46;
    // Specifies the value of the tab.
    string value = 47;
    // Width of the tab in pixels.
    int32 width = 48;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 49;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 50;
}

message FullName {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 10;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 11;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 12;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 13;
    errorDetails errorDetails = 14;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 15;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 16;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 17;
    // When set to **true**, the information in the tab is italic.
    string italic = 18;
    mergeField mergeField = 19;
    string name = 20;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 21;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 22;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 23;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 24;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 25;
    string tabOrder = 26;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 27;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 28;
    // When set to **true**, the information in the tab is underlined.
    string underline = 29;
    // Specifies the value of the tab.
    string value = 30;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 31;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 32;
}

message Group {
    errorDetails errorDetails = 1;
    // The DocuSign group ID for the group.
    string groupId = 2;
    // The name of the group.
    string groupName = 3;
    // The group type.
    string groupType = 4;
    // The ID of the permission profile associated with the group.
    string permissionProfileId = 5;
    repeated userInfo users = 6;
}

message IdCheckInformationInput {
    addressInformationInput addressInformationInput = 1;
    // Complex type containing:
    // 
    // * dateOfBirth
    // * displayLevelCode
    // * receiveInResponse
    dobInformationInput dobInformationInput = 2;
    ssn4InformationInput ssn4InformationInput = 3;
    ssn9InformationInput ssn9InformationInput = 4;
}

message InPersonSigner {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
    string addAccessCodeToEmail = 2;
    // Specifies whether auto navigation is set for the recipient.
    string autoNavigation = 3;
    // When set to **true**, specifies that the signer can perform the signing ceremony offline.
    string canSignOffline = 4;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 5;
    string creationReason = 6;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated string customFields = 7;
    // The date and time the recipient declined the document.
    string declinedDateTime = 8;
    // The reason the recipient declined the document.
    string declinedReason = 9;
    // When set to **true**,
    // this is the default recipient for the envelope.
    // This option is used when creating an envelope from a template.
    string defaultRecipient = 10;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 11;
    // Reserved: For DocuSign use only.
    string deliveryMethod = 12;
    repeated documentVisibility documentVisibility = 13;
    // The signer's email address in an eNotary flow.
    // 
    // Use only when `inPersonSigningType` is `notary`.
    // For regular in-person-signer flow, use `signerEmail` instead.
    string email = 14;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 15;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 16;
    errorDetails errorDetails = 17;
    // Reserved:
    string faxNumber = 18;
    // The email address of the signing host.
    // This is the DocuSign user that is hosting the in-person signing session.
    // 
    // Required when `inPersonSigningType` is `inPersonSigner`.
    // For eNotary flow, use `email` instead.
    // 
    // Maximum Length: 100 characters.
    string hostEmail = 19;
    // The name of the signing host.
    // This is the DocuSign user that is hosting the in-person signing session.
    // 
    // Required when `inPersonSigningType` is `inPersonSigner`.
    // For eNotary flow, use `name` instead.
    // 
    // Maximum Length: 100 characters.
    string hostName = 20;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 21;
    // A complex element that contains input information related to a recipient ID check. It can include the following information.
    // 
    // addressInformationInput: Used to set recipient address information and consists of:
    // 
    // * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // dobInformationInput: Used to set recipient date of birth information and consists of:
    // 
    // * dateOfBirth: Specifies the recipient's date, month and year of birth.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn4InformationInput: Used to set the last four digits of the recipient's SSN information and consists of:
    // 
    // * ssn4: Specifies the last four digits of the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn9InformationInput: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of: 
    // * ssn9: Specifies the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    idCheckInformationInput idCheckInformationInput = 22;
    // Specifies whether the envelope uses the eNotary feature.
    // Valid values:
    // 
    // * `inPersonSigner` The envelope uses the normal in-person signing flow.
    // * `notary`: The envelope uses the eNotary in-person signing flow.
    string inPersonSigningType = 23;
    // When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
    string inheritEmailNotificationConfiguration = 24;
    // The signer's full legal name in an eNotary flow.
    // 
    // Required when `inPersonSigningType` is `notary`.
    // For regular in-person-signer flow, use `signerName` instead.
    // 
    // Maximum Length: 100 characters.
    string name = 25;
    // Information about the notary host.
    // The following information is required
    // when using the eNotary in-person signing flow:
    // 
    // * `name`: Specifies the name of the notary.
    // * `email`: Specifies the email address of the notary.
    // * `recipientId`: A unique ID number for the notary signing host.
    // 
    notaryHost notaryHost = 26;
    // A note sent to the in-person signer in the signing email.
    // This note is visible only to this recipient.
    // 
    // Maximum Length: 1000 characters.
    string note = 27;
    // A complex type that Contains the elements:
    // 
    // * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose.
    // * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use.
    // * recordVoicePrint - Reserved.
    // * validateRecipProvidedNumber - Reserved.
    recipientPhoneAuthentication phoneAuthentication = 28;
    // Reserved:
    repeated recipientAttachment recipientAttachments = 29;
    authenticationStatus recipientAuthenticationStatus = 30;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 31;
    string recipientIdGuid = 32;
    // The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information](../../../../guide/appendix/standards_based_signatures.html)
    repeated recipientSignatureProvider recipientSignatureProviders = 33;
    string recipientSuppliesTabs = 34;
    // When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
    string requireIdLookup = 35;
    // When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
    string requireSignOnPaper = 36;
    // By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.
    // 
    // This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. 
    // 
    // Set this parameter to `safe` to use a SAFE-BioPharma certificate.
    // 
    // The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
    string requireSignerCertificate = 37;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 38;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 39;
    recipientSAMLAuthentication samlAuthentication = 40;
    // The date and time the envelope was sent.
    string sentDateTime = 41;
    // When set to **true**, specifies that the signer must sign in all locations.
    string signInEachLocation = 42;
    // Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
    // 
    // Used only with recipient types In Person Signers and Signers. 
    recipientSignatureInformation signatureInfo = 43;
    // Reserved: For DocuSign use only.
    string signedDateTime = 44;
    // The in-person signer's email address.
    // 
    // Required when `inPersonSigningType` is `inPersonSigner`.
    // For eNotary flow, use `email` instead.
    // 
    // Maximum Length: 100 characters.
    // 
    string signerEmail = 45;
    // The in-person signer's full legal name.
    // 
    // Required when `inPersonSigningType` is `inPersonSigner`.
    // For eNotary flow, use `name` instead.
    // 
    // Maximum Length: 100 characters.
    string signerName = 46;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 47;
    // The display name for the signing group. 
    // 
    // Maximum Length: 100 characters.
    string signingGroupName = 48;
    // A complex type that contains information about users in the signing group.
    repeated userInfo signingGroupUsers = 49;
    // Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication. 
    recipientSMSAuthentication smsAuthentication = 50;
    //  Lists the social ID type that can be used for recipient authentication.
    repeated socialAuthentication socialAuthentications = 51;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 52;
    EnvelopeRecipientTabs tabs = 53;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 54;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 55;
    string totalTabCount = 56;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 57;
}

message InitialHere {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 9;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 10;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 11;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 12;
    errorDetails errorDetails = 13;
    mergeField mergeField = 14;
    // Specifies the tool tip text for the tab.
    string name = 15;
    string optional = 16;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 17;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 18;
    //  Sets the size for the InitialHere tab. It can be value from 0.5 to 1.0, where 1.0 represents full size and 0.5 is 50% size.
    int32 scaleValue = 19;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 20;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 21;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 22;
    string tabOrder = 23;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 24;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 25;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 26;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 27;
}

message InlineTemplate {
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    AccountCustomFields customFields = 1;
    // Complex element contains the details on the documents in the envelope.
    repeated document documents = 2;
    // A container used to send documents to recipients. The envelope carries information about the sender and timestamps to indicate the progress of the delivery procedure. It can contain collections of Documents, Tabs and Recipients.
    Envelopes envelope = 3;
    EnvelopeRecipients recipients = 4;
    // Specifies the order in which templates are overlaid.
    string sequence = 5;
}

message IntegratedUserInfoList {
    string allUsersSelected = 1;
    // The last position in the result set.
    string endPosition = 2;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
    repeated userInfo users = 8;
}

message Intermediary {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
    string addAccessCodeToEmail = 2;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 3;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated string customFields = 4;
    // The date and time the recipient declined the document.
    string declinedDateTime = 5;
    // The reason the recipient declined the document.
    string declinedReason = 6;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 7;
    // Reserved: For DocuSign use only.
    string deliveryMethod = 8;
    repeated documentVisibility documentVisibility = 9;
    // Email id of the recipient. Notification of the document to sign is sent to this email id. 
    // 
    // Maximum length: 100 characters.
    string email = 10;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 11;
    string emailRecipientPostSigningURL = 12;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 13;
    errorDetails errorDetails = 14;
    // Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    // 
    // When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    repeated string excludedDocuments = 15;
    // Reserved:
    string faxNumber = 16;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 17;
    // A complex element that contains input information related to a recipient ID check. It can include the following information.
    // 
    // addressInformationInput: Used to set recipient address information and consists of:
    // 
    // * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // dobInformationInput: Used to set recipient date of birth information and consists of:
    // 
    // * dateOfBirth: Specifies the recipient's date, month and year of birth.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn4InformationInput: Used to set the last four digits of the recipient's SSN information and consists of:
    // 
    // * ssn4: Specifies the last four digits of the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn9InformationInput: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of: 
    // * ssn9: Specifies the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    idCheckInformationInput idCheckInformationInput = 18;
    // When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
    string inheritEmailNotificationConfiguration = 19;
    string name = 20;
    // A note sent to the recipient in the signing email.
    // This note is unique to this recipient.
    // In the user interface,
    // it appears near the upper left corner
    // of the document
    // on the signing screen.
    // 
    // Maximum Length: 1000 characters.
    string note = 21;
    // A complex type that Contains the elements:
    // 
    // * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose.
    // * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use.
    // * recordVoicePrint - Reserved.
    // * validateRecipProvidedNumber - Reserved.
    recipientPhoneAuthentication phoneAuthentication = 22;
    // Reserved:
    repeated recipientAttachment recipientAttachments = 23;
    authenticationStatus recipientAuthenticationStatus = 24;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 25;
    string recipientIdGuid = 26;
    // When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
    string requireIdLookup = 27;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 28;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 29;
    recipientSAMLAuthentication samlAuthentication = 30;
    // The date and time the envelope was sent.
    string sentDateTime = 31;
    // Reserved: For DocuSign use only.
    string signedDateTime = 32;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 33;
    // The display name for the signing group. 
    // 
    // Maximum Length: 100 characters.
    string signingGroupName = 34;
    // A complex type that contains information about users in the signing group.
    repeated userInfo signingGroupUsers = 35;
    // Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication. 
    recipientSMSAuthentication smsAuthentication = 36;
    //  Lists the social ID type that can be used for recipient authentication.
    repeated socialAuthentication socialAuthentications = 37;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 38;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 39;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 40;
    string totalTabCount = 41;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 42;
}

message LastName {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 10;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 11;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 12;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 13;
    errorDetails errorDetails = 14;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 15;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 16;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 17;
    // When set to **true**, the information in the tab is italic.
    string italic = 18;
    mergeField mergeField = 19;
    string name = 20;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 21;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 22;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 23;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 24;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 25;
    string tabOrder = 26;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 27;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 28;
    // When set to **true**, the information in the tab is underlined.
    string underline = 29;
    // Specifies the value of the tab.
    string value = 30;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 31;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 32;
}

message List {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 10;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 11;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 12;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 13;
    errorDetails errorDetails = 14;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 15;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 16;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 17;
    // When set to **true**, the information in the tab is italic.
    string italic = 18;
    // The list of values that can be selected by senders. The list values are separated by semi-colons. Example: [one;two;three;four]
    // 
    // Maximum Length of listItems:  2048 characters.
    // Maximum Length of items in the list: 100 characters. 
    repeated listItem listItems = 19;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 20;
    mergeField mergeField = 21;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 22;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 23;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 24;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 25;
    // When set to **true**, the signer is required to fill out this tab
    string required = 26;
    // When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 
    // 
    // This value tab can only be changed by modifying (PUT) the template. 
    // 
    // Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
    string senderRequired = 27;
    // When set to **true**, this custom tab is shared.
    string shared = 28;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 29;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 30;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 31;
    string tabOrder = 32;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 33;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 34;
    // When set to **true**, the information in the tab is underlined.
    string underline = 35;
    // The value to use when the item is selected.
    string value = 36;
    // Width of the tab in pixels.
    int32 width = 37;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 38;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 39;
}

message ListCustomField {
    // If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
    string configurationType = 1;
    errorDetails errorDetails = 2;
    // An ID used to specify a custom field.
    string fieldId = 3;
    repeated string listItems = 4;
    // The name of the custom field.
    string name = 5;
    // When set to **true**, the signer is required to fill out this tab
    string required = 6;
    // A boolean indicating if the value should be displayed.
    string show = 7;
    // The value of the custom field.
    // 
    // Maximum Length: 100 characters.
    string value = 8;
}

message ListItem {
    // When set to **true**, indicates that this item is the default selection shown to a signer. 
    // 
    // Only one selection can be set as the default.
    string selected = 1;
    // Specifies the text that is shown in the dropdown list.
    string text = 2;
    // Specifies the value that is used when the list item is selected.
    string value = 3;
}

message LockRequest {
    // The number of seconds to lock the envelope for editing.  Must be greater than 0 seconds.
    string lockDurationInSeconds = 1;
    // The type of envelope lock.  Currently "edit" is the only supported type.
    string lockType = 2;
    // A friendly name of the application used to lock the envelope.  Will be used in error messages to the user when lock conflicts occur.
    string lockedByApp = 3;
    string templatePassword = 4;
    // Reserved for future use.
    // 
    // Indicates whether a scratchpad is used for editing information.
    string useScratchPad = 5;
}

message LoginAccount {
    // The account ID associated with the envelope.
    string accountId = 1;
    // The GUID associated with the account ID.
    string accountIdGuid = 2;
    // The URL that should be used for successive calls to this account. It includes the protocal (https), the DocuSign server where the account is located, and the account number. Use this Url to make API calls against this account. Many of the API calls provide Uri's that are relative to this baseUrl.
    string baseUrl = 3;
    // The email address for the user.
    string email = 4;
    // This value is true if this is the default account for the user, otherwise false is returned.
    string isDefault = 5;
    // A list of settings on the acccount that indicate what features are available.
    repeated nameValue loginAccountSettings = 6;
    // A list of user-level settings that indicate what user-specific features are available.
    repeated nameValue loginUserSettings = 7;
    // The name associated with the account.
    string name = 8;
    // An optional descirption of the site that hosts the account.
    string siteDescription = 9;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 10;
    // The name of this user as defined by the account.
    string userName = 11;
}

message MatchBox {
    // Height of the tab in pixels.
    int32 height = 1;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    int32 pageNumber = 2;
    // Width of the tab in pixels.
    int32 width = 3;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    int32 xPosition = 4;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    int32 yPosition = 5;
}

message MemberGroupSharedItem {
    errorDetails errorDetails = 1;
    group group = 2;
    // When set to **true**, this custom tab is shared.
    string shared = 3;
}

message MemberSharedItems {
    repeated sharedItem envelopes = 1;
    errorDetails errorDetails = 2;
    repeated templateSharedItem templates = 3;
    userInfo user = 4;
}

message MergeField {
    // When set to **true**, the sender can modify the value of the custom tab during the sending process.
    string allowSenderToEdit = 1;
    // If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
    string configurationType = 2;
    // Sets the object associated with the custom tab. Currently this is the Salesforce Object.
    string path = 3;
    // Specifies the row number in a Salesforce table that the merge field value corresponds to.
    string row = 4;
    // When wet to true, the information entered in the tab automatically updates the related Salesforce data when an envelope is completed.
    string writeBack = 5;
}

message MobileNotifierConfiguration {
    string deviceId = 1;
    errorDetails errorDetails = 2;
    // The Platform of the client application
    string platform = 3;
}

message Money {
    // The total payment amount
    // in the currency's base unit.
    // For example, for USD
    // the base currency is one cent.
    string amountInBaseUnit = 1;
    // The three-letter
    // [ISO 4217][ISO4217] currency code for the payment.
    // 
    // For example:
    // 
    // * AUD Australian dollar
    // * CAD Canadian dollar
    // * EUR Euro
    // * GBP Great Britain pund
    // * USD United States dollar
    // 
    // This is a read-only property.
    // 
    // [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
    string currency = 2;
    // The payment amount as displayed
    // in the `currency`.
    // 
    // For example, if the payment amount
    // is USD 12.59,
    // the `amountInBaseUnit` is 1259 (cents),
    // and the displayed amount is `$12.59 USD`.
    // 
    // This is a read-only property.
    string displayAmount = 3;
}

message NameValue {
    errorDetails errorDetails = 1;
    // The name or key of a name/value pair.
    string name = 2;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 3;
    // The value field of a name/value pair.
    string value = 4;
}

message NewAccountDefinition {
    paymentProcessorInformation PaymentProcessorInformation = 1;
    // The account name for the new account.
    string accountName = 2;
    // The list of
    // [account settings][accountsettings]
    // that determine
    // the features available for the account.
    // Note that some features are determined
    // by the plan used to create the account and cannot be overridden.
    // 
    // [accountsettings]: /esign/restapi/Accounts/Accounts/create/#account-settings
    repeated nameValue accountSettings = 3;
    // A complex type that contains the following information for the new account (all string content): address1, address2, city, country, fax, phone, postalCode and state.
    // 
    // **Note:** If country is US (United States) then State codes are validated for US States. Otherwise, State is treated as a non-validated string and serves the purpose of entering a state/province/region.
    // 
    // The maximum characters for the strings are:
    // * address1, address2, city, country and state: 100 characters
    // * postalCode, phone, and fax: 20 characters
    accountAddress addressInformation = 4;
    // A complex type that has information about the credit card used to pay for this account.
    creditCardInformation creditCardInformation = 5;
    // The code that identifies the billing plan groups and plans for the new account.
    string distributorCode = 6;
    // The password for the distributorCode.
    string distributorPassword = 7;
    // A complex type with the initial user information for the new account. Note that some user information is set internally based on the plan and cannot be overridden.
    Users initialUser = 8;
    // An object used to identify the features and attributes of the account being created.
    planInformation planInformation = 9;
    // A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry 
    // 
    // ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only. 
    referralInformation referralInformation = 10;
    // Contains properties that map a DocuSign user to a social account (Facebook, Yahoo, etc.)
    UserSocialAccountLogins socialAccountInformation = 11;
}

message NewAccountSummary {
    // The account ID associated with the envelope.
    string accountId = 1;
    // The GUID associated with the account ID.
    string accountIdGuid = 2;
    // The account name for the new account.
    string accountName = 3;
    // Contains a token that can be used for authentication in API calls instead of using the user name and password.
    string apiPassword = 4;
    // The URL that should be used for successive calls to this account. It includes the protocal (https), the DocuSign server where the account is located, and the account number. Use this Url to make API calls against this account. Many of the API calls provide Uri's that are relative to this baseUrl.
    string baseUrl = 5;
    billingPlanPreview billingPlanPreview = 6;
    // Specifies the user ID of the new user.
    string userId = 7;
}

message NewUser {
    // Contains a token that can be used for authentication in API calls instead of using the user name and password.
    string apiPassword = 1;
    // Indicates the date and time the item was created.
    string createdDateTime = 2;
    string email = 3;
    errorDetails errorDetails = 4;
    string permissionProfileId = 5;
    string permissionProfileName = 6;
    string uri = 7;
    // Specifies the user ID for the new user.
    string userId = 8;
    string userName = 9;
    string userStatus = 10;
}

message NewUsersDefinition {
    repeated Users newUsers = 1;
}

message NewUsersSummary {
    repeated newUser newUsers = 1;
}

message NotaryHost {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
    string addAccessCodeToEmail = 2;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 3;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated string customFields = 4;
    // The date and time the recipient declined the document.
    string declinedDateTime = 5;
    // The reason the recipient declined the document.
    string declinedReason = 6;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 7;
    // Reserved: For DocuSign use only.
    string deliveryMethod = 8;
    repeated documentVisibility documentVisibility = 9;
    // The notary's email address.
    // 
    // Maximum Length: 100 characters.
    string email = 10;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 11;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 12;
    errorDetails errorDetails = 13;
    // Reserved:
    string faxNumber = 14;
    string hostRecipientId = 15;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 16;
    // A complex element that contains input information related to a recipient ID check. It can include the following information.
    // 
    // addressInformationInput: Used to set recipient address information and consists of:
    // 
    // * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // dobInformationInput: Used to set recipient date of birth information and consists of:
    // 
    // * dateOfBirth: Specifies the recipient's date, month and year of birth.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn4InformationInput: Used to set the last four digits of the recipient's SSN information and consists of:
    // 
    // * ssn4: Specifies the last four digits of the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn9InformationInput: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of: 
    // * ssn9: Specifies the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    idCheckInformationInput idCheckInformationInput = 17;
    // When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
    string inheritEmailNotificationConfiguration = 18;
    // The notary's full legal name.
    // 
    // Maximum Length: 100 characters.
    string name = 19;
    propertyMetadata notaryEmailMetadata = 20;
    propertyMetadata notaryNameMetadata = 21;
    // A note sent to the notary in the signing email.
    // This note is visible only to this notary.
    // 
    // Maximum Length: 1000 characters.
    string note = 22;
    // A complex type that Contains the elements:
    // 
    // * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose.
    // * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use.
    // * recordVoicePrint - Reserved.
    // * validateRecipProvidedNumber - Reserved.
    recipientPhoneAuthentication phoneAuthentication = 23;
    // Reserved:
    repeated recipientAttachment recipientAttachments = 24;
    authenticationStatus recipientAuthenticationStatus = 25;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 26;
    string recipientIdGuid = 27;
    // When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
    string requireIdLookup = 28;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 29;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 30;
    recipientSAMLAuthentication samlAuthentication = 31;
    // The date and time the envelope was sent.
    string sentDateTime = 32;
    // Reserved: For DocuSign use only.
    string signedDateTime = 33;
    // Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication. 
    recipientSMSAuthentication smsAuthentication = 34;
    //  Lists the social ID type that can be used for recipient authentication.
    repeated socialAuthentication socialAuthentications = 35;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 36;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 37;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 38;
    string totalTabCount = 39;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 40;
}

message Note {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 10;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 11;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 12;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 13;
    errorDetails errorDetails = 14;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 15;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 16;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 17;
    // Height of the tab in pixels.
    int32 height = 18;
    // When set to **true**, the information in the tab is italic.
    string italic = 19;
    mergeField mergeField = 20;
    // Specifies the tool tip text for the tab.
    string name = 21;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 22;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 23;
    // When set to **true**, this custom tab is shared.
    string shared = 24;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 25;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 26;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 27;
    string tabOrder = 28;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 29;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 30;
    // When set to **true**, the information in the tab is underlined.
    string underline = 31;
    // Specifies the value of the tab.
    string value = 32;
    // Width of the tab in pixels.
    int32 width = 33;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 34;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 35;
}

message Notification {
    // A complex element that specifies the expiration settings for the envelope.
    expirations expirations = 1;
    // A complex element that specifies reminder settings for the envelope
    reminders reminders = 2;
    // When set to **true**, the account default notification settings are used for the envelope.
    string useAccountDefaults = 3;
}

message Number {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // Contains the formula
    // for calculating the value of
    // this tab.
    // 
    // Use a tab's `tabLabel`,
    // enclosed in brackets,
    // to refer to it.
    // 
    // For example,
    // you want to present the total cost
    // of two items, tax included.
    // 
    // The cost of each item is stored
    // in number tabs labeled Item1 and Item2.
    // The tax rate is in a number tab
    // labeled TaxRate.
    // 
    // The formula string for this property
    // would be:
    // `([Item1] + [Item2]) * (1 + [TaxRate])`
    // 
    // See [Calculated Fields][calculatedfields]
    // in the DocuSign Support Center
    // to learn more about formulas.
    // 
    // Maximum Length: 2000 characters
    // 
    // [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
    string formula = 20;
    // When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number.
    string isPaymentAmount = 21;
    // When set to **true**, the information in the tab is italic.
    string italic = 22;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 23;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 24;
    mergeField mergeField = 25;
    // Specifies the tool tip text for the tab.
    string name = 26;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 27;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 28;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 29;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 30;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 31;
    // When set to **true**, the signer is required to fill out this tab
    string required = 32;
    // When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 
    // 
    // This value tab can only be changed by modifying (PUT) the template. 
    // 
    // Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
    string senderRequired = 33;
    // When set to **true**, this custom tab is shared.
    string shared = 34;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 35;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 36;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 37;
    string tabOrder = 38;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 39;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 40;
    // When set to **true**, the information in the tab is underlined.
    string underline = 41;
    // The message displayed if the custom tab fails input validation (either custom of embedded).
    string validationMessage = 42;
    // A regular expressionn used to validate input for the tab.
    string validationPattern = 43;
    // Specifies the value of the tab.
    string value = 44;
    // Width of the tab in pixels.
    int32 width = 45;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 46;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 47;
}

message OauthAccess {
    // Access token information.
    string access_token = 1;
    repeated nameValue data = 2;
    string expires_in = 3;
    string refresh_token = 4;
    // Must be set to "api".
    string scope = 5;
    string token_type = 6;
}

message Page {
    // The number of dots per inch used for the page image.
    string dpi = 1;
    errorDetails errorDetails = 2;
    // Height of the tab in pixels.
    string height = 3;
    string imageBytes = 4;
    string mimeType = 5;
    string pageId = 6;
    string sequence = 7;
    // Width of the tab in pixels.
    string width = 8;
}

message PageImages {
    // The last position in the result set.
    string endPosition = 1;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 2;
    repeated page pages = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message PageRequest {
    string password = 1;
    // Sets the direction the page image is rotated. The possible settings are: left or right
    string rotate = 2;
}

message PaymentDetails {
    string chargeId = 1;
    // Specifies the three-letter
    // [ISO 4217][ISO4217] currency code for the payment.
    // 
    // Supported currencies are:
    // 
    // * AUD Australian dollar
    // * CAD Canadian dollar
    // * EUR Euro
    // * GBP Great Britain pund
    // * USD United States dollar
    // 
    // Specifying any other ISO 4217 code for payments is an error.
    // 
    // [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
    string currencyCode = 2;
    // A GUID that identifies the payment gateway
    // connected to the sender's DocuSign account.
    // 
    // There is no public API
    // for connecting payment gateway accounts
    // You must connect and manage payment gateway accounts
    // through the DocuSign Admin console
    // and through your chosen payment gateway.
    // 
    // You can get the gateway account ID
    // in the Payments section
    // of the DocuSign Admin console.
    // 
    // 
    // [paymentgateways]:  https://support.docusign.com/en/guides/managing-payment-gateways
    string gatewayAccountId = 3;
    string gatewayName = 4;
    // A payment formula can have
    // one or more line items
    // that provide detail about
    // individual items in a payment request.
    // 
    // The list of line items
    // are returned as metadata
    // to the payment gateway.
    repeated paymentLineItem lineItems = 5;
    // This read-only property describes the status of a payment.
    // 
    // * `new`<br>
    //   This is a new payment request.
    //   The envelope has been created,
    //   but no payment authorizations have been made.
    // 
    // * `auth_complete`<br>
    //   A recipient has entered their credit card information,
    //   but the envelope has not been completed.
    //   The card has not been charged.
    // 
    // * `payment_complete`<br>
    //   The recipient's card has been charged.
    // 
    // * `payment_capture_failed`<br>
    //   Final charge failed.
    //   This can happen when too much time
    //   passes between authorizing the payment
    //   and completing the document.
    string status = 6;
    // This read-only property
    // is a currency-formatted string
    // that represents the total
    // of all the line items.
    // The total is available
    // only after the document is completed,
    // which is when all recipients have paid and
    // have completed all required fields.
    money total = 7;
}

message PaymentGatewayAccountsInfo {
    repeated PaymentGatewayAccounts paymentGatewayAccounts = 1;
}

message PaymentLineItem {
    // This is a the `tabLabel`
    // that specifies the amount paid
    // for the line items.
    // 
    string amountReference = 1;
    // A sender-defined description of the line item.
    string description = 2;
    // This is the sender-defined
    // SKU, inventory number, or other item code
    // for the line item.
    string itemCode = 3;
    // This is a sender-defined
    // product name, service name,
    // or other designation for the line item.
    string name = 4;
}

message PaymentProcessorInformation {
    addressInformation address = 1;
    string billingAgreementId = 2;
    string email = 3;
}

message PermissionProfileInformation {
    // A complex type containing a collection of permission profiles.
    repeated AccountPermissionProfiles permissionProfiles = 1;
}

message PlanInformation {
    // Reserved:
    repeated addOn addOns = 1;
    // Specifies the ISO currency code for the account.
    string currencyCode = 2;
    // Reserved for DocuSign use only.
    string freeTrialDaysOverride = 3;
    // A complex type that sets the feature sets for the account.
    repeated featureSet planFeatureSets = 4;
    // The DocuSign Plan ID for the account.
    string planId = 5;
    repeated recipientDomain recipientDomains = 6;
}

message PostTransactionsResponse {
    string documentData = 1;
    string transactionSid = 2;
}

message PowerFormFormDataRecipient {
    string email = 1;
    repeated nameValue formData = 2;
    string name = 3;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 4;
}

message PowerFormRecipient {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    string accessCodeLocked = 2;
    string accessCodeRequired = 3;
    string email = 4;
    string emailLocked = 5;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 6;
    string idCheckRequired = 7;
    string name = 8;
    string recipientType = 9;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 10;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 11;
    string templateRequiresIdLookup = 12;
    string userNameLocked = 13;
}

message PowerFormSendersResponse {
    // The last position in the result set.
    string endPosition = 1;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 2;
    repeated userInfo powerFormSenders = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message PowerFormsFormDataResponse {
    repeated PowerFormData envelopes = 1;
}

message PowerFormsRequest {
    repeated PowerForms powerForms = 1;
}

message PowerFormsResponse {
    // The last position in the result set.
    string endPosition = 1;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 2;
    repeated PowerForms powerForms = 3;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
}

message PropertyMetadata {
    repeated string options = 1;
    string rights = 2;
}

message Province {
    string isoCode = 1;
    string name = 2;
}

message ProvisioningInformation {
    string defaultConnectionId = 1;
    string defaultPlanId = 2;
    // The code that identifies the billing plan groups and plans for the new account.
    string distributorCode = 3;
    // The password for the distributorCode.
    string distributorPassword = 4;
    string passwordRuleText = 5;
    string planPromotionText = 6;
    string purchaseOrderOrPromAllowed = 7;
}

message PurchasedEnvelopesInformation {
    // The total amount of the purchase.
    string amount = 1;
    // The AppName of the client application.
    string appName = 2;
    // Specifies the ISO currency code of the purchase. This is based on the ISO 4217 currency code information.
    string currencyCode = 3;
    // The Platform of the client application
    string platform = 4;
    // The Product ID from the AppStore.
    string productId = 5;
    // The quantity of envelopes to add to the account.
    string quantity = 6;
    // The encrypted Base64 encoded receipt data.
    string receiptData = 7;
    // The name of the AppStore.
    string storeName = 8;
    // Specifies the Transaction ID from the AppStore.
    string transactionId = 9;
}

message Radio {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    errorDetails errorDetails = 9;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 10;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 11;
    // When set to **true**, the signer is required to fill out this tab
    string required = 12;
    // When set to **true**, the radio button is selected.
    string selected = 13;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 14;
    string tabOrder = 15;
    // Specifies the value of the tab.
    string value = 16;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 17;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 18;
}

message RadioGroup {
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 1;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 2;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 3;
    // The name of the group.
    string groupName = 4;
    // Specifies the locations and status for radio buttons that are grouped together.
    repeated radio radios = 5;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 6;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 7;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 8;
    // When set to **true**, this custom tab is shared.
    string shared = 9;
}

message RecipientAttachment {
    string attachmentId = 1;
    string attachmentType = 2;
    string data = 3;
    string label = 4;
    string name = 5;
    string remoteUrl = 6;
}

message RecipientDomain {
    string active = 1;
    string domainCode = 2;
    string domainName = 3;
    string recipientDomainId = 4;
}

message RecipientEmailNotification {
    // Specifies the email body of the message sent to the recipient. 
    // 
    // Maximum length: 10000 characters.
    string emailBody = 1;
    // Specifies the subject of the email that is sent to all recipients.
    // 
    // See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.
    string emailSubject = 2;
    // The language to be used with your custom notification email. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk), and Vietnamese (vi).
    string supportedLanguage = 3;
}

message RecipientEvent {
    // reserved
    string includeDocuments = 1;
    // Send a webhook notification for the following recipient statuses: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
    string recipientEventStatusCode = 2;
}

message RecipientFormData {
    string declinedTime = 1;
    string deliveredTime = 2;
    string email = 3;
    repeated nameValue formData = 4;
    string name = 5;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 6;
    string sentTime = 7;
    string signedTime = 8;
}

message RecipientNamesResponse {
    // Indicates whether email address is used by more than one user.
    string multipleUsers = 1;
    repeated string recipientNames = 2;
    string reservedRecipientEmail = 3;
}

message RecipientPhoneAuthentication {
    // Boolean. When set to **true**, the recipient can supply a phone number their choice.
    string recipMayProvideNumber = 1;
    // Reserved.
    string recordVoicePrint = 2;
    // An Array containing a list of phone numbers the recipient may use for SMS text authentication.
    repeated string senderProvidedNumbers = 3;
    //  Reserved.
    string validateRecipProvidedNumber = 4;
}

message RecipientSAMLAuthentication {
    repeated samlAssertionAttribute samlAssertionAttributes = 1;
}

message RecipientSMSAuthentication {
    // An Array containing a list of phone numbers the recipient may use for SMS text authentication.
    repeated string senderProvidedNumbers = 1;
}

message RecipientSignatureInformation {
    string fontStyle = 1;
    string signatureInitials = 2;
    // Specifies the user signature name.
    string signatureName = 3;
}

message RecipientSignatureProvider {
    // The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. [The current provider list.](../../../../guide/appendix/standards_based_signatures.html#signature-provider-options)
    string signatureProviderName = 1;
    // Option settings for the signature provider.
    recipientSignatureProviderOptions signatureProviderOptions = 2;
}

message RecipientSignatureProviderOptions {
    // Reserved for DocuSign
    string cpfNumber = 1;
    // A pre-shared secret that the signer must enter to complete the signing process. Eg last six digits of the signer's government ID or Social Security number. Or a newly created pre-shared secret for the transaction. Note: some signature providers may require an exact (case-sensitive) match if alphabetic characters are included in the field.
    string oneTimePassword = 2;
    // The role or capacity of the signing recipient. Examples: Manager, Approver, etc.
    string signerRole = 3;
    // The mobile phone number used to send the recipient an access code for the signing ceremony. Format: a string starting with +, then the country code followed by the full mobile phone number without any spaces or special characters. Omit leading zeroes before a city code. Examples: +14155551234, +97235551234, +33505551234.
    string sms = 4;
}

message RecipientUpdateResponse {
    errorDetails errorDetails = 1;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 2;
    EnvelopeRecipientTabs tabs = 3;
}

message RecipientViewRequest {
    // A unique identifier of the authentication event executed by the client application.
    string assertionId = 1;
    // A sender generated value that indicates the date/time that the signer was authenticated.
    string authenticationInstant = 2;
    // Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer. 
    // 
    // Choose a value from this list: 
    // * Biometric 
    // * Email
    // * HTTPBasicAuth
    // * Kerberos
    // * KnowledgeBasedAuth
    // * None
    // * PaperDocuments
    // * Password
    // * RSASecureID
    // * SingleSignOn_CASiteminder
    // * SingleSignOn_InfoCard
    // * SingleSignOn_MicrosoftActiveDirectory
    // * SingleSignOn_Other
    // * SingleSignOn_Passport
    // * SingleSignOn_SAML
    // * Smartcard
    // * SSLMutualAuth
    // * X509Certificate
    // 
    // This information is included in the Certificate of Completion.
    string authenticationMethod = 3;
    // A sender created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.
    // 
    // Use your application's client ID (user ID) for the recipient. Doing so enables the details of your application's authentication of the recipient to be connected to the recipient's signature if the signature is disputed or repudiated.
    // 
    // Maximum length: 100 characters.
    string clientUserId = 4;
    // Specifies the email of the recipient. You can use either email and userName or userId to identify the recipient.
    string email = 5;
    // Only used if pingUrl is specified. This is the interval, in seconds, between pings on the pingUrl.  The default is 300 seconds. Valid values are 60-1200 seconds.
    string pingFrequency = 6;
    // A client Url to be pinged by the DocuSign Signing experience to indicate to the client that Signing is active. An HTTP Get is executed against the client. The response from the client is ignored. The intent is for the client to reset it's session timer when the request is received.
    string pingUrl = 7;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 8;
    // The URL that the recipient is redirected to
    // after the signing session has ended.
    // DocuSign redirects to the URL
    // and includes an `event` query parameter
    // that can be used by your application.
    // 
    // Possible `event` parameter values: 
    // 
    // * `access_code_failed`<br>
    //   Recipient used incorrect access code.
    // * `cancel`<br>
    //   Recipient canceled the signing operation,
    //   possibly by using the Finish Later option.
    // * `decline`<br>
    //   Recipient declined to sign.
    // * `exception`<br>
    //   A system error occurred during signing.
    // * `fax_pending`<br>
    //   Recipient has a fax pending.
    // * `id_check_failed`<br>
    //   Recipient failed an ID check.
    // * `session_timeout`<br>
    //   The session timed out.
    //   An account can control this timeout using the Signer Session Timeout option.
    // * `signing_complete`<br>
    //   Recipient completed the signing ceremony.
    // * `ttl_expired`<br>
    //   The Time To Live token for the envelope has expired.
    //   After being successfully invoked, these tokens expire
    //   after 5 minutes
    //   or if the envelope is voided.
    // * `viewing_complete`<br>
    //   The recipient completed viewing an envelope
    //   that is in a read-only/terminal state
    //   such as completed, declined, or voided.
    // 
    // Be sure to include `https://` in the URL
    // or the redirect may fail
    // on some browsers.
    string returnUrl = 9;
    // The domain in which the user authenticated.
    string securityDomain = 10;
    // Specifies the user ID of the recipient. You can use with user ID or email and user name to identify the recipient. 
    // 
    // If userId is used and a clientUserId is provided, the value in the `userId` property must match a recipientId (which can be retrieved with a GET recipients call) for the envelope. 
    // 
    // If a userId is used and a clientUserId is not provided, the userId must match the user ID of the authenticating user.
    string userId = 11;
    // Specifies the username of the recipient. You can use either email and userName or userId to identify the recipient.
    string userName = 12;
    string xFrameOptions = 13;
    string xFrameOptionsAllowFromUrl = 14;
}

message RecipientsUpdateSummary {
    repeated recipientUpdateResponse recipientUpdateResults = 1;
}

message ReferralInformation {
    // A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry.
    // 
    // ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only. 
    string advertisementId = 1;
    // When set to **true**, then customer support is provided as part of the account plan.
    string enableSupport = 2;
    string externalOrgId = 3;
    string groupMemberId = 4;
    string idType = 5;
    // The number of seats (users) included.
    string includedSeats = 6;
    string industry = 7;
    string planStartMonth = 8;
    string promoCode = 9;
    string publisherId = 10;
    string referralCode = 11;
    string referrerName = 12;
    // Reserved for DocuSign use only.
    string saleDiscountAmount = 13;
    // Reserved for DocuSign use only.
    string saleDiscountFixedAmount = 14;
    // Reserved for DocuSign use only.
    string saleDiscountPercent = 15;
    // Reserved for DocuSign use only.
    string saleDiscountPeriods = 16;
    // Reserved for DocuSign use only.
    string saleDiscountSeatPriceOverride = 17;
    string shopperId = 18;
}

message Reminders {
    // An interger that sets the number of days after the recipient receives the envelope that reminder emails are sent to the recipient.
    string reminderDelay = 1;
    // When set to **true**, the envelope expires (is no longer available for signing) in the set number of days. If false, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
    string reminderEnabled = 2;
    // An interger that sets the interval, in days, between reminder emails.
    string reminderFrequency = 3;
}

message ReturnUrlRequest {
    // Your app's return url that the user will be redirected to after sending the envelope or completing the sending/tagging view. Query parameters `envelopeId` and `event` will be added to the URL. The event parameter values: 
    // 
    // * `Send` (the user sent the envelope)
    // * `Save` (the user saved the envelope, it is still a draft)
    // * `Cancel` (the user canceled the sending transaction)
    // * `Error` (there was an error during the send operation)
    // * `SessionEnd` (the sending session ended before the user completed a different action)
    string returnUrl = 1;
}

message SamlAssertionAttribute {
    errorDetails errorDetails = 1;
    string name = 2;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 3;
    // The value associated with the named SAML assertion attribute
    string value = 4;
}

message SeatDiscount {
    // Reserved: TBD
    string beginSeatCount = 1;
    string discountPercent = 2;
    // Reserved: TBD
    string endSeatCount = 3;
}

message SenderEmailNotifications {
    // When set to **true**, the sender receives notification if the signer changes.
    string changedSigner = 1;
    // When set to **true**, the sender receives notification if the delivery of the envelope fails.
    string deliveryFailed = 2;
    // When set to **true**, the user receives notification that the envelope has been completed.
    string envelopeComplete = 3;
    // When set to **true**, the user receives notification if the offline signing failed.
    string offlineSigningFailed = 4;
    // When set to **true**, the sender receives notification that the recipient viewed the enveloper.
    string recipientViewed = 5;
    string senderEnvelopeDeclined = 6;
    // When set to **true**, the user receives notification if consent is withdrawn.
    string withdrawnConsent = 7;
}

message ServerTemplate {
    string sequence = 1;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 2;
}

message ServiceVersion {
    // The version of the rest API.
    string version = 1;
    string versionUrl = 2;
}

message SettingsMetadata {
    // When set to **true**, indicates that this module is enabled on the account.
    string is21CFRPart11 = 1;
    repeated string options = 2;
    string rights = 3;
    string uiHint = 4;
    string uiOrder = 5;
    string uiType = 6;
}

message SharedItem {
    errorDetails errorDetails = 1;
    // When set to **true**, this custom tab is shared.
    string shared = 2;
    userInfo user = 3;
}

message SignHere {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 9;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 10;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 11;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 12;
    errorDetails errorDetails = 13;
    mergeField mergeField = 14;
    // Specifies the tool tip text for the tab.
    string name = 15;
    string optional = 16;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 17;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 18;
    int32 scaleValue = 19;
    string stampType = 20;
    propertyMetadata stampTypeMetadata = 21;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 22;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 23;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 24;
    string tabOrder = 25;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 26;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 27;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 28;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 29;
}

message SignatureProviderRequiredOption {
    repeated string requiredSignatureProviderOptionIds = 1;
    string signerType = 2;
}

message SignatureType {
    string isDefault = 1;
    // Type of the user. Valid values: type_owner, type_participant.
    string type = 2;
}

message Signer {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
    string addAccessCodeToEmail = 2;
    // Specifies whether auto navigation is set for the recipient.
    string autoNavigation = 3;
    // Contains a URI for an endpoint that allows you to easily retrieve bulk recipient information.
    string bulkRecipientsUri = 4;
    // When set to **true**, specifies that the signer can perform the signing ceremony offline.
    string canSignOffline = 5;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 6;
    string creationReason = 7;
    // An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
    repeated string customFields = 8;
    // The date and time the recipient declined the document.
    string declinedDateTime = 9;
    // The reason the recipient declined the document.
    string declinedReason = 10;
    // When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
    string defaultRecipient = 11;
    // Reserved: For DocuSign use only.
    string deliveredDateTime = 12;
    // Reserved: For DocuSign use only.
    string deliveryMethod = 13;
    repeated documentVisibility documentVisibility = 14;
    // Email id of the recipient. Notification of the document to sign is sent to this email id. 
    // 
    // Maximum length: 100 characters.
    string email = 15;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 16;
    string emailRecipientPostSigningURL = 17;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 18;
    errorDetails errorDetails = 19;
    // Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    // 
    // When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
    repeated string excludedDocuments = 20;
    // Reserved:
    string faxNumber = 21;
    // Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.
    // 
    // *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
    string idCheckConfigurationName = 22;
    // A complex element that contains input information related to a recipient ID check. It can include the following information.
    // 
    // addressInformationInput: Used to set recipient address information and consists of:
    // 
    // * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // dobInformationInput: Used to set recipient date of birth information and consists of:
    // 
    // * dateOfBirth: Specifies the recipient's date, month and year of birth.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn4InformationInput: Used to set the last four digits of the recipient's SSN information and consists of:
    // 
    // * ssn4: Specifies the last four digits of the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    // * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.
    // 
    // ssn9InformationInput: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of: 
    // * ssn9: Specifies the recipient's SSN.
    // * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.
    idCheckInformationInput idCheckInformationInput = 23;
    // When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
    string inheritEmailNotificationConfiguration = 24;
    // When set to **true**, this signer is a bulk recipient and the recipient information is contained in a bulk recipient file. 
    // 
    // Note that when this is true the email and name for the recipient becomes bulk@recipient.com and "Bulk Recipient". These fields can not be changed for the bulk recipient. 
    string isBulkRecipient = 25;
    string name = 26;
    // A note sent to the recipient in the signing email.
    // This note is unique to this recipient.
    // In the user interface,
    // it appears near the upper left corner
    // of the document
    // on the signing screen.
    // 
    // Maximum Length: 1000 characters.
    string note = 27;
    // A complex type that Contains the elements:
    // 
    // * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose.
    // * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use.
    // * recordVoicePrint - Reserved.
    // * validateRecipProvidedNumber - Reserved.
    recipientPhoneAuthentication phoneAuthentication = 28;
    // Reserved:
    repeated recipientAttachment recipientAttachments = 29;
    authenticationStatus recipientAuthenticationStatus = 30;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 31;
    string recipientIdGuid = 32;
    // The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information](../../../../guide/appendix/standards_based_signatures.html)
    repeated recipientSignatureProvider recipientSignatureProviders = 33;
    string recipientSuppliesTabs = 34;
    // When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
    string requireIdLookup = 35;
    // When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
    string requireSignOnPaper = 36;
    // By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.
    // 
    // This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. 
    // 
    // Set this parameter to `safe` to use a SAFE-BioPharma certificate.
    // 
    // The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
    string requireSignerCertificate = 37;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 38;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 39;
    recipientSAMLAuthentication samlAuthentication = 40;
    // The date and time the envelope was sent.
    string sentDateTime = 41;
    // When set to **true**, specifies that the signer must sign in all locations.
    string signInEachLocation = 42;
    // Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
    // 
    // Used only with recipient types In Person Signers and Signers. 
    recipientSignatureInformation signatureInfo = 43;
    // Reserved: For DocuSign use only.
    string signedDateTime = 44;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 45;
    // The display name for the signing group. 
    // 
    // Maximum Length: 100 characters.
    string signingGroupName = 46;
    // A complex type that contains information about users in the signing group.
    repeated userInfo signingGroupUsers = 47;
    // Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication. 
    recipientSMSAuthentication smsAuthentication = 48;
    //  Lists the social ID type that can be used for recipient authentication.
    repeated socialAuthentication socialAuthentications = 49;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 50;
    EnvelopeRecipientTabs tabs = 51;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 52;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 53;
    string totalTabCount = 54;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 55;
}

message SignerAttachment {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 9;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 10;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 11;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 12;
    errorDetails errorDetails = 13;
    mergeField mergeField = 14;
    string name = 15;
    string optional = 16;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 17;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 18;
    int32 scaleValue = 19;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 20;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 21;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 22;
    string tabOrder = 23;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 24;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 25;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 26;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 27;
}

message SignerEmailNotifications {
    // When set to **true**, the user receives agent notification emails.
    string agentNotification = 1;
    // When set to **true**, the user receives notifications of carbon copy deliveries.
    string carbonCopyNotification = 2;
    // When set to **true**, the user receives notifications of certified deliveries.
    string certifiedDeliveryNotification = 3;
    // When set to **true**, the user receives notification that document markup has been activated.
    string documentMarkupActivation = 4;
    // When set to **true**, the user receives notification that the envelope has been activated.
    string envelopeActivation = 5;
    // When set to **true**, the user receives notification that the envelope has been completed.
    string envelopeComplete = 6;
    // When set to **true**, the user receives notification that the envelope has been corrected.
    string envelopeCorrected = 7;
    // When set to **true**, the user receives notification that the envelope has been declined.
    string envelopeDeclined = 8;
    // When set to **true**, the user receives notification that the envelope has been voided.
    string envelopeVoided = 9;
    // Reserved:
    string faxReceived = 10;
    // When set to **true**, the user receives notification if the offline signing failed.
    string offlineSigningFailed = 11;
    // When set to **true**, the user receives notification of document purges.
    string purgeDocuments = 12;
    // When set to **true**, the user receives notification that the envelope has been reassigned.
    string reassignedSigner = 13;
    string whenSigningGroupMember = 14;
}

message SigningGroupInformation {
    // A collection group objects containing information about the groups returned.
    repeated SigningGroups groups = 1;
}

message SigningGroupUser {
    string email = 1;
    errorDetails errorDetails = 2;
    // The name of the group member. 
    // 
    // Maximum Length: 100 characters.
    string userName = 3;
}

message SocialAuthentication {
    // Reserved: TBD
    string authentication = 1;
}

message Ssn {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // When set to **true**, the information in the tab is italic.
    string italic = 20;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 21;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 22;
    mergeField mergeField = 23;
    // Specifies the tool tip text for the tab.
    string name = 24;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 25;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 26;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 27;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 28;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 29;
    // When set to **true**, the signer is required to fill out this tab
    string required = 30;
    // When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 
    // 
    // This value tab can only be changed by modifying (PUT) the template. 
    // 
    // Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
    string senderRequired = 31;
    // When set to **true**, this custom tab is shared.
    string shared = 32;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 33;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 34;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 35;
    string tabOrder = 36;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 37;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 38;
    // When set to **true**, the information in the tab is underlined.
    string underline = 39;
    // The message displayed if the custom tab fails input validation (either custom of embedded).
    string validationMessage = 40;
    // A regular expressionn used to validate input for the tab.
    string validationPattern = 41;
    // Specifies the value of the tab.
    string value = 42;
    // Width of the tab in pixels.
    int32 width = 43;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 44;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 45;
}

message Ssn4InformationInput {
    // Specifies the display level for the recipient. 
    // Valid values are: 
    // 
    // * ReadOnly
    // * Editable
    // * DoNotDisplay
    string displayLevelCode = 1;
    // When set to **true**, the information needs to be returned in the response.
    string receiveInResponse = 2;
    // The last four digits of the recipient's Social Security Number (SSN).
    string ssn4 = 3;
}

message Ssn9InformationInput {
    // Specifies the display level for the recipient. 
    // Valid values are: 
    // 
    // * ReadOnly
    // * Editable
    // * DoNotDisplay
    string displayLevelCode = 1;
    //  The recipient's Social Security Number(SSN).
    string ssn9 = 2;
}

message SupportedLanguages {
    repeated nameValue languages = 1;
}

message TabMetadataList {
    repeated CustomTabs tabs = 1;
}

message TemplateCustomFields {
    // An array of list custom fields.
    repeated listCustomField listCustomFields = 1;
    // An array of text custom fields.
    repeated textCustomField textCustomFields = 2;
}

message TemplateMatch {
    string documentEndPage = 1;
    string documentStartPage = 2;
    string matchPercentage = 3;
}

message TemplateNotificationRequest {
    // A complex element that specifies the expiration settings for the envelope.
    expirations expirations = 1;
    string password = 2;
    // A complex element that specifies reminder settings for the envelope
    reminders reminders = 3;
    // When set to **true**, the account default notification settings are used for the envelope.
    string useAccountDefaults = 4;
}

message TemplateRecipients {
    // A complex type defining the management and access rights of a recipient assigned assigned as an agent on the document.
    repeated agent agents = 1;
    // A complex type containing information about recipients who should receive a copy of the envelope, but does not need to sign it.
    repeated carbonCopy carbonCopies = 2;
    // A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
    repeated certifiedDelivery certifiedDeliveries = 3;
    string currentRoutingOrder = 4;
    repeated editor editors = 5;
    errorDetails errorDetails = 6;
    // Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
    repeated inPersonSigner inPersonSigners = 7;
    // Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
    repeated intermediary intermediaries = 8;
    // The list of recipient event statuses that will trigger Connect to send updates to the url. It can be a two-part list with:
    // 
    // * recipientEventStatusCode - The recipient status, this can be Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
    // * includeDocuments - When set to **true**, the envelope time zone information is included in the message.
    string recipientCount = 9;
    // A complex type containing information about the Signer recipient.
    repeated signer signers = 10;
}

message TemplateRole {
    // If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    // 
    // Maximum Length: 50 characters and it must conform to the account's access code format setting.
    // 
    // If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    // 
    // If blank and the signer `accessCode` property is not set, then the access code is not required.
    string accessCode = 1;
    // Specifies whether the recipient is embedded or remote. 
    // 
    // If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    // 
    // Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 
    // 
    // Maximum length: 100 characters.
    string clientUserId = 2;
    // When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
    string defaultRecipient = 3;
    // Specifies the email associated with a role name.
    string email = 4;
    // An optional complex type that sets a specific email subject and body for this recipient's notification email. 
    // 
    // **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope `Subject` and `EmailBlurb` property settings.
    recipientEmailNotification emailNotification = 5;
    // Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    // 
    // If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.
    // 
    // It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    // 
    // If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. 
    // 
    // *Example*: 
    // 
    // `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
    string embeddedRecipientStartURL = 6;
    // Specifies the full legal name of the signer in person signer template roles.
    // 
    // Maximum Length: 100 characters.
    string inPersonSignerName = 7;
    // Specifies the recipient's name.
    string name = 8;
    // The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information](../../../../guide/appendix/standards_based_signatures.html)
    repeated recipientSignatureProvider recipientSignatureProviders = 9;
    // Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
    string roleName = 10;
    // Specifies the routing order of the recipient in the envelope.
    string routingOrder = 11;
    // When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    string signingGroupId = 12;
    EnvelopeRecipientTabs tabs = 13;
}

message TemplateSharedItem {
    errorDetails errorDetails = 1;
    userInfo owner = 2;
    // When set to **true**, this custom tab is shared.
    string shared = 3;
    repeated memberGroupSharedItem sharedGroups = 4;
    repeated userSharedItem sharedUsers = 5;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 6;
    string templateName = 7;
}

message TemplateSummary {
    // Reserved: TBD
    string applied = 1;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 2;
    string documentName = 3;
    string name = 4;
    // The unique identifier of the template. If this is not provided, DocuSign will generate a value.
    string templateId = 5;
    templateMatch templateMatch = 6;
    string uri = 7;
}

message TemplateTabs {
    // A tab that allows the recipient to approve documents
    // without placing a signature or initials on the
    // document. If the recipient clicks the Approve tab during the signing
    // process, the recipient is considered to have signed the document. No
    // information is shown on the document for the approval, but it is
    // recorded as a signature in the envelope history.
    repeated approve approveTabs = 1;
    // Specifies a tag on the document in a location where the recipient can select an option.
    repeated checkbox checkboxTabs = 2;
    // Specifies a tag on the document where you want the recipient's company name to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated company companyTabs = 3;
    // Specifies a tab on the document where the date the document was signed will automatically appear.
    repeated dateSigned dateSignedTabs = 4;
    // Specifies a tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained. 
    // 
    // If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format.
    repeated date dateTabs = 5;
    // Specifies a tag on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tag during the signing process, the envelope is voided.
    repeated decline declineTabs = 6;
    // Specifies a location on the document where you want where you want the recipient's email, as entered in the recipient information, to display.
    repeated emailAddress emailAddressTabs = 7;
    // Specifies a tag on the document where you want the recipient to enter an email. Email tags are single-line fields that accept any characters. The system checks that a valid email format (i.e. xxx@yyy.zzz) is entered in the tag. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated email emailTabs = 8;
    // Specifies a tag on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab, it is for informational purposes only.
    repeated envelopeId envelopeIdTabs = 9;
    // Specifies tag on a document where you want the recipient's first name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name.
    repeated firstName firstNameTabs = 10;
    // A list of formula tabs.
    // 
    // The value of a formula tab is calculated
    // from the values of other
    // number or date tabs in the document.
    // When the recipient completes the underlying fields,
    // the formula tab calculates and displays the result.
    // 
    // The `formula` property of the tab
    // contains the references
    // to the underlying tabs.
    // See [Calculated Fields][calculatedfields]
    // in the DocuSign Support Center
    // to learn more about formulas.
    // 
    // If a formula tab contains
    // a `paymentDetails` property,
    // the tab is considered a payment item.
    // See [Requesting Payments Along with Signatures][paymentguide]
    // in the DocuSign Support Center
    // to learn more about payments.
    // 
    // [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
    // [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    repeated formulaTab formulaTabs = 11;
    // Specifies a tag on the document where you want the recipient's name to appear.
    repeated fullName fullNameTabs = 12;
    // Specifies a tag location in the document at which a recipient will place their initials. The `optional` parameter specifies whether the initials are required or optional.
    repeated initialHere initialHereTabs = 13;
    // Specifies a tag on a document where you want the recipient's last name to appear. This tag takes the recipient's name, as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name.
    repeated lastName lastNameTabs = 14;
    // Specify this tag to give your recipient a list of options, presented as a drop-down list, from which they can select.
    repeated list listTabs = 15;
    // Specifies a location on the document where you want to place additional information, in the form of a note, for a recipient.
    repeated note noteTabs = 16;
    // Specifies a tag on the document where you want the recipient to enter a number. It uses the same parameters as a Text tab, with the validation message and pattern set for number information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated number numberTabs = 17;
    // Specifies a tag on the document in a location where the recipient can select one option from a group of options using a radio button. The radio buttons do not have to be on the same page in a document.
    repeated radioGroup radioGroupTabs = 18;
    // A complex type the contains information about the tag that specifies where the recipient places their signature in the document. The "optional" parameter sets if the signature is required or optional.
    repeated signHere signHereTabs = 19;
    // Specifies a tag on the document when you want the recipient to add supporting documents to an envelope.
    repeated signerAttachment signerAttachmentTabs = 20;
    // Specifies a tag on the document where you want the recipient to enter a Social Security Number (SSN). A SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated ssn ssnTabs = 21;
    // Specifies a that that is an adaptable field that allows the recipient to enter different text information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated text textTabs = 22;
    // Specifies a tag on the document where you want the recipient's title to appear.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated title titleTabs = 23;
    repeated view viewTabs = 24;
    // Specifies a tag on the document where you want the recipient to enter a ZIP code. The ZIP code can be a five numbers or the ZIP+4 format with nine numbers. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.
    // 
    // When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
    repeated zip zipTabs = 25;
}

message TemplateUpdateSummary {
    bulkEnvelopeStatus bulkEnvelopeStatus = 1;
    // The envelope ID of the envelope status that failed to post.
    string envelopeId = 2;
    errorDetails errorDetails = 3;
    repeated listCustomField listCustomFieldUpdateResults = 4;
    EnvelopeLocks lockInformation = 5;
    repeated recipientUpdateResponse recipientUpdateResults = 6;
    EnvelopeRecipientTabs tabUpdateResults = 7;
    repeated textCustomField textCustomFieldUpdateResults = 8;
}

message Text {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // Contains the formula
    // for calculating the value of
    // this tab.
    // 
    // Use a tab's `tabLabel`,
    // enclosed in brackets,
    // to refer to it.
    // 
    // For example,
    // you want to present the total cost
    // of two items, tax included.
    // 
    // The cost of each item is stored
    // in number tabs labeled Item1 and Item2.
    // The tax rate is in a number tab
    // labeled TaxRate.
    // 
    // The formula string for this property
    // would be:
    // `([Item1] + [Item2]) * (1 + [TaxRate])`
    // 
    // See [Calculated Fields][calculatedfields]
    // in the DocuSign Support Center
    // to learn more about formulas.
    // 
    // Maximum Length: 2000 characters
    // 
    // [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
    string formula = 20;
    // Height of the tab in pixels.
    int32 height = 21;
    // When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number.
    string isPaymentAmount = 22;
    // When set to **true**, the information in the tab is italic.
    string italic = 23;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 24;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 25;
    mergeField mergeField = 26;
    // Specifies the tool tip text for the tab.
    string name = 27;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 28;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 29;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 30;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 31;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 32;
    // When set to **true**, the signer is required to fill out this tab
    string required = 33;
    // When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 
    // 
    // This value tab can only be changed by modifying (PUT) the template. 
    // 
    // Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
    string senderRequired = 34;
    // When set to **true**, this custom tab is shared.
    string shared = 35;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 36;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 37;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 38;
    string tabOrder = 39;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 40;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 41;
    // When set to **true**, the information in the tab is underlined.
    string underline = 42;
    // The message displayed if the custom tab fails input validation (either custom of embedded).
    string validationMessage = 43;
    // A regular expressionn used to validate input for the tab.
    string validationPattern = 44;
    // Specifies the value of the tab.
    string value = 45;
    // Width of the tab in pixels.
    int32 width = 46;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 47;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 48;
}

message TextCustomField {
    // If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
    string configurationType = 1;
    errorDetails errorDetails = 2;
    // An ID used to specify a custom field.
    string fieldId = 3;
    // The name of the custom field.
    string name = 4;
    // When set to **true**, the signer is required to fill out this tab
    string required = 5;
    // A boolean indicating if the value should be displayed.
    string show = 6;
    // The value of the custom field.
    string value = 7;
}

message Title {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // When set to **true**, the information in the tab is italic.
    string italic = 20;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 21;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 22;
    mergeField mergeField = 23;
    string name = 24;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 25;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 26;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 27;
    // When set to **true**, the signer is required to fill out this tab
    string required = 28;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 29;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 30;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 31;
    string tabOrder = 32;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 33;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 34;
    // When set to **true**, the information in the tab is underlined.
    string underline = 35;
    // Specifies the value of the tab.
    string value = 36;
    // Width of the tab in pixels.
    int32 width = 37;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 38;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 39;
}

message UsageHistory {
    // The date and time the user last sent an envelope.
    string lastSentDateTime = 1;
    // The date and time the user last signed an envelope.
    string lastSignedDateTime = 2;
    // The number of envelopes the user has sent.
    int32 sentCount = 3;
    // The number of envelopes the user has signed.
    int32 signedCount = 4;
}

message UserAccountManagementGranularInformation {
    string canManageAdmins = 1;
    settingsMetadata canManageAdminsMetadata = 2;
    string canManageGroups = 3;
    settingsMetadata canManageGroupsMetadata = 4;
    string canManageSharing = 5;
    settingsMetadata canManageSharingMetadata = 6;
    string canManageUsers = 7;
    settingsMetadata canManageUsersMetadata = 8;
}

message UserInfo {
    string activationAccessCode = 1;
    string email = 2;
    errorDetails errorDetails = 3;
    string loginStatus = 4;
    string sendActivationEmail = 5;
    string uri = 6;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 7;
    string userName = 8;
    string userStatus = 9;
    string userType = 10;
}

message UserInfoList {
    repeated userInfo users = 1;
}

message UserInformationList {
    // The last position in the result set.
    string endPosition = 1;
    // The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.
    string nextUri = 2;
    // The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.
    string previousUri = 3;
    // The number of results returned in this response.
    string resultSetSize = 4;
    // Starting position of the current result set.
    string startPosition = 5;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 6;
    repeated Users users = 7;
}

message UserPasswordInformation {
    // The user's current password to be changed.
    string currentPassword = 1;
    // The user's email address for the associated account.
    string email = 2;
    // A complex element that has up to four Question/Answer pairs for forgotten password information.
    forgottenPasswordInformation forgottenPasswordInfo = 3;
    // The user's new password.
    string newPassword = 4;
}

message UserPasswordRules {
    AccountPasswordRules passwordRules = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
}

message UserSettingsInformation {
    userAccountManagementGranularInformation accountManagementGranular = 1;
    //  
    // An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign. 
    // 
    // The user inherits the default account sender email notification settings when the user is created. The email notifications are:
    // 
    // * envelopeComplete
    // * changedSigner 
    // * senderEnvelopeDeclined 
    // * withdrawnConsent 
    // * recipientViewed 
    // * deliveryFailed 
    senderEmailNotifications senderEmailNotifications = 2;
    // An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
    signerEmailNotifications signerEmailNotifications = 3;
    repeated nameValue userSettings = 4;
}

message UserSharedItem {
    errorDetails errorDetails = 1;
    // When set to **true**, this custom tab is shared.
    string shared = 2;
    userInfo user = 3;
}

message UserSignatureDefinition {
    string signatureFont = 1;
    // Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.
    string signatureId = 2;
    string signatureInitials = 3;
    // Specifies the user signature name.
    string signatureName = 4;
}

message UserSignaturesInformation {
    repeated UserSignatures userSignatures = 1;
}

message UserSocialIdResult {
    // Contains properties that map a DocuSign user to a social account (Facebook, Yahoo, etc.)
    repeated UserSocialAccountLogins socialAccountInformation = 1;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 2;
}

message View {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    string buttonText = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 14;
    errorDetails errorDetails = 15;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 16;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 17;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 18;
    // Height of the tab in pixels.
    int32 height = 19;
    // When set to **true**, the information in the tab is italic.
    string italic = 20;
    mergeField mergeField = 21;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 22;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 23;
    // When set to **true**, the signer is required to fill out this tab
    string required = 24;
    string requiredRead = 25;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 26;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 27;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 28;
    string tabOrder = 29;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 30;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 31;
    // When set to **true**, the information in the tab is underlined.
    string underline = 32;
    // Width of the tab in pixels.
    int32 width = 33;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 34;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 35;
}

message ViewLinkRequest {
    string email = 1;
    string returnUrl = 2;
}

message WorkspaceFolderContents {
    // The last position in the result set.
    string endPosition = 1;
    // The query value can be a folder name or folder ID. The response will only return templates in the specified folder.
    WorkspaceItems folder = 2;
    repeated WorkspaceItems items = 3;
    repeated WorkspaceItems parentFolders = 4;
    // The number of results returned in this response.
    string resultSetSize = 5;
    // Starting position of the current result set.
    string startPosition = 6;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 7;
    // The id of the workspace, always populated.
    string workspaceId = 8;
}

message WorkspaceItemList {
    repeated WorkspaceItems items = 1;
}

message WorkspaceList {
    // The last position in the result set.
    string endPosition = 1;
    // The number of results returned in this response.
    string resultSetSize = 2;
    // Starting position of the current result set.
    string startPosition = 3;
    // The total number of items in the search's result set. It will always be greater than or equal to the value of the `resultSetSize` field.
    string totalSetSize = 4;
    // A list of workspaces.
    repeated Workspaces workspaces = 5;
}

message WorkspaceUser {
    // The account ID associated with the envelope.
    string accountId = 1;
    // The name of the account that the workspace user belongs to.
    string accountName = 2;
    string activeSince = 3;
    // The UTC DateTime when the workspace user was created.
    string created = 4;
    string createdById = 5;
    string email = 6;
    errorDetails errorDetails = 7;
    // Utc date and time the comment was last updated (can only be done by creator.)
    string lastModified = 8;
    string lastModifiedById = 9;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 10;
    // Type of the user. Valid values: type_owner, type_participant.
    string type = 11;
    // The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
    string userId = 12;
    string userName = 13;
    // Specifies the workspace ID GUID.
    string workspaceId = 14;
    // The relative URI that may be used to access a workspace user.
    string workspaceUserBaseUrl = 15;
    string workspaceUserId = 16;
}

message WorkspaceUserAuthorization {
    string canDelete = 1;
    string canMove = 2;
    string canTransact = 3;
    string canView = 4;
    // The UTC DateTime when the workspace user authorization was created.
    string created = 5;
    string createdById = 6;
    errorDetails errorDetails = 7;
    string modified = 8;
    string modifiedById = 9;
    string workspaceUserId = 10;
    workspaceUser workspaceUserInformation = 11;
}

message Zip {
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
    // -->
    string anchorCaseSensitive = 1;
    // Reserved for DocuSign.
    // <!--
    // Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
    // -->
    string anchorHorizontalAlignment = 2;
    // When set to **true**, this tab is ignored if anchorString is not found in the document.
    string anchorIgnoreIfNotPresent = 3;
    // Reserved for DocuSign.
    // <!--
    // When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
    // -->
    string anchorMatchWholeWord = 4;
    // Anchor text information for a radio button.
    string anchorString = 5;
    // Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
    string anchorUnits = 6;
    // Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorXOffset = 7;
    // Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
    string anchorYOffset = 8;
    // When set to **true**, the information in the tab is bold.
    string bold = 9;
    // When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    // 
    // When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.
    // 
    // This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
    string concealValueOnDocument = 10;
    // For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.
    string conditionalParentLabel = 11;
    // For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    // 
    // If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
    string conditionalParentValue = 12;
    // The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
    string customTabId = 13;
    // When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
    string disableAutoSize = 14;
    // Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    string documentId = 15;
    errorDetails errorDetails = 16;
    // The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
    string font = 17;
    // The font color used for the information in the tab.
    // 
    // Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
    string fontColor = 18;
    // The font size used for the information in the tab.
    // 
    // Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
    string fontSize = 19;
    // When set to **true**, the information in the tab is italic.
    string italic = 20;
    // When set to **true**, the signer cannot change the data of the custom tab.
    string locked = 21;
    // An optional value that describes the maximum length of the property when the property is a string.
    int32 maxLength = 22;
    mergeField mergeField = 23;
    string name = 24;
    // The initial value of the tab when it was sent to the recipient.
    string originalValue = 25;
    // Specifies the page number on which the tab is located.
    // Must be 1 for [supplemental documents][supdocs].
    // 
    // [supdocs]: /esign/guide/appendix/glossary.html#supplemental-documents
    string pageNumber = 26;
    // Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    string recipientId = 27;
    // When set to **true** and shared is true, information must be entered in this field to complete the envelope.
    string requireAll = 28;
    // Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
    string requireInitialOnSharedChange = 29;
    // When set to **true**, the signer is required to fill out this tab
    string required = 30;
    // When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 
    // 
    // This value tab can only be changed by modifying (PUT) the template. 
    // 
    // Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
    string senderRequired = 31;
    // When set to **true**, this custom tab is shared.
    string shared = 32;
    // Indicates the envelope status. Valid values are:
    // 
    // * sent - The envelope is sent to the recipients. 
    // * created - The envelope is saved as a draft and can be modified and sent later.
    string status = 33;
    // The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call]. 
    // 
    //  
    string tabId = 34;
    // The label string associated with the tab.
    // The string may be the empty string.
    // If no value is provided, the tab type is used as the value.
    // 
    // Maximum of 500 characters.
    string tabLabel = 35;
    string tabOrder = 36;
    // When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
    string templateLocked = 37;
    // When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    string templateRequired = 38;
    // When set to **true**, the information in the tab is underlined.
    string underline = 39;
    string useDash4 = 40;
    // The message displayed if the custom tab fails input validation (either custom of embedded).
    string validationMessage = 41;
    // A regular expressionn used to validate input for the tab.
    string validationPattern = 42;
    // Specifies the value of the tab.
    string value = 43;
    // Width of the tab in pixels.
    int32 width = 44;
    // This indicates the horizontal offset of the object on the page.
    // DocuSign uses 72 DPI when determining position.
    // Required. May be zero.
    string xPosition = 45;
    // This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
    string yPosition = 46;
}

service DocuSignService {
    // Retrieves the available REST API versions.
    // 
    // Retrieves the available REST API versions.
    // 
    // DocuSign Production system: https://www.docusign.net/restapi/service_information
    // DocuSign Demo system: https://demo.docusign.net/restapi/service_information
    // 
    // You do not need an integrator key to view the REST API versions and resources.
    rpc GetService_information(google.protobuf.Empty) returns (Services) {
      option (google.api.http) = {
        get: "/restapi/service_information"
      };
    }
    // Lists resources for REST version specified
    // 
    // Retrieves the base resources available for the DocuSign REST APIs.
    // 
    // You do not need an integrator key to view the REST API versions and resources.
    // 
    // Example: https://demo.docusign.net/restapi/v2 lists all of the base resources available in version 2 of the REST API on the DocuSign Demo system.
    // 
    // To view descriptions and samples of the service operations for all versions, remove the version number and add /help to the URL.
    // 
    // Example: https://demo.docusign.net/restapi/help lists the REST API operations on the DocuSign Demo system with XML and JSON request and response samples.
    rpc GetV2(google.protobuf.Empty) returns (Resources) {
      option (google.api.http) = {
        get: "/restapi/v2"
      };
    }
    // Creates new accounts.
    // 
    // Creates new DocuSign accounts.
    // You can use this method to create
    // a single account
    // or up to 100 accounts at a time.
    // 
    // When creating a single account,
    // the body of the request is a
    // [`newAccountDefinition`][newAccountDefinition]
    // object.
    // 
    // If the request succeeds.
    // it returns a
    // 201 (Created) code.
    // The response returns the new account ID, password and the default user
    // information for each newly created account.
    // 
    // 
    // When creating multiple accounts,
    // the body of the request is a
    // `newAccountRequests`
    // object,
    // which contains one or more 
    // [`newAccountDefinition`][newAccountDefinition]
    // objects.
    // You can create up to 100 new accounts
    // at a time this way.
    // 
    // The body for a multi-account
    // creation request
    // looks like this in JSON:
    // 
    // ```
    // {
    //   "newAccountRequests": [
    //     {
    //       "accountName": "accountone",
    //       . . .
    //     },
    //     {
    //       "accountName": "accounttwo",
    //       . . .
    //     }
    //   ]
    // }
    // ```
    // 
    // A multi-account request
    // looks like this in XML:
    // 
    // ```
    // <newAccountsDefinition xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.docusign.com/restapi">
    //   <newAccountRequests>
    //     <newAccountDefinition>
    //       . . .
    //     </newAccountDefinition>
    //     <newAccountDefinition>
    //       . . .
    //     </newAccountDefinition>
    //   </newAccountRequests>
    // </newAccountsDefinition>
    // ```
    // 
    // A multi-account creation request
    // may succeed (report a 201 code)
    // even if some accounts could not be created.
    // In this case, the `errorDetails` property
    // in the response contains specific information
    // about the failure.
    // 
    // 
    // ### Account Settings
    // 
    // The `accountSettings` property
    // is a [name/value][nameValue]
    // list that can contain the following settings:
    // 
    // | Name                                               | Type    | Authorization Required                                      | Description|  
    // | :------------------------------------------------- | :------ | :---------------------------------------------------------- ||  
    // | adoptSigConfig                                     | Boolean | Admin                                                       | When **true**, the Signature Adoption Configuration page is available to account administrators|  
    // | allowAccessCodeFormat                              | Boolean | Admin                                                       | When **true**, the Access Code Format page is available to account administrators.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |  
    // | allowAccountManagementGranular                     | Boolean | Admin                                                       | When **true**, the Delegated Administration functionality is available to account|  
    // | allowBulkSend                                      | Boolean | Admin                                                       | When **true**, the account can set if the bulk send feature can be used|  
    // | allowCDWithdraw                                    | Boolean | Admin                                                       | When **true**, signers can withdraw their consent to use electronic signatures|  
    // | allowConnectSendFinishLater                        | Boolean | Reserved                                                    | Reserved for DocuSign.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |  
    // | allowDataDownload                                  | Boolean | Admin                                                       | When **true**, the account can download envelope data|  
    // | allowEnvelopeCorrect                               | Boolean | Admin                                                       | When **true**, the account allows in process envelopes to be corrected|  
    // | allowEnvelopePublishReporting                      | Boolean | Admin                                                       | When **true**, the account can access the Envelope Publish section in Classic DocuSign Experience Account Administration|  
    // | allowExpressSignerCertificate                      | Boolean | Admin                                                       | When **true**, senders are allowed to use the DocuSign Express digital signatures|  
    // | allowExternalSignaturePad                          | Boolean | Admin                                                       | When **true**, an external signature pad can be used for signing. The signature pad type is set by the externalSignaturePadType property|  
    // | allowInPerson                                      | Boolean | SysAdmin                                                    | When **true**, the account allows In Person Signing|  
    // | allowMarkup                                        | Boolean | Admin                                                       | When **true**, the document markup feature is enabled for the account|  
    // | allowMemberTimezone                                | Boolean | Admin                                                       | When **true**, account users can set their own time zones|  
    // | allowMergeFields                                   | Boolean | Admin                                                       | When **true**, the account can use merge fields in conjunction with DocuSign for Salesforce.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |  
    // | allowMultipleSignerAttachments                     | Boolean | Admin                                                       | When **true**, multiple signer attachments are allowed for an envelope|  
    // | allowOfflineSigning                                | Boolean | Admin                                                       | When **true**, the account can use Offline Signing and envelopes signed using offline signing on mobile devices are synchronized with this account. This option and the inSessionEnabled option must both be enabled (**true**) for a caller to use offline signing|  
    // | allowOpenTrustSignerCertificate                    | Boolean | Admin                                                       | When **true**, senders are allowed to use the OpenTrust digital signatures|  
    // | allowPaymentProcessing                             | Boolean | Admin                                                       | When **true**, the account can access the Payment Processing set up page|  
    // | allowPersonalSignerCertificate                     | Boolean | Admin                                                       | When **true**, the account can specify that signers must use personal signer certificates during signing|  
    // | allowPrivateSigningGroups                          | Boolean | SysAdmin Read Only                                          | Reserved for DocuSign. This currently returns false in a response. This setting is only shown in the response when listing account settings|  
    // | allowReminders                                     | Boolean | Admin                                                       | When **true**, the reminder and expiration functionality is available when sending envelops|  
    // | allowSafeBioPharmaSignerCertificate                | Boolean | Admin                                                       | When **true**, senders are allowed to use the SAFE BioPharma digital signatures|  
    // | allowSharedTabs                                    | Boolean | Admin                                                       | When **true**, the account allows users to share custom tabs (fields). <br>   This setting is only shown when getting account settings. It cannot be modified|  
    // | allowSignDocumentFromHomePage                      | Boolean | Admin                                                       | When **true**, the Sign a Document Now button is available on the Home tab|  
    // | allowSignatureStamps                               | Boolean | Reserved                                                    | Reserved for DocuSign|  
    // | allowSignerReassign                                | Boolean | Admin                                                       | When **true**, the account allows signers to reassign an envelope.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |  
    // | allowSignerReassignOverride                        | Boolean | Admin                                                       | When **true**, the sender has the option override the default account setting for reassigning recipients|  
    // | allowSigningGroups                                 | Boolean | SysAdmin Read Only                                          | When **true**, the account can use signing groups. This setting is only shown in the response when listing account settings|  
    // | allowTabOrder                                      | Boolean | Admin                                                       | When **true**, the Tab Order field is available for use when creating tabs|  
    // | allowWorkspaceComments                             | Boolean | Reserved                                                    | Reserved for DocuSign|  
    // | allowWorkspaceCreate                               | Boolean | Admin                                                       | When **true**, account users can create DocuSign Rooms|  
    // | attachCompletedEnvelope                            | Boolean | SysAdmin                                                    | When **true**, envelope documents are included as a PDF file attachment for signing completed emails|  
    // | authenticationCheck                                | String  | Admin                                                       | Sets when authentication checks are applied for recipient envelope access. This setting only applies to the following ID checks: <ul> <li>Phone Authentication</li> <li>SMS Authentication</li> <li>Knowledge-Based ID</li> </ul> This setting takes one of the following options: <ul> <li><p><code>initial_access</code>: The authentication check always applies the first time a recipient accesses the documents. Recipients are not asked to authenticate again when they access the documents from the same browser on the same device. If the recipient attempts to access the documents from a different browser or a different device, the recipient must pass authentication again. Once authenticated, that recipient is not challenged again on the new device or browser. The ability for a recipient to skip authentication for documents is limited to documents sent from the same sending account.</p></li> <li><p><code>each_access</code>: Authentication checks apply every time a recipient attempts to access the envelope. However, you can configure the Authentication Expiration setting to allow recipients to skip authentication when they have recently passed authentication by setting a variable timeframe.</p></li> </ul> |  
    // | autoNavRule                                        | String  | Admin                                                       | The auto-navigation rule for the account. Enumeration values are: <ul> <li><code>off</li></code> <li><code>required_fields</li></code> <li><code>required_and_blank_fields</li></code> <li><code>all_fields</li></code> <li><code>page_then_required_fields</li></code> <li><code>page_then_required_and_blank_fields</li></code> <li><code>page_then_all_fields</li></code> </ul|  
    // | bulkSend                                           | Boolean | Admin                                                       | When **true**, the account allows bulk sending of envelopes|  
    // | canSelfBrandSend                                   | Boolean | SysAdmin                                                    | When **true**, account administrators can self-brand their sending console through the DocuSign Console|  
    // | canSelfBrandSign                                   | Boolean | SysAdmin                                                    | When **true**, account administrators can self-brand their signing console through the DocuSign Console|  
    // | conditionalFieldsEnabled                           | Boolean | Admin                                                       | When **true**, conditional fields can be used by the account|  
    // | consumerDisclosureFrequency                        | enum    | Admin                                                       | Possible values are: <ul> <li> <code>once</code>: Per account, the supplemental document is displayed once only per userId. </li> <li> <code>always</code>: Per envelope, the supplemental document is displayed once only per userId. </li> <li> <code>each_access</code>: - Per envelope, the supplemental document is displayed once only per recipientId. </li> </ul|  
    // | dataFieldRegexEnabled                              | Boolean | Admin                                                       | When **true**, the Regex field is available for tabs with that property|  
    // | dataFieldSizeEnabled                               | Boolean | Admin                                                       | When **true**, the maximum number of characters field is available for tabs with that property|  
    // | dataPopulationScope                                | String  | Admin                                                       | Specifies how data is shared for tabs with the same tabLabel. There are two possible values: <ul> <li> <code>document</code>: Tabs in a document with the same label populate with the same data. </li> <li> <code>envelope</code>: Tabs in all documents in the envelope with the same label populate with the same data. </li> </ul> This setting applies to the following tab types: <ul> <li> Check box </li> <li> Company </li> <li> Data Field </li> <li> Dropdown List </li> <li> Full Name </li> <li> Formula </li> <li> Note </li> <li> Title </li> </ul> Changing this setting affects envelopes that have been sent but not completed|  
    // | disableMobilePushNotifications                     | Boolean | Admin                                                       | When **true**, mobile push notifications are disabled on the account|  
    // | disableMobileSending                               | Boolean | Admin                                                       | When **true**, sending from mobile applications is disabled|  
    // | disableMultipleSessions                            | Boolean | Admin                                                       | When **true**, account users cannot be logged into multiple sessions at once|  
    // | disableUploadSignature                             | Boolean | Admin                                                       | When **true**, signers cannot use the upload signature/initials image option when signing a document|  
    // | documentConversionRestrictions                     | String  | Admin                                                       | Sets the account document upload restriction for non-account administrators. There are three possible values: <ul> <li> <code>no_restrictions</code> : there are no restrictions on the type of documents that can be uploaded. </li> <li> <code>allow_pdf_only</code> : only: non-administrators can only upload PDF files. </li> <li> <code>no_upload</code> : Non-administrators cannot upload files. </li> </ul|  
    // | enableAutoNav                                      | Boolean | SysAdmin  or EnableAutoNavByDSAdmin is set                  | When **true**, the auto-navigation is enabled for the account|  
    // | enableCalculatedFields                             | Boolean | Admin & AllowExpression is set                              | When **true**, this account can use the Calculated Fields feature|  
    // | enableDSPro                                        | Boolean | SysAdmin                                                    | When **true**, this account can send and manage envelopes from the DocuSign Desktop Client|  
    // | enableEnvelopeStampingByAccountAdmin               | Boolean | SysAdmin or account has EnableEnvelopeStampingByDSAdmin set | When **true**, senders for this account can choose to have the envelope ID stamped in the document margins|  
    // | enablePaymentProcessing                            | Boolean | Admin & AllowPaymentProcessing is set.                      | When **true**, Payment Processing is enabled for the account|  
    // | enablePowerForm                                    | Boolean | SysAdmin                                                    | When **true**, PowerForm access is enabled for the account|  
    // | enablePowerFormDirect                              | Boolean | Admin                                                       | When **true**, direct PowerForms are enabled for the account.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |  
    // | enableRecipientDomainValidation                    | Boolean | Admin                                                       | When **true**, validation on recipient email domains for DocuSign Access feature is enabled.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |  
    // | enableRequireSignOnPaper                           | Boolean | Admin                                                       | When **true**, the account can use the requireSignOnPaper option|  
    // | enableReservedDomain                               | Boolean | SysAdmin                                                    | When **true**, an account administrator can reserve web domain and users|  
    // | enableSMSAuthentication                            | Boolean | Admin                                                       | When **true**, the account can use SMS authentication|  
    // | enableSendToAgent                                  | Boolean | SysAdmin                                                    | When **true**, this account can use the Agent Recipient Type|  
    // | enableSendToIntermediary                           | Boolean | Admin & AllowSendToIntermediary is set                      | When **true**, this account can use the Intermediary Recipient Type|  
    // | enableSendToManage                                 | Boolean | Admin                                                       | When **true**, this account can use the Editor Recipient Type.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |  
    // | enableSequentialSigningAPI                         | Boolean | SysAdmin                                                    | When **true**, the account can define the routing order of recipients for envelopes sent using the DocuSign|  
    // | enableSequentialSigningUI                          | Boolean | SysAdmin                                                    | When **true**, the account can define the routing order of recipients for envelopes sent using the DocuSign console.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |  
    // | enableSignOnPaper                                  | Boolean | Admin                                                       | When **true**, a user can allow signers to use the sign on paper option|  
    // | enableSignOnPaperOverride                          | Boolean | Admin                                                       | When **true**, a user can override the default account setting for the sign on paper option|  
    // | enableSignerAttachments                            | Boolean | Admin                                                       | When **true**, a user can request attachments from a signer|  
    // | enableTransactionPoint                             | Boolean | SysAdmin                                                    | When **true**, Transaction Point is enabled for this account|  
    // | enableVaulting                                     | Boolean | SysAdmin                                                    | When **true**, this account can use electronic vaulting for documents|  
    // | enableWorkspaces                                   | Boolean | Admin                                                       | When **true**, DocuSign Rooms is enabled for the account|  
    // | envelopeIntegrationAllowed                         | String  | SysAdmin                                                    | Shows the envelope integration rule for the account. <br> Enumeration values are: NotAllowed, Full, IntegrationSendOnly|  
    // | envelopeIntegrationEnabled                         | Boolean | Admin & EnvelopeIntegrationAllowed is set                   | When **true**, envelope integration is enabled for the account|  
    // | envelopeStamplingDefaultValue                      | Boolean | (GET only)                                                  | When **true**, envelopes sent by this account automatically have the envelope ID stamped in the margins, unless the sender selects not to have them stamped|  
    // | externalSignaturePadType                           | String  | Admin                                                       | Sets the type of signature pad that can be used. Possible values are: <ul> <li> <code>none</code> </li> <li> <code>topaz</code> </li> <li> <code>e_padv9</code> </li> <li> <code>e_pad_integrisign</code> </li> </ul|  
    // | faxOutEnabled                                      | Boolean | Admin                                                       | When **true**, the account can use the fax out feature|  
    // | idCheckExpire                                      | String  | Admin                                                       | Indicates when a user's authentication expires. Possible values are: <ul> <li> <code>always</code> </li> <li> <code>never</code> </li> <li> <code>variable</code>: Use the value in <code>idCheckExpireDays</code> </li> </ul|  
    // | idCheckExpireDays                                  | Integer | Admin                                                       | The number of days before a user's authentication expires.  Valid only if the `IDCheckExpire` value is Variable|  
    // | idCheckRequired                                    | String  | Admin                                                       | Indicates if authentication is required by envelope signers. Possible values are: <ul> <li> <code>always</code> </li> <li> <code>never</code> </li> <li> <code>optional</code>: Authentication is determined by the sender. </li> </ul|  
    // | inPersonIDCheckQuestion                            | String  | Admin                                                       | The default question used by the In Person signing host for an In Person signing session|  
    // | inSessionEnabled                                   | Boolean | Admin                                                       | When **true**, the account can use In Session (embedded) and offline signing. This option and the allowOfflineSigning option must both be enabled (**true**) for a caller to use offline signing|  
    // | inSessionSuppressEmails                            | Boolean | Admin                                                       | When **true**, emails are not sent to the embedded recipients on an envelope for the account|  
    // | maximumSigningGroups                               | String  | SysAdmin Read Only                                          | The maximum number of signing groups an account can have. The default value for this is 50. This setting is only shown in the response when listing account settings|  
    // | maximumUsersPerSigningGroup                        | String  | SysAdmin Read Only                                          | The maximum number of members in a signing group. The default value for this is 50. This setting is only shown in the response when listing account settings|  
    // | mobileSessionTimeout                               | String  | Admin                                                       | Sets the amount of idle activity time, in minutes, before a mobile user is automatically logged off of the system. If the setting is 0, then DocuSign mobile application users are never automatically logged off the system. The minimum setting is 1 minute and the maximum setting is 120 minutes. <br> This setting only applies to the DocuSign for iOS v2.8.2 or later mobile app|  
    // | phoneAuthRecipientMayProvidePhoneNumber            | Boolean | Admin                                                       | When **true**, senders can select to allow the recipient to provide a phone number for the Phone Authentication process|  
    // | pkiSignDownloadedPDFDocs                           | String  | Admin                                                       | The policy for adding a digital certificate to downloaded, printed and emailed documents. Possible values are: <ul> <li> <code>no_sign</code> </li> <li> <code>no_sign_allow_user_override</code> </li> <li> <code>yes_sign</code> </li> </ul|  
    // | recipientsCanSignOffline                           | Boolean | Admin                                                       | When **true**, envelopes signed using offline signing on mobile devices are synchronized with this account|  
    // | requireDeclineReason                               | Boolean | Admin                                                       | When **true**, recipients that decline to sign an envelope must provide a reason|  
    // | requireSignerCertificateType                       | String  | Admin                                                       | Sets which Digital Signature certificate is required when sending envelopes. There are three possible values: <ul> <li> <code>none</code>: a Digital Signature certificate is not required. </li> <li> <code>docusign_express</code>: signers must use a DocuSign Express certificate. </li> <li> <code>docusign_personal</code>: signers must use a DocuSign personal certificate. </li> <li> <code>open_trust</code>: signers must use an OpenTrust certificate. </li> </ul|  
    // | rsaVeridAccountName                                | String  | Admin                                                       | The RSA account name.<br> Modifying this value might inadvertently disrupt your ID Check capability. Ensure you have the correct value before changing this|  
    // | rsaVeridPassword                                   | String  | Admin                                                       | The password used with the RSA account.<br>Modifying this value might inadvertently disrupt your ID Check capability. Ensure you have the correct value before changing this|  
    // | rsaVeridRuleset                                    | String  | Admin                                                       | The RSA rule set used with the account. <br>Modifying this value might inadvertently disrupt your ID Check capability. Ensure you have the correct value before changing this|  
    // | rsaVeridUserId                                     | String  | Admin                                                       | The user ID for the RSA account. <br>Modifying this value might inadvertently disrupt your ID Check capability. Ensure you have the correct value before changing this|  
    // | savingCustomTabsEnabled                            | Boolean | Admin                                                       | When **true**, account users can save custom tabs|  
    // | selfSignedRecipientEmailDocument                   | String  | Admin                                                       | Sets how self-signed documents are presented to the email recipients. Possible values are: <ul> <li><code>include_pdf</code>: A PDF of the completed document is attached to the email</li> <li><code>include_link</code>: A secure link to the self-signed documents is included in the email.</li> </ul|  
    // | selfSignedRecipientEmailDocumentRights             | Boolean | Admin                                                       | When **true**, account administrators can set the selfSignedRecipientEmailDocument option|  
    // | selfSignedRecipientEmailDocumentUserOverride       | Boolean | Admin                                                       | When **true** the selfSignedRecipientEmailDocument userSetting can be set for an individual user.  The userSetting will override the account setting|  
    // | selfSignedRecipientEmailDocumentUserOverrideRights | Boolean | Admin                                                       | When **true**, account administrators can set the selfSignedRecipientEmailDocumentOverride option|  
    // | sendToCertifiedDeliveryEnabled                     | Boolean | Admin                                                       | When **true**, the Certified Deliveries Recipient type can be used by the account.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |  
    // | senderMustAuthenticateSigning                      | Boolean | Admin                                                       | When **true**, a sender that is also a recipient of an envelope must follow the authentication requirements for the envelope|  
    // | sessionTimeout                                     | Integer | Admin                                                       | The amount of idle activity time, in minutes, before a user is automatically logged out of the system. The minimum setting is 20 minutes and the maximum setting is 120 minutes|  
    // | setRecipEmailLang                                  | Boolean | Admin                                                       | When **true**, senders can set the email languages for each recipient|  
    // | setRecipSignLang                                   | Boolean | Admin                                                       | When **true**, senders can set the signing language used for each recipient|  
    // | sharedCustomTabsEnabled                            | Boolean | Admin                                                       | When **true**, saved custom tabs can be shared with account users|  
    // | signDateFormat                                     | String  | Admin                                                       | The date/time format applied to Date Signed fields for the account|  
    // | signTimeShowAmPm                                   | Boolean | Admin                                                       | When **true**, AM or PM is shown as part of the time for signDateFormat|  
    // | signerAttachCertificateToEnvelopePDF               | Boolean | AccountAdmin & account is selected in AccountSigningSettings| When **true**, the Certificate of Completion is included in the envelope documents PDF when it is downloaded|  
    // | signerAttachConcat                                 | Boolean | Admin                                                       | When **true**, signer attachments are added to the parent document that the attachment tab is located on, instead of the default behavior that creates a new document in the envelope for every signer attachment|  
    // | signerCanCreateAccount                             | Boolean | AccountAdmin & account is selected in AccountSigningSettings| When **true**, the signer without a DocuSign account can create a DocuSign account after signing|  
    // | signerCanSignOnMobile                              | Boolean | AccountAdmin & account is selected in AccountSigningSettings| When **true**, signers can use the DocuSign mobile signing user interface|  
    // | signerInSessionUseEnvelopeCompleteEmail            | Boolean | Admin                                                       | When **true**, an envelope complete email is sent to an In Session (embedded) or offline signer after DocuSign processes the envelope|  
    // | signerLoginRequirements                            | String  | Admin                                                       | Sets the Login requirements for the signer. There are four options: <ul> <li> <code>login_not_required</code>: The signer is not required to log on to the system. </li> <li> <code>login_required_if_account_holder</code>: If the signer has a DocuSign account, they must log on to sign the document. </li> <li> <code>login_required_per_session</code>: The sender cannot send an envelope to anyone who does not have a DocuSign account. </li> <li> <code>login_required_per_envelope</code>: The sender cannot send an envelope to anyone who does not have a DocuSign account and the signer must log on the system for each envelope they will sign. </li> </ul> If you use Direct PowerForms or captive/embedded signers, the "Account required" settings are bypassed for those signers. If your workflow requires that the signer have an account, you should not use those methods.                                                                                                                                                                                                                                                                                                                                                           |  
    // | signerMustHaveAccount                              | Boolean | AccountAdmin & account is selected in AccountSigningSettings| When **true**, senders can only send an envelope to a recipient that has a DocuSign account|  
    // | signerMustLoginToSign                              | Boolean | AccountAdmin & account is selected in AccountSigningSettings| When **true**, an envelope signer must log in to the DocuSign console to sign an envelope|  
    // | signerShowSecureFieldInitialValues                 | Boolean | AccountAdmin & account is selected in AccountSigningSettings| When **true**, the initial value of all SecureFields is written to the document when sent|  
    // | tabDataLabelEnabled                                | Boolean | Admin                                                       | When **true**, senders can change the default tabLabel for tabs|  
    // | tabLockingEnabled                                  | Boolean | Admin                                                       | When **true**, the locked option is available for tabs with that property|  
    // | tabTextFormattingEnabled                           | Boolean | Admin                                                       | When **true**, the formatting options (font type, font size, font color, bold, italic, and underline) are available for tabs with those properties|  
    // | universalSignatureOptIn                            | Boolean | Reserved                                                    | Reserved for DocuSign|  
    // | universalSignatureOptOut                           | Boolean | Reserved                                                    | Reserved for DocuSign|  
    // | useAccountLevelEmail                               | Boolean | AccountAdmin & account is selected in AccountSigningSettings| When **true**, the content of notification emails is determined at the account level|  
    // | useConsumerDisclosure                              | Boolean | Admin                                                       | When **true**, the account  can use supplemental documents|  
    // | usesAPI                                            | Boolean | SysAdmin                                                    | When **true**, the account can use the DocuSign API.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |  
    // 
    // 
    // 
    // 
    // 
    // [newAccountDefinition]: #/definitions/newAccountDefinition
    // [nameValue]: #/definitions/nameValue
    rpc PostV2Accounts(PostV2AccountsRequest) returns (NewAccountSummary) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts"
        body: "newAccountDefinition"
      };
    }
    // Retrieves the account provisioning information for the account.
    // 
    // Retrieves the account provisioning information for the account.
    rpc GetV2AccountsProvisioning(google.protobuf.Empty) returns (ProvisioningInformation) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/provisioning"
      };
    }
    // Retrieves the account information for the specified account.
    // 
    // Retrieves the account information for the specified account.
    // 
    // **Response**
    // The `canUpgrade` property contains is a Boolean that indicates whether the account can be upgraded through the API.
    rpc GetV2AccountsAccountId(GetV2AccountsAccountIdRequest) returns (Accounts) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}"
      };
    }
    // Deletes the specified account.
    // 
    // This closes the specified account. You must be an account admin to close your account. Once closed, an account must be reopened by DocuSign.
    rpc DeleteV2AccountsAccountId(DeleteV2AccountsAccountIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}"
      };
    }
    // Gets list of recurring and usage charges for the account.
    // 
    // Retrieves the list of recurring and usage charges for the account. This can be used to determine the charge structure and usage of charge plan items. 
    // 
    // Privileges required: account administrator
    rpc GetV2AccountsAccountIdBilling_charges(GetV2AccountsAccountIdBilling_chargesRequest) returns (BillingChargeResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/billing_charges"
      };
    }
    // Get a List of Billing Invoices
    // 
    // Retrieves a list of invoices for the account. If the from date or to date queries are not specified, the response returns invoices for the last 365 days.
    // 
    // Privileges required: account administrator
    rpc GetV2AccountsAccountIdBilling_invoices(GetV2AccountsAccountIdBilling_invoicesRequest) returns (BillingInvoicesResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/billing_invoices"
      };
    }
    // Retrieves a billing invoice.
    // 
    // Retrieves the specified invoice. 
    // 
    // ###### Note: If the `pdfAvailable` property in the response is set to *true*, you can download a PDF version of the invoice. To download the PDF, make the call again and change the value of the `Accept` property in the header to `Accept: application/pdf`.
    // 
    // Privileges required: account administrator
    // 
    // The response returns a list of charges and information about the charges. Quantities are usually shown as 'unlimited' or an integer. Amounts are shown in the currency set for the account.
    // 
    // **Response**
    // The following table provides a description of the different `chargeName` property values. The information will grow as more chargeable items are added to the system.
    // 
    // | chargeName | Description |
    // | --- | --- |
    // | id_check | ID Check Charge |
    // | in_person_signing | In Person Signing charge |
    // | envelopes Included | Sent Envelopes for the account |
    // | age_verify | Age verification check |
    // | ofac | OFAC Check |
    // | id_confirm | ID confirmation check |
    // | student_authentication | STAN PIN authentication check |
    // | wet_sign_fax | Pages for returning signed documents by fax |
    // | attachment_fax | Pages for returning attachments by fax |
    // | phone_authentication | Phone authentication charge |
    // | powerforms | PowerForm envelopes sent |
    // | signer_payments | Payment processing charge |
    // | outbound_fax | Send by fax charge |
    // | bulk_recipient_envelopes | Bulk Recipient Envelopes sent |
    // | sms_authentications | SMS authentication charge |
    // | saml_authentications | SAML authentication charge |
    // | express_signer_certificate | DocuSign Express Certificate charge |
    // | personal_signer_certificate | Personal Signer Certificate charge |
    // | safe_certificate | SAFE BioPharma Signer Certificate charge |
    // | seats | Included active seats charge |
    // | open_trust_certificate | OpenTrust Signer Certificate charge |
    rpc GetV2AccountsAccountIdBilling_invoicesInvoiceId(GetV2AccountsAccountIdBilling_invoicesInvoiceIdRequest) returns (Invoices) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/billing_invoices/{invoiceId}"
      };
    }
    // Get a list of past due invoices.
    // 
    // Returns a list past due invoices for the account and notes if payment can be made through the REST API. 
    // 
    // Privileges Required: account administrator
    rpc GetV2AccountsAccountIdBilling_invoices_past_due(GetV2AccountsAccountIdBilling_invoices_past_dueRequest) returns (BillingInvoicesSummary) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/billing_invoices_past_due"
      };
    }
    // Gets payment information for one or more payments.
    // 
    // Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days. 
    // 
    // Privileges required: account administrator
    rpc GetV2AccountsAccountIdBilling_payments(GetV2AccountsAccountIdBilling_paymentsRequest) returns (BillingPaymentsResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/billing_payments"
      };
    }
    // Posts a payment to a past due invoice.
    // 
    // Posts a payment to a past due invoice. 
    // 
    // ###### Note: This can only be used if the `paymentAllowed` value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].
    // 
    // The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the `nextUri` and `previousUri` properties are not returned.
    // 
    // Privileges required: account administrator
    rpc PostV2AccountsAccountIdBilling_payments(PostV2AccountsAccountIdBilling_paymentsRequest) returns (BillingPaymentResponse) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/billing_payments"
        body: "billingPaymentRequest"
      };
    }
    // Gets billing payment information for a specific payment.
    // 
    // Retrieves the information for a specified payment. 
    // 
    // Privileges required: account administrator
    rpc GetV2AccountsAccountIdBilling_paymentsPaymentId(GetV2AccountsAccountIdBilling_paymentsPaymentIdRequest) returns (Payments) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/billing_payments/{paymentId}"
      };
    }
    // Get Account Billing Plan
    // 
    // Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.
    // 
    // By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the `setting` set to **false**. 
    // 
    // Response
    // 
    // The response returns the billing plan information, including the currency code, for the plan. The `billingPlan` and `succesorPlans` property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the `billingAddress` and `creditCardInformation` property values are the same as those shown in the [ML:Update Billing Plan] reference.
    // 
    // ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible.
    rpc GetV2AccountsAccountIdBilling_plan(GetV2AccountsAccountIdBilling_planRequest) returns (BillingPlans) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/billing_plan"
      };
    }
    // Updates the account billing plan.
    // 
    // Updates the billing plan information, billing address, and credit card information for the specified account.
    rpc PutV2AccountsAccountIdBilling_plan(PutV2AccountsAccountIdBilling_planRequest) returns (BillingPlanUpdateResponse) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/billing_plan"
        body: "billingPlanInformation"
      };
    }
    // Get metadata for a given credit card.
    rpc GetV2AccountsAccountIdBilling_planCredit_card(GetV2AccountsAccountIdBilling_planCredit_cardRequest) returns (CreditCardInformation) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/billing_plan/credit_card"
      };
    }
    // Reserverd: Purchase additional envelopes.
    // 
    // Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
    rpc PutV2AccountsAccountIdBilling_planPurchased_envelopes(PutV2AccountsAccountIdBilling_planPurchased_envelopesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/billing_plan/purchased_envelopes"
        body: "purchasedEnvelopesInformation"
      };
    }
    // Gets a list of brand profiles.
    // 
    // Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSend`)  must be set to **true** for the account to use this call.
    rpc GetV2AccountsAccountIdBrands(GetV2AccountsAccountIdBrandsRequest) returns (AccountBrands) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/brands"
      };
    }
    // Creates one or more brand profile files for the account.
    // 
    // Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSig`) must be set to **true** for the account to use this call.
    // 
    // An error is returned if `brandId` property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.
    // 
    // When brand profile files are being uploaded, they must be combined into one zip file and the `Content-Type` must be `application/zip`.
    rpc PostV2AccountsAccountIdBrands(PostV2AccountsAccountIdBrandsRequest) returns (AccountBrands) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/brands"
        body: "brand"
      };
    }
    // Deletes one or more brand profiles.
    // 
    // Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSend`) must be set to **true** to use this call.
    rpc DeleteV2AccountsAccountIdBrands(DeleteV2AccountsAccountIdBrandsRequest) returns (AccountBrands) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/brands"
        body: "brandsRequest"
      };
    }
    // Get information for a specific brand.
    rpc GetV2AccountsAccountIdBrandsBrandId(GetV2AccountsAccountIdBrandsBrandIdRequest) returns (Brand) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/brands/{brandId}"
      };
    }
    // Updates an existing brand.
    rpc PutV2AccountsAccountIdBrandsBrandId(PutV2AccountsAccountIdBrandsBrandIdRequest) returns (Brand) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/brands/{brandId}"
        body: "brand"
      };
    }
    // Removes a brand.
    rpc DeleteV2AccountsAccountIdBrandsBrandId(DeleteV2AccountsAccountIdBrandsBrandIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/brands/{brandId}"
      };
    }
    // Export a specific brand.
    rpc GetV2AccountsAccountIdBrandsBrandIdFile(GetV2AccountsAccountIdBrandsBrandIdFileRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/brands/{brandId}/file"
      };
    }
    // Obtains the specified image for a brand.
    rpc GetV2AccountsAccountIdBrandsBrandIdLogosLogoType(GetV2AccountsAccountIdBrandsBrandIdLogosLogoTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}"
      };
    }
    // Put one branding logo.
    rpc PutV2AccountsAccountIdBrandsBrandIdLogosLogoType(PutV2AccountsAccountIdBrandsBrandIdLogosLogoTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}"
      };
    }
    // Delete one branding logo.
    rpc DeleteV2AccountsAccountIdBrandsBrandIdLogosLogoType(DeleteV2AccountsAccountIdBrandsBrandIdLogosLogoTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}"
      };
    }
    // Returns the specified account's list of branding resources (metadata).
    rpc GetV2AccountsAccountIdBrandsBrandIdResources(GetV2AccountsAccountIdBrandsBrandIdResourcesRequest) returns (BrandResourcesList) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/brands/{brandId}/resources"
      };
    }
    // Returns the specified branding resource file.
    rpc GetV2AccountsAccountIdBrandsBrandIdResourcesResourceContentType(GetV2AccountsAccountIdBrandsBrandIdResourcesResourceContentTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}"
      };
    }
    // Uploads a branding resource file.
    rpc PutV2AccountsAccountIdBrandsBrandIdResourcesResourceContentType(PutV2AccountsAccountIdBrandsBrandIdResourcesResourceContentTypeRequest) returns (BrandResources) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}"
      };
    }
    // Gets status information about bulk recipient batches.
    // 
    // Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch. 
    // 
    // The response returns information about the envelopes sent with bulk recipient batches, including the `batchId` property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
    rpc GetV2AccountsAccountIdBulk_envelopes(GetV2AccountsAccountIdBulk_envelopesRequest) returns (BulkEnvelopes) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/bulk_envelopes"
      };
    }
    // Gets the status of a specified bulk send operation.
    // 
    // Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file.
    rpc GetV2AccountsAccountIdBulk_envelopesBatchId(GetV2AccountsAccountIdBulk_envelopesBatchIdRequest) returns (BulkEnvelopeStatus) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/bulk_envelopes/{batchId}"
      };
    }
    // Deletes the signature for one or more captive recipient records.
    // 
    // Deletes the signature for one or more captive recipient records; it is primarily used for testing. This provides a way to reset the signature associated with a client user ID so that a new signature can be created the next time the client user ID is used.
    rpc DeleteV2AccountsAccountIdCaptive_recipientsRecipientPart(DeleteV2AccountsAccountIdCaptive_recipientsRecipientPartRequest) returns (CaptiveRecipientInformation) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/captive_recipients/{recipientPart}"
        body: "captiveRecipientInformation"
      };
    }
    // Initiate a new ChunkedUpload.
    rpc PostV2AccountsAccountIdChunked_uploads(PostV2AccountsAccountIdChunked_uploadsRequest) returns (ChunkedUploads) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/chunked_uploads"
        body: "chunkedUploadRequest"
      };
    }
    // Retrieves the current metadata of a ChunkedUpload.
    rpc GetV2AccountsAccountIdChunked_uploadsChunkedUploadId(GetV2AccountsAccountIdChunked_uploadsChunkedUploadIdRequest) returns (ChunkedUploads) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/chunked_uploads/{chunkedUploadId}"
      };
    }
    // Integrity-Check and Commit a ChunkedUpload, readying it for use elsewhere.
    rpc PutV2AccountsAccountIdChunked_uploadsChunkedUploadId(PutV2AccountsAccountIdChunked_uploadsChunkedUploadIdRequest) returns (ChunkedUploads) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/chunked_uploads/{chunkedUploadId}"
      };
    }
    // Delete an existing ChunkedUpload.
    rpc DeleteV2AccountsAccountIdChunked_uploadsChunkedUploadId(DeleteV2AccountsAccountIdChunked_uploadsChunkedUploadIdRequest) returns (ChunkedUploads) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/chunked_uploads/{chunkedUploadId}"
      };
    }
    // Add a chunk, a chunk 'part', to an existing ChunkedUpload.
    rpc PutV2AccountsAccountIdChunked_uploadsChunkedUploadIdChunkedUploadPartSeq(PutV2AccountsAccountIdChunked_uploadsChunkedUploadIdChunkedUploadPartSeqRequest) returns (ChunkedUploads) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/{chunkedUploadPartSeq}"
        body: "chunkedUploadRequest"
      };
    }
    // Get Connect Configuration Information
    // 
    // Retrieves all the DocuSign Custom Connect definitions for the specified account.
    // 
    // ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
    rpc GetV2AccountsAccountIdConnect(GetV2AccountsAccountIdConnectRequest) returns (ConnectConfigResults) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/connect"
      };
    }
    // Updates a specified Connect configuration.
    // 
    // Updates the specified DocuSign Connect configuration in your account.
    // 
    // ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
    rpc PutV2AccountsAccountIdConnect(PutV2AccountsAccountIdConnectRequest) returns (ConnectConfigurations) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/connect"
        body: "ConnectConfigurations"
      };
    }
    // Creates a connect configuration for the specified account.
    // 
    // Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].
    // 
    // ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
    rpc PostV2AccountsAccountIdConnect(PostV2AccountsAccountIdConnectRequest) returns (ConnectConfigurations) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/connect"
        body: "ConnectConfigurations"
      };
    }
    // Republishes Connect information for multiple envelopes.
    // 
    // Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
    rpc PutV2AccountsAccountIdConnectEnvelopesRetry_queue(PutV2AccountsAccountIdConnectEnvelopesRetry_queueRequest) returns (ConnectFailureResults) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/connect/envelopes/retry_queue"
        body: "connectFailureFilter"
      };
    }
    // Republishes Connect information for the specified envelope.
    // 
    // Republishes Connect information for the specified envelope.
    rpc PutV2AccountsAccountIdConnectEnvelopesEnvelopeIdRetry_queue(PutV2AccountsAccountIdConnectEnvelopesEnvelopeIdRetry_queueRequest) returns (ConnectFailureResults) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/connect/envelopes/{envelopeId}/retry_queue"
      };
    }
    // Gets the Connect failure log information.
    // 
    // Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
    rpc GetV2AccountsAccountIdConnectFailures(GetV2AccountsAccountIdConnectFailuresRequest) returns (ConnectEvents) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/connect/failures"
      };
    }
    // Deletes a Connect failure log entry.
    // 
    // Deletes the Connect failure log information for the specified entry.
    rpc DeleteV2AccountsAccountIdConnectFailuresFailureId(DeleteV2AccountsAccountIdConnectFailuresFailureIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/connect/failures/{failureId}"
      };
    }
    // Gets the Connect log.
    // 
    // Retrieves a list of connect log entries for your account.
    // 
    // ###### Note: The `enableLog` setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded.
    rpc GetV2AccountsAccountIdConnectLogs(GetV2AccountsAccountIdConnectLogsRequest) returns (ConnectEvents) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/connect/logs"
      };
    }
    // Gets a list of Connect log entries.
    // 
    // Retrieves a list of connect log entries for your account.
    // 
    // ###### Note: The `enableLog` property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
    rpc DeleteV2AccountsAccountIdConnectLogs(DeleteV2AccountsAccountIdConnectLogsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/connect/logs"
      };
    }
    // Get the specified Connect log entry.
    // 
    // Retrieves the specified Connect log entry for your account.
    // 
    // ###### Note: The `enableLog` setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded.
    rpc GetV2AccountsAccountIdConnectLogsLogId(GetV2AccountsAccountIdConnectLogsLogIdRequest) returns (ConnectLog) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/connect/logs/{logId}"
      };
    }
    // Deletes a specified Connect log entry.
    // 
    // Deletes a specified entry from the Connect Log.
    rpc DeleteV2AccountsAccountIdConnectLogsLogId(DeleteV2AccountsAccountIdConnectLogsLogIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/connect/logs/{logId}"
      };
    }
    // Get information on a Connect Configuration
    // 
    // Retrieves the information for the specified DocuSign Connect configuration.
    // 
    // ###### Note: Connect must be enabled for your account to use this function.
    rpc GetV2AccountsAccountIdConnectConnectId(GetV2AccountsAccountIdConnectConnectIdRequest) returns (ConnectConfigResults) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/connect/{connectId}"
      };
    }
    // Deletes the specified connect configuration.
    // 
    // Deletes the specified DocuSign Connect configuration.
    // 
    // ###### Note: Connect must be enabled for your account to use this function.
    // 
    //  
    rpc DeleteV2AccountsAccountIdConnectConnectId(DeleteV2AccountsAccountIdConnectConnectIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/connect/{connectId}"
      };
    }
    // Returns users from the configured Connect service.
    // 
    // Returns users from the configured Connect service.
    rpc GetV2AccountsAccountIdConnectConnectIdUsers(GetV2AccountsAccountIdConnectConnectIdUsersRequest) returns (IntegratedUserInfoList) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/connect/{connectId}/users"
      };
    }
    // Gets the Electronic Record and Signature Disclosure for the account.
    // 
    // Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, associated with the account. You can use an optional query string to set the language for the disclosure.
    rpc GetV2AccountsAccountIdConsumer_disclosure(GetV2AccountsAccountIdConsumer_disclosureRequest) returns (AccountConsumerDisclosures) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/consumer_disclosure"
      };
    }
    // Gets the Electronic Record and Signature Disclosure.
    // 
    // Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, for the requested envelope recipient. This might be different than the current account disclosure depending on account settings, such as branding, and when the account disclosure was last updated. An optional query string can be included to return the language for the disclosure.
    rpc GetV2AccountsAccountIdConsumer_disclosureLangCode(GetV2AccountsAccountIdConsumer_disclosureLangCodeRequest) returns (AccountConsumerDisclosures) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/consumer_disclosure/{langCode}"
      };
    }
    // Update Consumer Disclosure.
    rpc PutV2AccountsAccountIdConsumer_disclosureLangCode(PutV2AccountsAccountIdConsumer_disclosureLangCodeRequest) returns (EnvelopeConsumerDisclosures) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/consumer_disclosure/{langCode}"
        body: "EnvelopeConsumerDisclosures"
      };
    }
    // Replaces contacts associated with an account for the DocuSign service.
    rpc PutV2AccountsAccountIdContacts(PutV2AccountsAccountIdContactsRequest) returns (ContactUpdateResponse) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/contacts"
        body: "contactModRequest"
      };
    }
    // Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type).
    rpc PostV2AccountsAccountIdContacts(PostV2AccountsAccountIdContactsRequest) returns (ContactUpdateResponse) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/contacts"
        body: "contactModRequest"
      };
    }
    // Delete contacts associated with an account for the DocuSign service.
    rpc DeleteV2AccountsAccountIdContacts(DeleteV2AccountsAccountIdContactsRequest) returns (ContactUpdateResponse) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/contacts"
        body: "contactModRequest"
      };
    }
    // Gets a particular contact associated with the user's account.
    rpc GetV2AccountsAccountIdContactsContactId(GetV2AccountsAccountIdContactsContactIdRequest) returns (ContactGetResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/contacts/{contactId}"
      };
    }
    // Replaces a particular contact associated with an account for the DocuSign service.
    rpc DeleteV2AccountsAccountIdContactsContactId(DeleteV2AccountsAccountIdContactsContactIdRequest) returns (ContactUpdateResponse) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/contacts/{contactId}"
      };
    }
    // Gets a list of custom fields associated with the account.
    // 
    // Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.
    // 
    // There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
    rpc GetV2AccountsAccountIdCustom_fields(GetV2AccountsAccountIdCustom_fieldsRequest) returns (AccountCustomFields) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/custom_fields"
      };
    }
    // Creates an acount custom field.
    rpc PostV2AccountsAccountIdCustom_fields(PostV2AccountsAccountIdCustom_fieldsRequest) returns (AccountCustomFields) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/custom_fields"
        body: "customField"
      };
    }
    // Updates an existing account custom field.
    rpc PutV2AccountsAccountIdCustom_fieldsCustomFieldId(PutV2AccountsAccountIdCustom_fieldsCustomFieldIdRequest) returns (AccountCustomFields) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/custom_fields/{customFieldId}"
        body: "customField"
      };
    }
    // Delete an existing account custom field.
    rpc DeleteV2AccountsAccountIdCustom_fieldsCustomFieldId(DeleteV2AccountsAccountIdCustom_fieldsCustomFieldIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/custom_fields/{customFieldId}"
      };
    }
    // Starts a new eMortgage Transaction
    rpc PostV2AccountsAccountIdEMortgageTransactions(PostV2AccountsAccountIdEMortgageTransactionsRequest) returns (PostTransactionsResponse) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/eMortgage/transactions"
        body: "EMortgageTransactions"
      };
    }
    // Gets status changes for one or more envelopes.
    // 
    // Retrieves a list of envelopes that match your request. 
    // A large set of optional filters let you filter
    // by date,
    // by envelope ID,
    // or by status codes.
    // 
    // Your request must include one or more of the following parameters:
    // 
    // * `from_date`
    // * `envelope_ids`
    // * `transaction_ids`
    // 
    // 
    // Getting envelope status using `transaction_ids` is useful
    // for offline signing situations where it can be used
    // determine if an envelope was created or not. It can be used
    // for the cases where a network connection was lost, before
    // the envelope status could be returned.
    // 
    // To avoid unnecessary database queries, the DocuSign
    // signature platform first checks requests to ensure that the
    // filter set supplied does not result in a zero-size response
    // before querying the database. 
    // 
    // For example, for a request with a `from_to_status` of
    // `delivered` and a current `status` of `created,sent`,
    // DocuSign will always return an empty list. 
    // This is because the request translates to: find the
    // envelopes that were delivered between the `from_date` and
    // `to_date` dates that have a current status of `created` or
    // `sent`. Since an envelope that has been delivered can
    // never have a status of `created` or `sent`, a zero-size
    // response would be generated. 
    // In this case, DocuSign does not query the database
    // and returns an empty list immediately.
    // 
    // 
    // The following table shows the valid current envelope
    // statuses (`status` parameter) for the different status
    // qualifiers (`from_to_status` parameter) in the request. If
    // the status and status qualifiers in the API request do not
    // contain any of the values shown in the Valid Current
    // Statuses column, then an empty list is returned.
    // 
    // Client applications should check that the statuses (`status`
    // parameter) they are requesting make sense for a given
    // `from_to_status` parameter value.
    // 
    // | Status Qualifier<br>(`from_to_status`) | Effective Status Qualifier | Valid Current Statuses                                                      |  
    // | :------------------------------------- | :------------------------- | :-------------------------------------------------------------------------- |  
    // | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |  
    // | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |  
    // | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |  
    // | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |  
    // | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |  
    // | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |  
    // | declined                               | StatusChanged              | any, declined, voided, deleted                                              |  
    // | timedout<br>always return zero results | StatusChanged              | any, voided, deleted                                                        |  
    // | voided                                 | Voided                     | any, voided, deleted                                                        |  
    // | deleted                                | StatusChanged              | any, deleted                                                                |  
    // 
    // ## Extraneous results
    // 
    // In some cases, a request for a specific envelope status will
    // include envelopes with additional statuses. For example, in
    // a request with a `from_date` of 2017-01-01, a `to_date` of
    // 2017-01-07 and the status qualifier (`from_to_status`) set
    // to `delivered`, the response set might contain envelopes
    // that were created during that time period, but not delivered
    // during the time period. As a workaround, check the envelope
    // status values in the result set as needed. 
    rpc GetV2AccountsAccountIdEnvelopes(GetV2AccountsAccountIdEnvelopesRequest) returns (EnvelopesInformation) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes"
      };
    }
    // Creates an envelope.
    // 
    // Creates and sends an envelope or creates a draft envelope.
    // Envelopes are fundamental resources in the DocuSign platform
    // and are used in a variety of ways.
    // 
    // With this method you can:
    // 
    // * Create and send an envelope
    //   with documents, recipients, and tabs.
    // * Create and send an envelope from a template.
    // * Create and send an envelope from
    //   a combination of documents and templates.
    // * Create a draft envelope.
    // 
    // There are many ways to use envelopes.
    // You can create and send an envelope
    // with a single API request,
    // or you can use several API requests
    // to create, populate, and send envelopes.
    // 
    // When you use this method
    // to create and send an envelope
    // in a single request,
    // the following parameters are required:
    // 
    // | Parameter      | Description |
    // | :--------      | :---------- |
    // | `status`       | Set to `sent` to send the envelope to recipients.<br>Set to `created` (or don't set at all) to save the envelope as a draft. |
    // | `emailSubject` | The subject of the email used to send the envelope. |
    // | `documents`    | The documents to be signed. |
    // | `recipients`   | The email addresses of the envelope recipients. |
    // 
    // If you are creating an envelope
    // to be sent later,
    // save it as a draft
    // by either setting `status`
    // to `created` or leaving it unset.
    // For instance, you can create a draft envelope
    // with documents only.
    // Using additional API requests,
    // you can add the recipients
    // and send the envelope
    // in subsequent API requests.
    // 
    // 
    // 
    // ## Feature Availability
    // 
    // Not all DocuSign features are available to all accounts.
    // Use DocuSign Admin to check and enable feature availability.
    // You can also check feature availability via the web application.
    // For example, if the web application allows you to send an envelope with SMS authentication,
    // then you can use the same feature through the API.
    // 
    // ## Sending Envelopes
    // 
    // Documents can be included
    // with the Envelopes:create method,
    // or a template can include documents.
    // Documents can be added by using
    // a multipart/form request
    // or by using the `documentBase64` property of the [`document` object][documentDef].
    // 
    // ### Adding Documents to Requests
    // 
    // There are two ways to add documents to your envelopes:
    // 
    // 1. Use the `documents` property of the envelope definition.
    // 2. Send this request as a multipart/form-data `POST`
    //    with documents added through additional request parts.
    // 
    // Using the `documents` property is the simpler option,
    // but the request may be quite large
    // due to the base64 encoding.
    // This example shows how to add a document
    // using this method.
    // 
    // ```json
    // {
    //   "status": "sent",
    //   "emailSubject": "Example of one recipient, type signer",
    //   "documents": [{
    //     "documentId": "1",
    //     "name": "contract.pdf",
    //     "documentBase64": "base64 document bytes...",
    //   }],
    //   "recipients": {
    //     "signers": [{
    //       "name": "Lisa Simpson",
    //       "email": "lisa@email.com",
    //       "recipientId": "1",
    //       "routingOrder": "1",
    //       "tabs": {
    //         "signHereTabs": [{
    //           "xPosition": "150",
    //           "yPosition": "200",
    //           "documentId": "1",
    //           "pageNumber": "1"
    //         }],
    //       }
    //     }]
    //   }
    // }
    // ```
    // 
    // If you are using a multipart/form-data `POST` request,
    // you do not have to base64 encode your documents.
    // You place the envelope definition in one part
    // and the document bytes in another:
    // 
    // ```
    // --AAA
    // Content-Type: application/json
    // Content-Disposition: form-data
    // 
    // <ENVELOPE DEFINITION GOES HERE>
    // --AAA
    // Content-Type:application/pdf
    // Content-Disposition: file; filename="contract.pdf"; documentid=1
    // 
    // <DOCUMENT BYTES GO HERE>
    // --AAA--
    // ```
    // 
    // ### Using Supplemental Documents
    // 
    // Supplemental documents are supporting materials
    // such as disclosures and other informational documents
    // that need to accompany a document sent for signature.
    // These supplemental documents are available to the signer
    // to view and acknowledge,
    // without making the envelope too large or confusing for signers.
    // 
    // Supplemental documents use the following properties in the
    // [`document` object][documentDef].
    // 
    // | Name                  | Type    | Description|
    // | :-------------------- | :------ ||
    // | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true|
    // | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:<br>`<ul><li><p><code>modal</code><br>The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.</p></li><li><p><code>download</code><br>The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.</p></li><li><p><code>inline</code><br>This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.</li></ul> |
    // | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:<br><ul><li><p><code>no_interaction</code><br>No recipient action is required.</p></li><li><p><code>view</code><br>The recipient is required to view the document.</p></li><li><p><code>accept</code><br>The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.</p></li><li><p><code>view_accept</code><br>The recipient is required to view and accept the document.</p></li></ul>                                                                                                                                                    |
    // 
    // 
    // [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab
    // 
    // The [View][viewtab] and Approve tabs
    // are used to set the interactions
    // for individual recipients.
    // The View tab includes a `required` property
    // that requires the recipient to view the supplemental document.
    // If the View tab `required` property is not set,
    // the recipient can, but is not required to,
    // view the supplemental document.
    // 
    // To use the View and Approve tabs for
    // supplemental documents,
    // the document `display` property
    // must be set to `modal` or `download`.
    // 
    // The actions that the recipient must take
    // depend on the value
    // of the `signerMustAcknowledge` document property
    // and
    // whether the signer is assigned
    // View or Approve tabs
    // on the document.
    // 
    // To set the interactions for individual recipients,
    // set the `signerMustAcknowledge` property
    // to `no_interaction`,
    // then add View and Approve tabs
    // on the appropriate document for the recipient.
    // 
    // 
    // The action that a signer must take
    // depends on the value of the
    // `signerMustAcknowledge` document property,
    // whether the signer has an Approve tab,
    // and the value of the
    // `required` property of the View tab.
    // The following table
    // shows the actions a recipient must take
    // for different combinations
    // of these tabs and properties.
    // 
    // 
    // 
    // | Document `signerMustAcknowledge`property  | Approve Tab | View Tab `required` property  | Recipient is required to ...  |
    // | :----                                     | :----       | :----                         | :----                         |
    // | no_interaction                            | No          |  --                           |  Take no action               |
    // | no_interaction                            | No          |  false                        |  Take no action               |
    // | no_interaction                            | No          |  true                         |  View                         |
    // | no_interaction                            | Yes         |  false                        |  Accept                       |
    // | no_interaction                            | Yes         |  true                         |  View and Accept              |
    // | view                                      | No          |  --                           |  View                         |
    // | view                                      | Yes         |  --                           |  View and Accept              |
    // | accept                                    | --          |  false                        |  Accept                       |
    // | accept                                    | --          |  true                         |  View and Accept              |
    // | view_accept                               | --          |  --                           |  View and Accept              |
    // 
    // 
    // 
    // 
    // ### Recipient Types
    // 
    // An [`envelopeDefinition` object][envelopeDef] is used as the method's body.
    // Envelope recipients can be defined in the envelope or in templates.
    // The `envelopeDefinition` object's `recipients` property
    // is an [`EnvelopeRecipients` resource object][envelopeRecipientsDef].
    // It includes arrays of the seven types of recipients defined by DocuSign:
    // 
    // | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
    // | :---------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    // | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  |
    // | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient's order in the process flow and when the envelope is completed.                                                                                                                                      |
    // | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    |
    // | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. |
    // | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            |
    // | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  |
    // | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |
    // 
    // 
    // Additional information about the different types of recipients
    // is available from the [`EnvelopeRecipients` resource page][envelopeRecipientsRes]
    // and from the Developer Center [Recipients][devecenterrecipients] topic.
    // 
    // 
    // 
    // ### Tabs
    // 
    // Tabs (also referred to as tags and fields in the web application),
    // can be defined in the `envelopeDefinition`,
    // in templates, by transforming PDF Form Fields,
    // or by using Composite Templates (see below).
    // 
    // The `inPersonSigner`, and `signer` recipient objects
    // include a `tabs` property.
    // It is an [`EnvelopeRecipientTabs` resource object][envRecipientTabsDef]
    // that includes arrays of the different tab types available.
    // See the [`EnvelopeRecipientTabs` resource][envRecipientTabsRes] for more information.
    // 
    // 
    // ## Using Templates
    // 
    // Envelopes use specific people or groups as recipients.
    // Templates can specify a role, eg `account_manager.`
    // When a template is used in an envelope,
    // the roles must be replaced with specific people or groups.
    // 
    // When you create an envelope using a `templateId`,
    // the different recipient type objects
    // within the [`EnvelopeRecipients` property][envelopeRecipientsDef]
    // are used to assign recipients to the template's roles via the `roleName` property.
    // The recipient objects can also override settings
    // that were specified in the template,
    // and set values for tab fields that were defined in the template.
    // 
    // ### Message Lock
    // 
    // When a template is added or applied to an envelope,
    // and the template has a locked email subject and message,
    // that subject and message are used for the envelope
    // and cannot be changed
    // even if another locked template
    // is subsequently added or applied to the envelope.
    // The `messageLock` property is used to lock the email subject and message.
    // 
    // If an email subject or message is entered
    // before adding or applying a template with `messageLock` set to **true**,
    // the email subject and message is overwritten
    // with the locked email subject and message from the template.
    // 
    // ## Envelope Status
    // 
    // The status of sent envelopes
    // can be determined through the DocuSign webhook system
    // or by polling.
    // Webhooks are highly recommended:
    // they provide your application with the quickest updates when an envelope's
    // status changes.
    // DocuSign limits polling to once every 15 minutes or less
    // frequently.
    // See [API Rules and Limits][apirules] for more information and examples.
    // 
    // 
    // When a webhook is used,
    // DocuSign calls your application via the URL you provide, with a notification XML message.
    // 
    // See the
    // [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status)
    // for examples and live demos of using webhooks.
    // 
    // ## Webhook Options
    // 
    // The two webhook options,
    // `eventNotification` and Connect,
    // use the same notification mechanism and message formats.
    // Use `eventNotification` to create a webhook
    // for a specific envelope sent via the API.
    // Connect webhooks can be used
    // for any envelope sent from an account,
    // from any user, from any client.
    // The [Connect guide][connectGuide] discusses the webhook notification message format.
    // 
    // ### eventNotification Webhooks
    // 
    // The Envelopes:create method
    // includes an optional [`eventNotification` object][eventNotificationDef] property
    // that adds a webhook to the envelope.
    // `eventNotification` webhooks are available for all DocuSign accounts with API access.
    // 
    // ### Connect Webhooks
    // 
    // Connect can be used to create a webhook
    // for all envelopes sent by all users in an account,
    // either through the API or through other DocuSign clients (web, mobile, etc).
    // Connect configurations are independent of specific envelopes.
    // A Connect configuration includes a filter
    // that may be used to limit the webhook to specific users, envelope statuses, etc.
    // 
    // You can create and manage Connect configurations with
    // the [ConnectConfigurations resource][connectConfigurationsRes].
    // Configurations can also be created and managed from DocuSign Admin
    // accessed by selecting **Go to Admin** from the menu
    // next to your picture on the DocuSign web app.
    // See the **Connect** topic in the **Integrations** section of DocuSign Admin.
    // For repeatability, and to minimize support questions,
    // creating Connect configurations via the API is recommended, especially for ISVs.
    // 
    // Connect is available for some DocuSign account types.
    // Please contact DocuSign Sales for more information.
    // 
    // ## Composite Templates
    // 
    // The Composite Templates feature,
    // like [compositing in film production](https://en.wikipedia.org/wiki/Compositing),
    // enables you to overlay
    // document,
    // recipient,
    // and tab definitions
    // from multiple sources,
    // including PDF Form Field definitions,
    // templates defined on the server,
    // and more.
    // 
    // Each Composite Template consists of optional elements: server templates,
    // inline templates, PDF Metadata templates, and documents.
    // 
    // * The Composite Template ID is an optional element used to identify the
    //   composite template. It is used as a reference when adding document
    //   object information via a multipart HTTP message. If used, the document
    //   content-disposition must include the `compositeTemplateId` to which the
    //   document should be added. If `compositeTemplateId` is not specified in
    //   the content-disposition, the document is applied based on the
    //   `documentId` only. If no document object is specified, the composite
    //   template inherits the first document.
    // 
    // * Server Templates are server-side templates stored on the DocuSign
    //   platform. If supplied, they are overlaid into the envelope in the order
    //   of their Sequence value.
    // 
    // * Inline Templates provide a container to add documents, recipients,
    //   tabs, and custom fields. If inline templates are supplied, they are
    //   overlaid into the envelope in the order of their Sequence value.
    // 
    // * Document objects are optional structures that provide a container to
    //   pass in a document or form. If this object is not included, the
    //   composite template inherits the *first* document it finds from a server
    //   template or inline template, starting with the lowest sequence value.
    // 
    // PDF Form objects are only transformed from the document object. DocuSign
    // does not derive PDF form properties from server templates or inline
    // templates. To instruct DocuSign to transform fields from the PDF form,
    // set `transformPdfFields` to **true** for the document.
    // 
    // See [PDF Form Field Transformation](#pdf-form-field-transformation)
    // for more information about process.
    // 
    // * PDF Metadata Templates provide a container to embed design-time
    //   template information into a PDF document. DocuSign uses this information
    //   when processing the Envelope. This convention allows the document to
    //   carry the signing instructions with it, so that less information needs
    //   to be provided at run-time through an inline template or synchronized
    //   with an external structure like a server template. PDF Metadata
    //   templates are stored in the Metadata layer of a PDF in accordance with
    //   Acrobat's XMP specification. DocuSign will only find PDF Metadata
    //   templates inside documents passed in the Document object (see below). If
    //   supplied, the PDF metadata template will be overlaid into the envelope
    //   in the order of its Sequence value.
    // 
    // ### Compositing the Definitions
    // 
    // Each Composite Template adds a new document and templates overlay into
    // the envelope. For each Composite Template these rules are applied:
    // 
    // * Templates are overlaid in the order of their Sequence value.
    // * If Document is not passed into the Composite Template's `document`
    //   field, the *first* template's document (based on the template's Sequence
    //   value) is used.
    // * Last in wins in all cases except for the document (i.e. envelope
    //   information, recipient information, secure field information). There is
    //   no special casing.
    // 
    // For example, if you want higher security on a tab,
    // then that needs to be specified in a later template (by sequence number)
    // than where the tab is included.
    // If you want higher security on a role recipient,
    // then it needs to be in a later template
    // than where that role recipient is specified.
    // 
    // * Recipient matching is based on Recipient Role and Routing Order. If
    //   there are matches, the recipient information is merged together. A final
    //   pass is done on all Composite Templates, after all template overlays
    //   have been applied, to collapse recipients with the same email, username
    //   and routing order. This prevents having the same recipients at the same
    //   routing order.
    // 
    // * If you specify in a template that a recipient is locked, once that
    //   recipient is overlaid the recipient attributes can no longer be changed.
    //   The only items that can be changed for the recipient in this case are
    //   the email, username, access code and IDCheckInformationInput.
    // 
    // * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab
    //   Label matches but the Document is not supplied, the Tab is overlaid for
    //   all the Documents.
    // 
    // For example, if you have a simple inline template with only one tab in
    // it with a label and a value, the Signature, Initial, Company, Envelope
    // ID, User Name tabs will only be matched and collapsed if they fall in
    // the exact same X and Y locations.
    // 
    // * `roleName` and `tabLabel` matching is case sensitive.
    // 
    // * The `defaultRecipient` property enables you to specify which recipient
    //   the tabs generated from a PDF form are mapped to. You can also set PDF
    //   form generated tabs to a recipient other than the default recipient by
    //   specifying the mapping of the tab label that is created to one of the
    //   template recipients.
    // 
    // * You can use `tabLabel` wild carding to map a series of tabs from the PDF
    //   form. To use this you must end a tab label with "\*" and then the system
    //   matches tabs that start with the label.
    // 
    // * If no `defaultRecipient` is specified, tabs must be explicitly mapped
    //   to recipients in order to be generated from the form. Unmapped form
    //   objects will not be generated into their DocuSign equivalents. (In the
    //   case of Signature/Initials, the tabs will be disregarded entirely; in
    //   the case of pdf text fields, the field data will be flattened on the
    //   Envelope document, but there will not be a corresponding DocuSign data
    //   tab.)
    // 
    // ### Including the Document Content for Composite Templates
    // 
    // Document content can be supplied inline, using the `documentBase64` or
    // can be included in a multipart HTTP message. If a multipart message is
    // used and there are multiple Composite Templates, the document
    // content-disposition can include the `compositeTemplateId` to which the
    // document should be added. Using the `compositeTemplateId` sets which
    // documents are associated with particular composite templates. An example
    // of this usage is:
    // 
    // ```
    // --5cd3320a-5aac-4453-b3a4-cbb52a4cba5d
    // Content-Type: application/pdf
    // Content-Disposition: file; filename="eula.pdf"; documentId=1; compositeTemplateId="1"
    // Content-Transfer-Encoding: base64
    // ```
    // 
    // ### PDF Form Field Transformation
    // 
    // Only the following PDF Form FieldTypes are transformed to DocuSign
    // tabs:
    // 
    // * CheckBox
    // * DateTime
    // * ListBox
    // * Numeric
    // * Password
    // * Radio
    // * Signature,
    // * Text
    // 
    // Field Properties that are transformed:
    // 
    // * Read Only
    // * Required
    // * Max Length
    // * Positions
    // * Initial Data
    // 
    // When transforming a PDF Form Digital Signature Field, the following rules apply.
    // Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab
    // 
    // 
    // | If the PDF Field Name contains                              | Then the DocuSign tab will be |
    // | :---------------------------------------------------------- | :---------------------------- |
    // | DocuSignSignHere or<br> eSignSignHere                       | Signature                     |
    // | DocuSignSignHereOptional or<br> eSignSignHereOptional       | Optional Signature            |
    // | DocuSignInitialHere or<br> eSignInitialHere                 | Initials                      |
    // | DocuSignInitialHereOptional or<br> eSignInitialHereOptional | Optional Initials             |
    // 
    // 
    // When transforming PDF Form Text Fields, the following rules apply.
    // Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.
    // 
    // 
    // | If the PDF Field Name contains                                        | Then the DocuSign tab will be |
    // | :-------------------------------------------------------------------- | :---------------------------- |
    // | DocuSignSignHere or<br> eSignSignHere                                 | Signature                     |
    // | DocuSignSignHereOptional or<br> eSignSignHereOptional                 | Optional Signature            |
    // | DocuSignInitialHere or<br> eSignInitialHere                           | Initials                      |
    // | DocuSignInitialHereOptional or<br> eSignInitialHereOptional           | Optional Initials             |
    // | DocuSignEnvelopeID or<br> eSignEnvelopeID                             | EnvelopeID                    |
    // | DocuSignCompany or<br> eSignCompany                                   | Company                       |
    // | DocuSignDateSigned or<br> eSignDateSigned                             | Date Signed                   |
    // | DocuSignTitle or<br> eSignTitle                                       | Title                         |
    // | DocuSignFullName or<br> eSignFullName                                 | Full Name                     |
    // | DocuSignSignerAttachmentOptional or<br> eSignSignerAttachmentOptional | Optional Signer Attachment    |
    // 
    // 
    // PDF Form Field Names that include `DocuSignIgnoreTransform`
    // or `eSignIgnoreTransform` will not be transformed.
    // 
    // PDF Form Date fields that include `DocuSignDateSigned` or `eSignDateSigned`
    // will be transformed
    // to Date Signed fields.
    // 
    // ## Template Email Subject Merge Fields
    // 
    // This feature enables you to insert recipient name and email address
    // merge fields into the email subject line when creating or sending from a
    // template.
    // 
    // The merge fields, based on the recipient's `roleName`, are added to the
    // `emailSubject` when the template is created or when the template is used
    // to create an envelope. After a template sender adds the name and email
    // information for the recipient and sends the envelope, the recipient
    // information is automatically merged into the appropriate fields in the
    // email subject line.
    // 
    // Both the sender and the recipients will see the information in the email
    // subject line for any emails associated with the template. This provides
    // an easy way for senders to organize their envelope emails without having
    // to open an envelope to check the recipient.
    // 
    // If merging the recipient information into the subject line causes the
    // subject line to exceed 100 characters, then any characters over the 100
    // character limit are not included in the subject line. For cases where
    // the recipient name or email is expected to be long, you should consider
    // placing the merge field at the start of the email subject.
    // 
    // * To add a recipient's name in the subject line add the following text
    //   in the `emailSubject` when creating the template or when sending an
    //   envelope from a template:
    // 
    //    `[[<roleName>_UserName]]`
    // 
    //    Example:
    // 
    //    `"emailSubject":"[[Signer 1_UserName]], Please sign this NDA"`
    // 
    // * To add a recipient's email address in the subject line add the
    //   following text in the emailSubject when creating the template or when
    //   sending an envelope from a template:
    // 
    //    `[[<roleName>_Email]]`
    // 
    //    Example:
    // 
    //    `"emailSubject":"[[Signer 1_Email]], Please sign this NDA"`
    // 
    // In both cases `<roleName>` is the recipient's `roleName` in the template.
    // 
    // For cases where another recipient (such as an Agent, Editor, or
    // Intermediary recipient) is entering the name and email information for
    // the recipient included in the email subject, then
    // `[[<roleName>_UserName]]` or `[[<roleName>_Email]]` is shown in the
    // email subject.
    // 
    // ## Branding an Envelope
    // 
    // The following rules are used to determine the `brandId` used in an envelope:
    // 
    // * If a `brandId` is specified in the envelope or template
    //   and that `brandId` is available to the account,
    //   that brand is used in the envelope.
    // * If more than one template is used in an envelope,
    //   and more than one `brandId` is specified,
    //   the first `brandId` specified is used throughout the envelope.
    // * In cases where no brand is specified,
    //   and the sender belongs to a group:
    //   - If there is only one brand associated with the group,
    //     then that brand is used in the envelope.
    //   - Otherwise, the account's default signing brand is used.
    // * For envelopes that do not meet any of the previous criteria,
    //   the account's default signing brand is used for the envelope.
    // 
    // 
    // ## BCC Email Address Feature
    // 
    // The BCC Email address feature
    // is designed to provide a copy
    // of all email communications for external archiving purposes.
    // DocuSign recommends that envelopes sent using the BCC for Email Archive feature,
    // including the BCC Email Override option,
    // include additional signer authentication options.
    // 
    // Do **not** use this feature
    // to send a copy of the envelope
    // to a recipient who does not need to sign.
    // Use a Carbon Copy or Certified Delivery Recipient type instead.
    // 
    // ## Merge Recipient Roles for Draft Envelopes
    // 
    // When an envelope with multiple templates is sent,
    // the recipients from the templates are merged according to the template roles,
    // and empty recipients are removed.
    // When creating an envelope with multiple templates,
    // but not sending it (keeping it in a created state),
    // duplicate recipients are not merged,
    // which could leave duplicate recipients in the envelope.
    // 
    // To prevent this,
    // the query parameter `merge_roles_on_draft`
    // should be added when posting a draft envelope (`status` is `created`)
    // with multiple templates.
    // Doing this will merge template roles and remove empty recipients.
    // 
    // 
    // DocuSign recommends that the `merge_roles_on_draft` query
    // parameter be used any time you are creating an envelope with
    // multiple templates and keeping it in draft (`status` is `created`) status.
    // 
    // 
    // [agentDef]:                 #/definitions/agent
    // [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits
    // [ccDef]:                     #/definitions/carbonCopy
    // [certfiedDef]:               #/definitions/certifiedDelivery
    // [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/
    // [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf
    // [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients
    // [documentDef]:               #/definitions/document
    // [editorDef]:                 #/definitions/editor
    // [envelopeDef]:               #/definitions/envelopeDefinition
    // [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients
    // [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/
    // [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs
    // [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/
    // [eventNotificationDef]:      #/definitions/eventNotification
    // [inPersonDef]:               #/definitions/inPersonSigner
    // [intermediaryDef]:           #/definitions/intermediary
    // [signerDef]:                 #/definitions/signer
    rpc PostV2AccountsAccountIdEnvelopes(PostV2AccountsAccountIdEnvelopesRequest) returns (EnvelopeSummary) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes"
        body: "envelopeDefinition"
      };
    }
    // Gets the envelope status for the specified envelopes.
    // 
    // Retrieves the envelope status for the specified envelopes.
    rpc PutV2AccountsAccountIdEnvelopesStatus(PutV2AccountsAccountIdEnvelopesStatusRequest) returns (EnvelopesInformation) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/status"
        body: "envelopeIdsRequest"
      };
    }
    // Gets the status of a envelope.
    // 
    // Retrieves the overall status for the specified envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeId(GetV2AccountsAccountIdEnvelopesEnvelopeIdRequest) returns (Envelopes) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}"
      };
    }
    // Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft
    // 
    // The Put Envelopes endpoint provides the following functionality:
    // 
    // * Sends the specified single draft envelope.
    // Add {"status":"sent"} to the request body to send the envelope.
    // 
    // * Voids the specified in-process envelope.
    // Add {"status":"voided", "voidedReason":"The reason for voiding the envelope"} to the request body to void the envelope.
    // 
    // * Replaces the current email subject and message for a draft envelope.
    // Add {"emailSubject":"subject",  "emailBlurb":"message"}  to the request body to modify the subject and message.
    // 
    // * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system.
    // Add {"purgeState":"purge type"} to the request body.
    // 
    // *Additional information on purging documents*
    // 
    // The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).
    // 
    // ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period. 
    // ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents. 
    // ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.
    // 
    // When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.
    // 
    // If `purgeState="documents_queued"` is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If `purgeState= "documents_and_metadata_queued"` is used in the request, then the documents, attachments, and tabs are deleted.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeId(PutV2AccountsAccountIdEnvelopesEnvelopeIdRequest) returns (EnvelopeUpdateSummary) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}"
        body: "Envelopes"
      };
    }
    // Returns a list of attachments associated with the specified envelope
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdAttachments(GetV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsRequest) returns (EnvelopeAttachmentsResult) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/attachments"
      };
    }
    // Add one or more attachments to a DRAFT or IN-PROCESS envelope.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdAttachments(PutV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsRequest) returns (EnvelopeAttachmentsResult) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/attachments"
        body: "envelopeAttachmentsRequest"
      };
    }
    // Delete one or more attachments from a DRAFT envelope.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdAttachments(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsRequest) returns (EnvelopeAttachmentsResult) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/attachments"
        body: "envelopeAttachmentsRequest"
      };
    }
    // Retrieves an attachment from the envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsAttachmentId(GetV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsAttachmentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}"
      };
    }
    // Add an attachment to a DRAFT or IN-PROCESS envelope.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsAttachmentId(PutV2AccountsAccountIdEnvelopesEnvelopeIdAttachmentsAttachmentIdRequest) returns (EnvelopeAttachmentsResult) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}"
        body: "attachment"
      };
    }
    // Gets the envelope audit events for an envelope.
    // 
    // Gets the envelope audit events for the specified envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdAudit_events(GetV2AccountsAccountIdEnvelopesEnvelopeIdAudit_eventsRequest) returns (EnvelopeAuditEventResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/audit_events"
      };
    }
    // Gets the custom field information for the specified envelope.
    // 
    // Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.
    // 
    // There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fields(GetV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fieldsRequest) returns (CustomFieldsEnvelope) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields"
      };
    }
    // Updates envelope custom fields in an envelope.
    // 
    // Updates the envelope custom fields in draft and in-process envelopes.
    // 
    // Each custom field used in an envelope must have a unique name.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fields(PutV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fieldsRequest) returns (EnvelopeCustomFields) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields"
        body: "EnvelopeCustomFields"
      };
    }
    // Updates envelope custom fields for an envelope.
    // 
    // Updates the envelope custom fields for draft and in-process envelopes.
    // 
    // Each custom field used in an envelope must have a unique name.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fields(PostV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fieldsRequest) returns (EnvelopeCustomFields) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields"
        body: "EnvelopeCustomFields"
      };
    }
    // Deletes envelope custom fields for draft and in-process envelopes.
    // 
    // Deletes envelope custom fields for draft and in-process envelopes.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fields(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdCustom_fieldsRequest) returns (EnvelopeCustomFields) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields"
        body: "EnvelopeCustomFields"
      };
    }
    // Gets a list of envelope documents.
    // 
    // Retrieves a list of documents associated with the specified envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdDocuments(GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsRequest) returns (EnvelopeDocuments) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents"
      };
    }
    // Adds one or more documents to an existing envelope document.
    // 
    // Adds one or more documents to an existing envelope document.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdDocuments(PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsRequest) returns (EnvelopeDocuments) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents"
        body: "envelopeDefinition"
      };
    }
    // Deletes documents from a draft envelope.
    // 
    // Deletes one or more documents from an existing draft envelope.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocuments(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsRequest) returns (EnvelopeDocuments) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents"
        body: "envelopeDefinition"
      };
    }
    // Gets a document from an envelope.
    // 
    // Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.
    // 
    // The `{documentID}` parameter takes two special values:
    // 
    // | Value      | Description |
    // | :---       | :--- |
    // | `combined` | Retrieve a PDF that contains the combined content of all documents and the certificate. |
    // | `archive`  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. |
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentId(GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}"
      };
    }
    // Adds a document to an existing draft envelope.
    // 
    // Adds a document to an existing draft envelope.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentId(PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}"
      };
    }
    // Gets the custom document fields from an  existing envelope document.
    // 
    // Retrieves the custom document field information from an existing envelope document.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFields(GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFieldsRequest) returns (EnvelopeDocumentFields) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields"
      };
    }
    // Updates existing custom document fields in an existing envelope document.
    // 
    // Updates existing custom document fields in an existing envelope document.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFields(PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFieldsRequest) returns (EnvelopeDocumentFields) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields"
        body: "EnvelopeDocumentFields"
      };
    }
    // Creates custom document fields in an existing envelope document.
    // 
    // Creates custom document fields in an existing envelope document.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFields(PostV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFieldsRequest) returns (EnvelopeDocumentFields) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields"
        body: "EnvelopeDocumentFields"
      };
    }
    // Deletes custom document fields from an existing envelope document.
    // 
    // Deletes custom document fields from an existing envelope document.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFields(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdFieldsRequest) returns (EnvelopeDocumentFields) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields"
        body: "EnvelopeDocumentFields"
      };
    }
    // Returns document page image(s) based on input.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPages(GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesRequest) returns (PageImages) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages"
      };
    }
    // Deletes a page from a document in an envelope.
    // 
    // Deletes a page from a document in an envelope based on the page number.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumber(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}"
      };
    }
    // Gets a page image from an envelope for display.
    // 
    // Retrieves a page image for display from the specified envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberPage_image(GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberPage_imageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image"
      };
    }
    // Rotates page image from an envelope for display.
    // 
    // Rotates page image from an envelope for display. The page image can be rotated to the left or right.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberPage_image(PutV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberPage_imageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image"
        body: "pageRequest"
      };
    }
    // Returns tabs on the specified page.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberTabs(GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdPagesPageNumberTabsRequest) returns (EnvelopeDocumentTabs) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/tabs"
      };
    }
    // Returns tabs on the document.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTabs(GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTabsRequest) returns (EnvelopeDocumentTabs) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/tabs"
      };
    }
    // Gets the templates associated with a document in an existing envelope.
    // 
    // Retrieves the templates associated with a document in the specified envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplates(GetV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplatesRequest) returns (EnvelopeTemplates) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates"
      };
    }
    // Adds templates to a document in an  envelope.
    // 
    // Adds templates to a document in the specified envelope.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplates(PostV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplatesRequest) returns (DocumentTemplateList) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates"
        body: "documentTemplateList"
      };
    }
    // Deletes a template from a document in an existing envelope.
    // 
    // Deletes the specified template from a document in an existing envelope.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplatesTemplateId(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdDocumentsDocumentIdTemplatesTemplateIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates/{templateId}"
      };
    }
    // Gets the email setting overrides for an envelope.
    // 
    // Retrieves the email override settings for the specified envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settings(GetV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settingsRequest) returns (EnvelopeEmailSettings) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/email_settings"
      };
    }
    // Updates the email setting overrides for an envelope.
    // 
    // Updates the existing email override settings for the specified envelope. Note that modifying email settings will only affect email communications that occur after the modification was made.
    // 
    // This can also be used to delete an individual email override setting by using an empty string for the value to be deleted.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settings(PutV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settingsRequest) returns (EnvelopeEmailSettings) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/email_settings"
        body: "EnvelopeEmailSettings"
      };
    }
    // Adds email setting overrides to an envelope.
    // 
    // Adds email override settings, changing the email address to reply to an email address, name, or the BCC for email archive information, for the envelope. Note that adding email settings will only affect email communications that occur after the addition was made.
    // 
    // ### Important: The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options. To send a copy of the envelope to a recipient who does not need to sign, use a Carbon Copies or Certified Deliveries Recipient Type.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settings(PostV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settingsRequest) returns (EnvelopeEmailSettings) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/email_settings"
        body: "EnvelopeEmailSettings"
      };
    }
    // Deletes the email setting overrides for an envelope.
    // 
    // Deletes all existing email override settings for the envelope. If you want to delete an individual email override setting, use the PUT and set the value to an empty string. Note that deleting email settings will only affect email communications that occur after the deletion and the normal account email settings are used for future email communications.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settings(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdEmail_settingsRequest) returns (EnvelopeEmailSettings) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/email_settings"
      };
    }
    // Returns envelope form data for an existing envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdForm_data(GetV2AccountsAccountIdEnvelopesEnvelopeIdForm_dataRequest) returns (EnvelopeFormData) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/form_data"
      };
    }
    // Gets envelope lock information.
    // 
    // Retrieves general information about the envelope lock.
    // 
    // If the call is made by the locked by user and the request has the same integrator key as original, then the `X-DocuSign-Edit` header and additional lock information is included in the response. This allows users to recover a lost editing session token and the `X-DocuSign-Edit` header.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdLock(GetV2AccountsAccountIdEnvelopesEnvelopeIdLockRequest) returns (EnvelopeLocks) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/lock"
      };
    }
    // Updates an envelope lock.
    // 
    // Updates the lock duration time or update the `lockedByApp` property information for the specified envelope. The user and integrator key must match the user specified by the `lockByUser` property and integrator key information and the `X-DocuSign-Edit` header must be included or an error will be generated.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdLock(PutV2AccountsAccountIdEnvelopesEnvelopeIdLockRequest) returns (EnvelopeLocks) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/lock"
        body: "lockRequest"
      };
    }
    // Lock an envelope.
    // 
    // Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.
    // 
    // ###### Note: Users must have envelope locking capability enabled to use this function (userSetting `canLockEnvelopes` must be  set to true for the user).
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdLock(PostV2AccountsAccountIdEnvelopesEnvelopeIdLockRequest) returns (EnvelopeLocks) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/lock"
        body: "lockRequest"
      };
    }
    // Deletes an envelope lock.
    // 
    // Deletes the lock from the specified envelope. The `X-DocuSign-Edit` header must be included in the request.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdLock(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdLockRequest) returns (EnvelopeLocks) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/lock"
      };
    }
    // Gets envelope notification information.
    // 
    // Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdNotification(GetV2AccountsAccountIdEnvelopesEnvelopeIdNotificationRequest) returns (Notification) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/notification"
      };
    }
    // Sets envelope notification (Reminders/Expirations) structure for an existing envelope.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdNotification(PutV2AccountsAccountIdEnvelopesEnvelopeIdNotificationRequest) returns (Notification) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/notification"
        body: "envelopeNotificationRequest"
      };
    }
    // Gets the status of recipients for an envelope.
    // 
    // Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list. 
    // 
    // The `currentRoutingOrder` property of the response contains the `routingOrder` value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipients(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRequest) returns (EnvelopeRecipients) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients"
      };
    }
    // Updates recipients in a draft envelope or corrects recipient information for an in process envelope.
    // 
    // Updates recipients in a draft envelope or corrects recipient information for an in process envelope. 
    // 
    // For draft envelopes, you can edit the following properties: `email`, `userName`, `routingOrder`, `faxNumber`, `deliveryMethod`, `accessCode`, and `requireIdLookup`.
    // 
    // Once an envelope has been sent, you can only edit: `email`, `userName`, `signerName`, `routingOrder`, `faxNumber`, and `deliveryMethod`. You can also select to resend an envelope by using the `resend_envelope` option.
    // 
    // If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipients(PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRequest) returns (RecipientsUpdateSummary) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients"
        body: "EnvelopeRecipients"
      };
    }
    // Adds one or more recipients to an envelope.
    // 
    // Adds one or more recipients to an envelope.
    // 
    // For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient's routing order is before or the same as the envelope's next recipient, an email is only sent if the optional `resend_envelope` query string is set to **true**.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdRecipients(PostV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRequest) returns (EnvelopeRecipients) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients"
        body: "EnvelopeRecipients"
      };
    }
    // Deletes recipients from an envelope.
    // 
    // Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the `recipientId` being used as the key for deleting recipients.
    // 
    // If the envelope is `In Process`, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipients(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRequest) returns (EnvelopeRecipients) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients"
        body: "EnvelopeRecipients"
      };
    }
    // Updates document visibility for the recipients
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsDocument_visibility(PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsDocument_visibilityRequest) returns (EnvelopeDocumentVisibility) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/document_visibility"
        body: "EnvelopeDocumentVisibility"
      };
    }
    // Deletes a recipient from an envelope.
    // 
    // Deletes a recipient from a `draft` or `sent` envelope.
    // 
    // If the envelope is "In Process" (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientId(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdRequest) returns (EnvelopeRecipients) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}"
      };
    }
    // Gets the bulk recipient file from an envelope.
    // 
    // Retrieves the bulk recipient file information from an envelope that has a bulk recipient.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipients(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipientsRequest) returns (EnvelopeBulkRecipients) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/bulk_recipients"
      };
    }
    // Adds or replaces envelope bulk recipients.
    // 
    // Updates the bulk recipients in a draft envelope using a file upload. The Content-Type supported for uploading a bulk recipient file is CSV (text/csv).
    // 
    // The REST API does not support modifying individual rows or values in the bulk recipients file. It only allows the entire file to be added or replaced with a new file.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipients(PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipientsRequest) returns (BulkRecipientsSummaryResponse) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/bulk_recipients"
        body: "bulkRecipientsRequest"
      };
    }
    // Deletes the bulk recipient file from an envelope.
    // 
    // Deletes the bulk recipient file from an envelope. This cannot be used if the envelope has been sent.
    // 
    // After using this, the `bulkRecipientsUri` property is not returned in subsequent GET calls for the envelope, but the recipient will remain as a bulk recipient.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipients(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdBulk_recipientsRequest) returns (BulkRecipientsUpdateResponse) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/bulk_recipients"
      };
    }
    // Gets the Electronic Record and Signature Disclosure associated with the account.
    // 
    // Retrieves the Electronic Record and Signature Disclosure, with html formatting, associated with the account. You can use an optional query string to set the language for the disclosure.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdConsumer_disclosure(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdConsumer_disclosureRequest) returns (EnvelopeConsumerDisclosures) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/consumer_disclosure"
      };
    }
    // Reserved: Gets the Electronic Record and Signature Disclosure associated with the account.
    // 
    // Reserved: Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, associated with the account.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdConsumer_disclosureLangCode(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdConsumer_disclosureLangCodeRequest) returns (EnvelopeConsumerDisclosures) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/consumer_disclosure/{langCode}"
      };
    }
    // Returns document visibility for the recipients
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdDocument_visibility(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdDocument_visibilityRequest) returns (EnvelopeDocumentVisibility) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/document_visibility"
      };
    }
    // Updates document visibility for the recipients
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdDocument_visibility(PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdDocument_visibilityRequest) returns (EnvelopeDocumentVisibility) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/document_visibility"
        body: "EnvelopeDocumentVisibility"
      };
    }
    // Gets the initials image for a user.
    // 
    // Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.
    // 
    // The userId specified in the endpoint must match the authenticated user's user id and the user must be a member of the account.
    // 
    // The `signatureIdOrName` paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint. 
    // 
    // For example: "Bob Smith" to "Bob%20Smith"
    // 
    // Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdInitials_image(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdInitials_imageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image"
      };
    }
    // Sets the initials image for an accountless signer.
    // 
    // Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.
    // 
    // For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the `CanSendEnvelope` property set to **true** and the `ExpressSendOnly` property in `SendingUser` structure must be set to **false**.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdInitials_image(PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdInitials_imageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image"
      };
    }
    // Gets signature information for a signer or sign-in-person recipient.
    // 
    // Retrieves signature information for a signer or sign-in-person recipient.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignature(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignatureRequest) returns (UserSignatures) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature"
      };
    }
    // Retrieve signature image information for a signer/sign-in-person recipient.
    // 
    // Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.
    // 
    // The userId specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.
    // 
    // The `signatureIdOrName` parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that don't properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint. 
    // 
    // For example: "Bob Smith" to "Bob%20Smith"
    // 
    // Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignature_image(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignature_imageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image"
      };
    }
    // Sets the signature image for an accountless signer.
    // 
    // Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.
    // 
    // For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the `CanSendEnvelope` property set to **true** and the `ExpressSendOnly` property in `SendingUser` structure must be set to **false**.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignature_image(PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdSignature_imageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image"
      };
    }
    // Gets the tabs information for a signer or sign-in-person recipient in an envelope.
    // 
    // Retrieves information about the tabs associated with a recipient in a draft envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabs(GetV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabsRequest) returns (EnvelopeRecipientTabs) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs"
      };
    }
    // Updates the tabs for a recipient.
    // 
    // 
    // Updates one or more tabs for a recipient in a draft envelope.
    rpc PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabs(PutV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabsRequest) returns (EnvelopeRecipientTabs) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs"
        body: "EnvelopeRecipientTabs"
      };
    }
    // Adds tabs for a recipient.
    // 
    // Adds one or more tabs for a recipient.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabs(PostV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabsRequest) returns (EnvelopeRecipientTabs) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs"
        body: "EnvelopeRecipientTabs"
      };
    }
    // Deletes the tabs associated with a recipient.
    // 
    // Deletes one or more tabs associated with a recipient in a draft envelope.
    rpc DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabs(DeleteV2AccountsAccountIdEnvelopesEnvelopeIdRecipientsRecipientIdTabsRequest) returns (EnvelopeRecipientTabs) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs"
        body: "EnvelopeRecipientTabs"
      };
    }
    // Get List of Templates used in an Envelope
    // 
    // This returns a list of the server-side templates, their name and ID, used in an envelope.
    rpc GetV2AccountsAccountIdEnvelopesEnvelopeIdTemplates(GetV2AccountsAccountIdEnvelopesEnvelopeIdTemplatesRequest) returns (EnvelopeTemplates) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/templates"
      };
    }
    // Adds templates to an envelope.
    // 
    // Adds templates to the specified envelope.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdTemplates(PostV2AccountsAccountIdEnvelopesEnvelopeIdTemplatesRequest) returns (DocumentTemplateList) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/templates"
        body: "documentTemplateList"
      };
    }
    // Returns a URL to the envelope correction UI.
    // 
    // Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.
    // 
    // Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsCorrect(PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsCorrectRequest) returns (EnvelopeViews) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/views/correct"
        body: "correctViewRequest"
      };
    }
    // Returns a URL to the edit view UI.
    // 
    // Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view. 
    // 
    // Upon sending completion, the user is returned to the return URL provided by the API application.
    // 
    // Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsEdit(PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsEditRequest) returns (EnvelopeViews) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/views/edit"
        body: "returnUrlRequest"
      };
    }
    // Returns a URL to the recipient view UI.
    // 
    // Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.
    // 
    // ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet. 
    // 
    // This method is only used with envelopes in the `sent` status.
    // 
    // Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters `assertionId`, `authenticationInstant`, `authenticationMethod`, `clientUserId`, and `securityDomain` to record information on how the recipient was authenticated. At a minimum, `authenticationMethod` and `clientUserId` are required. The information that you provide is included in the envelope's certificate of completion.
    // 
    // ## The event status parameter
    // After the signer completes or ends the signing ceremony, DocuSign will redirect the user's browser back to your app via the `returnUrl` that you supply. DocuSIgn appends an `event` query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don't fetch the envelope's status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.
    // 
    // ## The URL is time-limited
    // The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.
    // 
    // Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user's browser to the URL after you receive it.
    // 
    // If you want to invite someone to an embedded signing session via email, the email invitation's URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.
    // 
    // ## Maintaining State
    // After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the `returnUrl` field. Eg, `https://myapp.eg.com/docusign_return?myState=12345` When the user is redirected to your app, the `event` query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsRecipient(PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsRecipientRequest) returns (EnvelopeViews) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/views/recipient"
        body: "recipientViewRequest"
      };
    }
    // Returns a URL to the sender view UI.
    // 
    // Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications. 
    // 
    // The returned URL can only be redirected to immediately after it is generated. It can only be used once.
    // Therefore, request the URL immediately before you redirect your user to it.
    // 
    // For the best user experience, don't use an iFrame. For iOS devices DocuSign recommends using a WebView.
    // 
    // Multiple solutions are available for maintaining your
    // client state. See the "Maintaining State" section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)
    // 
    // After the user has completed the sending view, their browser is redirected to the `returnUrl` you supplied.
    // 
    // By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL. 
    // 
    // To start with the envelope's recipients and documents view instead, examine the URL in the method's response. 
    // Then change the query parameter from `send=1` to `send=0` to start with the recipients/documents view.
    rpc PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsSender(PostV2AccountsAccountIdEnvelopesEnvelopeIdViewsSenderRequest) returns (EnvelopeViews) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/envelopes/{envelopeId}/views/sender"
        body: "returnUrlRequest"
      };
    }
    // Gets a list of the folders for the account.
    // 
    // Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the `template` query string parameter.
    rpc GetV2AccountsAccountIdFolders(GetV2AccountsAccountIdFoldersRequest) returns (Folders) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/folders"
      };
    }
    // Gets a list of the envelopes in the specified folder.
    // 
    // Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
    rpc GetV2AccountsAccountIdFoldersFolderId(GetV2AccountsAccountIdFoldersFolderIdRequest) returns (FolderItemsResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/folders/{folderId}"
      };
    }
    // Moves an envelope from its current folder to the specified folder.
    // 
    // Moves an envelope from its current folder to the specified folder.
    // 
    // ###### Note: You can use this endpoint to delete envelopes by specifying `recyclebin` in the `folderId` parameter of the endpoint. Placing an in process envelope (envelope status of `sent` or `delivered`) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the 'envelopeIds' property and specifying `recyclebin` in the `folderId` parameter.
    rpc PutV2AccountsAccountIdFoldersFolderId(PutV2AccountsAccountIdFoldersFolderIdRequest) returns (Folders) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/folders/{folderId}"
        body: "foldersRequest"
      };
    }
    // Gets information about groups associated with the account.
    // 
    // Retrieves information about groups associated with the account.
    rpc GetV2AccountsAccountIdGroups(GetV2AccountsAccountIdGroupsRequest) returns (Groups) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/groups"
      };
    }
    // Updates the group information for a group.
    // 
    // Updates the group name and modifies, or sets, the permission profile for the group.
    rpc PutV2AccountsAccountIdGroups(PutV2AccountsAccountIdGroupsRequest) returns (Groups) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/groups"
        body: "Groups"
      };
    }
    // Creates one or more groups for the account.
    // 
    // Creates one or more groups for the account.
    // 
    // Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the `userSettings` property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
    rpc PostV2AccountsAccountIdGroups(PostV2AccountsAccountIdGroupsRequest) returns (Groups) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/groups"
        body: "Groups"
      };
    }
    // Deletes an existing user group.
    // 
    // Deletes an existing user group.
    rpc DeleteV2AccountsAccountIdGroups(DeleteV2AccountsAccountIdGroupsRequest) returns (Groups) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/groups"
        body: "Groups"
      };
    }
    // Gets group brand ID Information.
    // 
    // Retrieves information about the brands associated with the requested group.
    rpc GetV2AccountsAccountIdGroupsGroupIdBrands(GetV2AccountsAccountIdGroupsGroupIdBrandsRequest) returns (GroupBrands) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/groups/{groupId}/brands"
      };
    }
    // Adds group brand ID information to a group.
    // 
    // Adds group brand ID information to a group.
    rpc PutV2AccountsAccountIdGroupsGroupIdBrands(PutV2AccountsAccountIdGroupsGroupIdBrandsRequest) returns (GroupBrands) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/groups/{groupId}/brands"
        body: "brandsRequest"
      };
    }
    // Deletes brand information from the requested group.
    // 
    // Deletes brand information from the requested group.
    rpc DeleteV2AccountsAccountIdGroupsGroupIdBrands(DeleteV2AccountsAccountIdGroupsGroupIdBrandsRequest) returns (GroupBrands) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/groups/{groupId}/brands"
        body: "brandsRequest"
      };
    }
    // Gets a list of users in a group.
    // 
    // Retrieves a list of users in a group.
    rpc GetV2AccountsAccountIdGroupsGroupIdUsers(GetV2AccountsAccountIdGroupsGroupIdUsersRequest) returns (GroupUsers) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/groups/{groupId}/users"
      };
    }
    // Adds one or more users to an existing group.
    // 
    // Adds one or more users to an existing group.
    rpc PutV2AccountsAccountIdGroupsGroupIdUsers(PutV2AccountsAccountIdGroupsGroupIdUsersRequest) returns (GroupUsers) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/groups/{groupId}/users"
        body: "userInfoList"
      };
    }
    // Deletes one or more users from a gro
    // 
    // Deletes one or more users from a group.
    rpc DeleteV2AccountsAccountIdGroupsGroupIdUsers(DeleteV2AccountsAccountIdGroupsGroupIdUsersRequest) returns (GroupUsers) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/groups/{groupId}/users"
        body: "userInfoList"
      };
    }
    // List payment gateway account information
    // 
    // List payment gateway account information
    rpc GetV2AccountsAccountIdPayment_gateway_accounts(GetV2AccountsAccountIdPayment_gateway_accountsRequest) returns (PaymentGatewayAccountsInfo) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/payment_gateway_accounts"
      };
    }
    // Gets a list of permission profiles.
    // 
    // Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.
    // 
    // Currently, Permission Profiles can only be created and modified in the DocuSign console.
    rpc GetV2AccountsAccountIdPermission_profiles(GetV2AccountsAccountIdPermission_profilesRequest) returns (PermissionProfileInformation) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/permission_profiles"
      };
    }
    // Creates a new permission profile in the specified account.
    rpc PostV2AccountsAccountIdPermission_profiles(PostV2AccountsAccountIdPermission_profilesRequest) returns (AccountPermissionProfiles) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/permission_profiles"
        body: "AccountPermissionProfiles"
      };
    }
    // Returns a permissions profile in the specified account.
    rpc GetV2AccountsAccountIdPermission_profilesPermissionProfileId(GetV2AccountsAccountIdPermission_profilesPermissionProfileIdRequest) returns (AccountPermissionProfiles) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}"
      };
    }
    // Updates a permission profile within the specified account.
    rpc PutV2AccountsAccountIdPermission_profilesPermissionProfileId(PutV2AccountsAccountIdPermission_profilesPermissionProfileIdRequest) returns (AccountPermissionProfiles) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}"
        body: "AccountPermissionProfiles"
      };
    }
    // Deletes a permissions profile within the specified account.
    rpc DeleteV2AccountsAccountIdPermission_profilesPermissionProfileId(DeleteV2AccountsAccountIdPermission_profilesPermissionProfileIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}"
      };
    }
    // Returns the list of PowerForms available to the user.
    rpc GetV2AccountsAccountIdPowerforms(GetV2AccountsAccountIdPowerformsRequest) returns (PowerFormsResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/powerforms"
      };
    }
    // Creates a new PowerForm.
    rpc PostV2AccountsAccountIdPowerforms(PostV2AccountsAccountIdPowerformsRequest) returns (PowerForms) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/powerforms"
        body: "PowerForms"
      };
    }
    // Deletes one or more PowerForms
    rpc DeleteV2AccountsAccountIdPowerforms(DeleteV2AccountsAccountIdPowerformsRequest) returns (PowerFormsResponse) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/powerforms"
        body: "powerFormsRequest"
      };
    }
    // Returns the list of PowerForms available to the user.
    rpc GetV2AccountsAccountIdPowerformsSenders(GetV2AccountsAccountIdPowerformsSendersRequest) returns (PowerFormSendersResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/powerforms/senders"
      };
    }
    // Returns a single PowerForm.
    rpc GetV2AccountsAccountIdPowerformsPowerFormId(GetV2AccountsAccountIdPowerformsPowerFormIdRequest) returns (PowerForms) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/powerforms/{powerFormId}"
      };
    }
    // Creates a new PowerForm.
    rpc PutV2AccountsAccountIdPowerformsPowerFormId(PutV2AccountsAccountIdPowerformsPowerFormIdRequest) returns (PowerForms) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/powerforms/{powerFormId}"
        body: "PowerForms"
      };
    }
    // Delete a PowerForm.
    rpc DeleteV2AccountsAccountIdPowerformsPowerFormId(DeleteV2AccountsAccountIdPowerformsPowerFormIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/powerforms/{powerFormId}"
      };
    }
    // Returns the form data associated with the usage of a PowerForm.
    rpc GetV2AccountsAccountIdPowerformsPowerFormIdForm_data(GetV2AccountsAccountIdPowerformsPowerFormIdForm_dataRequest) returns (PowerFormsFormDataResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/powerforms/{powerFormId}/form_data"
      };
    }
    // Gets recipient names associated with an email address.
    // 
    // Retrieves a list of recipients in the specified account that are associated with a email address supplied in the query string.
    rpc GetV2AccountsAccountIdRecipient_names(GetV2AccountsAccountIdRecipient_namesRequest) returns (RecipientNamesResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/recipient_names"
      };
    }
    // Gets a list of envelopes in folders matching the specified criteria.
    // 
    // Retrieves a list of envelopes that match the criteria specified in the query.
    // 
    // If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
    rpc GetV2AccountsAccountIdSearch_foldersSearchFolderId(GetV2AccountsAccountIdSearch_foldersSearchFolderIdRequest) returns (FolderItemResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/search_folders/{searchFolderId}"
      };
    }
    // Gets account settings information.
    // 
    // Retrieves the account settings information for the specified account.
    rpc GetV2AccountsAccountIdSettings(GetV2AccountsAccountIdSettingsRequest) returns (AccountSettingsInformation) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/settings"
      };
    }
    // Updates the account settings for an account.
    // 
    // Updates the account settings for the specified account.
    rpc PutV2AccountsAccountIdSettings(PutV2AccountsAccountIdSettingsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/settings"
        body: "accountSettingsInformation"
      };
    }
    // Returns the configuration information for the eNote eOriginal integration.
    rpc GetV2AccountsAccountIdSettingsEnote_configuration(GetV2AccountsAccountIdSettingsEnote_configurationRequest) returns (ENoteConfigurations) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/settings/enote_configuration"
      };
    }
    // Updates configuration information for the eNote eOriginal integration.
    rpc PutV2AccountsAccountIdSettingsEnote_configuration(PutV2AccountsAccountIdSettingsEnote_configurationRequest) returns (ENoteConfigurations) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/settings/enote_configuration"
        body: "ENoteConfigurations"
      };
    }
    // Deletes configuration information for the eNote eOriginal integration.
    rpc DeleteV2AccountsAccountIdSettingsEnote_configuration(DeleteV2AccountsAccountIdSettingsEnote_configurationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/settings/enote_configuration"
      };
    }
    // Get the password rules
    rpc GetV2AccountsAccountIdSettingsPassword_rules(GetV2AccountsAccountIdSettingsPassword_rulesRequest) returns (AccountPasswordRules) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/settings/password_rules"
      };
    }
    // Update the password rules
    rpc PutV2AccountsAccountIdSettingsPassword_rules(PutV2AccountsAccountIdSettingsPassword_rulesRequest) returns (AccountPasswordRules) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/settings/password_rules"
        body: "AccountPasswordRules"
      };
    }
    // Returns tab settings list for specified account
    rpc GetV2AccountsAccountIdSettingsTabs(GetV2AccountsAccountIdSettingsTabsRequest) returns (AccountTabSettings) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/settings/tabs"
      };
    }
    // Modifies tab settings for specified account
    rpc PutV2AccountsAccountIdSettingsTabs(PutV2AccountsAccountIdSettingsTabsRequest) returns (AccountTabSettings) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/settings/tabs"
        body: "AccountTabSettings"
      };
    }
    // Reserved: Gets the shared item status for one or more users.
    // 
    // Reserved: Retrieves shared item status for one or more users and types of items.
    // 
    // Users with account administration privileges can retrieve shared access information for all account users. Users without account administrator privileges can only retrieve shared access information for themselves and the returned information is limited to the retrieving the status of all members of the account that are sharing their folders to the user. This is equivalent to setting the shared=shared_from.
    rpc GetV2AccountsAccountIdShared_access(GetV2AccountsAccountIdShared_accessRequest) returns (AccountSharedAccess) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/shared_access"
      };
    }
    // Reserved: Sets the shared access information for users.
    // 
    // Reserved: Sets the shared access information for one or more users.
    rpc PutV2AccountsAccountIdShared_access(PutV2AccountsAccountIdShared_accessRequest) returns (AccountSharedAccess) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/shared_access"
        body: "accountSharedAccess"
      };
    }
    // Returns Account available signature providers for specified account.
    rpc GetV2AccountsAccountIdSignatureProviders(GetV2AccountsAccountIdSignatureProvidersRequest) returns (AccountSignatureProviders) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/signatureProviders"
      };
    }
    // Gets a list of the Signing Groups in an account.
    // 
    // Retrieves a list of all signing groups in the specified account.
    rpc GetV2AccountsAccountIdSigning_groups(GetV2AccountsAccountIdSigning_groupsRequest) returns (SigningGroupInformation) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/signing_groups"
      };
    }
    // Updates signing group names.
    // 
    // Updates the name of one or more existing signing groups.
    rpc PutV2AccountsAccountIdSigning_groups(PutV2AccountsAccountIdSigning_groupsRequest) returns (SigningGroupInformation) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/signing_groups"
        body: "signingGroupInformation"
      };
    }
    // Creates a signing group. 
    // 
    // Creates one or more signing groups. 
    // 
    // Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups. 
    // 
    // An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.
    //  
    // Signing groups can be used by any account user.
    rpc PostV2AccountsAccountIdSigning_groups(PostV2AccountsAccountIdSigning_groupsRequest) returns (SigningGroupInformation) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/signing_groups"
        body: "signingGroupInformation"
      };
    }
    // Deletes one or more signing groups.
    // 
    // Deletes one or more signing groups in the specified account.
    rpc DeleteV2AccountsAccountIdSigning_groups(DeleteV2AccountsAccountIdSigning_groupsRequest) returns (SigningGroupInformation) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/signing_groups"
        body: "signingGroupInformation"
      };
    }
    // Gets information about a signing group. 
    // 
    // Retrieves information, including group member information, for the specified signing group.
    rpc GetV2AccountsAccountIdSigning_groupsSigningGroupId(GetV2AccountsAccountIdSigning_groupsSigningGroupIdRequest) returns (SigningGroups) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/signing_groups/{signingGroupId}"
      };
    }
    // Updates a signing group. 
    // 
    // Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members.
    rpc PutV2AccountsAccountIdSigning_groupsSigningGroupId(PutV2AccountsAccountIdSigning_groupsSigningGroupIdRequest) returns (SigningGroups) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/signing_groups/{signingGroupId}"
        body: "SigningGroups"
      };
    }
    // Gets a list of members in a Signing Group.
    // 
    // Retrieves the list of members in the specified Signing Group.
    rpc GetV2AccountsAccountIdSigning_groupsSigningGroupIdUsers(GetV2AccountsAccountIdSigning_groupsSigningGroupIdUsersRequest) returns (SigningGroupUsers) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users"
      };
    }
    // Adds members to a signing group. 
    // 
    // Adds one or more new members to a signing group. A signing group can have a maximum of 50 members.
    rpc PutV2AccountsAccountIdSigning_groupsSigningGroupIdUsers(PutV2AccountsAccountIdSigning_groupsSigningGroupIdUsersRequest) returns (SigningGroupUsers) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users"
        body: "SigningGroupUsers"
      };
    }
    // Deletes  one or more members from a signing group.
    // 
    // Deletes  one or more members from the specified signing group.
    rpc DeleteV2AccountsAccountIdSigning_groupsSigningGroupIdUsers(DeleteV2AccountsAccountIdSigning_groupsSigningGroupIdUsersRequest) returns (SigningGroupUsers) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users"
        body: "SigningGroupUsers"
      };
    }
    // List supported languages for the recipient language setting
    // 
    // List supported languages for the recipient language setting
    rpc GetV2AccountsAccountIdSupported_languages(GetV2AccountsAccountIdSupported_languagesRequest) returns (SupportedLanguages) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/supported_languages"
      };
    }
    // Gets a list of all account tabs.
    // 
    // Retrieves a list of all tabs associated with the account.
    rpc GetV2AccountsAccountIdTab_definitions(GetV2AccountsAccountIdTab_definitionsRequest) returns (TabMetadataList) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/tab_definitions"
      };
    }
    // Creates a custom tab.
    // 
    // Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.
    // 
    // Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
    rpc PostV2AccountsAccountIdTab_definitions(PostV2AccountsAccountIdTab_definitionsRequest) returns (CustomTabs) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/tab_definitions"
        body: "CustomTabs"
      };
    }
    // Gets custom tab information.
    // 
    // Retrieves information about the requested custom tab on the specified account.
    rpc GetV2AccountsAccountIdTab_definitionsCustomTabId(GetV2AccountsAccountIdTab_definitionsCustomTabIdRequest) returns (CustomTabs) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/tab_definitions/{customTabId}"
      };
    }
    // Updates custom tab information.
    // 
    // 
    // Updates the information in a custom tab for the specified account.
    rpc PutV2AccountsAccountIdTab_definitionsCustomTabId(PutV2AccountsAccountIdTab_definitionsCustomTabIdRequest) returns (CustomTabs) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/tab_definitions/{customTabId}"
        body: "CustomTabs"
      };
    }
    // Deletes custom tab information.
    // 
    // Deletes the custom from the specified account.
    rpc DeleteV2AccountsAccountIdTab_definitionsCustomTabId(DeleteV2AccountsAccountIdTab_definitionsCustomTabIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/tab_definitions/{customTabId}"
      };
    }
    // Gets the definition of a template.
    // 
    // Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
    rpc GetV2AccountsAccountIdTemplates(GetV2AccountsAccountIdTemplatesRequest) returns (EnvelopeTemplateResults) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates"
      };
    }
    // Creates an envelope from a template.
    // 
    // Creates a template definition using a multipart request.
    // 
    // ### Template Email Subject Merge Fields
    // 
    // Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.
    // 
    // The merge fields, based on the recipient's role name, are added to the `emailSubject` property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.
    // 
    // Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.
    // ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.
    // 
    // To add a recipient's name in the subject line add the following text in the `emailSubject` property when creating the template or when sending an envelope from a template:
    // 
    // `[[<roleName>_UserName]]`
    // 
    // Example:
    // 
    // `"emailSubject":"[[Signer 1_UserName]], Please sign this NDA",`
    // 
    // To add a recipient's email address in the subject line add the following text in the `emailSubject` property when creating the template or when sending an envelope from a template:
    // 
    // `[[<roleName>_Email]]`
    // 
    // Example:
    // 
    // `"emailSubject":"[[Signer 1_Email]], Please sign this NDA",`
    // 
    // 
    // In both cases the <roleName> is the recipient's contents of the `roleName` property in the template.
    // 
    // For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then `[[<roleName>_UserName]]` or `[[<roleName>_Email]]` is shown in the email subject.
    rpc PostV2AccountsAccountIdTemplates(PostV2AccountsAccountIdTemplatesRequest) returns (TemplateSummary) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/templates"
        body: "Templates"
      };
    }
    // Gets a list of templates for a specified account.
    // 
    // Retrieves the definition of the specified template.
    rpc GetV2AccountsAccountIdTemplatesTemplateId(GetV2AccountsAccountIdTemplatesTemplateIdRequest) returns (Templates) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}"
      };
    }
    // Updates an existing template.
    // 
    // Updates an existing template.
    rpc PutV2AccountsAccountIdTemplatesTemplateId(PutV2AccountsAccountIdTemplatesTemplateIdRequest) returns (TemplateUpdateSummary) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}"
        body: "Templates"
      };
    }
    // Gets the custom document fields from a template.
    // 
    // Retrieves the custom document field information from an existing template.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdCustom_fields(GetV2AccountsAccountIdTemplatesTemplateIdCustom_fieldsRequest) returns (TemplateCustomFields) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/custom_fields"
      };
    }
    // Updates envelope custom fields in a template.
    // 
    // Updates the custom fields in a template.
    // 
    // Each custom field used in a template must have a unique name.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdCustom_fields(PutV2AccountsAccountIdTemplatesTemplateIdCustom_fieldsRequest) returns (TemplateCustomFields) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/custom_fields"
        body: "templateCustomFields"
      };
    }
    // Creates custom document fields in an existing template document.
    // 
    // Creates custom document fields in an existing template document.
    rpc PostV2AccountsAccountIdTemplatesTemplateIdCustom_fields(PostV2AccountsAccountIdTemplatesTemplateIdCustom_fieldsRequest) returns (TemplateCustomFields) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/templates/{templateId}/custom_fields"
        body: "templateCustomFields"
      };
    }
    // Deletes envelope custom fields in a template.
    // 
    // Deletes envelope custom fields in a template.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdCustom_fields(DeleteV2AccountsAccountIdTemplatesTemplateIdCustom_fieldsRequest) returns (TemplateCustomFields) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/custom_fields"
        body: "templateCustomFields"
      };
    }
    // Gets a list of documents associated with a template.
    // 
    // Retrieves a list of documents associated with the specified template.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdDocuments(GetV2AccountsAccountIdTemplatesTemplateIdDocumentsRequest) returns (TemplateDocuments) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents"
      };
    }
    // Adds documents to a template document.
    // 
    // Adds one or more documents to an existing template document.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdDocuments(PutV2AccountsAccountIdTemplatesTemplateIdDocumentsRequest) returns (TemplateDocuments) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents"
        body: "envelopeDefinition"
      };
    }
    // Deletes documents from a template.
    // 
    // Deletes one or more documents from an existing template.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdDocuments(DeleteV2AccountsAccountIdTemplatesTemplateIdDocumentsRequest) returns (TemplateDocuments) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents"
        body: "envelopeDefinition"
      };
    }
    // Gets PDF documents from a template.
    // 
    // Retrieves one or more PDF documents from the specified template.
    // 
    // You can specify the ID of the document to retrieve or can specify `combined` to retrieve all documents in the template as one pdf.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentId(GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}"
      };
    }
    // Adds a document to a template document.
    // 
    // Adds the specified document to an existing template document.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentId(PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdRequest) returns (EnvelopeDocument) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}"
        body: "envelopeDefinition"
      };
    }
    // Gets the custom document fields for a an existing template document.
    // 
    // Retrieves the custom document fields for an existing template document.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFields(GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFieldsRequest) returns (TemplateDocumentFields) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields"
      };
    }
    // Updates existing custom document fields in an existing template document.
    // 
    // Updates existing custom document fields in an existing template document.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFields(PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFieldsRequest) returns (TemplateDocumentFields) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields"
        body: "TemplateDocumentFields"
      };
    }
    // Creates custom document fields in an existing template document.
    // 
    // Creates custom document fields in an existing template document.
    rpc PostV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFields(PostV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFieldsRequest) returns (TemplateDocumentFields) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields"
        body: "TemplateDocumentFields"
      };
    }
    // Deletes custom document fields from an existing template document.
    // 
    // Deletes custom document fields from an existing template document.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFields(DeleteV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdFieldsRequest) returns (TemplateDocumentFields) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields"
        body: "TemplateDocumentFields"
      };
    }
    // Returns document page image(s) based on input.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPages(GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesRequest) returns (PageImages) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages"
      };
    }
    // Deletes a page from a document in an template.
    // 
    // Deletes a page from a document in a template based on the page number.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumber(DeleteV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}"
        body: "pageRequest"
      };
    }
    // Gets a page image from a template for display.
    // 
    // Retrieves a page image for display from the specified template.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberPage_image(GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberPage_imageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image"
      };
    }
    // Rotates page image from a template for display.
    // 
    // Rotates page image from a template for display. The page image can be rotated to the left or right.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberPage_image(PutV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberPage_imageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image"
        body: "pageRequest"
      };
    }
    // Returns tabs on the specified page.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberTabs(GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdPagesPageNumberTabsRequest) returns (TemplateDocumentTabs) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/tabs"
      };
    }
    // Returns tabs on the document.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdTabs(GetV2AccountsAccountIdTemplatesTemplateIdDocumentsDocumentIdTabsRequest) returns (TemplateDocumentTabs) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs"
      };
    }
    // Gets template lock information.
    // 
    // Retrieves general information about the template lock.
    // 
    // If the call is made by the user who has the lock and the request has the same integrator key as original, then the `X-DocuSign-Edit` header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the `X-DocuSign-Edit` header.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdLock(GetV2AccountsAccountIdTemplatesTemplateIdLockRequest) returns (TemplateLocks) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/lock"
      };
    }
    // Updates a template lock.
    // 
    // Updates the lock duration time or update the `lockedByApp` property information for the specified template. The user and integrator key must match the user specified by the `lockByUser` property and integrator key information and the `X-DocuSign-Edit` header must be included or an error will be generated.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdLock(PutV2AccountsAccountIdTemplatesTemplateIdLockRequest) returns (TemplateLocks) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/lock"
        body: "lockRequest"
      };
    }
    // Lock a template.
    // 
    // Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.
    // 
    // ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property `canLockEnvelopes` must be set to **true** for the user).
    rpc PostV2AccountsAccountIdTemplatesTemplateIdLock(PostV2AccountsAccountIdTemplatesTemplateIdLockRequest) returns (TemplateLocks) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/templates/{templateId}/lock"
        body: "lockRequest"
      };
    }
    // Deletes a template lock.
    // 
    // Deletes the lock from the specified template. The `X-DocuSign-Edit` header must be included in the request.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdLock(DeleteV2AccountsAccountIdTemplatesTemplateIdLockRequest) returns (TemplateLocks) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/lock"
        body: "lockRequest"
      };
    }
    // Gets template notification information.
    // 
    // Retrieves the envelope notification, reminders and expirations, information for an existing template.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdNotification(GetV2AccountsAccountIdTemplatesTemplateIdNotificationRequest) returns (Notification) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/notification"
      };
    }
    // Updates the notification  structure for an existing template.
    // 
    // Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdNotification(PutV2AccountsAccountIdTemplatesTemplateIdNotificationRequest) returns (Notification) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/notification"
        body: "templateNotificationRequest"
      };
    }
    // Gets recipient information from a template.
    // 
    // Retrieves the information for all recipients in the specified template.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdRecipients(GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRequest) returns (TemplateRecipients) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients"
      };
    }
    // Updates recipients in a template.
    // 
    // Updates recipients in a template. 
    // 
    // You can edit the following properties: `email`, `userName`, `routingOrder`, `faxNumber`, `deliveryMethod`, `accessCode`, and `requireIdLookup`.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdRecipients(PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRequest) returns (RecipientsUpdateSummary) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients"
        body: "templateRecipients"
      };
    }
    // Adds tabs for a recipient.
    // 
    // Adds one or more recipients to a template.
    rpc PostV2AccountsAccountIdTemplatesTemplateIdRecipients(PostV2AccountsAccountIdTemplatesTemplateIdRecipientsRequest) returns (TemplateRecipients) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients"
        body: "templateRecipients"
      };
    }
    // Deletes recipients from a template.
    // 
    // Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the `recipientId` being used as the key for deleting recipients.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdRecipients(DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRequest) returns (TemplateRecipients) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients"
        body: "templateRecipients"
      };
    }
    // Updates document visibility for the recipients
    rpc PutV2AccountsAccountIdTemplatesTemplateIdRecipientsDocument_visibility(PutV2AccountsAccountIdTemplatesTemplateIdRecipientsDocument_visibilityRequest) returns (TemplateDocumentVisibility) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/document_visibility"
        body: "TemplateDocumentVisibility"
      };
    }
    // Deletes the specified recipient file from a template.
    // 
    // Deletes the specified recipient file from the specified template.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientId(DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdRequest) returns (TemplateRecipients) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}"
        body: "templateRecipients"
      };
    }
    // Gets the bulk recipient file from a template.
    // 
    // Retrieves the bulk recipient file information from a template that has a bulk recipient.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipients(GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipientsRequest) returns (TemplateBulkRecipients) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/bulk_recipients"
      };
    }
    // Adds or replaces the bulk recipients list in a template.
    // 
    // Updates the bulk recipients in a template using a file upload. The Content-Type supported for uploading a bulk recipient file is CSV (text/csv).
    // 
    // The REST API does not support modifying individual rows or values in the bulk recipients file. It only allows the entire file to be added or replaced with a new file.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipients(PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipientsRequest) returns (BulkRecipientsSummaryResponse) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/bulk_recipients"
        body: "bulkRecipientsRequest"
      };
    }
    // Deletes the bulk recipient list on a template.
    // 
    // Deletes the bulk recipient list on a template.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipients(DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdBulk_recipientsRequest) returns (BulkRecipientsUpdateResponse) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/bulk_recipients"
      };
    }
    // Returns document visibility for the recipients
    rpc GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdDocument_visibility(GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdDocument_visibilityRequest) returns (EnvelopeDocumentVisibility) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/document_visibility"
      };
    }
    // Updates document visibility for the recipients
    rpc PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdDocument_visibility(PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdDocument_visibilityRequest) returns (TemplateDocumentVisibility) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/document_visibility"
        body: "TemplateDocumentVisibility"
      };
    }
    // Gets the tabs information for a signer or sign-in-person recipient in a template.
    // 
    // Gets the tabs information for a signer or sign-in-person recipient in a template.
    rpc GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabs(GetV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabsRequest) returns (TemplateRecipientTabs) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs"
      };
    }
    // Updates the tabs for a recipient.
    // 
    // Updates one or more tabs for a recipient in a template.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabs(PutV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabsRequest) returns (TemplateRecipientTabs) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs"
        body: "templateTabs"
      };
    }
    // Adds tabs for a recipient.
    // 
    // Adds one or more tabs for a recipient.
    rpc PostV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabs(PostV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabsRequest) returns (TemplateRecipientTabs) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs"
        body: "templateTabs"
      };
    }
    // Deletes the tabs associated with a recipient in a template.
    // 
    // Deletes one or more tabs associated with a recipient in a template.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabs(DeleteV2AccountsAccountIdTemplatesTemplateIdRecipientsRecipientIdTabsRequest) returns (TemplateRecipientTabs) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs"
        body: "templateTabs"
      };
    }
    // Provides a URL to start an edit view of the Template UI
    rpc PostV2AccountsAccountIdTemplatesTemplateIdViewsEdit(PostV2AccountsAccountIdTemplatesTemplateIdViewsEditRequest) returns (TemplateViews) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/templates/{templateId}/views/edit"
        body: "returnUrlRequest"
      };
    }
    // Shares a template with a group
    // 
    // Shares a template with the specified members group.
    rpc PutV2AccountsAccountIdTemplatesTemplateIdTemplatePart(PutV2AccountsAccountIdTemplatesTemplateIdTemplatePartRequest) returns (Groups) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/templates/{templateId}/{templatePart}"
        body: "Groups"
      };
    }
    // Removes a member group's sharing permissions for a template.
    // 
    // Removes a member group's sharing permissions for a specified template.
    rpc DeleteV2AccountsAccountIdTemplatesTemplateIdTemplatePart(DeleteV2AccountsAccountIdTemplatesTemplateIdTemplatePartRequest) returns (Groups) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/templates/{templateId}/{templatePart}"
        body: "Groups"
      };
    }
    // Gets a list of unsupported file types.
    // 
    // Retrieves a list of file types (mime-types and file-extensions) that are not supported for upload through the DocuSign system.
    rpc GetV2AccountsAccountIdUnsupported_file_types(GetV2AccountsAccountIdUnsupported_file_typesRequest) returns (FileTypeList) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/unsupported_file_types"
      };
    }
    // Retrieves the list of users for the specified account.
    // 
    // Retrieves the list of users for the specified account.
    // 
    // The response returns the list of users for the account along with the information about the result set. If the `additional_info` query was added to the endpoint and set to **true**, the full user information is returned for each user
    rpc GetV2AccountsAccountIdUsers(GetV2AccountsAccountIdUsersRequest) returns (UserInformationList) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users"
      };
    }
    // Change one or more user in the specified account.
    rpc PutV2AccountsAccountIdUsers(PutV2AccountsAccountIdUsersRequest) returns (UserInformationList) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users"
        body: "userInformationList"
      };
    }
    // Adds news user to the specified account.
    // 
    // Adds new users to your account. Set the `userSettings` property in the request to specify the actions the users can perform on the account.
    rpc PostV2AccountsAccountIdUsers(PostV2AccountsAccountIdUsersRequest) returns (NewUsersSummary) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/users"
        body: "newUsersDefinition"
      };
    }
    // Removes users account privileges.
    // 
    // This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.
    // 
    // The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an `errorDetails` node with `errorCode` and `message` properties.
    rpc DeleteV2AccountsAccountIdUsers(DeleteV2AccountsAccountIdUsersRequest) returns (GroupUsers) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/users"
        body: "userInfoList"
      };
    }
    // Gets the user information for a specified user.
    // 
    // Retrieves the user information for the specified user. 
    // 
    // To return additional user information that details the last login date, login status, and the user's password expiration date, set the optional `additional_info` query string parameter to **true**.
    rpc GetV2AccountsAccountIdUsersUserId(GetV2AccountsAccountIdUsersUserIdRequest) returns (Users) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}"
      };
    }
    // Updates the specified user information.
    rpc PutV2AccountsAccountIdUsersUserId(PutV2AccountsAccountIdUsersUserIdRequest) returns (Users) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}"
        body: "Users"
      };
    }
    // Get the Cloud Storage Provider configuration for the specified user.
    // 
    // Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
    rpc GetV2AccountsAccountIdUsersUserIdCloud_storage(GetV2AccountsAccountIdUsersUserIdCloud_storageRequest) returns (CloudStorageProviders) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/cloud_storage"
      };
    }
    // Configures the redirect URL information  for one or more cloud storage providers for the specified user.
    // 
    // Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
    rpc PostV2AccountsAccountIdUsersUserIdCloud_storage(PostV2AccountsAccountIdUsersUserIdCloud_storageRequest) returns (CloudStorageProviders) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/users/{userId}/cloud_storage"
        body: "CloudStorageProviders"
      };
    }
    // Deletes the user authentication information for one or more cloud storage providers.
    // 
    // Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
    rpc DeleteV2AccountsAccountIdUsersUserIdCloud_storage(DeleteV2AccountsAccountIdUsersUserIdCloud_storageRequest) returns (CloudStorageProviders) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/users/{userId}/cloud_storage"
        body: "CloudStorageProviders"
      };
    }
    // Gets the specified Cloud Storage Provider configuration for the User.
    // 
    // Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
    rpc GetV2AccountsAccountIdUsersUserIdCloud_storageServiceId(GetV2AccountsAccountIdUsersUserIdCloud_storageServiceIdRequest) returns (CloudStorageProviders) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}"
      };
    }
    // Deletes the user authentication information for the specified cloud storage provider.
    // 
    // Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
    rpc DeleteV2AccountsAccountIdUsersUserIdCloud_storageServiceId(DeleteV2AccountsAccountIdUsersUserIdCloud_storageServiceIdRequest) returns (CloudStorageProviders) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}"
      };
    }
    // Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
    // 
    // Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
    rpc GetV2AccountsAccountIdUsersUserIdCloud_storageServiceIdFolders(GetV2AccountsAccountIdUsersUserIdCloud_storageServiceIdFoldersRequest) returns (CloudStorage) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders"
      };
    }
    // Gets a list of all the items from the specified cloud storage provider.
    // 
    // Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
    rpc GetV2AccountsAccountIdUsersUserIdCloud_storageServiceIdFoldersFolderId(GetV2AccountsAccountIdUsersUserIdCloud_storageServiceIdFoldersFolderIdRequest) returns (CloudStorage) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders/{folderId}"
      };
    }
    // Retrieves the custom user settings for a specified user.
    // 
    // Retrieves a list of custom user settings for a single user.
    // 
    // Custom settings provide a flexible way to store and retrieve custom user information that can be used in your own system.
    // 
    // ###### Note: Custom user settings are not the same as user account settings.
    // 
    // ###Getting Grouped Custom User Settings###
    // 
    // If the custom user settings you want to retrieve are grouped, you must include the following information in the header, after Content-Type, in the request:
    // 
    // `X-DocuSign-User-Settings-Key:group_name`
    // 
    // Where the `group_name` is your designated name for the group of customer user settings.
    // 
    // If the extra header information is not included, only the custom user settings that were added without a group are retrieved.
    rpc GetV2AccountsAccountIdUsersUserIdCustom_settings(GetV2AccountsAccountIdUsersUserIdCustom_settingsRequest) returns (UserCustomSettings) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/custom_settings"
      };
    }
    // Adds or updates custom user settings for the specified user.
    // 
    // Adds or updates custom user settings for the specified user.
    // 
    // ###### Note: Custom user settings are not the same as user account settings.
    // 
    // Custom settings provide a flexible way to store and retrieve custom user information that you can use in your own system.
    // 
    // **Important**: There is a limit on the size for all the custom user settings for a single user. The limit is 4,000 characters, which includes the XML and JSON structure for the settings.
    // 
    // ### Grouping Custom User Settings ###
    // 
    // You can group custom user settings when adding them. Grouping allows you to retrieve settings that are in a specific group, instead of retrieving all the user custom settings.
    // 
    // To group custom user settings, add the following information in the header, after Content-Type:
    // 
    // `X-DocuSign-User-Settings-Key:group_name`
    // 
    // Where the `group_name` is your designated name for the group of customer user settings. Grouping is shown in the Example Request Body below.
    // 
    // When getting or deleting grouped custom user settings, you must include the extra header information.
    // 
    // Grouping custom user settings is not required and if the extra header information is not included, the custom user settings are added normally and can be retrieved or deleted without including the additional header.
    rpc PutV2AccountsAccountIdUsersUserIdCustom_settings(PutV2AccountsAccountIdUsersUserIdCustom_settingsRequest) returns (UserCustomSettings) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}/custom_settings"
        body: "UserCustomSettings"
      };
    }
    // Deletes custom user settings for a specified user.
    // 
    // Deletes the specified custom user settings for a single user.
    // 
    // ###Deleting Grouped Custom User Settings###
    // 
    // If the custom user settings you want to delete are grouped, you must include the following information in the header, after Content-Type, in the request:
    // 
    // `X-DocuSign-User-Settings-Key:group_name`
    // 
    // Where the `group_name` is your designated name for the group of customer user settings.
    // 
    // If the extra header information is not included, only the custom user settings that were added without a group are deleted.
    rpc DeleteV2AccountsAccountIdUsersUserIdCustom_settings(DeleteV2AccountsAccountIdUsersUserIdCustom_settingsRequest) returns (UserCustomSettings) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/users/{userId}/custom_settings"
        body: "UserCustomSettings"
      };
    }
    // Retrieves the user profile for a specified user.
    // 
    // Retrieves the user profile information, the privacy settings and personal information (address, phone number, etc.) for the specified user.
    // 
    // The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.
    rpc GetV2AccountsAccountIdUsersUserIdProfile(GetV2AccountsAccountIdUsersUserIdProfileRequest) returns (UserProfiles) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/profile"
      };
    }
    // Updates the user profile information for the specified user.
    // 
    // Updates the user's detail information, profile information, privacy settings, and personal information in the user ID card.
    // 
    // You can also change a user's name by changing the information in the `userDetails` property. When changing a user's name, you can either change the information in the `userName` property OR change the information in `firstName`, `middleName`, `lastName, suffixName`, and `title` properties. Changes to `firstName`, `middleName`, `lastName`, `suffixName`, and `title` properties take precedence over changes to the `userName` property.
    rpc PutV2AccountsAccountIdUsersUserIdProfile(PutV2AccountsAccountIdUsersUserIdProfileRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}/profile"
        body: "UserProfiles"
      };
    }
    // Retrieves the user profile image for the specified user.
    // 
    // Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.
    // 
    // The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.
    // 
    // If successful, the response returns a 200 - OK and the user profile image.
    rpc GetV2AccountsAccountIdUsersUserIdProfileImage(GetV2AccountsAccountIdUsersUserIdProfileImageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/profile/image"
      };
    }
    // Updates the user profile image for a specified user.
    // 
    // Updates the user profile image by uploading an image to the user profile.
    // 
    // The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
    rpc PutV2AccountsAccountIdUsersUserIdProfileImage(PutV2AccountsAccountIdUsersUserIdProfileImageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}/profile/image"
      };
    }
    // Deletes the user profile image for the specified user.
    // 
    // Deletes the user profile image from the  specified user's profile.
    // 
    // The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.
    rpc DeleteV2AccountsAccountIdUsersUserIdProfileImage(DeleteV2AccountsAccountIdUsersUserIdProfileImageRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/users/{userId}/profile/image"
      };
    }
    // Gets the user account settings for a specified user.
    // 
    // Retrieves a list of the account settings and email notification information for the specified user.
    // 
    // The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
    rpc GetV2AccountsAccountIdUsersUserIdSettings(GetV2AccountsAccountIdUsersUserIdSettingsRequest) returns (UserSettingsInformation) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/settings"
      };
    }
    // Updates the user account settings for a specified user.
    // 
    // Updates the account settings list and email notification types for the specified user.
    rpc PutV2AccountsAccountIdUsersUserIdSettings(PutV2AccountsAccountIdUsersUserIdSettingsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}/settings"
        body: "userSettingsInformation"
      };
    }
    // Retrieves a list of user signature definitions for a specified user.
    // 
    // Retrieves the signature definitions for the specified user.
    // 
    // The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.
    // 
    // The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 
    // 
    // For example encode "Bob Smith" as "Bob%20Smith".
    rpc GetV2AccountsAccountIdUsersUserIdSignatures(GetV2AccountsAccountIdUsersUserIdSignaturesRequest) returns (UserSignaturesInformation) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures"
      };
    }
    // Adds/updates a user signature.
    rpc PutV2AccountsAccountIdUsersUserIdSignatures(PutV2AccountsAccountIdUsersUserIdSignaturesRequest) returns (UserSignaturesInformation) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures"
        body: "userSignaturesInformation"
      };
    }
    // Adds user Signature and initials images to a Signature.
    // 
    // Adds a user signature image and/or user initials image to the specified user. 
    // 
    // The userId property specified in the endpoint must match the authenticated user's userId and the user must be a member of the account.
    // 
    // The rules and processes associated with this are:
    // 
    // * If Content-Type is set to application/json, then the default behavior for creating a default signature image, based on the name and a DocuSign font, is used.
    // * If Content-Type is set to multipart/form-data, then the request must contain a first part with the user signature information, followed by parts that contain the images.
    // 
    // For each Image part, the Content-Disposition header has a "filename" value that is used to map to the `signatureName` and/or `signatureInitials` properties in the JSON to the image. 
    // 
    // For example: 
    // `Content-Disposition: file; filename="Ron Test20121127083900"`
    // 
    // If no matching image (by filename value) is found, then the image is not set. One, both, or neither of the signature and initials images can be set with this call.
    // 
    // The Content-Transfer-Encoding: base64 header, set in the header for the part containing the image, can be set to indicate that the images are formatted as base64 instead of as binary.
    // 
    // If successful, 200-OK is returned, and a JSON structure containing the signature information is provided, note that the signatureId can change with each API POST, PUT, or DELETE since the changes to the signature structure cause the current signature to be closed, and a new signature record to be created.
    rpc PostV2AccountsAccountIdUsersUserIdSignatures(PostV2AccountsAccountIdUsersUserIdSignaturesRequest) returns (UserSignaturesInformation) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures"
        body: "userSignaturesInformation"
      };
    }
    // Gets the user signature information for the specified user.
    // 
    // Retrieves the structure of a single signature with a known signature name.
    // 
    // The userId specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.
    // 
    // The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 
    // 
    // For example encode "Bob Smith" as "Bob%20Smith".
    rpc GetV2AccountsAccountIdUsersUserIdSignaturesSignatureId(GetV2AccountsAccountIdUsersUserIdSignaturesSignatureIdRequest) returns (UserSignatures) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures/{signatureId}"
      };
    }
    // Updates the user signature for a specified user.
    // 
    // Creates, or updates, the signature font and initials for the specified user. When creating a signature, you use this resource to create the signature name and then add the signature and initials images into the signature.
    // 
    // ###### Note: This will also create a default signature for the user when one does not exist.
    // 
    // The userId property specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.
    // 
    // The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 
    // 
    // For example encode "Bob Smith" as "Bob%20Smith".
    rpc PutV2AccountsAccountIdUsersUserIdSignaturesSignatureId(PutV2AccountsAccountIdUsersUserIdSignaturesSignatureIdRequest) returns (UserSignatures) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures/{signatureId}"
        body: "userSignatureDefinition"
      };
    }
    // Removes removes signature information for the specified user.
    // 
    // Removes the signature information for the user.
    // 
    // The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.
    // 
    // The `signatureId` accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 
    // 
    // For example encode "Bob Smith" as "Bob%20Smith".
    rpc DeleteV2AccountsAccountIdUsersUserIdSignaturesSignatureId(DeleteV2AccountsAccountIdUsersUserIdSignaturesSignatureIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures/{signatureId}"
      };
    }
    // Retrieves the user initials image or the  user signature image for the specified user.
    // 
    // Retrieves the specified initials image or signature image for the specified user. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.
    // 
    // The userId property specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.
    // 
    // The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 
    // 
    // For example encode "Bob Smith" as "Bob%20Smith".
    // 
    // ###### Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
    rpc GetV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageType(GetV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures/{signatureId}/{imageType}"
      };
    }
    // Updates the user signature image or user initials image for the specified user.
    // 
    // Updates the user signature image or user initials image for the specified user. The supported image formats for this file are: gif, png, jpeg, and bmp. The file must be less than 200K.
    // 
    // The userId property specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.
    // 
    // The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 
    // 
    // For example encode "Bob Smith" as "Bob%20Smith".
    rpc PutV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageType(PutV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageTypeRequest) returns (UserSignatures) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures/{signatureId}/{imageType}"
      };
    }
    // Deletes the user initials image or the  user signature image for the specified user.
    // 
    // Deletes the specified initials image or signature image for the specified user.
    // 
    // The function deletes one or the other of the image types, to delete both the initials image and signature image you must call the endpoint twice.
    // 
    // The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.
    // 
    // The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 
    // 
    // For example encode "Bob Smith" as "Bob%20Smith".
    rpc DeleteV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageType(DeleteV2AccountsAccountIdUsersUserIdSignaturesSignatureIdImageTypeRequest) returns (UserSignatures) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/users/{userId}/signatures/{signatureId}/{imageType}"
      };
    }
    // Gets a list of a user's social accounts.
    // 
    // Retrieves a list of social accounts linked to a user's account.
    rpc GetV2AccountsAccountIdUsersUserIdSocial(GetV2AccountsAccountIdUsersUserIdSocialRequest) returns (UserSocialIdResult) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/users/{userId}/social"
      };
    }
    // Adds social account for a user.
    // 
    // Adds a new social account to a user's account.
    rpc PutV2AccountsAccountIdUsersUserIdSocial(PutV2AccountsAccountIdUsersUserIdSocialRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/users/{userId}/social"
        body: "UserSocialAccountLogins"
      };
    }
    // Deletes user's social account.
    // 
    // Deletes a social account from a use's account.
    rpc DeleteV2AccountsAccountIdUsersUserIdSocial(DeleteV2AccountsAccountIdUsersUserIdSocialRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/users/{userId}/social"
        body: "UserSocialAccountLogins"
      };
    }
    // Returns a URL to the authentication view UI.
    // 
    // Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
    rpc PostV2AccountsAccountIdViewsConsole(PostV2AccountsAccountIdViewsConsoleRequest) returns (EnvelopeViews) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/views/console"
        body: "consoleViewRequest"
      };
    }
    // Get watermark information.
    rpc GetV2AccountsAccountIdWatermark(GetV2AccountsAccountIdWatermarkRequest) returns (AccountWatermarks) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/watermark"
      };
    }
    // Update watermark information.
    rpc PutV2AccountsAccountIdWatermark(PutV2AccountsAccountIdWatermarkRequest) returns (AccountWatermarks) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/watermark"
        body: "AccountWatermarks"
      };
    }
    // Get watermark preview.
    rpc PutV2AccountsAccountIdWatermarkPreview(PutV2AccountsAccountIdWatermarkPreviewRequest) returns (AccountWatermarks) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/watermark/preview"
        body: "AccountWatermarks"
      };
    }
    // List Workspaces
    // 
    // Gets information about the Workspaces that have been created.
    rpc GetV2AccountsAccountIdWorkspaces(GetV2AccountsAccountIdWorkspacesRequest) returns (WorkspaceList) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/workspaces"
      };
    }
    // Create a Workspace
    // 
    // Creates a new workspace.
    rpc PostV2AccountsAccountIdWorkspaces(PostV2AccountsAccountIdWorkspacesRequest) returns (Workspaces) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/workspaces"
        body: "Workspaces"
      };
    }
    // Get Workspace
    // 
    // Retrives properties about a workspace given a unique workspaceId.
    rpc GetV2AccountsAccountIdWorkspacesWorkspaceId(GetV2AccountsAccountIdWorkspacesWorkspaceIdRequest) returns (Workspaces) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}"
      };
    }
    // Update Workspace
    // 
    // Updates information about a specific workspace.
    rpc PutV2AccountsAccountIdWorkspacesWorkspaceId(PutV2AccountsAccountIdWorkspacesWorkspaceIdRequest) returns (Workspaces) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}"
        body: "Workspaces"
      };
    }
    // Delete Workspace
    // 
    // Deletes an existing workspace (logically).
    rpc DeleteV2AccountsAccountIdWorkspacesWorkspaceId(DeleteV2AccountsAccountIdWorkspacesWorkspaceIdRequest) returns (Workspaces) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}"
      };
    }
    // List Workspace Folder Contents
    // 
    // Retrieves workspace folder contents, which can include sub folders and files.
    rpc GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderId(GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdRequest) returns (WorkspaceFolderContents) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}"
      };
    }
    // Deletes workspace one or more specific files/folders from the given folder or root.
    rpc DeleteV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderId(DeleteV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}"
        body: "workspaceItemList"
      };
    }
    // Creates a workspace file.
    rpc PostV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFiles(PostV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesRequest) returns (WorkspaceItems) {
      option (google.api.http) = {
        post: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files"
      };
    }
    // Get Workspace File
    // 
    // Retrieves a workspace file (the binary).
    rpc GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileId(GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}"
      };
    }
    // Update Workspace File Metadata
    // 
    // Updates workspace item metadata for one or more specific files/folders.
    rpc PutV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileId(PutV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileIdRequest) returns (WorkspaceItems) {
      option (google.api.http) = {
        put: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}"
      };
    }
    // List File Pages
    // 
    // Retrieves a workspace file as rasterized pages.
    rpc GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileIdPages(GetV2AccountsAccountIdWorkspacesWorkspaceIdFoldersFolderIdFilesFileIdPagesRequest) returns (PageImages) {
      option (google.api.http) = {
        get: "/restapi/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}/pages"
      };
    }
    // Gets the list of available billing plans.
    // 
    // Retrieves a list of the billing plans associated with a distributor.
    rpc GetV2Billing_plans(google.protobuf.Empty) returns (BillingPlansResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/billing_plans"
      };
    }
    // Get the billing plan details.
    // 
    // Retrieves the billing plan details for the specified billing plan ID.
    rpc GetV2Billing_plansBillingPlanId(GetV2Billing_plansBillingPlanIdRequest) returns (BillingPlanResponse) {
      option (google.api.http) = {
        get: "/restapi/v2/billing_plans/{billingPlanId}"
      };
    }
    // Get membership account password rules
    rpc GetV2Current_userPassword_rules(google.protobuf.Empty) returns (UserPasswordRules) {
      option (google.api.http) = {
        get: "/restapi/v2/current_user/password_rules"
      };
    }
    // Gets the API request logging log files.
    // 
    // Retrieves a list of log entries as a JSON or xml object or as a zip file containing the entries.
    // 
    // If the Accept header is set to application/zip, the response is a zip file containing individual text files, each representing an API request.
    // 
    // If the Accept header is set to `application/json` or `application/xml`, the response returns list of log entries in either JSON or XML. An example JSON response body is shown below.
    rpc GetV2DiagnosticsRequest_logs(GetV2DiagnosticsRequest_logsRequest) returns (ApiRequestLogsResult) {
      option (google.api.http) = {
        get: "/restapi/v2/diagnostics/request_logs"
      };
    }
    // Deletes the request log files.
    // 
    // Deletes the request log files.
    rpc DeleteV2DiagnosticsRequest_logs(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/restapi/v2/diagnostics/request_logs"
      };
    }
    // Gets a request logging log file.
    // 
    // Retrieves information for a single log entry.
    // 
    // **Request**
    // The `requestLogfId` property can be retrieved by getting the list of log entries. The Content-Transfer-Encoding header can be set to base64 to retrieve the API request/response as base 64 string. Otherwise the bytes of the request/response are returned.
    // 
    // **Response**
    // If the Content-Transfer-Encoding header was set to base64, the log is returned as a base64 string.
    rpc GetV2DiagnosticsRequest_logsRequestLogId(GetV2DiagnosticsRequest_logsRequestLogIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/restapi/v2/diagnostics/request_logs/{requestLogId}"
      };
    }
    // Gets the API request logging settings.
    // 
    // Retrieves the current API request logging setting for the user and remaining log entries.
    // 
    // **Response**
    // The response includes the current API request logging setting for the user, along with the maximum log entries and remaining log entries.
    rpc GetV2DiagnosticsSettings(google.protobuf.Empty) returns (RequestLogs) {
      option (google.api.http) = {
        get: "/restapi/v2/diagnostics/settings"
      };
    }
    // Enables or disables API request logging for troubleshooting.
    // 
    // Enables or disables API request logging for troubleshooting.
    // 
    // When enabled (`apiRequestLogging` is set to true), REST API requests and responses for the user are added to a log. A log can have up to 50 requests/responses and the current number of log entries can be determined by getting the settings. Logging is automatically disabled when the log limit of 50 is reached.
    // 
    // You can call [ML:GetRequestLog] or [ML:GetRequestLogs] to download the log files (individually or as a zip file). Call [ML:DeleteRequestLogs] to clear the log by deleting current entries.
    // 
    // Private information, such as passwords and integrator key information, which is normally located in the call header is omitted from the request/response log.
    // 
    // ###### Note: API request logging only captures requests from the authenticated user. Any call that does not authenticate the user and resolve a userId isn't logged. Meaning that login_information, NewAccounts, or other distributor-credential calls are not logged.
    rpc PutV2DiagnosticsSettings(PutV2DiagnosticsSettingsRequest) returns (RequestLogs) {
      option (google.api.http) = {
        put: "/restapi/v2/diagnostics/settings"
        body: "RequestLogs"
      };
    }
    // Gets login information for a specified user.
    // 
    // Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in. 
    // Instead, the method returns information about the account or accounts that the authenticated user has access to.
    // 
    // ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [`AccountServer: userInfo` method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.
    // 
    // Each account has a `baseUrl` property, returned in the response.
    // Use this `baseUrl` in all future API calls as the base of the request URL.
    // 
    // For each account, the `baseUrl` property includes the DocuSign server, the API version, and the `accountId` property.
    // 
    // It is not uncommon for an authenticated user to have access to more than one account (and more than one `baseUrl`). Depending on your integration's use case, your integration may choose to:
    // 
    // * Use the account whose `isDefault` field is `true`.
    // * List the available accounts and ask the user to choose one.
    // * Enable the system administrator to set the account that should be used by your integration.
    // 
    // If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.
    // 
    // 
    // [legacyheader]: ../../../../guide/authentication/legacy_auth.html
    // [userinfo]: ../../../../guide/authentication/userinfo.html
    // [authcode]: ../../../../guide/authentication/oa2_auth_code.md
    // [implicit]: ../../../../guide/authentication/oa2_implicit.md
    rpc GetV2Login_information(GetV2Login_informationRequest) returns (Authentication) {
      option (google.api.http) = {
        get: "/restapi/v2/login_information"
      };
    }
    // Updates the password for a specified user.
    // 
    // Updates the password for a specified user.
    rpc PutV2Login_informationLoginPart(PutV2Login_informationLoginPartRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/restapi/v2/login_information/{loginPart}"
        body: "userPasswordInformation"
      };
    }
    // **Deprecated** Revokes an authorization token.
    // 
    // **Deprecated**
    // 
    // Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access.
    rpc PostV2Oauth2Revoke(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/restapi/v2/oauth2/revoke"
      };
    }
    // **Deprecated** Creates an authorization token.
    // 
    // **Deprecated**
    // 
    // Creates an OAuth2 authorization server token endpoint.
    rpc PostV2Oauth2Token(google.protobuf.Empty) returns (OauthAccess) {
      option (google.api.http) = {
        post: "/restapi/v2/oauth2/token"
      };
    }
}

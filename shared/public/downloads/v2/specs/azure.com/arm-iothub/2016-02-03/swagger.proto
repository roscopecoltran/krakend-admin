syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package iothubclient;

message GetSubscriptionsSubscriptionIdProvidersMicrosoftDevicesIotHubsRequest {
    string api_version = 1;
    string subscriptionId = 2;
}

message PostSubscriptionsSubscriptionIdProvidersMicrosoftDevicesCheckNameAvailabilityRequest {
    string api_version = 1;
    // Set the name parameter in the OperationInputs structure to the name of the IoT hub to check.
    OperationInputs operationInputs = 2;
    string subscriptionId = 3;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsRequest {
    string api_version = 1;
    // The name of the resource group that contains the IoT hubs.
    string resourceGroupName = 2;
    string subscriptionId = 3;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameRequest {
    string api_version = 1;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 2;
    // The name of the IoT hub.
    string resourceName = 3;
    string subscriptionId = 4;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameRequest {
    string api_version = 1;
    // The IoT hub metadata and security metadata.
    IotHubDescription iotHubDescription = 2;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 3;
    // The name of the IoT hub to create or update.
    string resourceName = 4;
    string subscriptionId = 5;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameRequest {
    string api_version = 1;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 2;
    // The name of the IoT hub to delete.
    string resourceName = 3;
    string subscriptionId = 4;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameIotHubKeysKeyNameListkeysRequest {
    string api_version = 1;
    // The name of the shared access policy.
    string keyName = 2;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 3;
    // The name of the IoT hub.
    string resourceName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameIotHubStatsRequest {
    string api_version = 1;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 2;
    // The name of the IoT hub.
    string resourceName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsRequest {
    string api_version = 1;
    // The name of the Event Hub-compatible endpoint.
    string eventHubEndpointName = 2;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 3;
    // The name of the IoT hub.
    string resourceName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsNameRequest {
    string api_version = 1;
    // The name of the Event Hub-compatible endpoint in the IoT hub.
    string eventHubEndpointName = 2;
    // The name of the consumer group to retrieve.
    string name = 3;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 4;
    // The name of the IoT hub.
    string resourceName = 5;
    string subscriptionId = 6;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsNameRequest {
    string api_version = 1;
    // The name of the Event Hub-compatible endpoint in the IoT hub.
    string eventHubEndpointName = 2;
    // The name of the consumer group to add.
    string name = 3;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 4;
    // The name of the IoT hub.
    string resourceName = 5;
    string subscriptionId = 6;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsNameRequest {
    string api_version = 1;
    // The name of the Event Hub-compatible endpoint in the IoT hub.
    string eventHubEndpointName = 2;
    // The name of the consumer group to delete.
    string name = 3;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 4;
    // The name of the IoT hub.
    string resourceName = 5;
    string subscriptionId = 6;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameExportDevicesRequest {
    string api_version = 1;
    // The parameters that specify the export devices operation.
    ExportDevicesRequest exportDevicesParameters = 2;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 3;
    // The name of the IoT hub.
    string resourceName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameImportDevicesRequest {
    string api_version = 1;
    // The parameters that specify the import devices operation.
    ImportDevicesRequest importDevicesParameters = 2;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 3;
    // The name of the IoT hub.
    string resourceName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameJobsRequest {
    string api_version = 1;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 2;
    // The name of the IoT hub.
    string resourceName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameJobsJobIdRequest {
    string api_version = 1;
    // The job identifier.
    string jobId = 2;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 3;
    // The name of the IoT hub.
    string resourceName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameListkeysRequest {
    string api_version = 1;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 2;
    // The name of the IoT hub.
    string resourceName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameQuotaMetricsRequest {
    string api_version = 1;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 2;
    // The name of the IoT hub.
    string resourceName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameSkusRequest {
    string api_version = 1;
    // The name of the resource group that contains the IoT hub.
    string resourceGroupName = 2;
    // The name of the IoT hub.
    string resourceName = 3;
    string subscriptionId = 4;
}

message CloudToDeviceProperties {
    // The default time to live for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
    string defaultTtlAsIso8601 = 1;
    FeedbackProperties feedback = 2;
    // The max delivery count for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
    int32 maxDeliveryCount = 3;
}

message ErrorDetails {
    // The error code.
    string Code = 1;
    // The error details.
    string Details = 2;
    // The HTTP status code.
    string HttpStatusCode = 3;
    // The error message.
    string Message = 4;
}

message EventHubConsumerGroupInfo {
    // The Event Hub-compatible consumer group identifier.
    string id = 1;
    // The Event Hub-compatible consumer group name.
    string name = 2;
    // The tags.
    map<string, string> tags = 3;
}

message EventHubConsumerGroupsListResult {
    // The next link.
    string nextLink = 1;
    // The array of Event Hub-compatible consumer group names.
    repeated string value = 2;
}

message EventHubProperties {
    // The Event Hub-compatible endpoint.
    string endpoint = 1;
    // The number of paritions for receiving device-to-cloud messages in the Event Hub-compatible endpoint. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
    int32 partitionCount = 2;
    // The partition ids in the Event Hub-compatible endpoint.
    repeated string partitionIds = 3;
    // The Event Hub-compatible name.
    string path = 4;
    // The retention time for device-to-cloud messages in days. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages
    int64 retentionTimeInDays = 5;
}

message ExportDevicesRequest {
    // The value indicating whether keys should be excluded during export.
    bool ExcludeKeys = 1;
    // The export blob container URI.
    string ExportBlobContainerUri = 2;
}

message FeedbackProperties {
    // The lock duration for the feedback queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
    string lockDurationAsIso8601 = 1;
    // The number of times the IoT hub attempts to deliver a message on the feedback queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
    int32 maxDeliveryCount = 2;
    // The period of time for which a message is available to consume before it is expired by the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
    string ttlAsIso8601 = 3;
}

message ImportDevicesRequest {
    // The input blob container URI.
    string InputBlobContainerUri = 1;
    // The output blob container URI.
    string OutputBlobContainerUri = 2;
}

message IotHubCapacity {
    // The default number of units.
    int64 default = 1;
    // The maximum number of units.
    int64 maximum = 2;
    // The minimum number of units.
    int64 minimum = 3;
    // The type of the scaling enabled.
    enum IotHubCapacity_ScaleType {
        IOTHUBCAPACITY_SCALETYPE_AUTOMATIC = 0;
        IOTHUBCAPACITY_SCALETYPE_MANUAL = 1;
        IOTHUBCAPACITY_SCALETYPE_NONE = 2;
    }
    IotHubCapacity_ScaleType scaleType = 4;
}

message IotHubDescription {
    // The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
    string etag = 1;
    IotHubProperties properties = 2;
    // The name of the resource group that contains the IoT hub. A resource group name uniquely identifies the resource group within the subscription.
    string resourcegroup = 3;
    IotHubSkuInfo sku = 4;
    // The subscription identifier.
    string subscriptionid = 5;
}

message IotHubDescriptionListResult {
    // The next link.
    string nextLink = 1;
    // The array of IotHubDescription objects.
    repeated IotHubDescription value = 2;
}

message IotHubNameAvailabilityInfo {
    // The detailed reason message.
    string message = 1;
    // The value which indicates whether the provided name is available.
    bool nameAvailable = 2;
    // The reason for unavailability.
    enum IotHubNameAvailabilityInfo_Reason {
        IOTHUBNAMEAVAILABILITYINFO_REASON_INVALID = 0;
        IOTHUBNAMEAVAILABILITYINFO_REASON_ALREADYEXISTS = 1;
    }
    IotHubNameAvailabilityInfo_Reason reason = 3;
}

message IotHubProperties {
    // The shared access policies you can use to secure a connection to the IoT hub.
    repeated SharedAccessSignatureAuthorizationRule authorizationPolicies = 1;
    CloudToDeviceProperties cloudToDevice = 2;
    // Comments.
    string comments = 3;
    // If True, file upload notifications are enabled.
    bool enableFileUploadNotifications = 4;
    // The Event Hub-compatible endpoint properties. The possible keys to this dictionary are events and operationsMonitoringEvents. Both of these keys have to be present in the dictionary while making create or update calls for the IoT hub.
    map<string, EventHubProperties> eventHubEndpoints = 5;
    // The capabilities and features enabled for the IoT hub.
    enum IotHubProperties_Feature {
        IOTHUBPROPERTIES_FEATURE_NONE = 0;
        IOTHUBPROPERTIES_FEATURE_DEVICEMANAGEMENT = 1;
    }
    IotHubProperties_Feature features = 6;
    // The name of the host.
    string hostName = 7;
    // The IP filter rules.
    repeated IpFilterRule ipFilterRules = 8;
    // The messaging endpoint properties for the file upload notification queue.
    map<string, MessagingEndpointProperties> messagingEndpoints = 9;
    OperationsMonitoringProperties operationsMonitoringProperties = 10;
    // The provisioning state.
    string provisioningState = 11;
    // The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.
    map<string, StorageEndpointProperties> storageEndpoints = 12;
}

message IotHubQuotaMetricInfo {
    // The current value for the quota metric.
    int64 CurrentValue = 1;
    // The maximum value of the quota metric.
    int64 MaxValue = 2;
    // The name of the quota metric.
    string Name = 3;
}

message IotHubQuotaMetricInfoListResult {
    // The next link.
    string nextLink = 1;
    // The array of quota metrics objects.
    repeated IotHubQuotaMetricInfo value = 2;
}

message IotHubSkuDescription {
    IotHubCapacity capacity = 1;
    // The type of the resource.
    string resourceType = 2;
    IotHubSkuInfo sku = 3;
}

message IotHubSkuDescriptionListResult {
    // The next link.
    string nextLink = 1;
    // The array of IotHubSkuDescription.
    repeated IotHubSkuDescription value = 2;
}

message IotHubSkuInfo {
    // The number of provisioned IoT Hub units. See: https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
    int64 capacity = 1;
    // The name of the SKU.
    enum IotHubSkuInfo_Name {
        IOTHUBSKUINFO_NAME_F1 = 0;
        IOTHUBSKUINFO_NAME_S1 = 1;
        IOTHUBSKUINFO_NAME_S2 = 2;
        IOTHUBSKUINFO_NAME_S3 = 3;
    }
    IotHubSkuInfo_Name name = 2;
    // The billing tier for the IoT hub.
    enum IotHubSkuInfo_Tier {
        IOTHUBSKUINFO_TIER_FREE = 0;
        IOTHUBSKUINFO_TIER_STANDARD = 1;
    }
    IotHubSkuInfo_Tier tier = 3;
}

message IpFilterRule {
    // The desired action for requests captured by this rule.
    enum IpFilterRule_Action {
        IPFILTERRULE_ACTION_ACCEPT = 0;
        IPFILTERRULE_ACTION_REJECT = 1;
    }
    IpFilterRule_Action action = 1;
    // The name of the IP filter rule.
    string filterName = 2;
    // A string that contains the IP address range in CIDR notation for the rule.
    string ipMask = 3;
}

message JobResponse {
    // The time the job stopped processing.
    string endTimeUtc = 1;
    // If status == failed, this string containing the reason for the failure.
    string failureReason = 2;
    // The job identifier.
    string jobId = 3;
    // The job identifier of the parent job, if any.
    string parentJobId = 4;
    // The start time of the job.
    string startTimeUtc = 5;
    // The status of the job.
    enum JobResponse_Statu {
        JOBRESPONSE_STATU_UNKNOWN = 0;
        JOBRESPONSE_STATU_ENQUEUED = 1;
        JOBRESPONSE_STATU_RUNNING = 2;
        JOBRESPONSE_STATU_COMPLETED = 3;
        JOBRESPONSE_STATU_FAILED = 4;
        JOBRESPONSE_STATU_CANCELLED = 5;
    }
    JobResponse_Statu status = 6;
    // The status message for the job.
    string statusMessage = 7;
    // The type of the job.
    enum JobResponse_Type {
        JOBRESPONSE_TYPE_UNKNOWN = 0;
        JOBRESPONSE_TYPE_EXPORT = 1;
        JOBRESPONSE_TYPE_IMPORT = 2;
        JOBRESPONSE_TYPE_BACKUP = 3;
        JOBRESPONSE_TYPE_READDEVICEPROPERTIES = 4;
        JOBRESPONSE_TYPE_WRITEDEVICEPROPERTIES = 5;
        JOBRESPONSE_TYPE_UPDATEDEVICECONFIGURATION = 6;
        JOBRESPONSE_TYPE_REBOOTDEVICE = 7;
        JOBRESPONSE_TYPE_FACTORYRESETDEVICE = 8;
        JOBRESPONSE_TYPE_FIRMWAREUPDATE = 9;
    }
    JobResponse_Type type = 8;
}

message JobResponseListResult {
    // The next link.
    string nextLink = 1;
    // The array of JobResponse objects.
    repeated JobResponse value = 2;
}

message MessagingEndpointProperties {
    // The lock duration. See: https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload.
    string lockDurationAsIso8601 = 1;
    // The number of times the IoT hub attempts to deliver a message. See: https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload.
    int32 maxDeliveryCount = 2;
    // The period of time for which a message is available to consume before it is expired by the IoT hub. See: https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload.
    string ttlAsIso8601 = 3;
}

message OperationInputs {
    // The name of the IoT hub to check.
    string Name = 1;
}

message OperationsMonitoringProperties {
    map<string, string> events = 1;
}

message RegistryStatistics {
    // The count of disabled devices in the identity registry.
    int64 disabledDeviceCount = 1;
    // The count of enabled devices in the identity registry.
    int64 enabledDeviceCount = 2;
    // The total count of devices in the identity registry.
    int64 totalDeviceCount = 3;
}

message SharedAccessSignatureAuthorizationRule {
    // The name of the shared access policy.
    string keyName = 1;
    // The primary key.
    string primaryKey = 2;
    // The permissions assigned to the shared access policy.
    enum SharedAccessSignatureAuthorizationRule_Right {
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYREAD = 0;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYWRITE = 1;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_SERVICECONNECT = 2;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_DEVICECONNECT = 3;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYREAD,_REGISTRYWRITE = 4;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYREAD,_SERVICECONNECT = 5;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYREAD,_DEVICECONNECT = 6;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYWRITE,_SERVICECONNECT = 7;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYWRITE,_DEVICECONNECT = 8;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_SERVICECONNECT,_DEVICECONNECT = 9;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYREAD,_REGISTRYWRITE,_SERVICECONNECT = 10;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYREAD,_REGISTRYWRITE,_DEVICECONNECT = 11;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYREAD,_SERVICECONNECT,_DEVICECONNECT = 12;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYWRITE,_SERVICECONNECT,_DEVICECONNECT = 13;
        SHAREDACCESSSIGNATUREAUTHORIZATIONRULE_RIGHT_REGISTRYREAD,_REGISTRYWRITE,_SERVICECONNECT,_DEVICECONNECT = 14;
    }
    SharedAccessSignatureAuthorizationRule_Right rights = 3;
    // The secondary key.
    string secondaryKey = 4;
}

message SharedAccessSignatureAuthorizationRuleListResult {
    // The next link.
    string nextLink = 1;
    // The list of shared access policies.
    repeated SharedAccessSignatureAuthorizationRule value = 2;
}

message StorageEndpointProperties {
    // The connection string for the Azure Storage account to which files are uploaded.
    string connectionString = 1;
    // The name of the root container where you upload files. The container need not exist but should be creatable using the connectionString specified.
    string containerName = 2;
    // The period of time for which the the SAS URI generated by IoT Hub for file upload is valid. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
    string sasTtlAsIso8601 = 3;
}

service IotHubClientService {
    // Get all the IoT hubs in a subscription.
    // 
    // Get all the IoT hubs in a subscription.
    rpc GetSubscriptionsSubscriptionIdProvidersMicrosoftDevicesIotHubs(GetSubscriptionsSubscriptionIdProvidersMicrosoftDevicesIotHubsRequest) returns (IotHubDescriptionListResult) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs"
      };
    }
    // Check if an IoT hub name is available.
    // 
    // Check if an IoT hub name is available.
    rpc PostSubscriptionsSubscriptionIdProvidersMicrosoftDevicesCheckNameAvailability(PostSubscriptionsSubscriptionIdProvidersMicrosoftDevicesCheckNameAvailabilityRequest) returns (IotHubNameAvailabilityInfo) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability"
        body: "operationInputs"
      };
    }
    // Get all the IoT hubs in a resource group.
    // 
    // Get all the IoT hubs in a resource group.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubs(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsRequest) returns (IotHubDescriptionListResult) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs"
      };
    }
    // Get the non-security related metadata of an IoT hub.
    // 
    // Get the non-security related metadata of an IoT hub.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameRequest) returns (IotHubDescription) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"
      };
    }
    // Create or update the metadata of an IoT hub.
    // 
    // Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameRequest) returns (IotHubDescription) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"
        body: "iotHubDescription"
      };
    }
    // Delete an IoT hub.
    // 
    // Delete an IoT hub.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameRequest) returns (IotHubDescription) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"
      };
    }
    // Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
    // 
    // Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameIotHubKeysKeyNameListkeys(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameIotHubKeysKeyNameListkeysRequest) returns (SharedAccessSignatureAuthorizationRule) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys"
      };
    }
    // Get the statistics from an IoT hub.
    // 
    // Get the statistics from an IoT hub.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameIotHubStats(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameIotHubStatsRequest) returns (RegistryStatistics) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats"
      };
    }
    // Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
    // 
    // Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroups(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsRequest) returns (EventHubConsumerGroupsListResult) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups"
      };
    }
    // Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
    // 
    // Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsNameRequest) returns (EventHubConsumerGroupInfo) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"
      };
    }
    // Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
    // 
    // Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsNameRequest) returns (EventHubConsumerGroupInfo) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"
      };
    }
    // Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
    // 
    // Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameEventHubEndpointsEventHubEndpointNameConsumerGroupsNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"
      };
    }
    // Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
    // 
    // Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameExportDevices(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameExportDevicesRequest) returns (JobResponse) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices"
        body: "exportDevicesParameters"
      };
    }
    // Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
    // 
    // Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameImportDevices(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameImportDevicesRequest) returns (JobResponse) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices"
        body: "importDevicesParameters"
      };
    }
    // Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
    // 
    // Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameJobs(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameJobsRequest) returns (JobResponseListResult) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs"
      };
    }
    // Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
    // 
    // Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameJobsJobId(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameJobsJobIdRequest) returns (JobResponse) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}"
      };
    }
    // Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
    // 
    // Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameListkeys(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameListkeysRequest) returns (SharedAccessSignatureAuthorizationRuleListResult) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys"
      };
    }
    // Get the quota metrics for an IoT hub.
    // 
    // Get the quota metrics for an IoT hub.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameQuotaMetrics(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameQuotaMetricsRequest) returns (IotHubQuotaMetricInfoListResult) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics"
      };
    }
    // Get the list of valid SKUs for an IoT hub.
    // 
    // Get the list of valid SKUs for an IoT hub.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameSkus(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftDevicesIotHubsResourceNameSkusRequest) returns (IotHubSkuDescriptionListResult) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus"
      };
    }
}

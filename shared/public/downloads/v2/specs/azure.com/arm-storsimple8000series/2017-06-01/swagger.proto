syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package storsimple8000seriesmanagementclient;

message GetProvidersMicrosoftStorSimpleOperationsRequest {
    string api_version = 1;
}

message GetSubscriptionsSubscriptionIdProvidersMicrosoftStorSimpleManagersRequest {
    string api_version = 1;
    string subscriptionId = 2;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersRequest {
    string api_version = 1;
    string resourceGroupName = 2;
    string subscriptionId = 3;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRequest {
    string api_version = 1;
    string managerName = 2;
    // The manager.
    Manager parameters = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordNameRequest {
    // Name of access control record to be fetched.
    string accessControlRecordName = 1;
    string api_version = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordNameRequest {
    // The name of the access control record.
    string accessControlRecordName = 1;
    string api_version = 2;
    string managerName = 3;
    // The access control record to be added or updated.
    AccessControlRecord parameters = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordNameRequest {
    // The name of the access control record to delete.
    string accessControlRecordName = 1;
    string api_version = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAlertsRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingNameRequest {
    string api_version = 1;
    // The name of bandwidth setting to be fetched.
    string bandwidthSettingName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingNameRequest {
    string api_version = 1;
    // The bandwidth setting name.
    string bandwidthSettingName = 2;
    string managerName = 3;
    // The bandwidth setting to be added or updated.
    BandwidthSetting parameters = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingNameRequest {
    string api_version = 1;
    // The name of the bandwidth setting.
    string bandwidthSettingName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameClearAlertsRequest {
    string api_version = 1;
    string managerName = 2;
    // The clear alert request.
    ClearAlertRequest parameters = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameCloudApplianceConfigurationsRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameConfigureDeviceRequest {
    string api_version = 1;
    string managerName = 2;
    // The minimal properties to configure a device.
    ConfigureDeviceRequest parameters = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesRequest {
    // Specify $expand=details to populate additional fields related to the device or $expand=rolloverdetails to populate additional fields related to the service data encryption key rollover on device
    string $expand = 1;
    string api_version = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameRequest {
    // Specify $expand=details to populate additional fields related to the device or $expand=rolloverdetails to populate additional fields related to the service data encryption key rollover on device
    string $expand = 1;
    string api_version = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAlertSettingsDefaultRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAlertSettingsDefaultRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    // The alert settings to be added or updated.
    AlertSettings parameters = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAuthorizeForServiceEncryptionKeyRolloverRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameRequest {
    string api_version = 1;
    // The name of backup policy to be fetched.
    string backupPolicyName = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameRequest {
    string api_version = 1;
    // The name of the backup policy to be created/updated.
    string backupPolicyName = 2;
    string deviceName = 3;
    string managerName = 4;
    // The backup policy.
    BackupPolicy parameters = 5;
    string resourceGroupName = 6;
    string subscriptionId = 7;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameRequest {
    string api_version = 1;
    // The name of the backup policy.
    string backupPolicyName = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameBackupRequest {
    string api_version = 1;
    // The backup policy name.
    string backupPolicyName = 2;
    // The backup Type. This can be cloudSnapshot or localSnapshot.
    string backupType = 3;
    string deviceName = 4;
    string managerName = 5;
    string resourceGroupName = 6;
    string subscriptionId = 7;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesRequest {
    string api_version = 1;
    // The backup policy name.
    string backupPolicyName = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleNameRequest {
    string api_version = 1;
    // The backup policy name.
    string backupPolicyName = 2;
    // The name of the backup schedule to be fetched
    string backupScheduleName = 3;
    string deviceName = 4;
    string managerName = 5;
    string resourceGroupName = 6;
    string subscriptionId = 7;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleNameRequest {
    string api_version = 1;
    // The backup policy name.
    string backupPolicyName = 2;
    // The backup schedule name.
    string backupScheduleName = 3;
    string deviceName = 4;
    string managerName = 5;
    // The backup schedule.
    BackupSchedule parameters = 6;
    string resourceGroupName = 7;
    string subscriptionId = 8;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleNameRequest {
    string api_version = 1;
    // The backup policy name.
    string backupPolicyName = 2;
    // The name the backup schedule.
    string backupScheduleName = 3;
    string deviceName = 4;
    string managerName = 5;
    string resourceGroupName = 6;
    string subscriptionId = 7;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupNameRequest {
    string api_version = 1;
    // The backup name.
    string backupName = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupNameElementsBackupElementNameCloneRequest {
    string api_version = 1;
    // The backup element name.
    string backupElementName = 2;
    // The backup name.
    string backupName = 3;
    string deviceName = 4;
    string managerName = 5;
    // The clone request object.
    CloneRequest parameters = 6;
    string resourceGroupName = 7;
    string subscriptionId = 8;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupNameRestoreRequest {
    string api_version = 1;
    // The backupSet name
    string backupName = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameDeactivateRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameHardwareComponentGroupsRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameHardwareComponentGroupsHardwareComponentGroupNameChangeControllerPowerStateRequest {
    string api_version = 1;
    string deviceName = 2;
    // The hardware component group name.
    string hardwareComponentGroupName = 3;
    string managerName = 4;
    // The controller power state change request.
    ControllerPowerStateChangeRequest parameters = 5;
    string resourceGroupName = 6;
    string subscriptionId = 7;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameInstallUpdatesRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobsRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobsJobNameRequest {
    string api_version = 1;
    string deviceName = 2;
    // The job Name.
    string jobName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobsJobNameCancelRequest {
    string api_version = 1;
    string deviceName = 2;
    // The jobName.
    string jobName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameListFailoverSetsRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameMetricsRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameMetricsDefinitionsRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameNetworkSettingsDefaultRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNamePublicEncryptionKeyRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameScanForUpdatesRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSecuritySettingsDefaultRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSecuritySettingsDefaultSyncRemoteManagementCertificateRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSendTestAlertEmailRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    // The send test alert email request.
    SendTestAlertEmailRequest parameters = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameTimeSettingsDefaultRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameTimeSettingsDefaultRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    // The time settings to be added or updated.
    TimeSettings parameters = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameUpdateSummaryDefaultRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
    // The name of the volume container.
    string volumeContainerName = 6;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    // The volume container to be added or updated.
    VolumeContainer parameters = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
    // The name of the volume container.
    string volumeContainerName = 7;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
    // The name of the volume container.
    string volumeContainerName = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameMetricsRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
    // The volume container name.
    string volumeContainerName = 7;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameMetricsDefinitionsRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
    // The volume container name.
    string volumeContainerName = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
    // The volume container name.
    string volumeContainerName = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
    // The volume container name.
    string volumeContainerName = 6;
    // The volume name.
    string volumeName = 7;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    // Volume to be created or updated.
    Volume parameters = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
    // The volume container name.
    string volumeContainerName = 7;
    // The volume name.
    string volumeName = 8;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
    // The volume container name.
    string volumeContainerName = 6;
    // The volume name.
    string volumeName = 7;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameMetricsRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string deviceName = 3;
    string managerName = 4;
    string resourceGroupName = 5;
    string subscriptionId = 6;
    // The volume container name.
    string volumeContainerName = 7;
    // The volume name.
    string volumeName = 8;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameMetricsDefinitionsRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
    // The volume container name.
    string volumeContainerName = 6;
    // The volume name.
    string volumeName = 7;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumesRequest {
    string api_version = 1;
    string deviceName = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesSourceDeviceNameFailoverRequest {
    string api_version = 1;
    string managerName = 2;
    // FailoverRequest containing the source device and the list of volume containers to be failed over.
    FailoverRequest parameters = 3;
    string resourceGroupName = 4;
    // The source device name on which failover is performed.
    string sourceDeviceName = 5;
    string subscriptionId = 6;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesSourceDeviceNameListFailoverTargetsRequest {
    string api_version = 1;
    string managerName = 2;
    // ListFailoverTargetsRequest containing the list of volume containers to be failed over.
    ListFailoverTargetsRequest parameters = 3;
    string resourceGroupName = 4;
    // The source device name on which failover is performed.
    string sourceDeviceName = 5;
    string subscriptionId = 6;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameEncryptionSettingsDefaultRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfoRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfoRequest {
    string api_version = 1;
    string managerName = 2;
    // The manager extended information.
    ManagerExtendedInfo parameters = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfoRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameFeaturesRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameJobsRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameListActivationKeyRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameListPublicEncryptionKeyRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameMetricsRequest {
    // OData Filter options
    string $filter = 1;
    string api_version = 2;
    string managerName = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameMetricsDefinitionsRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameProvisionCloudApplianceRequest {
    string api_version = 1;
    string managerName = 2;
    // The cloud appliance
    CloudAppliance parameters = 3;
    string resourceGroupName = 4;
    string subscriptionId = 5;
}

message PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRegenerateActivationKeyRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    string subscriptionId = 4;
}

message GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialNameRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    // The name of storage account credential to be fetched.
    string storageAccountCredentialName = 4;
    string subscriptionId = 5;
}

message PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialNameRequest {
    string api_version = 1;
    string managerName = 2;
    // The storage account credential to be added or updated.
    StorageAccountCredential parameters = 3;
    string resourceGroupName = 4;
    // The storage account credential name.
    string storageAccountCredentialName = 5;
    string subscriptionId = 6;
}

message DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialNameRequest {
    string api_version = 1;
    string managerName = 2;
    string resourceGroupName = 3;
    // The name of the storage account credential.
    string storageAccountCredentialName = 4;
    string subscriptionId = 5;
}

message AccessControlRecord {
    // The properties of access control record.
    AccessControlRecordProperties properties = 1;
}

message AccessControlRecordList {
    // The value.
    repeated AccessControlRecord value = 1;
}

message AccessControlRecordProperties {
    // The iSCSI initiator name (IQN).
    string initiatorName = 1;
    // The number of volumes using the access control record.
    int32 volumeCount = 2;
}

message AcsConfiguration {
    // The namespace.
    string namespace = 1;
    // The realm.
    string realm = 2;
    // The service URL.
    string serviceUrl = 3;
}

message Alert {
    // The properties of the alert.
    AlertProperties properties = 1;
}

message AlertErrorDetails {
    // The error code
    string errorCode = 1;
    // The error message
    string errorMessage = 2;
    // The number of occurences
    int32 occurences = 3;
}

message AlertFilter {
    // Specifies the appeared time (in UTC) of the alerts to be filtered. Only 'Greater-Than' and 'Lesser-Than' operators are supported for this property.
    string appearedOnTime = 1;
    // Specifies the severity of the alerts to be filtered. Only 'Equality' operator is supported for this property.
    enum AlertFilter_Severity {
        ALERTFILTER_SEVERITY_INFORMATIONAL = 0;
        ALERTFILTER_SEVERITY_WARNING = 1;
        ALERTFILTER_SEVERITY_CRITICAL = 2;
    }
    AlertFilter_Severity severity = 2;
    // Specifies the source name of the alerts to be filtered. Only 'Equality' operator is supported for this property.
    string sourceName = 3;
    // Specifies the source type of the alerts to be filtered. Only 'Equality' operator is supported for this property.
    enum AlertFilter_SourceType {
        ALERTFILTER_SOURCETYPE_RESOURCE = 0;
        ALERTFILTER_SOURCETYPE_DEVICE = 1;
    }
    AlertFilter_SourceType sourceType = 4;
    // Specifies the status of the alerts to be filtered. Only 'Equality' operator is supported for this property.
    enum AlertFilter_Statu {
        ALERTFILTER_STATU_ACTIVE = 0;
        ALERTFILTER_STATU_CLEARED = 1;
    }
    AlertFilter_Statu status = 5;
}

message AlertList {
    // The URI of the next page of alerts.
    string nextLink = 1;
    // The value.
    repeated Alert value = 2;
}

message AlertNotificationProperties {
    // The alert notification email list.
    repeated string additionalRecipientEmailList = 1;
    // The alert notification culture.
    string alertNotificationCulture = 2;
    // Indicates whether email notification enabled or not.
    enum AlertNotificationProperties_EmailNotification {
        ALERTNOTIFICATIONPROPERTIES_EMAILNOTIFICATION_ENABLED = 0;
        ALERTNOTIFICATIONPROPERTIES_EMAILNOTIFICATION_DISABLED = 1;
    }
    AlertNotificationProperties_EmailNotification emailNotification = 3;
    // The value indicating whether alert notification enabled for admin or not.
    enum AlertNotificationProperties_NotificationToServiceOwner {
        ALERTNOTIFICATIONPROPERTIES_NOTIFICATIONTOSERVICEOWNER_ENABLED = 0;
        ALERTNOTIFICATIONPROPERTIES_NOTIFICATIONTOSERVICEOWNER_DISABLED = 1;
    }
    AlertNotificationProperties_NotificationToServiceOwner notificationToServiceOwners = 4;
}

message AlertProperties {
    // The type of the alert
    string alertType = 1;
    // The source time at which the alert was raised
    string appearedAtSourceTime = 2;
    // The UTC time at which the alert was raised
    string appearedAtTime = 3;
    // The source time at which the alert was cleared
    string clearedAtSourceTime = 4;
    // The UTC time at which the alert was cleared
    string clearedAtTime = 5;
    // More details about the alert
    map<string, string> detailedInformation = 6;
    // The details of the error for which the alert was raised
    AlertErrorDetails errorDetails = 7;
    // The recommended action for the issue raised in the alert
    string recommendation = 8;
    // The reason for resolving the alert
    string resolutionReason = 9;
    // The scope of the alert
    enum AlertProperties_Scope {
        ALERTPROPERTIES_SCOPE_RESOURCE = 0;
        ALERTPROPERTIES_SCOPE_DEVICE = 1;
    }
    AlertProperties_Scope scope = 10;
    // The severity of the alert
    enum AlertProperties_Severity {
        ALERTPROPERTIES_SEVERITY_INFORMATIONAL = 0;
        ALERTPROPERTIES_SEVERITY_WARNING = 1;
        ALERTPROPERTIES_SEVERITY_CRITICAL = 2;
    }
    AlertProperties_Severity severity = 11;
    // The source at which the alert was raised
    AlertSource source = 12;
    // The current status of the alert
    enum AlertProperties_Statu {
        ALERTPROPERTIES_STATU_ACTIVE = 0;
        ALERTPROPERTIES_STATU_CLEARED = 1;
    }
    AlertProperties_Statu status = 13;
    // The title of the alert
    string title = 14;
}

message AlertSettings {
    // The properties of the alert notification settings.
    AlertNotificationProperties properties = 1;
}

message AlertSource {
    // The source type of the alert
    enum AlertSource_AlertSourceType {
        ALERTSOURCE_ALERTSOURCETYPE_RESOURCE = 0;
        ALERTSOURCE_ALERTSOURCETYPE_DEVICE = 1;
    }
    AlertSource_AlertSourceType alertSourceType = 1;
    // The name of the source
    string name = 2;
    // The time zone of the source
    string timeZone = 3;
}

message AsymmetricEncryptedSecret {
    // The algorithm used to encrypt "Value".
    enum AsymmetricEncryptedSecret_EncryptionAlgorithm {
        ASYMMETRICENCRYPTEDSECRET_ENCRYPTIONALGORITHM_NONE = 0;
        ASYMMETRICENCRYPTEDSECRET_ENCRYPTIONALGORITHM_AES256 = 1;
        ASYMMETRICENCRYPTEDSECRET_ENCRYPTIONALGORITHM_RSAES_PKCS1_V_1_5 = 2;
    }
    AsymmetricEncryptedSecret_EncryptionAlgorithm encryptionAlgorithm = 1;
    // Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null.
    string encryptionCertThumbprint = 2;
    // The value of the secret.
    string value = 3;
}

message AvailableProviderOperation {
    // Contains the localized display information for this particular operation/action.
    AvailableProviderOperationDisplay display = 1;
    // The name of the operation being performed on a particular object. Name format: "{resourceProviderNamespace}/{resourceType}/{read|write|delete|action}". Eg. Microsoft.StorSimple/managers/devices/volumeContainers/read, Microsoft.StorSimple/managers/devices/alerts/clearAlerts/action
    string name = 2;
    // The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. Default value is "user,system"
    string origin = 3;
    // Reserved for future use.
    AvailableProviderOperationProperties properties = 4;
}

message AvailableProviderOperationDisplay {
    // The localized friendly description for the operation, as it should be shown to the user. It should be thorough, yet concise - it will be used in tool tips and detailed views.
    string description = 1;
    // The localized friendly name for the operation, as it should be shown to the user. It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing and include the entity/resource to which it applies.
    string operation = 2;
    // The localized friendly form of the resource provider name - it is expected to also include the publisher/company responsible. It should use Title Casing and begin with 'Microsoft' for 1st party services.
    string provider = 3;
    // The localized friendly form of the resource type related to this action/operation - it should match the public documentation for the resource provider. It should use Title Casing - for examples, please refer to the 'name' section.
    string resource = 4;
}

message AvailableProviderOperationList {
    // The NextLink.
    string nextLink = 1;
    // The value.
    repeated AvailableProviderOperation value = 2;
}

message AvailableProviderOperationProperties {
}

message Backup {
    // The properties of the backup.
    BackupProperties properties = 1;
}

message BackupElement {
    // The path ID that uniquely identifies the backup element.
    string elementId = 1;
    // The name of the backup element.
    string elementName = 2;
    // The hierarchical type of the backup element.
    string elementType = 3;
    // The size in bytes.
    int64 sizeInBytes = 4;
    // The path ID of the volume container.
    string volumeContainerId = 5;
    // The name of the volume.
    string volumeName = 6;
    // The volume type.
    enum BackupElement_VolumeType {
        BACKUPELEMENT_VOLUMETYPE_TIERED = 0;
        BACKUPELEMENT_VOLUMETYPE_ARCHIVAL = 1;
        BACKUPELEMENT_VOLUMETYPE_LOCALLYPINNED = 2;
    }
    BackupElement_VolumeType volumeType = 7;
}

message BackupFilter {
    // Specifies the backupPolicyId of the backups to be filtered. Only 'Equality' operator is supported for this property.
    string backupPolicyId = 1;
    // Specifies the creation time of the backups to be filtered. Only 'Greater Than or Equal To' and 'Lesser Than or Equal To' operators are supported for this property.
    string createdTime = 2;
    // Specifies the volumeId of the backups to be filtered. Only 'Equality' operator is supported for this property.
    string volumeId = 3;
}

message BackupList {
    // The NextLink.
    string nextLink = 1;
    // The value.
    repeated Backup value = 2;
}

message BackupPolicy {
    // The properties of the backup policy.
    BackupPolicyProperties properties = 1;
}

message BackupPolicyList {
    // The value.
    repeated BackupPolicy value = 1;
}

message BackupPolicyProperties {
    // The backup policy creation type. Indicates whether this was created through SaaS or through StorSimple Snapshot Manager.
    enum BackupPolicyProperties_BackupPolicyCreationType {
        BACKUPPOLICYPROPERTIES_BACKUPPOLICYCREATIONTYPE_BYSAAS = 0;
        BACKUPPOLICYPROPERTIES_BACKUPPOLICYCREATIONTYPE_BYSSM = 1;
    }
    BackupPolicyProperties_BackupPolicyCreationType backupPolicyCreationType = 1;
    // The time of the last backup for the backup policy.
    string lastBackupTime = 2;
    // The time of the next backup for the backup policy.
    string nextBackupTime = 3;
    // Indicates whether atleast one of the schedules in the backup policy is active or not.
    enum BackupPolicyProperties_ScheduledBackupStatu {
        BACKUPPOLICYPROPERTIES_SCHEDULEDBACKUPSTATU_DISABLED = 0;
        BACKUPPOLICYPROPERTIES_SCHEDULEDBACKUPSTATU_ENABLED = 1;
    }
    BackupPolicyProperties_ScheduledBackupStatu scheduledBackupStatus = 4;
    // The count of schedules the backup policy contains.
    int64 schedulesCount = 5;
    // If the backup policy was created by StorSimple Snapshot Manager, then this field indicates the hostname of the StorSimple Snapshot Manager.
    string ssmHostName = 6;
    // The path IDs of the volumes which are part of the backup policy.
    repeated string volumeIds = 7;
}

message BackupProperties {
    // The backup job creation type.
    enum BackupProperties_BackupJobCreationType {
        BACKUPPROPERTIES_BACKUPJOBCREATIONTYPE_ADHOC = 0;
        BACKUPPROPERTIES_BACKUPJOBCREATIONTYPE_BYSCHEDULE = 1;
        BACKUPPROPERTIES_BACKUPJOBCREATIONTYPE_BYSSM = 2;
    }
    BackupProperties_BackupJobCreationType backupJobCreationType = 1;
    // The path ID of the backup policy.
    string backupPolicyId = 2;
    // The type of the backup.
    enum BackupProperties_BackupType {
        BACKUPPROPERTIES_BACKUPTYPE_LOCALSNAPSHOT = 0;
        BACKUPPROPERTIES_BACKUPTYPE_CLOUDSNAPSHOT = 1;
    }
    BackupProperties_BackupType backupType = 3;
    // The time when the backup was created.
    string createdOn = 4;
    // The backup elements.
    repeated BackupElement elements = 5;
    // The backup size in bytes.
    int64 sizeInBytes = 6;
    // The StorSimple Snapshot Manager host name.
    string ssmHostName = 7;
}

message BackupSchedule {
    // The properties of the backup schedule.
    BackupScheduleProperties properties = 1;
}

message BackupScheduleList {
    // The value.
    repeated BackupSchedule value = 1;
}

message BackupScheduleProperties {
    // The type of backup which needs to be taken.
    enum BackupScheduleProperties_BackupType {
        BACKUPSCHEDULEPROPERTIES_BACKUPTYPE_LOCALSNAPSHOT = 0;
        BACKUPSCHEDULEPROPERTIES_BACKUPTYPE_CLOUDSNAPSHOT = 1;
    }
    BackupScheduleProperties_BackupType backupType = 1;
    // The last successful backup run which was triggered for the schedule.
    string lastSuccessfulRun = 2;
    // The number of backups to be retained.
    int64 retentionCount = 3;
    // The schedule recurrence.
    ScheduleRecurrence scheduleRecurrence = 4;
    // The schedule status.
    enum BackupScheduleProperties_ScheduleStatu {
        BACKUPSCHEDULEPROPERTIES_SCHEDULESTATU_ENABLED = 0;
        BACKUPSCHEDULEPROPERTIES_SCHEDULESTATU_DISABLED = 1;
    }
    BackupScheduleProperties_ScheduleStatu scheduleStatus = 5;
    // The start time of the schedule.
    string startTime = 6;
}

message BandwidthRateSettingProperties {
    // The schedules.
    repeated BandwidthSchedule schedules = 1;
    // The number of volumes that uses the bandwidth setting.
    int32 volumeCount = 2;
}

message BandwidthSchedule {
    // The days of the week when this schedule is applicable.
    repeated string days = 1;
    // The rate in Mbps.
    int32 rateInMbps = 2;
    // The start time of the schdule.
    Time start = 3;
    // The stop time of the schedule.
    Time stop = 4;
}

message BandwidthSetting {
    // The properties of the bandwidth setting.
    BandwidthRateSettingProperties properties = 1;
}

message BandwidthSettingList {
    // The value.
    repeated BandwidthSetting value = 1;
}

message BaseModel {
    // The path ID that uniquely identifies the object.
    string id = 1;
    // The Kind of the object. Currently only Series8000 is supported
    enum BaseModel_Kind {
        BASEMODEL_KIND_SERIES8000 = 0;
    }
    BaseModel_Kind kind = 2;
    // The name of the object.
    string name = 3;
    // The hierarchical type of the object.
    string type = 4;
}

message ChapSettings {
    // The CHAP initiator secret.
    AsymmetricEncryptedSecret initiatorSecret = 1;
    // The CHAP initiator user.
    string initiatorUser = 2;
    // The target secret.
    AsymmetricEncryptedSecret targetSecret = 3;
    // The CHAP target user.
    string targetUser = 4;
}

message ClearAlertRequest {
    // The list of alert IDs to be cleared
    repeated string alerts = 1;
    // The resolution message while clearing the alert
    string resolutionMessage = 2;
}

message CloneRequest {
    // The backup element that is cloned.
    BackupElement backupElement = 1;
    // The list of path IDs of the access control records to be associated to the new cloned volume.
    repeated string targetAccessControlRecordIds = 2;
    // The path ID of the device which will act as the clone target.
    string targetDeviceId = 3;
    // The name of the new volume which will be created and the backup will be cloned into.
    string targetVolumeName = 4;
}

message CloudAppliance {
    // Indicates whether virtual network used is configured with DNS or not.
    bool isVnetDnsConfigured = 1;
    // Indicates whether virtual network used is configured with express route or not.
    bool isVnetExpressConfigured = 2;
    // The model number.
    string modelNumber = 3;
    // The name.
    string name = 4;
    // The name of the storage account.
    string storageAccountName = 5;
    // The type of the storage account.
    string storageAccountType = 6;
    // The name of the subnet.
    string subnetName = 7;
    // The name of the virtual machine image.
    string vmImageName = 8;
    // The type of the virtual machine.
    string vmType = 9;
    // The name of the virtual network.
    string vnetName = 10;
    // The virtual network region.
    string vnetRegion = 11;
}

message CloudApplianceConfiguration {
    // The properties.
    CloudApplianceConfigurationProperties properties = 1;
}

message CloudApplianceConfigurationList {
    // The value.
    repeated CloudApplianceConfiguration value = 1;
}

message CloudApplianceConfigurationProperties {
    // The ACS configuration.
    AcsConfiguration acsConfiguration = 1;
    // The cloud platform.
    string cloudPlatform = 2;
    // The model number.
    string modelNumber = 3;
    // The supported regions.
    repeated string supportedRegions = 4;
    // The supported storage account types.
    repeated string supportedStorageAccountTypes = 5;
    // The supported virtual machine images.
    repeated VmImage supportedVmImages = 6;
    // The supported virtual machine types.
    repeated string supportedVmTypes = 7;
}

message CloudApplianceSettings {
    // The channel integrity key (encrypted with DAK).
    AsymmetricEncryptedSecret channelIntegrityKey = 1;
    // The service data encryption key (encrypted with DAK).
    AsymmetricEncryptedSecret serviceDataEncryptionKey = 2;
}

message ConfigureDeviceRequest {
    // The properties of the configure device request.
    ConfigureDeviceRequestProperties properties = 1;
}

message ConfigureDeviceRequestProperties {
    // The current name of the device.
    string currentDeviceName = 1;
    // The secondary DNS Settings of the device.
    SecondaryDNSSettings dnsSettings = 2;
    // The friendly name for the device.
    string friendlyName = 3;
    // The 'Data 0' network interface card settings.
    NetworkInterfaceData0Settings networkInterfaceData0Settings = 4;
    // The device time zone. For eg: "Pacific Standard Time"
    string timeZone = 5;
}

message ControllerPowerStateChangeRequest {
    // The properties of the controller power state change request.
    ControllerPowerStateChangeRequestProperties properties = 1;
}

message ControllerPowerStateChangeRequestProperties {
    // The power state that the request is expecting for the controller of the device.
    enum ControllerPowerStateChangeRequestProperties_Action {
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_ACTION_START = 0;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_ACTION_RESTART = 1;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_ACTION_SHUTDOWN = 2;
    }
    ControllerPowerStateChangeRequestProperties_Action action = 1;
    // The active controller that the request is expecting on the device.
    enum ControllerPowerStateChangeRequestProperties_ActiveController {
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_ACTIVECONTROLLER_UNKNOWN = 0;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_ACTIVECONTROLLER_NONE = 1;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_ACTIVECONTROLLER_CONTROLLER0 = 2;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_ACTIVECONTROLLER_CONTROLLER1 = 3;
    }
    ControllerPowerStateChangeRequestProperties_ActiveController activeController = 2;
    // The controller 0's status that the request is expecting on the device.
    enum ControllerPowerStateChangeRequestProperties_Controller0State {
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER0STATE_NOTPRESENT = 0;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER0STATE_POWEREDOFF = 1;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER0STATE_OK = 2;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER0STATE_RECOVERING = 3;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER0STATE_WARNING = 4;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER0STATE_FAILURE = 5;
    }
    ControllerPowerStateChangeRequestProperties_Controller0State controller0State = 3;
    // The controller 1's status that the request is expecting on the device.
    enum ControllerPowerStateChangeRequestProperties_Controller1State {
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER1STATE_NOTPRESENT = 0;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER1STATE_POWEREDOFF = 1;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER1STATE_OK = 2;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER1STATE_RECOVERING = 3;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER1STATE_WARNING = 4;
        CONTROLLERPOWERSTATECHANGEREQUESTPROPERTIES_CONTROLLER1STATE_FAILURE = 5;
    }
    ControllerPowerStateChangeRequestProperties_Controller1State controller1State = 4;
}

message DNSSettings {
    // The primary IPv4 DNS server for the device
    string primaryDnsServer = 1;
    // The primary IPv6 DNS server for the device
    string primaryIpv6DnsServer = 2;
    // The secondary IPv4 DNS server for the device
    repeated string secondaryDnsServers = 3;
    // The secondary IPv6 DNS server for the device
    repeated string secondaryIpv6DnsServers = 4;
}

message DataStatistics {
    // The number of bytes of data written to cloud, as part of the job.
    int64 cloudData = 1;
    // The number of bytes of data processed till now, as part of the job.
    int64 processedData = 2;
    // The average throughput of data processed(bytes/sec), as part of the job.
    int64 throughput = 3;
    // The total bytes of data to be processed, as part of the job.
    int64 totalData = 4;
}

message Device {
    // The properties of the StorSimple device.
    DeviceProperties properties = 1;
}

message DeviceDetails {
    // The total number of endpoints that are currently on the device ( i.e. number of volumes).
    int32 endpointCount = 1;
    // The total number of volume containers on the device.
    int32 volumeContainerCount = 2;
}

message DeviceList {
    // The value.
    repeated Device value = 1;
}

message DevicePatch {
    // The properties of the device patch.
    DevicePatchProperties properties = 1;
}

message DevicePatchProperties {
    // Short description given for the device
    string deviceDescription = 1;
}

message DeviceProperties {
    // The UTC time at which the device was activated
    string activationTime = 1;
    // The identifier of the active controller of the device.
    enum DeviceProperties_ActiveController {
        DEVICEPROPERTIES_ACTIVECONTROLLER_UNKNOWN = 0;
        DEVICEPROPERTIES_ACTIVECONTROLLER_NONE = 1;
        DEVICEPROPERTIES_ACTIVECONTROLLER_CONTROLLER0 = 2;
        DEVICEPROPERTIES_ACTIVECONTROLLER_CONTROLLER1 = 3;
    }
    DeviceProperties_ActiveController activeController = 2;
    // The device agent group version.
    int32 agentGroupVersion = 3;
    // The storage in bytes that is available locally on the device.
    int64 availableLocalStorageInBytes = 4;
    // The storage in bytes that is available on the device for tiered volumes.
    int64 availableTieredStorageInBytes = 5;
    // The language culture setting on the device. For eg: "en-US"
    string culture = 6;
    // The additional device details regarding the end point count and volume container count.
    DeviceDetails details = 7;
    // The current configuration status of the device.
    enum DeviceProperties_DeviceConfigurationStatu {
        DEVICEPROPERTIES_DEVICECONFIGURATIONSTATU_COMPLETE = 0;
        DEVICEPROPERTIES_DEVICECONFIGURATIONSTATU_PENDING = 1;
    }
    DeviceProperties_DeviceConfigurationStatu deviceConfigurationStatus = 8;
    // The device description.
    string deviceDescription = 9;
    // The location of the virtual appliance.
    string deviceLocation = 10;
    // The version number of the software running on the device.
    string deviceSoftwareVersion = 11;
    // The type of the device.
    enum DeviceProperties_DeviceType {
        DEVICEPROPERTIES_DEVICETYPE_INVALID = 0;
        DEVICEPROPERTIES_DEVICETYPE_SERIES8000VIRTUALAPPLIANCE = 1;
        DEVICEPROPERTIES_DEVICETYPE_SERIES8000PHYSICALAPPLIANCE = 2;
    }
    DeviceProperties_DeviceType deviceType = 12;
    // The friendly name of the device.
    string friendlyName = 13;
    // The friendly name of the software running on the device.
    string friendlySoftwareName = 14;
    // The device friendly software version.
    string friendlySoftwareVersion = 15;
    // The device model.
    string modelDescription = 16;
    // The number of network interface cards
    int32 networkInterfaceCardCount = 17;
    // The storage in bytes used for locally pinned volumes on the device (including additional local reservation).
    int64 provisionedLocalStorageInBytes = 18;
    // The storage in bytes that has been provisioned on the device for tiered volumes.
    int64 provisionedTieredStorageInBytes = 19;
    // Total capacity in bytes of tiered and locally pinned volumes on the device
    int64 provisionedVolumeSizeInBytes = 20;
    // The additional device details for the service data encryption key rollover.
    DeviceRolloverDetails rolloverDetails = 21;
    // The serial number.
    string serialNumber = 22;
    // The current status of the device.
    enum DeviceProperties_Statu {
        DEVICEPROPERTIES_STATU_UNKNOWN = 0;
        DEVICEPROPERTIES_STATU_ONLINE = 1;
        DEVICEPROPERTIES_STATU_OFFLINE = 2;
        DEVICEPROPERTIES_STATU_DEACTIVATED = 3;
        DEVICEPROPERTIES_STATU_REQUIRESATTENTION = 4;
        DEVICEPROPERTIES_STATU_MAINTENANCEMODE = 5;
        DEVICEPROPERTIES_STATU_CREATING = 6;
        DEVICEPROPERTIES_STATU_PROVISIONING = 7;
        DEVICEPROPERTIES_STATU_DEACTIVATING = 8;
        DEVICEPROPERTIES_STATU_DELETED = 9;
        DEVICEPROPERTIES_STATU_READYTOSETUP = 10;
    }
    DeviceProperties_Statu status = 23;
    // The target IQN.
    string targetIqn = 24;
    // The total tiered storage available on the device in bytes.
    int64 totalTieredStorageInBytes = 25;
    // The storage in bytes that is currently being used on the device, including both local and cloud.
    int64 usingStorageInBytes = 26;
    // The virtual machine API type.
    enum DeviceProperties_VirtualMachineApiType {
        DEVICEPROPERTIES_VIRTUALMACHINEAPITYPE_CLASSIC = 0;
        DEVICEPROPERTIES_VIRTUALMACHINEAPITYPE_ARM = 1;
    }
    DeviceProperties_VirtualMachineApiType virtualMachineApiType = 27;
}

message DeviceRolloverDetails {
    // The eligibility status of device for service data encryption key rollover.
    enum DeviceRolloverDetails_AuthorizationEligibility {
        DEVICEROLLOVERDETAILS_AUTHORIZATIONELIGIBILITY_INELIGIBLE = 0;
        DEVICEROLLOVERDETAILS_AUTHORIZATIONELIGIBILITY_ELIGIBLE = 1;
    }
    DeviceRolloverDetails_AuthorizationEligibility authorizationEligibility = 1;
    // The authorization status of the device for service data encryption key rollover.
    enum DeviceRolloverDetails_AuthorizationStatu {
        DEVICEROLLOVERDETAILS_AUTHORIZATIONSTATU_DISABLED = 0;
        DEVICEROLLOVERDETAILS_AUTHORIZATIONSTATU_ENABLED = 1;
    }
    DeviceRolloverDetails_AuthorizationStatu authorizationStatus = 2;
    // The reason for inEligibility of device, in case it's not eligible for service data encryption key rollover.
    enum DeviceRolloverDetails_InEligibilityReason {
        DEVICEROLLOVERDETAILS_INELIGIBILITYREASON_DEVICENOTONLINE = 0;
        DEVICEROLLOVERDETAILS_INELIGIBILITYREASON_NOTSUPPORTEDAPPLIANCE = 1;
        DEVICEROLLOVERDETAILS_INELIGIBILITYREASON_ROLLOVERPENDING = 2;
    }
    DeviceRolloverDetails_InEligibilityReason inEligibilityReason = 3;
}

message DimensionFilter {
    // Specifies the dimension name. E.g., NetworkInterface. Valid values are the ones specified in the field "dimensions" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.
    string name = 1;
    // Specifies the dimension value. E.g., Data0. Valid values are the ones returned in the field "dimensions" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.
    string values = 2;
}

message EncryptionSettings {
    // The properties of the encryption settings.
    EncryptionSettingsProperties properties = 1;
}

message EncryptionSettingsProperties {
    // The encryption status to indicates if encryption is enabled or not.
    enum EncryptionSettingsProperties_EncryptionStatu {
        ENCRYPTIONSETTINGSPROPERTIES_ENCRYPTIONSTATU_ENABLED = 0;
        ENCRYPTIONSETTINGSPROPERTIES_ENCRYPTIONSTATU_DISABLED = 1;
    }
    EncryptionSettingsProperties_EncryptionStatu encryptionStatus = 1;
    // The key rollover status to indicates if key rollover is required or not. If secret's encryption has been upgraded, then it requires key rollover.
    enum EncryptionSettingsProperties_KeyRolloverStatu {
        ENCRYPTIONSETTINGSPROPERTIES_KEYROLLOVERSTATU_REQUIRED = 0;
        ENCRYPTIONSETTINGSPROPERTIES_KEYROLLOVERSTATU_NOTREQUIRED = 1;
    }
    EncryptionSettingsProperties_KeyRolloverStatu keyRolloverStatus = 2;
}

message FailoverRequest {
    // The ARM path ID of the device which will act as the failover target.
    string targetDeviceId = 1;
    // The list of path IDs of the volume containers which needs to be failed-over to the target device.
    repeated string volumeContainers = 2;
}

message FailoverSet {
    // The eligibility result of the failover set, for failover.
    FailoverSetEligibilityResult eligibilityResult = 1;
    // The list of meta data of volume containers, which are part of the failover set.
    repeated VolumeContainerFailoverMetadata volumeContainers = 2;
}

message FailoverSetEligibilityResult {
    // The error message, if the failover set is not eligible for failover.
    string errorMessage = 1;
    // Represents if this failover set is eligible for failover or not.
    bool isEligibleForFailover = 2;
}

message FailoverSetsList {
    // The list of failover sets.
    repeated FailoverSet value = 1;
}

message FailoverTarget {
    // The amount of free local storage available on the device in bytes.
    int64 availableLocalStorageInBytes = 1;
    // The amount of free tiered storage available for the device in bytes.
    int64 availableTieredStorageInBytes = 2;
    // The count of datacontainers on the device.
    int32 dataContainersCount = 3;
    // The path ID of the device.
    string deviceId = 4;
    // The geo location (applicable only for cloud appliances) of the device.
    string deviceLocation = 5;
    // The software version of the device.
    string deviceSoftwareVersion = 6;
    // The status of the device.
    enum FailoverTarget_DeviceStatu {
        FAILOVERTARGET_DEVICESTATU_UNKNOWN = 0;
        FAILOVERTARGET_DEVICESTATU_ONLINE = 1;
        FAILOVERTARGET_DEVICESTATU_OFFLINE = 2;
        FAILOVERTARGET_DEVICESTATU_DEACTIVATED = 3;
        FAILOVERTARGET_DEVICESTATU_REQUIRESATTENTION = 4;
        FAILOVERTARGET_DEVICESTATU_MAINTENANCEMODE = 5;
        FAILOVERTARGET_DEVICESTATU_CREATING = 6;
        FAILOVERTARGET_DEVICESTATU_PROVISIONING = 7;
        FAILOVERTARGET_DEVICESTATU_DEACTIVATING = 8;
        FAILOVERTARGET_DEVICESTATU_DELETED = 9;
        FAILOVERTARGET_DEVICESTATU_READYTOSETUP = 10;
    }
    FailoverTarget_DeviceStatu deviceStatus = 7;
    // The eligibility result of the device, as a failover target device.
    TargetEligibilityResult eligibilityResult = 8;
    // The friendly name for the current version of software on the device.
    string friendlyDeviceSoftwareVersion = 9;
    // The model number of the device.
    string modelDescription = 10;
    // The count of volumes on the device.
    int32 volumesCount = 11;
}

message FailoverTargetsList {
    // The list of all the failover targets.
    repeated FailoverTarget value = 1;
}

message Feature {
    // The name of the feature.
    string name = 1;
    // The feature support status.
    enum Feature_Statu {
        FEATURE_STATU_NOTAVAILABLE = 0;
        FEATURE_STATU_UNSUPPORTEDDEVICEVERSION = 1;
        FEATURE_STATU_SUPPORTED = 2;
    }
    Feature_Statu status = 2;
}

message FeatureFilter {
    // Specifies the device ID for which the features are required. Only 'Equality' operator is supported for this property.
    string deviceId = 1;
}

message FeatureList {
    // The value.
    repeated Feature value = 1;
}

message HardwareComponent {
    // The component ID.
    string componentId = 1;
    // The display name of the hardware component.
    string displayName = 2;
    // The status of the hardware component.
    enum HardwareComponent_Statu {
        HARDWARECOMPONENT_STATU_UNKNOWN = 0;
        HARDWARECOMPONENT_STATU_NOTPRESENT = 1;
        HARDWARECOMPONENT_STATU_POWEREDOFF = 2;
        HARDWARECOMPONENT_STATU_OK = 3;
        HARDWARECOMPONENT_STATU_RECOVERING = 4;
        HARDWARECOMPONENT_STATU_WARNING = 5;
        HARDWARECOMPONENT_STATU_FAILURE = 6;
    }
    HardwareComponent_Statu status = 3;
    // The display name of the status of hardware component.
    string statusDisplayName = 4;
}

message HardwareComponentGroup {
    // The properties of the hardware component group.
    HardwareComponentGroupProperties properties = 1;
}

message HardwareComponentGroupList {
    // The value.
    repeated HardwareComponentGroup value = 1;
}

message HardwareComponentGroupProperties {
    // The list of hardware components.
    repeated HardwareComponent components = 1;
    // The display name the hardware component group.
    string displayName = 2;
    // The last updated time.
    string lastUpdatedTime = 3;
}

message Job {
    // The UTC time at which the job completed.
    string endTime = 1;
    // The error details, if any, for the job.
    JobErrorDetails error = 2;
    // The percentage of the job that is already complete.
    int32 percentComplete = 3;
    // The properties of the job.
    JobProperties properties = 4;
    // The UTC time at which the job was started.
    string startTime = 5;
    // The current status of the job.
    enum Job_Statu {
        JOB_STATU_RUNNING = 0;
        JOB_STATU_SUCCEEDED = 1;
        JOB_STATU_FAILED = 2;
        JOB_STATU_CANCELED = 3;
    }
    Job_Statu status = 6;
}

message JobErrorDetails {
    // The error code intended for programmatic access.
    string code = 1;
    // The error details.
    repeated JobErrorItem errorDetails = 2;
    // The error message intended to describe the error in detail.
    string message = 3;
}

message JobErrorItem {
    // The error code intended for programmatic access.
    string code = 1;
    // The error message intended to describe the error in detail.
    string message = 2;
    // The recommended actions.
    repeated string recommendations = 3;
}

message JobFilter {
    // Specifies the type of the jobs to be filtered. For e.g., "ScheduledBackup", "ManualBackup", "RestoreBackup", "CloneVolume", "FailoverVolumeContainers", "CreateLocallyPinnedVolume", "ModifyVolume", "InstallUpdates", "SupportPackageLogs", or "CreateCloudAppliance". Only 'Equality' operator can be used for this property.
    string jobType = 1;
    // Specifies the start time of the jobs to be filtered.  Only 'Greater Than or Equal To' and 'Lesser Than or Equal To' operators are supported for this property.
    string startTime = 2;
    // Specifies the status of the jobs to be filtered. For e.g., "Running", "Succeeded", "Failed" or "Canceled". Only 'Equality' operator is supported for this property.
    string status = 3;
}

message JobList {
    // The NextLink.
    string nextLink = 1;
    // The value.
    repeated Job value = 2;
}

message JobProperties {
    // The time of the backup used for the failover.
    string backupPointInTime = 1;
    // The backup type (CloudSnapshot | LocalSnapshot). Applicable only for backup jobs.
    enum JobProperties_BackupType {
        JOBPROPERTIES_BACKUPTYPE_LOCALSNAPSHOT = 0;
        JOBPROPERTIES_BACKUPTYPE_CLOUDSNAPSHOT = 1;
    }
    JobProperties_BackupType backupType = 2;
    // The data statistics properties of the job.
    DataStatistics dataStats = 3;
    // The device ID in which the job ran.
    string deviceId = 4;
    // The entity identifier for which the job ran.
    string entityLabel = 5;
    // The entity type for which the job ran.
    string entityType = 6;
    // Represents whether the job is cancellable or not.
    bool isCancellable = 7;
    // The job stages.
    repeated JobStage jobStages = 8;
    // The type of the job.
    enum JobProperties_JobType {
        JOBPROPERTIES_JOBTYPE_SCHEDULEDBACKUP = 0;
        JOBPROPERTIES_JOBTYPE_MANUALBACKUP = 1;
        JOBPROPERTIES_JOBTYPE_RESTOREBACKUP = 2;
        JOBPROPERTIES_JOBTYPE_CLONEVOLUME = 3;
        JOBPROPERTIES_JOBTYPE_FAILOVERVOLUMECONTAINERS = 4;
        JOBPROPERTIES_JOBTYPE_CREATELOCALLYPINNEDVOLUME = 5;
        JOBPROPERTIES_JOBTYPE_MODIFYVOLUME = 6;
        JOBPROPERTIES_JOBTYPE_INSTALLUPDATES = 7;
        JOBPROPERTIES_JOBTYPE_SUPPORTPACKAGELOGS = 8;
        JOBPROPERTIES_JOBTYPE_CREATECLOUDAPPLIANCE = 9;
    }
    JobProperties_JobType jobType = 9;
    // The source device ID of the failover job.
    string sourceDeviceId = 10;
}

message JobStage {
    // The details of the stage.
    string detail = 1;
    // The error code of the stage if any.
    string errorCode = 2;
    // The message of the job stage.
    string message = 3;
    // The stage status.
    enum JobStage_StageStatu {
        JOBSTAGE_STAGESTATU_RUNNING = 0;
        JOBSTAGE_STAGESTATU_SUCCEEDED = 1;
        JOBSTAGE_STAGESTATU_FAILED = 2;
        JOBSTAGE_STAGESTATU_CANCELED = 3;
    }
    JobStage_StageStatu stageStatus = 4;
}

message Key {
    // The activation key for the device.
    string activationKey = 1;
}

message ListFailoverTargetsRequest {
    // The list of path IDs of the volume containers that needs to be failed-over, for which we want to fetch the eligible targets.
    repeated string volumeContainers = 1;
}

message Manager {
    // The etag of the manager.
    string etag = 1;
    // The properties of the StorSimple Manager.
    ManagerProperties properties = 2;
}

message ManagerExtendedInfo {
    // The etag of the resource.
    string etag = 1;
    // The extended info properties.
    ManagerExtendedInfoProperties properties = 2;
}

message ManagerExtendedInfoProperties {
    // Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain text format. Algorithm name - if key is encrypted
    string algorithm = 1;
    // Represents the CEK of the resource.
    string encryptionKey = 2;
    // Represents the Cert thumbprint that was used to encrypt the CEK.
    string encryptionKeyThumbprint = 3;
    // Represents the CIK of the resource.
    string integrityKey = 4;
    // Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
    string portalCertificateThumbprint = 5;
    // The version of the extended info being persisted.
    string version = 6;
}

message ManagerIntrinsicSettings {
    // The type of StorSimple Manager.
    enum ManagerIntrinsicSettings_Type {
        MANAGERINTRINSICSETTINGS_TYPE_GARDAV1 = 0;
        MANAGERINTRINSICSETTINGS_TYPE_HELSINKIV1 = 1;
    }
    ManagerIntrinsicSettings_Type type = 1;
}

message ManagerList {
    // The list of storsimple managers.
    repeated Manager value = 1;
}

message ManagerPatch {
    // The tags attached to the Manager.
    map<string, string> tags = 1;
}

message ManagerProperties {
    // Represents the type of StorSimple Manager.
    ManagerIntrinsicSettings cisIntrinsicSettings = 1;
    // Specifies the state of the resource as it is getting provisioned. Value of "Succeeded" means the Manager was successfully created.
    string provisioningState = 2;
    // Specifies the Sku.
    ManagerSku sku = 3;
}

message ManagerSku {
    // Refers to the sku name which should be "Standard"
    enum ManagerSku_Name {
        MANAGERSKU_NAME_STANDARD = 0;
    }
    ManagerSku_Name name = 1;
}

message MetricAvailablity {
    // The retention period for the metric at the specified timegrain.
    string retention = 1;
    // The aggregation interval for the metric.
    string timeGrain = 2;
}

message MetricData {
    // The average of all samples at the time stamp.
    double average = 1;
    // The count of all samples at the time stamp.
    int32 count = 2;
    // The maximum of all samples at the time stamp.
    double maximum = 3;
    // The minimum of all samples at the time stamp.
    double minimum = 4;
    // The sum of all samples at the time stamp.
    double sum = 5;
    // The time stamp of the metric data.
    string timeStamp = 6;
}

message MetricDefinition {
    // The category of the metric.
    string category = 1;
    // The available metric dimensions.
    repeated MetricDimension dimensions = 2;
    // The available metric granularities.
    repeated MetricAvailablity metricAvailabilities = 3;
    // The metric name.
    MetricName name = 4;
    // The metric aggregation type.
    enum MetricDefinition_PrimaryAggregationType {
        METRICDEFINITION_PRIMARYAGGREGATIONTYPE_AVERAGE = 0;
        METRICDEFINITION_PRIMARYAGGREGATIONTYPE_LAST = 1;
        METRICDEFINITION_PRIMARYAGGREGATIONTYPE_MAXIMUM = 2;
        METRICDEFINITION_PRIMARYAGGREGATIONTYPE_MINIMUM = 3;
        METRICDEFINITION_PRIMARYAGGREGATIONTYPE_NONE = 4;
        METRICDEFINITION_PRIMARYAGGREGATIONTYPE_TOTAL = 5;
    }
    MetricDefinition_PrimaryAggregationType primaryAggregationType = 5;
    // The metric source ID.
    string resourceId = 6;
    // The metric definition type.
    string type = 7;
    // The metric unit.
    enum MetricDefinition_Unit {
        METRICDEFINITION_UNIT_BYTES = 0;
        METRICDEFINITION_UNIT_BYTESPERSECOND = 1;
        METRICDEFINITION_UNIT_COUNT = 2;
        METRICDEFINITION_UNIT_COUNTPERSECOND = 3;
        METRICDEFINITION_UNIT_PERCENT = 4;
        METRICDEFINITION_UNIT_SECONDS = 5;
    }
    MetricDefinition_Unit unit = 8;
}

message MetricDefinitionList {
    // The list of metric definitions.
    repeated MetricDefinition value = 1;
}

message MetricDimension {
    // The metric dimension name.
    string name = 1;
    // The metric dimension values.
    string value = 2;
}

message MetricFilter {
    // Specifies the category of the metrics to be filtered. E.g., "CapacityUtilization". Valid values are the ones returned as the field "category" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.
    string category = 1;
    // Specifies the source(the dimension) of the metrics to be filtered. Only 'Equality' operator is supported for this property.
    DimensionFilter dimensions = 2;
    // Specifies the end time of the time range to be queried. Only 'Less Than Or Equal To' operator is supported for this property.
    string endTime = 3;
    // Specifies the metric name filter specifying the name of the metric to be filtered on. Only 'Equality' operator is supported for this property.
    MetricNameFilter name = 4;
    // Specifies the start time of the time range to be queried. Only 'Greater Than Or Equal To' operator is supported for this property.
    string startTime = 5;
    // Specifies the time granularity of the metrics to be returned. E.g., "P1D". Valid values are the ones returned as the field "timeGrain" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.
    string timeGrain = 6;
}

message MetricList {
    // The value.
    repeated Metrics value = 1;
}

message MetricName {
    // The localized metric name.
    string localizedValue = 1;
    // The metric name.
    string value = 2;
}

message MetricNameFilter {
    // Specifies the metric name to be filtered on. E.g., CloudStorageUsed. Valid values are the ones returned in the field "name" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.
    string value = 1;
}

message Metrics {
    // The metric dimensions.
    repeated MetricDimension dimensions = 1;
    // The end time of the metric data.
    string endTime = 2;
    // The name of the metric.
    MetricName name = 3;
    // The metric aggregation type.
    enum Metrics_PrimaryAggregation {
        METRICS_PRIMARYAGGREGATION_AVERAGE = 0;
        METRICS_PRIMARYAGGREGATION_LAST = 1;
        METRICS_PRIMARYAGGREGATION_MAXIMUM = 2;
        METRICS_PRIMARYAGGREGATION_MINIMUM = 3;
        METRICS_PRIMARYAGGREGATION_NONE = 4;
        METRICS_PRIMARYAGGREGATION_TOTAL = 5;
    }
    Metrics_PrimaryAggregation primaryAggregation = 4;
    // The ID of metric source.
    string resourceId = 5;
    // The start time of the metric data.
    string startTime = 6;
    // The time granularity of the metric data.
    string timeGrain = 7;
    // The type of the metric data.
    string type = 8;
    // The unit of the metric data.
    enum Metrics_Unit {
        METRICS_UNIT_BYTES = 0;
        METRICS_UNIT_BYTESPERSECOND = 1;
        METRICS_UNIT_COUNT = 2;
        METRICS_UNIT_COUNTPERSECOND = 3;
        METRICS_UNIT_PERCENT = 4;
        METRICS_UNIT_SECONDS = 5;
    }
    Metrics_Unit unit = 9;
    // The list of the metric data.
    repeated MetricData values = 10;
}

message NetworkAdapterList {
    // The value.
    repeated NetworkAdapters value = 1;
}

message NetworkAdapters {
    // The ID of the network adapter.
    enum NetworkAdapters_InterfaceId {
        NETWORKADAPTERS_INTERFACEID_INVALID = 0;
        NETWORKADAPTERS_INTERFACEID_DATA0 = 1;
        NETWORKADAPTERS_INTERFACEID_DATA1 = 2;
        NETWORKADAPTERS_INTERFACEID_DATA2 = 3;
        NETWORKADAPTERS_INTERFACEID_DATA3 = 4;
        NETWORKADAPTERS_INTERFACEID_DATA4 = 5;
        NETWORKADAPTERS_INTERFACEID_DATA5 = 6;
    }
    NetworkAdapters_InterfaceId interfaceId = 1;
    // Value indicating whether this instance is default.
    bool isDefault = 2;
    // Value indicating cloud and ISCSI status of network adapter.
    enum NetworkAdapters_IscsiAndCloudStatu {
        NETWORKADAPTERS_ISCSIANDCLOUDSTATU_DISABLED = 0;
        NETWORKADAPTERS_ISCSIANDCLOUDSTATU_ISCSIENABLED = 1;
        NETWORKADAPTERS_ISCSIANDCLOUDSTATU_CLOUDENABLED = 2;
        NETWORKADAPTERS_ISCSIANDCLOUDSTATU_ISCSIANDCLOUDENABLED = 3;
    }
    NetworkAdapters_IscsiAndCloudStatu iscsiAndCloudStatus = 3;
    // The mode of network adapter, either IPv4, IPv6 or both.
    enum NetworkAdapters_Mode {
        NETWORKADAPTERS_MODE_INVALID = 0;
        NETWORKADAPTERS_MODE_IPV4 = 1;
        NETWORKADAPTERS_MODE_IPV6 = 2;
        NETWORKADAPTERS_MODE_BOTH = 3;
    }
    NetworkAdapters_Mode mode = 4;
    // Value indicating status of network adapter.
    enum NetworkAdapters_NetInterfaceStatu {
        NETWORKADAPTERS_NETINTERFACESTATU_ENABLED = 0;
        NETWORKADAPTERS_NETINTERFACESTATU_DISABLED = 1;
    }
    NetworkAdapters_NetInterfaceStatu netInterfaceStatus = 5;
    // The IPv4 configuration of the network adapter.
    NicIPv4 nicIpv4Settings = 6;
    // The IPv6 configuration of the network adapter.
    NicIPv6 nicIpv6Settings = 7;
    // The speed of the network adapter.
    int64 speed = 8;
}

message NetworkInterfaceData0Settings {
    // The controller 1's IPv4 address.
    string controllerOneIp = 1;
    // The controller 0's IPv4 address.
    string controllerZeroIp = 2;
}

message NetworkSettings {
    // The properties of network settings of a device.
    NetworkSettingsProperties properties = 1;
}

message NetworkSettingsPatch {
    // The properties of the network settings patch.
    NetworkSettingsPatchProperties properties = 1;
}

message NetworkSettingsPatchProperties {
    // The DNS (Domain Name System) settings of device.
    DNSSettings dnsSettings = 1;
    // The network adapter list of device.
    NetworkAdapterList networkAdapters = 2;
}

message NetworkSettingsProperties {
    // The DNS (Domain Name System) settings of device.
    DNSSettings dnsSettings = 1;
    // The network adapter list of device.
    NetworkAdapterList networkAdapters = 2;
    // The webproxy settings of device.
    WebproxySettings webproxySettings = 3;
}

message NicIPv4 {
    // The IPv4 address of Controller0.
    string controller0Ipv4Address = 1;
    // The IPv4 address of Controller1.
    string controller1Ipv4Address = 2;
    // The IPv4 address of the network adapter.
    string ipv4Address = 3;
    // The IPv4 gateway of the network adapter.
    string ipv4Gateway = 4;
    // The IPv4 netmask of the network adapter.
    string ipv4Netmask = 5;
}

message NicIPv6 {
    // The IPv6 address of Controller0.
    string controller0Ipv6Address = 1;
    // The IPv6 address of Controller1.
    string controller1Ipv6Address = 2;
    // The IPv6 address of the network adapter.
    string ipv6Address = 3;
    // The IPv6 gateway of the network adapter.
    string ipv6Gateway = 4;
    // The IPv6 prefix of the network adapter.
    string ipv6Prefix = 5;
}

message PublicKey {
    // The key.
    string key = 1;
}

message RemoteManagementSettings {
    // The remote management certificates.
    string remoteManagementCertificate = 1;
    // The remote management mode.
    enum RemoteManagementSettings_RemoteManagementMode {
        REMOTEMANAGEMENTSETTINGS_REMOTEMANAGEMENTMODE_UNKNOWN = 0;
        REMOTEMANAGEMENTSETTINGS_REMOTEMANAGEMENTMODE_DISABLED = 1;
        REMOTEMANAGEMENTSETTINGS_REMOTEMANAGEMENTMODE_HTTPSENABLED = 2;
        REMOTEMANAGEMENTSETTINGS_REMOTEMANAGEMENTMODE_HTTPSANDHTTPENABLED = 3;
    }
    RemoteManagementSettings_RemoteManagementMode remoteManagementMode = 2;
}

message RemoteManagementSettingsPatch {
    // The remote management mode.
    enum RemoteManagementSettingsPatch_RemoteManagementMode {
        REMOTEMANAGEMENTSETTINGSPATCH_REMOTEMANAGEMENTMODE_UNKNOWN = 0;
        REMOTEMANAGEMENTSETTINGSPATCH_REMOTEMANAGEMENTMODE_DISABLED = 1;
        REMOTEMANAGEMENTSETTINGSPATCH_REMOTEMANAGEMENTMODE_HTTPSENABLED = 2;
        REMOTEMANAGEMENTSETTINGSPATCH_REMOTEMANAGEMENTMODE_HTTPSANDHTTPENABLED = 3;
    }
    RemoteManagementSettingsPatch_RemoteManagementMode remoteManagementMode = 1;
}

message Resource {
    // The resource ID.
    string id = 1;
    // The geo location of the resource.
    string location = 2;
    // The resource name.
    string name = 3;
    // The tags attached to the resource.
    map<string, string> tags = 4;
    // The resource type.
    string type = 5;
}

message ScheduleRecurrence {
    // The recurrence type.
    enum ScheduleRecurrence_RecurrenceType {
        SCHEDULERECURRENCE_RECURRENCETYPE_MINUTES = 0;
        SCHEDULERECURRENCE_RECURRENCETYPE_HOURLY = 1;
        SCHEDULERECURRENCE_RECURRENCETYPE_DAILY = 2;
        SCHEDULERECURRENCE_RECURRENCETYPE_WEEKLY = 3;
    }
    ScheduleRecurrence_RecurrenceType recurrenceType = 1;
    // The recurrence value.
    int32 recurrenceValue = 2;
    // The week days list. Applicable only for schedules of recurrence type 'weekly'.
    repeated string weeklyDaysList = 3;
}

message SecondaryDNSSettings {
    // The list of secondary DNS Server IP addresses.
    repeated string secondaryDnsServers = 1;
}

message SecuritySettings {
    // The properties of the security settings of a device.
    SecuritySettingsProperties properties = 1;
}

message SecuritySettingsPatch {
    // The properties of the security settings patch.
    SecuritySettingsPatchProperties properties = 1;
}

message SecuritySettingsPatchProperties {
    // The device CHAP and reverse-CHAP settings.
    ChapSettings chapSettings = 1;
    // The cloud appliance settings.
    CloudApplianceSettings cloudApplianceSettings = 2;
    // The device administrator password.
    AsymmetricEncryptedSecret deviceAdminPassword = 3;
    // The remote management settings.
    RemoteManagementSettingsPatch remoteManagementSettings = 4;
    // The snapshot manager password.
    AsymmetricEncryptedSecret snapshotPassword = 5;
}

message SecuritySettingsProperties {
    // The Challenge-Handshake Authentication Protocol (CHAP) settings.
    ChapSettings chapSettings = 1;
    // The settings for remote management of a device.
    RemoteManagementSettings remoteManagementSettings = 2;
}

message SendTestAlertEmailRequest {
    // The list of email IDs to send the test alert email
    repeated string emailList = 1;
}

message StorageAccountCredential {
    // The storage account credential properties.
    StorageAccountCredentialProperties properties = 1;
}

message StorageAccountCredentialList {
    // The value.
    repeated StorageAccountCredential value = 1;
}

message StorageAccountCredentialProperties {
    // The details of the storage account password.
    AsymmetricEncryptedSecret accessKey = 1;
    // The storage endpoint
    string endPoint = 2;
    // Signifies whether SSL needs to be enabled or not.
    enum StorageAccountCredentialProperties_SslStatu {
        STORAGEACCOUNTCREDENTIALPROPERTIES_SSLSTATU_ENABLED = 0;
        STORAGEACCOUNTCREDENTIALPROPERTIES_SSLSTATU_DISABLED = 1;
    }
    StorageAccountCredentialProperties_SslStatu sslStatus = 3;
    // The count of volumes using this storage account credential.
    int32 volumesCount = 4;
}

message SymmetricEncryptedSecret {
    // The algorithm used to encrypt the "Value".
    enum SymmetricEncryptedSecret_EncryptionAlgorithm {
        SYMMETRICENCRYPTEDSECRET_ENCRYPTIONALGORITHM_NONE = 0;
        SYMMETRICENCRYPTEDSECRET_ENCRYPTIONALGORITHM_AES256 = 1;
        SYMMETRICENCRYPTEDSECRET_ENCRYPTIONALGORITHM_RSAES_PKCS1_V_1_5 = 2;
    }
    SymmetricEncryptedSecret_EncryptionAlgorithm encryptionAlgorithm = 1;
    // The value of the secret itself. If the secret is in plaintext or null then EncryptionAlgorithm will be none.
    string value = 2;
    // The thumbprint of the cert that was used to encrypt "Value".
    string valueCertificateThumbprint = 3;
}

message TargetEligibilityErrorMessage {
    // The localized error message stating the reason why the device is not eligible as a target device.
    string message = 1;
    // The localized resolution message for the error.
    string resolution = 2;
    // The result code for the error, due to which the device does not qualify as a failover target device.
    enum TargetEligibilityErrorMessage_ResultCode {
        TARGETELIGIBILITYERRORMESSAGE_RESULTCODE_TARGETANDSOURCECANNOTBESAMEERROR = 0;
        TARGETELIGIBILITYERRORMESSAGE_RESULTCODE_TARGETISNOTONLINEERROR = 1;
        TARGETELIGIBILITYERRORMESSAGE_RESULTCODE_TARGETSOURCEINCOMPATIBLEVERSIONERROR = 2;
        TARGETELIGIBILITYERRORMESSAGE_RESULTCODE_LOCALTOTIEREDVOLUMESCONVERSIONWARNING = 3;
        TARGETELIGIBILITYERRORMESSAGE_RESULTCODE_TARGETINSUFFICIENTCAPACITYERROR = 4;
        TARGETELIGIBILITYERRORMESSAGE_RESULTCODE_TARGETINSUFFICIENTLOCALVOLUMEMEMORYERROR = 5;
        TARGETELIGIBILITYERRORMESSAGE_RESULTCODE_TARGETINSUFFICIENTTIEREDVOLUMEMEMORYERROR = 6;
    }
    TargetEligibilityErrorMessage_ResultCode resultCode = 3;
}

message TargetEligibilityResult {
    // The eligibility status of device, as a failover target device.
    enum TargetEligibilityResult_EligibilityStatu {
        TARGETELIGIBILITYRESULT_ELIGIBILITYSTATU_NOTELIGIBLE = 0;
        TARGETELIGIBILITYRESULT_ELIGIBILITYSTATU_ELIGIBLE = 1;
    }
    TargetEligibilityResult_EligibilityStatu eligibilityStatus = 1;
    // The list of error messages, if a device does not qualify as a failover target device.
    repeated TargetEligibilityErrorMessage messages = 2;
}

message Time {
    // The hour.
    int32 hours = 1;
    // The minute.
    int32 minutes = 2;
    // The second.
    int32 seconds = 3;
}

message TimeSettings {
    // The properties of the time settings of a device.
    TimeSettingsProperties properties = 1;
}

message TimeSettingsProperties {
    // The primary Network Time Protocol (NTP) server name, like 'time.windows.com'.
    string primaryTimeServer = 1;
    // The secondary Network Time Protocol (NTP) server name, like 'time.contoso.com'. It's optional.
    repeated string secondaryTimeServer = 2;
    // The timezone of device, like '(UTC -06:00) Central America'
    string timeZone = 3;
}

message Updates {
    // The properties of the updates profile.
    UpdatesProperties properties = 1;
}

message UpdatesProperties {
    // Indicates whether an update is in progress or not.
    bool isUpdateInProgress = 1;
    // The time when the last update was completed.
    string lastUpdatedTime = 2;
    // Set to 'true' if maintenance mode update available.
    bool maintenanceModeUpdatesAvailable = 3;
    // Set to 'true' if regular updates are available for the device.
    bool regularUpdatesAvailable = 4;
}

message VmImage {
    // The name.
    string name = 1;
    // The offer.
    string offer = 2;
    // The publisher.
    string publisher = 3;
    // The SKU.
    string sku = 4;
    // The version.
    string version = 5;
}

message Volume {
    // The properties of the volume.
    VolumeProperties properties = 1;
}

message VolumeContainer {
    // The volume container properties.
    VolumeContainerProperties properties = 1;
}

message VolumeContainerFailoverMetadata {
    // The path ID of the volume container.
    string volumeContainerId = 1;
    // The list of metadata of volumes inside the volume container, which contains valid cloud snapshots.
    repeated VolumeFailoverMetadata volumes = 2;
}

message VolumeContainerList {
    // The value.
    repeated VolumeContainer value = 1;
}

message VolumeContainerProperties {
    // The bandwidth-rate set on the volume container.
    int32 bandWidthRateInMbps = 1;
    // The ID of the bandwidth setting associated with the volume container.
    string bandwidthSettingId = 2;
    // The key used to encrypt data in the volume container. It is required when property 'EncryptionStatus' is "Enabled".
    AsymmetricEncryptedSecret encryptionKey = 3;
    // The flag to denote whether encryption is enabled or not.
    enum VolumeContainerProperties_EncryptionStatu {
        VOLUMECONTAINERPROPERTIES_ENCRYPTIONSTATU_ENABLED = 0;
        VOLUMECONTAINERPROPERTIES_ENCRYPTIONSTATU_DISABLED = 1;
    }
    VolumeContainerProperties_EncryptionStatu encryptionStatus = 4;
    // The owner ship status of the volume container. Only when the status is "NotOwned", the delete operation on the volume container is permitted.
    enum VolumeContainerProperties_OwnerShipStatu {
        VOLUMECONTAINERPROPERTIES_OWNERSHIPSTATU_OWNED = 0;
        VOLUMECONTAINERPROPERTIES_OWNERSHIPSTATU_NOTOWNED = 1;
    }
    VolumeContainerProperties_OwnerShipStatu ownerShipStatus = 5;
    // The path ID of storage account associated with the volume container.
    string storageAccountCredentialId = 6;
    // The total cloud storage for the volume container.
    int64 totalCloudStorageUsageInBytes = 7;
    // The number of volumes in the volume Container.
    int32 volumeCount = 8;
}

message VolumeFailoverMetadata {
    // The date at which the snapshot was taken.
    string backupCreatedDate = 1;
    // The path ID of the backup-element for this volume, inside the backup set.
    string backupElementId = 2;
    // The path ID of the backup set.
    string backupId = 3;
    // The path ID of the backup policy using which the snapshot was taken.
    string backupPolicyId = 4;
    // The size of the volume in bytes at the time the snapshot was taken.
    int64 sizeInBytes = 5;
    // The path ID of the volume.
    string volumeId = 6;
    // The type of the volume.
    enum VolumeFailoverMetadata_VolumeType {
        VOLUMEFAILOVERMETADATA_VOLUMETYPE_TIERED = 0;
        VOLUMEFAILOVERMETADATA_VOLUMETYPE_ARCHIVAL = 1;
        VOLUMEFAILOVERMETADATA_VOLUMETYPE_LOCALLYPINNED = 2;
    }
    VolumeFailoverMetadata_VolumeType volumeType = 7;
}

message VolumeList {
    // The value.
    repeated Volume value = 1;
}

message VolumeProperties {
    // The IDs of the access control records, associated with the volume.
    repeated string accessControlRecordIds = 1;
    // The IDs of the backup policies, in which this volume is part of.
    repeated string backupPolicyIds = 2;
    // The backup status of the volume.
    enum VolumeProperties_BackupStatu {
        VOLUMEPROPERTIES_BACKUPSTATU_ENABLED = 0;
        VOLUMEPROPERTIES_BACKUPSTATU_DISABLED = 1;
    }
    VolumeProperties_BackupStatu backupStatus = 3;
    // The monitoring status of the volume.
    enum VolumeProperties_MonitoringStatu {
        VOLUMEPROPERTIES_MONITORINGSTATU_ENABLED = 0;
        VOLUMEPROPERTIES_MONITORINGSTATU_DISABLED = 1;
    }
    VolumeProperties_MonitoringStatu monitoringStatus = 4;
    // The operation status on the volume.
    enum VolumeProperties_OperationStatu {
        VOLUMEPROPERTIES_OPERATIONSTATU_NONE = 0;
        VOLUMEPROPERTIES_OPERATIONSTATU_UPDATING = 1;
        VOLUMEPROPERTIES_OPERATIONSTATU_DELETING = 2;
        VOLUMEPROPERTIES_OPERATIONSTATU_RESTORING = 3;
    }
    VolumeProperties_OperationStatu operationStatus = 5;
    // The size of the volume in bytes.
    int64 sizeInBytes = 6;
    // The ID of the volume container, in which this volume is created.
    string volumeContainerId = 7;
    // The volume status.
    enum VolumeProperties_VolumeStatu {
        VOLUMEPROPERTIES_VOLUMESTATU_ONLINE = 0;
        VOLUMEPROPERTIES_VOLUMESTATU_OFFLINE = 1;
    }
    VolumeProperties_VolumeStatu volumeStatus = 8;
    // The type of the volume.
    enum VolumeProperties_VolumeType {
        VOLUMEPROPERTIES_VOLUMETYPE_TIERED = 0;
        VOLUMEPROPERTIES_VOLUMETYPE_ARCHIVAL = 1;
        VOLUMEPROPERTIES_VOLUMETYPE_LOCALLYPINNED = 2;
    }
    VolumeProperties_VolumeType volumeType = 9;
}

message WebproxySettings {
    // The authentication type.
    enum WebproxySettings_Authentication {
        WEBPROXYSETTINGS_AUTHENTICATION_INVALID = 0;
        WEBPROXYSETTINGS_AUTHENTICATION_NONE = 1;
        WEBPROXYSETTINGS_AUTHENTICATION_BASIC = 2;
        WEBPROXYSETTINGS_AUTHENTICATION_NTLM = 3;
    }
    WebproxySettings_Authentication authentication = 1;
    // The connection URI.
    string connectionUri = 2;
    // The webproxy username.
    string username = 3;
}

service StorSimple8000SeriesManagementClientService {
    // Lists all of the available REST API operations of the Microsoft.Storsimple provider
    rpc GetProvidersMicrosoftStorSimpleOperations(GetProvidersMicrosoftStorSimpleOperationsRequest) returns (AvailableProviderOperationList) {
      option (google.api.http) = {
        get: "/providers/Microsoft.StorSimple/operations"
      };
    }
    // Retrieves all the managers in a subscription.
    rpc GetSubscriptionsSubscriptionIdProvidersMicrosoftStorSimpleManagers(GetSubscriptionsSubscriptionIdProvidersMicrosoftStorSimpleManagersRequest) returns (ManagerList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/providers/Microsoft.StorSimple/managers"
      };
    }
    // Retrieves all the managers in a resource group.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagers(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersRequest) returns (ManagerList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers"
      };
    }
    // Returns the properties of the specified manager name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRequest) returns (Manager) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}"
      };
    }
    // Creates or updates the manager.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRequest) returns (Manager) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}"
        body: "parameters"
      };
    }
    // Deletes the manager.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}"
      };
    }
    // Retrieves all the access control records in a manager.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecords(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsRequest) returns (AccessControlRecordList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords"
      };
    }
    // Returns the properties of the specified access control record name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordNameRequest) returns (AccessControlRecord) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}"
      };
    }
    // Creates or Updates an access control record.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordNameRequest) returns (AccessControlRecord) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}"
        body: "parameters"
      };
    }
    // Deletes the access control record.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAccessControlRecordsAccessControlRecordNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}"
      };
    }
    // Retrieves all the alerts in a manager.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAlerts(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameAlertsRequest) returns (AlertList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/alerts"
      };
    }
    // Retrieves all the bandwidth setting in a manager.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettings(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsRequest) returns (BandwidthSettingList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings"
      };
    }
    // Returns the properties of the specified bandwidth setting name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingNameRequest) returns (BandwidthSetting) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
      };
    }
    // Creates or updates the bandwidth setting
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingNameRequest) returns (BandwidthSetting) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
        body: "parameters"
      };
    }
    // Deletes the bandwidth setting
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameBandwidthSettingsBandwidthSettingNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
      };
    }
    // Clear the alerts.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameClearAlerts(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameClearAlertsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/clearAlerts"
        body: "parameters"
      };
    }
    // Lists supported cloud appliance models and supported configurations.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameCloudApplianceConfigurations(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameCloudApplianceConfigurationsRequest) returns (CloudApplianceConfigurationList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/cloudApplianceConfigurations"
      };
    }
    // Complete minimal setup before using the device.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameConfigureDevice(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameConfigureDeviceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/configureDevice"
        body: "parameters"
      };
    }
    // Returns the list of devices for the specified manager.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevices(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesRequest) returns (DeviceList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices"
      };
    }
    // Returns the properties of the specified device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameRequest) returns (Device) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}"
      };
    }
    // Deletes the device.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}"
      };
    }
    // Gets the alert settings of the specified device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAlertSettingsDefault(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAlertSettingsDefaultRequest) returns (AlertSettings) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default"
      };
    }
    // Creates or updates the alert settings of the specified device.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAlertSettingsDefault(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAlertSettingsDefaultRequest) returns (AlertSettings) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default"
        body: "parameters"
      };
    }
    // Authorizes the specified device for service data encryption key rollover.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAuthorizeForServiceEncryptionKeyRollover(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameAuthorizeForServiceEncryptionKeyRolloverRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/authorizeForServiceEncryptionKeyRollover"
      };
    }
    // Gets all the backup policies in a device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPolicies(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesRequest) returns (BackupPolicyList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies"
      };
    }
    // Gets the properties of the specified backup policy name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameRequest) returns (BackupPolicy) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}"
      };
    }
    // Creates or updates the backup policy.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameRequest) returns (BackupPolicy) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}"
        body: "parameters"
      };
    }
    // Deletes the backup policy.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}"
      };
    }
    // Backup the backup policy now.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameBackup(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameBackupRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/backup"
      };
    }
    // Gets all the backup schedules in a backup policy.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedules(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesRequest) returns (BackupScheduleList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/schedules"
      };
    }
    // Gets the properties of the specified backup schedule name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleNameRequest) returns (BackupSchedule) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/schedules/{backupScheduleName}"
      };
    }
    // Creates or updates the backup schedule.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleNameRequest) returns (BackupSchedule) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/schedules/{backupScheduleName}"
        body: "parameters"
      };
    }
    // Deletes the backup schedule.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupPoliciesBackupPolicyNameSchedulesBackupScheduleNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/schedules/{backupScheduleName}"
      };
    }
    // Retrieves all the backups in a device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackups(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsRequest) returns (BackupList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups"
      };
    }
    // Deletes the backup.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}"
      };
    }
    // Clones the backup element as a new volume.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupNameElementsBackupElementNameClone(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupNameElementsBackupElementNameCloneRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}/elements/{backupElementName}/clone"
        body: "parameters"
      };
    }
    // Restores the backup on the device.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupNameRestore(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameBackupsBackupNameRestoreRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}/restore"
      };
    }
    // Deactivates the device.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameDeactivate(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameDeactivateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/deactivate"
      };
    }
    // Lists the hardware component groups at device-level.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameHardwareComponentGroups(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameHardwareComponentGroupsRequest) returns (HardwareComponentGroupList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/hardwareComponentGroups"
      };
    }
    // Changes the power state of the controller.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameHardwareComponentGroupsHardwareComponentGroupNameChangeControllerPowerState(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameHardwareComponentGroupsHardwareComponentGroupNameChangeControllerPowerStateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/hardwareComponentGroups/{hardwareComponentGroupName}/changeControllerPowerState"
        body: "parameters"
      };
    }
    // Downloads and installs the updates on the device.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameInstallUpdates(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameInstallUpdatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/installUpdates"
      };
    }
    // Gets all the jobs for specified device. With optional OData query parameters, a filtered set of jobs is returned.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobs(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobsRequest) returns (JobList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/jobs"
      };
    }
    // Gets the details of the specified job name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobsJobName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobsJobNameRequest) returns (Job) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/jobs/{jobName}"
      };
    }
    // Cancels a job on the device.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobsJobNameCancel(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameJobsJobNameCancelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/jobs/{jobName}/cancel"
      };
    }
    // Returns all failover sets for a given device and their eligibility for participating in a failover. A failover set refers to a set of volume containers that need to be failed-over as a single unit to maintain data integrity.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameListFailoverSets(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameListFailoverSetsRequest) returns (FailoverSetsList) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/listFailoverSets"
      };
    }
    // Gets the metrics for the specified device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameMetrics(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameMetricsRequest) returns (MetricList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metrics"
      };
    }
    // Gets the metric definitions for the specified device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameMetricsDefinitions(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameMetricsDefinitionsRequest) returns (MetricDefinitionList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metricsDefinitions"
      };
    }
    // Gets the network settings of the specified device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameNetworkSettingsDefault(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameNetworkSettingsDefaultRequest) returns (NetworkSettings) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default"
      };
    }
    // Returns the public encryption key of the device.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNamePublicEncryptionKey(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNamePublicEncryptionKeyRequest) returns (PublicKey) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/publicEncryptionKey"
      };
    }
    // Scans for updates on the device.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameScanForUpdates(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameScanForUpdatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/scanForUpdates"
      };
    }
    // Returns the Security properties of the specified device name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSecuritySettingsDefault(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSecuritySettingsDefaultRequest) returns (SecuritySettings) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default"
      };
    }
    // sync Remote management Certificate between appliance and Service
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSecuritySettingsDefaultSyncRemoteManagementCertificate(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSecuritySettingsDefaultSyncRemoteManagementCertificateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default/syncRemoteManagementCertificate"
      };
    }
    // Sends a test alert email.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSendTestAlertEmail(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameSendTestAlertEmailRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/sendTestAlertEmail"
        body: "parameters"
      };
    }
    // Gets the time settings of the specified device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameTimeSettingsDefault(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameTimeSettingsDefaultRequest) returns (TimeSettings) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default"
      };
    }
    // Creates or updates the time settings of the specified device.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameTimeSettingsDefault(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameTimeSettingsDefaultRequest) returns (TimeSettings) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default"
        body: "parameters"
      };
    }
    // Returns the update summary of the specified device name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameUpdateSummaryDefault(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameUpdateSummaryDefaultRequest) returns (Updates) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/updateSummary/default"
      };
    }
    // Gets all the volume containers in a device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainers(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersRequest) returns (VolumeContainerList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers"
      };
    }
    // Gets the properties of the specified volume container name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameRequest) returns (VolumeContainer) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}"
      };
    }
    // Creates or updates the volume container.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameRequest) returns (VolumeContainer) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}"
        body: "parameters"
      };
    }
    // Deletes the volume container.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}"
      };
    }
    // Gets the metrics for the specified volume container.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameMetrics(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameMetricsRequest) returns (MetricList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/metrics"
      };
    }
    // Gets the metric definitions for the specified volume container.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameMetricsDefinitions(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameMetricsDefinitionsRequest) returns (MetricDefinitionList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/metricsDefinitions"
      };
    }
    // Retrieves all the volumes in a volume container.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumes(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesRequest) returns (VolumeList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes"
      };
    }
    // Returns the properties of the specified volume name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameRequest) returns (Volume) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}"
      };
    }
    // Creates or updates the volume.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameRequest) returns (Volume) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}"
        body: "parameters"
      };
    }
    // Deletes the volume.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}"
      };
    }
    // Gets the metrics for the specified volume.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameMetrics(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameMetricsRequest) returns (MetricList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}/metrics"
      };
    }
    // Gets the metric definitions for the specified volume.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameMetricsDefinitions(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumeContainersVolumeContainerNameVolumesVolumeNameMetricsDefinitionsRequest) returns (MetricDefinitionList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}/metricsDefinitions"
      };
    }
    // Retrieves all the volumes in a device.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumes(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesDeviceNameVolumesRequest) returns (VolumeList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumes"
      };
    }
    // Failovers a set of volume containers from a specified source device to a target device.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesSourceDeviceNameFailover(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesSourceDeviceNameFailoverRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{sourceDeviceName}/failover"
        body: "parameters"
      };
    }
    // Given a list of volume containers to be failed over from a source device, this method returns the eligibility result, as a failover target, for all devices under that resource.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesSourceDeviceNameListFailoverTargets(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameDevicesSourceDeviceNameListFailoverTargetsRequest) returns (FailoverTargetsList) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{sourceDeviceName}/listFailoverTargets"
        body: "parameters"
      };
    }
    // Returns the encryption settings of the manager.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameEncryptionSettingsDefault(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameEncryptionSettingsDefaultRequest) returns (EncryptionSettings) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/encryptionSettings/default"
      };
    }
    // Returns the extended information of the specified manager name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfo(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfoRequest) returns (ManagerExtendedInfo) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo"
      };
    }
    // Creates the extended info of the manager.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfo(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfoRequest) returns (ManagerExtendedInfo) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo"
        body: "parameters"
      };
    }
    // Deletes the extended info of the manager.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfo(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameExtendedInformationVaultExtendedInfoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo"
      };
    }
    // Lists the features and their support status
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameFeatures(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameFeaturesRequest) returns (FeatureList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/features"
      };
    }
    // Gets all the jobs for the specified manager. With optional OData query parameters, a filtered set of jobs is returned.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameJobs(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameJobsRequest) returns (JobList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/jobs"
      };
    }
    // Returns the activation key of the manager.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameListActivationKey(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameListActivationKeyRequest) returns (Key) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/listActivationKey"
      };
    }
    // Returns the symmetric encrypted public encryption key of the manager.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameListPublicEncryptionKey(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameListPublicEncryptionKeyRequest) returns (SymmetricEncryptedSecret) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/listPublicEncryptionKey"
      };
    }
    // Gets the metrics for the specified manager.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameMetrics(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameMetricsRequest) returns (MetricList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metrics"
      };
    }
    // Gets the metric definitions for the specified manager.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameMetricsDefinitions(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameMetricsDefinitionsRequest) returns (MetricDefinitionList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metricsDefinitions"
      };
    }
    // Provisions cloud appliance.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameProvisionCloudAppliance(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameProvisionCloudApplianceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/provisionCloudAppliance"
        body: "parameters"
      };
    }
    // Re-generates and returns the activation key of the manager.
    rpc PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRegenerateActivationKey(PostSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameRegenerateActivationKeyRequest) returns (Key) {
      option (google.api.http) = {
        post: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/regenerateActivationKey"
      };
    }
    // Gets all the storage account credentials in a manager.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentials(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsRequest) returns (StorageAccountCredentialList) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials"
      };
    }
    // Gets the properties of the specified storage account credential name.
    rpc GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialName(GetSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialNameRequest) returns (StorageAccountCredential) {
      option (google.api.http) = {
        get: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{storageAccountCredentialName}"
      };
    }
    // Creates or updates the storage account credential.
    rpc PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialName(PutSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialNameRequest) returns (StorageAccountCredential) {
      option (google.api.http) = {
        put: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{storageAccountCredentialName}"
        body: "parameters"
      };
    }
    // Deletes the storage account credential.
    rpc DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialName(DeleteSubscriptionsSubscriptionIdResourceGroupsResourceGroupNameProvidersMicrosoftStorSimpleManagersManagerNameStorageAccountCredentialsStorageAccountCredentialNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{storageAccountCredentialName}"
      };
    }
}

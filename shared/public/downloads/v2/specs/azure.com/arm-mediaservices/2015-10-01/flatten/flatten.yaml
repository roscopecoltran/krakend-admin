consumes.length: 1
consumes[0]: application/json
definitions.ApiEndpoint.description: The properties for a Media Services REST API
  endpoint.
definitions.ApiEndpoint.example.endpoint: https://wamsbayclus001rest-hs.cloudapp.net/api/
definitions.ApiEndpoint.example.majorVersion: "2"
definitions.ApiEndpoint.properties.endpoint.description: The Media Services REST endpoint.
definitions.ApiEndpoint.properties.endpoint.type: string
definitions.ApiEndpoint.properties.majorVersion.description: The version of Media
  Services REST API.
definitions.ApiEndpoint.properties.majorVersion.type: string
definitions.ApiError.description: The error returned from a failed Media Services
  REST API call.
definitions.ApiError.example.error.code: BadRequest
definitions.ApiError.example.error.message: Name availability check is not supported
  for type Microsoft.Media/mediaservices.
definitions.ApiError.properties.code.description: Error code.
definitions.ApiError.properties.code.type: string
definitions.ApiError.properties.message.description: Error message.
definitions.ApiError.properties.message.type: string
definitions.CheckNameAvailabilityInput.description: The request body for CheckNameAvailability
  API.
definitions.CheckNameAvailabilityInput.example.name: contosomedia
definitions.CheckNameAvailabilityInput.example.type: mediaservices
definitions.CheckNameAvailabilityInput.properties.name.description: The name of the
  resource. A name must be globally unique.
definitions.CheckNameAvailabilityInput.properties.name.maxLength: 24
definitions.CheckNameAvailabilityInput.properties.name.minLength: 3
definitions.CheckNameAvailabilityInput.properties.name.pattern: ^[a-z0-9]
definitions.CheckNameAvailabilityInput.properties.name.type: string
definitions.CheckNameAvailabilityInput.properties.type.$ref: '#/definitions/ResourceType'
definitions.CheckNameAvailabilityInput.properties.type.description: The type of the
  resource - mediaservices.
definitions.CheckNameAvailabilityInput.required.length: 2
definitions.CheckNameAvailabilityInput.required[0]: name
definitions.CheckNameAvailabilityInput.required[1]: type
definitions.CheckNameAvailabilityOutput.description: The response body for CheckNameAvailability
  API.
definitions.CheckNameAvailabilityOutput.example.value.length: 3
definitions.CheckNameAvailabilityOutput.example.value[0].NameAvailable: true
definitions.CheckNameAvailabilityOutput.example.value[1].Message: Already in use by
  another Media Service instance. Please try again with a name that is not likely
  to be in use.
definitions.CheckNameAvailabilityOutput.example.value[1].NameAvailable: false
definitions.CheckNameAvailabilityOutput.example.value[1].Reason: AlreadyExists
definitions.CheckNameAvailabilityOutput.example.value[2].Message: The media service
  name should be between 3 and 24 characters and may contain only lowercase letters
  and numbers.
definitions.CheckNameAvailabilityOutput.example.value[2].NameAvailable: false
definitions.CheckNameAvailabilityOutput.example.value[2].Reason: Invalid
definitions.CheckNameAvailabilityOutput.properties.Message.description: Specifies
  the detailed reason if the name is not available.
definitions.CheckNameAvailabilityOutput.properties.Message.type: string
definitions.CheckNameAvailabilityOutput.properties.NameAvailable.description: Specifies
  if the name is available.
definitions.CheckNameAvailabilityOutput.properties.NameAvailable.type: boolean
definitions.CheckNameAvailabilityOutput.properties.Reason.description: Specifies the
  reason if the name is not available.
definitions.CheckNameAvailabilityOutput.properties.Reason.enum.length: 3
definitions.CheckNameAvailabilityOutput.properties.Reason.enum[0]: None
definitions.CheckNameAvailabilityOutput.properties.Reason.enum[1]: Invalid
definitions.CheckNameAvailabilityOutput.properties.Reason.enum[2]: AlreadyExists
definitions.CheckNameAvailabilityOutput.properties.Reason.type: string
definitions.CheckNameAvailabilityOutput.properties.Reason.x-ms-enum.modelAsString: false
definitions.CheckNameAvailabilityOutput.properties.Reason.x-ms-enum.name: EntityNameUnavailabilityReason
definitions.MediaService.allOf.length: 1
definitions.MediaService.allOf[0].$ref: '#/definitions/Resource'
definitions.MediaService.description: The properties of a Media Service resource.
definitions.MediaService.example.location: West US
definitions.MediaService.example.properties.storageAccounts.length: 1
definitions.MediaService.example.properties.storageAccounts[0].id: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Storage/storageAccounts/contosomedia
definitions.MediaService.example.properties.storageAccounts[0].isPrimary: true
definitions.MediaService.properties.properties.$ref: '#/definitions/MediaServiceProperties'
definitions.MediaService.properties.properties.x-ms-client-flatten: true
definitions.MediaServiceCollection.description: The collection of Media Service resources.
definitions.MediaServiceCollection.properties.value.items.$ref: '#/definitions/MediaService'
definitions.MediaServiceCollection.properties.value.type: array
definitions.MediaServiceProperties.description: The additional properties of a Media
  Service resource.
definitions.MediaServiceProperties.properties.apiEndpoints.description: Read-only
  property that lists the Media Services REST API endpoints for this resource. If
  supplied on a PUT or PATCH, the value will be ignored.
definitions.MediaServiceProperties.properties.apiEndpoints.items.$ref: '#/definitions/ApiEndpoint'
definitions.MediaServiceProperties.properties.apiEndpoints.readOnly: true
definitions.MediaServiceProperties.properties.apiEndpoints.type: array
definitions.MediaServiceProperties.properties.storageAccounts.description: The storage
  accounts for this resource.
definitions.MediaServiceProperties.properties.storageAccounts.items.$ref: '#/definitions/StorageAccount'
definitions.MediaServiceProperties.properties.storageAccounts.type: array
definitions.RegenerateKeyInput.description: The request body for a RegenerateKey API.
definitions.RegenerateKeyInput.example.keyType: Primary
definitions.RegenerateKeyInput.properties.keyType.description: The keyType indicating
  which key you want to regenerate, Primary or Secondary.
definitions.RegenerateKeyInput.properties.keyType.enum.length: 2
definitions.RegenerateKeyInput.properties.keyType.enum[0]: Primary
definitions.RegenerateKeyInput.properties.keyType.enum[1]: Secondary
definitions.RegenerateKeyInput.properties.keyType.type: string
definitions.RegenerateKeyInput.properties.keyType.x-ms-enum.modelAsString: false
definitions.RegenerateKeyInput.properties.keyType.x-ms-enum.name: KeyType
definitions.RegenerateKeyInput.required.length: 1
definitions.RegenerateKeyInput.required[0]: keyType
definitions.RegenerateKeyOutput.description: The response body for a RegenerateKey
  API.
definitions.RegenerateKeyOutput.example.key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
definitions.RegenerateKeyOutput.properties.key.description: The new value of either
  the primary or secondary key.
definitions.RegenerateKeyOutput.properties.key.type: string
definitions.Resource.description: The Azure Resource Manager resource.
definitions.Resource.properties.id.description: The id of the resource.
definitions.Resource.properties.id.readOnly: true
definitions.Resource.properties.id.type: string
definitions.Resource.properties.location.description: The geographic location of the
  resource. This must be one of the supported and registered Azure Geo Regions (for
  example, West US, East US, Southeast Asia, and so forth).
definitions.Resource.properties.location.type: string
definitions.Resource.properties.name.description: The name of the resource.
definitions.Resource.properties.name.readOnly: true
definitions.Resource.properties.name.type: string
definitions.Resource.properties.tags.additionalProperties.type: string
definitions.Resource.properties.tags.description: Tags to help categorize the resource
  in the Azure portal.
definitions.Resource.properties.tags.type: object
definitions.Resource.properties.type.description: The type of the resource
definitions.Resource.properties.type.readOnly: true
definitions.Resource.properties.type.type: string
definitions.Resource.x-ms-azure-resource: true
definitions.ResourceType.description: Type of MediaService resource.
definitions.ResourceType.enum.length: 1
definitions.ResourceType.enum[0]: mediaservices
definitions.ResourceType.type: string
definitions.ResourceType.x-ms-enum.modelAsString: false
definitions.ResourceType.x-ms-enum.name: ResourceType
definitions.ServiceKeys.description: The response body for a ListKeys API.
definitions.ServiceKeys.example.primaryAuthEndpoint: https://wamsprodglobal001acs.accesscontrol.windows.net/
definitions.ServiceKeys.example.primaryKey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
definitions.ServiceKeys.example.scope: urn:windowsazuremediaservices
definitions.ServiceKeys.example.secondaryAuthEndpoint: https://wamsprodglobal002acs.accesscontrol.windows.net/
definitions.ServiceKeys.example.secondaryKey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
definitions.ServiceKeys.properties.primaryAuthEndpoint.description: The primary authorization
  endpoint.
definitions.ServiceKeys.properties.primaryAuthEndpoint.type: string
definitions.ServiceKeys.properties.primaryKey.description: The primary key for the
  Media Service resource.
definitions.ServiceKeys.properties.primaryKey.type: string
definitions.ServiceKeys.properties.scope.description: The authorization scope.
definitions.ServiceKeys.properties.scope.type: string
definitions.ServiceKeys.properties.secondaryAuthEndpoint.description: The secondary
  authorization endpoint.
definitions.ServiceKeys.properties.secondaryAuthEndpoint.type: string
definitions.ServiceKeys.properties.secondaryKey.description: The secondary key for
  the Media Service resource.
definitions.ServiceKeys.properties.secondaryKey.type: string
definitions.StorageAccount.description: The properties of a storage account associated
  with this resource.
definitions.StorageAccount.example.id: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Storage/storageAccounts/contosomedia
definitions.StorageAccount.example.isPrimary: true
definitions.StorageAccount.properties.id.description: The id of the storage account
  resource. Media Services relies on tables and queues as well as blobs, so the primary
  storage account must be a Standard Storage account (either Microsoft.ClassicStorage
  or Microsoft.Storage). Blob only storage accounts can be added as secondary storage
  accounts (isPrimary false).
definitions.StorageAccount.properties.id.type: string
definitions.StorageAccount.properties.isPrimary.description: Is this storage account
  resource the primary storage account for the Media Service resource. Blob only storage
  must set this to false.
definitions.StorageAccount.properties.isPrimary.type: boolean
definitions.StorageAccount.required.length: 2
definitions.StorageAccount.required[0]: id
definitions.StorageAccount.required[1]: isPrimary
definitions.SyncStorageKeysInput.description: The request  body for a SyncStorageKeys
  API.
definitions.SyncStorageKeysInput.example.id: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Storage/storageAccounts/contosomedia
definitions.SyncStorageKeysInput.properties.id.description: The id of the storage
  account resource.
definitions.SyncStorageKeysInput.properties.id.type: string
definitions.SyncStorageKeysInput.required.length: 1
definitions.SyncStorageKeysInput.required[0]: id
host: management.azure.com
info.description: Media Services resource management APIs.
info.title: MediaServicesManagementClient
info.version: 2015-10-01
info.x-apisguru-categories.length: 2
info.x-apisguru-categories[0]: media
info.x-apisguru-categories[1]: cloud
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_assets.onestore.ms_cdnfiles_onestorerolling-1606-01000_shell_v3_images_logo_microsoft.png
info.x-origin.length: 1
info.x-origin[0].format: swagger
info.x-origin[0].url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/arm-mediaservices/2015-10-01/swagger/media.json
info.x-origin[0].version: "2.0"
info.x-preferred: true
info.x-providerName: azure.com
info.x-serviceName: arm-mediaservices
info.x-tags.length: 6
info.x-tags[0]: Azure
info.x-tags[1]: Microsoft
info.x-tags[2]: video
info.x-tags[3]: streaming
info.x-tags[4]: video on demand
info.x-tags[5]: broadcasting
parameters.apiVersionParameter.description: Version of the API to be used with the
  client request. Current version is 2015-10-01
parameters.apiVersionParameter.in: query
parameters.apiVersionParameter.name: api-version
parameters.apiVersionParameter.required: true
parameters.apiVersionParameter.type: string
parameters.mediaResourceNameParameter.description: Name of the Media Service.
parameters.mediaResourceNameParameter.in: path
parameters.mediaResourceNameParameter.maxLength: 24
parameters.mediaResourceNameParameter.minLength: 3
parameters.mediaResourceNameParameter.name: mediaServiceName
parameters.mediaResourceNameParameter.pattern: ^[a-z0-9]
parameters.mediaResourceNameParameter.required: true
parameters.mediaResourceNameParameter.type: string
parameters.mediaResourceNameParameter.x-ms-parameter-location: method
parameters.resourceGroupNameParameter.description: Name of the resource group within
  the Azure subscription.
parameters.resourceGroupNameParameter.in: path
parameters.resourceGroupNameParameter.name: resourceGroupName
parameters.resourceGroupNameParameter.required: true
parameters.resourceGroupNameParameter.type: string
parameters.resourceGroupNameParameter.x-ms-parameter-location: method
parameters.subscriptionIdParameter.description: The unique identifier for a Microsoft
  Azure subscription.
parameters.subscriptionIdParameter.in: path
parameters.subscriptionIdParameter.name: subscriptionId
parameters.subscriptionIdParameter.required: true
parameters.subscriptionIdParameter.type: string
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.description: Checks
  whether the Media Service resource name is available. The name must be globally
  unique.
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.externalDocs.url: https://aka.ms/media-manage
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.operationId: MediaService_CheckNameAvailability
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.parameters.length: 3
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.parameters[0].$ref: '#/parameters/subscriptionIdParameter'
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.parameters[1].$ref: '#/parameters/apiVersionParameter'
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.parameters[2].description: Properties
  needed to check the availability of a name.
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.parameters[2].in: body
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.parameters[2].name: CheckNameAvailabilityInput
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.parameters[2].required: true
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.parameters[2].schema.$ref: '#/definitions/CheckNameAvailabilityInput'
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.responses.200.description: Success.
  Returns details about whether a Media Service resource name is available.
? paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.responses.200.examples.application/json.value.length
: 1
? paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.responses.200.examples.application/json.value[0].message
: Already in use by another Media Service instance. Please try again with a name that
  is not likely to be in use.
? paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.responses.200.examples.application/json.value[0].nameAvailable
: false
? paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.responses.200.examples.application/json.value[0].reason
: AlreadyExists
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.responses.200.schema.$ref: '#/definitions/CheckNameAvailabilityOutput'
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.responses.default.description: CheckNameAvailability
  of a Media Service failed.
paths./subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability.post.responses.default.schema.$ref: '#/definitions/ApiError'
paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.description: Lists
  all of the Media Services in a resource group.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.externalDocs.url
: https://aka.ms/media-manage
paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.operationId: MediaService_ListByResourceGroup
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.parameters.length
: 3
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.parameters[0].$ref
: '#/parameters/subscriptionIdParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.parameters[1].$ref
: '#/parameters/apiVersionParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.parameters[2].$ref
: '#/parameters/resourceGroupNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.description
: Success. Returns a list of all of the Media Services accounts in a resource group.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].id
: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Media/mediaservices/contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].location
: West US
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].name
: contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].properties.apiEndpoints.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].properties.apiEndpoints[0].endpoint
: https://wamsbayclus001rest-hs.cloudapp.net/api/
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].properties.apiEndpoints[0].majorVersion
: "2"
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].properties.storageAccounts.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].properties.storageAccounts[0].id
: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Storage/storageAccounts/contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].properties.storageAccounts[0].isPrimary
: true
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.examples.application/json.value[0].type
: Microsoft.Media/mediaservices
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.200.schema.$ref
: '#/definitions/MediaServiceCollection'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.default.description
: List Media Services failed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices.get.responses.default.schema.$ref
: '#/definitions/ApiError'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.description
: Deletes a Media Service.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.externalDocs.url
: https://aka.ms/media-manage
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.operationId
: MediaService_Delete
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.parameters.length
: 4
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.parameters[0].$ref
: '#/parameters/subscriptionIdParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.parameters[1].$ref
: '#/parameters/apiVersionParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.parameters[2].$ref
: '#/parameters/resourceGroupNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.parameters[3].$ref
: '#/parameters/mediaResourceNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.responses.200.description
: Success. The Media Services account was deleted.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.responses.204.description
: No Content. The account name does not exist.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.responses.default.description
: Delete Media Services failed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.delete.responses.default.schema.$ref
: '#/definitions/ApiError'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.description
: Gets a Media Service.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.externalDocs.url
: https://aka.ms/media-manage
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.operationId
: MediaService_Get
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.parameters.length
: 4
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.parameters[0].$ref
: '#/parameters/subscriptionIdParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.parameters[1].$ref
: '#/parameters/apiVersionParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.parameters[2].$ref
: '#/parameters/resourceGroupNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.parameters[3].$ref
: '#/parameters/mediaResourceNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.description
: Success. Returns the details of the Media Services account.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.id
: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Media/mediaservices/contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.location
: West US
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.name
: contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.properties.apiEndpoints.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.properties.apiEndpoints[0].endpoint
: https://wamsbayclus001rest-hs.cloudapp.net/api/
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.properties.apiEndpoints[0].majorVersion
: "2"
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.properties.storageAccounts.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.properties.storageAccounts[0].id
: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Storage/storageAccounts/contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.properties.storageAccounts[0].isPrimary
: true
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.examples.application/json.type
: Microsoft.Media/mediaservices
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.200.schema.$ref
: '#/definitions/MediaService'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.default.description
: Get Media Services failed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.get.responses.default.schema.$ref
: '#/definitions/ApiError'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.description
: Updates a Media Service.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.externalDocs.url
: https://aka.ms/media-manage
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.operationId
: MediaService_Update
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters.length
: 5
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[0].$ref
: '#/parameters/subscriptionIdParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[1].$ref
: '#/parameters/apiVersionParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[2].$ref
: '#/parameters/resourceGroupNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[3].$ref
: '#/parameters/mediaResourceNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[4].description
: Media Service properties needed for update.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[4].in
: body
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[4].name
: MediaService
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[4].required
: true
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.parameters[4].schema.$ref
: '#/definitions/MediaService'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.description
: Success. The Media Services account was updated.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.id
: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Media/mediaservices/contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.location
: West US
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.name
: contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.properties.apiEndpoints.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.properties.apiEndpoints[0].endpoint
: https://wamsbayclus001rest-hs.cloudapp.net/api/
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.properties.apiEndpoints[0].majorVersion
: "2"
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.properties.storageAccounts.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.properties.storageAccounts[0].id
: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Storage/storageAccounts/contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.properties.storageAccounts[0].isPrimary
: true
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.examples.application/json.type
: Microsoft.Media/mediaservices
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.200.schema.$ref
: '#/definitions/MediaService'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.default.description
: Update Media Services failed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.patch.responses.default.schema.$ref
: '#/definitions/ApiError'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.description
: Creates a Media Service.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.externalDocs.url
: https://aka.ms/media-manage
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.operationId
: MediaService_Create
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters.length
: 5
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[0].$ref
: '#/parameters/subscriptionIdParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[1].$ref
: '#/parameters/apiVersionParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[2].$ref
: '#/parameters/resourceGroupNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[3].$ref
: '#/parameters/mediaResourceNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[4].description
: Media Service properties needed for creation.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[4].in
: body
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[4].name
: MediaService
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[4].required
: true
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.parameters[4].schema.$ref
: '#/definitions/MediaService'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.description
: Success. Returns the new Media Services account.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.id
: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Media/mediaservices/contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.location
: West US
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.name
: contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.properties.apiEndpoints.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.properties.apiEndpoints[0].endpoint
: https://wamsbayclus001rest-hs.cloudapp.net/api/
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.properties.apiEndpoints[0].majorVersion
: "2"
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.properties.storageAccounts.length
: 1
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.properties.storageAccounts[0].id
: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-media/providers/Microsoft.Storage/storageAccounts/contosomedia
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.properties.storageAccounts[0].isPrimary
: true
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.examples.application/json.type
: Microsoft.Media/mediaservices
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.201.schema.$ref
: '#/definitions/MediaService'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.default.description
: Create Media Services failed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}.put.responses.default.schema.$ref
: '#/definitions/ApiError'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.description
: Lists the keys for a Media Service.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.externalDocs.url
: https://aka.ms/media-manage
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.operationId
: MediaService_ListKeys
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.parameters.length
: 4
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.parameters[0].$ref
: '#/parameters/subscriptionIdParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.parameters[1].$ref
: '#/parameters/apiVersionParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.parameters[2].$ref
: '#/parameters/resourceGroupNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.parameters[3].$ref
: '#/parameters/mediaResourceNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.200.description
: Success. The keys for the Media Services account were listed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.200.examples.application/json.primaryAuthEndpoint
: https://wamsprodglobal001acs.accesscontrol.windows.net/
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.200.examples.application/json.primaryKey
: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.200.examples.application/json.scope
: urn:windowsazuremediaservices
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.200.examples.application/json.secondaryAuthEndpoint
: https://wamsprodglobal002acs.accesscontrol.windows.net/
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.200.examples.application/json.secondaryKey
: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.200.schema.$ref
: '#/definitions/ServiceKeys'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.default.description
: List Media Service keys failed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys.post.responses.default.schema.$ref
: '#/definitions/ApiError'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.description
: Regenerates a primary or secondary key for a Media Service.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.externalDocs.url
: https://aka.ms/media-manage
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.operationId
: MediaService_RegenerateKey
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters.length
: 5
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[0].$ref
: '#/parameters/subscriptionIdParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[1].$ref
: '#/parameters/apiVersionParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[2].$ref
: '#/parameters/resourceGroupNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[3].$ref
: '#/parameters/mediaResourceNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[4].description
: Properties needed to regenerate the Media Service key.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[4].in
: body
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[4].name
: RegenerateKeyInput
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[4].required
: true
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.parameters[4].schema.$ref
: '#/definitions/RegenerateKeyInput'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.responses.200.description
: Success. The Media Services key specified in the input was regenerated.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.responses.200.examples.application/json.key
: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.responses.200.schema.$ref
: '#/definitions/RegenerateKeyOutput'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.responses.default.description
: Regenerate Media Service key failed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey.post.responses.default.schema.$ref
: '#/definitions/ApiError'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.description
: Synchronizes storage account keys for a storage account associated with the Media
  Service account.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.externalDocs.url
: https://aka.ms/media-manage
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.operationId
: MediaService_SyncStorageKeys
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters.length
: 5
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[0].$ref
: '#/parameters/subscriptionIdParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[1].$ref
: '#/parameters/apiVersionParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[2].$ref
: '#/parameters/resourceGroupNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[3].$ref
: '#/parameters/mediaResourceNameParameter'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[4].description
: Properties needed to synchronize the keys for a storage account to the Media Service.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[4].in
: body
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[4].name
: SyncStorageKeysInput
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[4].required
: true
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.parameters[4].schema.$ref
: '#/definitions/SyncStorageKeysInput'
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.responses.200.description
: Success. The keys for the storage account were synchronized.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.responses.default.description
: Synch Media Service storage keys failed.
? paths./subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys.post.responses.default.schema.$ref
: '#/definitions/ApiError'
produces.length: 1
produces[0]: application/json
schemes.length: 1
schemes[0]: https
security.length: 1
security[0].azure_auth.length: 1
security[0].azure_auth[0]: user_impersonation
securityDefinitions.azure_auth.authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
securityDefinitions.azure_auth.description: Azure Active Directory OAuth2 Flow
securityDefinitions.azure_auth.flow: implicit
securityDefinitions.azure_auth.scopes.user_impersonation: impersonate your user account
securityDefinitions.azure_auth.type: oauth2
swagger: "2.0"

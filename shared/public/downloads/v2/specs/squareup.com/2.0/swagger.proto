syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package squareconnect;

message GetV1MeEmployeesRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
    string begin_created_at = 2;
    // If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
    string begin_updated_at = 3;
    // If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
    string end_created_at = 4;
    // If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
    string end_updated_at = 5;
    // If provided, the endpoint returns only employee entities with the specified external_id.
    string external_id = 6;
    // The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
    int32 limit = 7;
    // The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
    enum GetV1MeEmployeesRequest_Order {
        GETV1MEEMPLOYEESREQUEST_ORDER_ASC = 0;
        GETV1MEEMPLOYEESREQUEST_ORDER_DESC = 1;
    }
    GetV1MeEmployeesRequest_Order order = 8;
    // If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
    enum GetV1MeEmployeesRequest_Statu {
        GETV1MEEMPLOYEESREQUEST_STATU_ACTIVE = 0;
        GETV1MEEMPLOYEESREQUEST_STATU_INACTIVE = 1;
    }
    GetV1MeEmployeesRequest_Statu status = 9;
}

message GetV1MeEmployeesResponse {
    repeated v1Employee items = 1;
}

message PostV1MeEmployeesRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Employee body = 1;
}

message GetV1MeEmployeesEmployee_idRequest {
    // The employee's ID.
    string employee_id = 1;
}

message PutV1MeEmployeesEmployee_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Employee body = 1;
    // The ID of the role to modify.
    string employee_id = 2;
}

message GetV1MeLocationsResponse {
    repeated v1Merchant items = 1;
}

message GetV1MeRolesRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
    int32 limit = 2;
    // The order in which employees are listed in the response, based on their created_at field.Default value: ASC
    enum GetV1MeRolesRequest_Order {
        GETV1MEROLESREQUEST_ORDER_ASC = 0;
        GETV1MEROLESREQUEST_ORDER_DESC = 1;
    }
    GetV1MeRolesRequest_Order order = 3;
}

message GetV1MeRolesResponse {
    repeated v1EmployeeRole items = 1;
}

message PostV1MeRolesRequest {
    // An EmployeeRole object with a name and permissions, and an optional owner flag.
    v1EmployeeRole EmployeeRole = 1;
}

message GetV1MeRolesRole_idRequest {
    // The role's ID.
    string role_id = 1;
}

message PutV1MeRolesRole_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1EmployeeRole body = 1;
    // The ID of the role to modify.
    string role_id = 2;
}

message GetV1MeTimecardsRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
    string begin_clockin_time = 2;
    // If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
    string begin_clockout_time = 3;
    // If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
    string begin_updated_at = 4;
    // If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned.
    bool deleted = 5;
    // If provided, the endpoint returns only timecards for the employee with the specified ID.
    string employee_id = 6;
    // If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
    string end_clockin_time = 7;
    // If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
    string end_clockout_time = 8;
    // If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
    string end_updated_at = 9;
    // The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
    int32 limit = 10;
    // The order in which timecards are listed in the response, based on their created_at field.
    enum GetV1MeTimecardsRequest_Order {
        GETV1METIMECARDSREQUEST_ORDER_ASC = 0;
        GETV1METIMECARDSREQUEST_ORDER_DESC = 1;
    }
    GetV1MeTimecardsRequest_Order order = 11;
}

message GetV1MeTimecardsResponse {
    repeated v1Timecard items = 1;
}

message PostV1MeTimecardsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Timecard body = 1;
}

message GetV1MeTimecardsTimecard_idRequest {
    // The timecard's ID.
    string timecard_id = 1;
}

message PutV1MeTimecardsTimecard_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Timecard body = 1;
    // TThe ID of the timecard to modify.
    string timecard_id = 2;
}

message DeleteV1MeTimecardsTimecard_idRequest {
    // The ID of the timecard to delete.
    string timecard_id = 1;
}

message DeleteV1MeTimecardsTimecard_idResponse {
}

message GetV1MeTimecardsTimecard_idEventsRequest {
    // The ID of the timecard to list events for.
    string timecard_id = 1;
}

message GetV1MeTimecardsTimecard_idEventsResponse {
    repeated v1TimecardEvent items = 1;
}

message GetV1Location_idBankAccountsRequest {
    // The ID of the location to list bank accounts for.
    string location_id = 1;
}

message GetV1Location_idBankAccountsResponse {
    repeated v1BankAccount items = 1;
}

message GetV1Location_idBankAccountsBank_account_idRequest {
    // The bank account's Square-issued ID. You obtain this value from Settlement objects returned.
    string bank_account_id = 1;
    // The ID of the bank account's associated location.
    string location_id = 2;
}

message GetV1Location_idCashDrawerShiftsRequest {
    // The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
    string begin_time = 1;
    // The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
    string end_time = 2;
    // The ID of the location to list cash drawer shifts for.
    string location_id = 3;
    // The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
    enum GetV1Location_idCashDrawerShiftsRequest_Order {
        GETV1LOCATION_IDCASHDRAWERSHIFTSREQUEST_ORDER_ASC = 0;
        GETV1LOCATION_IDCASHDRAWERSHIFTSREQUEST_ORDER_DESC = 1;
    }
    GetV1Location_idCashDrawerShiftsRequest_Order order = 4;
}

message GetV1Location_idCashDrawerShiftsResponse {
    repeated v1CashDrawerShift items = 1;
}

message GetV1Location_idCashDrawerShiftsShift_idRequest {
    // The ID of the location to list cash drawer shifts for.
    string location_id = 1;
    // The shift's ID.
    string shift_id = 2;
}

message GetV1Location_idCategoriesRequest {
    // The ID of the location to list categories for.
    string location_id = 1;
}

message GetV1Location_idCategoriesResponse {
    repeated v1Category items = 1;
}

message PostV1Location_idCategoriesRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Category body = 1;
    // The ID of the location to create an item for.
    string location_id = 2;
}

message PutV1Location_idCategoriesCategory_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Category body = 1;
    // The ID of the category to edit.
    string category_id = 2;
    // The ID of the category's associated location.
    string location_id = 3;
}

message DeleteV1Location_idCategoriesCategory_idRequest {
    // The ID of the category to delete.
    string category_id = 1;
    // The ID of the item's associated location.
    string location_id = 2;
}

message GetV1Location_idDiscountsRequest {
    // The ID of the location to list categories for.
    string location_id = 1;
}

message GetV1Location_idDiscountsResponse {
    repeated v1Discount items = 1;
}

message PostV1Location_idDiscountsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Discount body = 1;
    // The ID of the location to create an item for.
    string location_id = 2;
}

message PutV1Location_idDiscountsDiscount_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Discount body = 1;
    // The ID of the discount to edit.
    string discount_id = 2;
    // The ID of the category's associated location.
    string location_id = 3;
}

message DeleteV1Location_idDiscountsDiscount_idRequest {
    // The ID of the discount to delete.
    string discount_id = 1;
    // The ID of the item's associated location.
    string location_id = 2;
}

message GetV1Location_idFeesRequest {
    // The ID of the location to list fees for.
    string location_id = 1;
}

message GetV1Location_idFeesResponse {
    repeated v1Fee items = 1;
}

message PostV1Location_idFeesRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Fee body = 1;
    // The ID of the location to create a fee for.
    string location_id = 2;
}

message PutV1Location_idFeesFee_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Fee body = 1;
    // The ID of the fee to edit.
    string fee_id = 2;
    // The ID of the fee's associated location.
    string location_id = 3;
}

message DeleteV1Location_idFeesFee_idRequest {
    // The ID of the fee to delete.
    string fee_id = 1;
    // The ID of the fee's associated location.
    string location_id = 2;
}

message GetV1Location_idInventoryRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
    int32 limit = 2;
    // The ID of the item's associated location.
    string location_id = 3;
}

message GetV1Location_idInventoryResponse {
    repeated v1InventoryEntry items = 1;
}

message PostV1Location_idInventoryVariation_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1AdjustInventoryRequest body = 1;
    // The ID of the item's associated location.
    string location_id = 2;
    // The ID of the variation to adjust inventory information for.
    string variation_id = 3;
}

message GetV1Location_idItemsRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // The ID of the location to list items for.
    string location_id = 2;
}

message GetV1Location_idItemsResponse {
    repeated v1Item items = 1;
}

message PostV1Location_idItemsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Item body = 1;
    // The ID of the location to create an item for.
    string location_id = 2;
}

message GetV1Location_idItemsItem_idRequest {
    // The item's ID.
    string item_id = 1;
    // The ID of the item's associated location.
    string location_id = 2;
}

message PutV1Location_idItemsItem_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Item body = 1;
    // The ID of the item to modify.
    string item_id = 2;
    // The ID of the item's associated location.
    string location_id = 3;
}

message DeleteV1Location_idItemsItem_idRequest {
    // The ID of the item to modify.
    string item_id = 1;
    // The ID of the item's associated location.
    string location_id = 2;
}

message PutV1Location_idItemsItem_idFeesFee_idRequest {
    // The ID of the fee to apply.
    string fee_id = 1;
    // The ID of the item to add the fee to.
    string item_id = 2;
    // The ID of the fee's associated location.
    string location_id = 3;
}

message DeleteV1Location_idItemsItem_idFeesFee_idRequest {
    // The ID of the fee to apply.
    string fee_id = 1;
    // The ID of the item to add the fee to.
    string item_id = 2;
    // The ID of the fee's associated location.
    string location_id = 3;
}

message PutV1Location_idItemsItem_idModifierListsModifier_list_idRequest {
    // The ID of the item to add the modifier list to.
    string item_id = 1;
    // The ID of the item's associated location.
    string location_id = 2;
    // The ID of the modifier list to apply.
    string modifier_list_id = 3;
}

message DeleteV1Location_idItemsItem_idModifierListsModifier_list_idRequest {
    // The ID of the item to remove the modifier list from.
    string item_id = 1;
    // The ID of the item's associated location.
    string location_id = 2;
    // The ID of the modifier list to remove.
    string modifier_list_id = 3;
}

message PostV1Location_idItemsItem_idVariationsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Variation body = 1;
    // The item's ID.
    string item_id = 2;
    // The ID of the item's associated location.
    string location_id = 3;
}

message PutV1Location_idItemsItem_idVariationsVariation_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Variation body = 1;
    // The ID of the item to modify.
    string item_id = 2;
    // The ID of the item's associated location.
    string location_id = 3;
    // The ID of the variation to modify.
    string variation_id = 4;
}

message DeleteV1Location_idItemsItem_idVariationsVariation_idRequest {
    // The ID of the item to delete.
    string item_id = 1;
    // The ID of the item's associated location.
    string location_id = 2;
    // The ID of the variation to delete.
    string variation_id = 3;
}

message GetV1Location_idModifierListsRequest {
    // The ID of the location to list modifier lists for.
    string location_id = 1;
}

message GetV1Location_idModifierListsResponse {
    repeated v1ModifierList items = 1;
}

message PostV1Location_idModifierListsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1ModifierList body = 1;
    // The ID of the location to create a modifier list for.
    string location_id = 2;
}

message GetV1Location_idModifierListsModifier_list_idRequest {
    // The ID of the item's associated location.
    string location_id = 1;
    // The modifier list's ID.
    string modifier_list_id = 2;
}

message PutV1Location_idModifierListsModifier_list_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1UpdateModifierListRequest body = 1;
    // The ID of the item's associated location.
    string location_id = 2;
    // The ID of the modifier list to edit.
    string modifier_list_id = 3;
}

message DeleteV1Location_idModifierListsModifier_list_idRequest {
    // The ID of the item's associated location.
    string location_id = 1;
    // The ID of the modifier list to delete.
    string modifier_list_id = 2;
}

message PostV1Location_idModifierListsModifier_list_idModifierOptionsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1ModifierOption body = 1;
    // The ID of the item's associated location.
    string location_id = 2;
    // The ID of the modifier list to edit.
    string modifier_list_id = 3;
}

message PutV1Location_idModifierListsModifier_list_idModifierOptionsModifier_option_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1ModifierOption body = 1;
    // The ID of the item's associated location.
    string location_id = 2;
    // The ID of the modifier list to edit.
    string modifier_list_id = 3;
    // The ID of the modifier list to edit.
    string modifier_option_id = 4;
}

message DeleteV1Location_idModifierListsModifier_list_idModifierOptionsModifier_option_idRequest {
    // The ID of the item's associated location.
    string location_id = 1;
    // The ID of the modifier list to delete.
    string modifier_list_id = 2;
    // The ID of the modifier list to edit.
    string modifier_option_id = 3;
}

message GetV1Location_idOrdersRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // The maximum number of payments to return in a single response. This value cannot exceed 200.
    int32 limit = 2;
    // The ID of the location to list online store orders for.
    string location_id = 3;
    // TThe order in which payments are listed in the response.
    enum GetV1Location_idOrdersRequest_Order {
        GETV1LOCATION_IDORDERSREQUEST_ORDER_ASC = 0;
        GETV1LOCATION_IDORDERSREQUEST_ORDER_DESC = 1;
    }
    GetV1Location_idOrdersRequest_Order order = 4;
}

message GetV1Location_idOrdersResponse {
    repeated v1Order items = 1;
}

message GetV1Location_idOrdersOrder_idRequest {
    // The ID of the order's associated location.
    string location_id = 1;
    // The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
    string order_id = 2;
}

message PutV1Location_idOrdersOrder_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1UpdateOrderRequest body = 1;
    // The ID of the order's associated location.
    string location_id = 2;
    // The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
    string order_id = 3;
}

message GetV1Location_idPagesRequest {
    // The ID of the location to list Favorites pages for.
    string location_id = 1;
}

message GetV1Location_idPagesResponse {
    repeated v1Page items = 1;
}

message PostV1Location_idPagesRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Page body = 1;
    // The ID of the location to create an item for.
    string location_id = 2;
}

message PutV1Location_idPagesPage_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1Page body = 1;
    // The ID of the Favorites page's associated location
    string location_id = 2;
    // The ID of the page to modify.
    string page_id = 3;
}

message DeleteV1Location_idPagesPage_idRequest {
    // The ID of the Favorites page's associated location.
    string location_id = 1;
    // The ID of the page to delete.
    string page_id = 2;
}

message PutV1Location_idPagesPage_idCellsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1PageCell body = 1;
    // The ID of the Favorites page's associated location.
    string location_id = 2;
    // The ID of the page the cell belongs to.
    string page_id = 3;
}

message DeleteV1Location_idPagesPage_idCellsRequest {
    // The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
    string column = 1;
    // The ID of the Favorites page's associated location.
    string location_id = 2;
    // The ID of the page to delete.
    string page_id = 3;
    // The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
    string row = 4;
}

message GetV1Location_idPaymentsRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
    string begin_time = 2;
    // The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
    string end_time = 3;
    // The maximum number of payments to return in a single response. This value cannot exceed 200.
    int32 limit = 4;
    // The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.
    string location_id = 5;
    // The order in which payments are listed in the response.
    enum GetV1Location_idPaymentsRequest_Order {
        GETV1LOCATION_IDPAYMENTSREQUEST_ORDER_ASC = 0;
        GETV1LOCATION_IDPAYMENTSREQUEST_ORDER_DESC = 1;
    }
    GetV1Location_idPaymentsRequest_Order order = 6;
}

message GetV1Location_idPaymentsResponse {
    repeated v1Payment items = 1;
}

message GetV1Location_idPaymentsPayment_idRequest {
    // The ID of the payment's associated location.
    string location_id = 1;
    // The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.
    string payment_id = 2;
}

message GetV1Location_idRefundsRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
    string begin_time = 2;
    // The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
    string end_time = 3;
    // The maximum number of payments to return in a single response. This value cannot exceed 200.
    int32 limit = 4;
    // The ID of the location to list refunds for.
    string location_id = 5;
    // TThe order in which payments are listed in the response.
    enum GetV1Location_idRefundsRequest_Order {
        GETV1LOCATION_IDREFUNDSREQUEST_ORDER_ASC = 0;
        GETV1LOCATION_IDREFUNDSREQUEST_ORDER_DESC = 1;
    }
    GetV1Location_idRefundsRequest_Order order = 6;
}

message GetV1Location_idRefundsResponse {
    repeated v1Refund items = 1;
}

message PostV1Location_idRefundsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    v1CreateRefundRequest body = 1;
    // The ID of the original payment's associated location.
    string location_id = 2;
}

message GetV1Location_idSettlementsRequest {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint.
    string batch_token = 1;
    // The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
    string begin_time = 2;
    // The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
    string end_time = 3;
    // The maximum number of payments to return in a single response. This value cannot exceed 200.
    int32 limit = 4;
    // The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.
    string location_id = 5;
    // TThe order in which payments are listed in the response.
    enum GetV1Location_idSettlementsRequest_Order {
        GETV1LOCATION_IDSETTLEMENTSREQUEST_ORDER_ASC = 0;
        GETV1LOCATION_IDSETTLEMENTSREQUEST_ORDER_DESC = 1;
    }
    GetV1Location_idSettlementsRequest_Order order = 6;
    // Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
    enum GetV1Location_idSettlementsRequest_Statu {
        GETV1LOCATION_IDSETTLEMENTSREQUEST_STATU_SENT = 0;
        GETV1LOCATION_IDSETTLEMENTSREQUEST_STATU_FAILED = 1;
    }
    GetV1Location_idSettlementsRequest_Statu status = 7;
}

message GetV1Location_idSettlementsResponse {
    repeated v1Settlement items = 1;
}

message GetV1Location_idSettlementsSettlement_idRequest {
    // The ID of the settlements's associated location.
    string location_id = 1;
    // The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
    string settlement_id = 2;
}

message PostV2CatalogBatchDeleteRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    BatchDeleteCatalogObjectsRequest body = 1;
}

message PostV2CatalogBatchRetrieveRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    BatchRetrieveCatalogObjectsRequest body = 1;
}

message PostV2CatalogBatchUpsertRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    BatchUpsertCatalogObjectsRequest body = 1;
}

message GetV2CatalogListRequest {
    // The pagination cursor returned in the previous response. Leave unset for an initial request.
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
    // An optional case-insensitive, comma-separated list of object types to retrieve, for example
    // `ITEM,ITEM_VARIATION,CATEGORY`.
    // 
    // The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype)
    // enumeration, namely `"ITEM"`, `"ITEM_VARIATION"`, `"CATEGORY"`, `"DISCOUNT"`, `"TAX"`,
    // `"MODIFIER"`, or `"MODIFIER_LIST"`.
    string types = 2;
}

message PostV2CatalogObjectRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    UpsertCatalogObjectRequest body = 1;
}

message GetV2CatalogObjectObject_idRequest {
    // If `true`, the response will include additional objects that are related to the
    // requested object, as follows:
    // 
    // If the `object` field of the response contains a [CatalogItem](#type-catalogitem),
    // its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and
    // [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the
    // response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation),
    // its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of
    // the response.
    // 
    // Default value: `false`
    bool include_related_objects = 1;
    // The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.
    string object_id = 2;
}

message DeleteV2CatalogObjectObject_idRequest {
    // The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other
    // objects in the graph that depend on that object will be deleted as well (for example, deleting a
    // [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).
    string object_id = 1;
}

message PostV2CatalogSearchRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    SearchCatalogObjectsRequest body = 1;
}

message PostV2CatalogUpdateItemModifierListsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    UpdateItemModifierListsRequest body = 1;
}

message PostV2CatalogUpdateItemTaxesRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    UpdateItemTaxesRequest body = 1;
}

message GetV2CustomersRequest {
    // A pagination cursor returned by a previous call to this endpoint.
    // Provide this to retrieve the next set of results for your original query.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
}

message PostV2CustomersRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    CreateCustomerRequest body = 1;
}

message GetV2CustomersCustomer_idRequest {
    // The ID of the customer to retrieve.
    string customer_id = 1;
}

message PutV2CustomersCustomer_idRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    UpdateCustomerRequest body = 1;
    // The ID of the customer to update.
    string customer_id = 2;
}

message DeleteV2CustomersCustomer_idRequest {
    // The ID of the customer to delete.
    string customer_id = 1;
}

message PostV2CustomersCustomer_idCardsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    CreateCustomerCardRequest body = 1;
    // The ID of the customer to link the card on file to.
    string customer_id = 2;
}

message DeleteV2CustomersCustomer_idCardsCard_idRequest {
    // The ID of the card on file to delete.
    string card_id = 1;
    // The ID of the customer that the card on file belongs to.
    string customer_id = 2;
}

message PostV2LocationsLocation_idCheckoutsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    CreateCheckoutRequest body = 1;
    // The ID of the business location to associate the checkout with.
    string location_id = 2;
}

message GetV2LocationsLocation_idRefundsRequest {
    // The beginning of the requested reporting period, in RFC 3339 format.
    // 
    // See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
    // 
    // Default value: The current time minus one year.
    string begin_time = 1;
    // A pagination cursor returned by a previous call to this endpoint.
    // Provide this to retrieve the next set of results for your original query.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 2;
    // The end of the requested reporting period, in RFC 3339 format.
    // 
    // See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
    // 
    // Default value: The current time.
    string end_time = 3;
    // The ID of the location to list refunds for.
    string location_id = 4;
    // The order in which results are listed in the response (`ASC` for
    // oldest first, `DESC` for newest first).
    // 
    // Default value: `DESC`
    enum GetV2LocationsLocation_idRefundsRequest_Sort_order {
        GETV2LOCATIONSLOCATION_IDREFUNDSREQUEST_SORT_ORDER_DESC = 0;
        GETV2LOCATIONSLOCATION_IDREFUNDSREQUEST_SORT_ORDER_ASC = 1;
    }
    GetV2LocationsLocation_idRefundsRequest_Sort_order sort_order = 5;
}

message GetV2LocationsLocation_idTransactionsRequest {
    // The beginning of the requested reporting period, in RFC 3339 format.
    // 
    // See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
    // 
    // Default value: The current time minus one year.
    string begin_time = 1;
    // A pagination cursor returned by a previous call to this endpoint.
    // Provide this to retrieve the next set of results for your original query.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 2;
    // The end of the requested reporting period, in RFC 3339 format.
    // 
    // See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
    // 
    // Default value: The current time.
    string end_time = 3;
    // The ID of the location to list transactions for.
    string location_id = 4;
    // The order in which results are listed in the response (`ASC` for
    // oldest first, `DESC` for newest first).
    // 
    // Default value: `DESC`
    enum GetV2LocationsLocation_idTransactionsRequest_Sort_order {
        GETV2LOCATIONSLOCATION_IDTRANSACTIONSREQUEST_SORT_ORDER_DESC = 0;
        GETV2LOCATIONSLOCATION_IDTRANSACTIONSREQUEST_SORT_ORDER_ASC = 1;
    }
    GetV2LocationsLocation_idTransactionsRequest_Sort_order sort_order = 5;
}

message PostV2LocationsLocation_idTransactionsRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    ChargeRequest body = 1;
    // The ID of the location to associate the created transaction with.
    string location_id = 2;
}

message GetV2LocationsLocation_idTransactionsTransaction_idRequest {
    // The ID of the transaction's associated location.
    string location_id = 1;
    // The ID of the transaction to retrieve.
    string transaction_id = 2;
}

message PostV2LocationsLocation_idTransactionsTransaction_idCaptureRequest {
    string location_id = 1;
    string transaction_id = 2;
}

message PostV2LocationsLocation_idTransactionsTransaction_idRefundRequest {
    // An object containing the fields to POST for the request.
    // 
    // See the corresponding object definition for field details.
    CreateRefundRequest body = 1;
    // The ID of the original transaction's associated location.
    string location_id = 2;
    // The ID of the original transaction that includes the tender to refund.
    string transaction_id = 3;
}

message PostV2LocationsLocation_idTransactionsTransaction_idVoidRequest {
    string location_id = 1;
    string transaction_id = 2;
}

message Address {
    // The first line of the address.
    // 
    // Fields that start with `address_line` provide the address's most specific
    // details, like street number, street name, and building name. They do *not*
    // provide less specific details like city, state/province, or country (these
    // details are provided in other fields).
    string address_line_1 = 1;
    // The second line of the address, if any.
    string address_line_2 = 2;
    // The third line of the address, if any.
    string address_line_3 = 3;
    // A civil entity within the address's country. In the US, this
    // is the state.
    string administrative_district_level_1 = 4;
    // A civil entity within the address's `administrative_district_level_1`.
    // In the US, this is the county.
    string administrative_district_level_2 = 5;
    // A civil entity within the address's `administrative_district_level_2`,
    // if any.
    string administrative_district_level_3 = 6;
    // The address's country, in ISO 3166-1-alpha-2 format.
    enum Address_Country {
        ADDRESS_COUNTRY_ZZ = 0;
        ADDRESS_COUNTRY_AD = 1;
        ADDRESS_COUNTRY_AE = 2;
        ADDRESS_COUNTRY_AF = 3;
        ADDRESS_COUNTRY_AG = 4;
        ADDRESS_COUNTRY_AI = 5;
        ADDRESS_COUNTRY_AL = 6;
        ADDRESS_COUNTRY_AM = 7;
        ADDRESS_COUNTRY_AO = 8;
        ADDRESS_COUNTRY_AQ = 9;
        ADDRESS_COUNTRY_AR = 10;
        ADDRESS_COUNTRY_AS = 11;
        ADDRESS_COUNTRY_AT = 12;
        ADDRESS_COUNTRY_AU = 13;
        ADDRESS_COUNTRY_AW = 14;
        ADDRESS_COUNTRY_AX = 15;
        ADDRESS_COUNTRY_AZ = 16;
        ADDRESS_COUNTRY_BA = 17;
        ADDRESS_COUNTRY_BB = 18;
        ADDRESS_COUNTRY_BD = 19;
        ADDRESS_COUNTRY_BE = 20;
        ADDRESS_COUNTRY_BF = 21;
        ADDRESS_COUNTRY_BG = 22;
        ADDRESS_COUNTRY_BH = 23;
        ADDRESS_COUNTRY_BI = 24;
        ADDRESS_COUNTRY_BJ = 25;
        ADDRESS_COUNTRY_BL = 26;
        ADDRESS_COUNTRY_BM = 27;
        ADDRESS_COUNTRY_BN = 28;
        ADDRESS_COUNTRY_BO = 29;
        ADDRESS_COUNTRY_BQ = 30;
        ADDRESS_COUNTRY_BR = 31;
        ADDRESS_COUNTRY_BS = 32;
        ADDRESS_COUNTRY_BT = 33;
        ADDRESS_COUNTRY_BV = 34;
        ADDRESS_COUNTRY_BW = 35;
        ADDRESS_COUNTRY_BY = 36;
        ADDRESS_COUNTRY_BZ = 37;
        ADDRESS_COUNTRY_CA = 38;
        ADDRESS_COUNTRY_CC = 39;
        ADDRESS_COUNTRY_CD = 40;
        ADDRESS_COUNTRY_CF = 41;
        ADDRESS_COUNTRY_CG = 42;
        ADDRESS_COUNTRY_CH = 43;
        ADDRESS_COUNTRY_CI = 44;
        ADDRESS_COUNTRY_CK = 45;
        ADDRESS_COUNTRY_CL = 46;
        ADDRESS_COUNTRY_CM = 47;
        ADDRESS_COUNTRY_CN = 48;
        ADDRESS_COUNTRY_CO = 49;
        ADDRESS_COUNTRY_CR = 50;
        ADDRESS_COUNTRY_CU = 51;
        ADDRESS_COUNTRY_CV = 52;
        ADDRESS_COUNTRY_CW = 53;
        ADDRESS_COUNTRY_CX = 54;
        ADDRESS_COUNTRY_CY = 55;
        ADDRESS_COUNTRY_CZ = 56;
        ADDRESS_COUNTRY_DE = 57;
        ADDRESS_COUNTRY_DJ = 58;
        ADDRESS_COUNTRY_DK = 59;
        ADDRESS_COUNTRY_DM = 60;
        ADDRESS_COUNTRY_DO = 61;
        ADDRESS_COUNTRY_DZ = 62;
        ADDRESS_COUNTRY_EC = 63;
        ADDRESS_COUNTRY_EE = 64;
        ADDRESS_COUNTRY_EG = 65;
        ADDRESS_COUNTRY_EH = 66;
        ADDRESS_COUNTRY_ER = 67;
        ADDRESS_COUNTRY_ES = 68;
        ADDRESS_COUNTRY_ET = 69;
        ADDRESS_COUNTRY_FI = 70;
        ADDRESS_COUNTRY_FJ = 71;
        ADDRESS_COUNTRY_FK = 72;
        ADDRESS_COUNTRY_FM = 73;
        ADDRESS_COUNTRY_FO = 74;
        ADDRESS_COUNTRY_FR = 75;
        ADDRESS_COUNTRY_GA = 76;
        ADDRESS_COUNTRY_GB = 77;
        ADDRESS_COUNTRY_GD = 78;
        ADDRESS_COUNTRY_GE = 79;
        ADDRESS_COUNTRY_GF = 80;
        ADDRESS_COUNTRY_GG = 81;
        ADDRESS_COUNTRY_GH = 82;
        ADDRESS_COUNTRY_GI = 83;
        ADDRESS_COUNTRY_GL = 84;
        ADDRESS_COUNTRY_GM = 85;
        ADDRESS_COUNTRY_GN = 86;
        ADDRESS_COUNTRY_GP = 87;
        ADDRESS_COUNTRY_GQ = 88;
        ADDRESS_COUNTRY_GR = 89;
        ADDRESS_COUNTRY_GS = 90;
        ADDRESS_COUNTRY_GT = 91;
        ADDRESS_COUNTRY_GU = 92;
        ADDRESS_COUNTRY_GW = 93;
        ADDRESS_COUNTRY_GY = 94;
        ADDRESS_COUNTRY_HK = 95;
        ADDRESS_COUNTRY_HM = 96;
        ADDRESS_COUNTRY_HN = 97;
        ADDRESS_COUNTRY_HR = 98;
        ADDRESS_COUNTRY_HT = 99;
        ADDRESS_COUNTRY_HU = 100;
        ADDRESS_COUNTRY_ID = 101;
        ADDRESS_COUNTRY_IE = 102;
        ADDRESS_COUNTRY_IL = 103;
        ADDRESS_COUNTRY_IM = 104;
        ADDRESS_COUNTRY_IN = 105;
        ADDRESS_COUNTRY_IO = 106;
        ADDRESS_COUNTRY_IQ = 107;
        ADDRESS_COUNTRY_IR = 108;
        ADDRESS_COUNTRY_IS = 109;
        ADDRESS_COUNTRY_IT = 110;
        ADDRESS_COUNTRY_JE = 111;
        ADDRESS_COUNTRY_JM = 112;
        ADDRESS_COUNTRY_JO = 113;
        ADDRESS_COUNTRY_JP = 114;
        ADDRESS_COUNTRY_KE = 115;
        ADDRESS_COUNTRY_KG = 116;
        ADDRESS_COUNTRY_KH = 117;
        ADDRESS_COUNTRY_KI = 118;
        ADDRESS_COUNTRY_KM = 119;
        ADDRESS_COUNTRY_KN = 120;
        ADDRESS_COUNTRY_KP = 121;
        ADDRESS_COUNTRY_KR = 122;
        ADDRESS_COUNTRY_KW = 123;
        ADDRESS_COUNTRY_KY = 124;
        ADDRESS_COUNTRY_KZ = 125;
        ADDRESS_COUNTRY_LA = 126;
        ADDRESS_COUNTRY_LB = 127;
        ADDRESS_COUNTRY_LC = 128;
        ADDRESS_COUNTRY_LI = 129;
        ADDRESS_COUNTRY_LK = 130;
        ADDRESS_COUNTRY_LR = 131;
        ADDRESS_COUNTRY_LS = 132;
        ADDRESS_COUNTRY_LT = 133;
        ADDRESS_COUNTRY_LU = 134;
        ADDRESS_COUNTRY_LV = 135;
        ADDRESS_COUNTRY_LY = 136;
        ADDRESS_COUNTRY_MA = 137;
        ADDRESS_COUNTRY_MC = 138;
        ADDRESS_COUNTRY_MD = 139;
        ADDRESS_COUNTRY_ME = 140;
        ADDRESS_COUNTRY_MF = 141;
        ADDRESS_COUNTRY_MG = 142;
        ADDRESS_COUNTRY_MH = 143;
        ADDRESS_COUNTRY_MK = 144;
        ADDRESS_COUNTRY_ML = 145;
        ADDRESS_COUNTRY_MM = 146;
        ADDRESS_COUNTRY_MN = 147;
        ADDRESS_COUNTRY_MO = 148;
        ADDRESS_COUNTRY_MP = 149;
        ADDRESS_COUNTRY_MQ = 150;
        ADDRESS_COUNTRY_MR = 151;
        ADDRESS_COUNTRY_MS = 152;
        ADDRESS_COUNTRY_MT = 153;
        ADDRESS_COUNTRY_MU = 154;
        ADDRESS_COUNTRY_MV = 155;
        ADDRESS_COUNTRY_MW = 156;
        ADDRESS_COUNTRY_MX = 157;
        ADDRESS_COUNTRY_MY = 158;
        ADDRESS_COUNTRY_MZ = 159;
        ADDRESS_COUNTRY_NA = 160;
        ADDRESS_COUNTRY_NC = 161;
        ADDRESS_COUNTRY_NE = 162;
        ADDRESS_COUNTRY_NF = 163;
        ADDRESS_COUNTRY_NG = 164;
        ADDRESS_COUNTRY_NI = 165;
        ADDRESS_COUNTRY_NL = 166;
        ADDRESS_COUNTRY_NO = 167;
        ADDRESS_COUNTRY_NP = 168;
        ADDRESS_COUNTRY_NR = 169;
        ADDRESS_COUNTRY_NU = 170;
        ADDRESS_COUNTRY_NZ = 171;
        ADDRESS_COUNTRY_OM = 172;
        ADDRESS_COUNTRY_PA = 173;
        ADDRESS_COUNTRY_PE = 174;
        ADDRESS_COUNTRY_PF = 175;
        ADDRESS_COUNTRY_PG = 176;
        ADDRESS_COUNTRY_PH = 177;
        ADDRESS_COUNTRY_PK = 178;
        ADDRESS_COUNTRY_PL = 179;
        ADDRESS_COUNTRY_PM = 180;
        ADDRESS_COUNTRY_PN = 181;
        ADDRESS_COUNTRY_PR = 182;
        ADDRESS_COUNTRY_PS = 183;
        ADDRESS_COUNTRY_PT = 184;
        ADDRESS_COUNTRY_PW = 185;
        ADDRESS_COUNTRY_PY = 186;
        ADDRESS_COUNTRY_QA = 187;
        ADDRESS_COUNTRY_RE = 188;
        ADDRESS_COUNTRY_RO = 189;
        ADDRESS_COUNTRY_RS = 190;
        ADDRESS_COUNTRY_RU = 191;
        ADDRESS_COUNTRY_RW = 192;
        ADDRESS_COUNTRY_SA = 193;
        ADDRESS_COUNTRY_SB = 194;
        ADDRESS_COUNTRY_SC = 195;
        ADDRESS_COUNTRY_SD = 196;
        ADDRESS_COUNTRY_SE = 197;
        ADDRESS_COUNTRY_SG = 198;
        ADDRESS_COUNTRY_SH = 199;
        ADDRESS_COUNTRY_SI = 200;
        ADDRESS_COUNTRY_SJ = 201;
        ADDRESS_COUNTRY_SK = 202;
        ADDRESS_COUNTRY_SL = 203;
        ADDRESS_COUNTRY_SM = 204;
        ADDRESS_COUNTRY_SN = 205;
        ADDRESS_COUNTRY_SO = 206;
        ADDRESS_COUNTRY_SR = 207;
        ADDRESS_COUNTRY_SS = 208;
        ADDRESS_COUNTRY_ST = 209;
        ADDRESS_COUNTRY_SV = 210;
        ADDRESS_COUNTRY_SX = 211;
        ADDRESS_COUNTRY_SY = 212;
        ADDRESS_COUNTRY_SZ = 213;
        ADDRESS_COUNTRY_TC = 214;
        ADDRESS_COUNTRY_TD = 215;
        ADDRESS_COUNTRY_TF = 216;
        ADDRESS_COUNTRY_TG = 217;
        ADDRESS_COUNTRY_TH = 218;
        ADDRESS_COUNTRY_TJ = 219;
        ADDRESS_COUNTRY_TK = 220;
        ADDRESS_COUNTRY_TL = 221;
        ADDRESS_COUNTRY_TM = 222;
        ADDRESS_COUNTRY_TN = 223;
        ADDRESS_COUNTRY_TO = 224;
        ADDRESS_COUNTRY_TR = 225;
        ADDRESS_COUNTRY_TT = 226;
        ADDRESS_COUNTRY_TV = 227;
        ADDRESS_COUNTRY_TW = 228;
        ADDRESS_COUNTRY_TZ = 229;
        ADDRESS_COUNTRY_UA = 230;
        ADDRESS_COUNTRY_UG = 231;
        ADDRESS_COUNTRY_UM = 232;
        ADDRESS_COUNTRY_US = 233;
        ADDRESS_COUNTRY_UY = 234;
        ADDRESS_COUNTRY_UZ = 235;
        ADDRESS_COUNTRY_VA = 236;
        ADDRESS_COUNTRY_VC = 237;
        ADDRESS_COUNTRY_VE = 238;
        ADDRESS_COUNTRY_VG = 239;
        ADDRESS_COUNTRY_VI = 240;
        ADDRESS_COUNTRY_VN = 241;
        ADDRESS_COUNTRY_VU = 242;
        ADDRESS_COUNTRY_WF = 243;
        ADDRESS_COUNTRY_WS = 244;
        ADDRESS_COUNTRY_YE = 245;
        ADDRESS_COUNTRY_YT = 246;
        ADDRESS_COUNTRY_ZA = 247;
        ADDRESS_COUNTRY_ZM = 248;
        ADDRESS_COUNTRY_ZW = 249;
    }
    Address_Country country = 7;
    // Optional first name when it's representing recipient.
    string first_name = 8;
    // Optional last name when it's representing recipient.
    string last_name = 9;
    // The city or town of the address.
    string locality = 10;
    // Optional organization name when it's representing recipient.
    string organization = 11;
    // The address's postal code.
    string postal_code = 12;
    // A civil region within the address's `locality`, if any.
    string sublocality = 13;
    // A civil region within the address's `sublocality`, if any.
    string sublocality_2 = 14;
    // A civil region within the address's `sublocality_2`, if any.
    string sublocality_3 = 15;
}

message BatchDeleteCatalogObjectsRequest {
    // The IDs of the [CatalogObject](#type-catalogobject)s to be deleted. When an object is deleted, other objects
    // in the graph that depend on that object will be deleted as well (for example, deleting a
    // [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).
    repeated string object_ids = 1;
}

message BatchDeleteCatalogObjectsResponse {
    // The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    string deleted_at = 1;
    // The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request.
    repeated string deleted_object_ids = 2;
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 3;
}

message BatchRetrieveCatalogObjectsRequest {
    // If `true`, the response will include additional objects that are related to the
    // requested objects, as follows:
    // 
    // If the `objects` field of the response contains a [CatalogItem](#type-catalogitem),
    // its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and
    // [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the
    // response. If the `objects` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation),
    // its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of
    // the response.
    bool include_related_objects = 1;
    // The IDs of the [CatalogObject](#type-catalogobject)s to be retrieved.
    repeated string object_ids = 2;
}

message BatchRetrieveCatalogObjectsResponse {
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 1;
    // A list of [CatalogObject](#type-catalogobject)s returned.
    repeated CatalogObject objects = 2;
    // A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `objects` field.
    repeated CatalogObject related_objects = 3;
}

message BatchUpsertCatalogObjectsRequest {
    // A batch of [CatalogObject](#type-catalogobject)s to be inserted/updated atomically.
    // The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
    // attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
    // in one batch will not affect other batches within the same request.
    // 
    // For each object, its `updated_at` field is ignored and replaced with a current [timestamp](#workingwithdates), and its
    // `is_deleted` field must not be set to `true`.
    // 
    // To modify an existing object, supply its ID. To create a new object, use an ID starting
    // with `#`. These IDs may be used to create relationships between an object and attributes of
    // other objects that reference it. For example, you can create a [CatalogItem](#type-catalogitem) with
    // ID `#ABC` and a [CatalogItemVariation](#type-catalogitemvariation) with its `item_id` attribute set to
    // `#ABC` in order to associate the [CatalogItemVariation](#type-catalogitemvariation) with its parent
    // [CatalogItem](#type-catalogitem).
    // 
    // Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.
    // 
    // Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
    // may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
    // be inserted or updated.
    repeated CatalogObjectBatch batches = 1;
    // A value you specify that uniquely identifies this
    // request among all your requests. A common way to create
    // a valid idempotency key is to use a Universally unique
    // identifier (UUID).
    // 
    // If you're unsure whether a particular request was successful,
    // you can reattempt it with the same idempotency key without
    // worrying about creating duplicate objects.
    // 
    // See [Idempotency keys](#idempotencykeys) for more information.
    string idempotency_key = 2;
}

message BatchUpsertCatalogObjectsResponse {
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 1;
    // The mapping between client and server IDs for this Upsert.
    repeated CatalogIdMapping id_mappings = 2;
    // The created [CatalogObject](#type-catalogobject)s
    repeated CatalogObject objects = 3;
    // The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    string updated_at = 4;
}

message CaptureTransactionRequest {
}

message CaptureTransactionResponse {
    // Any errors that occurred during the request.
    repeated Error errors = 1;
}

message Card {
    // The card's billing address. This value is present only if this object
    // represents a customer's card on file.
    Address billing_address = 1;
    // The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand)
    // for all possible values.
    enum Card_Card_brand {
        CARD_CARD_BRAND_OTHER_BRAND = 0;
        CARD_CARD_BRAND_VISA = 1;
        CARD_CARD_BRAND_MASTERCARD = 2;
        CARD_CARD_BRAND_AMERICAN_EXPRESS = 3;
        CARD_CARD_BRAND_DISCOVER = 4;
        CARD_CARD_BRAND_DISCOVER_DINERS = 5;
        CARD_CARD_BRAND_JCB = 6;
        CARD_CARD_BRAND_CHINA_UNIONPAY = 7;
        CARD_CARD_BRAND_SQUARE_GIFT_CARD = 8;
    }
    Card_Card_brand card_brand = 2;
    // The cardholder name. This value is present only if this object
    // represents a customer's card on file.
    string cardholder_name = 3;
    // The month of the card's expiration date. This value is always between
    // `1` and `12`, inclusive.
    int64 exp_month = 4;
    // The four-digit year of the card's expiration date.
    int64 exp_year = 5;
    // The unique string fingerprint for the card. 
    // The fingerprint is based on the credit card number and is unique to the merchant. 
    // If a card is used at multiple locations for the same merchant, it will have the same fingerprint in each case.
    // Note: Fingerprint may not exist on old transactions.
    string fingerprint = 6;
    // The card's unique ID, if any.
    string id = 7;
    // The last 4 digits of the card's number.
    string last_4 = 8;
}

enum CardBrand {
    OTHER_BRAND = 0;
    VISA = 1;
    MASTERCARD = 2;
    AMERICAN_EXPRESS = 3;
    DISCOVER = 4;
    DISCOVER_DINERS = 5;
    JCB = 6;
    CHINA_UNIONPAY = 7;
    SQUARE_GIFT_CARD = 8;
}

message CatalogCategory {
    // The category's name. Searchable.
    string name = 1;
}

message CatalogDiscount {
    // The amount of the discount. Specify an amount of `0` if `discount_type` is `VARIABLE_AMOUNT`.
    // 
    // Do not include this field for percentage-based or variable discounts.
    Money amount_money = 1;
    // Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
    // See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values.
    enum CatalogDiscount_Discount_type {
        CATALOGDISCOUNT_DISCOUNT_TYPE_FIXED_PERCENTAGE = 0;
        CATALOGDISCOUNT_DISCOUNT_TYPE_FIXED_AMOUNT = 1;
        CATALOGDISCOUNT_DISCOUNT_TYPE_VARIABLE_PERCENTAGE = 2;
        CATALOGDISCOUNT_DISCOUNT_TYPE_VARIABLE_AMOUNT = 3;
    }
    CatalogDiscount_Discount_type discount_type = 2;
    // The color of the discount's display label in the Square Point of Sale app.
    string label_color = 3;
    // The discount's name. Searchable.
    string name = 4;
    // The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal
    // separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`
    // is `VARIABLE_PERCENTAGE`.
    // 
    // Do not include this field for amount-based or variable discounts.
    string percentage = 5;
    // Indicates whether a mobile staff member needs to enter their PIN to apply the
    // discount to a payment in the Square Point of Sale app.
    bool pin_required = 6;
}

enum CatalogDiscountType {
    FIXED_PERCENTAGE = 0;
    FIXED_AMOUNT = 1;
    VARIABLE_PERCENTAGE = 2;
    VARIABLE_AMOUNT = 3;
}

message CatalogIdMapping {
    // The client-supplied, temporary `#`-prefixed ID for a new [CatalogObject](#type-catalogobject).
    string client_object_id = 1;
    // The permanent ID for the [CatalogObject](#type-catalogobject) created by the server.
    string object_id = 2;
}

message CatalogInfoRequest {
}

message CatalogInfoResponse {
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 1;
    CatalogInfoResponseLimits limits = 2;
}

message CatalogInfoResponseLimits {
    // The maximum number of object IDs that may be included in a single
    // `/v2/catalog/batch-delete` request.
    int32 batch_delete_max_object_ids = 1;
    // The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`
    // request.
    int32 batch_retrieve_max_object_ids = 2;
    // The maximum number of objects that may appear within a single batch in a
    // `/v2/catalog/batch-upsert` request.
    int32 batch_upsert_max_objects_per_batch = 3;
    // The maximum number of objects that may appear across all batches in a
    // `/v2/catalog/batch-upsert` request.
    int32 batch_upsert_max_total_objects = 4;
    // The maximum number of results that may be returned in a page of a
    // `/v2/catalog/search` response.
    int32 search_max_page_limit = 5;
    // The maximum number of item IDs that may be included in a single
    // `/v2/catalog/update-item-modifier-lists` request.
    int32 update_item_modifier_lists_max_item_ids = 6;
    // The maximum number of modifier list IDs to be disabled that may be included in
    // a single `/v2/catalog/update-item-modifier-lists` request.
    int32 update_item_modifier_lists_max_modifier_lists_to_disable = 7;
    // The maximum number of modifier list IDs to be enabled that may be included in
    // a single `/v2/catalog/update-item-modifier-lists` request.
    int32 update_item_modifier_lists_max_modifier_lists_to_enable = 8;
    // The maximum number of item IDs that may be included in a single
    // `/v2/catalog/update-item-taxes` request.
    int32 update_item_taxes_max_item_ids = 9;
    // The maximum number of tax IDs to be disabled that may be included in a single
    // `/v2/catalog/update-item-taxes` request.
    int32 update_item_taxes_max_taxes_to_disable = 10;
    // The maximum number of tax IDs to be enabled that may be included in a single
    // `/v2/catalog/update-item-taxes` request.
    int32 update_item_taxes_max_taxes_to_enable = 11;
}

message CatalogItem {
    // The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.  Searchable.
    string abbreviation = 1;
    // If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.
    bool available_electronically = 2;
    // If `true`, the item can be added to pickup orders from the merchant's online store.
    bool available_for_pickup = 3;
    // If `true`, the item can be added to shipping orders from the merchant's online store.
    bool available_online = 4;
    // The ID of the item's category, if any.
    string category_id = 5;
    // The item's description. Searchable.
    string description = 6;
    // The URL of an image representing this item.
    string image_url = 7;
    // The color of the item's display label in the Square Point of Sale app.
    string label_color = 8;
    // A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects
    // representing the modifier lists that apply to this item, along with the overrides and min
    // and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s
    // may also be added to or deleted from an item using `UpdateItemModifierLists`.
    repeated CatalogItemModifierListInfo modifier_list_info = 9;
    // The item's name. Searchable.
    string name = 10;
    // The product type of the item. May not be changed once an item has been created.
    // 
    // Only items of product type `REGULAR` may be created by this API; items with other product
    // types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for all possible values.
    enum CatalogItem_Product_type {
        CATALOGITEM_PRODUCT_TYPE_REGULAR = 0;
        CATALOGITEM_PRODUCT_TYPE_GIFT_CARD = 1;
        CATALOGITEM_PRODUCT_TYPE_APPOINTMENTS_SERVICE = 2;
        CATALOGITEM_PRODUCT_TYPE_RETAIL_ITEM = 3;
        CATALOGITEM_PRODUCT_TYPE_RESTAURANT_ITEM = 4;
    }
    CatalogItem_Product_type product_type = 11;
    // If `false`, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)'s
    // details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s
    // before adding the item to the cart.  This is the default behavior.
    // 
    // If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected
    // modifiers, and merchants can edit modifiers by drilling down onto the item's details.
    // 
    // Third-party clients are encouraged to implement similar behaviors.
    bool skip_modifier_screen = 12;
    // A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for
    // this item. When updating an item, any taxes listed here will be added to the item.
    // [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using `UpdateItemTaxes`.
    repeated string tax_ids = 13;
    // A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.
    repeated CatalogObject variations = 14;
}

message CatalogItemModifierListInfo {
    // If `true`, enable this [CatalogModifierList](#type-catalogmodifierlist).
    bool enabled = 1;
    // If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist).
    int32 max_selected_modifiers = 2;
    // If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist).
    int32 min_selected_modifiers = 3;
    // The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo).
    string modifier_list_id = 4;
    // A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default.
    repeated CatalogModifierOverride modifier_overrides = 5;
}

enum CatalogItemProductType {
    REGULAR = 0;
    GIFT_CARD = 1;
    APPOINTMENTS_SERVICE = 2;
    RETAIL_ITEM = 3;
    RESTAURANT_ITEM = 4;
}

message CatalogItemVariation {
    // If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
    // is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
    // 
    // This value is always an integer.
    int64 inventory_alert_threshold = 1;
    // Indicates whether the item variation displays an alert when its inventory quantity is less than or equal
    // to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
    enum CatalogItemVariation_Inventory_alert_type {
        CATALOGITEMVARIATION_INVENTORY_ALERT_TYPE_NONE = 0;
        CATALOGITEMVARIATION_INVENTORY_ALERT_TYPE_LOW_QUANTITY = 1;
    }
    CatalogItemVariation_Inventory_alert_type inventory_alert_type = 2;
    // The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable.
    string item_id = 3;
    // Per-[location][#type-location] price and inventory overrides.
    repeated ItemVariationLocationOverrides location_overrides = 4;
    // The item variation's name. Searchable.
    string name = 5;
    // The item variation's price, if fixed pricing is used.
    Money price_money = 6;
    // Indicates whether the item variation's price is fixed or determined at the time
    // of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
    enum CatalogItemVariation_Pricing_type {
        CATALOGITEMVARIATION_PRICING_TYPE_FIXED_PRICING = 0;
        CATALOGITEMVARIATION_PRICING_TYPE_VARIABLE_PRICING = 1;
    }
    CatalogItemVariation_Pricing_type pricing_type = 7;
    // If the [CatalogItem](#type-catalogitem) that owns this item variation is of type
    // `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For
    // example, a 30 minute appointment would have the value `1800000`, which is equal to
    // 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
    int64 service_duration = 8;
    // The item variation's SKU, if any. Searchable.
    string sku = 9;
    // If `true`, inventory tracking is active for the variation.
    bool track_inventory = 10;
    // The item variation's UPC, if any. Searchable.
    string upc = 11;
    // Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable.
    string user_data = 12;
}

message CatalogModifier {
    // The modifier's name. Searchable.
    string name = 1;
    // The modifier's price.
    Money price_money = 2;
}

message CatalogModifierList {
    // The options included in the [CatalogModifierList](#type-catalogmodifierlist).
    // You must include at least one [CatalogModifier](#type-catalogmodifier).
    // Each [CatalogObject](#type-catalogobject) must have type `MODIFIER` and contain
    // [CatalogModifier](#type-catalogmodifier) data.
    repeated CatalogObject modifiers = 1;
    // The [CatalogModifierList](#type-catalogmodifierlist)'s name. Searchable.
    string name = 2;
    // Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist)
    // can be applied to a single [CatalogItem](#type-catalogitem). See
    // [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for all possible values.
    enum CatalogModifierList_Selection_type {
        CATALOGMODIFIERLIST_SELECTION_TYPE_SINGLE = 0;
        CATALOGMODIFIERLIST_SELECTION_TYPE_MULTIPLE = 1;
    }
    CatalogModifierList_Selection_type selection_type = 3;
}

enum CatalogModifierListSelectionType {
    SINGLE = 0;
    MULTIPLE = 1;
}

message CatalogModifierOverride {
    // The ID of the [CatalogModifier](#type-catalogmodifier) whose default behavior is being overridden.
    string modifier_id = 1;
    // If `true`, this [CatalogModifier](#type-catalogmodifier) should be selected by default for this [CatalogItem](#type-catalogitem).
    bool on_by_default = 2;
}

message CatalogObject {
    // A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
    repeated string absent_at_location_ids = 1;
    // The Connect V1 IDs for this object at each [location][#type-location] where it is present, where they
    // differ from the object's Connect V2 ID. The field will only be present for objects that
    // have been created or modified by legacy APIs.
    repeated CatalogV1Id catalog_v1_ids = 2;
    // Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type `CATEGORY`.
    CatalogCategory category_data = 3;
    // Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type `DISCOUNT`.
    CatalogDiscount discount_data = 4;
    // An identifier to reference this object in the catalog. When a new CatalogObject
    // is inserted, the client should set the id to a temporary identifier starting with
    // a `'#'` character. Other objects being inserted or updated within the same request
    // may use this identifier to refer to the new object.
    // 
    // When the server receives the new object, it will supply a unique identifier that
    // replaces the temporary identifier for all future references.
    string id = 5;
    // If `true`, the object has been deleted from the database. Must be `false` for new objects
    // being inserted. When deleted, the `updated_at` field will equal the deletion time.
    bool is_deleted = 6;
    // Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type `ITEM`.
    CatalogItem item_data = 7;
    // Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type `ITEM_VARIATION`.
    CatalogItemVariation item_variation_data = 8;
    // Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type `MODIFIER`.
    CatalogModifier modifier_data = 9;
    // Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type `MODIFIER_LIST`.
    CatalogModifierList modifier_list_data = 10;
    // If `true`, this object is present at all locations (including future locations), except where specified in
    // the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
    // except where specified in the `present_at_location_ids` field.
    bool present_at_all_locations = 11;
    // A list of locations where the object is present, even if `present_at_all_locations` is `false`.
    repeated string present_at_location_ids = 12;
    // Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type `TAX`.
    CatalogTax tax_data = 13;
    // The type of this object. Each object type has expected
    // properties expressed in a structured format within its corresponding `*_data` field below.
    // 
    // See [CatalogObjectType](#type-catalogobjecttype) for all possible values.
    enum CatalogObject_Type {
        CATALOGOBJECT_TYPE_ITEM = 0;
        CATALOGOBJECT_TYPE_CATEGORY = 1;
        CATALOGOBJECT_TYPE_ITEM_VARIATION = 2;
        CATALOGOBJECT_TYPE_TAX = 3;
        CATALOGOBJECT_TYPE_DISCOUNT = 4;
        CATALOGOBJECT_TYPE_MODIFIER_LIST = 5;
        CATALOGOBJECT_TYPE_MODIFIER = 6;
    }
    CatalogObject_Type type = 14;
    // Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., `"2016-08-15T23:59:33.123Z"`
    // would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
    string updated_at = 15;
    // The version of the object. When updating an object, the version supplied by the
    // must match the version in the database, otherwise the write will be rejected as conflicting.
    int64 version = 16;
}

message CatalogObjectBatch {
    // A list of [CatalogObject](#type-catalogobject)s belonging to this batch.
    repeated CatalogObject objects = 1;
}

enum CatalogObjectType {
    ITEM = 0;
    CATEGORY = 1;
    ITEM_VARIATION = 2;
    TAX = 3;
    DISCOUNT = 4;
    MODIFIER_LIST = 5;
    MODIFIER = 6;
}

enum CatalogPricingType {
    FIXED_PRICING = 0;
    VARIABLE_PRICING = 1;
}

message CatalogQuery {
    // A query that returns only objects for which the given (string-valued) attribute has the
    // given case-insensitive value.
    CatalogQueryExact exact_query = 1;
    // A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList](#type-catalogmodifierlist)s enabled.
    CatalogQueryItemsForModifierList items_for_modifier_list_query = 2;
    // A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax](#type-catalogtax)es enabled.
    CatalogQueryItemsForTax items_for_tax_query = 3;
    // A query that returns only objects for which the given (string-valued) attribute has the
    // given case-insensitive prefix.
    CatalogQueryPrefix prefix_query = 4;
    // A query that returns only objects for which the given (integer-valued) attribute lies in the given range.
    CatalogQueryRange range_query = 5;
    // A query that returns all objects, sorted by the given attribute.
    CatalogQuerySortedAttribute sorted_attribute_query = 6;
    // A query that returns only objects whose searchable attributes contain all of the given
    // keywords as prefixes. For example, if a [CatalogItem](#type-catalogitem) contains attributes `{"name": "t-shirt"}` and
    // `{"description": "Small, Purple"}`, it will be matched by the query `{"keywords": ["shirt", "sma", "purp"]}`.
    CatalogQueryText text_query = 7;
}

message CatalogQueryExact {
    // The name of the attribute to be searched.
    string attribute_name = 1;
    // The desired value of the search attribute.
    string attribute_value = 2;
}

message CatalogQueryItemsForModifierList {
    // A set of [CatalogModifierList](#type-catalogmodifierlist) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.
    repeated string modifier_list_ids = 1;
}

message CatalogQueryItemsForTax {
    // A set of [CatalogTax](#type-catalogtax) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.
    repeated string tax_ids = 1;
}

message CatalogQueryPrefix {
    // The name of the attribute to be searched.
    string attribute_name = 1;
    // The desired prefix of the search attribute value.
    string attribute_prefix = 2;
}

message CatalogQueryRange {
    // The desired maximum value for the search attribute (inclusive).
    int64 attribute_max_value = 1;
    // The desired minimum value for the search attribute (inclusive).
    int64 attribute_min_value = 2;
    // The name of the attribute to be searched.
    string attribute_name = 3;
}

message CatalogQuerySortedAttribute {
    // The attribute whose value should be used as the sort key.
    string attribute_name = 1;
    // The first attribute value to be returned by the query. Ascending sorts will return only
    // objects with this value or greater, while descending sorts will return only objects with this value
    // or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
    string initial_attribute_value = 2;
    // The desired [SortOrder](#type-sortorder), `"ASC"` (ascending) or `"DESC"` (descending).
    enum CatalogQuerySortedAttribute_Sort_order {
        CATALOGQUERYSORTEDATTRIBUTE_SORT_ORDER_DESC = 0;
        CATALOGQUERYSORTEDATTRIBUTE_SORT_ORDER_ASC = 1;
    }
    CatalogQuerySortedAttribute_Sort_order sort_order = 3;
}

message CatalogQueryText {
    // A list of one, two, or three search keywords. Keywords with fewer than three characters
    // are ignored.
    repeated string keywords = 1;
}

message CatalogTax {
    // If `true`, the fee applies to custom amounts entered into the Square Point of Sale
    // app that are not associated with a particular [CatalogItem](#type-catalogitem).
    bool applies_to_custom_amounts = 1;
    // Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for all possible values.
    enum CatalogTax_Calculation_phase {
        CATALOGTAX_CALCULATION_PHASE_TAX_SUBTOTAL_PHASE = 0;
        CATALOGTAX_CALCULATION_PHASE_TAX_TOTAL_PHASE = 1;
    }
    CatalogTax_Calculation_phase calculation_phase = 2;
    // If `true`, the tax will be shown as enabled in the Square Point of Sale app.
    bool enabled = 3;
    // Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for all possible values.
    enum CatalogTax_Inclusion_type {
        CATALOGTAX_INCLUSION_TYPE_ADDITIVE = 0;
        CATALOGTAX_INCLUSION_TYPE_INCLUSIVE = 1;
    }
    CatalogTax_Inclusion_type inclusion_type = 4;
    // The tax's name. Searchable.
    string name = 5;
    // The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
    // A value of `7.5` corresponds to 7.5%.
    string percentage = 6;
}

message CatalogV1Id {
    // The ID for an object in Connect V1, if different from its Connect V2 ID.
    string catalog_v1_id = 1;
    // The ID of the [location][#type-location] this Connect V1 ID is associated with.
    string location_id = 2;
}

message ChargeRequest {
    // The amount of money to charge.
    // 
    // Note that you specify the amount in the
    // __smallest denomination of the applicable currency__. For example, US dollar
    // amounts are specified in cents. See
    // [Working with monetary amounts](#workingwithmonetaryamounts) for details.
    // 
    // The value of `currency` must match the currency associated with the business
    // that is charging the card.
    Money amount_money = 1;
    // The buyer's billing address. This value is optional, but this transaction
    // is ineligible for chargeback protection if neither this parameter nor
    // `shipping_address` is provided.
    Address billing_address = 2;
    // The buyer's email address, if available. This value is optional,
    // but this transaction is ineligible for chargeback protection if it is not
    // provided.
    string buyer_email_address = 3;
    // A nonce generated from the `SqPaymentForm` that represents the card
    // to charge.
    // 
    // The application that provides a nonce to this endpoint must be the
    // _same application_ that generated the nonce with the `SqPaymentForm`.
    // Otherwise, the nonce is invalid.
    // 
    // Do not provide a value for this field if you provide a value for
    // `customer_card_id`.
    string card_nonce = 4;
    // The ID of the customer card on file to charge. Do
    // not provide a value for this field if you provide a value for `card_nonce`.
    // 
    // If you provide this value, you _must_ also provide a value for
    // `customer_id`.
    string customer_card_id = 5;
    // The ID of the customer to associate this transaction with. This field
    // is required if you provide a value for `customer_card_id`, and optional
    // otherwise.
    string customer_id = 6;
    // If `true`, the request will only perform an Auth on the provided
    // card. You can then later perform either a Capture (with the
    // [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void
    // (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).
    // 
    // Default value: `false`
    bool delay_capture = 7;
    // A value you specify that uniquely identifies this
    // transaction among transactions you've created.
    // 
    // If you're unsure whether a particular transaction succeeded,
    // you can reattempt it with the same idempotency key without
    // worrying about double-charging the buyer.
    // 
    // See [Idempotency keys](#idempotencykeys) for more information.
    string idempotency_key = 8;
    // An optional note to associate with the transaction.
    // 
    // This value cannot exceed 60 characters.
    string note = 9;
    // An optional ID you can associate with the transaction for your own
    // purposes (such as to associate the transaction with an entity ID in your
    // own database).
    // 
    // This value cannot exceed 40 characters.
    string reference_id = 10;
    // The buyer's shipping address, if available. This value is optional,
    // but this transaction is ineligible for chargeback protection if neither this
    // parameter nor `billing_address` is provided.
    Address shipping_address = 11;
}

message ChargeResponse {
    // Any errors that occurred during the request.
    repeated Error errors = 1;
    // The created transaction.
    Transaction transaction = 2;
}

message Checkout {
    // If `true`, Square Checkout will collect shipping information on your
    // behalf and store that information with the transaction information in your
    // Square Dashboard.
    // 
    // Default: `false`.
    bool ask_for_shipping_address = 1;
    // The URL that the buyer's browser should be redirected to after the
    // checkout is completed.
    string checkout_page_url = 2;
    // The time when the checkout was created, in RFC 3339 format.
    string created_at = 3;
    // ID generated by Square Checkout when a new checkout is requested.
    string id = 4;
    // The email address to display on the Square Checkout confirmation page
    // and confirmation email that the buyer can use to contact the merchant.
    // 
    // If this value is not set, the confirmation page and email will display the
    // primary email address associated with the merchant's Square account.
    // 
    // Default: none; only exists if explicitly set.
    string merchant_support_email = 5;
    // Order to be checked out.
    Order order = 6;
    // If provided, the buyer's email is pre-populated on the checkout page
    // as an editable text field.
    // 
    // Default: none; only exists if explicitly set.
    string pre_populate_buyer_email = 7;
    // If provided, the buyer's shipping info is pre-populated on the
    // checkout page as editable text fields.
    // 
    // Default: none; only exists if explicitly set.
    Address pre_populate_shipping_address = 8;
    // The URL to redirect to after checkout is completed with `checkoutId`,
    // Square's `orderId`, `transactionId`, and `referenceId` appended as URL
    // parameters. For example, if the provided redirect_url is
    // `http://www.example.com/order-complete`, a successful transaction redirects
    // the customer to:
    // 
    // `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`
    // 
    // If you do not provide a redirect URL, Square Checkout will display an order
    // confirmation page on your behalf; however Square strongly recommends that
    // you provide a redirect URL so you can verify the transaction results and
    // finalize the order through your existing/normal confirmation workflow.
    string redirect_url = 9;
}

enum Country {
    ZZ = 0;
    AD = 1;
    AE = 2;
    AF = 3;
    AG = 4;
    AI = 5;
    AL = 6;
    AM = 7;
    AO = 8;
    AQ = 9;
    AR = 10;
    AS = 11;
    AT = 12;
    AU = 13;
    AW = 14;
    AX = 15;
    AZ = 16;
    BA = 17;
    BB = 18;
    BD = 19;
    BE = 20;
    BF = 21;
    BG = 22;
    BH = 23;
    BI = 24;
    BJ = 25;
    BL = 26;
    BM = 27;
    BN = 28;
    BO = 29;
    BQ = 30;
    BR = 31;
    BS = 32;
    BT = 33;
    BV = 34;
    BW = 35;
    BY = 36;
    BZ = 37;
    CA = 38;
    CC = 39;
    CD = 40;
    CF = 41;
    CG = 42;
    CH = 43;
    CI = 44;
    CK = 45;
    CL = 46;
    CM = 47;
    CN = 48;
    CO = 49;
    CR = 50;
    CU = 51;
    CV = 52;
    CW = 53;
    CX = 54;
    CY = 55;
    CZ = 56;
    DE = 57;
    DJ = 58;
    DK = 59;
    DM = 60;
    DO = 61;
    DZ = 62;
    EC = 63;
    EE = 64;
    EG = 65;
    EH = 66;
    ER = 67;
    ES = 68;
    ET = 69;
    FI = 70;
    FJ = 71;
    FK = 72;
    FM = 73;
    FO = 74;
    FR = 75;
    GA = 76;
    GB = 77;
    GD = 78;
    GE = 79;
    GF = 80;
    GG = 81;
    GH = 82;
    GI = 83;
    GL = 84;
    GM = 85;
    GN = 86;
    GP = 87;
    GQ = 88;
    GR = 89;
    GS = 90;
    GT = 91;
    GU = 92;
    GW = 93;
    GY = 94;
    HK = 95;
    HM = 96;
    HN = 97;
    HR = 98;
    HT = 99;
    HU = 100;
    ID = 101;
    IE = 102;
    IL = 103;
    IM = 104;
    IN = 105;
    IO = 106;
    IQ = 107;
    IR = 108;
    IS = 109;
    IT = 110;
    JE = 111;
    JM = 112;
    JO = 113;
    JP = 114;
    KE = 115;
    KG = 116;
    KH = 117;
    KI = 118;
    KM = 119;
    KN = 120;
    KP = 121;
    KR = 122;
    KW = 123;
    KY = 124;
    KZ = 125;
    LA = 126;
    LB = 127;
    LC = 128;
    LI = 129;
    LK = 130;
    LR = 131;
    LS = 132;
    LT = 133;
    LU = 134;
    LV = 135;
    LY = 136;
    MA = 137;
    MC = 138;
    MD = 139;
    ME = 140;
    MF = 141;
    MG = 142;
    MH = 143;
    MK = 144;
    ML = 145;
    MM = 146;
    MN = 147;
    MO = 148;
    MP = 149;
    MQ = 150;
    MR = 151;
    MS = 152;
    MT = 153;
    MU = 154;
    MV = 155;
    MW = 156;
    MX = 157;
    MY = 158;
    MZ = 159;
    NA = 160;
    NC = 161;
    NE = 162;
    NF = 163;
    NG = 164;
    NI = 165;
    NL = 166;
    NO = 167;
    NP = 168;
    NR = 169;
    NU = 170;
    NZ = 171;
    OM = 172;
    PA = 173;
    PE = 174;
    PF = 175;
    PG = 176;
    PH = 177;
    PK = 178;
    PL = 179;
    PM = 180;
    PN = 181;
    PR = 182;
    PS = 183;
    PT = 184;
    PW = 185;
    PY = 186;
    QA = 187;
    RE = 188;
    RO = 189;
    RS = 190;
    RU = 191;
    RW = 192;
    SA = 193;
    SB = 194;
    SC = 195;
    SD = 196;
    SE = 197;
    SG = 198;
    SH = 199;
    SI = 200;
    SJ = 201;
    SK = 202;
    SL = 203;
    SM = 204;
    SN = 205;
    SO = 206;
    SR = 207;
    SS = 208;
    ST = 209;
    SV = 210;
    SX = 211;
    SY = 212;
    SZ = 213;
    TC = 214;
    TD = 215;
    TF = 216;
    TG = 217;
    TH = 218;
    TJ = 219;
    TK = 220;
    TL = 221;
    TM = 222;
    TN = 223;
    TO = 224;
    TR = 225;
    TT = 226;
    TV = 227;
    TW = 228;
    TZ = 229;
    UA = 230;
    UG = 231;
    UM = 232;
    US = 233;
    UY = 234;
    UZ = 235;
    VA = 236;
    VC = 237;
    VE = 238;
    VG = 239;
    VI = 240;
    VN = 241;
    VU = 242;
    WF = 243;
    WS = 244;
    YE = 245;
    YT = 246;
    ZA = 247;
    ZM = 248;
    ZW = 249;
}

message CreateCheckoutRequest {
    // If `true`, Square Checkout will collect shipping information on your
    // behalf and store that information with the transaction information in your
    // Square Dashboard.
    // 
    // Default: `false`.
    bool ask_for_shipping_address = 1;
    // A unique string that identifies this checkout among others
    // you've created. It can be any valid string but must be unique for every
    // order sent to Square Checkout for a given location ID.
    // 
    // The idempotency key is used to avoid processing the same order more than
    // once. If you're unsure whether a particular checkout was created
    // successfully, you can reattempt it with the same idempotency key and all the
    // same other parameters without worrying about creating duplicates.
    // 
    // We recommend using a random number/string generator native to the language
    // you are working in to generate strings for your idempotency keys.
    // 
    // See [Idempotency keys](#idempotencykeys) for more information.
    string idempotency_key = 2;
    // The email address to display on the Square Checkout confirmation page
    // and confirmation email that the buyer can use to contact the merchant.
    // 
    // If this value is not set, the confirmation page and email will display the
    // primary email address associated with the merchant's Square account.
    // 
    // Default: none; only exists if explicitly set.
    string merchant_support_email = 3;
    // The order including line items to be checked out.
    CreateOrderRequest order = 4;
    // If provided, the buyer's email is pre-populated on the checkout page
    // as an editable text field.
    // 
    // Default: none; only exists if explicitly set.
    string pre_populate_buyer_email = 5;
    // If provided, the buyer's shipping info is pre-populated on the
    // checkout page as editable text fields.
    // 
    // Default: none; only exists if explicitly set.
    Address pre_populate_shipping_address = 6;
    // The URL to redirect to after checkout is completed with `checkoutId`,
    // Square's `orderId`, `transactionId`, and `referenceId` appended as URL
    // parameters. For example, if the provided redirect_url is
    // `http://www.example.com/order-complete`, a successful transaction redirects
    // the customer to:
    // 
    // `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`
    // 
    // If you do not provide a redirect URL, Square Checkout will display an order
    // confirmation page on your behalf; however Square strongly recommends that
    // you provide a redirect URL so you can verify the transaction results and
    // finalize the order through your existing/normal confirmation workflow.
    // 
    // Default: none; only exists if explicitly set.
    string redirect_url = 7;
}

message CreateCheckoutResponse {
    // The newly created checkout.
    // If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key.
    Checkout checkout = 1;
    // Any errors that occurred during the request.
    repeated Error errors = 2;
}

message CreateCustomerCardRequest {
    // Address information for the card on file. Only the `postal_code`
    // field is required for payments in the US and Canada.
    Address billing_address = 1;
    // A card nonce representing the credit card to link to the customer.
    // 
    // Card nonces are generated by the `SqPaymentForm` that buyers enter
    // their card information into. See
    // [Embedding the payment form](/articles/adding-payment-form/) for
    // more information.
    string card_nonce = 2;
    // The cardholder's name.
    string cardholder_name = 3;
}

message CreateCustomerCardResponse {
    // The created card on file.
    Card card = 1;
    // Any errors that occurred during the request.
    repeated Error errors = 2;
}

message CreateCustomerRequest {
    // The customer's physical address.
    Address address = 1;
    // The name of the customer's company.
    string company_name = 2;
    // The customer's email address.
    string email_address = 3;
    // The customer's family (i.e., last) name.
    string family_name = 4;
    // The customer's given (i.e., first) name.
    string given_name = 5;
    // A nickname for the customer.
    string nickname = 6;
    // An optional note to associate with the customer.
    string note = 7;
    // The customer's phone number.
    string phone_number = 8;
    // An optional second ID you can set to associate the customer with an
    // entity in another system.
    string reference_id = 9;
}

message CreateCustomerResponse {
    // The created customer.
    Customer customer = 1;
    // Any errors that occurred during the request.
    repeated Error errors = 2;
}

message CreateOrderRequest {
    // The discounts include the custom discounts .
    repeated CreateOrderRequestDiscount discounts = 1;
    // The line items to associate with this order.
    // 
    // Each line item represents a different product (or a custom monetary amount)
    // to include in a purchase.
    repeated CreateOrderRequestLineItem line_items = 2;
    // An optional ID you can associate with the order for your own
    // purposes (such as to associate the order with an entity ID in your
    // own database).
    // 
    // This value cannot exceed 40 characters.
    string reference_id = 3;
    // The taxes include the custom taxes.
    repeated CreateOrderRequestTax taxes = 4;
}

message CreateOrderRequestDiscount {
    // The monetary amount of the discount.
    Money amount_money = 1;
    // The discount's name.
    string name = 2;
    // The percentage of the discount, as a string representation of a decimal number.
    // 
    // A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0
    string percentage = 3;
}

message CreateOrderRequestLineItem {
    // The base price for a single unit of the line item's associated
    // variation. If a line item represents a Custom Amount instead of a
    // particular product, this field indicates that amount.
    Money base_price_money = 1;
    // The discounts include the custom discounts.
    repeated CreateOrderRequestDiscount discounts = 2;
    // The name of the line item. This value cannot exceed 500 characters.
    string name = 3;
    // The quantity to purchase, as a string representation of a number.
    // Currently, only integer values are supported.
    string quantity = 4;
    // The taxes include the custom taxes.
    repeated CreateOrderRequestTax taxes = 5;
}

message CreateOrderRequestTax {
    // The tax's name.
    string name = 1;
    // The percentage of the tax, as a string representation of a decimal number.
    // 
    // A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0
    string percentage = 2;
    // Indicates the calculation method used to apply the line item tax.
    // 
    // Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
    enum CreateOrderRequestTax_Type {
        CREATEORDERREQUESTTAX_TYPE_UNKNOWN = 0;
        CREATEORDERREQUESTTAX_TYPE_ADDITIVE = 1;
        CREATEORDERREQUESTTAX_TYPE_INCLUSIVE = 2;
    }
    CreateOrderRequestTax_Type type = 3;
}

message CreateRefundRequest {
    // The amount of money to refund.
    // 
    // Note that you specify the amount in the
    // __smallest denomination of the applicable currency__. For example, US dollar
    // amounts are specified in cents. See
    // [Working with monetary amounts](#workingwithmonetaryamounts) for details.
    // 
    // This amount cannot exceed the amount that was originally charged to the
    // tender that corresponds to `tender_id`.
    Money amount_money = 1;
    // A value you specify that uniquely identifies this
    // refund among refunds you've created for the tender.
    // 
    // If you're unsure whether a particular refund succeeded,
    // you can reattempt it with the same idempotency key without
    // worrying about duplicating the refund.
    // 
    // See [Idempotency keys](#idempotencykeys) for more information.
    string idempotency_key = 2;
    // A description of the reason for the refund.
    // 
    // Default value: `Refund via API`
    string reason = 3;
    // The ID of the tender to refund.
    // 
    // A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods
    // of payment) associated with it, and you refund each tender separately with
    // the Connect API.
    string tender_id = 4;
}

message CreateRefundResponse {
    // Any errors that occurred during the request.
    repeated Error errors = 1;
    // The created refund.
    Refund refund = 2;
}

enum Currency {
    AED = 0;
    AFN = 1;
    ALL = 2;
    AMD = 3;
    ANG = 4;
    AOA = 5;
    ARS = 6;
    AUD = 7;
    AWG = 8;
    AZN = 9;
    BAM = 10;
    BBD = 11;
    BDT = 12;
    BGN = 13;
    BHD = 14;
    BIF = 15;
    BMD = 16;
    BND = 17;
    BOB = 18;
    BOV = 19;
    BRL = 20;
    BSD = 21;
    BTN = 22;
    BWP = 23;
    BYR = 24;
    BZD = 25;
    CAD = 26;
    CDF = 27;
    CHE = 28;
    CHF = 29;
    CHW = 30;
    CLF = 31;
    CLP = 32;
    CNY = 33;
    COP = 34;
    COU = 35;
    CRC = 36;
    CUC = 37;
    CUP = 38;
    CVE = 39;
    CZK = 40;
    DJF = 41;
    DKK = 42;
    DOP = 43;
    DZD = 44;
    EGP = 45;
    ERN = 46;
    ETB = 47;
    EUR = 48;
    FJD = 49;
    FKP = 50;
    GBP = 51;
    GEL = 52;
    GHS = 53;
    GIP = 54;
    GMD = 55;
    GNF = 56;
    GTQ = 57;
    GYD = 58;
    HKD = 59;
    HNL = 60;
    HRK = 61;
    HTG = 62;
    HUF = 63;
    IDR = 64;
    ILS = 65;
    INR = 66;
    IQD = 67;
    IRR = 68;
    ISK = 69;
    JMD = 70;
    JOD = 71;
    JPY = 72;
    KES = 73;
    KGS = 74;
    KHR = 75;
    KMF = 76;
    KPW = 77;
    KRW = 78;
    KWD = 79;
    KYD = 80;
    KZT = 81;
    LAK = 82;
    LBP = 83;
    LKR = 84;
    LRD = 85;
    LSL = 86;
    LTL = 87;
    LVL = 88;
    LYD = 89;
    MAD = 90;
    MDL = 91;
    MGA = 92;
    MKD = 93;
    MMK = 94;
    MNT = 95;
    MOP = 96;
    MRO = 97;
    MUR = 98;
    MVR = 99;
    MWK = 100;
    MXN = 101;
    MXV = 102;
    MYR = 103;
    MZN = 104;
    NAD = 105;
    NGN = 106;
    NIO = 107;
    NOK = 108;
    NPR = 109;
    NZD = 110;
    OMR = 111;
    PAB = 112;
    PEN = 113;
    PGK = 114;
    PHP = 115;
    PKR = 116;
    PLN = 117;
    PYG = 118;
    QAR = 119;
    RON = 120;
    RSD = 121;
    RUB = 122;
    RWF = 123;
    SAR = 124;
    SBD = 125;
    SCR = 126;
    SDG = 127;
    SEK = 128;
    SGD = 129;
    SHP = 130;
    SLL = 131;
    SOS = 132;
    SRD = 133;
    SSP = 134;
    STD = 135;
    SVC = 136;
    SYP = 137;
    SZL = 138;
    THB = 139;
    TJS = 140;
    TMT = 141;
    TND = 142;
    TOP = 143;
    TRY = 144;
    TTD = 145;
    TWD = 146;
    TZS = 147;
    UAH = 148;
    UGX = 149;
    USD = 150;
    USN = 151;
    USS = 152;
    UYI = 153;
    UYU = 154;
    UZS = 155;
    VEF = 156;
    VND = 157;
    VUV = 158;
    WST = 159;
    XAF = 160;
    XAG = 161;
    XAU = 162;
    XBA = 163;
    XBB = 164;
    XBC = 165;
    XBD = 166;
    XCD = 167;
    XDR = 168;
    XOF = 169;
    XPD = 170;
    XPF = 171;
    XPT = 172;
    XTS = 173;
    XXX = 174;
    YER = 175;
    ZAR = 176;
    ZMK = 177;
    ZMW = 178;
    BTC = 179;
}

message Customer {
    // The customer's physical address.
    Address address = 1;
    // The non-confidential details of the customer's cards on file.
    repeated Card cards = 2;
    // The name of the customer's company.
    string company_name = 3;
    // The time when the customer was created, in RFC 3339 format.
    string created_at = 4;
    // The customer's email address.
    string email_address = 5;
    // The customer's family (i.e., last) name.
    string family_name = 6;
    // The customer's given (i.e., first) name.
    string given_name = 7;
    // The groups the customer belongs to.
    repeated CustomerGroupInfo groups = 8;
    // The customer's unique ID.
    string id = 9;
    // The customer's nickname.
    string nickname = 10;
    // A note to associate with the customer.
    string note = 11;
    // The customer's phone number.
    string phone_number = 12;
    // The customer's preferences.
    CustomerPreferences preferences = 13;
    // A second ID you can set to associate the customer with an
    // entity in another system.
    string reference_id = 14;
    // The time when the customer was last updated, in RFC 3339 format.
    string updated_at = 15;
}

message CustomerGroupInfo {
    // The ID of the customer group.
    string id = 1;
    // The name of the customer group.
    string name = 2;
}

message CustomerPreferences {
    // The customer has unsubscribed from receiving marketing campaign emails.
    bool email_unsubscribed = 1;
}

message DeleteCatalogObjectRequest {
}

message DeleteCatalogObjectResponse {
    // The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g.,
    // "2016-09-04T23:59:33.123Z".
    string deleted_at = 1;
    // The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request.
    // Multiple IDs may be returned when associated objects are also deleted, for example
    // a [CatalogItemVariation](#type-catalogitemvariation) will be deleted (and its ID included in this field)
    // when its parent [CatalogItem](#type-catalogitem) is deleted.
    repeated string deleted_object_ids = 2;
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 3;
}

message DeleteCustomerCardRequest {
}

message DeleteCustomerCardResponse {
    // Any errors that occurred during the request.
    repeated Error errors = 1;
}

message DeleteCustomerRequest {
}

message DeleteCustomerResponse {
    // Any errors that occurred during the request.
    repeated Error errors = 1;
}

message Device {
    // The device's Square-issued ID.
    string id = 1;
    // The device's merchant-specified name.
    string name = 2;
}

message Error {
    // The error's high-level category. See [ErrorCategory](#type-errorcategory)
    // for possible values.
    enum Error_Category {
        ERROR_CATEGORY_API_ERROR = 0;
        ERROR_CATEGORY_AUTHENTICATION_ERROR = 1;
        ERROR_CATEGORY_INVALID_REQUEST_ERROR = 2;
        ERROR_CATEGORY_RATE_LIMIT_ERROR = 3;
        ERROR_CATEGORY_PAYMENT_METHOD_ERROR = 4;
        ERROR_CATEGORY_REFUND_ERROR = 5;
    }
    Error_Category category = 1;
    // The error's specific code. See [ErrorCode](#type-errorcode) for possible
    // values
    enum Error_Code {
        ERROR_CODE_INTERNAL_SERVER_ERROR = 0;
        ERROR_CODE_UNAUTHORIZED = 1;
        ERROR_CODE_ACCESS_TOKEN_EXPIRED = 2;
        ERROR_CODE_ACCESS_TOKEN_REVOKED = 3;
        ERROR_CODE_FORBIDDEN = 4;
        ERROR_CODE_INSUFFICIENT_SCOPES = 5;
        ERROR_CODE_APPLICATION_DISABLED = 6;
        ERROR_CODE_V1_APPLICATION = 7;
        ERROR_CODE_V1_ACCESS_TOKEN = 8;
        ERROR_CODE_CARD_PROCESSING_NOT_ENABLED = 9;
        ERROR_CODE_BAD_REQUEST = 10;
        ERROR_CODE_MISSING_REQUIRED_PARAMETER = 11;
        ERROR_CODE_INCORRECT_TYPE = 12;
        ERROR_CODE_INVALID_TIME = 13;
        ERROR_CODE_INVALID_TIME_RANGE = 14;
        ERROR_CODE_INVALID_VALUE = 15;
        ERROR_CODE_INVALID_CURSOR = 16;
        ERROR_CODE_UNKNOWN_QUERY_PARAMETER = 17;
        ERROR_CODE_CONFLICTING_PARAMETERS = 18;
        ERROR_CODE_EXPECTED_JSON_BODY = 19;
        ERROR_CODE_INVALID_SORT_ORDER = 20;
        ERROR_CODE_VALUE_REGEX_MISMATCH = 21;
        ERROR_CODE_VALUE_TOO_SHORT = 22;
        ERROR_CODE_VALUE_TOO_LONG = 23;
        ERROR_CODE_VALUE_TOO_LOW = 24;
        ERROR_CODE_VALUE_TOO_HIGH = 25;
        ERROR_CODE_VALUE_EMPTY = 26;
        ERROR_CODE_ARRAY_EMPTY = 27;
        ERROR_CODE_EXPECTED_BOOLEAN = 28;
        ERROR_CODE_EXPECTED_INTEGER = 29;
        ERROR_CODE_EXPECTED_FLOAT = 30;
        ERROR_CODE_EXPECTED_STRING = 31;
        ERROR_CODE_EXPECTED_OBJECT = 32;
        ERROR_CODE_EXPECTED_ARRAY = 33;
        ERROR_CODE_EXPECTED_BASE64_ENCODED_BYTE_ARRAY = 34;
        ERROR_CODE_INVALID_ARRAY_VALUE = 35;
        ERROR_CODE_INVALID_ENUM_VALUE = 36;
        ERROR_CODE_INVALID_CONTENT_TYPE = 37;
        ERROR_CODE_INVALID_FORM_VALUE = 38;
        ERROR_CODE_ONE_INSTRUMENT_EXPECTED = 39;
        ERROR_CODE_NO_FIELDS_SET = 40;
        ERROR_CODE_CARD_EXPIRED = 41;
        ERROR_CODE_INVALID_EXPIRATION = 42;
        ERROR_CODE_INVALID_EXPIRATION_YEAR = 43;
        ERROR_CODE_INVALID_EXPIRATION_DATE = 44;
        ERROR_CODE_UNSUPPORTED_CARD_BRAND = 45;
        ERROR_CODE_INVALID_CARD = 46;
        ERROR_CODE_DELAYED_TRANSACTION_EXPIRED = 47;
        ERROR_CODE_DELAYED_TRANSACTION_CANCELED = 48;
        ERROR_CODE_DELAYED_TRANSACTION_CAPTURED = 49;
        ERROR_CODE_DELAYED_TRANSACTION_FAILED = 50;
        ERROR_CODE_CARD_TOKEN_EXPIRED = 51;
        ERROR_CODE_CARD_TOKEN_USED = 52;
        ERROR_CODE_AMOUNT_TOO_HIGH = 53;
        ERROR_CODE_UNSUPPORTED_INSTRUMENT_TYPE = 54;
        ERROR_CODE_REFUND_AMOUNT_INVALID = 55;
        ERROR_CODE_REFUND_ALREADY_PENDING = 56;
        ERROR_CODE_PAYMENT_NOT_REFUNDABLE = 57;
        ERROR_CODE_INVALID_CARD_DATA = 58;
        ERROR_CODE_IDEMPOTENCY_KEY_REUSED = 59;
        ERROR_CODE_UNEXPECTED_VALUE = 60;
        ERROR_CODE_SANDBOX_NOT_SUPPORTED = 61;
        ERROR_CODE_INVALID_EMAIL_ADDRESS = 62;
        ERROR_CODE_CHECKOUT_EXPIRED = 63;
        ERROR_CODE_CARD_DECLINED = 64;
        ERROR_CODE_VERIFY_CVV_FAILURE = 65;
        ERROR_CODE_VERIFY_AVS_FAILURE = 66;
        ERROR_CODE_CARD_DECLINED_CALL_ISSUER = 67;
        ERROR_CODE_NOT_FOUND = 68;
        ERROR_CODE_REQUEST_TIMEOUT = 69;
        ERROR_CODE_CONFLICT = 70;
        ERROR_CODE_REQUEST_ENTITY_TOO_LARGE = 71;
        ERROR_CODE_UNSUPPORTED_MEDIA_TYPE = 72;
        ERROR_CODE_RATE_LIMITED = 73;
        ERROR_CODE_NOT_IMPLEMENTED = 74;
        ERROR_CODE_SERVICE_UNAVAILABLE = 75;
    }
    Error_Code code = 2;
    // A human-readable description of the error for debugging purposes.
    string detail = 3;
    // The name of the field provided in the original request that the error
    // pertains to, if any.
    string field = 4;
}

enum ErrorCategory {
    API_ERROR = 0;
    AUTHENTICATION_ERROR = 1;
    INVALID_REQUEST_ERROR = 2;
    RATE_LIMIT_ERROR = 3;
    PAYMENT_METHOD_ERROR = 4;
    REFUND_ERROR = 5;
}

enum ErrorCode {
    INTERNAL_SERVER_ERROR = 0;
    UNAUTHORIZED = 1;
    ACCESS_TOKEN_EXPIRED = 2;
    ACCESS_TOKEN_REVOKED = 3;
    FORBIDDEN = 4;
    INSUFFICIENT_SCOPES = 5;
    APPLICATION_DISABLED = 6;
    V1_APPLICATION = 7;
    V1_ACCESS_TOKEN = 8;
    CARD_PROCESSING_NOT_ENABLED = 9;
    BAD_REQUEST = 10;
    MISSING_REQUIRED_PARAMETER = 11;
    INCORRECT_TYPE = 12;
    INVALID_TIME = 13;
    INVALID_TIME_RANGE = 14;
    INVALID_VALUE = 15;
    INVALID_CURSOR = 16;
    UNKNOWN_QUERY_PARAMETER = 17;
    CONFLICTING_PARAMETERS = 18;
    EXPECTED_JSON_BODY = 19;
    INVALID_SORT_ORDER = 20;
    VALUE_REGEX_MISMATCH = 21;
    VALUE_TOO_SHORT = 22;
    VALUE_TOO_LONG = 23;
    VALUE_TOO_LOW = 24;
    VALUE_TOO_HIGH = 25;
    VALUE_EMPTY = 26;
    ARRAY_EMPTY = 27;
    EXPECTED_BOOLEAN = 28;
    EXPECTED_INTEGER = 29;
    EXPECTED_FLOAT = 30;
    EXPECTED_STRING = 31;
    EXPECTED_OBJECT = 32;
    EXPECTED_ARRAY = 33;
    EXPECTED_BASE64_ENCODED_BYTE_ARRAY = 34;
    INVALID_ARRAY_VALUE = 35;
    INVALID_ENUM_VALUE = 36;
    INVALID_CONTENT_TYPE = 37;
    INVALID_FORM_VALUE = 38;
    ONE_INSTRUMENT_EXPECTED = 39;
    NO_FIELDS_SET = 40;
    CARD_EXPIRED = 41;
    INVALID_EXPIRATION = 42;
    INVALID_EXPIRATION_YEAR = 43;
    INVALID_EXPIRATION_DATE = 44;
    UNSUPPORTED_CARD_BRAND = 45;
    INVALID_CARD = 46;
    DELAYED_TRANSACTION_EXPIRED = 47;
    DELAYED_TRANSACTION_CANCELED = 48;
    DELAYED_TRANSACTION_CAPTURED = 49;
    DELAYED_TRANSACTION_FAILED = 50;
    CARD_TOKEN_EXPIRED = 51;
    CARD_TOKEN_USED = 52;
    AMOUNT_TOO_HIGH = 53;
    UNSUPPORTED_INSTRUMENT_TYPE = 54;
    REFUND_AMOUNT_INVALID = 55;
    REFUND_ALREADY_PENDING = 56;
    PAYMENT_NOT_REFUNDABLE = 57;
    INVALID_CARD_DATA = 58;
    IDEMPOTENCY_KEY_REUSED = 59;
    UNEXPECTED_VALUE = 60;
    SANDBOX_NOT_SUPPORTED = 61;
    INVALID_EMAIL_ADDRESS = 62;
    CHECKOUT_EXPIRED = 63;
    CARD_DECLINED = 64;
    VERIFY_CVV_FAILURE = 65;
    VERIFY_AVS_FAILURE = 66;
    CARD_DECLINED_CALL_ISSUER = 67;
    NOT_FOUND = 68;
    REQUEST_TIMEOUT = 69;
    CONFLICT = 70;
    REQUEST_ENTITY_TOO_LARGE = 71;
    UNSUPPORTED_MEDIA_TYPE = 72;
    RATE_LIMITED = 73;
    NOT_IMPLEMENTED = 74;
    SERVICE_UNAVAILABLE = 75;
}

enum InventoryAlertType {
    NONE = 0;
    LOW_QUANTITY = 1;
}

message ItemVariationLocationOverrides {
    // If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
    // is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
    // 
    // This value is always an integer.
    int64 inventory_alert_threshold = 1;
    // Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory
    // quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype)
    // for all possible values.
    enum ItemVariationLocationOverrides_Inventory_alert_type {
        ITEMVARIATIONLOCATIONOVERRIDES_INVENTORY_ALERT_TYPE_NONE = 0;
        ITEMVARIATIONLOCATIONOVERRIDES_INVENTORY_ALERT_TYPE_LOW_QUANTITY = 1;
    }
    ItemVariationLocationOverrides_Inventory_alert_type inventory_alert_type = 2;
    // The ID of the [location][#type-location].
    string location_id = 3;
    // The price of the [CatalogItemVariation](#type-catalogitemvariation) at the given [location][#type-location], or blank for variable pricing.
    Money price_money = 4;
    // The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location][#type-location].
    // See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
    enum ItemVariationLocationOverrides_Pricing_type {
        ITEMVARIATIONLOCATIONOVERRIDES_PRICING_TYPE_FIXED_PRICING = 0;
        ITEMVARIATIONLOCATIONOVERRIDES_PRICING_TYPE_VARIABLE_PRICING = 1;
    }
    ItemVariationLocationOverrides_Pricing_type pricing_type = 5;
    // If `true`, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this [location][#type-location].
    bool track_inventory = 6;
}

message ListCatalogRequest {
    // The pagination cursor returned in the previous response. Leave unset for an initial request.
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
    // An optional case-insensitive, comma-separated list of object types to retrieve, for example
    // `ITEM,ITEM_VARIATION,CATEGORY`.
    // 
    // The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype)
    // enumeration, namely `"ITEM"`, `"ITEM_VARIATION"`, `"CATEGORY"`, `"DISCOUNT"`, `"TAX"`,
    // `"MODIFIER"`, or `"MODIFIER_LIST"`.
    string types = 2;
}

message ListCatalogResponse {
    // The pagination cursor to be used in a subsequent request. If unset, this is the final response.
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 2;
    // The [CatalogObject](#type-catalogobject)s returned.
    repeated CatalogObject objects = 3;
}

message ListCustomersRequest {
    // A pagination cursor returned by a previous call to this endpoint.
    // Provide this to retrieve the next set of results for your original query.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
}

message ListCustomersResponse {
    // A pagination cursor to retrieve the next set of results for your
    // original query to the endpoint. This value is present only if the request
    // succeeded and additional results are available.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
    // An array of `Customer` objects that match your query.
    repeated Customer customers = 2;
    // Any errors that occurred during the request.
    repeated Error errors = 3;
}

message ListLocationsRequest {
}

message ListLocationsResponse {
    // Any errors that occurred during the request.
    repeated Error errors = 1;
    // The business's locations.
    repeated Location locations = 2;
}

message ListRefundsRequest {
    // The beginning of the requested reporting period, in RFC 3339 format.
    // 
    // See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
    // 
    // Default value: The current time minus one year.
    string begin_time = 1;
    // A pagination cursor returned by a previous call to this endpoint.
    // Provide this to retrieve the next set of results for your original query.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 2;
    // The end of the requested reporting period, in RFC 3339 format.
    // 
    // See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
    // 
    // Default value: The current time.
    string end_time = 3;
    // The order in which results are listed in the response (`ASC` for
    // oldest first, `DESC` for newest first).
    // 
    // Default value: `DESC`
    enum ListRefundsRequest_Sort_order {
        LISTREFUNDSREQUEST_SORT_ORDER_DESC = 0;
        LISTREFUNDSREQUEST_SORT_ORDER_ASC = 1;
    }
    ListRefundsRequest_Sort_order sort_order = 4;
}

message ListRefundsResponse {
    // A pagination cursor for retrieving the next set of results,
    // if any remain. Provide this value as the `cursor` parameter in a subsequent
    // request to this endpoint.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
    // Any errors that occurred during the request.
    repeated Error errors = 2;
    // An array of refunds that match your query.
    repeated Refund refunds = 3;
}

message ListTransactionsRequest {
    // The beginning of the requested reporting period, in RFC 3339 format.
    // 
    // See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
    // 
    // Default value: The current time minus one year.
    string begin_time = 1;
    // A pagination cursor returned by a previous call to this endpoint.
    // Provide this to retrieve the next set of results for your original query.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 2;
    // The end of the requested reporting period, in RFC 3339 format.
    // 
    // See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
    // 
    // Default value: The current time.
    string end_time = 3;
    // The order in which results are listed in the response (`ASC` for
    // oldest first, `DESC` for newest first).
    // 
    // Default value: `DESC`
    enum ListTransactionsRequest_Sort_order {
        LISTTRANSACTIONSREQUEST_SORT_ORDER_DESC = 0;
        LISTTRANSACTIONSREQUEST_SORT_ORDER_ASC = 1;
    }
    ListTransactionsRequest_Sort_order sort_order = 4;
}

message ListTransactionsResponse {
    // A pagination cursor for retrieving the next set of results,
    // if any remain. Provide this value as the `cursor` parameter in a subsequent
    // request to this endpoint.
    // 
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
    // Any errors that occurred during the request.
    repeated Error errors = 2;
    // An array of transactions that match your query.
    repeated Transaction transactions = 3;
}

message Location {
    // The location's physical address.
    Address address = 1;
    // Indicates which Square features are enabled for the location.
    // 
    // See [LocationCapability](#type-locationcapability) for possible values.
    repeated string capabilities = 2;
    // The location's unique ID.
    string id = 3;
    // The location's name.
    string name = 4;
    // The [IANA Timezone Database](https://www.iana.org/time-zones)
    // identifier for the location's timezone.
    string timezone = 5;
}

enum LocationCapability {
    CREDIT_CARD_PROCESSING = 0;
}

message Money {
    // The amount of money, in the smallest denomination of the
    // currency indicated by `currency`. For example, when `currency` is `USD`,
    // `amount` is in cents.
    int64 amount = 1;
    // The type of currency, in __ISO 4217 format__. For example, the currency
    // code for US dollars is `USD`.
    // 
    // See [Currency](#type-currency) for possible values.
    enum Money_Currency {
        MONEY_CURRENCY_AED = 0;
        MONEY_CURRENCY_AFN = 1;
        MONEY_CURRENCY_ALL = 2;
        MONEY_CURRENCY_AMD = 3;
        MONEY_CURRENCY_ANG = 4;
        MONEY_CURRENCY_AOA = 5;
        MONEY_CURRENCY_ARS = 6;
        MONEY_CURRENCY_AUD = 7;
        MONEY_CURRENCY_AWG = 8;
        MONEY_CURRENCY_AZN = 9;
        MONEY_CURRENCY_BAM = 10;
        MONEY_CURRENCY_BBD = 11;
        MONEY_CURRENCY_BDT = 12;
        MONEY_CURRENCY_BGN = 13;
        MONEY_CURRENCY_BHD = 14;
        MONEY_CURRENCY_BIF = 15;
        MONEY_CURRENCY_BMD = 16;
        MONEY_CURRENCY_BND = 17;
        MONEY_CURRENCY_BOB = 18;
        MONEY_CURRENCY_BOV = 19;
        MONEY_CURRENCY_BRL = 20;
        MONEY_CURRENCY_BSD = 21;
        MONEY_CURRENCY_BTN = 22;
        MONEY_CURRENCY_BWP = 23;
        MONEY_CURRENCY_BYR = 24;
        MONEY_CURRENCY_BZD = 25;
        MONEY_CURRENCY_CAD = 26;
        MONEY_CURRENCY_CDF = 27;
        MONEY_CURRENCY_CHE = 28;
        MONEY_CURRENCY_CHF = 29;
        MONEY_CURRENCY_CHW = 30;
        MONEY_CURRENCY_CLF = 31;
        MONEY_CURRENCY_CLP = 32;
        MONEY_CURRENCY_CNY = 33;
        MONEY_CURRENCY_COP = 34;
        MONEY_CURRENCY_COU = 35;
        MONEY_CURRENCY_CRC = 36;
        MONEY_CURRENCY_CUC = 37;
        MONEY_CURRENCY_CUP = 38;
        MONEY_CURRENCY_CVE = 39;
        MONEY_CURRENCY_CZK = 40;
        MONEY_CURRENCY_DJF = 41;
        MONEY_CURRENCY_DKK = 42;
        MONEY_CURRENCY_DOP = 43;
        MONEY_CURRENCY_DZD = 44;
        MONEY_CURRENCY_EGP = 45;
        MONEY_CURRENCY_ERN = 46;
        MONEY_CURRENCY_ETB = 47;
        MONEY_CURRENCY_EUR = 48;
        MONEY_CURRENCY_FJD = 49;
        MONEY_CURRENCY_FKP = 50;
        MONEY_CURRENCY_GBP = 51;
        MONEY_CURRENCY_GEL = 52;
        MONEY_CURRENCY_GHS = 53;
        MONEY_CURRENCY_GIP = 54;
        MONEY_CURRENCY_GMD = 55;
        MONEY_CURRENCY_GNF = 56;
        MONEY_CURRENCY_GTQ = 57;
        MONEY_CURRENCY_GYD = 58;
        MONEY_CURRENCY_HKD = 59;
        MONEY_CURRENCY_HNL = 60;
        MONEY_CURRENCY_HRK = 61;
        MONEY_CURRENCY_HTG = 62;
        MONEY_CURRENCY_HUF = 63;
        MONEY_CURRENCY_IDR = 64;
        MONEY_CURRENCY_ILS = 65;
        MONEY_CURRENCY_INR = 66;
        MONEY_CURRENCY_IQD = 67;
        MONEY_CURRENCY_IRR = 68;
        MONEY_CURRENCY_ISK = 69;
        MONEY_CURRENCY_JMD = 70;
        MONEY_CURRENCY_JOD = 71;
        MONEY_CURRENCY_JPY = 72;
        MONEY_CURRENCY_KES = 73;
        MONEY_CURRENCY_KGS = 74;
        MONEY_CURRENCY_KHR = 75;
        MONEY_CURRENCY_KMF = 76;
        MONEY_CURRENCY_KPW = 77;
        MONEY_CURRENCY_KRW = 78;
        MONEY_CURRENCY_KWD = 79;
        MONEY_CURRENCY_KYD = 80;
        MONEY_CURRENCY_KZT = 81;
        MONEY_CURRENCY_LAK = 82;
        MONEY_CURRENCY_LBP = 83;
        MONEY_CURRENCY_LKR = 84;
        MONEY_CURRENCY_LRD = 85;
        MONEY_CURRENCY_LSL = 86;
        MONEY_CURRENCY_LTL = 87;
        MONEY_CURRENCY_LVL = 88;
        MONEY_CURRENCY_LYD = 89;
        MONEY_CURRENCY_MAD = 90;
        MONEY_CURRENCY_MDL = 91;
        MONEY_CURRENCY_MGA = 92;
        MONEY_CURRENCY_MKD = 93;
        MONEY_CURRENCY_MMK = 94;
        MONEY_CURRENCY_MNT = 95;
        MONEY_CURRENCY_MOP = 96;
        MONEY_CURRENCY_MRO = 97;
        MONEY_CURRENCY_MUR = 98;
        MONEY_CURRENCY_MVR = 99;
        MONEY_CURRENCY_MWK = 100;
        MONEY_CURRENCY_MXN = 101;
        MONEY_CURRENCY_MXV = 102;
        MONEY_CURRENCY_MYR = 103;
        MONEY_CURRENCY_MZN = 104;
        MONEY_CURRENCY_NAD = 105;
        MONEY_CURRENCY_NGN = 106;
        MONEY_CURRENCY_NIO = 107;
        MONEY_CURRENCY_NOK = 108;
        MONEY_CURRENCY_NPR = 109;
        MONEY_CURRENCY_NZD = 110;
        MONEY_CURRENCY_OMR = 111;
        MONEY_CURRENCY_PAB = 112;
        MONEY_CURRENCY_PEN = 113;
        MONEY_CURRENCY_PGK = 114;
        MONEY_CURRENCY_PHP = 115;
        MONEY_CURRENCY_PKR = 116;
        MONEY_CURRENCY_PLN = 117;
        MONEY_CURRENCY_PYG = 118;
        MONEY_CURRENCY_QAR = 119;
        MONEY_CURRENCY_RON = 120;
        MONEY_CURRENCY_RSD = 121;
        MONEY_CURRENCY_RUB = 122;
        MONEY_CURRENCY_RWF = 123;
        MONEY_CURRENCY_SAR = 124;
        MONEY_CURRENCY_SBD = 125;
        MONEY_CURRENCY_SCR = 126;
        MONEY_CURRENCY_SDG = 127;
        MONEY_CURRENCY_SEK = 128;
        MONEY_CURRENCY_SGD = 129;
        MONEY_CURRENCY_SHP = 130;
        MONEY_CURRENCY_SLL = 131;
        MONEY_CURRENCY_SOS = 132;
        MONEY_CURRENCY_SRD = 133;
        MONEY_CURRENCY_SSP = 134;
        MONEY_CURRENCY_STD = 135;
        MONEY_CURRENCY_SVC = 136;
        MONEY_CURRENCY_SYP = 137;
        MONEY_CURRENCY_SZL = 138;
        MONEY_CURRENCY_THB = 139;
        MONEY_CURRENCY_TJS = 140;
        MONEY_CURRENCY_TMT = 141;
        MONEY_CURRENCY_TND = 142;
        MONEY_CURRENCY_TOP = 143;
        MONEY_CURRENCY_TRY = 144;
        MONEY_CURRENCY_TTD = 145;
        MONEY_CURRENCY_TWD = 146;
        MONEY_CURRENCY_TZS = 147;
        MONEY_CURRENCY_UAH = 148;
        MONEY_CURRENCY_UGX = 149;
        MONEY_CURRENCY_USD = 150;
        MONEY_CURRENCY_USN = 151;
        MONEY_CURRENCY_USS = 152;
        MONEY_CURRENCY_UYI = 153;
        MONEY_CURRENCY_UYU = 154;
        MONEY_CURRENCY_UZS = 155;
        MONEY_CURRENCY_VEF = 156;
        MONEY_CURRENCY_VND = 157;
        MONEY_CURRENCY_VUV = 158;
        MONEY_CURRENCY_WST = 159;
        MONEY_CURRENCY_XAF = 160;
        MONEY_CURRENCY_XAG = 161;
        MONEY_CURRENCY_XAU = 162;
        MONEY_CURRENCY_XBA = 163;
        MONEY_CURRENCY_XBB = 164;
        MONEY_CURRENCY_XBC = 165;
        MONEY_CURRENCY_XBD = 166;
        MONEY_CURRENCY_XCD = 167;
        MONEY_CURRENCY_XDR = 168;
        MONEY_CURRENCY_XOF = 169;
        MONEY_CURRENCY_XPD = 170;
        MONEY_CURRENCY_XPF = 171;
        MONEY_CURRENCY_XPT = 172;
        MONEY_CURRENCY_XTS = 173;
        MONEY_CURRENCY_XXX = 174;
        MONEY_CURRENCY_YER = 175;
        MONEY_CURRENCY_ZAR = 176;
        MONEY_CURRENCY_ZMK = 177;
        MONEY_CURRENCY_ZMW = 178;
        MONEY_CURRENCY_BTC = 179;
    }
    Money_Currency currency = 2;
}

message Order {
    // The line items included in the order. Every order has at least one
    // line item.
    repeated OrderLineItem line_items = 1;
    // The ID of the merchant location this order is associated with.
    string location_id = 2;
    // A client specified identifier to associate an entity in another system
    // with this order.
    string reference_id = 3;
    // The total discount amount of money to collect for the order.
    Money total_discount_money = 4;
    // The total amount of money to collect for the order.
    Money total_money = 5;
    // The total tax amount of money to collect for the order.
    Money total_tax_money = 6;
}

message OrderLineItem {
    // The base price for a single unit of the line item.
    Money base_price_money = 1;
    // The discounts applied to this line item.
    repeated OrderLineItemDiscount discounts = 2;
    // The name of the line item.
    string name = 3;
    // The quantity of the product to purchase. Currently, this string must
    // have an integer value.
    string quantity = 4;
    // The taxes applied to this line item.
    repeated OrderLineItemTax taxes = 5;
    // The total discount amount of money to collect for the line item.
    Money total_discount_money = 6;
    // The total amount of money to collect for this line item.
    Money total_money = 7;
    // The total tax amount of money to collect for the line item.
    Money total_tax_money = 8;
}

message OrderLineItemDiscount {
    // The total monetary amount of the applicable discount.
    // If it is at order level, it is the value of the order level discount.
    // If it is at line item level, it is the value of the line item level discount.
    // 
    // The amount_money won't be set for a percentage-based discount.
    Money amount_money = 1;
    // The amount of discount actually applied to this line item.
    // 
    // Represents the amount of money applied to a line item as a discount
    // When an amount-based discount is at order-level, this value is different from `amount_money` because the discount is
    // distributed across the line items.
    Money applied_money = 2;
    // The discount's name.
    string name = 3;
    // The percentage of the tax, as a string representation of a decimal number.
    // A value of `7.25` corresponds to a percentage of 7.25%.
    // 
    // The percentage won't be set for an amount-based discount.
    string percentage = 4;
    // Indicates the level at which the discount applies.
    // See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.
    enum OrderLineItemDiscount_Scope {
        ORDERLINEITEMDISCOUNT_SCOPE_LINE_ITEM = 0;
        ORDERLINEITEMDISCOUNT_SCOPE_ORDER = 1;
    }
    OrderLineItemDiscount_Scope scope = 5;
    // The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
    // 
    // VARIABLE_* is not supported in API because the order is created at the time of sale and either
    // percentage or amount has to be specified.
    // 
    // See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.
    enum OrderLineItemDiscount_Type {
        ORDERLINEITEMDISCOUNT_TYPE_UNKNOWN = 0;
        ORDERLINEITEMDISCOUNT_TYPE_FIXED_PERCENTAGE = 1;
        ORDERLINEITEMDISCOUNT_TYPE_FIXED_AMOUNT = 2;
        ORDERLINEITEMDISCOUNT_TYPE_VARIABLE_PERCENTAGE = 3;
        ORDERLINEITEMDISCOUNT_TYPE_VARIABLE_AMOUNT = 4;
    }
    OrderLineItemDiscount_Type type = 6;
}

enum OrderLineItemDiscountScope {
    LINE_ITEM = 0;
    ORDER = 1;
}

enum OrderLineItemDiscountType {
    UNKNOWN = 0;
    FIXED_PERCENTAGE = 1;
    FIXED_AMOUNT = 2;
    VARIABLE_PERCENTAGE = 3;
    VARIABLE_AMOUNT = 4;
}

message OrderLineItemTax {
    // The amount of the money applied by the tax in an order.
    Money applied_money = 1;
    // The tax's name.
    string name = 2;
    // The percentage of the tax, as a string representation of a decimal number.
    // 
    // A value of `7.25` corresponds to a percentage of 7.25%.
    string percentage = 3;
    // Indicates the calculation method used to apply the tax.
    // 
    // See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
    enum OrderLineItemTax_Type {
        ORDERLINEITEMTAX_TYPE_UNKNOWN = 0;
        ORDERLINEITEMTAX_TYPE_ADDITIVE = 1;
        ORDERLINEITEMTAX_TYPE_INCLUSIVE = 2;
    }
    OrderLineItemTax_Type type = 4;
}

enum OrderLineItemTaxType {
    UNKNOWN = 0;
    ADDITIVE = 1;
    INCLUSIVE = 2;
}

message Refund {
    // The amount of money refunded to the buyer.
    Money amount_money = 1;
    // The time when the refund was created, in RFC 3339 format.
    string created_at = 2;
    // The refund's unique ID.
    string id = 3;
    // The ID of the refund's associated location.
    string location_id = 4;
    // The amount of Square processing fee money refunded to the *merchant*.
    Money processing_fee_money = 5;
    // The reason for the refund being issued.
    string reason = 6;
    // The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`,
    // or `FAILED`).
    enum Refund_Statu {
        REFUND_STATU_PENDING = 0;
        REFUND_STATU_APPROVED = 1;
        REFUND_STATU_REJECTED = 2;
        REFUND_STATU_FAILED = 3;
    }
    Refund_Statu status = 7;
    // The ID of the refunded tender.
    string tender_id = 8;
    // The ID of the transaction that the refunded tender is part of.
    string transaction_id = 9;
}

enum RefundStatu {
    PENDING = 0;
    APPROVED = 1;
    REJECTED = 2;
    FAILED = 3;
}

message RetrieveCatalogObjectRequest {
    // If `true`, the response will include additional objects that are related to the
    // requested object, as follows:
    // 
    // If the `object` field of the response contains a [CatalogItem](#type-catalogitem),
    // its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and
    // [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the
    // response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation),
    // its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of
    // the response.
    // 
    // Default value: `false`
    bool include_related_objects = 1;
}

message RetrieveCatalogObjectResponse {
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 1;
    // The [CatalogObject](#type-catalogobject)s returned.
    CatalogObject object = 2;
    // A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `object` field.
    repeated CatalogObject related_objects = 3;
}

message RetrieveCustomerRequest {
}

message RetrieveCustomerResponse {
    // The requested customer.
    Customer customer = 1;
    // Any errors that occurred during the request.
    repeated Error errors = 2;
}

message RetrieveTransactionRequest {
}

message RetrieveTransactionResponse {
    // Any errors that occurred during the request.
    repeated Error errors = 1;
    // The requested transaction.
    Transaction transaction = 2;
}

message SearchCatalogObjectsRequest {
    // Return only objects that have been modified after this [timestamp](#workingwithdates)
    // (in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z"). The timestamp is exclusive -
    // objects whose timestamp is equal to `begin_time` will not be included in the response.
    string begin_time = 1;
    // The pagination cursor returned in the previous response. Leave unset for an initial request.
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 2;
    // If `true`, deleted objects will be included in the results. Deleted objects will have their
    // `is_deleted` field set to `true`.
    bool include_deleted_objects = 3;
    // If `true`, the response will include additional objects that are related to the
    // requested object, as follows:
    // 
    // If a [CatalogItem](#type-catalogitem) is returned in the object field of the response,
    // its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and
    // [CatalogModifierList](#type-catalogmodifierlist)s will be included in the `related_objects` field of the
    // response.
    // 
    // If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the
    // response, its parent [CatalogItem](#type-catalogitem) will be included in the `related_objects` field of
    // the response.
    bool include_related_objects = 4;
    // A limit on the number of results to be returned in a single page. The limit is advisory -
    // the implementation may return more or fewer results. If the supplied limit is negative, zero, or
    // is higher than the maximum limit of 1,000, it will be ignored.
    int32 limit = 5;
    // The desired set of object types to appear in the search results. The legal values are taken from the
    // [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `"ITEM"`, `"ITEM_VARIATION"`, `"CATEGORY"`,
    // `"DISCOUNT"`, `"TAX"`, `"MODIFIER"`, or `"MODIFIER_LIST"`.
    repeated string object_types = 6;
    // A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.
    CatalogQuery query = 7;
}

message SearchCatalogObjectsResponse {
    // The pagination cursor to be used in a subsequent request. If unset, this is the final response.
    // See [Paginating results](#paginatingresults) for more information.
    string cursor = 1;
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 2;
    // The [CatalogObject](#type-catalogobject)s returned.
    repeated CatalogObject objects = 3;
    // A list of [CatalogObject](#type-catalogobject)s referenced by the objects in the `objects` field.
    repeated CatalogObject related_objects = 4;
}

enum SortOrder {
    DESC = 0;
    ASC = 1;
}

enum TaxCalculationPhase {
    TAX_SUBTOTAL_PHASE = 0;
    TAX_TOTAL_PHASE = 1;
}

enum TaxInclusionType {
    ADDITIVE = 0;
    INCLUSIVE = 1;
}

message Tender {
    // The amount of the tender.
    Money amount_money = 1;
    // The details of the card tender.
    // 
    // This value is present only if the value of `type` is `CARD`.
    TenderCardDetails card_details = 2;
    // The details of the cash tender.
    // 
    // This value is present only if the value of `type` is `CASH`.
    TenderCashDetails cash_details = 3;
    // The time when the tender was created, in RFC 3339 format.
    string created_at = 4;
    // If the tender is associated with a customer or represents a customer's card on file,
    // this is the ID of the associated customer.
    string customer_id = 5;
    // The tender's unique ID.
    string id = 6;
    // The ID of the transaction's associated location.
    string location_id = 7;
    // An optional note associated with the tender at the time of payment.
    string note = 8;
    // The amount of any Square processing fees applied to the tender.
    // 
    // This field is not immediately populated when a new transaction is created.
    // It is usually available after about ten seconds.
    Money processing_fee_money = 9;
    // The ID of the tender's associated transaction.
    string transaction_id = 10;
    // The type of tender, such as `CARD` or `CASH`.
    enum Tender_Type {
        TENDER_TYPE_CARD = 0;
        TENDER_TYPE_CASH = 1;
        TENDER_TYPE_THIRD_PARTY_CARD = 2;
        TENDER_TYPE_SQUARE_GIFT_CARD = 3;
        TENDER_TYPE_NO_SALE = 4;
        TENDER_TYPE_OTHER = 5;
    }
    Tender_Type type = 11;
}

message TenderCardDetails {
    // The credit card's non-confidential details.
    Card card = 1;
    // The method used to enter the card's details for the transaction.
    enum TenderCardDetails_Entry_method {
        TENDERCARDDETAILS_ENTRY_METHOD_SWIPED = 0;
        TENDERCARDDETAILS_ENTRY_METHOD_KEYED = 1;
        TENDERCARDDETAILS_ENTRY_METHOD_EMV = 2;
        TENDERCARDDETAILS_ENTRY_METHOD_ON_FILE = 3;
        TENDERCARDDETAILS_ENTRY_METHOD_CONTACTLESS = 4;
    }
    TenderCardDetails_Entry_method entry_method = 2;
    // The credit card payment's current state (such as `AUTHORIZED` or
    // `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus)
    // for possible values.
    enum TenderCardDetails_Statu {
        TENDERCARDDETAILS_STATU_AUTHORIZED = 0;
        TENDERCARDDETAILS_STATU_CAPTURED = 1;
        TENDERCARDDETAILS_STATU_VOIDED = 2;
        TENDERCARDDETAILS_STATU_FAILED = 3;
    }
    TenderCardDetails_Statu status = 3;
}

enum TenderCardDetailsEntryMethod {
    SWIPED = 0;
    KEYED = 1;
    EMV = 2;
    ON_FILE = 3;
    CONTACTLESS = 4;
}

enum TenderCardDetailsStatu {
    AUTHORIZED = 0;
    CAPTURED = 1;
    VOIDED = 2;
    FAILED = 3;
}

message TenderCashDetails {
    // The total amount of cash provided by the buyer, before change is given.
    Money buyer_tendered_money = 1;
    // The amount of change returned to the buyer.
    Money change_back_money = 2;
}

enum TenderType {
    CARD = 0;
    CASH = 1;
    THIRD_PARTY_CARD = 2;
    SQUARE_GIFT_CARD = 3;
    NO_SALE = 4;
    OTHER = 5;
}

message Transaction {
    // If the transaction was created in the Square Point of Sale app, this value
    // is the ID generated for the transaction by Square Point of Sale.
    // 
    // This ID has no relationship to the transaction's canonical `id`, which is
    // generated by Square's backend servers. This value is generated for bookkeeping
    // purposes, in case the transaction cannot immediately be completed (for example,
    // if the transaction is processed in offline mode).
    // 
    // It is not currently possible with the Connect API to perform a transaction
    // lookup by this value.
    string client_id = 1;
    // The time when the transaction was created, in RFC 3339 format.
    string created_at = 2;
    // The transaction's unique ID, issued by Square payments servers.
    string id = 3;
    // The ID of the transaction's associated location.
    string location_id = 4;
    // The order associated with this transaction, if any.
    Order order = 5;
    // The Square product that processed the transaction.
    enum Transaction_Product {
        TRANSACTION_PRODUCT_REGISTER = 0;
        TRANSACTION_PRODUCT_EXTERNAL_API = 1;
        TRANSACTION_PRODUCT_BILLING = 2;
        TRANSACTION_PRODUCT_APPOINTMENTS = 3;
        TRANSACTION_PRODUCT_INVOICES = 4;
        TRANSACTION_PRODUCT_ONLINE_STORE = 5;
        TRANSACTION_PRODUCT_PAYROLL = 6;
        TRANSACTION_PRODUCT_OTHER = 7;
    }
    Transaction_Product product = 6;
    // If the transaction was created with the [Charge](#endpoint-charge)
    // endpoint, this value is the same as the value provided for the `reference_id`
    // parameter in the request to that endpoint. Otherwise, it is not set.
    string reference_id = 7;
    // Refunds that have been applied to any tender in the transaction.
    repeated Refund refunds = 8;
    // The shipping address provided in the request, if any.
    Address shipping_address = 9;
    // The tenders used to pay in the transaction.
    repeated Tender tenders = 10;
}

enum TransactionProduct {
    REGISTER = 0;
    EXTERNAL_API = 1;
    BILLING = 2;
    APPOINTMENTS = 3;
    INVOICES = 4;
    ONLINE_STORE = 5;
    PAYROLL = 6;
    OTHER = 7;
}

message UpdateCustomerRequest {
    // The customer's physical address.
    Address address = 1;
    // The name of the customer's company.
    string company_name = 2;
    // The customer's email address.
    string email_address = 3;
    // The customer's family (i.e., last) name.
    string family_name = 4;
    // The customer's given (i.e., first) name.
    string given_name = 5;
    // A nickname for the customer.
    string nickname = 6;
    // An optional note to associate with the customer.
    string note = 7;
    // The customer's phone number.
    string phone_number = 8;
    // An optional second ID you can set to associate the customer with an
    // entity in another system.
    string reference_id = 9;
}

message UpdateCustomerResponse {
    // The updated customer.
    Customer customer = 1;
    // Any errors that occurred during the request.
    repeated Error errors = 2;
}

message UpdateItemModifierListsRequest {
    // The [CatalogItem](#type-catalogitem)s whose [CatalogModifierList](#type-catalogmodifierlist)s are being updated.
    repeated string item_ids = 1;
    // The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).
    repeated string modifier_lists_to_disable = 2;
    // The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).
    repeated string modifier_lists_to_enable = 3;
}

message UpdateItemModifierListsResponse {
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 1;
    // The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    string updated_at = 2;
}

message UpdateItemTaxesRequest {
    // The [CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax](#type-catalogtax)es are being updated.
    repeated string item_ids = 1;
    // The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).
    repeated string taxes_to_disable = 2;
    // The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).
    repeated string taxes_to_enable = 3;
}

message UpdateItemTaxesResponse {
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 1;
    // The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    string updated_at = 2;
}

message UpsertCatalogObjectRequest {
    // A value you specify that uniquely identifies this
    // request among all your requests. A common way to create
    // a valid idempotency key is to use a Universally unique
    // identifier (UUID).
    // 
    // If you're unsure whether a particular request was successful,
    // you can reattempt it with the same idempotency key without
    // worrying about creating duplicate objects.
    // 
    // See [Idempotency keys](#idempotencykeys) for more information.
    string idempotency_key = 1;
    // A [CatalogObject](#type-catalogobject) to be created or updated. The object's `is_deleted` field must not
    // be set to `true`. When creating a new object, the object's ID must either start with a `#` character or be left
    // blank. In either case it will be replaced with a server-generated ID.
    CatalogObject object = 2;
}

message UpsertCatalogObjectResponse {
    // The created [CatalogObject](#type-catalogobject).
    CatalogObject catalog_object = 1;
    // The set of [Error](#type-error)s encountered.
    repeated Error errors = 2;
    // The mapping between client and server IDs for this Upsert.
    repeated CatalogIdMapping id_mappings = 3;
}

message VoidTransactionRequest {
}

message VoidTransactionResponse {
    // Any errors that occurred during the request.
    repeated Error errors = 1;
}

message V1AdjustInventoryRequest {
    // The reason for the inventory adjustment.
    int32 adjustment_type = 1;
    // A note about the inventory adjustment.
    string memo = 2;
    // The number to adjust the variation's quantity by.
    int32 quantity_delta = 3;
}

message V1BankAccount {
    // The last few digits of the bank account number.
    string account_number_suffix = 1;
    // The name of the bank that manages the account.
    string bank_name = 2;
    // The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.
    string currency_code = 3;
    // The bank account's Square-issued ID.
    string id = 4;
    // The Square-issued ID of the merchant associated with the bank account.
    string merchant_id = 5;
    // The name associated with the bank account.
    string name = 6;
    // The bank account's routing number.
    string routing_number = 7;
    // The bank account's type (for example, savings or checking).
    enum V1BankAccount_Type {
        V1BANKACCOUNT_TYPE_BUSINESS_CHECKING = 0;
        V1BANKACCOUNT_TYPE_CHECKING = 1;
        V1BANKACCOUNT_TYPE_INVESTMENT = 2;
        V1BANKACCOUNT_TYPE_LOAN = 3;
        V1BANKACCOUNT_TYPE_SAVINGS = 4;
        V1BANKACCOUNT_TYPE_OTHER = 5;
    }
    V1BankAccount_Type type = 8;
}

message V1CashDrawerEvent {
    // The time when the event occurred, in ISO 8601 format.
    string created_at = 1;
    // An optional description of the event, entered by the employee that created it.
    string description = 2;
    // The ID of the employee that created the event.
    string employee_id = 3;
    // The amount of money that was added to or removed from the cash drawer because of the event. This value can be positive (for added money) or negative (for removed money).
    v1Money event_money = 4;
    // The type of event that occurred.
    enum V1CashDrawerEvent_Event_type {
        V1CASHDRAWEREVENT_EVENT_TYPE_NO_SALE = 0;
        V1CASHDRAWEREVENT_EVENT_TYPE_CASH_TENDER_PAYMENT = 1;
        V1CASHDRAWEREVENT_EVENT_TYPE_OTHER_TENDER_PAYMENT = 2;
        V1CASHDRAWEREVENT_EVENT_TYPE_CASH_TENDER_CANCELED_PAYMENT = 3;
        V1CASHDRAWEREVENT_EVENT_TYPE_OTHER_TENDER_CANCELED_PAYMENT = 4;
        V1CASHDRAWEREVENT_EVENT_TYPE_CASH_TENDER_REFUND = 5;
        V1CASHDRAWEREVENT_EVENT_TYPE_OTHER_TENDER_REFUND = 6;
        V1CASHDRAWEREVENT_EVENT_TYPE_PAID_IN = 7;
        V1CASHDRAWEREVENT_EVENT_TYPE_PAID_OUT = 8;
    }
    V1CashDrawerEvent_Event_type event_type = 5;
    // The event's unique ID.
    string id = 6;
}

message V1CashDrawerShift {
    // The amount of money added to the cash drawer for reasons other than cash payments.
    v1Money cash_paid_in_money = 1;
    // The amount of money removed from the cash drawer for reasons other than cash refunds.
    v1Money cash_paid_out_money = 2;
    // The amount of money added to the cash drawer from cash payments.
    v1Money cash_payment_money = 3;
    // The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero.
    v1Money cash_refunds_money = 4;
    // The time when the shift was closed, in ISO 8601 format.
    string closed_at = 5;
    // The amount of money found in the cash drawer at the end of the shift by an auditing employee.
    v1Money closed_cash_money = 6;
    // The ID of the employee that closed the cash drawer shift by auditing the cash drawer's contents.
    string closing_employee_id = 7;
    // The time when the timecard was created, in ISO 8601 format.
    string description = 8;
    // The device running Square Register that was connected to the cash drawer.
    Device device = 9;
    // The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.
    repeated string employee_ids = 10;
    // The time when the shift ended, in ISO 8601 format.
    bool ended_at = 11;
    // The ID of the employee that ended the cash drawer shift.
    string ending_employee_id = 12;
    // The shift's current state.
    enum V1CashDrawerShift_Event_type {
        V1CASHDRAWERSHIFT_EVENT_TYPE_OPEN = 0;
        V1CASHDRAWERSHIFT_EVENT_TYPE_ENDED = 1;
        V1CASHDRAWERSHIFT_EVENT_TYPE_CLOSED = 2;
    }
    V1CashDrawerShift_Event_type event_type = 13;
    // All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.
    repeated v1CashDrawerEvent events = 14;
    // The amount of money that should be in the cash drawer at the end of the shift, based on the shift's other money amounts.
    v1Money expected_cash_money = 15;
    // The shift's unique ID.
    string id = 16;
    // The time when the shift began, in ISO 8601 format.
    string opened_at = 17;
    // The ID of the employee that started the cash drawer shift.
    string opening_employee_id = 18;
    // The amount of money in the cash drawer at the start of the shift.
    v1Money starting_cash_money = 19;
}

message V1Category {
    // The category's unique ID.
    string id = 1;
    // The category's name.
    string name = 2;
}

message V1CreateRefundRequest {
    // The ID of the payment to refund. If you're creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details.
    string payment_id = 1;
    // The reason for the refund.
    string reason = 2;
    // The amount of money to refund. Required only for PARTIAL refunds.
    v1Money refunded_money = 3;
    // An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.
    string request_idempotence_key = 4;
    // TThe type of refund (FULL or PARTIAL).
    enum V1CreateRefundRequest_Type {
        V1CREATEREFUNDREQUEST_TYPE_FULL = 0;
        V1CREATEREFUNDREQUEST_TYPE_PARTIAL = 1;
    }
    V1CreateRefundRequest_Type type = 5;
}

message V1Discount {
    // The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts.
    v1Money amount_money = 1;
    // The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
    enum V1Discount_Color {
        V1DISCOUNT_COLOR_9DA2A6 = 0;
        V1DISCOUNT_COLOR_4AB200 = 1;
        V1DISCOUNT_COLOR_0B8000 = 2;
        V1DISCOUNT_COLOR_2952CC = 3;
        V1DISCOUNT_COLOR_A82EE5 = 4;
        V1DISCOUNT_COLOR_E5457A = 5;
        V1DISCOUNT_COLOR_B21212 = 6;
        V1DISCOUNT_COLOR_593C00 = 7;
        V1DISCOUNT_COLOR_E5BF00 = 8;
    }
    V1Discount_Color color = 2;
    // Indicates whether the discount is a FIXED value or entered at the time of sale.
    enum V1Discount_Discount_type {
        V1DISCOUNT_DISCOUNT_TYPE_FIXED = 0;
        V1DISCOUNT_DISCOUNT_TYPE_VARIABLE_PERCENTAGE = 1;
        V1DISCOUNT_DISCOUNT_TYPE_VARIABLE_AMOUNT = 2;
    }
    V1Discount_Discount_type discount_type = 3;
    // The discount's unique ID.
    string id = 4;
    // The discount's name.
    string name = 5;
    // Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.
    bool pin_required = 6;
    // The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.
    string rate = 7;
}

message V1Employee {
    // The IDs of the locations the employee is allowed to clock in at.
    repeated string authorized_location_ids = 1;
    // The time when the employee entity was created, in ISO 8601 format.
    string created_at = 2;
    // The employee's email address.
    string email = 3;
    // An ID the merchant can set to associate the employee with an entity in another system.
    string external_id = 4;
    // The employee's first name.
    string first_name = 5;
    // The employee's unique ID.
    string id = 6;
    // The employee's last name.
    string last_name = 7;
    // The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.
    repeated string role_ids = 8;
    // CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard.
    enum V1Employee_Statu {
        V1EMPLOYEE_STATU_ACTIVE = 0;
        V1EMPLOYEE_STATU_INACTIVE = 1;
    }
    V1Employee_Statu status = 9;
    // The time when the employee entity was most recently updated, in ISO 8601 format.
    string updated_at = 10;
}

message V1EmployeeRole {
    // The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
    string created_at = 1;
    // The role's unique ID, Can only be set by Square.
    string id = 2;
    // If true, employees with this role have all permissions, regardless of the values indicated in permissions.
    bool is_owner = 3;
    // The role's merchant-defined name.
    string name = 4;
    // The role's permissions.
    repeated string permissions = 5;
    // The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
    string updated_at = 6;
}

message V1Fee {
    // The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.
    enum V1Fee_Adjustment_type {
        V1FEE_ADJUSTMENT_TYPE_TAX = 0;
    }
    V1Fee_Adjustment_type adjustment_type = 1;
    // If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.
    bool applies_to_custom_amounts = 2;
    // Forthcoming
    enum V1Fee_Calculation_phase {
        V1FEE_CALCULATION_PHASE_FEE_SUBTOTAL_PHASE = 0;
        V1FEE_CALCULATION_PHASE_OTHER = 1;
        V1FEE_CALCULATION_PHASE_FEE_TOTAL_PHASE = 2;
    }
    V1Fee_Calculation_phase calculation_phase = 3;
    // If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.
    bool enabled = 4;
    // The fee's unique ID.
    string id = 5;
    // Whether the fee is ADDITIVE or INCLUSIVE.
    enum V1Fee_Inclusion_type {
        V1FEE_INCLUSION_TYPE_ADDITIVE = 0;
        V1FEE_INCLUSION_TYPE_INCLUSIVE = 1;
    }
    V1Fee_Inclusion_type inclusion_type = 6;
    // The fee's name.
    string name = 7;
    // The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
    string rate = 8;
    // In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.
    enum V1Fee_Type {
        V1FEE_TYPE_CA_GST = 0;
        V1FEE_TYPE_CA_HST = 1;
        V1FEE_TYPE_CA_PST = 2;
        V1FEE_TYPE_CA_QST = 3;
        V1FEE_TYPE_JP_CONSUMPTION_TAX = 4;
        V1FEE_TYPE_CA_PEI_PST = 5;
        V1FEE_TYPE_US_SALES_TAX = 6;
        V1FEE_TYPE_OTHER = 7;
    }
    V1Fee_Type type = 9;
}

message V1InventoryEntry {
    // The current available quantity of the item variation.
    int32 quantity_on_hand = 1;
    // The variation that the entry corresponds to.
    string variation_id = 2;
}

message V1Item {
    // The text of the item's display label in Square Register. Only up to the first five characters of the string are used.
    string abbreviation = 1;
    // If true, the item can be added to shipping orders from the merchant's online store.
    bool available_online = 2;
    // The category the item belongs to, if any.
    v1Category category = 3;
    // The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
    enum V1Item_Color {
        V1ITEM_COLOR_9DA2A6 = 0;
        V1ITEM_COLOR_4AB200 = 1;
        V1ITEM_COLOR_0B8000 = 2;
        V1ITEM_COLOR_2952CC = 3;
        V1ITEM_COLOR_A82EE5 = 4;
        V1ITEM_COLOR_E5457A = 5;
        V1ITEM_COLOR_B21212 = 6;
        V1ITEM_COLOR_593C00 = 7;
        V1ITEM_COLOR_E5BF00 = 8;
    }
    V1Item_Color color = 4;
    // The item's description.
    string description = 5;
    // The fees that apply to the item, if any.
    repeated v1Fee fees = 6;
    // The item's ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_).
    string id = 7;
    // The item's master image, if any.
    v1ItemImage master_image = 8;
    // The modifier lists that apply to the item, if any.
    repeated v1Variation modifier_lists = 9;
    // The item's name.
    string name = 10;
    // Deprecated. This field is not used.
    bool taxable = 11;
    // The item's type. This value is NORMAL for almost all items.
    enum V1Item_Type {
        V1ITEM_TYPE_NORMAL = 0;
        V1ITEM_TYPE_GIFT_CARD = 1;
        V1ITEM_TYPE_OTHER = 2;
    }
    V1Item_Type type = 12;
    // The item's variations. You must specify at least one variation.
    repeated v1Variation variations = 13;
    // Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE.
    enum V1Item_Visibility {
        V1ITEM_VISIBILITY_PUBLIC = 0;
        V1ITEM_VISIBILITY_PRIVATE = 1;
    }
    V1Item_Visibility visibility = 14;
}

message V1ItemImage {
    // The image's unique ID.
    string id = 1;
    // The image's publicly accessible URL.
    string url = 2;
}

message V1Merchant {
    // Capabilities that are enabled for the merchant's Square account. Capabilities that are not listed in this array are not enabled for the account.
    repeated string account_capabilities = 1;
    // Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION.
    enum V1Merchant_Account_type {
        V1MERCHANT_ACCOUNT_TYPE_LOCATION = 0;
        V1MERCHANT_ACCOUNT_TYPE_BUSINESS = 1;
    }
    V1Merchant_Account_type account_type = 2;
    // The address of the merchant's business.
    Address business_address = 3;
    // The name of the merchant's business.
    string business_name = 4;
    // The phone number of the merchant's business.
    v1PhoneNumber business_phone = 5;
    // The type of business operated by the merchant.
    enum V1Merchant_Business_type {
        V1MERCHANT_BUSINESS_TYPE_ACCOUNTING = 0;
        V1MERCHANT_BUSINESS_TYPE_APPAREL_AND_ACCESSORY_SHOPS = 1;
        V1MERCHANT_BUSINESS_TYPE_ART_DEALERS_GALLERIES = 2;
        V1MERCHANT_BUSINESS_TYPE_ART_DESIGN_AND_PHOTOGRAPHY = 3;
        V1MERCHANT_BUSINESS_TYPE_BAR_CLUB_LOUNGE = 4;
        V1MERCHANT_BUSINESS_TYPE_BEAUTY_AND_BARBER_SHOPS = 5;
        V1MERCHANT_BUSINESS_TYPE_BOOK_STORES = 6;
        V1MERCHANT_BUSINESS_TYPE_BUSINESS_SERVICES = 7;
        V1MERCHANT_BUSINESS_TYPE_CATERING = 8;
        V1MERCHANT_BUSINESS_TYPE_CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS = 9;
        V1MERCHANT_BUSINESS_TYPE_CHARITIBLE_ORGS = 10;
        V1MERCHANT_BUSINESS_TYPE_CLEANING_SERVICES = 11;
        V1MERCHANT_BUSINESS_TYPE_COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES = 12;
        V1MERCHANT_BUSINESS_TYPE_CONSULTANT = 13;
        V1MERCHANT_BUSINESS_TYPE_CONTRACTORS = 14;
        V1MERCHANT_BUSINESS_TYPE_DELIVERY_SERVICES = 15;
        V1MERCHANT_BUSINESS_TYPE_DENTISTRY = 16;
        V1MERCHANT_BUSINESS_TYPE_EDUCATION = 17;
        V1MERCHANT_BUSINESS_TYPE_FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS = 18;
        V1MERCHANT_BUSINESS_TYPE_FOOD_TRUCK_CART = 19;
        V1MERCHANT_BUSINESS_TYPE_FURNITURE_HOME_AND_OFFICE_EQUIPMENT = 20;
        V1MERCHANT_BUSINESS_TYPE_FURNITURE_HOME_GOODS = 21;
        V1MERCHANT_BUSINESS_TYPE_HOTELS_AND_LODGING = 22;
        V1MERCHANT_BUSINESS_TYPE_INDIVIDUAL_USE = 23;
        V1MERCHANT_BUSINESS_TYPE_JEWELRY_AND_WATCHES = 24;
        V1MERCHANT_BUSINESS_TYPE_LANDSCAPING_AND_HORTICULTURAL_SERVICES = 25;
        V1MERCHANT_BUSINESS_TYPE_LANGUAGE_SCHOOLS = 26;
        V1MERCHANT_BUSINESS_TYPE_LEGAL_SERVICES = 27;
        V1MERCHANT_BUSINESS_TYPE_MEDICAL_PRACTITIONERS = 28;
        V1MERCHANT_BUSINESS_TYPE_MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS = 29;
        V1MERCHANT_BUSINESS_TYPE_MEMBERSHIP_ORGANIZATIONS = 30;
        V1MERCHANT_BUSINESS_TYPE_MUSIC_AND_ENTERTAINMENT = 31;
        V1MERCHANT_BUSINESS_TYPE_OTHER = 32;
        V1MERCHANT_BUSINESS_TYPE_OUTDOOR_MARKETS = 33;
        V1MERCHANT_BUSINESS_TYPE_PERSONAL_SERVICES = 34;
        V1MERCHANT_BUSINESS_TYPE_POLITICAL_ORGANIZATIONS = 35;
        V1MERCHANT_BUSINESS_TYPE_PROFESSIONAL_SERVICES = 36;
        V1MERCHANT_BUSINESS_TYPE_REAL_ESTATE = 37;
        V1MERCHANT_BUSINESS_TYPE_RECREATION_SERVICES = 38;
        V1MERCHANT_BUSINESS_TYPE_REPAIR_SHOPS_AND_RELATED_SERVICES = 39;
        V1MERCHANT_BUSINESS_TYPE_RESTAURANTS = 40;
        V1MERCHANT_BUSINESS_TYPE_RETAIL_SHOPS = 41;
        V1MERCHANT_BUSINESS_TYPE_SCHOOLS_AND_EDUCATIONAL_SERVICES = 42;
        V1MERCHANT_BUSINESS_TYPE_SPORTING_GOODS = 43;
        V1MERCHANT_BUSINESS_TYPE_TAXICABS_AND_LIMOUSINES = 44;
        V1MERCHANT_BUSINESS_TYPE_TICKET_SALES = 45;
        V1MERCHANT_BUSINESS_TYPE_TOURISM = 46;
        V1MERCHANT_BUSINESS_TYPE_TRAVEL_TOURISM = 47;
        V1MERCHANT_BUSINESS_TYPE_VETERINARY_SERVICES = 48;
        V1MERCHANT_BUSINESS_TYPE_WEB_DEV_DESIGN = 49;
    }
    V1Merchant_Business_type business_type = 6;
    // The country associated with the merchant account, in ISO 3166-1-alpha-2 format.
    string country_code = 7;
    // The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.
    string currency_code = 8;
    // The email address associated with the merchant account.
    string email = 9;
    // The merchant account's unique identifier.
    string id = 10;
    // The language associated with the merchant account, in BCP 47 format.
    string language_code = 11;
    // Additional information for a single-location account specified by its associated business account, if it has one.
    message Location_details {
            // The nickname assigned to the single-location account by the parent business. This value appears in the parent business's multi-location dashboard.
    string nickname = 1;
    }
    Location_details location_details = 12;
    // The URL of the merchant's online store.
    string market_url = 13;
    // The name associated with the merchant account.
    string name = 14;
    // The merchant's shipping address.
    Address shipping_address  = 15;
}

message V1ModifierList {
    // The modifier list's unique ID.
    string id = 1;
    // The options included in the modifier list.
    repeated v1ModifierOption modifier_options = 2;
    // The modifier list's name.
    string name = 3;
    // Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.
    enum V1ModifierList_Selection_type {
        V1MODIFIERLIST_SELECTION_TYPE_SINGLE = 0;
        V1MODIFIERLIST_SELECTION_TYPE_MULTIPLE = 1;
    }
    V1ModifierList_Selection_type selection_type = 4;
}

message V1ModifierOption {
    // The modifier option's unique ID.
    string id = 1;
    // The ID of the modifier list the option belongs to.
    string modifier_list_id = 2;
    // The modifier option's name.
    string name = 3;
    // If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.
    bool on_by_default = 4;
    // Indicates the modifier option's list position when displayed in Square Register and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.
    int32 ordinal = 5;
    // The modifier option's price.
    v1Money price_money = 6;
}

message V1Money {
    // Amount in the lowest denominated value of this Currency. E.g. in USD
    // these are cents, in JPY they are Yen (which do not have a 'cent' concept).
    int32 amount = 1;
    enum V1Money_Currency_code {
        V1MONEY_CURRENCY_CODE_AED = 0;
        V1MONEY_CURRENCY_CODE_AFN = 1;
        V1MONEY_CURRENCY_CODE_ALL = 2;
        V1MONEY_CURRENCY_CODE_AMD = 3;
        V1MONEY_CURRENCY_CODE_ANG = 4;
        V1MONEY_CURRENCY_CODE_AOA = 5;
        V1MONEY_CURRENCY_CODE_ARS = 6;
        V1MONEY_CURRENCY_CODE_AUD = 7;
        V1MONEY_CURRENCY_CODE_AWG = 8;
        V1MONEY_CURRENCY_CODE_AZN = 9;
        V1MONEY_CURRENCY_CODE_BAM = 10;
        V1MONEY_CURRENCY_CODE_BBD = 11;
        V1MONEY_CURRENCY_CODE_BDT = 12;
        V1MONEY_CURRENCY_CODE_BGN = 13;
        V1MONEY_CURRENCY_CODE_BHD = 14;
        V1MONEY_CURRENCY_CODE_BIF = 15;
        V1MONEY_CURRENCY_CODE_BMD = 16;
        V1MONEY_CURRENCY_CODE_BND = 17;
        V1MONEY_CURRENCY_CODE_BOB = 18;
        V1MONEY_CURRENCY_CODE_BOV = 19;
        V1MONEY_CURRENCY_CODE_BRL = 20;
        V1MONEY_CURRENCY_CODE_BSD = 21;
        V1MONEY_CURRENCY_CODE_BTN = 22;
        V1MONEY_CURRENCY_CODE_BWP = 23;
        V1MONEY_CURRENCY_CODE_BYR = 24;
        V1MONEY_CURRENCY_CODE_BZD = 25;
        V1MONEY_CURRENCY_CODE_CAD = 26;
        V1MONEY_CURRENCY_CODE_CDF = 27;
        V1MONEY_CURRENCY_CODE_CHE = 28;
        V1MONEY_CURRENCY_CODE_CHF = 29;
        V1MONEY_CURRENCY_CODE_CHW = 30;
        V1MONEY_CURRENCY_CODE_CLF = 31;
        V1MONEY_CURRENCY_CODE_CLP = 32;
        V1MONEY_CURRENCY_CODE_CNY = 33;
        V1MONEY_CURRENCY_CODE_COP = 34;
        V1MONEY_CURRENCY_CODE_COU = 35;
        V1MONEY_CURRENCY_CODE_CRC = 36;
        V1MONEY_CURRENCY_CODE_CUC = 37;
        V1MONEY_CURRENCY_CODE_CUP = 38;
        V1MONEY_CURRENCY_CODE_CVE = 39;
        V1MONEY_CURRENCY_CODE_CZK = 40;
        V1MONEY_CURRENCY_CODE_DJF = 41;
        V1MONEY_CURRENCY_CODE_DKK = 42;
        V1MONEY_CURRENCY_CODE_DOP = 43;
        V1MONEY_CURRENCY_CODE_DZD = 44;
        V1MONEY_CURRENCY_CODE_EGP = 45;
        V1MONEY_CURRENCY_CODE_ERN = 46;
        V1MONEY_CURRENCY_CODE_ETB = 47;
        V1MONEY_CURRENCY_CODE_EUR = 48;
        V1MONEY_CURRENCY_CODE_FJD = 49;
        V1MONEY_CURRENCY_CODE_FKP = 50;
        V1MONEY_CURRENCY_CODE_GBP = 51;
        V1MONEY_CURRENCY_CODE_GEL = 52;
        V1MONEY_CURRENCY_CODE_GHS = 53;
        V1MONEY_CURRENCY_CODE_GIP = 54;
        V1MONEY_CURRENCY_CODE_GMD = 55;
        V1MONEY_CURRENCY_CODE_GNF = 56;
        V1MONEY_CURRENCY_CODE_GTQ = 57;
        V1MONEY_CURRENCY_CODE_GYD = 58;
        V1MONEY_CURRENCY_CODE_HKD = 59;
        V1MONEY_CURRENCY_CODE_HNL = 60;
        V1MONEY_CURRENCY_CODE_HRK = 61;
        V1MONEY_CURRENCY_CODE_HTG = 62;
        V1MONEY_CURRENCY_CODE_HUF = 63;
        V1MONEY_CURRENCY_CODE_IDR = 64;
        V1MONEY_CURRENCY_CODE_ILS = 65;
        V1MONEY_CURRENCY_CODE_INR = 66;
        V1MONEY_CURRENCY_CODE_IQD = 67;
        V1MONEY_CURRENCY_CODE_IRR = 68;
        V1MONEY_CURRENCY_CODE_ISK = 69;
        V1MONEY_CURRENCY_CODE_JMD = 70;
        V1MONEY_CURRENCY_CODE_JOD = 71;
        V1MONEY_CURRENCY_CODE_JPY = 72;
        V1MONEY_CURRENCY_CODE_KES = 73;
        V1MONEY_CURRENCY_CODE_KGS = 74;
        V1MONEY_CURRENCY_CODE_KHR = 75;
        V1MONEY_CURRENCY_CODE_KMF = 76;
        V1MONEY_CURRENCY_CODE_KPW = 77;
        V1MONEY_CURRENCY_CODE_KRW = 78;
        V1MONEY_CURRENCY_CODE_KWD = 79;
        V1MONEY_CURRENCY_CODE_KYD = 80;
        V1MONEY_CURRENCY_CODE_KZT = 81;
        V1MONEY_CURRENCY_CODE_LAK = 82;
        V1MONEY_CURRENCY_CODE_LBP = 83;
        V1MONEY_CURRENCY_CODE_LKR = 84;
        V1MONEY_CURRENCY_CODE_LRD = 85;
        V1MONEY_CURRENCY_CODE_LSL = 86;
        V1MONEY_CURRENCY_CODE_LTL = 87;
        V1MONEY_CURRENCY_CODE_LVL = 88;
        V1MONEY_CURRENCY_CODE_LYD = 89;
        V1MONEY_CURRENCY_CODE_MAD = 90;
        V1MONEY_CURRENCY_CODE_MDL = 91;
        V1MONEY_CURRENCY_CODE_MGA = 92;
        V1MONEY_CURRENCY_CODE_MKD = 93;
        V1MONEY_CURRENCY_CODE_MMK = 94;
        V1MONEY_CURRENCY_CODE_MNT = 95;
        V1MONEY_CURRENCY_CODE_MOP = 96;
        V1MONEY_CURRENCY_CODE_MRO = 97;
        V1MONEY_CURRENCY_CODE_MUR = 98;
        V1MONEY_CURRENCY_CODE_MVR = 99;
        V1MONEY_CURRENCY_CODE_MWK = 100;
        V1MONEY_CURRENCY_CODE_MXN = 101;
        V1MONEY_CURRENCY_CODE_MXV = 102;
        V1MONEY_CURRENCY_CODE_MYR = 103;
        V1MONEY_CURRENCY_CODE_MZN = 104;
        V1MONEY_CURRENCY_CODE_NAD = 105;
        V1MONEY_CURRENCY_CODE_NGN = 106;
        V1MONEY_CURRENCY_CODE_NIO = 107;
        V1MONEY_CURRENCY_CODE_NOK = 108;
        V1MONEY_CURRENCY_CODE_NPR = 109;
        V1MONEY_CURRENCY_CODE_NZD = 110;
        V1MONEY_CURRENCY_CODE_OMR = 111;
        V1MONEY_CURRENCY_CODE_PAB = 112;
        V1MONEY_CURRENCY_CODE_PEN = 113;
        V1MONEY_CURRENCY_CODE_PGK = 114;
        V1MONEY_CURRENCY_CODE_PHP = 115;
        V1MONEY_CURRENCY_CODE_PKR = 116;
        V1MONEY_CURRENCY_CODE_PLN = 117;
        V1MONEY_CURRENCY_CODE_PYG = 118;
        V1MONEY_CURRENCY_CODE_QAR = 119;
        V1MONEY_CURRENCY_CODE_RON = 120;
        V1MONEY_CURRENCY_CODE_RSD = 121;
        V1MONEY_CURRENCY_CODE_RUB = 122;
        V1MONEY_CURRENCY_CODE_RWF = 123;
        V1MONEY_CURRENCY_CODE_SAR = 124;
        V1MONEY_CURRENCY_CODE_SBD = 125;
        V1MONEY_CURRENCY_CODE_SCR = 126;
        V1MONEY_CURRENCY_CODE_SDG = 127;
        V1MONEY_CURRENCY_CODE_SEK = 128;
        V1MONEY_CURRENCY_CODE_SGD = 129;
        V1MONEY_CURRENCY_CODE_SHP = 130;
        V1MONEY_CURRENCY_CODE_SLL = 131;
        V1MONEY_CURRENCY_CODE_SOS = 132;
        V1MONEY_CURRENCY_CODE_SRD = 133;
        V1MONEY_CURRENCY_CODE_SSP = 134;
        V1MONEY_CURRENCY_CODE_STD = 135;
        V1MONEY_CURRENCY_CODE_SVC = 136;
        V1MONEY_CURRENCY_CODE_SYP = 137;
        V1MONEY_CURRENCY_CODE_SZL = 138;
        V1MONEY_CURRENCY_CODE_THB = 139;
        V1MONEY_CURRENCY_CODE_TJS = 140;
        V1MONEY_CURRENCY_CODE_TMT = 141;
        V1MONEY_CURRENCY_CODE_TND = 142;
        V1MONEY_CURRENCY_CODE_TOP = 143;
        V1MONEY_CURRENCY_CODE_TRY = 144;
        V1MONEY_CURRENCY_CODE_TTD = 145;
        V1MONEY_CURRENCY_CODE_TWD = 146;
        V1MONEY_CURRENCY_CODE_TZS = 147;
        V1MONEY_CURRENCY_CODE_UAH = 148;
        V1MONEY_CURRENCY_CODE_UGX = 149;
        V1MONEY_CURRENCY_CODE_USD = 150;
        V1MONEY_CURRENCY_CODE_USN = 151;
        V1MONEY_CURRENCY_CODE_USS = 152;
        V1MONEY_CURRENCY_CODE_UYI = 153;
        V1MONEY_CURRENCY_CODE_UYU = 154;
        V1MONEY_CURRENCY_CODE_UZS = 155;
        V1MONEY_CURRENCY_CODE_VEF = 156;
        V1MONEY_CURRENCY_CODE_VND = 157;
        V1MONEY_CURRENCY_CODE_VUV = 158;
        V1MONEY_CURRENCY_CODE_WST = 159;
        V1MONEY_CURRENCY_CODE_XAF = 160;
        V1MONEY_CURRENCY_CODE_XAG = 161;
        V1MONEY_CURRENCY_CODE_XAU = 162;
        V1MONEY_CURRENCY_CODE_XBA = 163;
        V1MONEY_CURRENCY_CODE_XBB = 164;
        V1MONEY_CURRENCY_CODE_XBC = 165;
        V1MONEY_CURRENCY_CODE_XBD = 166;
        V1MONEY_CURRENCY_CODE_XCD = 167;
        V1MONEY_CURRENCY_CODE_XDR = 168;
        V1MONEY_CURRENCY_CODE_XOF = 169;
        V1MONEY_CURRENCY_CODE_XPD = 170;
        V1MONEY_CURRENCY_CODE_XPF = 171;
        V1MONEY_CURRENCY_CODE_XPT = 172;
        V1MONEY_CURRENCY_CODE_XTS = 173;
        V1MONEY_CURRENCY_CODE_XXX = 174;
        V1MONEY_CURRENCY_CODE_YER = 175;
        V1MONEY_CURRENCY_CODE_ZAR = 176;
        V1MONEY_CURRENCY_CODE_ZMK = 177;
        V1MONEY_CURRENCY_CODE_ZMW = 178;
        V1MONEY_CURRENCY_CODE_BTC = 179;
    }
    V1Money_Currency_code currency_code = 2;
}

message V1Order {
    // For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
    int32 btc_price_satoshi = 1;
    // For Bitcoin transactions, the address that the buyer sent Bitcoin to.
    string btc_receive_address = 2;
    // The email address of the order's buyer.
    string buyer_email = 3;
    // A note provided by the buyer when the order was created, if any.
    string buyer_note = 4;
    // A note provided by the merchant when the order's state was set to CANCELED, if any.
    string canceled_note = 5;
    // A note provided by the merchant when the order's state was set to COMPLETED, if any
    string completed_note = 6;
    // The time when the order was created, in ISO 8601 format.
    string created_at = 7;
    // Any errors that occurred during the request.
    repeated Error errors = 8;
    // The time when the order expires if no action is taken, in ISO 8601 format.
    string expires_at = 9;
    // The order's unique identifier.
    string id = 10;
    // The history of actions associated with the order.
    repeated v1OrderHistoryEntry order_history = 11;
    // The unique identifier of the payment associated with the order.
    string payment_id = 12;
    // The promo code provided by the buyer, if any.
    string promo_code = 13;
    // The name of the order's buyer.
    string recipient_name = 14;
    // The phone number to use for the order's delivery.
    string recipient_phone_number = 15;
    // A note provided by the merchant when the order's state was set to REFUNDED, if any.
    string refunded_note = 16;
    // The address to ship the order to.
    Address shipping_address = 17;
    // Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
    enum V1Order_State {
        V1ORDER_STATE_PENDING = 0;
        V1ORDER_STATE_OPEN = 1;
        V1ORDER_STATE_COMPLETED = 2;
        V1ORDER_STATE_CANCELED = 3;
        V1ORDER_STATE_REFUNDED = 4;
        V1ORDER_STATE_REJECTED = 5;
    }
    V1Order_State state = 18;
    // The amount of all items purchased in the order, before taxes and shipping.
    v1Money subtotal_money = 19;
    // The tender used to pay for the order.
    v1Tender tender = 20;
    // The total of all discounts applied to the order.
    v1Money total_discount_money = 21;
    // The total cost of the order.
    v1Money total_price_money = 22;
    // The shipping cost for the order.
    v1Money total_shipping_money = 23;
    // The total of all taxes applied to the order.
    v1Money total_tax_money = 24;
    // The time when the order was last modified, in ISO 8601 format.
    string updated_at = 25;
}

message V1OrderHistoryEntry {
    // The type of action performed on the order.
    enum V1OrderHistoryEntry_Action {
        V1ORDERHISTORYENTRY_ACTION_ORDER_PLACED = 0;
        V1ORDERHISTORYENTRY_ACTION_DECLINED = 1;
        V1ORDERHISTORYENTRY_ACTION_PAYMENT_RECEIVED = 2;
        V1ORDERHISTORYENTRY_ACTION_CANCELED = 3;
        V1ORDERHISTORYENTRY_ACTION_COMPLETED = 4;
        V1ORDERHISTORYENTRY_ACTION_REFUNDED = 5;
        V1ORDERHISTORYENTRY_ACTION_EXPIRED = 6;
    }
    V1OrderHistoryEntry_Action action = 1;
    // The time when the action was performed, in ISO 8601 format.
    string created_at = 2;
}

message V1Page {
    // The cells included on the page.
    repeated v1PageCell cells = 1;
    // The page's unique identifier.
    string id = 2;
    // The page's name, if any.
    string name = 3;
    // The page's position in the merchant's list of pages. Always an integer between 0 and 4, inclusive.
    int32 page_index = 4;
}

message V1PageCell {
    // The column of the cell. Always an integer between 0 and 4, inclusive.
    int32 column = 1;
    // The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.
    string object_id = 2;
    // The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER).
    repeated string object_type = 3;
    // The unique identifier of the page the cell is included on.
    string page_id = 4;
    // For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior.
    repeated string placeholder_type = 5;
    // The row of the cell. Always an integer between 0 and 4, inclusive.
    int32 row = 6;
}

message V1Payment {
    // All of the additive taxes associated with the payment.
    repeated v1PaymentTax additive_tax = 1;
    // The sum of all additive taxes associated with the payment.
    v1Money additive_tax_money = 2;
    // The time when the payment was created, in ISO 8601 format.
    string created_at = 3;
    // The unique identifier of the Square account that took the payment.
    string creator_id = 4;
    // The device that took the payment.
    Device device = 5;
    // The total of all discounts applied to the payment.
    v1Money discount_money = 6;
    v1Money gross_sales_money = 7;
    // The payment's unique identifier.
    string id = 8;
    // All of the inclusive taxes associated with the payment.
    repeated v1PaymentTax inclusive_tax = 9;
    // The sum of all inclusive taxes associated with the payment.
    v1Money inclusive_tax_money = 10;
    // The items purchased in the payment.
    repeated v1PaymentItemization itemizations = 11;
    // The unique identifier of the merchant that took the payment.
    string merchant_id = 12;
    v1Money net_sales_money = 13;
    // The amount to be deposited into the merchant's bank account for the payment.
    v1Money net_total_money = 14;
    // The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
    string payment_url = 15;
    // The total of all processing fees collected by Square for the payment.
    v1Money processing_fee_money = 16;
    // The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.
    string receipt_url = 17;
    // The total of all refunds applied to the payment.
    v1Money refunded_money = 18;
    // All of the refunds applied to the payment.
    repeated v1Refund refunds = 19;
    v1Money swedish_rounding_money = 20;
    // The total of all taxes applied to the payment. This is always the sum of inclusive_tax_money and additive_tax_money.
    v1Money tax_money = 21;
    // All of the additive taxes associated with the payment.
    repeated v1Tender tender = 22;
    // The total of all tips applied to the payment.
    v1Money tip_money = 23;
    // The total of all discounts applied to the payment.
    v1Money total_collected_money = 24;
}

message V1PaymentDiscount {
    // The amount of money that this discount adds to the payment (note that this value is always negative or zero).
    v1Money applied_money = 1;
    // The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.
    string discount_id = 2;
    // The discount's name.
    string name = 3;
}

message V1PaymentItemDetail {
    // The name of the item's merchant-defined category, if any.
    string category_name = 1;
    // The unique ID of the item purchased, if any.
    string item_id = 2;
    // The unique ID of the item variation purchased, if any.
    string item_variation_id = 3;
    //  The item's merchant-defined SKU, if any.
    string sku = 4;
}

message V1PaymentItemization {
    // The total of all discounts applied to the itemization. This value is always negative or zero.
    v1Money discount_money = 1;
    // All discounts applied to this itemization.
    repeated v1PaymentDiscount discounts = 2;
    // The total cost of the itemization and its modifiers, not including taxes or discounts.
    v1Money gross_sales_money = 3;
    // Details of the item, including its unique identifier and the identifier of the item variation purchased.
    v1PaymentItemDetail item_detail = 4;
    // The name of the item variation purchased, if any.
    string item_variation_name = 5;
    // The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
    enum V1PaymentItemization_Itemization_type {
        V1PAYMENTITEMIZATION_ITEMIZATION_TYPE_ITEM = 0;
        V1PAYMENTITEMIZATION_ITEMIZATION_TYPE_CUSTOM_AMOUNT = 1;
        V1PAYMENTITEMIZATION_ITEMIZATION_TYPE_GIFT_CARD_ACTIVATION = 2;
        V1PAYMENTITEMIZATION_ITEMIZATION_TYPE_GIFT_CARD_RELOAD = 3;
        V1PAYMENTITEMIZATION_ITEMIZATION_TYPE_GIFT_CARD_UNKNOWN = 4;
        V1PAYMENTITEMIZATION_ITEMIZATION_TYPE_OTHER = 5;
    }
    V1PaymentItemization_Itemization_type itemization_type = 6;
    // All modifier options applied to this itemization.
    repeated v1PaymentModifier modifiers = 7;
    // The item's name.
    string name = 8;
    // The sum of gross_sales_money and discount_money.
    v1Money net_sales_money = 9;
    // Notes entered by the merchant about the item at the time of payment, if any.
    string notes = 10;
    // The quantity of the item purchased. This can be a decimal value.
    int32 quantity = 11;
    // The cost of a single unit of this item.
    v1Money single_quantity_money = 12;
    // All taxes applied to this itemization.
    repeated v1PaymentTax taxes = 13;
    // The total cost of the item, including all taxes and discounts.
    v1Money total_money = 14;
}

message V1PaymentModifier {
    // The amount of money that this modifier option adds to the payment.
    v1Money applied_money = 1;
    // TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.
    string modifier_option_id = 2;
    // The modifier option's name.
    string name = 3;
}

message V1PaymentTax {
    // The amount of money that this tax adds to the payment.
    v1Money applied_money = 1;
    // Any errors that occurred during the request.
    repeated Error errors = 2;
    // The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
    string fee_id = 3;
    // Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
    enum V1PaymentTax_Inclusion_type {
        V1PAYMENTTAX_INCLUSION_TYPE_ADDITIVE = 0;
        V1PAYMENTTAX_INCLUSION_TYPE_INCLUSIVE = 1;
    }
    V1PaymentTax_Inclusion_type inclusion_type = 4;
    // The merchant-defined name of the tax.
    string name = 5;
    // The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
    string rate = 6;
}

message V1PhoneNumber {
    // The phone number's international calling code. For US phone numbers, this value is +1.
    string calling_code = 1;
    // The phone number.
    string number = 2;
}

message V1Refund {
    // The time when the merchant initiated the refund for Square to process, in ISO 8601 format..
    string created_at = 1;
    string merchant_id = 2;
    // The Square-issued ID of the payment the refund is applied to.
    string payment_id = 3;
    // The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
    string processed_at = 4;
    // The merchant-specified reason for the refund.
    string reason = 5;
    // The amount of additive tax money refunded.
    v1Money refunded_additive_tax_money = 6;
    // The amount of discount money refunded.
    v1Money refunded_discount_money = 7;
    // The amount of inclusive tax money refunded.
    v1Money refunded_inclusive_tax_money = 8;
    // The amount of money refunded. This amount is always negative.
    v1Money refunded_money = 9;
    // The amount of processing fee money refunded.
    v1Money refunded_processing_fee_money = 10;
    // The amount of tip money refunded.
    v1Money refunded_tip_money = 11;
    // The type of refund
    enum V1Refund_Type {
        V1REFUND_TYPE_FULL = 0;
        V1REFUND_TYPE_PARTIAL = 1;
    }
    V1Refund_Type type = 12;
}

message V1Settlement {
    // The Square-issued unique identifier for the bank account associated with the settlement.
    string bank_account_id = 1;
    // The entries included in this settlement.
    repeated v1SettlementEntry entries = 2;
    // The settlement's unique identifier.
    string id = 3;
    // The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
    string initiated_at = 4;
    // The settlement's current status.
    enum V1Settlement_Statu {
        V1SETTLEMENT_STATU_FAILED = 0;
        V1SETTLEMENT_STATU_SENT = 1;
    }
    V1Settlement_Statu status = 5;
    // The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.
    v1Money total_money = 6;
}

message V1SettlementEntry {
    // The total amount of money this entry contributes to the total settlement amount.
    v1Money amount_money = 1;
    // The amount of all Square fees associated with this settlement entry. This value is always negative or zero.
    v1Money fee_money = 2;
    // The settlement's unique identifier.
    string payment_id = 3;
    // The settlement's current status.
    enum V1SettlementEntry_Type {
        V1SETTLEMENTENTRY_TYPE_ADJUSTMENT = 0;
        V1SETTLEMENTENTRY_TYPE_BALANCE_CHARGE = 1;
        V1SETTLEMENTENTRY_TYPE_CHARGE = 2;
        V1SETTLEMENTENTRY_TYPE_FREE_PROCESSING = 3;
        V1SETTLEMENTENTRY_TYPE_HOLD_ADJUSTMENT = 4;
        V1SETTLEMENTENTRY_TYPE_PAID_SERVICE_FEE = 5;
        V1SETTLEMENTENTRY_TYPE_PAID_SERVICE_FEE_REFUND = 6;
        V1SETTLEMENTENTRY_TYPE_REDEMPTION_CODE = 7;
        V1SETTLEMENTENTRY_TYPE_REFUND = 8;
        V1SETTLEMENTENTRY_TYPE_RETURNED_PAYOUT = 9;
        V1SETTLEMENTENTRY_TYPE_SQUARE_CAPITAL_ADVANCE = 10;
        V1SETTLEMENTENTRY_TYPE_SQUARE_CAPITAL_PAYMENT = 11;
        V1SETTLEMENTENTRY_TYPE_SQUARE_CAPITAL_REVERSED_PAYMENT = 12;
        V1SETTLEMENTENTRY_TYPE_SUBSCRIPTION_FEE = 13;
        V1SETTLEMENTENTRY_TYPE_SUBSCRIPTION_FEE_REFUND = 14;
        V1SETTLEMENTENTRY_TYPE_INCENTED_PAYMENT = 15;
        V1SETTLEMENTENTRY_TYPE_RETURNED_ACH_ENTRY = 16;
        V1SETTLEMENTENTRY_TYPE_RETURNED_SQUARE_275 = 17;
        V1SETTLEMENTENTRY_TYPE_SQUARE_275 = 18;
    }
    V1SettlementEntry_Type type = 4;
}

message V1Tender {
    // The brand of credit card provided.
    enum V1Tender_Card_brand {
        V1TENDER_CARD_BRAND_OTHER_BRAND = 0;
        V1TENDER_CARD_BRAND_VISA = 1;
        V1TENDER_CARD_BRAND_MASTER_CARD = 2;
        V1TENDER_CARD_BRAND_AMERICAN_EXPRESS = 3;
        V1TENDER_CARD_BRAND_DISCOVER = 4;
        V1TENDER_CARD_BRAND_DISCOVER_DINERS = 5;
        V1TENDER_CARD_BRAND_JCB = 6;
        V1TENDER_CARD_BRAND_CHINA_UNIONPAY = 7;
        V1TENDER_CARD_BRAND_SQUARE_GIFT_CARD = 8;
    }
    V1Tender_Card_brand card_brand = 1;
    // The amount of total_money returned to the buyer as change.
    v1Money change_back_money = 2;
    // The ID of the employee that processed the tender.
    string employee_id = 3;
    // The tender's unique ID.
    enum V1Tender_Entry_method {
        V1TENDER_ENTRY_METHOD_MANUAL = 0;
        V1TENDER_ENTRY_METHOD_SCANNED = 1;
        V1TENDER_ENTRY_METHOD_SQUARE_CASH = 2;
        V1TENDER_ENTRY_METHOD_SQUARE_WALLET = 3;
        V1TENDER_ENTRY_METHOD_SWIPED = 4;
        V1TENDER_ENTRY_METHOD_WEB_FORM = 5;
        V1TENDER_ENTRY_METHOD_OTHER = 6;
    }
    V1Tender_Entry_method entry_method = 4;
    // The tender's unique ID.
    string id = 5;
    // A human-readable description of the tender.
    string name = 6;
    // The last four digits of the provided credit card's account number.
    string pan_suffix = 7;
    // Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
    string payment_note = 8;
    // The URL of the receipt for the tender.
    string receipt_url = 9;
    // The total of all refunds applied to this tender. This amount is always negative or zero.
    v1Money refunded_money = 10;
    // The amount of total_money applied to the payment.
    v1Money tendered_money = 11;
    // The total amount of money provided in this form of tender.
    v1Money total_money = 12;
    // The type of tender.
    enum V1Tender_Type {
        V1TENDER_TYPE_CREDIT_CARD = 0;
        V1TENDER_TYPE_CASH = 1;
        V1TENDER_TYPE_THIRD_PARTY_CARD = 2;
        V1TENDER_TYPE_NO_SALE = 3;
        V1TENDER_TYPE_SQUARE_WALLET = 4;
        V1TENDER_TYPE_SQUARE_GIFT_CARD = 5;
        V1TENDER_TYPE_UNKNOWN = 6;
        V1TENDER_TYPE_OTHER = 7;
    }
    V1Tender_Type type = 13;
}

message V1Timecard {
    // The ID of the location the employee clocked in from, if any.
    string clockin_location_id = 1;
    // The clock-in time for the timecard, in ISO 8601 format.
    string clockin_time = 2;
    // The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
    string clockout_location_id = 3;
    // The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
    string clockout_time = 4;
    // The time when the timecard was created, in ISO 8601 format.
    string created_at = 5;
    // If true, the timecard was deleted by the merchant, and it is no longer valid.
    bool deleted = 6;
    // The ID of the employee the timecard is associated with.
    string employee_id = 7;
    // The timecard's unique ID.
    string id = 8;
    // The time when the timecard was most recently updated, in ISO 8601 format.
    string updated_at = 9;
}

message V1TimecardEvent {
    // The time the employee clocked in, in ISO 8601 format.
    string clockin_time = 1;
    // The time the employee clocked out, in ISO 8601 format.
    string clockout_time = 2;
    // The time when the event was created, in ISO 8601 format.
    string created_at = 3;
    // The ID of the timecard to list events for.
    enum V1TimecardEvent_Event_type {
        V1TIMECARDEVENT_EVENT_TYPE_API_CREATE = 0;
        V1TIMECARDEVENT_EVENT_TYPE_API_EDIT = 1;
        V1TIMECARDEVENT_EVENT_TYPE_API_DELETE = 2;
        V1TIMECARDEVENT_EVENT_TYPE_REGISTER_CLOCKIN = 3;
        V1TIMECARDEVENT_EVENT_TYPE_REGISTER_CLOCKOUT = 4;
        V1TIMECARDEVENT_EVENT_TYPE_DASHBOARD_SUPERVISOR_CLOSE = 5;
        V1TIMECARDEVENT_EVENT_TYPE_DASHBOARD_EDIT = 6;
        V1TIMECARDEVENT_EVENT_TYPE_DASHBOARD_DELETE = 7;
    }
    V1TimecardEvent_Event_type event_type = 4;
    // The event's unique ID.
    string id = 5;
}

message V1UpdateModifierListRequest {
    // The modifier list's name.
    string name = 1;
    // Indicates whether multiple options from the modifier list can be applied to a single item.
    enum V1UpdateModifierListRequest_Selection_type {
        V1UPDATEMODIFIERLISTREQUEST_SELECTION_TYPE_SINGLE = 0;
        V1UPDATEMODIFIERLISTREQUEST_SELECTION_TYPE_MULTIPLE = 1;
    }
    V1UpdateModifierListRequest_Selection_type selection_type = 2;
}

message V1UpdateOrderRequest {
    // The action to perform on the order (COMPLETE, CANCEL, or REFUND).
    enum V1UpdateOrderRequest_Action {
        V1UPDATEORDERREQUEST_ACTION_COMPLETE = 0;
        V1UPDATEORDERREQUEST_ACTION_CANCEL = 1;
        V1UPDATEORDERREQUEST_ACTION_REFUND = 2;
    }
    V1UpdateOrderRequest_Action action = 1;
    // A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
    string canceled_note = 2;
    // A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
    string completed_note = 3;
    // A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
    string refunded_note = 4;
    // The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
    string shipped_tracking_number = 5;
}

message V1Variation {
    // The item variation's unique ID.
    string id = 1;
    // If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard.
    int32 inventory_alert_threshold = 2;
    // Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold.
    enum V1Variation_Inventory_alert_type {
        V1VARIATION_INVENTORY_ALERT_TYPE_LOW_QUANTITY = 0;
        V1VARIATION_INVENTORY_ALERT_TYPE_NONE = 1;
        V1VARIATION_INVENTORY_ALERT_TYPE_INVESTMENT = 2;
        V1VARIATION_INVENTORY_ALERT_TYPE_LOAN = 3;
        V1VARIATION_INVENTORY_ALERT_TYPE_SAVINGS = 4;
        V1VARIATION_INVENTORY_ALERT_TYPE_OTHER = 5;
    }
    V1Variation_Inventory_alert_type inventory_alert_type = 3;
    // The ID of the variation's associated item.
    string item_id = 4;
    // The item variation's name.
    string name = 5;
    // Indicates the variation's list position when displayed in Square Register and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order
    int32 ordinal = 6;
    // The item variation's price, if any.
    v1Money price_money = 7;
    // Indicates whether the item variation's price is fixed or determined at the time of sale.
    enum V1Variation_Pricing_type {
        V1VARIATION_PRICING_TYPE_FIXED_PRICING = 0;
        V1VARIATION_PRICING_TYPE_VARIABLE_PRICING = 1;
    }
    V1Variation_Pricing_type pricing_type = 8;
    // The item variation's SKU, if any.
    string sku = 9;
    // If true, inventory tracking is active for the variation.
    bool track_inventory = 10;
    // Arbitrary metadata associated with the variation. Cannot exceed 255 characters.
    string user_data = 11;
}

service SquareConnectService {
    // Get a business's information.
    // 
    // Get a business's information.
    rpc GetV1Me(google.protobuf.Empty) returns (V1Merchant) {
      option (google.api.http) = {
        get: "/v1/me"
      };
    }
    // Provides summary information for all of a business's employees.
    // 
    // Provides summary information for all of a business's employees.
    rpc GetV1MeEmployees(GetV1MeEmployeesRequest) returns (GetV1MeEmployeesResponse) {
      option (google.api.http) = {
        get: "/v1/me/employees"
      };
    }
    // Creates an employee for a business.
    // 
    // Creates an employee for a business.
    rpc PostV1MeEmployees(PostV1MeEmployeesRequest) returns (V1Employee) {
      option (google.api.http) = {
        post: "/v1/me/employees"
        body: "body"
      };
    }
    // Provides the details for a single employee.
    // 
    // Provides the details for a single employee.
    rpc GetV1MeEmployeesEmployee_id(GetV1MeEmployeesEmployee_idRequest) returns (V1Employee) {
      option (google.api.http) = {
        get: "/v1/me/employees/{employee_id}"
      };
    }
    // V1 UpdateEmployee
    rpc PutV1MeEmployeesEmployee_id(PutV1MeEmployeesEmployee_idRequest) returns (V1Employee) {
      option (google.api.http) = {
        put: "/v1/me/employees/{employee_id}"
        body: "body"
      };
    }
    // Provides details for a business's locations, including their IDs.
    // 
    // Provides details for a business's locations, including their IDs.
    rpc GetV1MeLocations(google.protobuf.Empty) returns (GetV1MeLocationsResponse) {
      option (google.api.http) = {
        get: "/v1/me/locations"
      };
    }
    // Provides summary information for all of a business's employee roles.
    // 
    // Provides summary information for all of a business's employee roles.
    rpc GetV1MeRoles(GetV1MeRolesRequest) returns (GetV1MeRolesResponse) {
      option (google.api.http) = {
        get: "/v1/me/roles"
      };
    }
    // Creates an employee role you can then assign to employees.
    // 
    // Creates an employee role you can then assign to employees.
    rpc PostV1MeRoles(PostV1MeRolesRequest) returns (V1EmployeeRole) {
      option (google.api.http) = {
        post: "/v1/me/roles"
        body: "EmployeeRole"
      };
    }
    // Provides the details for a single employee role.
    // 
    // Provides the details for a single employee role.
    rpc GetV1MeRolesRole_id(GetV1MeRolesRole_idRequest) returns (V1EmployeeRole) {
      option (google.api.http) = {
        get: "/v1/me/roles/{role_id}"
      };
    }
    // Modifies the details of an employee role.
    // 
    // Modifies the details of an employee role.
    rpc PutV1MeRolesRole_id(PutV1MeRolesRole_idRequest) returns (V1EmployeeRole) {
      option (google.api.http) = {
        put: "/v1/me/roles/{role_id}"
        body: "body"
      };
    }
    // Provides summary information for all of a business's employee timecards.
    // 
    // Provides summary information for all of a business's employee timecards.
    rpc GetV1MeTimecards(GetV1MeTimecardsRequest) returns (GetV1MeTimecardsResponse) {
      option (google.api.http) = {
        get: "/v1/me/timecards"
      };
    }
    // Creates a timecard for an employee. Each timecard corresponds to a single shift.
    // 
    // Creates a timecard for an employee. Each timecard corresponds to a single shift.
    rpc PostV1MeTimecards(PostV1MeTimecardsRequest) returns (V1Timecard) {
      option (google.api.http) = {
        post: "/v1/me/timecards"
        body: "body"
      };
    }
    // Provides the details for a single timecard.
    // 
    // Provides the details for a single timecard.
    rpc GetV1MeTimecardsTimecard_id(GetV1MeTimecardsTimecard_idRequest) returns (V1Timecard) {
      option (google.api.http) = {
        get: "/v1/me/timecards/{timecard_id}"
      };
    }
    // Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
    // 
    // Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
    rpc PutV1MeTimecardsTimecard_id(PutV1MeTimecardsTimecard_idRequest) returns (V1Timecard) {
      option (google.api.http) = {
        put: "/v1/me/timecards/{timecard_id}"
        body: "body"
      };
    }
    // Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
    // 
    // Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
    rpc DeleteV1MeTimecardsTimecard_id(DeleteV1MeTimecardsTimecard_idRequest) returns (DeleteV1MeTimecardsTimecard_idResponse) {
      option (google.api.http) = {
        delete: "/v1/me/timecards/{timecard_id}"
      };
    }
    // Provides summary information for all events associated with a particular timecard.
    // 
    // Provides summary information for all events associated with a particular timecard.
    rpc GetV1MeTimecardsTimecard_idEvents(GetV1MeTimecardsTimecard_idEventsRequest) returns (GetV1MeTimecardsTimecard_idEventsResponse) {
      option (google.api.http) = {
        get: "/v1/me/timecards/{timecard_id}/events"
      };
    }
    // Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
    // 
    // Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
    rpc GetV1Location_idBankAccounts(GetV1Location_idBankAccountsRequest) returns (GetV1Location_idBankAccountsResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/bank-accounts"
      };
    }
    // Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
    // 
    // Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
    rpc GetV1Location_idBankAccountsBank_account_id(GetV1Location_idBankAccountsBank_account_idRequest) returns (V1BankAccount) {
      option (google.api.http) = {
        get: "/v1/{location_id}/bank-accounts/{bank_account_id}"
      };
    }
    // Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
    // 
    // Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
    rpc GetV1Location_idCashDrawerShifts(GetV1Location_idCashDrawerShiftsRequest) returns (GetV1Location_idCashDrawerShiftsResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/cash-drawer-shifts"
      };
    }
    // Provides the details for a single cash drawer shift, including all events that occurred during the shift.
    // 
    // Provides the details for a single cash drawer shift, including all events that occurred during the shift.
    rpc GetV1Location_idCashDrawerShiftsShift_id(GetV1Location_idCashDrawerShiftsShift_idRequest) returns (V1CashDrawerShift) {
      option (google.api.http) = {
        get: "/v1/{location_id}/cash-drawer-shifts/{shift_id}"
      };
    }
    // Lists all of a location's item categories.
    // 
    // Lists all of a location's item categories.
    rpc GetV1Location_idCategories(GetV1Location_idCategoriesRequest) returns (GetV1Location_idCategoriesResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/categories"
      };
    }
    // Creates an item category.
    // 
    // Creates an item category.
    rpc PostV1Location_idCategories(PostV1Location_idCategoriesRequest) returns (V1Category) {
      option (google.api.http) = {
        post: "/v1/{location_id}/categories"
        body: "body"
      };
    }
    // Modifies the details of an existing item category.
    // 
    // Modifies the details of an existing item category.
    rpc PutV1Location_idCategoriesCategory_id(PutV1Location_idCategoriesCategory_idRequest) returns (V1Category) {
      option (google.api.http) = {
        put: "/v1/{location_id}/categories/{category_id}"
        body: "body"
      };
    }
    // Deletes an existing item category.
    // 
    // Deletes an existing item category.
    rpc DeleteV1Location_idCategoriesCategory_id(DeleteV1Location_idCategoriesCategory_idRequest) returns (V1Category) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/categories/{category_id}"
      };
    }
    // Lists all of a location's discounts.
    // 
    // Lists all of a location's discounts.
    rpc GetV1Location_idDiscounts(GetV1Location_idDiscountsRequest) returns (GetV1Location_idDiscountsResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/discounts"
      };
    }
    // Creates a discount.
    // 
    // Creates a discount.
    rpc PostV1Location_idDiscounts(PostV1Location_idDiscountsRequest) returns (V1Discount) {
      option (google.api.http) = {
        post: "/v1/{location_id}/discounts"
        body: "body"
      };
    }
    // Modifies the details of an existing discount.
    // 
    // Modifies the details of an existing discount.
    rpc PutV1Location_idDiscountsDiscount_id(PutV1Location_idDiscountsDiscount_idRequest) returns (V1Discount) {
      option (google.api.http) = {
        put: "/v1/{location_id}/discounts/{discount_id}"
        body: "body"
      };
    }
    // Deletes an existing discount.
    // 
    // Deletes an existing discount.
    rpc DeleteV1Location_idDiscountsDiscount_id(DeleteV1Location_idDiscountsDiscount_idRequest) returns (V1Discount) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/discounts/{discount_id}"
      };
    }
    // Lists all of a location's fees (taxes).
    // 
    // Lists all of a location's fees (taxes).
    rpc GetV1Location_idFees(GetV1Location_idFeesRequest) returns (GetV1Location_idFeesResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/fees"
      };
    }
    // Creates a fee (tax).
    // 
    // Creates a fee (tax).
    rpc PostV1Location_idFees(PostV1Location_idFeesRequest) returns (V1Fee) {
      option (google.api.http) = {
        post: "/v1/{location_id}/fees"
        body: "body"
      };
    }
    // Modifies the details of an existing fee (tax).
    // 
    // Modifies the details of an existing fee (tax).
    rpc PutV1Location_idFeesFee_id(PutV1Location_idFeesFee_idRequest) returns (V1Fee) {
      option (google.api.http) = {
        put: "/v1/{location_id}/fees/{fee_id}"
        body: "body"
      };
    }
    // Deletes an existing fee (tax).
    // 
    // Deletes an existing fee (tax).
    rpc DeleteV1Location_idFeesFee_id(DeleteV1Location_idFeesFee_idRequest) returns (V1Fee) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/fees/{fee_id}"
      };
    }
    // Provides inventory information for all of a merchant's inventory-enabled item variations.
    // 
    // Provides inventory information for all of a merchant's inventory-enabled item variations.
    rpc GetV1Location_idInventory(GetV1Location_idInventoryRequest) returns (GetV1Location_idInventoryResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/inventory"
      };
    }
    // Adjusts an item variation's current available inventory.
    // 
    // Adjusts an item variation's current available inventory.
    rpc PostV1Location_idInventoryVariation_id(PostV1Location_idInventoryVariation_idRequest) returns (V1InventoryEntry) {
      option (google.api.http) = {
        post: "/v1/{location_id}/inventory/{variation_id}"
        body: "body"
      };
    }
    // Provides summary information for all of a location's items.
    // 
    // Provides summary information for all of a location's items.
    rpc GetV1Location_idItems(GetV1Location_idItemsRequest) returns (GetV1Location_idItemsResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/items"
      };
    }
    // Creates an item and at least one variation for it.
    // 
    // Creates an item and at least one variation for it.
    rpc PostV1Location_idItems(PostV1Location_idItemsRequest) returns (V1Item) {
      option (google.api.http) = {
        post: "/v1/{location_id}/items"
        body: "body"
      };
    }
    // Provides the details for a single item, including associated modifier lists and fees.
    // 
    // Provides the details for a single item, including associated modifier lists and fees.
    rpc GetV1Location_idItemsItem_id(GetV1Location_idItemsItem_idRequest) returns (V1Item) {
      option (google.api.http) = {
        get: "/v1/{location_id}/items/{item_id}"
      };
    }
    // Modifies the core details of an existing item.
    // 
    // Modifies the core details of an existing item.
    rpc PutV1Location_idItemsItem_id(PutV1Location_idItemsItem_idRequest) returns (V1Item) {
      option (google.api.http) = {
        put: "/v1/{location_id}/items/{item_id}"
        body: "body"
      };
    }
    // Deletes an existing item and all item variations associated with it.
    // 
    // Deletes an existing item and all item variations associated with it.
    rpc DeleteV1Location_idItemsItem_id(DeleteV1Location_idItemsItem_idRequest) returns (V1Item) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/items/{item_id}"
      };
    }
    // Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
    // 
    // Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
    rpc PutV1Location_idItemsItem_idFeesFee_id(PutV1Location_idItemsItem_idFeesFee_idRequest) returns (V1Item) {
      option (google.api.http) = {
        put: "/v1/{location_id}/items/{item_id}/fees/{fee_id}"
      };
    }
    // Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
    // 
    // Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
    rpc DeleteV1Location_idItemsItem_idFeesFee_id(DeleteV1Location_idItemsItem_idFeesFee_idRequest) returns (V1Item) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/items/{item_id}/fees/{fee_id}"
      };
    }
    // Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
    // 
    // Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
    rpc PutV1Location_idItemsItem_idModifierListsModifier_list_id(PutV1Location_idItemsItem_idModifierListsModifier_list_idRequest) returns (V1Item) {
      option (google.api.http) = {
        put: "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}"
      };
    }
    // Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
    // 
    // Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
    rpc DeleteV1Location_idItemsItem_idModifierListsModifier_list_id(DeleteV1Location_idItemsItem_idModifierListsModifier_list_idRequest) returns (V1Item) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}"
      };
    }
    // Creates an item variation for an existing item.
    // 
    // Creates an item variation for an existing item.
    rpc PostV1Location_idItemsItem_idVariations(PostV1Location_idItemsItem_idVariationsRequest) returns (V1Variation) {
      option (google.api.http) = {
        post: "/v1/{location_id}/items/{item_id}/variations"
        body: "body"
      };
    }
    // Modifies the details of an existing item variation.
    // 
    // Modifies the details of an existing item variation.
    rpc PutV1Location_idItemsItem_idVariationsVariation_id(PutV1Location_idItemsItem_idVariationsVariation_idRequest) returns (V1Variation) {
      option (google.api.http) = {
        put: "/v1/{location_id}/items/{item_id}/variations/{variation_id}"
        body: "body"
      };
    }
    // Deletes an existing item variation from an item.
    // 
    // Deletes an existing item variation from an item.
    rpc DeleteV1Location_idItemsItem_idVariationsVariation_id(DeleteV1Location_idItemsItem_idVariationsVariation_idRequest) returns (V1Variation) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/items/{item_id}/variations/{variation_id}"
      };
    }
    // Lists all of a location's modifier lists.
    // 
    // Lists all of a location's modifier lists.
    rpc GetV1Location_idModifierLists(GetV1Location_idModifierListsRequest) returns (GetV1Location_idModifierListsResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/modifier-lists"
      };
    }
    // Creates an item modifier list and at least one modifier option for it.
    // 
    // Creates an item modifier list and at least one modifier option for it.
    rpc PostV1Location_idModifierLists(PostV1Location_idModifierListsRequest) returns (V1ModifierList) {
      option (google.api.http) = {
        post: "/v1/{location_id}/modifier-lists"
        body: "body"
      };
    }
    // Provides the details for a single modifier list.
    // 
    // Provides the details for a single modifier list.
    rpc GetV1Location_idModifierListsModifier_list_id(GetV1Location_idModifierListsModifier_list_idRequest) returns (V1ModifierList) {
      option (google.api.http) = {
        get: "/v1/{location_id}/modifier-lists/{modifier_list_id}"
      };
    }
    // Modifies the details of an existing item modifier list.
    // 
    // Modifies the details of an existing item modifier list.
    rpc PutV1Location_idModifierListsModifier_list_id(PutV1Location_idModifierListsModifier_list_idRequest) returns (V1ModifierList) {
      option (google.api.http) = {
        put: "/v1/{location_id}/modifier-lists/{modifier_list_id}"
        body: "body"
      };
    }
    // Deletes an existing item modifier list and all modifier options associated with it.
    // 
    // Deletes an existing item modifier list and all modifier options associated with it.
    rpc DeleteV1Location_idModifierListsModifier_list_id(DeleteV1Location_idModifierListsModifier_list_idRequest) returns (V1ModifierList) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/modifier-lists/{modifier_list_id}"
      };
    }
    // Creates an item modifier option and adds it to a modifier list.
    // 
    // Creates an item modifier option and adds it to a modifier list.
    rpc PostV1Location_idModifierListsModifier_list_idModifierOptions(PostV1Location_idModifierListsModifier_list_idModifierOptionsRequest) returns (V1ModifierOption) {
      option (google.api.http) = {
        post: "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options"
        body: "body"
      };
    }
    // Modifies the details of an existing item modifier option.
    // 
    // Modifies the details of an existing item modifier option.
    rpc PutV1Location_idModifierListsModifier_list_idModifierOptionsModifier_option_id(PutV1Location_idModifierListsModifier_list_idModifierOptionsModifier_option_idRequest) returns (V1ModifierOption) {
      option (google.api.http) = {
        put: "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}"
        body: "body"
      };
    }
    // Deletes an existing item modifier option from a modifier list.
    // 
    // Deletes an existing item modifier option from a modifier list.
    rpc DeleteV1Location_idModifierListsModifier_list_idModifierOptionsModifier_option_id(DeleteV1Location_idModifierListsModifier_list_idModifierOptionsModifier_option_idRequest) returns (V1ModifierOption) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}"
      };
    }
    // Provides summary information for a merchant's online store orders.
    // 
    // Provides summary information for a merchant's online store orders.
    rpc GetV1Location_idOrders(GetV1Location_idOrdersRequest) returns (GetV1Location_idOrdersResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/orders"
      };
    }
    // Provides comprehensive information for a single online store order, including the order's history.
    // 
    // Provides comprehensive information for a single online store order, including the order's history.
    rpc GetV1Location_idOrdersOrder_id(GetV1Location_idOrdersOrder_idRequest) returns (V1Order) {
      option (google.api.http) = {
        get: "/v1/{location_id}/orders/{order_id}"
      };
    }
    // Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
    // 
    // Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
    rpc PutV1Location_idOrdersOrder_id(PutV1Location_idOrdersOrder_idRequest) returns (V1Order) {
      option (google.api.http) = {
        put: "/v1/{location_id}/orders/{order_id}"
        body: "body"
      };
    }
    // Lists all of a location's Favorites pages in Square Register.
    // 
    // Lists all of a location's Favorites pages in Square Register.
    rpc GetV1Location_idPages(GetV1Location_idPagesRequest) returns (GetV1Location_idPagesResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/pages"
      };
    }
    // Creates a Favorites page in Square Register.
    // 
    // Creates a Favorites page in Square Register.
    rpc PostV1Location_idPages(PostV1Location_idPagesRequest) returns (V1Page) {
      option (google.api.http) = {
        post: "/v1/{location_id}/pages"
        body: "body"
      };
    }
    // Modifies the details of a Favorites page in Square Register.
    // 
    // Modifies the details of a Favorites page in Square Register.
    rpc PutV1Location_idPagesPage_id(PutV1Location_idPagesPage_idRequest) returns (V1Page) {
      option (google.api.http) = {
        put: "/v1/{location_id}/pages/{page_id}"
        body: "body"
      };
    }
    // Deletes an existing Favorites page and all of its cells.
    // 
    // Deletes an existing Favorites page and all of its cells.
    rpc DeleteV1Location_idPagesPage_id(DeleteV1Location_idPagesPage_idRequest) returns (V1Page) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/pages/{page_id}"
      };
    }
    // Modifies a cell of a Favorites page in Square Register.
    // 
    // Modifies a cell of a Favorites page in Square Register.
    rpc PutV1Location_idPagesPage_idCells(PutV1Location_idPagesPage_idCellsRequest) returns (V1Page) {
      option (google.api.http) = {
        put: "/v1/{location_id}/pages/{page_id}/cells"
        body: "body"
      };
    }
    // Deletes a cell from a Favorites page in Square Register.
    // 
    // Deletes a cell from a Favorites page in Square Register.
    rpc DeleteV1Location_idPagesPage_idCells(DeleteV1Location_idPagesPage_idCellsRequest) returns (V1Page) {
      option (google.api.http) = {
        delete: "/v1/{location_id}/pages/{page_id}/cells"
      };
    }
    // Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
    // 
    // Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
    rpc GetV1Location_idPayments(GetV1Location_idPaymentsRequest) returns (GetV1Location_idPaymentsResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/payments"
      };
    }
    // Provides comprehensive information for a single payment.
    // 
    // Provides comprehensive information for a single payment.
    rpc GetV1Location_idPaymentsPayment_id(GetV1Location_idPaymentsPayment_idRequest) returns (V1Payment) {
      option (google.api.http) = {
        get: "/v1/{location_id}/payments/{payment_id}"
      };
    }
    // Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
    // 
    // Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
    rpc GetV1Location_idRefunds(GetV1Location_idRefundsRequest) returns (GetV1Location_idRefundsResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/refunds"
      };
    }
    // Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
    // 
    // Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
    rpc PostV1Location_idRefunds(PostV1Location_idRefundsRequest) returns (V1Refund) {
      option (google.api.http) = {
        post: "/v1/{location_id}/refunds"
        body: "body"
      };
    }
    // Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length.
    // 
    // Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length.
    rpc GetV1Location_idSettlements(GetV1Location_idSettlementsRequest) returns (GetV1Location_idSettlementsResponse) {
      option (google.api.http) = {
        get: "/v1/{location_id}/settlements"
      };
    }
    // Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
    // 
    // Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
    rpc GetV1Location_idSettlementsSettlement_id(GetV1Location_idSettlementsSettlement_idRequest) returns (V1Settlement) {
      option (google.api.http) = {
        get: "/v1/{location_id}/settlements/{settlement_id}"
      };
    }
    // BatchDeleteCatalogObjects
    // 
    // Deletes a set of [CatalogItem](#type-catalogitem)s based on the
    // provided list of target IDs and returns a set of successfully deleted IDs in
    // the response. Deletion is a cascading event such that all children of the
    // targeted object are also deleted. For example, deleting a CatalogItem will
    // also delete all of its [CatalogItemVariation](#type-catalogitemvariation)
    // children.
    // 
    // `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted
    // IDs can be deleted. The response will only include IDs that were
    // actually deleted.
    rpc PostV2CatalogBatchDelete(PostV2CatalogBatchDeleteRequest) returns (BatchDeleteCatalogObjectsResponse) {
      option (google.api.http) = {
        post: "/v2/catalog/batch-delete"
        body: "body"
      };
    }
    // BatchRetrieveCatalogObjects
    // 
    // Returns a set of objects based on the provided ID.
    // Each [CatalogItem](#type-catalogitem) returned in the set includes all of its
    // child information including: all of its
    // [CatalogItemVariation](#type-catalogitemvariation) objects, references to
    // its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of
    // any [CatalogTax](#type-catalogtax) objects that apply to it.
    rpc PostV2CatalogBatchRetrieve(PostV2CatalogBatchRetrieveRequest) returns (BatchRetrieveCatalogObjectsResponse) {
      option (google.api.http) = {
        post: "/v2/catalog/batch-retrieve"
        body: "body"
      };
    }
    // BatchUpsertCatalogObjects
    // 
    // Creates or updates up to 10,000 target objects based on the provided
    // list of objects. The target objects are grouped into batches and each batch is
    // inserted/updated in an all-or-nothing manner. If an object within a batch is
    // malformed in some way, or violates a database constraint, the entire batch
    // containing that item will be disregarded. However, other batches in the same
    // request may still succeed. Each batch may contain up to 1,000 objects, and
    // batches will be processed in order as long as the total object count for the
    // request (items, variations, modifier lists, discounts, and taxes) is no more
    // than 10,000.
    rpc PostV2CatalogBatchUpsert(PostV2CatalogBatchUpsertRequest) returns (BatchUpsertCatalogObjectsResponse) {
      option (google.api.http) = {
        post: "/v2/catalog/batch-upsert"
        body: "body"
      };
    }
    // CatalogInfo
    // 
    // Returns information about the Square Catalog API, such as batch size
    // limits for `BatchUpsertCatalogObjects`.
    rpc GetV2CatalogInfo(google.protobuf.Empty) returns (CatalogInfoResponse) {
      option (google.api.http) = {
        get: "/v2/catalog/info"
      };
    }
    // ListCatalog
    // 
    // Returns a list of [CatalogObject](#type-catalogobject)s that includes
    // all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem)
    // and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter
    // is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types:
    // `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
    rpc GetV2CatalogList(GetV2CatalogListRequest) returns (ListCatalogResponse) {
      option (google.api.http) = {
        get: "/v2/catalog/list"
      };
    }
    // UpsertCatalogObject
    // 
    // Creates or updates the target [CatalogObject](#type-catalogobject).
    rpc PostV2CatalogObject(PostV2CatalogObjectRequest) returns (UpsertCatalogObjectResponse) {
      option (google.api.http) = {
        post: "/v2/catalog/object"
        body: "body"
      };
    }
    // RetrieveCatalogObject
    // 
    // Returns a single [CatalogItem](#type-catalogitem) as a
    // [CatalogObject](#type-catalogobject) based on the provided ID. The returned
    // object includes all of the relevant [CatalogItem](#type-catalogitem)
    // information including: [CatalogItemVariation](#type-catalogitemvariation)
    // children, references to its
    // [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of
    // any [CatalogTax](#type-catalogtax) objects that apply to it.
    rpc GetV2CatalogObjectObject_id(GetV2CatalogObjectObject_idRequest) returns (RetrieveCatalogObjectResponse) {
      option (google.api.http) = {
        get: "/v2/catalog/object/{object_id}"
      };
    }
    // DeleteCatalogObject
    // 
    // Deletes a single [CatalogObject](#type-catalogobject) based on the
    // provided ID and returns the set of successfully deleted IDs in the response.
    // Deletion is a cascading event such that all children of the targeted object
    // are also deleted. For example, deleting a [CatalogItem](#type-catalogitem)
    // will also delete all of its
    // [CatalogItemVariation](#type-catalogitemvariation) children.
    rpc DeleteV2CatalogObjectObject_id(DeleteV2CatalogObjectObject_idRequest) returns (DeleteCatalogObjectResponse) {
      option (google.api.http) = {
        delete: "/v2/catalog/object/{object_id}"
      };
    }
    // SearchCatalogObjects
    // 
    // Queries the targeted catalog using a variety of query types
    // ([CatalogQuerySortedAttribute](#type-catalogquerysortedattribute),
    // ([CatalogQueryExact](#type-catalogqueryexact),
    // ([CatalogQueryRange](#type-catalogqueryrange),
    // ([CatalogQueryText](#type-catalogquerytext),
    // ([CatalogQueryItemsForTax](#type-catalogqueryitemsfortax),
    // ([CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist)).
    rpc PostV2CatalogSearch(PostV2CatalogSearchRequest) returns (SearchCatalogObjectsResponse) {
      option (google.api.http) = {
        post: "/v2/catalog/search"
        body: "body"
      };
    }
    // UpdateItemModifierLists
    // 
    // Updates the [CatalogModifierList](#type-catalogmodifierlist) objects
    // that apply to the targeted [CatalogItem](#type-catalogitem) without having
    // to perform an upsert on the entire item.
    rpc PostV2CatalogUpdateItemModifierLists(PostV2CatalogUpdateItemModifierListsRequest) returns (UpdateItemModifierListsResponse) {
      option (google.api.http) = {
        post: "/v2/catalog/update-item-modifier-lists"
        body: "body"
      };
    }
    // UpdateItemTaxes
    // 
    // Updates the [CatalogTax](#type-catalogtax) objects that apply to the
    // targeted [CatalogItem](#type-catalogitem) without having to perform an
    // upsert on the entire item.
    rpc PostV2CatalogUpdateItemTaxes(PostV2CatalogUpdateItemTaxesRequest) returns (UpdateItemTaxesResponse) {
      option (google.api.http) = {
        post: "/v2/catalog/update-item-taxes"
        body: "body"
      };
    }
    // ListCustomers
    // 
    // Lists a business's customers.
    rpc GetV2Customers(GetV2CustomersRequest) returns (ListCustomersResponse) {
      option (google.api.http) = {
        get: "/v2/customers"
      };
    }
    // CreateCustomer
    // 
    // Creates a new customer for a business, which can have associated cards on file.
    // 
    // You must provide __at least one__ of the following values in your request to this
    // endpoint:
    // 
    // - `given_name`
    // - `family_name`
    // - `company_name`
    // - `email_address`
    // - `phone_number`
    // 
    // This endpoint does not accept an idempotency key. If you accidentally create
    // a duplicate customer, you can delete it with the
    // [DeleteCustomer](#endpoint-deletecustomer) endpoint.
    rpc PostV2Customers(PostV2CustomersRequest) returns (CreateCustomerResponse) {
      option (google.api.http) = {
        post: "/v2/customers"
        body: "body"
      };
    }
    // RetrieveCustomer
    // 
    // Returns details for a single customer.
    rpc GetV2CustomersCustomer_id(GetV2CustomersCustomer_idRequest) returns (RetrieveCustomerResponse) {
      option (google.api.http) = {
        get: "/v2/customers/{customer_id}"
      };
    }
    // UpdateCustomer
    // 
    // Updates the details of an existing customer.
    // The ID of the customer may change if the customer has been merged into another customer.
    // 
    // You cannot edit a customer's cards on file with this endpoint. To make changes
    // to a card on file, you must delete the existing card on file with the
    // [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the
    // [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
    rpc PutV2CustomersCustomer_id(PutV2CustomersCustomer_idRequest) returns (UpdateCustomerResponse) {
      option (google.api.http) = {
        put: "/v2/customers/{customer_id}"
        body: "body"
      };
    }
    // DeleteCustomer
    // 
    // Deletes a customer from a business, along with any linked cards on file.
    rpc DeleteV2CustomersCustomer_id(DeleteV2CustomersCustomer_idRequest) returns (DeleteCustomerResponse) {
      option (google.api.http) = {
        delete: "/v2/customers/{customer_id}"
      };
    }
    // CreateCustomerCard
    // 
    // Adds a card on file to an existing customer. In the United States
    // Square takes care of automatically updating any cards on file that might
    // have expired since you first attached them to a customer.
    rpc PostV2CustomersCustomer_idCards(PostV2CustomersCustomer_idCardsRequest) returns (CreateCustomerCardResponse) {
      option (google.api.http) = {
        post: "/v2/customers/{customer_id}/cards"
        body: "body"
      };
    }
    // DeleteCustomerCard
    // 
    // Removes a card on file from a customer.
    rpc DeleteV2CustomersCustomer_idCardsCard_id(DeleteV2CustomersCustomer_idCardsCard_idRequest) returns (DeleteCustomerCardResponse) {
      option (google.api.http) = {
        delete: "/v2/customers/{customer_id}/cards/{card_id}"
      };
    }
    // ListLocations
    // 
    // Provides the details for all of a business's locations.
    // 
    // Most other Connect API endpoints have a required `location_id` path parameter.
    // The `id` field of the [`Location`](#type-location) objects returned by this
    // endpoint correspond to that `location_id` parameter.
    rpc GetV2Locations(google.protobuf.Empty) returns (ListLocationsResponse) {
      option (google.api.http) = {
        get: "/v2/locations"
      };
    }
    // CreateCheckout
    // 
    // Creates a [Checkout](#type-checkout) response that links a
    // `checkoutId` and `checkout_page_url` that customers can be directed to in
    // order to provide their payment information using a payment processing
    // workflow hosted on connect.squareup.com.
    rpc PostV2LocationsLocation_idCheckouts(PostV2LocationsLocation_idCheckoutsRequest) returns (CreateCheckoutResponse) {
      option (google.api.http) = {
        post: "/v2/locations/{location_id}/checkouts"
        body: "body"
      };
    }
    // ListRefunds
    // 
    // Lists refunds for one of a business's locations.
    // 
    // Refunds with a `status` of `PENDING` are not currently included in this
    // endpoint's response.
    // 
    // Max results per [page](#paginatingresults): 50
    rpc GetV2LocationsLocation_idRefunds(GetV2LocationsLocation_idRefundsRequest) returns (ListRefundsResponse) {
      option (google.api.http) = {
        get: "/v2/locations/{location_id}/refunds"
      };
    }
    // ListTransactions
    // 
    // Lists transactions for a particular location.
    // 
    // Max results per [page](#paginatingresults): 50
    rpc GetV2LocationsLocation_idTransactions(GetV2LocationsLocation_idTransactionsRequest) returns (ListTransactionsResponse) {
      option (google.api.http) = {
        get: "/v2/locations/{location_id}/transactions"
      };
    }
    // Charge
    // 
    // Charges a card represented by a card nonce or a customer's card on file.
    // 
    // Your request to this endpoint must include _either_:
    // 
    // - A value for the `card_nonce` parameter (to charge a card nonce generated
    // with the `SqPaymentForm`)
    // - Values for the `customer_card_id` and `customer_id` parameters (to charge
    // a customer's card on file)
    // 
    // In order for an e-commerce payment to potentially qualify for
    // [Square chargeback protection](https://squareup.com/help/article/5394), you
    // _must_ provide values for the following parameters in your request:
    // 
    // - `buyer_email_address`
    // - At least one of `billing_address` or `shipping_address`
    // 
    // When this response is returned, the amount of Square's processing fee might not yet be
    // calculated. To obtain the processing fee, wait about ten seconds and call
    // [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money`
    // field of each [Tender included](#type-tender) in the transaction.
    rpc PostV2LocationsLocation_idTransactions(PostV2LocationsLocation_idTransactionsRequest) returns (ChargeResponse) {
      option (google.api.http) = {
        post: "/v2/locations/{location_id}/transactions"
        body: "body"
      };
    }
    // RetrieveTransaction
    // 
    // Retrieves details for a single transaction.
    rpc GetV2LocationsLocation_idTransactionsTransaction_id(GetV2LocationsLocation_idTransactionsTransaction_idRequest) returns (RetrieveTransactionResponse) {
      option (google.api.http) = {
        get: "/v2/locations/{location_id}/transactions/{transaction_id}"
      };
    }
    // CaptureTransaction
    // 
    // Captures a transaction that was created with the [Charge](#endpoint-charge)
    // endpoint with a `delay_capture` value of `true`.
    // 
    // See [Delayed capture transactions](/articles/delayed-capture-transactions/)
    // for more information.
    rpc PostV2LocationsLocation_idTransactionsTransaction_idCapture(PostV2LocationsLocation_idTransactionsTransaction_idCaptureRequest) returns (CaptureTransactionResponse) {
      option (google.api.http) = {
        post: "/v2/locations/{location_id}/transactions/{transaction_id}/capture"
      };
    }
    // CreateRefund
    // 
    // Initiates a refund for a previously charged tender.
    // 
    // You must issue a refund within 120 days of the associated payment. See
    // (this article)[https://squareup.com/help/us/en/article/5060] for more information
    // on refund behavior.
    rpc PostV2LocationsLocation_idTransactionsTransaction_idRefund(PostV2LocationsLocation_idTransactionsTransaction_idRefundRequest) returns (CreateRefundResponse) {
      option (google.api.http) = {
        post: "/v2/locations/{location_id}/transactions/{transaction_id}/refund"
        body: "body"
      };
    }
    // VoidTransaction
    // 
    // Cancels a transaction that was created with the [Charge](#endpoint-charge)
    // endpoint with a `delay_capture` value of `true`.
    // 
    // See [Delayed capture transactions](/articles/delayed-capture-transactions/)
    // for more information.
    rpc PostV2LocationsLocation_idTransactionsTransaction_idVoid(PostV2LocationsLocation_idTransactionsTransaction_idVoidRequest) returns (VoidTransactionResponse) {
      option (google.api.http) = {
        post: "/v2/locations/{location_id}/transactions/{transaction_id}/void"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package trello;

message GetActionsIdActionRequest {
    //  true or false
    string display = 1;
    //  true or false
    string entities = 2;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string fields = 3;
    // idAction
    string idAction = 4;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 5;
    //  true or false
    string member = 6;
    //  true or false
    string memberCreator = 7;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberCreator_fields = 8;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 9;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 10;
}

message PutActionsIdActionRequest {
    // Attributes of "Actions" to be updated.
    actions body = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteActionsIdActionRequest {
    // idAction
    string idAction = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetActionsIdActionBoardRequest {
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionBoardFieldRequest {
    // field
    string field = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionCardRequest {
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionCardFieldRequest {
    // field
    string field = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionDisplayRequest {
    // idAction
    string idAction = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetActionsIdActionEntitiesRequest {
    // idAction
    string idAction = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetActionsIdActionListRequest {
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string fields = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionListFieldRequest {
    // field
    string field = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionMemberRequest {
    // all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    string fields = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionMemberFieldRequest {
    // field
    string field = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionMemberCreatorRequest {
    // all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    string fields = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionMemberCreatorFieldRequest {
    // field
    string field = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionOrganizationRequest {
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string fields = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionOrganizationFieldRequest {
    // field
    string field = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutActionsIdActionTextRequest {
    // Attributes of "Actions Text" to be updated.
    actions_text body = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetActionsIdActionFieldRequest {
    // field
    string field = 1;
    // idAction
    string idAction = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBatchRequest {
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 1;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 2;
    // list of API v1 GET routes, not including the version prefix
    string urls = 3;
}

message PostBoardsRequest {
    // Attributes of "Boards" to be added.
    boards body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetBoardsIdBoardRequest {
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string action_fields = 1;
    //  true or false
    string action_member = 2;
    //  true or false
    string action_memberCreator = 3;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string action_memberCreator_fields = 4;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string action_member_fields = 5;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 6;
    //  true or false
    string actions_display = 7;
    //  true or false
    string actions_entities = 8;
    // One of: count, list or minimal
    string actions_format = 9;
    // a number from 0 to 1000
    string actions_limit = 10;
    // A date, null or lastView
    string actions_since = 11;
    // One of: mine or none
    string boardStars = 12;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string card_attachment_fields = 13;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string card_attachments = 14;
    // One of: all or none
    string card_checklists = 15;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 16;
    //  true or false
    string card_stickers = 17;
    // One of: all, closed, none, open or visible
    string cards = 18;
    // all or a comma-separated list of: idBoard, idCard, name or pos
    string checklist_fields = 19;
    // One of: all or none
    string checklists = 20;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 21;
    // board_id
    string idBoard = 22;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 23;
    // all or a comma-separated list of: color, idBoard, name or uses
    string label_fields = 24;
    // One of: all or none
    string labels = 25;
    // a number from 0 to 1000
    string labels_limit = 26;
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string list_fields = 27;
    // One of: all, closed, none or open
    string lists = 28;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 29;
    // One of: admins, all, none, normal or owners
    string members = 30;
    // One of: admins, all, none, normal or owners
    string membersInvited = 31;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string membersInvited_fields = 32;
    // all or a comma-separated list of: active, admin, deactivated, me or normal
    string memberships = 33;
    //  true or false
    string memberships_member = 34;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberships_member_fields = 35;
    //  true or false
    string myPrefs = 36;
    //  true or false
    string organization = 37;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string organization_fields = 38;
    // all or a comma-separated list of: active, admin, deactivated, me or normal
    string organization_memberships = 39;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 40;
}

message PutBoardsIdBoardRequest {
    // Attributes of "Boards" to be updated.
    boards body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardActionsRequest {
    // A date, or null
    string before = 1;
    //  true or false
    string display = 2;
    //  true or false
    string entities = 3;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string fields = 4;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string filter = 5;
    // One of: count, list or minimal
    string format = 6;
    // board_id
    string idBoard = 7;
    // Only return actions related to these model ids
    string idModels = 8;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 9;
    // a number from 0 to 1000
    string limit = 10;
    //  true or false
    string member = 11;
    //  true or false
    string memberCreator = 12;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberCreator_fields = 13;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 14;
    // Page * limit must be less than 1000
    string page = 15;
    // A date, null or lastView
    string since = 16;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 17;
}

message GetBoardsIdBoardBoardStarsRequest {
    // One of: mine or none
    string filter = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostBoardsIdBoardCalendarKeyGenerateRequest {
    // board_id
    string idBoard = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetBoardsIdBoardCardsRequest {
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 1;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string attachment_fields = 2;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string attachments = 3;
    // A date, or null
    string before = 4;
    //  true or false
    string checkItemStates = 5;
    // One of: all or none
    string checklists = 6;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 7;
    // One of: all, closed, none, open or visible
    string filter = 8;
    // board_id
    string idBoard = 9;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 10;
    // a number from 1 to 1000
    string limit = 11;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 12;
    //  true or false
    string members = 13;
    // A date, or null
    string since = 14;
    //  true or false
    string stickers = 15;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 16;
}

message GetBoardsIdBoardCardsFilterRequest {
    // filter
    string filter = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardCardsIdCardRequest {
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string action_fields = 1;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string action_memberCreator_fields = 2;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 3;
    //  true or false
    string actions_display = 4;
    //  true or false
    string actions_entities = 5;
    // a number from 0 to 1000
    string actions_limit = 6;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string attachment_fields = 7;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string attachments = 8;
    // all or a comma-separated list of: idCheckItem or state
    string checkItemState_fields = 9;
    //  true or false
    string checkItemStates = 10;
    // all or a comma-separated list of: idBoard, idCard, name or pos
    string checklist_fields = 11;
    // One of: all or none
    string checklists = 12;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 13;
    // board_id
    string idBoard = 14;
    // idCard
    string idCard = 15;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 16;
    //  true or false
    string labels = 17;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 18;
    //  true or false
    string members = 19;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 20;
}

message GetBoardsIdBoardChecklistsRequest {
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 1;
    // One of: all, closed, none, open or visible
    string cards = 2;
    // all or a comma-separated list of: name, nameData, pos, state or type
    string checkItem_fields = 3;
    // One of: all or none
    string checkItems = 4;
    // all or a comma-separated list of: idBoard, idCard, name or pos
    string fields = 5;
    // One of: all or none
    string filter = 6;
    // board_id
    string idBoard = 7;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 8;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 9;
}

message PostBoardsIdBoardChecklistsRequest {
    // Attributes of "Boards Checklists" to be added.
    boards_checklists body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardClosedRequest {
    // Attributes of "Boards Closed" to be updated.
    boards_closed body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardDeltasRequest {
    // board_id
    string idBoard = 1;
    // a number from -1 to Infinity
    string ixLastUpdate = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // A valid tag for subscribing
    string tags = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutBoardsIdBoardDescRequest {
    // Attributes of "Boards Desc" to be updated.
    boards_desc body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostBoardsIdBoardEmailKeyGenerateRequest {
    // board_id
    string idBoard = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PutBoardsIdBoardIdOrganizationRequest {
    // Attributes of "Boards Id Organization" to be updated.
    boards_idOrganization body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardLabelNamesBlueRequest {
    // Attributes of "Label Names Blue" to be updated.
    labelNames_blue body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardLabelNamesGreenRequest {
    // Attributes of "Label Names Green" to be updated.
    labelNames_green body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardLabelNamesOrangeRequest {
    // Attributes of "Label Names Orange" to be updated.
    labelNames_orange body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardLabelNamesPurpleRequest {
    // Attributes of "Label Names Purple" to be updated.
    labelNames_purple body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardLabelNamesRedRequest {
    // Attributes of "Label Names Red" to be updated.
    labelNames_red body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardLabelNamesYellowRequest {
    // Attributes of "Label Names Yellow" to be updated.
    labelNames_yellow body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardLabelsRequest {
    // all or a comma-separated list of: color, idBoard, name or uses
    string fields = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // a number from 0 to 1000
    string limit = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PostBoardsIdBoardLabelsRequest {
    // Attributes of "Boards Labels" to be added.
    boards_labels body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardLabelsIdLabelRequest {
    // all or a comma-separated list of: color, idBoard, name or uses
    string fields = 1;
    // board_id
    string idBoard = 2;
    // idLabel
    string idLabel = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message GetBoardsIdBoardListsRequest {
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 1;
    // One of: all, closed, none, open or visible
    string cards = 2;
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string fields = 3;
    // One of: all, closed, none or open
    string filter = 4;
    // board_id
    string idBoard = 5;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 6;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 7;
}

message PostBoardsIdBoardListsRequest {
    // Attributes of "Boards Lists" to be added.
    boards_lists body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardListsFilterRequest {
    // filter
    string filter = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostBoardsIdBoardMarkAsViewedRequest {
    // board_id
    string idBoard = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetBoardsIdBoardMembersRequest {
    // true or false ; works for premium organizations only.
    string activity = 1;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string fields = 2;
    // One of: admins, all, none, normal or owners
    string filter = 3;
    // board_id
    string idBoard = 4;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message PutBoardsIdBoardMembersRequest {
    // Attributes of "Boards Members" to be updated.
    boards_members body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardMembersFilterRequest {
    // filter
    string filter = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardMembersIdMemberRequest {
    // Attributes of "Boards Members" to be updated.
    boards_members body = 1;
    // board_id
    string idBoard = 2;
    // idMember
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteBoardsIdBoardMembersIdMemberRequest {
    // board_id
    string idBoard = 1;
    // idMember
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardMembersIdMemberCardsRequest {
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 1;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string attachment_fields = 2;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string attachments = 3;
    //  true or false
    string board = 4;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string board_fields = 5;
    //  true or false
    string checkItemStates = 6;
    // One of: all or none
    string checklists = 7;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 8;
    // One of: all, closed, none, open or visible
    string filter = 9;
    // board_id
    string idBoard = 10;
    // idMember
    string idMember = 11;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 12;
    //  true or false
    string list = 13;
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string list_fields = 14;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 15;
    //  true or false
    string members = 16;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 17;
}

message GetBoardsIdBoardMembersInvitedRequest {
    // all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    string fields = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardMembersInvitedFieldRequest {
    // field
    string field = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardMembershipsRequest {
    // all or a comma-separated list of: active, admin, deactivated, me or normal
    string filter = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    //  true or false
    string member = 4;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message GetBoardsIdBoardMembershipsIdMembershipRequest {
    // board_id
    string idBoard = 1;
    // idMembership
    string idMembership = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    //  true or false
    string member = 4;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message PutBoardsIdBoardMembershipsIdMembershipRequest {
    // Attributes of "Boards Memberships" to be updated.
    boards_memberships body = 1;
    // board_id
    string idBoard = 2;
    // idMembership
    string idMembership = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message GetBoardsIdBoardMyPrefsRequest {
    // board_id
    string idBoard = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PutBoardsIdBoardMyPrefsEmailPositionRequest {
    // Attributes of "My Prefs Email Position" to be updated.
    myPrefs_emailPosition body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardMyPrefsIdEmailListRequest {
    // Attributes of "My Prefs Id Email List" to be updated.
    myPrefs_idEmailList body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardMyPrefsShowListGuideRequest {
    // Attributes of "My Prefs Show List Guide" to be updated.
    myPrefs_showListGuide body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardMyPrefsShowSidebarRequest {
    // Attributes of "My Prefs Show Sidebar" to be updated.
    myPrefs_showSidebar body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardMyPrefsShowSidebarActivityRequest {
    // Attributes of "My Prefs Show Sidebar Activity" to be updated.
    myPrefs_showSidebarActivity body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardMyPrefsShowSidebarBoardActionsRequest {
    // Attributes of "My Prefs Show Sidebar Board Actions" to be updated.
    myPrefs_showSidebarBoardActions body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardMyPrefsShowSidebarMembersRequest {
    // Attributes of "My Prefs Show Sidebar Members" to be updated.
    myPrefs_showSidebarMembers body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardNameRequest {
    // Attributes of "Boards Name" to be updated.
    boards_name body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardOrganizationRequest {
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string fields = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardOrganizationFieldRequest {
    // field
    string field = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostBoardsIdBoardPowerUpsRequest {
    // Attributes of "Boards Power Ups" to be added.
    boards_powerUps body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteBoardsIdBoardPowerUpsPowerUpRequest {
    // board_id
    string idBoard = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // powerUp
    string powerUp = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsBackgroundRequest {
    // Attributes of "Prefs Background" to be updated.
    prefs_background body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsCalendarFeedEnabledRequest {
    // Attributes of "Prefs Calendar Feed Enabled" to be updated.
    prefs_calendarFeedEnabled body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsCardAgingRequest {
    // Attributes of "Prefs Card Aging" to be updated.
    prefs_cardAging body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsCardCoversRequest {
    // Attributes of "Prefs Card Covers" to be updated.
    prefs_cardCovers body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsCommentsRequest {
    // Attributes of "Prefs Comments" to be updated.
    prefs_comments body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsInvitationsRequest {
    // Attributes of "Prefs Invitations" to be updated.
    prefs_invitations body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsPermissionLevelRequest {
    // Attributes of "Prefs Permission Level" to be updated.
    prefs_permissionLevel body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsSelfJoinRequest {
    // Attributes of "Prefs Self Join" to be updated.
    prefs_selfJoin body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardPrefsVotingRequest {
    // Attributes of "Prefs Voting" to be updated.
    prefs_voting body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutBoardsIdBoardSubscribedRequest {
    // Attributes of "Boards Subscribed" to be updated.
    boards_subscribed body = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetBoardsIdBoardFieldRequest {
    // field
    string field = 1;
    // board_id
    string idBoard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostCardsRequest {
    // Attributes of "Cards" to be added.
    cards body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetCardsIdCardRequest {
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string action_fields = 1;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string action_memberCreator_fields = 2;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 3;
    //  true or false
    string actions_display = 4;
    //  true or false
    string actions_entities = 5;
    // a number from 0 to 1000
    string actions_limit = 6;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string attachment_fields = 7;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string attachments = 8;
    //  true or false
    string board = 9;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string board_fields = 10;
    // all or a comma-separated list of: idCheckItem or state
    string checkItemState_fields = 11;
    //  true or false
    string checkItemStates = 12;
    // all or a comma-separated list of: idBoard, idCard, name or pos
    string checklist_fields = 13;
    // One of: all or none
    string checklists = 14;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 15;
    // card id or shortlink
    string idCard = 16;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 17;
    //  true or false
    string list = 18;
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string list_fields = 19;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberVoted_fields = 20;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 21;
    //  true or false
    string members = 22;
    //  true or false
    string membersVoted = 23;
    // all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
    string sticker_fields = 24;
    //  true or false
    string stickers = 25;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 26;
}

message PutCardsIdCardRequest {
    // Attributes of "Cards" to be updated.
    cards body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteCardsIdCardRequest {
    // card id or shortlink
    string idCard = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetCardsIdCardActionsRequest {
    // A date, or null
    string before = 1;
    //  true or false
    string display = 2;
    //  true or false
    string entities = 3;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string fields = 4;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string filter = 5;
    // One of: count, list or minimal
    string format = 6;
    // card id or shortlink
    string idCard = 7;
    // Only return actions related to these model ids
    string idModels = 8;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 9;
    // a number from 0 to 1000
    string limit = 10;
    //  true or false
    string member = 11;
    //  true or false
    string memberCreator = 12;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberCreator_fields = 13;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 14;
    // Page * limit must be less than 1000
    string page = 15;
    // A date, null or lastView
    string since = 16;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 17;
}

message PostCardsIdCardActionsCommentsRequest {
    // Attributes of "Actions Comments" to be added.
    actions_comments body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardActionsIdActionCommentsRequest {
    // Attributes of "Cards Actions Comments" to be updated.
    cards_actions_comments body = 1;
    // idAction
    string idAction = 2;
    // card id or shortlink
    string idCard = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteCardsIdCardActionsIdActionCommentsRequest {
    // idAction
    string idAction = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardAttachmentsRequest {
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string fields = 1;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string filter = 2;
    // card id or shortlink
    string idCard = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PostCardsIdCardAttachmentsRequest {
    // Attributes of "Cards Attachments" to be added.
    cards_attachments body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardAttachmentsIdAttachmentRequest {
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string fields = 1;
    // idAttachment
    string idAttachment = 2;
    // card id or shortlink
    string idCard = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteCardsIdCardAttachmentsIdAttachmentRequest {
    // idAttachment
    string idAttachment = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardBoardRequest {
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardBoardFieldRequest {
    // field
    string field = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardCheckItemStatesRequest {
    // all or a comma-separated list of: idCheckItem or state
    string fields = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardChecklistIdChecklistCurrentCheckItemIdCheckItemRequest {
    // Attributes of "Cards Checklist Id Checklist Current Check Item" to be updated.
    cards_checklist_idChecklistCurrent_checkItem body = 1;
    // card id or shortlink
    string idCard = 2;
    // idCheckItem
    string idCheckItem = 3;
    // idChecklistCurrent
    string idChecklistCurrent = 4;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message PostCardsIdCardChecklistIdChecklistCheckItemRequest {
    // Attributes of "Cards Checklist Check Item" to be added.
    cards_checklist_checkItem body = 1;
    // card id or shortlink
    string idCard = 2;
    // idChecklist
    string idChecklist = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteCardsIdCardChecklistIdChecklistCheckItemIdCheckItemRequest {
    // card id or shortlink
    string idCard = 1;
    // idCheckItem
    string idCheckItem = 2;
    // idChecklist
    string idChecklist = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PostCardsIdCardChecklistIdChecklistCheckItemIdCheckItemConvertToCardRequest {
    // card id or shortlink
    string idCard = 1;
    // idCheckItem
    string idCheckItem = 2;
    // idChecklist
    string idChecklist = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemNameRequest {
    // Attributes of "Cards Checklist Check Item Name" to be updated.
    cards_checklist_checkItem_name body = 1;
    // card id or shortlink
    string idCard = 2;
    // idCheckItem
    string idCheckItem = 3;
    // idChecklist
    string idChecklist = 4;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemPosRequest {
    // Attributes of "Cards Checklist Check Item Pos" to be updated.
    cards_checklist_checkItem_pos body = 1;
    // card id or shortlink
    string idCard = 2;
    // idCheckItem
    string idCheckItem = 3;
    // idChecklist
    string idChecklist = 4;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemStateRequest {
    // Attributes of "Cards Checklist Check Item State" to be updated.
    cards_checklist_checkItem_state body = 1;
    // card id or shortlink
    string idCard = 2;
    // idCheckItem
    string idCheckItem = 3;
    // idChecklist
    string idChecklist = 4;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message GetCardsIdCardChecklistsRequest {
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 1;
    // One of: all, closed, none, open or visible
    string cards = 2;
    // all or a comma-separated list of: name, nameData, pos, state or type
    string checkItem_fields = 3;
    // One of: all or none
    string checkItems = 4;
    // all or a comma-separated list of: idBoard, idCard, name or pos
    string fields = 5;
    // One of: all or none
    string filter = 6;
    // card id or shortlink
    string idCard = 7;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 8;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 9;
}

message PostCardsIdCardChecklistsRequest {
    // Attributes of "Cards Checklists" to be added.
    cards_checklists body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteCardsIdCardChecklistsIdChecklistRequest {
    // card id or shortlink
    string idCard = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardClosedRequest {
    // Attributes of "Cards Closed" to be updated.
    cards_closed body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardDescRequest {
    // Attributes of "Cards Desc" to be updated.
    cards_desc body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardDueRequest {
    // Attributes of "Cards Due" to be updated.
    cards_due body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardIdAttachmentCoverRequest {
    // Attributes of "Cards Id Attachment Cover" to be updated.
    cards_idAttachmentCover body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardIdBoardRequest {
    // Attributes of "Cards Id Board" to be updated.
    cards_idBoard body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostCardsIdCardIdLabelsRequest {
    // Attributes of "Cards Id Labels" to be added.
    cards_idLabels body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteCardsIdCardIdLabelsIdLabelRequest {
    // card id or shortlink
    string idCard = 1;
    // idLabel
    string idLabel = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardIdListRequest {
    // Attributes of "Cards Id List" to be updated.
    cards_idList body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardIdMembersRequest {
    // Attributes of "Cards Id Members" to be updated.
    cards_idMembers body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostCardsIdCardIdMembersRequest {
    // Attributes of "Cards Id Members" to be added.
    cards_idMembers body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteCardsIdCardIdMembersIdMemberRequest {
    // card id or shortlink
    string idCard = 1;
    // idMember
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardLabelsRequest {
    // Attributes of "Cards Labels" to be updated.
    cards_labels body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostCardsIdCardLabelsRequest {
    // Attributes of "Cards Labels" to be added.
    cards_labels body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteCardsIdCardLabelsColorRequest {
    // color
    string color = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardListRequest {
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string fields = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardListFieldRequest {
    // field
    string field = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostCardsIdCardMarkAssociatedNotificationsReadRequest {
    // card id or shortlink
    string idCard = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetCardsIdCardMembersRequest {
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string fields = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardMembersVotedRequest {
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string fields = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostCardsIdCardMembersVotedRequest {
    // Attributes of "Cards Members Voted" to be added.
    cards_membersVoted body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteCardsIdCardMembersVotedIdMemberRequest {
    // card id or shortlink
    string idCard = 1;
    // idMember
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardNameRequest {
    // Attributes of "Cards Name" to be updated.
    cards_name body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardPosRequest {
    // Attributes of "Cards Pos" to be updated.
    cards_pos body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardStickersRequest {
    // all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
    string fields = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostCardsIdCardStickersRequest {
    // Attributes of "Cards Stickers" to be added.
    cards_stickers body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardStickersIdStickerRequest {
    // all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
    string fields = 1;
    // card id or shortlink
    string idCard = 2;
    // idSticker
    string idSticker = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutCardsIdCardStickersIdStickerRequest {
    // Attributes of "Cards Stickers" to be updated.
    cards_stickers body = 1;
    // card id or shortlink
    string idCard = 2;
    // idSticker
    string idSticker = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteCardsIdCardStickersIdStickerRequest {
    // card id or shortlink
    string idCard = 1;
    // idSticker
    string idSticker = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutCardsIdCardSubscribedRequest {
    // Attributes of "Cards Subscribed" to be updated.
    cards_subscribed body = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetCardsIdCardFieldRequest {
    // field
    string field = 1;
    // card id or shortlink
    string idCard = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostChecklistsRequest {
    // Attributes of "Checklists" to be added.
    checklists body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetChecklistsIdChecklistRequest {
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 1;
    // One of: all, closed, none, open or visible
    string cards = 2;
    // all or a comma-separated list of: name, nameData, pos, state or type
    string checkItem_fields = 3;
    // One of: all or none
    string checkItems = 4;
    // all or a comma-separated list of: idBoard, idCard, name or pos
    string fields = 5;
    // idChecklist
    string idChecklist = 6;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 7;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 8;
}

message PutChecklistsIdChecklistRequest {
    // Attributes of "Checklists" to be updated.
    checklists body = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteChecklistsIdChecklistRequest {
    // idChecklist
    string idChecklist = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetChecklistsIdChecklistBoardRequest {
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetChecklistsIdChecklistBoardFieldRequest {
    // field
    string field = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetChecklistsIdChecklistCardsRequest {
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 1;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string attachment_fields = 2;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string attachments = 3;
    // A date, or null
    string before = 4;
    //  true or false
    string checkItemStates = 5;
    // One of: all or none
    string checklists = 6;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 7;
    // One of: all, closed, none or open
    string filter = 8;
    // idChecklist
    string idChecklist = 9;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 10;
    // a number from 1 to 1000
    string limit = 11;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 12;
    //  true or false
    string members = 13;
    // A date, or null
    string since = 14;
    //  true or false
    string stickers = 15;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 16;
}

message GetChecklistsIdChecklistCardsFilterRequest {
    // filter
    string filter = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetChecklistsIdChecklistCheckItemsRequest {
    // all or a comma-separated list of: name, nameData, pos, state or type
    string fields = 1;
    // One of: all or none
    string filter = 2;
    // idChecklist
    string idChecklist = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PostChecklistsIdChecklistCheckItemsRequest {
    // Attributes of "Checklists Check Items" to be added.
    checklists_checkItems body = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetChecklistsIdChecklistCheckItemsIdCheckItemRequest {
    // all or a comma-separated list of: name, nameData, pos, state or type
    string fields = 1;
    // idCheckItem
    string idCheckItem = 2;
    // idChecklist
    string idChecklist = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteChecklistsIdChecklistCheckItemsIdCheckItemRequest {
    // idCheckItem
    string idCheckItem = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutChecklistsIdChecklistIdCardRequest {
    // Attributes of "Checklists Id Card" to be updated.
    checklists_idCard body = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutChecklistsIdChecklistNameRequest {
    // Attributes of "Checklists Name" to be updated.
    checklists_name body = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutChecklistsIdChecklistPosRequest {
    // Attributes of "Checklists Pos" to be updated.
    checklists_pos body = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetChecklistsIdChecklistFieldRequest {
    // field
    string field = 1;
    // idChecklist
    string idChecklist = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostLabelsRequest {
    // Attributes of "Labels" to be added.
    labels body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetLabelsIdLabelRequest {
    // all or a comma-separated list of: color, idBoard, name or uses
    string fields = 1;
    // idLabel
    string idLabel = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutLabelsIdLabelRequest {
    // Attributes of "Labels" to be updated.
    labels body = 1;
    // idLabel
    string idLabel = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteLabelsIdLabelRequest {
    // idLabel
    string idLabel = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetLabelsIdLabelBoardRequest {
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 1;
    // idLabel
    string idLabel = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetLabelsIdLabelBoardFieldRequest {
    // field
    string field = 1;
    // idLabel
    string idLabel = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutLabelsIdLabelColorRequest {
    // Attributes of "Labels Color" to be updated.
    labels_color body = 1;
    // idLabel
    string idLabel = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutLabelsIdLabelNameRequest {
    // Attributes of "Labels Name" to be updated.
    labels_name body = 1;
    // idLabel
    string idLabel = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostListsRequest {
    // Attributes of "Lists" to be added.
    lists body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetListsIdListRequest {
    //  true or false
    string board = 1;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string board_fields = 2;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 3;
    // One of: all, closed, none or open
    string cards = 4;
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string fields = 5;
    // idList
    string idList = 6;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 7;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 8;
}

message PutListsIdListRequest {
    // Attributes of "Lists" to be updated.
    lists body = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetListsIdListActionsRequest {
    // A date, or null
    string before = 1;
    //  true or false
    string display = 2;
    //  true or false
    string entities = 3;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string fields = 4;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string filter = 5;
    // One of: count, list or minimal
    string format = 6;
    // idList
    string idList = 7;
    // Only return actions related to these model ids
    string idModels = 8;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 9;
    // a number from 0 to 1000
    string limit = 10;
    //  true or false
    string member = 11;
    //  true or false
    string memberCreator = 12;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberCreator_fields = 13;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 14;
    // Page * limit must be less than 1000
    string page = 15;
    // A date, null or lastView
    string since = 16;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 17;
}

message PostListsIdListArchiveAllCardsRequest {
    // idList
    string idList = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetListsIdListBoardRequest {
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetListsIdListBoardFieldRequest {
    // field
    string field = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetListsIdListCardsRequest {
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 1;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string attachment_fields = 2;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string attachments = 3;
    // A date, or null
    string before = 4;
    //  true or false
    string checkItemStates = 5;
    // One of: all or none
    string checklists = 6;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 7;
    // One of: all, closed, none or open
    string filter = 8;
    // idList
    string idList = 9;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 10;
    // a number from 1 to 1000
    string limit = 11;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 12;
    //  true or false
    string members = 13;
    // A date, or null
    string since = 14;
    //  true or false
    string stickers = 15;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 16;
}

message PostListsIdListCardsRequest {
    // Attributes of "Lists Cards" to be added.
    lists_cards body = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetListsIdListCardsFilterRequest {
    // filter
    string filter = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutListsIdListClosedRequest {
    // Attributes of "Lists Closed" to be updated.
    lists_closed body = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutListsIdListIdBoardRequest {
    // Attributes of "Lists Id Board" to be updated.
    lists_idBoard body = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostListsIdListMoveAllCardsRequest {
    // Attributes of "Lists Move All Cards" to be added.
    lists_moveAllCards body = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutListsIdListNameRequest {
    // Attributes of "Lists Name" to be updated.
    lists_name body = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutListsIdListPosRequest {
    // Attributes of "Lists Pos" to be updated.
    lists_pos body = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutListsIdListSubscribedRequest {
    // Attributes of "Lists Subscribed" to be updated.
    lists_subscribed body = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetListsIdListFieldRequest {
    // field
    string field = 1;
    // idList
    string idList = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberRequest {
    // A date, or null
    string action_before = 1;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string action_fields = 2;
    // A date, null or lastView
    string action_since = 3;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 4;
    //  true or false
    string actions_display = 5;
    //  true or false
    string actions_entities = 6;
    // a number from 0 to 1000
    string actions_limit = 7;
    // One of: all, custom, default, none or premium
    string boardBackgrounds = 8;
    //  true or false
    string boardStars = 9;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string board_action_fields = 10;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string board_actions = 11;
    //  true or false
    string board_actions_display = 12;
    //  true or false
    string board_actions_entities = 13;
    // One of: count, list or minimal
    string board_actions_format = 14;
    // a number from 0 to 1000
    string board_actions_limit = 15;
    // A date, null or lastView
    string board_actions_since = 16;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string board_fields = 17;
    // One of: all, closed, none or open
    string board_lists = 18;
    // all or a comma-separated list of: active, admin, deactivated, me or normal
    string board_memberships = 19;
    //  true or false
    string board_organization = 20;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string board_organization_fields = 21;
    // all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    string boards = 22;
    // all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    string boardsInvited = 23;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string boardsInvited_fields = 24;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string card_attachment_fields = 25;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string card_attachments = 26;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 27;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string card_member_fields = 28;
    //  true or false
    string card_members = 29;
    //  true or false
    string card_stickers = 30;
    // One of: all, closed, none, open or visible
    string cards = 31;
    // One of: all or none
    string customBoardBackgrounds = 32;
    // One of: all or none
    string customEmoji = 33;
    // One of: all or none
    string customStickers = 34;
    // all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    string fields = 35;
    // idMember or username
    string idMember = 36;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 37;
    // An id, or null
    string notification_before = 38;
    // all or a comma-separated list of: data, date, idMemberCreator, type or unread
    string notification_fields = 39;
    //  true or false
    string notification_memberCreator = 40;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string notification_memberCreator_fields = 41;
    // An id, or null
    string notification_since = 42;
    // all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
    string notifications = 43;
    //  true or false
    string notifications_display = 44;
    //  true or false
    string notifications_entities = 45;
    // a number from 1 to 1000
    string notifications_limit = 46;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string organization_fields = 47;
    //  true or false
    string organization_paid_account = 48;
    // One of: all, members, none or public
    string organizations = 49;
    // One of: all, members, none or public
    string organizationsInvited = 50;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string organizationsInvited_fields = 51;
    //  true or false
    string paid_account = 52;
    //  true or false
    string savedSearches = 53;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 54;
    // One of: all or none
    string tokens = 55;
}

message PutMembersIdMemberRequest {
    // Attributes of "Members" to be updated.
    members body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberActionsRequest {
    // A date, or null
    string before = 1;
    //  true or false
    string display = 2;
    //  true or false
    string entities = 3;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string fields = 4;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string filter = 5;
    // One of: count, list or minimal
    string format = 6;
    // idMember or username
    string idMember = 7;
    // Only return actions related to these model ids
    string idModels = 8;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 9;
    // a number from 0 to 1000
    string limit = 10;
    //  true or false
    string member = 11;
    //  true or false
    string memberCreator = 12;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberCreator_fields = 13;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 14;
    // Page * limit must be less than 1000
    string page = 15;
    // A date, null or lastView
    string since = 16;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 17;
}

message PostMembersIdMemberAvatarRequest {
    // Attributes of "Members Avatar" to be added.
    members_avatar body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberAvatarSourceRequest {
    // Attributes of "Members Avatar Source" to be updated.
    members_avatarSource body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberBioRequest {
    // Attributes of "Members Bio" to be updated.
    members_bio body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberBoardBackgroundsRequest {
    // One of: all, custom, default, none or premium
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostMembersIdMemberBoardBackgroundsRequest {
    // Attributes of "Members Board Backgrounds" to be added.
    members_boardBackgrounds body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberBoardBackgroundsIdBoardBackgroundRequest {
    // all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
    string fields = 1;
    // idBoardBackground
    string idBoardBackground = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutMembersIdMemberBoardBackgroundsIdBoardBackgroundRequest {
    // Attributes of "Members Board Backgrounds" to be updated.
    members_boardBackgrounds body = 1;
    // idBoardBackground
    string idBoardBackground = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteMembersIdMemberBoardBackgroundsIdBoardBackgroundRequest {
    // idBoardBackground
    string idBoardBackground = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberBoardStarsRequest {
    // idMember or username
    string idMember = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PostMembersIdMemberBoardStarsRequest {
    // Attributes of "Members Board Stars" to be added.
    members_boardStars body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberBoardStarsIdBoardStarRequest {
    // idBoardStar
    string idBoardStar = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberBoardStarsIdBoardStarRequest {
    // Attributes of "Members Board Stars" to be updated.
    members_boardStars body = 1;
    // idBoardStar
    string idBoardStar = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteMembersIdMemberBoardStarsIdBoardStarRequest {
    // idBoardStar
    string idBoardStar = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberBoardStarsIdBoardStarIdBoardRequest {
    // Attributes of "Members Board Stars Id Board" to be updated.
    members_boardStars_idBoard body = 1;
    // idBoardStar
    string idBoardStar = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutMembersIdMemberBoardStarsIdBoardStarPosRequest {
    // Attributes of "Members Board Stars Pos" to be updated.
    members_boardStars_pos body = 1;
    // idBoardStar
    string idBoardStar = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message GetMembersIdMemberBoardsRequest {
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string action_fields = 1;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 2;
    //  true or false
    string actions_entities = 3;
    // One of: count, list or minimal
    string actions_format = 4;
    // a number from 0 to 1000
    string actions_limit = 5;
    // A date, null or lastView
    string actions_since = 6;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 7;
    // all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    string filter = 8;
    // idMember or username
    string idMember = 9;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 10;
    // One of: all, closed, none or open
    string lists = 11;
    // all or a comma-separated list of: active, admin, deactivated, me or normal
    string memberships = 12;
    //  true or false
    string organization = 13;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string organization_fields = 14;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 15;
}

message GetMembersIdMemberBoardsFilterRequest {
    // filter
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberBoardsInvitedRequest {
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberBoardsInvitedFieldRequest {
    // field
    string field = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberCardsRequest {
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 1;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string attachment_fields = 2;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string attachments = 3;
    // A date, or null
    string before = 4;
    //  true or false
    string checkItemStates = 5;
    // One of: all or none
    string checklists = 6;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 7;
    // One of: all, closed, none, open or visible
    string filter = 8;
    // idMember or username
    string idMember = 9;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 10;
    // a number from 1 to 1000
    string limit = 11;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 12;
    //  true or false
    string members = 13;
    // A date, or null
    string since = 14;
    //  true or false
    string stickers = 15;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 16;
}

message GetMembersIdMemberCardsFilterRequest {
    // filter
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberCustomBoardBackgroundsRequest {
    // One of: all or none
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostMembersIdMemberCustomBoardBackgroundsRequest {
    // Attributes of "Members Custom Board Backgrounds" to be added.
    members_customBoardBackgrounds body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberCustomBoardBackgroundsIdBoardBackgroundRequest {
    // all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
    string fields = 1;
    // idBoardBackground
    string idBoardBackground = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutMembersIdMemberCustomBoardBackgroundsIdBoardBackgroundRequest {
    // Attributes of "Members Custom Board Backgrounds" to be updated.
    members_customBoardBackgrounds body = 1;
    // idBoardBackground
    string idBoardBackground = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteMembersIdMemberCustomBoardBackgroundsIdBoardBackgroundRequest {
    // idBoardBackground
    string idBoardBackground = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberCustomEmojiRequest {
    // One of: all or none
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostMembersIdMemberCustomEmojiRequest {
    // Attributes of "Members Custom Emoji" to be added.
    members_customEmoji body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberCustomEmojiIdCustomEmojiRequest {
    // all or a comma-separated list of: name or url
    string fields = 1;
    // idCustomEmoji
    string idCustomEmoji = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message GetMembersIdMemberCustomStickersRequest {
    // One of: all or none
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostMembersIdMemberCustomStickersRequest {
    // Attributes of "Members Custom Stickers" to be added.
    members_customStickers body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberCustomStickersIdCustomStickerRequest {
    // all or a comma-separated list of: scaled or url
    string fields = 1;
    // idCustomSticker
    string idCustomSticker = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteMembersIdMemberCustomStickersIdCustomStickerRequest {
    // idCustomSticker
    string idCustomSticker = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberDeltasRequest {
    // idMember or username
    string idMember = 1;
    // a number from -1 to Infinity
    string ixLastUpdate = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // A valid tag for subscribing
    string tags = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutMembersIdMemberFullNameRequest {
    // Attributes of "Members Full Name" to be updated.
    members_fullName body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberInitialsRequest {
    // Attributes of "Members Initials" to be updated.
    members_initials body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberNotificationsRequest {
    // An id, or null
    string before = 1;
    //  true or false
    string display = 2;
    //  true or false
    string entities = 3;
    // all or a comma-separated list of: data, date, idMemberCreator, type or unread
    string fields = 4;
    // all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
    string filter = 5;
    // idMember or username
    string idMember = 6;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 7;
    // a number from 1 to 1000
    string limit = 8;
    //  true or false
    string memberCreator = 9;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberCreator_fields = 10;
    // a number from 0 to 100
    string page = 11;
    // One of: all, read or unread
    string read_filter = 12;
    // An id, or null
    string since = 13;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 14;
}

message GetMembersIdMemberNotificationsFilterRequest {
    // filter
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostMembersIdMemberOneTimeMessagesDismissedRequest {
    // Attributes of "Members One Time Messages Dismissed" to be added.
    members_oneTimeMessagesDismissed body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberOrganizationsRequest {
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string fields = 1;
    // One of: all, members, none or public
    string filter = 2;
    // idMember or username
    string idMember = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    //  true or false
    string paid_account = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message GetMembersIdMemberOrganizationsFilterRequest {
    // filter
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberOrganizationsInvitedRequest {
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string fields = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberOrganizationsInvitedFieldRequest {
    // field
    string field = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberPrefsColorBlindRequest {
    // Attributes of "Prefs Color Blind" to be updated.
    prefs_colorBlind body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberPrefsLocaleRequest {
    // Attributes of "Prefs Locale" to be updated.
    prefs_locale body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberPrefsMinutesBetweenSummariesRequest {
    // Attributes of "Prefs Minutes Between Summaries" to be updated.
    prefs_minutesBetweenSummaries body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberSavedSearchesRequest {
    // idMember or username
    string idMember = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PostMembersIdMemberSavedSearchesRequest {
    // Attributes of "Members Saved Searches" to be added.
    members_savedSearches body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberSavedSearchesIdSavedSearchRequest {
    // idMember or username
    string idMember = 1;
    // idSavedSearch
    string idSavedSearch = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberSavedSearchesIdSavedSearchRequest {
    // Attributes of "Members Saved Searches" to be updated.
    members_savedSearches body = 1;
    // idMember or username
    string idMember = 2;
    // idSavedSearch
    string idSavedSearch = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteMembersIdMemberSavedSearchesIdSavedSearchRequest {
    // idMember or username
    string idMember = 1;
    // idSavedSearch
    string idSavedSearch = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberSavedSearchesIdSavedSearchNameRequest {
    // Attributes of "Members Saved Searches Name" to be updated.
    members_savedSearches_name body = 1;
    // idMember or username
    string idMember = 2;
    // idSavedSearch
    string idSavedSearch = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutMembersIdMemberSavedSearchesIdSavedSearchPosRequest {
    // Attributes of "Members Saved Searches Pos" to be updated.
    members_savedSearches_pos body = 1;
    // idMember or username
    string idMember = 2;
    // idSavedSearch
    string idSavedSearch = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutMembersIdMemberSavedSearchesIdSavedSearchQueryRequest {
    // Attributes of "Members Saved Searches Query" to be updated.
    members_savedSearches_query body = 1;
    // idMember or username
    string idMember = 2;
    // idSavedSearch
    string idSavedSearch = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message GetMembersIdMemberTokensRequest {
    // One of: all or none
    string filter = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutMembersIdMemberUsernameRequest {
    // Attributes of "Members Username" to be updated.
    members_username body = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetMembersIdMemberFieldRequest {
    // field
    string field = 1;
    // idMember or username
    string idMember = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostNotificationsAllReadRequest {
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 1;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 2;
}

message GetNotificationsIdNotificationRequest {
    //  true or false
    string board = 1;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string board_fields = 2;
    //  true or false
    string card = 3;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 4;
    //  true or false
    string display = 5;
    //  true or false
    string entities = 6;
    // all or a comma-separated list of: data, date, idMemberCreator, type or unread
    string fields = 7;
    // idNotification
    string idNotification = 8;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 9;
    //  true or false
    string list = 10;
    //  true or false
    string member = 11;
    //  true or false
    string memberCreator = 12;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberCreator_fields = 13;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 14;
    //  true or false
    string organization = 15;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string organization_fields = 16;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 17;
}

message PutNotificationsIdNotificationRequest {
    // Attributes of "Notifications" to be updated.
    notifications body = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationBoardRequest {
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationBoardFieldRequest {
    // field
    string field = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationCardRequest {
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationCardFieldRequest {
    // field
    string field = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationDisplayRequest {
    // idNotification
    string idNotification = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetNotificationsIdNotificationEntitiesRequest {
    // idNotification
    string idNotification = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetNotificationsIdNotificationListRequest {
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string fields = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationListFieldRequest {
    // field
    string field = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationMemberRequest {
    // all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    string fields = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationMemberFieldRequest {
    // field
    string field = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationMemberCreatorRequest {
    // all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    string fields = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationMemberCreatorFieldRequest {
    // field
    string field = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationOrganizationRequest {
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string fields = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationOrganizationFieldRequest {
    // field
    string field = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutNotificationsIdNotificationUnreadRequest {
    // Attributes of "Notifications Unread" to be updated.
    notifications_unread body = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetNotificationsIdNotificationFieldRequest {
    // field
    string field = 1;
    // idNotification
    string idNotification = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostOrganizationsRequest {
    // Attributes of "Organizations" to be added.
    organizations body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetOrganizationsIdOrgRequest {
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string action_fields = 1;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 2;
    //  true or false
    string actions_display = 3;
    //  true or false
    string actions_entities = 4;
    // a number from 0 to 1000
    string actions_limit = 5;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string board_action_fields = 6;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string board_actions = 7;
    //  true or false
    string board_actions_display = 8;
    //  true or false
    string board_actions_entities = 9;
    // One of: count, list or minimal
    string board_actions_format = 10;
    // a number from 0 to 1000
    string board_actions_limit = 11;
    // A date, null or lastView
    string board_actions_since = 12;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string board_fields = 13;
    // One of: all, closed, none or open
    string board_lists = 14;
    // all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    string boards = 15;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string fields = 16;
    // idOrg or name
    string idOrg = 17;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 18;
    // true or false ; works for premium organizations only.
    string member_activity = 19;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 20;
    // One of: admins, all, none, normal or owners
    string members = 21;
    // One of: admins, all, none, normal or owners
    string membersInvited = 22;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string membersInvited_fields = 23;
    // all or a comma-separated list of: active, admin, deactivated, me or normal
    string memberships = 24;
    //  true or false
    string memberships_member = 25;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberships_member_fields = 26;
    //  true or false
    string paid_account = 27;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 28;
}

message PutOrganizationsIdOrgRequest {
    // Attributes of "Organizations" to be updated.
    organizations body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteOrganizationsIdOrgRequest {
    // idOrg or name
    string idOrg = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetOrganizationsIdOrgActionsRequest {
    // A date, or null
    string before = 1;
    //  true or false
    string display = 2;
    //  true or false
    string entities = 3;
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string fields = 4;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string filter = 5;
    // One of: count, list or minimal
    string format = 6;
    // Only return actions related to these model ids
    string idModels = 7;
    // idOrg or name
    string idOrg = 8;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 9;
    // a number from 0 to 1000
    string limit = 10;
    //  true or false
    string member = 11;
    //  true or false
    string memberCreator = 12;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string memberCreator_fields = 13;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 14;
    // Page * limit must be less than 1000
    string page = 15;
    // A date, null or lastView
    string since = 16;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 17;
}

message GetOrganizationsIdOrgBoardsRequest {
    // all or a comma-separated list of: data, date, idMemberCreator or type
    string action_fields = 1;
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 2;
    //  true or false
    string actions_entities = 3;
    // One of: count, list or minimal
    string actions_format = 4;
    // a number from 0 to 1000
    string actions_limit = 5;
    // A date, null or lastView
    string actions_since = 6;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string fields = 7;
    // all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    string filter = 8;
    // idOrg or name
    string idOrg = 9;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 10;
    // One of: all, closed, none or open
    string lists = 11;
    // all or a comma-separated list of: active, admin, deactivated, me or normal
    string memberships = 12;
    //  true or false
    string organization = 13;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string organization_fields = 14;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 15;
}

message GetOrganizationsIdOrgBoardsFilterRequest {
    // filter
    string filter = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetOrganizationsIdOrgDeltasRequest {
    // idOrg or name
    string idOrg = 1;
    // a number from -1 to Infinity
    string ixLastUpdate = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // A valid tag for subscribing
    string tags = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutOrganizationsIdOrgDescRequest {
    // Attributes of "Organizations Desc" to be updated.
    organizations_desc body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgDisplayNameRequest {
    // Attributes of "Organizations Display Name" to be updated.
    organizations_displayName body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PostOrganizationsIdOrgLogoRequest {
    // Attributes of "Organizations Logo" to be added.
    organizations_logo body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteOrganizationsIdOrgLogoRequest {
    // idOrg or name
    string idOrg = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetOrganizationsIdOrgMembersRequest {
    // true or false ; works for premium organizations only.
    string activity = 1;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string fields = 2;
    // One of: admins, all, none, normal or owners
    string filter = 3;
    // idOrg or name
    string idOrg = 4;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message PutOrganizationsIdOrgMembersRequest {
    // Attributes of "Organizations Members" to be updated.
    organizations_members body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetOrganizationsIdOrgMembersFilterRequest {
    // filter
    string filter = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgMembersIdMemberRequest {
    // Attributes of "Organizations Members" to be updated.
    organizations_members body = 1;
    // idMember
    string idMember = 2;
    // idOrg or name
    string idOrg = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message DeleteOrganizationsIdOrgMembersIdMemberRequest {
    // idMember
    string idMember = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteOrganizationsIdOrgMembersIdMemberAllRequest {
    // idMember
    string idMember = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetOrganizationsIdOrgMembersIdMemberCardsRequest {
    // all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    string actions = 1;
    // all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    string attachment_fields = 2;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string attachments = 3;
    //  true or false
    string board = 4;
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string board_fields = 5;
    //  true or false
    string checkItemStates = 6;
    // One of: all or none
    string checklists = 7;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string fields = 8;
    // One of: all, closed, none, open or visible
    string filter = 9;
    // idMember
    string idMember = 10;
    // idOrg or name
    string idOrg = 11;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 12;
    //  true or false
    string list = 13;
    // all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    string list_fields = 14;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 15;
    //  true or false
    string members = 16;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 17;
}

message PutOrganizationsIdOrgMembersIdMemberDeactivatedRequest {
    // Attributes of "Organizations Members Deactivated" to be updated.
    organizations_members_deactivated body = 1;
    // idMember
    string idMember = 2;
    // idOrg or name
    string idOrg = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message GetOrganizationsIdOrgMembersInvitedRequest {
    // all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    string fields = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetOrganizationsIdOrgMembersInvitedFieldRequest {
    // field
    string field = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetOrganizationsIdOrgMembershipsRequest {
    // all or a comma-separated list of: active, admin, deactivated, me or normal
    string filter = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    //  true or false
    string member = 4;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message GetOrganizationsIdOrgMembershipsIdMembershipRequest {
    // idMembership
    string idMembership = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    //  true or false
    string member = 4;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 5;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 6;
}

message PutOrganizationsIdOrgMembershipsIdMembershipRequest {
    // Attributes of "Organizations Memberships" to be updated.
    organizations_memberships body = 1;
    // idMembership
    string idMembership = 2;
    // idOrg or name
    string idOrg = 3;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 4;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 5;
}

message PutOrganizationsIdOrgNameRequest {
    // Attributes of "Organizations Name" to be updated.
    organizations_name body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgPrefsAssociatedDomainRequest {
    // Attributes of "Prefs Associated Domain" to be updated.
    prefs_associatedDomain body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteOrganizationsIdOrgPrefsAssociatedDomainRequest {
    // idOrg or name
    string idOrg = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PutOrganizationsIdOrgPrefsBoardVisibilityRestrictOrgRequest {
    // Attributes of "Prefs Board Visibility Restrict" to be updated.
    prefs_boardVisibilityRestrict body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgPrefsBoardVisibilityRestrictPrivateRequest {
    // Attributes of "Prefs Board Visibility Restrict" to be updated.
    prefs_boardVisibilityRestrict body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgPrefsBoardVisibilityRestrictPublicRequest {
    // Attributes of "Prefs Board Visibility Restrict" to be updated.
    prefs_boardVisibilityRestrict body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgPrefsExternalMembersDisabledRequest {
    // Attributes of "Prefs External Members Disabled" to be updated.
    prefs_externalMembersDisabled body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgPrefsGoogleAppsVersionRequest {
    // Attributes of "Prefs Google Apps Version" to be updated.
    prefs_googleAppsVersion body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgPrefsOrgInviteRestrictRequest {
    // Attributes of "Prefs Org Invite Restrict" to be updated.
    prefs_orgInviteRestrict body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteOrganizationsIdOrgPrefsOrgInviteRestrictRequest {
    // idOrg or name
    string idOrg = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
    // An email address with optional expansion tokens
    string value = 4;
}

message PutOrganizationsIdOrgPrefsPermissionLevelRequest {
    // Attributes of "Prefs Permission Level" to be updated.
    prefs_permissionLevel body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutOrganizationsIdOrgWebsiteRequest {
    // Attributes of "Organizations Website" to be updated.
    organizations_website body = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetOrganizationsIdOrgFieldRequest {
    // field
    string field = 1;
    // idOrg or name
    string idOrg = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetSearchRequest {
    // all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    string board_fields = 1;
    // a number from 1 to 1000
    string boards_limit = 2;
    // A boolean value or &quot;cover&quot; for only card cover attachments
    string card_attachments = 3;
    //  true or false
    string card_board = 4;
    // all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    string card_fields = 5;
    //  true or false
    string card_list = 6;
    //  true or false
    string card_members = 7;
    //  true or false
    string card_stickers = 8;
    // a number from 1 to 1000
    string cards_limit = 9;
    // a number from 0 to 100
    string cards_page = 10;
    // A comma-separated list of objectIds, 24-character hex strings
    string idBoards = 11;
    // A comma-separated list of objectIds, 24-character hex strings
    string idCards = 12;
    // A comma-separated list of objectIds, 24-character hex strings
    string idOrganizations = 13;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 14;
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 15;
    // a number from 1 to 1000
    string members_limit = 16;
    // all or a comma-separated list of: actions, boards, cards, members or organizations
    string modelTypes = 17;
    // all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    string organization_fields = 18;
    // a number from 1 to 1000
    string organizations_limit = 19;
    //  true or false
    string partial = 20;
    // a string with a length from 1 to 16384
    string query = 21;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 22;
}

message GetSearchMembersRequest {
    // An id, or null
    string idBoard = 1;
    // An id, or null
    string idOrganization = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // a number from 1 to 20
    string limit = 4;
    // A boolean
    string onlyOrgMembers = 5;
    // a string with a length from 1 to 16384
    string query = 6;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 7;
}

message PostSessionsRequest {
    // Attributes of "Sessions" to be added.
    sessions body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetSessionsSocketRequest {
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 1;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 2;
}

message PutSessionsIdSessionRequest {
    // Attributes of "Sessions" to be updated.
    sessions body = 1;
    // idSession
    string idSession = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutSessionsIdSessionStatusRequest {
    // Attributes of "Sessions Status" to be updated.
    sessions_status body = 1;
    // idSession
    string idSession = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetTokensTokenRequest {
    // all or a comma-separated list of: dateCreated, dateExpires, idMember, identifier or permissions
    string fields = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
    //  true or false
    string webhooks = 4;
}

message DeleteTokensTokenRequest {
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 1;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 2;
}

message GetTokensTokenMemberRequest {
    // all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    string fields = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetTokensTokenMemberFieldRequest {
    // field
    string field = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetTokensTokenWebhooksRequest {
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 1;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 2;
}

message PutTokensTokenWebhooksRequest {
    // Attributes of "Tokens Webhooks" to be updated.
    tokens_webhooks body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PostTokensTokenWebhooksRequest {
    // Attributes of "Tokens Webhooks" to be added.
    tokens_webhooks body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetTokensTokenWebhooksIdWebhookRequest {
    // idWebhook
    string idWebhook = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message DeleteTokensTokenWebhooksIdWebhookRequest {
    // idWebhook
    string idWebhook = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetTokensTokenFieldRequest {
    // field
    string field = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetTypesIdRequest {
    // id
    string id = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PostWebhooksRequest {
    // Attributes of "Webhooks" to be added.
    webhooks body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PutWebhooksRequest {
    // Attributes of "Webhooks" to be updated.
    webhooks body = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message GetWebhooksIdWebhookRequest {
    // idWebhook
    string idWebhook = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PutWebhooksIdWebhookRequest {
    // Attributes of "Webhooks" to be updated.
    webhooks body = 1;
    // idWebhook
    string idWebhook = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message DeleteWebhooksIdWebhookRequest {
    // idWebhook
    string idWebhook = 1;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 2;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 3;
}

message PutWebhooksIdWebhookActiveRequest {
    // Attributes of "Webhooks Active" to be updated.
    webhooks_active body = 1;
    // idWebhook
    string idWebhook = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutWebhooksIdWebhookCallbackURLRequest {
    // Attributes of "Webhooks Callback Url" to be updated.
    webhooks_callbackURL body = 1;
    // idWebhook
    string idWebhook = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutWebhooksIdWebhookDescriptionRequest {
    // Attributes of "Webhooks Description" to be updated.
    webhooks_description body = 1;
    // idWebhook
    string idWebhook = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message PutWebhooksIdWebhookIdModelRequest {
    // Attributes of "Webhooks Id Model" to be updated.
    webhooks_idModel body = 1;
    // idWebhook
    string idWebhook = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message GetWebhooksIdWebhookFieldRequest {
    // field
    string field = 1;
    // idWebhook
    string idWebhook = 2;
    // <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a>
    string key = 3;
    // <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a>
    string token = 4;
}

message Actions {
    // a string with a length from 1 to 16384
    string text = 1;
}

message Actions_comments {
    // a string with a length from 1 to 16384
    string text = 1;
}

message Actions_text {
    // a string with a length from 1 to 16384
    string value = 1;
}

message Boards {
    //  true or false
    string closed = 1;
    // a string with a length from 0 to 16384
    string desc = 2;
    // The id of the board to copy into the new board
    string idBoardSource = 3;
    // The id or name of the organization to add the board to.
    string idOrganization = 4;
    // Components of the source board to copy.
    string keepFromSource = 5;
    // a string with a length from 0 to 16384
    string labelNames/blue = 6;
    // a string with a length from 0 to 16384
    string labelNames/green = 7;
    // a string with a length from 0 to 16384
    string labelNames/orange = 8;
    // a string with a length from 0 to 16384
    string labelNames/purple = 9;
    // a string with a length from 0 to 16384
    string labelNames/red = 10;
    // a string with a length from 0 to 16384
    string labelNames/yellow = 11;
    // a string with a length from 1 to 16384
    string name = 12;
    // all or a comma-separated list of: calendar, cardAging, recap or voting
    string powerUps = 13;
    // A standard background name, or the id of a custom background
    string prefs/background = 14;
    //  true or false
    string prefs/calendarFeedEnabled = 15;
    // One of: pirate or regular
    string prefs/cardAging = 16;
    //  true or false
    string prefs/cardCovers = 17;
    // One of: disabled, members, observers, org or public
    string prefs/comments = 18;
    // One of: admins or members
    string prefs/invitations = 19;
    // One of: org, private or public
    string prefs/permissionLevel = 20;
    //  true or false
    string prefs/selfJoin = 21;
    // One of: disabled, members, observers, org or public
    string prefs/voting = 22;
    // a string with a length from 0 to 16384
    string prefs_background = 23;
    // One of: pirate or regular
    string prefs_cardAging = 24;
    //  true or false
    string prefs_cardCovers = 25;
    // One of: disabled, members, observers, org or public
    string prefs_comments = 26;
    // One of: admins or members
    string prefs_invitations = 27;
    // One of: org, private or public
    string prefs_permissionLevel = 28;
    //  true or false
    string prefs_selfJoin = 29;
    // One of: disabled, members, observers, org or public
    string prefs_voting = 30;
    //  true or false
    string subscribed = 31;
}

message Boards_checklists {
    // a string with a length from 1 to 16384
    string name = 1;
}

message Boards_closed {
    //  true or false
    string value = 1;
}

message Boards_desc {
    // a string with a length from 0 to 16384
    string value = 1;
}

message Boards_idOrganization {
    // a string with a length from 0 to 16384
    string value = 1;
}

message Boards_labels {
    // A valid label color or null
    string color = 1;
    // a string with a length from 0 to 16384
    string name = 2;
}

message Boards_lists {
    // a string with a length from 1 to 16384
    string name = 1;
    // A position. top , bottom , or a positive number.
    string pos = 2;
}

message Boards_members {
    // An email address
    string email = 1;
    // A string with a length of at least 1.  Cannot begin or end with a space.
    string fullName = 2;
    // One of: admin, normal or observer
    string type = 3;
}

message Boards_memberships {
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 1;
    // One of: admin, normal or observer
    string type = 2;
}

message Boards_name {
    // a string with a length from 1 to 16384
    string value = 1;
}

message Boards_powerUps {
    // One of: calendar, cardAging, recap or voting
    string value = 1;
}

message Boards_subscribed {
    //  true or false
    string value = 1;
}

message Cards {
    //  true or false
    string closed = 1;
    // a string with a length from 0 to 16384
    string desc = 2;
    // A date, or null
    string due = 3;
    // A file
    string fileSource = 4;
    // Id of the image attachment of this card to use as its cover, or null for no cover
    string idAttachmentCover = 5;
    // id of the board the card should be moved to
    string idBoard = 6;
    // The id of the card to copy into a new card.
    string idCardSource = 7;
    // A comma-separated list of objectIds, 24-character hex strings
    string idLabels = 8;
    // id of the list that the card should be added to
    string idList = 9;
    // A comma-separated list of objectIds, 24-character hex strings
    string idMembers = 10;
    // Properties of the card to copy over from the source.
    string keepFromSource = 11;
    // all or a comma-separated list of: blue, green, orange, purple, red or yellow
    string labels = 12;
    // The name of the new card.  It isn&#39;t required if the name is being copied from provided by a URL, file or card that is being copied.
    string name = 13;
    // A position. top , bottom , or a positive number.
    string pos = 14;
    //  true or false
    string subscribed = 15;
    // A URL starting with http:// or https:// or null
    string urlSource = 16;
}

message Cards_actions_comments {
    // a string with a length from 1 to 16384
    string text = 1;
}

message Cards_attachments {
    // A file
    string file = 1;
    // a string with a length from 0 to 256
    string mimeType = 2;
    // a string with a length from 0 to 256
    string name = 3;
    // A URL starting with http:// or https:// or null
    string url = 4;
}

message Cards_checklist_checkItem {
    // a string with a length from 1 to 16384
    string name = 1;
    // A position. top , bottom , or a positive number.
    string pos = 2;
}

message Cards_checklist_checkItem_name {
    // a string with a length from 1 to 16384
    string value = 1;
}

message Cards_checklist_checkItem_pos {
    // A position. top , bottom , or a positive number.
    string value = 1;
}

message Cards_checklist_checkItem_state {
    // One of: complete, false, incomplete or true
    string value = 1;
}

message Cards_checklist_idChecklistCurrent_checkItem {
    // An id, or null
    string idChecklist = 1;
    // a string with a length from 1 to 16384
    string name = 2;
    // A position. top , bottom , or a positive number.
    string pos = 3;
    // One of: complete, false, incomplete or true
    string state = 4;
}

message Cards_checklists {
    // The id of the source checklist to copy into a new checklist.
    string idChecklistSource = 1;
    // a string with a length from 0 to 16384
    string name = 2;
    // The id of the checklist to add to the card, or null to create a new one.
    string value = 3;
}

message Cards_closed {
    //  true or false
    string value = 1;
}

message Cards_desc {
    // a string with a length from 0 to 16384
    string value = 1;
}

message Cards_due {
    // A date, or null
    string value = 1;
}

message Cards_idAttachmentCover {
    // Id of the image attachment of this card to use as its cover, or null for no cover
    string value = 1;
}

message Cards_idBoard {
    // id of the list that the card should be moved to on the new board
    string idList = 1;
    // id of the board the card should be moved to
    string value = 2;
}

message Cards_idLabels {
    // The id of the label to add
    string value = 1;
}

message Cards_idList {
    // id of the list the card should be moved to
    string value = 1;
}

message Cards_idMembers {
    // The id of the member to add to the card
    string value = 1;
}

message Cards_labels {
    // A valid label color or null
    string color = 1;
    // a string with a length from 0 to 16384
    string name = 2;
    // all or a comma-separated list of: blue, green, orange, purple, red or yellow
    string value = 3;
}

message Cards_membersVoted {
    // The id of the member to vote &#39;yes&#39; on the card
    string value = 1;
}

message Cards_name {
    // a string with a length from 1 to 16384
    string value = 1;
}

message Cards_pos {
    // A position. top , bottom , or a positive number.
    string value = 1;
}

message Cards_stickers {
    // a string with a length from 0 to 16384
    string image = 1;
    // undefined
    string left = 2;
    // undefined
    string rotate = 3;
    // undefined
    string top = 4;
    // Valid Z values for stickers, must be an integer
    string zIndex = 5;
}

message Cards_subscribed {
    //  true or false
    string value = 1;
}

message Checklists {
    // id of the board that the checklist should be added to
    string idBoard = 1;
    // id of the card that the checklist should be added to
    string idCard = 2;
    // The id of the source checklist to copy into a new checklist.
    string idChecklistSource = 3;
    // a string with a length from 0 to 16384
    string name = 4;
    // A position. top , bottom , or a positive number.
    string pos = 5;
}

message Checklists_checkItems {
    //  true or false
    string checked = 1;
    // a string with a length from 1 to 16384
    string name = 2;
    // A position. top , bottom , or a positive number.
    string pos = 3;
}

message Checklists_idCard {
    // The id of the card that the checklist is on
    string value = 1;
}

message Checklists_name {
    // a string with a length from 1 to 16384
    string value = 1;
}

message Checklists_pos {
    // A position. top , bottom , or a positive number.
    string value = 1;
}

message LabelNames_blue {
    // a string with a length from 0 to 16384
    string value = 1;
}

message LabelNames_green {
    // a string with a length from 0 to 16384
    string value = 1;
}

message LabelNames_orange {
    // a string with a length from 0 to 16384
    string value = 1;
}

message LabelNames_purple {
    // a string with a length from 0 to 16384
    string value = 1;
}

message LabelNames_red {
    // a string with a length from 0 to 16384
    string value = 1;
}

message LabelNames_yellow {
    // a string with a length from 0 to 16384
    string value = 1;
}

message Labels {
    // A valid label color or null
    string color = 1;
    // An id
    string idBoard = 2;
    // a string with a length from 0 to 16384
    string name = 3;
}

message Labels_color {
    // A valid label color or null
    string value = 1;
}

message Labels_name {
    // a string with a length from 0 to 16384
    string value = 1;
}

message Lists {
    //  true or false
    string closed = 1;
    // id of the board that the list should be added to
    string idBoard = 2;
    // The id of the list to copy into a new list.
    string idListSource = 3;
    // a string with a length from 1 to 16384
    string name = 4;
    // A position. top , bottom , or a positive number.
    string pos = 5;
    //  true or false
    string subscribed = 6;
}

message Lists_cards {
    // a string with a length from 0 to 16384
    string desc = 1;
    // A date, or null
    string due = 2;
    // A comma-separated list of objectIds, 24-character hex strings
    string idMembers = 3;
    // all or a comma-separated list of: blue, green, orange, purple, red or yellow
    string labels = 4;
    // a string with a length from 1 to 16384
    string name = 5;
}

message Lists_closed {
    //  true or false
    string value = 1;
}

message Lists_idBoard {
    // position of the list on the new board
    string pos = 1;
    // id of the board the list should be moved to
    string value = 2;
}

message Lists_moveAllCards {
    // id of the board that the cards should be moved to
    string idBoard = 1;
}

message Lists_name {
    // a string with a length from 1 to 16384
    string value = 1;
}

message Lists_pos {
    // A position. top , bottom , or a positive number.
    string value = 1;
}

message Lists_subscribed {
    //  true or false
    string value = 1;
}

message Members {
    // One of: gravatar, none or upload
    string avatarSource = 1;
    // a string with a length from 0 to 16384
    string bio = 2;
    // A string with a length of at least 1.  Cannot begin or end with a space.
    string fullName = 3;
    // A string with a length from 1 to 4.  Cannot begin or end with a space
    string initials = 4;
    //  true or false
    string prefs/colorBlind = 5;
    // a string with a length from 0 to 255
    string prefs/locale = 6;
    // -1 (disabled), 1 or 60
    string prefs/minutesBetweenSummaries = 7;
    // A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.
    string username = 8;
}

message Members_avatar {
    // A file
    string file = 1;
}

message Members_avatarSource {
    // One of: gravatar, none or upload
    string value = 1;
}

message Members_bio {
    // a string with a length from 0 to 16384
    string value = 1;
}

message Members_boardBackgrounds {
    // One of: dark, light or unknown
    string brightness = 1;
    // A file
    string file = 2;
    //  true or false
    string tile = 3;
}

message Members_boardStars {
    // The id of the board to star
    string idBoard = 1;
    // A position. top , bottom , or a positive number.
    string pos = 2;
}

message Members_boardStars_idBoard {
    // An id
    string value = 1;
}

message Members_boardStars_pos {
    // A position. top , bottom , or a positive number.
    string value = 1;
}

message Members_customBoardBackgrounds {
    // One of: dark, light or unknown
    string brightness = 1;
    // A file
    string file = 2;
    //  true or false
    string tile = 3;
}

message Members_customEmoji {
    // A file
    string file = 1;
    // a string with a length from 2 to 64
    string name = 2;
}

message Members_customStickers {
    // A file
    string file = 1;
}

message Members_fullName {
    // A string with a length of at least 1.  Cannot begin or end with a space.
    string value = 1;
}

message Members_initials {
    // A string with a length from 1 to 4.  Cannot begin or end with a space
    string value = 1;
}

message Members_oneTimeMessagesDismissed {
    // Type of message dismissed
    string value = 1;
}

message Members_savedSearches {
    // A non-empty string with at least one non-space character
    string name = 1;
    // A position. top , bottom , or a positive number.
    string pos = 2;
    // a string with a length from 1 to 16384
    string query = 3;
}

message Members_savedSearches_name {
    // A non-empty string with at least one non-space character
    string value = 1;
}

message Members_savedSearches_pos {
    // A position. top , bottom , or a positive number.
    string value = 1;
}

message Members_savedSearches_query {
    // a string with a length from 1 to 16384
    string value = 1;
}

message Members_username {
    // A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.
    string value = 1;
}

message MyPrefs_emailPosition {
    // One of: bottom or top
    string value = 1;
}

message MyPrefs_idEmailList {
    // An id
    string value = 1;
}

message MyPrefs_showListGuide {
    //  true or false
    string value = 1;
}

message MyPrefs_showSidebar {
    //  true or false
    string value = 1;
}

message MyPrefs_showSidebarActivity {
    //  true or false
    string value = 1;
}

message MyPrefs_showSidebarBoardActions {
    //  true or false
    string value = 1;
}

message MyPrefs_showSidebarMembers {
    //  true or false
    string value = 1;
}

message Notifications {
    //  true or false
    string unread = 1;
}

message Notifications_unread {
    //  true or false
    string value = 1;
}

message Organizations {
    // a string with a length from 0 to 16384
    string desc = 1;
    // A string with a length of at least 1.  Cannot begin or end with a space.
    string displayName = 2;
    // a string with a length from 0 to 16384
    string name = 3;
    // The google apps domain to link this org to.
    string prefs/associatedDomain = 4;
    // One of: admin, none or org
    string prefs/boardVisibilityRestrict/org = 5;
    // One of: admin, none or org
    string prefs/boardVisibilityRestrict/private = 6;
    // One of: admin, none or org
    string prefs/boardVisibilityRestrict/public = 7;
    //  true or false
    string prefs/externalMembersDisabled = 8;
    // a number from 1 to 2
    string prefs/googleAppsVersion = 9;
    // An email address with optional expansion tokens
    string prefs/orgInviteRestrict = 10;
    // One of: private or public
    string prefs/permissionLevel = 11;
    // A URL starting with http:// or https:// or null
    string website = 12;
}

message Organizations_desc {
    // a string with a length from 0 to 16384
    string value = 1;
}

message Organizations_displayName {
    // A string with a length of at least 1.  Cannot begin or end with a space.
    string value = 1;
}

message Organizations_logo {
    // A file
    string file = 1;
}

message Organizations_members {
    // An email address
    string email = 1;
    // A string with a length of at least 1.  Cannot begin or end with a space.
    string fullName = 2;
    // One of: admin, normal or observer
    string type = 3;
}

message Organizations_members_deactivated {
    //  true or false
    string value = 1;
}

message Organizations_memberships {
    // all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    string member_fields = 1;
    // One of: admin, normal or observer
    string type = 2;
}

message Organizations_name {
    // A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.
    string value = 1;
}

message Organizations_website {
    // A URL starting with http:// or https:// or null
    string value = 1;
}

message Prefs_associatedDomain {
    // The google apps domain to link this org to.
    string value = 1;
}

message Prefs_background {
    // A standard background name, or the id of a custom background
    string value = 1;
}

message Prefs_boardVisibilityRestrict {
    // One of: admin, none or org
    string value = 1;
}

message Prefs_calendarFeedEnabled {
    //  true or false
    string value = 1;
}

message Prefs_cardAging {
    // One of: pirate or regular
    string value = 1;
}

message Prefs_cardCovers {
    //  true or false
    string value = 1;
}

message Prefs_colorBlind {
    //  true or false
    string value = 1;
}

message Prefs_comments {
    // One of: disabled, members, observers, org or public
    string value = 1;
}

message Prefs_externalMembersDisabled {
    //  true or false
    string value = 1;
}

message Prefs_googleAppsVersion {
    // a number from 1 to 2
    string value = 1;
}

message Prefs_invitations {
    // One of: admins or members
    string value = 1;
}

message Prefs_locale {
    // a string with a length from 0 to 255
    string value = 1;
}

message Prefs_minutesBetweenSummaries {
    // -1 (disabled), 1 or 60
    string value = 1;
}

message Prefs_orgInviteRestrict {
    // An email address with optional expansion tokens
    string value = 1;
}

message Prefs_permissionLevel {
    // One of: private or public
    string value = 1;
}

message Prefs_selfJoin {
    //  true or false
    string value = 1;
}

message Prefs_voting {
    // One of: disabled, members, observers, org or public
    string value = 1;
}

message Sessions {
    // The id of the board you&#39;re viewing.  Boards with no viewers will not get updates about members&#39; statuses.
    string idBoard = 1;
    // One of: active, disconnected or idle
    string status = 2;
}

message Sessions_status {
    // One of: active, disconnected or idle
    string value = 1;
}

message Tokens_webhooks {
    // A valid URL that is reachable with a HEAD request
    string callbackURL = 1;
    // a string with a length from 0 to 16384
    string description = 2;
    // id of the model to be monitored
    string idModel = 3;
}

message Webhooks {
    //  true or false
    string active = 1;
    // A valid URL that is reachable with a HEAD request
    string callbackURL = 2;
    // a string with a length from 0 to 16384
    string description = 3;
    // id of the model that should be hooked
    string idModel = 4;
}

message Webhooks_active {
    //  true or false
    string value = 1;
}

message Webhooks_callbackURL {
    // A valid URL that is reachable with a HEAD request
    string value = 1;
}

message Webhooks_description {
    // a string with a length from 0 to 16384
    string value = 1;
}

message Webhooks_idModel {
    // id of the model to be monitored
    string value = 1;
}

service TrelloService {
    // getActionsByIdAction()
    rpc GetActionsIdAction(GetActionsIdActionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}"
      };
    }
    // updateActionsByIdAction()
    rpc PutActionsIdAction(PutActionsIdActionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/actions/{idAction}"
        body: "body"
      };
    }
    // deleteActionsByIdAction()
    rpc DeleteActionsIdAction(DeleteActionsIdActionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/actions/{idAction}"
      };
    }
    // getActionsBoardByIdAction()
    rpc GetActionsIdActionBoard(GetActionsIdActionBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/board"
      };
    }
    // getActionsBoardByIdActionByField()
    rpc GetActionsIdActionBoardField(GetActionsIdActionBoardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/board/{field}"
      };
    }
    // getActionsCardByIdAction()
    rpc GetActionsIdActionCard(GetActionsIdActionCardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/card"
      };
    }
    // getActionsCardByIdActionByField()
    rpc GetActionsIdActionCardField(GetActionsIdActionCardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/card/{field}"
      };
    }
    // getActionsDisplayByIdAction()
    rpc GetActionsIdActionDisplay(GetActionsIdActionDisplayRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/display"
      };
    }
    // getActionsEntitiesByIdAction()
    rpc GetActionsIdActionEntities(GetActionsIdActionEntitiesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/entities"
      };
    }
    // getActionsListByIdAction()
    rpc GetActionsIdActionList(GetActionsIdActionListRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/list"
      };
    }
    // getActionsListByIdActionByField()
    rpc GetActionsIdActionListField(GetActionsIdActionListFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/list/{field}"
      };
    }
    // getActionsMemberByIdAction()
    rpc GetActionsIdActionMember(GetActionsIdActionMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/member"
      };
    }
    // getActionsMemberByIdActionByField()
    rpc GetActionsIdActionMemberField(GetActionsIdActionMemberFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/member/{field}"
      };
    }
    // getActionsMemberCreatorByIdAction()
    rpc GetActionsIdActionMemberCreator(GetActionsIdActionMemberCreatorRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/memberCreator"
      };
    }
    // getActionsMemberCreatorByIdActionByField()
    rpc GetActionsIdActionMemberCreatorField(GetActionsIdActionMemberCreatorFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/memberCreator/{field}"
      };
    }
    // getActionsOrganizationByIdAction()
    rpc GetActionsIdActionOrganization(GetActionsIdActionOrganizationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/organization"
      };
    }
    // getActionsOrganizationByIdActionByField()
    rpc GetActionsIdActionOrganizationField(GetActionsIdActionOrganizationFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/organization/{field}"
      };
    }
    // updateActionsTextByIdAction()
    rpc PutActionsIdActionText(PutActionsIdActionTextRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/actions/{idAction}/text"
        body: "body"
      };
    }
    // getActionsByIdActionByField()
    rpc GetActionsIdActionField(GetActionsIdActionFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/actions/{idAction}/{field}"
      };
    }
    // getBatch()
    rpc GetBatch(GetBatchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/batch"
      };
    }
    // addBoards()
    rpc PostBoards(PostBoardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/boards"
        body: "body"
      };
    }
    // getBoardsByIdBoard()
    rpc GetBoardsIdBoard(GetBoardsIdBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}"
      };
    }
    // updateBoardsByIdBoard()
    rpc PutBoardsIdBoard(PutBoardsIdBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}"
        body: "body"
      };
    }
    // getBoardsActionsByIdBoard()
    rpc GetBoardsIdBoardActions(GetBoardsIdBoardActionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/actions"
      };
    }
    // getBoardsBoardStarsByIdBoard()
    rpc GetBoardsIdBoardBoardStars(GetBoardsIdBoardBoardStarsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/boardStars"
      };
    }
    // addBoardsCalendarKeyGenerateByIdBoard()
    rpc PostBoardsIdBoardCalendarKeyGenerate(PostBoardsIdBoardCalendarKeyGenerateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/boards/{idBoard}/calendarKey/generate"
      };
    }
    // getBoardsCardsByIdBoard()
    rpc GetBoardsIdBoardCards(GetBoardsIdBoardCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/cards"
      };
    }
    // getBoardsCardsByIdBoardByFilter()
    rpc GetBoardsIdBoardCardsFilter(GetBoardsIdBoardCardsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/cards/{filter}"
      };
    }
    // getBoardsCardsByIdBoardByIdCard()
    rpc GetBoardsIdBoardCardsIdCard(GetBoardsIdBoardCardsIdCardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/cards/{idCard}"
      };
    }
    // getBoardsChecklistsByIdBoard()
    rpc GetBoardsIdBoardChecklists(GetBoardsIdBoardChecklistsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/checklists"
      };
    }
    // addBoardsChecklistsByIdBoard()
    rpc PostBoardsIdBoardChecklists(PostBoardsIdBoardChecklistsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/boards/{idBoard}/checklists"
        body: "body"
      };
    }
    // updateBoardsClosedByIdBoard()
    rpc PutBoardsIdBoardClosed(PutBoardsIdBoardClosedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/closed"
        body: "body"
      };
    }
    // getBoardsDeltasByIdBoard()
    rpc GetBoardsIdBoardDeltas(GetBoardsIdBoardDeltasRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/deltas"
      };
    }
    // updateBoardsDescByIdBoard()
    rpc PutBoardsIdBoardDesc(PutBoardsIdBoardDescRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/desc"
        body: "body"
      };
    }
    // addBoardsEmailKeyGenerateByIdBoard()
    rpc PostBoardsIdBoardEmailKeyGenerate(PostBoardsIdBoardEmailKeyGenerateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/boards/{idBoard}/emailKey/generate"
      };
    }
    // updateBoardsIdOrganizationByIdBoard()
    rpc PutBoardsIdBoardIdOrganization(PutBoardsIdBoardIdOrganizationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/idOrganization"
        body: "body"
      };
    }
    // updateBoardsLabelNamesBlueByIdBoard()
    rpc PutBoardsIdBoardLabelNamesBlue(PutBoardsIdBoardLabelNamesBlueRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/labelNames/blue"
        body: "body"
      };
    }
    // updateBoardsLabelNamesGreenByIdBoard()
    rpc PutBoardsIdBoardLabelNamesGreen(PutBoardsIdBoardLabelNamesGreenRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/labelNames/green"
        body: "body"
      };
    }
    // updateBoardsLabelNamesOrangeByIdBoard()
    rpc PutBoardsIdBoardLabelNamesOrange(PutBoardsIdBoardLabelNamesOrangeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/labelNames/orange"
        body: "body"
      };
    }
    // updateBoardsLabelNamesPurpleByIdBoard()
    rpc PutBoardsIdBoardLabelNamesPurple(PutBoardsIdBoardLabelNamesPurpleRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/labelNames/purple"
        body: "body"
      };
    }
    // updateBoardsLabelNamesRedByIdBoard()
    rpc PutBoardsIdBoardLabelNamesRed(PutBoardsIdBoardLabelNamesRedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/labelNames/red"
        body: "body"
      };
    }
    // updateBoardsLabelNamesYellowByIdBoard()
    rpc PutBoardsIdBoardLabelNamesYellow(PutBoardsIdBoardLabelNamesYellowRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/labelNames/yellow"
        body: "body"
      };
    }
    // getBoardsLabelsByIdBoard()
    rpc GetBoardsIdBoardLabels(GetBoardsIdBoardLabelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/labels"
      };
    }
    // addBoardsLabelsByIdBoard()
    rpc PostBoardsIdBoardLabels(PostBoardsIdBoardLabelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/boards/{idBoard}/labels"
        body: "body"
      };
    }
    // getBoardsLabelsByIdBoardByIdLabel()
    rpc GetBoardsIdBoardLabelsIdLabel(GetBoardsIdBoardLabelsIdLabelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/labels/{idLabel}"
      };
    }
    // getBoardsListsByIdBoard()
    rpc GetBoardsIdBoardLists(GetBoardsIdBoardListsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/lists"
      };
    }
    // addBoardsListsByIdBoard()
    rpc PostBoardsIdBoardLists(PostBoardsIdBoardListsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/boards/{idBoard}/lists"
        body: "body"
      };
    }
    // getBoardsListsByIdBoardByFilter()
    rpc GetBoardsIdBoardListsFilter(GetBoardsIdBoardListsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/lists/{filter}"
      };
    }
    // addBoardsMarkAsViewedByIdBoard()
    rpc PostBoardsIdBoardMarkAsViewed(PostBoardsIdBoardMarkAsViewedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/boards/{idBoard}/markAsViewed"
      };
    }
    // getBoardsMembersByIdBoard()
    rpc GetBoardsIdBoardMembers(GetBoardsIdBoardMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/members"
      };
    }
    // updateBoardsMembersByIdBoard()
    rpc PutBoardsIdBoardMembers(PutBoardsIdBoardMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/members"
        body: "body"
      };
    }
    // getBoardsMembersByIdBoardByFilter()
    rpc GetBoardsIdBoardMembersFilter(GetBoardsIdBoardMembersFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/members/{filter}"
      };
    }
    // updateBoardsMembersByIdBoardByIdMember()
    rpc PutBoardsIdBoardMembersIdMember(PutBoardsIdBoardMembersIdMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/members/{idMember}"
        body: "body"
      };
    }
    // deleteBoardsMembersByIdBoardByIdMember()
    rpc DeleteBoardsIdBoardMembersIdMember(DeleteBoardsIdBoardMembersIdMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/boards/{idBoard}/members/{idMember}"
      };
    }
    // getBoardsMembersCardsByIdBoardByIdMember()
    rpc GetBoardsIdBoardMembersIdMemberCards(GetBoardsIdBoardMembersIdMemberCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/members/{idMember}/cards"
      };
    }
    // getBoardsMembersInvitedByIdBoard()
    rpc GetBoardsIdBoardMembersInvited(GetBoardsIdBoardMembersInvitedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/membersInvited"
      };
    }
    // getBoardsMembersInvitedByIdBoardByField()
    rpc GetBoardsIdBoardMembersInvitedField(GetBoardsIdBoardMembersInvitedFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/membersInvited/{field}"
      };
    }
    // getBoardsMembershipsByIdBoard()
    rpc GetBoardsIdBoardMemberships(GetBoardsIdBoardMembershipsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/memberships"
      };
    }
    // getBoardsMembershipsByIdBoardByIdMembership()
    rpc GetBoardsIdBoardMembershipsIdMembership(GetBoardsIdBoardMembershipsIdMembershipRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/memberships/{idMembership}"
      };
    }
    // updateBoardsMembershipsByIdBoardByIdMembership()
    rpc PutBoardsIdBoardMembershipsIdMembership(PutBoardsIdBoardMembershipsIdMembershipRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/memberships/{idMembership}"
        body: "body"
      };
    }
    // getBoardsMyPrefsByIdBoard()
    rpc GetBoardsIdBoardMyPrefs(GetBoardsIdBoardMyPrefsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/myPrefs"
      };
    }
    // updateBoardsMyPrefsEmailPositionByIdBoard()
    rpc PutBoardsIdBoardMyPrefsEmailPosition(PutBoardsIdBoardMyPrefsEmailPositionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/myPrefs/emailPosition"
        body: "body"
      };
    }
    // updateBoardsMyPrefsIdEmailListByIdBoard()
    rpc PutBoardsIdBoardMyPrefsIdEmailList(PutBoardsIdBoardMyPrefsIdEmailListRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/myPrefs/idEmailList"
        body: "body"
      };
    }
    // updateBoardsMyPrefsShowListGuideByIdBoard()
    rpc PutBoardsIdBoardMyPrefsShowListGuide(PutBoardsIdBoardMyPrefsShowListGuideRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/myPrefs/showListGuide"
        body: "body"
      };
    }
    // updateBoardsMyPrefsShowSidebarByIdBoard()
    rpc PutBoardsIdBoardMyPrefsShowSidebar(PutBoardsIdBoardMyPrefsShowSidebarRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/myPrefs/showSidebar"
        body: "body"
      };
    }
    // updateBoardsMyPrefsShowSidebarActivityByIdBoard()
    rpc PutBoardsIdBoardMyPrefsShowSidebarActivity(PutBoardsIdBoardMyPrefsShowSidebarActivityRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/myPrefs/showSidebarActivity"
        body: "body"
      };
    }
    // updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
    rpc PutBoardsIdBoardMyPrefsShowSidebarBoardActions(PutBoardsIdBoardMyPrefsShowSidebarBoardActionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/myPrefs/showSidebarBoardActions"
        body: "body"
      };
    }
    // updateBoardsMyPrefsShowSidebarMembersByIdBoard()
    rpc PutBoardsIdBoardMyPrefsShowSidebarMembers(PutBoardsIdBoardMyPrefsShowSidebarMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/myPrefs/showSidebarMembers"
        body: "body"
      };
    }
    // updateBoardsNameByIdBoard()
    rpc PutBoardsIdBoardName(PutBoardsIdBoardNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/name"
        body: "body"
      };
    }
    // getBoardsOrganizationByIdBoard()
    rpc GetBoardsIdBoardOrganization(GetBoardsIdBoardOrganizationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/organization"
      };
    }
    // getBoardsOrganizationByIdBoardByField()
    rpc GetBoardsIdBoardOrganizationField(GetBoardsIdBoardOrganizationFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/organization/{field}"
      };
    }
    // addBoardsPowerUpsByIdBoard()
    rpc PostBoardsIdBoardPowerUps(PostBoardsIdBoardPowerUpsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/boards/{idBoard}/powerUps"
        body: "body"
      };
    }
    // deleteBoardsPowerUpsByIdBoardByPowerUp()
    rpc DeleteBoardsIdBoardPowerUpsPowerUp(DeleteBoardsIdBoardPowerUpsPowerUpRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/boards/{idBoard}/powerUps/{powerUp}"
      };
    }
    // updateBoardsPrefsBackgroundByIdBoard()
    rpc PutBoardsIdBoardPrefsBackground(PutBoardsIdBoardPrefsBackgroundRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/background"
        body: "body"
      };
    }
    // updateBoardsPrefsCalendarFeedEnabledByIdBoard()
    rpc PutBoardsIdBoardPrefsCalendarFeedEnabled(PutBoardsIdBoardPrefsCalendarFeedEnabledRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/calendarFeedEnabled"
        body: "body"
      };
    }
    // updateBoardsPrefsCardAgingByIdBoard()
    rpc PutBoardsIdBoardPrefsCardAging(PutBoardsIdBoardPrefsCardAgingRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/cardAging"
        body: "body"
      };
    }
    // updateBoardsPrefsCardCoversByIdBoard()
    rpc PutBoardsIdBoardPrefsCardCovers(PutBoardsIdBoardPrefsCardCoversRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/cardCovers"
        body: "body"
      };
    }
    // updateBoardsPrefsCommentsByIdBoard()
    rpc PutBoardsIdBoardPrefsComments(PutBoardsIdBoardPrefsCommentsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/comments"
        body: "body"
      };
    }
    // updateBoardsPrefsInvitationsByIdBoard()
    rpc PutBoardsIdBoardPrefsInvitations(PutBoardsIdBoardPrefsInvitationsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/invitations"
        body: "body"
      };
    }
    // updateBoardsPrefsPermissionLevelByIdBoard()
    rpc PutBoardsIdBoardPrefsPermissionLevel(PutBoardsIdBoardPrefsPermissionLevelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/permissionLevel"
        body: "body"
      };
    }
    // updateBoardsPrefsSelfJoinByIdBoard()
    rpc PutBoardsIdBoardPrefsSelfJoin(PutBoardsIdBoardPrefsSelfJoinRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/selfJoin"
        body: "body"
      };
    }
    // updateBoardsPrefsVotingByIdBoard()
    rpc PutBoardsIdBoardPrefsVoting(PutBoardsIdBoardPrefsVotingRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/prefs/voting"
        body: "body"
      };
    }
    // updateBoardsSubscribedByIdBoard()
    rpc PutBoardsIdBoardSubscribed(PutBoardsIdBoardSubscribedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/boards/{idBoard}/subscribed"
        body: "body"
      };
    }
    // getBoardsByIdBoardByField()
    rpc GetBoardsIdBoardField(GetBoardsIdBoardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/boards/{idBoard}/{field}"
      };
    }
    // addCards()
    rpc PostCards(PostCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards"
        body: "body"
      };
    }
    // getCardsByIdCard()
    rpc GetCardsIdCard(GetCardsIdCardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}"
      };
    }
    // updateCardsByIdCard()
    rpc PutCardsIdCard(PutCardsIdCardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}"
        body: "body"
      };
    }
    // deleteCardsByIdCard()
    rpc DeleteCardsIdCard(DeleteCardsIdCardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}"
      };
    }
    // getCardsActionsByIdCard()
    rpc GetCardsIdCardActions(GetCardsIdCardActionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/actions"
      };
    }
    // addCardsActionsCommentsByIdCard()
    rpc PostCardsIdCardActionsComments(PostCardsIdCardActionsCommentsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/actions/comments"
        body: "body"
      };
    }
    // updateCardsActionsCommentsByIdCardByIdAction()
    // 
    // This can only be done by the original author of the comment.
    rpc PutCardsIdCardActionsIdActionComments(PutCardsIdCardActionsIdActionCommentsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/actions/{idAction}/comments"
        body: "body"
      };
    }
    // deleteCardsActionsCommentsByIdCardByIdAction()
    // 
    // This can only be done by the original author of the comment, or someone with higher permissions than the original author.
    rpc DeleteCardsIdCardActionsIdActionComments(DeleteCardsIdCardActionsIdActionCommentsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/actions/{idAction}/comments"
      };
    }
    // getCardsAttachmentsByIdCard()
    rpc GetCardsIdCardAttachments(GetCardsIdCardAttachmentsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/attachments"
      };
    }
    // addCardsAttachmentsByIdCard()
    rpc PostCardsIdCardAttachments(PostCardsIdCardAttachmentsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/attachments"
        body: "body"
      };
    }
    // getCardsAttachmentsByIdCardByIdAttachment()
    rpc GetCardsIdCardAttachmentsIdAttachment(GetCardsIdCardAttachmentsIdAttachmentRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/attachments/{idAttachment}"
      };
    }
    // deleteCardsAttachmentsByIdCardByIdAttachment()
    rpc DeleteCardsIdCardAttachmentsIdAttachment(DeleteCardsIdCardAttachmentsIdAttachmentRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/attachments/{idAttachment}"
      };
    }
    // getCardsBoardByIdCard()
    rpc GetCardsIdCardBoard(GetCardsIdCardBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/board"
      };
    }
    // getCardsBoardByIdCardByField()
    rpc GetCardsIdCardBoardField(GetCardsIdCardBoardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/board/{field}"
      };
    }
    // getCardsCheckItemStatesByIdCard()
    rpc GetCardsIdCardCheckItemStates(GetCardsIdCardCheckItemStatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/checkItemStates"
      };
    }
    // updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
    rpc PutCardsIdCardChecklistIdChecklistCurrentCheckItemIdCheckItem(PutCardsIdCardChecklistIdChecklistCurrentCheckItemIdCheckItemRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}"
        body: "body"
      };
    }
    // addCardsChecklistCheckItemByIdCardByIdChecklist()
    rpc PostCardsIdCardChecklistIdChecklistCheckItem(PostCardsIdCardChecklistIdChecklistCheckItemRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/checklist/{idChecklist}/checkItem"
        body: "body"
      };
    }
    // deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
    rpc DeleteCardsIdCardChecklistIdChecklistCheckItemIdCheckItem(DeleteCardsIdCardChecklistIdChecklistCheckItemIdCheckItemRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}"
      };
    }
    // addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
    rpc PostCardsIdCardChecklistIdChecklistCheckItemIdCheckItemConvertToCard(PostCardsIdCardChecklistIdChecklistCheckItemIdCheckItemConvertToCardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard"
      };
    }
    // updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
    rpc PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemName(PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name"
        body: "body"
      };
    }
    // updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
    rpc PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemPos(PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemPosRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos"
        body: "body"
      };
    }
    // updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
    rpc PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemState(PutCardsIdCardChecklistIdChecklistCheckItemIdCheckItemStateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state"
        body: "body"
      };
    }
    // getCardsChecklistsByIdCard()
    rpc GetCardsIdCardChecklists(GetCardsIdCardChecklistsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/checklists"
      };
    }
    // addCardsChecklistsByIdCard()
    rpc PostCardsIdCardChecklists(PostCardsIdCardChecklistsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/checklists"
        body: "body"
      };
    }
    // deleteCardsChecklistsByIdCardByIdChecklist()
    rpc DeleteCardsIdCardChecklistsIdChecklist(DeleteCardsIdCardChecklistsIdChecklistRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/checklists/{idChecklist}"
      };
    }
    // updateCardsClosedByIdCard()
    rpc PutCardsIdCardClosed(PutCardsIdCardClosedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/closed"
        body: "body"
      };
    }
    // updateCardsDescByIdCard()
    rpc PutCardsIdCardDesc(PutCardsIdCardDescRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/desc"
        body: "body"
      };
    }
    // updateCardsDueByIdCard()
    rpc PutCardsIdCardDue(PutCardsIdCardDueRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/due"
        body: "body"
      };
    }
    // updateCardsIdAttachmentCoverByIdCard()
    rpc PutCardsIdCardIdAttachmentCover(PutCardsIdCardIdAttachmentCoverRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/idAttachmentCover"
        body: "body"
      };
    }
    // updateCardsIdBoardByIdCard()
    rpc PutCardsIdCardIdBoard(PutCardsIdCardIdBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/idBoard"
        body: "body"
      };
    }
    // addCardsIdLabelsByIdCard()
    rpc PostCardsIdCardIdLabels(PostCardsIdCardIdLabelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/idLabels"
        body: "body"
      };
    }
    // deleteCardsIdLabelsByIdCardByIdLabel()
    rpc DeleteCardsIdCardIdLabelsIdLabel(DeleteCardsIdCardIdLabelsIdLabelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/idLabels/{idLabel}"
      };
    }
    // updateCardsIdListByIdCard()
    rpc PutCardsIdCardIdList(PutCardsIdCardIdListRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/idList"
        body: "body"
      };
    }
    // updateCardsIdMembersByIdCard()
    rpc PutCardsIdCardIdMembers(PutCardsIdCardIdMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/idMembers"
        body: "body"
      };
    }
    // addCardsIdMembersByIdCard()
    rpc PostCardsIdCardIdMembers(PostCardsIdCardIdMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/idMembers"
        body: "body"
      };
    }
    // deleteCardsIdMembersByIdCardByIdMember()
    rpc DeleteCardsIdCardIdMembersIdMember(DeleteCardsIdCardIdMembersIdMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/idMembers/{idMember}"
      };
    }
    // updateCardsLabelsByIdCard()
    rpc PutCardsIdCardLabels(PutCardsIdCardLabelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/labels"
        body: "body"
      };
    }
    // addCardsLabelsByIdCard()
    rpc PostCardsIdCardLabels(PostCardsIdCardLabelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/labels"
        body: "body"
      };
    }
    // deleteCardsLabelsByIdCardByColor()
    rpc DeleteCardsIdCardLabelsColor(DeleteCardsIdCardLabelsColorRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/labels/{color}"
      };
    }
    // getCardsListByIdCard()
    rpc GetCardsIdCardList(GetCardsIdCardListRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/list"
      };
    }
    // getCardsListByIdCardByField()
    rpc GetCardsIdCardListField(GetCardsIdCardListFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/list/{field}"
      };
    }
    // addCardsMarkAssociatedNotificationsReadByIdCard()
    rpc PostCardsIdCardMarkAssociatedNotificationsRead(PostCardsIdCardMarkAssociatedNotificationsReadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/markAssociatedNotificationsRead"
      };
    }
    // getCardsMembersByIdCard()
    rpc GetCardsIdCardMembers(GetCardsIdCardMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/members"
      };
    }
    // getCardsMembersVotedByIdCard()
    rpc GetCardsIdCardMembersVoted(GetCardsIdCardMembersVotedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/membersVoted"
      };
    }
    // addCardsMembersVotedByIdCard()
    rpc PostCardsIdCardMembersVoted(PostCardsIdCardMembersVotedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/membersVoted"
        body: "body"
      };
    }
    // deleteCardsMembersVotedByIdCardByIdMember()
    rpc DeleteCardsIdCardMembersVotedIdMember(DeleteCardsIdCardMembersVotedIdMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/membersVoted/{idMember}"
      };
    }
    // updateCardsNameByIdCard()
    rpc PutCardsIdCardName(PutCardsIdCardNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/name"
        body: "body"
      };
    }
    // updateCardsPosByIdCard()
    rpc PutCardsIdCardPos(PutCardsIdCardPosRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/pos"
        body: "body"
      };
    }
    // getCardsStickersByIdCard()
    rpc GetCardsIdCardStickers(GetCardsIdCardStickersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/stickers"
      };
    }
    // addCardsStickersByIdCard()
    rpc PostCardsIdCardStickers(PostCardsIdCardStickersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/cards/{idCard}/stickers"
        body: "body"
      };
    }
    // getCardsStickersByIdCardByIdSticker()
    rpc GetCardsIdCardStickersIdSticker(GetCardsIdCardStickersIdStickerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/stickers/{idSticker}"
      };
    }
    // updateCardsStickersByIdCardByIdSticker()
    rpc PutCardsIdCardStickersIdSticker(PutCardsIdCardStickersIdStickerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/stickers/{idSticker}"
        body: "body"
      };
    }
    // deleteCardsStickersByIdCardByIdSticker()
    rpc DeleteCardsIdCardStickersIdSticker(DeleteCardsIdCardStickersIdStickerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/cards/{idCard}/stickers/{idSticker}"
      };
    }
    // updateCardsSubscribedByIdCard()
    rpc PutCardsIdCardSubscribed(PutCardsIdCardSubscribedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/cards/{idCard}/subscribed"
        body: "body"
      };
    }
    // getCardsByIdCardByField()
    rpc GetCardsIdCardField(GetCardsIdCardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/cards/{idCard}/{field}"
      };
    }
    // addChecklists()
    rpc PostChecklists(PostChecklistsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/checklists"
        body: "body"
      };
    }
    // getChecklistsByIdChecklist()
    rpc GetChecklistsIdChecklist(GetChecklistsIdChecklistRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/checklists/{idChecklist}"
      };
    }
    // updateChecklistsByIdChecklist()
    rpc PutChecklistsIdChecklist(PutChecklistsIdChecklistRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/checklists/{idChecklist}"
        body: "body"
      };
    }
    // deleteChecklistsByIdChecklist()
    rpc DeleteChecklistsIdChecklist(DeleteChecklistsIdChecklistRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/checklists/{idChecklist}"
      };
    }
    // getChecklistsBoardByIdChecklist()
    rpc GetChecklistsIdChecklistBoard(GetChecklistsIdChecklistBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/checklists/{idChecklist}/board"
      };
    }
    // getChecklistsBoardByIdChecklistByField()
    rpc GetChecklistsIdChecklistBoardField(GetChecklistsIdChecklistBoardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/checklists/{idChecklist}/board/{field}"
      };
    }
    // getChecklistsCardsByIdChecklist()
    rpc GetChecklistsIdChecklistCards(GetChecklistsIdChecklistCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/checklists/{idChecklist}/cards"
      };
    }
    // getChecklistsCardsByIdChecklistByFilter()
    rpc GetChecklistsIdChecklistCardsFilter(GetChecklistsIdChecklistCardsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/checklists/{idChecklist}/cards/{filter}"
      };
    }
    // getChecklistsCheckItemsByIdChecklist()
    rpc GetChecklistsIdChecklistCheckItems(GetChecklistsIdChecklistCheckItemsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/checklists/{idChecklist}/checkItems"
      };
    }
    // addChecklistsCheckItemsByIdChecklist()
    rpc PostChecklistsIdChecklistCheckItems(PostChecklistsIdChecklistCheckItemsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/checklists/{idChecklist}/checkItems"
        body: "body"
      };
    }
    // getChecklistsCheckItemsByIdChecklistByIdCheckItem()
    rpc GetChecklistsIdChecklistCheckItemsIdCheckItem(GetChecklistsIdChecklistCheckItemsIdCheckItemRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/checklists/{idChecklist}/checkItems/{idCheckItem}"
      };
    }
    // deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
    rpc DeleteChecklistsIdChecklistCheckItemsIdCheckItem(DeleteChecklistsIdChecklistCheckItemsIdCheckItemRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/checklists/{idChecklist}/checkItems/{idCheckItem}"
      };
    }
    // updateChecklistsIdCardByIdChecklist()
    rpc PutChecklistsIdChecklistIdCard(PutChecklistsIdChecklistIdCardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/checklists/{idChecklist}/idCard"
        body: "body"
      };
    }
    // updateChecklistsNameByIdChecklist()
    rpc PutChecklistsIdChecklistName(PutChecklistsIdChecklistNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/checklists/{idChecklist}/name"
        body: "body"
      };
    }
    // updateChecklistsPosByIdChecklist()
    rpc PutChecklistsIdChecklistPos(PutChecklistsIdChecklistPosRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/checklists/{idChecklist}/pos"
        body: "body"
      };
    }
    // getChecklistsByIdChecklistByField()
    rpc GetChecklistsIdChecklistField(GetChecklistsIdChecklistFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/checklists/{idChecklist}/{field}"
      };
    }
    // addLabels()
    rpc PostLabels(PostLabelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/labels"
        body: "body"
      };
    }
    // getLabelsByIdLabel()
    rpc GetLabelsIdLabel(GetLabelsIdLabelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/labels/{idLabel}"
      };
    }
    // updateLabelsByIdLabel()
    rpc PutLabelsIdLabel(PutLabelsIdLabelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/labels/{idLabel}"
        body: "body"
      };
    }
    // deleteLabelsByIdLabel()
    rpc DeleteLabelsIdLabel(DeleteLabelsIdLabelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/labels/{idLabel}"
      };
    }
    // getLabelsBoardByIdLabel()
    rpc GetLabelsIdLabelBoard(GetLabelsIdLabelBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/labels/{idLabel}/board"
      };
    }
    // getLabelsBoardByIdLabelByField()
    rpc GetLabelsIdLabelBoardField(GetLabelsIdLabelBoardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/labels/{idLabel}/board/{field}"
      };
    }
    // updateLabelsColorByIdLabel()
    rpc PutLabelsIdLabelColor(PutLabelsIdLabelColorRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/labels/{idLabel}/color"
        body: "body"
      };
    }
    // updateLabelsNameByIdLabel()
    rpc PutLabelsIdLabelName(PutLabelsIdLabelNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/labels/{idLabel}/name"
        body: "body"
      };
    }
    // addLists()
    rpc PostLists(PostListsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/lists"
        body: "body"
      };
    }
    // getListsByIdList()
    rpc GetListsIdList(GetListsIdListRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/lists/{idList}"
      };
    }
    // updateListsByIdList()
    rpc PutListsIdList(PutListsIdListRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/lists/{idList}"
        body: "body"
      };
    }
    // getListsActionsByIdList()
    rpc GetListsIdListActions(GetListsIdListActionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/lists/{idList}/actions"
      };
    }
    // addListsArchiveAllCardsByIdList()
    rpc PostListsIdListArchiveAllCards(PostListsIdListArchiveAllCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/lists/{idList}/archiveAllCards"
      };
    }
    // getListsBoardByIdList()
    rpc GetListsIdListBoard(GetListsIdListBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/lists/{idList}/board"
      };
    }
    // getListsBoardByIdListByField()
    rpc GetListsIdListBoardField(GetListsIdListBoardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/lists/{idList}/board/{field}"
      };
    }
    // getListsCardsByIdList()
    rpc GetListsIdListCards(GetListsIdListCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/lists/{idList}/cards"
      };
    }
    // addListsCardsByIdList()
    rpc PostListsIdListCards(PostListsIdListCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/lists/{idList}/cards"
        body: "body"
      };
    }
    // getListsCardsByIdListByFilter()
    rpc GetListsIdListCardsFilter(GetListsIdListCardsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/lists/{idList}/cards/{filter}"
      };
    }
    // updateListsClosedByIdList()
    rpc PutListsIdListClosed(PutListsIdListClosedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/lists/{idList}/closed"
        body: "body"
      };
    }
    // updateListsIdBoardByIdList()
    rpc PutListsIdListIdBoard(PutListsIdListIdBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/lists/{idList}/idBoard"
        body: "body"
      };
    }
    // addListsMoveAllCardsByIdList()
    rpc PostListsIdListMoveAllCards(PostListsIdListMoveAllCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/lists/{idList}/moveAllCards"
        body: "body"
      };
    }
    // updateListsNameByIdList()
    rpc PutListsIdListName(PutListsIdListNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/lists/{idList}/name"
        body: "body"
      };
    }
    // updateListsPosByIdList()
    rpc PutListsIdListPos(PutListsIdListPosRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/lists/{idList}/pos"
        body: "body"
      };
    }
    // updateListsSubscribedByIdList()
    rpc PutListsIdListSubscribed(PutListsIdListSubscribedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/lists/{idList}/subscribed"
        body: "body"
      };
    }
    // getListsByIdListByField()
    rpc GetListsIdListField(GetListsIdListFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/lists/{idList}/{field}"
      };
    }
    // getMembersByIdMember()
    // 
    // If you specify 'me' as the username, this call will respond as if you had supplied the username associated with the supplied token
    rpc GetMembersIdMember(GetMembersIdMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}"
      };
    }
    // updateMembersByIdMember()
    rpc PutMembersIdMember(PutMembersIdMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}"
        body: "body"
      };
    }
    // getMembersActionsByIdMember()
    rpc GetMembersIdMemberActions(GetMembersIdMemberActionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/actions"
      };
    }
    // addMembersAvatarByIdMember()
    rpc PostMembersIdMemberAvatar(PostMembersIdMemberAvatarRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/members/{idMember}/avatar"
        body: "body"
      };
    }
    // updateMembersAvatarSourceByIdMember()
    rpc PutMembersIdMemberAvatarSource(PutMembersIdMemberAvatarSourceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/avatarSource"
        body: "body"
      };
    }
    // updateMembersBioByIdMember()
    rpc PutMembersIdMemberBio(PutMembersIdMemberBioRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/bio"
        body: "body"
      };
    }
    // getMembersBoardBackgroundsByIdMember()
    rpc GetMembersIdMemberBoardBackgrounds(GetMembersIdMemberBoardBackgroundsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/boardBackgrounds"
      };
    }
    // addMembersBoardBackgroundsByIdMember()
    rpc PostMembersIdMemberBoardBackgrounds(PostMembersIdMemberBoardBackgroundsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/members/{idMember}/boardBackgrounds"
        body: "body"
      };
    }
    // getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
    rpc GetMembersIdMemberBoardBackgroundsIdBoardBackground(GetMembersIdMemberBoardBackgroundsIdBoardBackgroundRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/boardBackgrounds/{idBoardBackground}"
      };
    }
    // updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
    rpc PutMembersIdMemberBoardBackgroundsIdBoardBackground(PutMembersIdMemberBoardBackgroundsIdBoardBackgroundRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/boardBackgrounds/{idBoardBackground}"
        body: "body"
      };
    }
    // deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
    rpc DeleteMembersIdMemberBoardBackgroundsIdBoardBackground(DeleteMembersIdMemberBoardBackgroundsIdBoardBackgroundRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/members/{idMember}/boardBackgrounds/{idBoardBackground}"
      };
    }
    // getMembersBoardStarsByIdMember()
    rpc GetMembersIdMemberBoardStars(GetMembersIdMemberBoardStarsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/boardStars"
      };
    }
    // addMembersBoardStarsByIdMember()
    rpc PostMembersIdMemberBoardStars(PostMembersIdMemberBoardStarsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/members/{idMember}/boardStars"
        body: "body"
      };
    }
    // getMembersBoardStarsByIdMemberByIdBoardStar()
    rpc GetMembersIdMemberBoardStarsIdBoardStar(GetMembersIdMemberBoardStarsIdBoardStarRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/boardStars/{idBoardStar}"
      };
    }
    // updateMembersBoardStarsByIdMemberByIdBoardStar()
    rpc PutMembersIdMemberBoardStarsIdBoardStar(PutMembersIdMemberBoardStarsIdBoardStarRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/boardStars/{idBoardStar}"
        body: "body"
      };
    }
    // deleteMembersBoardStarsByIdMemberByIdBoardStar()
    rpc DeleteMembersIdMemberBoardStarsIdBoardStar(DeleteMembersIdMemberBoardStarsIdBoardStarRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/members/{idMember}/boardStars/{idBoardStar}"
      };
    }
    // updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
    rpc PutMembersIdMemberBoardStarsIdBoardStarIdBoard(PutMembersIdMemberBoardStarsIdBoardStarIdBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/boardStars/{idBoardStar}/idBoard"
        body: "body"
      };
    }
    // updateMembersBoardStarsPosByIdMemberByIdBoardStar()
    rpc PutMembersIdMemberBoardStarsIdBoardStarPos(PutMembersIdMemberBoardStarsIdBoardStarPosRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/boardStars/{idBoardStar}/pos"
        body: "body"
      };
    }
    // getMembersBoardsByIdMember()
    rpc GetMembersIdMemberBoards(GetMembersIdMemberBoardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/boards"
      };
    }
    // getMembersBoardsByIdMemberByFilter()
    rpc GetMembersIdMemberBoardsFilter(GetMembersIdMemberBoardsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/boards/{filter}"
      };
    }
    // getMembersBoardsInvitedByIdMember()
    rpc GetMembersIdMemberBoardsInvited(GetMembersIdMemberBoardsInvitedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/boardsInvited"
      };
    }
    // getMembersBoardsInvitedByIdMemberByField()
    rpc GetMembersIdMemberBoardsInvitedField(GetMembersIdMemberBoardsInvitedFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/boardsInvited/{field}"
      };
    }
    // getMembersCardsByIdMember()
    rpc GetMembersIdMemberCards(GetMembersIdMemberCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/cards"
      };
    }
    // getMembersCardsByIdMemberByFilter()
    rpc GetMembersIdMemberCardsFilter(GetMembersIdMemberCardsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/cards/{filter}"
      };
    }
    // getMembersCustomBoardBackgroundsByIdMember()
    rpc GetMembersIdMemberCustomBoardBackgrounds(GetMembersIdMemberCustomBoardBackgroundsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/customBoardBackgrounds"
      };
    }
    // addMembersCustomBoardBackgroundsByIdMember()
    rpc PostMembersIdMemberCustomBoardBackgrounds(PostMembersIdMemberCustomBoardBackgroundsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/members/{idMember}/customBoardBackgrounds"
        body: "body"
      };
    }
    // getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
    rpc GetMembersIdMemberCustomBoardBackgroundsIdBoardBackground(GetMembersIdMemberCustomBoardBackgroundsIdBoardBackgroundRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
      };
    }
    // updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
    rpc PutMembersIdMemberCustomBoardBackgroundsIdBoardBackground(PutMembersIdMemberCustomBoardBackgroundsIdBoardBackgroundRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
        body: "body"
      };
    }
    // deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
    rpc DeleteMembersIdMemberCustomBoardBackgroundsIdBoardBackground(DeleteMembersIdMemberCustomBoardBackgroundsIdBoardBackgroundRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
      };
    }
    // getMembersCustomEmojiByIdMember()
    // 
    // This gets the list of all of the user’s uploaded emoji
    rpc GetMembersIdMemberCustomEmoji(GetMembersIdMemberCustomEmojiRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/customEmoji"
      };
    }
    // addMembersCustomEmojiByIdMember()
    rpc PostMembersIdMemberCustomEmoji(PostMembersIdMemberCustomEmojiRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/members/{idMember}/customEmoji"
        body: "body"
      };
    }
    // getMembersCustomEmojiByIdMemberByIdCustomEmoji()
    rpc GetMembersIdMemberCustomEmojiIdCustomEmoji(GetMembersIdMemberCustomEmojiIdCustomEmojiRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/customEmoji/{idCustomEmoji}"
      };
    }
    // getMembersCustomStickersByIdMember()
    // 
    // This gets a list of all of the user’s uploaded stickers
    rpc GetMembersIdMemberCustomStickers(GetMembersIdMemberCustomStickersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/customStickers"
      };
    }
    // addMembersCustomStickersByIdMember()
    rpc PostMembersIdMemberCustomStickers(PostMembersIdMemberCustomStickersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/members/{idMember}/customStickers"
        body: "body"
      };
    }
    // getMembersCustomStickersByIdMemberByIdCustomSticker()
    rpc GetMembersIdMemberCustomStickersIdCustomSticker(GetMembersIdMemberCustomStickersIdCustomStickerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/customStickers/{idCustomSticker}"
      };
    }
    // deleteMembersCustomStickersByIdMemberByIdCustomSticker()
    rpc DeleteMembersIdMemberCustomStickersIdCustomSticker(DeleteMembersIdMemberCustomStickersIdCustomStickerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/members/{idMember}/customStickers/{idCustomSticker}"
      };
    }
    // getMembersDeltasByIdMember()
    rpc GetMembersIdMemberDeltas(GetMembersIdMemberDeltasRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/deltas"
      };
    }
    // updateMembersFullNameByIdMember()
    rpc PutMembersIdMemberFullName(PutMembersIdMemberFullNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/fullName"
        body: "body"
      };
    }
    // updateMembersInitialsByIdMember()
    rpc PutMembersIdMemberInitials(PutMembersIdMemberInitialsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/initials"
        body: "body"
      };
    }
    // getMembersNotificationsByIdMember()
    // 
    // You can only read the notifications for the member associated with the supplied token
    rpc GetMembersIdMemberNotifications(GetMembersIdMemberNotificationsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/notifications"
      };
    }
    // getMembersNotificationsByIdMemberByFilter()
    rpc GetMembersIdMemberNotificationsFilter(GetMembersIdMemberNotificationsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/notifications/{filter}"
      };
    }
    // addMembersOneTimeMessagesDismissedByIdMember()
    rpc PostMembersIdMemberOneTimeMessagesDismissed(PostMembersIdMemberOneTimeMessagesDismissedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/members/{idMember}/oneTimeMessagesDismissed"
        body: "body"
      };
    }
    // getMembersOrganizationsByIdMember()
    rpc GetMembersIdMemberOrganizations(GetMembersIdMemberOrganizationsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/organizations"
      };
    }
    // getMembersOrganizationsByIdMemberByFilter()
    rpc GetMembersIdMemberOrganizationsFilter(GetMembersIdMemberOrganizationsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/organizations/{filter}"
      };
    }
    // getMembersOrganizationsInvitedByIdMember()
    rpc GetMembersIdMemberOrganizationsInvited(GetMembersIdMemberOrganizationsInvitedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/organizationsInvited"
      };
    }
    // getMembersOrganizationsInvitedByIdMemberByField()
    rpc GetMembersIdMemberOrganizationsInvitedField(GetMembersIdMemberOrganizationsInvitedFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/organizationsInvited/{field}"
      };
    }
    // updateMembersPrefsColorBlindByIdMember()
    rpc PutMembersIdMemberPrefsColorBlind(PutMembersIdMemberPrefsColorBlindRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/prefs/colorBlind"
        body: "body"
      };
    }
    // updateMembersPrefsLocaleByIdMember()
    rpc PutMembersIdMemberPrefsLocale(PutMembersIdMemberPrefsLocaleRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/prefs/locale"
        body: "body"
      };
    }
    // updateMembersPrefsMinutesBetweenSummariesByIdMember()
    rpc PutMembersIdMemberPrefsMinutesBetweenSummaries(PutMembersIdMemberPrefsMinutesBetweenSummariesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/prefs/minutesBetweenSummaries"
        body: "body"
      };
    }
    // getMembersSavedSearchesByIdMember()
    rpc GetMembersIdMemberSavedSearches(GetMembersIdMemberSavedSearchesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/savedSearches"
      };
    }
    // addMembersSavedSearchesByIdMember()
    rpc PostMembersIdMemberSavedSearches(PostMembersIdMemberSavedSearchesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/members/{idMember}/savedSearches"
        body: "body"
      };
    }
    // getMembersSavedSearchesByIdMemberByIdSavedSearch()
    rpc GetMembersIdMemberSavedSearchesIdSavedSearch(GetMembersIdMemberSavedSearchesIdSavedSearchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/savedSearches/{idSavedSearch}"
      };
    }
    // updateMembersSavedSearchesByIdMemberByIdSavedSearch()
    rpc PutMembersIdMemberSavedSearchesIdSavedSearch(PutMembersIdMemberSavedSearchesIdSavedSearchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/savedSearches/{idSavedSearch}"
        body: "body"
      };
    }
    // deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
    rpc DeleteMembersIdMemberSavedSearchesIdSavedSearch(DeleteMembersIdMemberSavedSearchesIdSavedSearchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/members/{idMember}/savedSearches/{idSavedSearch}"
      };
    }
    // updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
    rpc PutMembersIdMemberSavedSearchesIdSavedSearchName(PutMembersIdMemberSavedSearchesIdSavedSearchNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/savedSearches/{idSavedSearch}/name"
        body: "body"
      };
    }
    // updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
    rpc PutMembersIdMemberSavedSearchesIdSavedSearchPos(PutMembersIdMemberSavedSearchesIdSavedSearchPosRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/savedSearches/{idSavedSearch}/pos"
        body: "body"
      };
    }
    // updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
    rpc PutMembersIdMemberSavedSearchesIdSavedSearchQuery(PutMembersIdMemberSavedSearchesIdSavedSearchQueryRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/savedSearches/{idSavedSearch}/query"
        body: "body"
      };
    }
    // getMembersTokensByIdMember()
    rpc GetMembersIdMemberTokens(GetMembersIdMemberTokensRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/tokens"
      };
    }
    // updateMembersUsernameByIdMember()
    rpc PutMembersIdMemberUsername(PutMembersIdMemberUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/members/{idMember}/username"
        body: "body"
      };
    }
    // getMembersByIdMemberByField()
    rpc GetMembersIdMemberField(GetMembersIdMemberFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/members/{idMember}/{field}"
      };
    }
    // addNotificationsAllRead()
    rpc PostNotificationsAllRead(PostNotificationsAllReadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/notifications/all/read"
      };
    }
    // getNotificationsByIdNotification()
    rpc GetNotificationsIdNotification(GetNotificationsIdNotificationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}"
      };
    }
    // updateNotificationsByIdNotification()
    rpc PutNotificationsIdNotification(PutNotificationsIdNotificationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/notifications/{idNotification}"
        body: "body"
      };
    }
    // getNotificationsBoardByIdNotification()
    rpc GetNotificationsIdNotificationBoard(GetNotificationsIdNotificationBoardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/board"
      };
    }
    // getNotificationsBoardByIdNotificationByField()
    rpc GetNotificationsIdNotificationBoardField(GetNotificationsIdNotificationBoardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/board/{field}"
      };
    }
    // getNotificationsCardByIdNotification()
    rpc GetNotificationsIdNotificationCard(GetNotificationsIdNotificationCardRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/card"
      };
    }
    // getNotificationsCardByIdNotificationByField()
    rpc GetNotificationsIdNotificationCardField(GetNotificationsIdNotificationCardFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/card/{field}"
      };
    }
    // getNotificationsDisplayByIdNotification()
    rpc GetNotificationsIdNotificationDisplay(GetNotificationsIdNotificationDisplayRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/display"
      };
    }
    // getNotificationsEntitiesByIdNotification()
    rpc GetNotificationsIdNotificationEntities(GetNotificationsIdNotificationEntitiesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/entities"
      };
    }
    // getNotificationsListByIdNotification()
    rpc GetNotificationsIdNotificationList(GetNotificationsIdNotificationListRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/list"
      };
    }
    // getNotificationsListByIdNotificationByField()
    rpc GetNotificationsIdNotificationListField(GetNotificationsIdNotificationListFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/list/{field}"
      };
    }
    // getNotificationsMemberByIdNotification()
    rpc GetNotificationsIdNotificationMember(GetNotificationsIdNotificationMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/member"
      };
    }
    // getNotificationsMemberByIdNotificationByField()
    rpc GetNotificationsIdNotificationMemberField(GetNotificationsIdNotificationMemberFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/member/{field}"
      };
    }
    // getNotificationsMemberCreatorByIdNotification()
    rpc GetNotificationsIdNotificationMemberCreator(GetNotificationsIdNotificationMemberCreatorRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/memberCreator"
      };
    }
    // getNotificationsMemberCreatorByIdNotificationByField()
    rpc GetNotificationsIdNotificationMemberCreatorField(GetNotificationsIdNotificationMemberCreatorFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/memberCreator/{field}"
      };
    }
    // getNotificationsOrganizationByIdNotification()
    rpc GetNotificationsIdNotificationOrganization(GetNotificationsIdNotificationOrganizationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/organization"
      };
    }
    // getNotificationsOrganizationByIdNotificationByField()
    rpc GetNotificationsIdNotificationOrganizationField(GetNotificationsIdNotificationOrganizationFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/organization/{field}"
      };
    }
    // updateNotificationsUnreadByIdNotification()
    rpc PutNotificationsIdNotificationUnread(PutNotificationsIdNotificationUnreadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/notifications/{idNotification}/unread"
        body: "body"
      };
    }
    // getNotificationsByIdNotificationByField()
    rpc GetNotificationsIdNotificationField(GetNotificationsIdNotificationFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/notifications/{idNotification}/{field}"
      };
    }
    // addOrganizations()
    rpc PostOrganizations(PostOrganizationsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/organizations"
        body: "body"
      };
    }
    // getOrganizationsByIdOrg()
    rpc GetOrganizationsIdOrg(GetOrganizationsIdOrgRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}"
      };
    }
    // updateOrganizationsByIdOrg()
    rpc PutOrganizationsIdOrg(PutOrganizationsIdOrgRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}"
        body: "body"
      };
    }
    // deleteOrganizationsByIdOrg()
    rpc DeleteOrganizationsIdOrg(DeleteOrganizationsIdOrgRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/organizations/{idOrg}"
      };
    }
    // getOrganizationsActionsByIdOrg()
    rpc GetOrganizationsIdOrgActions(GetOrganizationsIdOrgActionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/actions"
      };
    }
    // getOrganizationsBoardsByIdOrg()
    rpc GetOrganizationsIdOrgBoards(GetOrganizationsIdOrgBoardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/boards"
      };
    }
    // getOrganizationsBoardsByIdOrgByFilter()
    rpc GetOrganizationsIdOrgBoardsFilter(GetOrganizationsIdOrgBoardsFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/boards/{filter}"
      };
    }
    // getOrganizationsDeltasByIdOrg()
    rpc GetOrganizationsIdOrgDeltas(GetOrganizationsIdOrgDeltasRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/deltas"
      };
    }
    // updateOrganizationsDescByIdOrg()
    rpc PutOrganizationsIdOrgDesc(PutOrganizationsIdOrgDescRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/desc"
        body: "body"
      };
    }
    // updateOrganizationsDisplayNameByIdOrg()
    rpc PutOrganizationsIdOrgDisplayName(PutOrganizationsIdOrgDisplayNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/displayName"
        body: "body"
      };
    }
    // addOrganizationsLogoByIdOrg()
    rpc PostOrganizationsIdOrgLogo(PostOrganizationsIdOrgLogoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/organizations/{idOrg}/logo"
        body: "body"
      };
    }
    // deleteOrganizationsLogoByIdOrg()
    rpc DeleteOrganizationsIdOrgLogo(DeleteOrganizationsIdOrgLogoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/organizations/{idOrg}/logo"
      };
    }
    // getOrganizationsMembersByIdOrg()
    rpc GetOrganizationsIdOrgMembers(GetOrganizationsIdOrgMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/members"
      };
    }
    // updateOrganizationsMembersByIdOrg()
    rpc PutOrganizationsIdOrgMembers(PutOrganizationsIdOrgMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/members"
        body: "body"
      };
    }
    // getOrganizationsMembersByIdOrgByFilter()
    rpc GetOrganizationsIdOrgMembersFilter(GetOrganizationsIdOrgMembersFilterRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/members/{filter}"
      };
    }
    // updateOrganizationsMembersByIdOrgByIdMember()
    rpc PutOrganizationsIdOrgMembersIdMember(PutOrganizationsIdOrgMembersIdMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/members/{idMember}"
        body: "body"
      };
    }
    // deleteOrganizationsMembersByIdOrgByIdMember()
    rpc DeleteOrganizationsIdOrgMembersIdMember(DeleteOrganizationsIdOrgMembersIdMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/organizations/{idOrg}/members/{idMember}"
      };
    }
    // deleteOrganizationsMembersAllByIdOrgByIdMember()
    rpc DeleteOrganizationsIdOrgMembersIdMemberAll(DeleteOrganizationsIdOrgMembersIdMemberAllRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/organizations/{idOrg}/members/{idMember}/all"
      };
    }
    // getOrganizationsMembersCardsByIdOrgByIdMember()
    rpc GetOrganizationsIdOrgMembersIdMemberCards(GetOrganizationsIdOrgMembersIdMemberCardsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/members/{idMember}/cards"
      };
    }
    // updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
    rpc PutOrganizationsIdOrgMembersIdMemberDeactivated(PutOrganizationsIdOrgMembersIdMemberDeactivatedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/members/{idMember}/deactivated"
        body: "body"
      };
    }
    // getOrganizationsMembersInvitedByIdOrg()
    rpc GetOrganizationsIdOrgMembersInvited(GetOrganizationsIdOrgMembersInvitedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/membersInvited"
      };
    }
    // getOrganizationsMembersInvitedByIdOrgByField()
    rpc GetOrganizationsIdOrgMembersInvitedField(GetOrganizationsIdOrgMembersInvitedFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/membersInvited/{field}"
      };
    }
    // getOrganizationsMembershipsByIdOrg()
    rpc GetOrganizationsIdOrgMemberships(GetOrganizationsIdOrgMembershipsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/memberships"
      };
    }
    // getOrganizationsMembershipsByIdOrgByIdMembership()
    rpc GetOrganizationsIdOrgMembershipsIdMembership(GetOrganizationsIdOrgMembershipsIdMembershipRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/memberships/{idMembership}"
      };
    }
    // updateOrganizationsMembershipsByIdOrgByIdMembership()
    rpc PutOrganizationsIdOrgMembershipsIdMembership(PutOrganizationsIdOrgMembershipsIdMembershipRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/memberships/{idMembership}"
        body: "body"
      };
    }
    // updateOrganizationsNameByIdOrg()
    rpc PutOrganizationsIdOrgName(PutOrganizationsIdOrgNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/name"
        body: "body"
      };
    }
    // updateOrganizationsPrefsAssociatedDomainByIdOrg()
    rpc PutOrganizationsIdOrgPrefsAssociatedDomain(PutOrganizationsIdOrgPrefsAssociatedDomainRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/prefs/associatedDomain"
        body: "body"
      };
    }
    // deleteOrganizationsPrefsAssociatedDomainByIdOrg()
    rpc DeleteOrganizationsIdOrgPrefsAssociatedDomain(DeleteOrganizationsIdOrgPrefsAssociatedDomainRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/organizations/{idOrg}/prefs/associatedDomain"
      };
    }
    // updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
    rpc PutOrganizationsIdOrgPrefsBoardVisibilityRestrictOrg(PutOrganizationsIdOrgPrefsBoardVisibilityRestrictOrgRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/prefs/boardVisibilityRestrict/org"
        body: "body"
      };
    }
    // updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
    rpc PutOrganizationsIdOrgPrefsBoardVisibilityRestrictPrivate(PutOrganizationsIdOrgPrefsBoardVisibilityRestrictPrivateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/prefs/boardVisibilityRestrict/private"
        body: "body"
      };
    }
    // updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
    rpc PutOrganizationsIdOrgPrefsBoardVisibilityRestrictPublic(PutOrganizationsIdOrgPrefsBoardVisibilityRestrictPublicRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/prefs/boardVisibilityRestrict/public"
        body: "body"
      };
    }
    // updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
    rpc PutOrganizationsIdOrgPrefsExternalMembersDisabled(PutOrganizationsIdOrgPrefsExternalMembersDisabledRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/prefs/externalMembersDisabled"
        body: "body"
      };
    }
    // updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
    rpc PutOrganizationsIdOrgPrefsGoogleAppsVersion(PutOrganizationsIdOrgPrefsGoogleAppsVersionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/prefs/googleAppsVersion"
        body: "body"
      };
    }
    // updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
    rpc PutOrganizationsIdOrgPrefsOrgInviteRestrict(PutOrganizationsIdOrgPrefsOrgInviteRestrictRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/prefs/orgInviteRestrict"
        body: "body"
      };
    }
    // deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
    rpc DeleteOrganizationsIdOrgPrefsOrgInviteRestrict(DeleteOrganizationsIdOrgPrefsOrgInviteRestrictRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/organizations/{idOrg}/prefs/orgInviteRestrict"
      };
    }
    // updateOrganizationsPrefsPermissionLevelByIdOrg()
    rpc PutOrganizationsIdOrgPrefsPermissionLevel(PutOrganizationsIdOrgPrefsPermissionLevelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/prefs/permissionLevel"
        body: "body"
      };
    }
    // updateOrganizationsWebsiteByIdOrg()
    rpc PutOrganizationsIdOrgWebsite(PutOrganizationsIdOrgWebsiteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/organizations/{idOrg}/website"
        body: "body"
      };
    }
    // getOrganizationsByIdOrgByField()
    rpc GetOrganizationsIdOrgField(GetOrganizationsIdOrgFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/organizations/{idOrg}/{field}"
      };
    }
    // getSearch()
    rpc GetSearch(GetSearchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/search"
      };
    }
    // getSearchMembers()
    rpc GetSearchMembers(GetSearchMembersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/search/members"
      };
    }
    // addSessions()
    rpc PostSessions(PostSessionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/sessions"
        body: "body"
      };
    }
    // getSessionsSocket()
    // 
    // This is the route for WebSocket requests.  See the socket API reference for a description of WebSocket usage.
    rpc GetSessionsSocket(GetSessionsSocketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/sessions/socket"
      };
    }
    // updateSessionsByIdSession()
    rpc PutSessionsIdSession(PutSessionsIdSessionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/sessions/{idSession}"
        body: "body"
      };
    }
    // updateSessionsStatusByIdSession()
    rpc PutSessionsIdSessionStatus(PutSessionsIdSessionStatusRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/sessions/{idSession}/status"
        body: "body"
      };
    }
    // getTokensByToken()
    rpc GetTokensToken(GetTokensTokenRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/tokens/{token}"
      };
    }
    // deleteTokensByToken()
    rpc DeleteTokensToken(DeleteTokensTokenRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/tokens/{token}"
      };
    }
    // getTokensMemberByToken()
    rpc GetTokensTokenMember(GetTokensTokenMemberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/tokens/{token}/member"
      };
    }
    // getTokensMemberByTokenByField()
    rpc GetTokensTokenMemberField(GetTokensTokenMemberFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/tokens/{token}/member/{field}"
      };
    }
    // getTokensWebhooksByToken()
    rpc GetTokensTokenWebhooks(GetTokensTokenWebhooksRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/tokens/{token}/webhooks"
      };
    }
    // updateTokensWebhooksByToken()
    rpc PutTokensTokenWebhooks(PutTokensTokenWebhooksRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/tokens/{token}/webhooks"
        body: "body"
      };
    }
    // addTokensWebhooksByToken()
    rpc PostTokensTokenWebhooks(PostTokensTokenWebhooksRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/tokens/{token}/webhooks"
        body: "body"
      };
    }
    // getTokensWebhooksByTokenByIdWebhook()
    rpc GetTokensTokenWebhooksIdWebhook(GetTokensTokenWebhooksIdWebhookRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/tokens/{token}/webhooks/{idWebhook}"
      };
    }
    // deleteTokensWebhooksByTokenByIdWebhook()
    rpc DeleteTokensTokenWebhooksIdWebhook(DeleteTokensTokenWebhooksIdWebhookRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/tokens/{token}/webhooks/{idWebhook}"
      };
    }
    // getTokensByTokenByField()
    rpc GetTokensTokenField(GetTokensTokenFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/tokens/{token}/{field}"
      };
    }
    // getTypesById()
    rpc GetTypesId(GetTypesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/types/{id}"
      };
    }
    // addWebhooks()
    rpc PostWebhooks(PostWebhooksRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/1/webhooks"
        body: "body"
      };
    }
    // updateWebhooks()
    rpc PutWebhooks(PutWebhooksRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/webhooks/"
        body: "body"
      };
    }
    // getWebhooksByIdWebhook()
    rpc GetWebhooksIdWebhook(GetWebhooksIdWebhookRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/webhooks/{idWebhook}"
      };
    }
    // updateWebhooksByIdWebhook()
    rpc PutWebhooksIdWebhook(PutWebhooksIdWebhookRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/webhooks/{idWebhook}"
        body: "body"
      };
    }
    // deleteWebhooksByIdWebhook()
    rpc DeleteWebhooksIdWebhook(DeleteWebhooksIdWebhookRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/1/webhooks/{idWebhook}"
      };
    }
    // updateWebhooksActiveByIdWebhook()
    rpc PutWebhooksIdWebhookActive(PutWebhooksIdWebhookActiveRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/webhooks/{idWebhook}/active"
        body: "body"
      };
    }
    // updateWebhooksCallbackURLByIdWebhook()
    rpc PutWebhooksIdWebhookCallbackURL(PutWebhooksIdWebhookCallbackURLRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/webhooks/{idWebhook}/callbackURL"
        body: "body"
      };
    }
    // updateWebhooksDescriptionByIdWebhook()
    rpc PutWebhooksIdWebhookDescription(PutWebhooksIdWebhookDescriptionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/webhooks/{idWebhook}/description"
        body: "body"
      };
    }
    // updateWebhooksIdModelByIdWebhook()
    rpc PutWebhooksIdWebhookIdModel(PutWebhooksIdWebhookIdModelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/1/webhooks/{idWebhook}/idModel"
        body: "body"
      };
    }
    // getWebhooksByIdWebhookByField()
    rpc GetWebhooksIdWebhookField(GetWebhooksIdWebhookFieldRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/1/webhooks/{idWebhook}/{field}"
      };
    }
}

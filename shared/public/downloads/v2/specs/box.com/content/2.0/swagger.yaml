swagger: '2.0'
schemes:
  - https
host: api.box.com
basePath: /2.0
info:
  description: The Box Content API gives you access to secure content management and content experience features for use in your own app. It strives to be RESTful and is organized around the main resources you’re familiar with from the Box web interface.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
  title: Box 2.0
  version: '2.0'
  x-apisguru-categories:
    - cloud
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_852979584169410562_etZ6V0rx_400x400.jpg'
  x-origin:
    - format: swagger
      url: 'https://raw.githubusercontent.com/box/box-openapi/master/v2.0/openapi-v2.json'
      version: '2.0'
  x-preferred: true
  x-providerName: box.com
  x-serviceName: content
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  OAuth2Security:
    authorizationUrl: 'https://account.box.com/api/oauth2/authorize'
    flow: accessCode
    tokenUrl: 'https://api.box.com/oauth2/token'
    type: oauth2
security:
  - OAuth2Security: []
responses: {}
tags:
  - description: Folders operations
    name: Folders
  - description: Files operations
    name: Files
  - description: Web Links operations
    name: Web Links
  - description: Metadata operations
    name: Metadata
  - description: Collections operations
    name: Collections
  - description: Search operations
    name: Search
  - description: Collaborations operations
    name: Collaborations
  - description: Shared Items operations
    name: Shared Items
  - description: Comments operations
    name: Comments
  - description: Tasks operations
    name: Tasks
  - description: Events operations
    name: Events
  - description: Webhooks operations
    name: Webhooks
  - description: Users operations
    name: Users
  - description: Groups operations
    name: Groups
  - description: Devices operations
    name: Devices
  - description: Retention Policies operations
    name: Retention Policies
  - description: Legal Holds Policies operations
    name: Legal Holds Policies
paths:
  /collaborations:
    get:
      description: Used to retrieve all pending collaboration invites for this user.
      externalDocs:
        url: 'https://docs.box.com/reference#get-pending-collaborations'
      operationId: getPendingCollaborations
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: Must be 'pending'
          enum:
            - pending
          in: query
          name: status
          required: true
          type: string
      responses:
        '200':
          description: 'A collection of pending collaboration objects are returned. If the user has no pending collaborations, the collection will be empty.'
          examples:
            application/json:
              entries:
                - accessible_by:
                    id: '181216415'
                    login: sean+awesome@box.com
                    name: sean rose
                    type: user
                  created_at: '2012-10-17T23:14:42-07:00'
                  created_by:
                    id: '11993747'
                    login: sean@box.com
                    name: sean
                    type: user
                  id: '27513888'
                  modified_at: '2012-10-17T23:14:42-07:00'
                  role: Editor
                  status: Pending
                  type: collaboration
              total_count: 1
          schema:
            $ref: '#/definitions/CollaborationList'
        default:
          description: Get pending collaborations operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Pending Collaborations
      tags:
        - Collaborations
    post:
      description: 'Used to add a collaboration for a single user or a single group to a folder. Either an email address, a user ID, or a group id can be used to create the collaboration. If the collaboration is being created with a group, access to this endpoint is granted based on the group''s invitability_level.'
      externalDocs:
        url: 'https://docs.box.com/reference#add-a-collaboration'
      operationId: createCollaboration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Collaboration'
      responses:
        '201':
          description: The new collaboration object is returned. Errors may occur if the IDs are invalid or if the user does not have permissions to create a collaboration.
          examples:
            application/json:
              accessible_by:
                id: '18203124'
                login: sean+test@box.com
                name: sean
                type: user
              acknowledged_at: '2012-12-12T11:30:43-08:00'
              created_at: '2012-12-12T10:54:37-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              id: '791293'
              item:
                etag: '0'
                id: '11446500'
                name: Shared Pictures
                sequence_id: '0'
                type: folder
              modified_at: '2012-12-12T11:30:43-08:00'
              role: editor
              status: accepted
              type: collaboration
          schema:
            $ref: '#/definitions/Collaboration'
        default:
          description: Add a collaboration operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Collaboration
      tags:
        - Collaborations
  '/collaborations/{COLLAB_ID}':
    delete:
      description: Used to delete a single collaboration.
      externalDocs:
        url: 'https://docs.box.com/reference#remove-a-collaboration'
      operationId: deleteCollaboration
      parameters:
        - in: path
          name: COLLAB_ID
          required: true
          type: string
      responses:
        '204':
          description: 'A blank 204 response is returned if the ID is valid, and the user has permissions to remove the collaboration.'
        default:
          description: Delete a collaboration operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Collaboration
      tags:
        - Collaborations
    get:
      description: 'Used to get information about a single collaboration. All collaborations for a single folder can be retrieved through GET /folders/{id}/collaborations. A complete list of the user’s pending collaborations can also be retrieved.'
      externalDocs:
        url: 'https://docs.box.com/reference#get-collabs'
      operationId: getCollaboration
      parameters:
        - in: path
          name: COLLAB_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: Can only be pending
          enum:
            - pending
          in: query
          name: status
          required: false
          type: string
      responses:
        '200':
          description: The collaboration object is returned. Errors may occur if the IDs are invalid or if the user does not have permissions to see the collaboration.
          schema:
            $ref: '#/definitions/Collaboration'
        default:
          description: Get a collaboration error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Collaboration
      tags:
        - Collaborations
    put:
      description: Used to edit an existing collaboration. Descriptions of the various roles can be found here.
      externalDocs:
        url: 'https://docs.box.com/reference#edit-a-collaboration'
      operationId: updateCollaboation
      parameters:
        - in: path
          name: COLLAB_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Collaboration'
      responses:
        '200':
          description: The updated collaboration object is returned.
          examples:
            application/json:
              accessible_by:
                id: '18203124'
                login: sean+test@box.com
                name: sean
                type: user
              acknowledged_at: '2012-12-12T11:30:43-08:00'
              created_at: '2012-12-12T10:54:37-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              id: '791293'
              item:
                etag: '0'
                id: '11446500'
                name: Shared Pictures
                sequence_id: '0'
                type: folder
              modified_at: '2012-12-12T11:30:43-08:00'
              role: viewer
              status: accepted
              type: collaboration
          schema:
            $ref: '#/definitions/Collaboration'
        '204':
          description: 'If the role is changed to owner, the collaboration is deleted with a new one created for the previous owner.'
          schema:
            $ref: '#/definitions/Collaboration'
        default:
          description: Update collaboration error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Collaboration
      tags:
        - Collaborations
  /collections:
    get:
      description: 'Retrieves the collections for the given user. Currently, only the favorites collection is supported.'
      externalDocs:
        url: 'https://docs.box.com/reference#get-collections'
      operationId: getCollections
      parameters: []
      responses:
        '200':
          description: Collections for the given user
          examples:
            application/json:
              entries:
                - collection_type: favorites
                  id: '405151'
                  name: Favorites
                  type: collection
              limit: 100
              offset: 0
              total_count: 1
          schema:
            $ref: '#/definitions/CollectionList'
        default:
          description: Get Collections error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Collections
      tags:
        - Collections
  '/collections/{COLLECTION_ID}/items':
    get:
      description: |-
        Retrieves the files and/or folders contained within this collection. Collection item lists behave a lot like getting a folder’s items.
        Paginated results can be retrieved using the limit and offset parameters.
        Sub-object fields can be requested via the ?fields parameter
      externalDocs:
        url: 'https://docs.box.com/reference#collections-beta'
      operationId: getCollectionItems
      parameters:
        - in: path
          name: COLLECTION_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: The maximum number of items to return in a page.
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: 'The offset at which to begin the response. An offset of value of 0 will start at the beginning of the folder-listing. Offset of 2 would start at the 2nd record, not the second page. Note: If there are hidden items in your previous response, your next offset should be = offset + limit, not the # of records you received back.'
          in: query
          name: offset
          required: false
          type: string
      responses:
        '200':
          description: An array of items contained in the collection is returned.
          schema:
            $ref: '#/definitions/ItemReferenceList'
        default:
          description: 'An error is thrown if the collection does not exist, or if any of the parameters are invalid.'
          schema:
            $ref: '#/definitions/Error'
      summary: Get Collection Items
      tags:
        - Collections
  /comments:
    post:
      description: Used to add a comment by the user to a specific file or comment (i.e. as a reply comment).
      externalDocs:
        url: 'https://docs.box.com/reference#add-a-comment-to-an-item'
      operationId: createComment
      parameters:
        - description: Attribute(s) to include in the response.
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        '201':
          description: 'The new comment object is returned. Errors may occur if the item id is invalid, the item type is invalid/unsupported, you don’t include either a message or a tagged_message, or if the user does not have access to the item being commented on.'
          examples:
            application/json:
              created_at: '2012-12-12T11:25:01-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              id: '191969'
              is_reply_comment: false
              item:
                id: '5000948880'
                type: file
              message: These tigers are cool!
              modified_at: '2012-12-12T11:25:01-08:00'
              type: comment
          schema:
            $ref: '#/definitions/Comment'
        default:
          description: 'Errors may occur if the item id is invalid, the item type is invalid/unsupported, you don’t include either a message or a tagged_message, or if the user does not have access to the item being commented on.'
          schema:
            $ref: '#/definitions/Error'
      summary: Create Comment
      tags:
        - Comments
  '/comments/{COMMENT_ID}':
    delete:
      description: Permanently deletes a comment.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-a-comment'
      operationId: deleteComment
      parameters:
        - in: path
          name: COMMENT_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 response is returned to confirm deletion of the comment. Errors can be thrown if the ID is invalid or if the user is not authorized to delete this particular comment.
        default:
          description: Errors can be thrown if the ID is invalid or if the user is not authorized to delete this particular comment.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Comment
      tags:
        - Comments
    get:
      description: Used to retrieve the message and metadata about a specific comment. Information about the user who created the comment is also included.
      externalDocs:
        url: 'https://docs.box.com/reference#comments'
      operationId: getComment
      parameters:
        - in: path
          name: COMMENT_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response.
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: A full comment object is returned is the ID is valid and if the user has access to the comment.
          examples:
            application/json:
              created_at: '2012-12-12T11:25:01-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              id: '191969'
              is_reply_comment: false
              item:
                id: '5000948880'
                type: file
              message: These tigers are cool!
              modified_at: '2012-12-12T11:25:01-08:00'
              type: comment
          schema:
            $ref: '#/definitions/Comment'
        default:
          description: Get comment error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Comment
      tags:
        - Comments
    put:
      description: Used to update the message of the comment.
      externalDocs:
        url: 'https://docs.box.com/reference#change-a-comments-message'
      operationId: updateComment
      parameters:
        - in: path
          name: COMMENT_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response.
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        '200':
          description: The full updated comment object is returned if the ID is valid and if the user has access to the comment.
          examples:
            application/json:
              created_at: '2012-12-12T11:25:01-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              id: '191969'
              is_reply_comment: false
              item:
                id: '5000948880'
                type: file
              message: These tigers are cool!
              modified_at: '2012-12-12T11:25:01-08:00'
              type: comment
          schema:
            $ref: '#/definitions/Comment'
        default:
          description: Update comment error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Comment
      tags:
        - Comments
  '/device_pinners/{ID}':
    delete:
      description: Delete individual device pin.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-device-pin'
      operationId: deleteDevicePin
      parameters:
        - in: path
          name: ID
          required: true
          type: string
      responses:
        '204':
          description: A 204 will be returned if deletion is successful
        default:
          description: Delete device pinner error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Device Pin
      tags:
        - Devices
    get:
      description: Gets information about an individual device pin.
      externalDocs:
        url: 'https://docs.box.com/reference#get-device-pin'
      operationId: getDevicePin
      parameters:
        - in: path
          name: ID
          required: true
          type: string
      responses:
        '200':
          description: Returns information about a single device pin.
          examples:
            application/json:
              created_at: '2014-09-23T22:56:18-07:00'
              id: '788804'
              modified_at: '2014-09-23T22:56:18-07:00'
              owned_by:
                id: '222276603'
                login: ted+boxworks2@box.com
                name: Ted Blosser
                type: user
              product_name: iPad
              type: device_pinner
          schema:
            $ref: '#/definitions/DevicePinner'
        default:
          description: Get device pinner error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Device Pin
      tags:
        - Devices
  '/enterprises/{ENTERPRISE_ID}/device_pinners':
    get:
      description: Gets all the device pins within a given enterprise. Must be an enterprise admin with the manage enterprise scope to make this call.
      externalDocs:
        url: 'https://docs.box.com/reference#get-device-pins'
      operationId: getEnterpriseDevicePins
      parameters:
        - in: path
          name: ENTERPRISE_ID
          required: true
          type: string
        - description: Needs not be passed or can be empty for first invocation of the API. Use the one returned in response for each subsequent call.
          in: query
          name: marker
          required: false
          type: string
        - description: Default value is 100. Max value is 10000
          in: query
          name: limit
          required: false
          type: string
        - description: 'Default is "asc". Valid values are asc, desc. Case in-sensitive, ASC/DESC works just fine.'
          in: query
          name: direction
          required: false
          type: string
      responses:
        '200':
          description: Returns a list of device pins for a given enterprise.
          examples:
            application/json:
              entries:
                - id: '788804'
                  owned_by:
                    id: '222276603'
                    login: ted+boxworks2@box.com
                    name: Ted Blosser
                    type: user
                  product_name: iPad
                  type: device_pinner
                - id: '1003086'
                  owned_by:
                    id: '222276603'
                    login: ted+boxworks2@box.com
                    name: Ted Blosser
                    type: user
                  product_name: iPhone
                  type: device_pinner
              limit: 100
              order:
                - by: id
                  direction: ASC
          schema:
            $ref: '#/definitions/DevicePinnerList'
        default:
          description: Get device pinners for an enterprise error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Enterprise Device Pins
      tags:
        - Devices
  /events:
    get:
      description: |-
        Use this to get events for a given user. A chunk of event objects is returned for the user based on the parameters passed in. Parameters indicating how many chunks are left as well as the next stream_position are also returned.

        To retrieve Enterprise Events specify 'stream_type=admin_logs'. Retrieves up to a year' events for all users in an enterprise. Upper and lower bounds as well as filters can be applied to the results.
      externalDocs:
        url: 'https://docs.box.com/reference#get-events-for-a-user'
      operationId: getUserEvents
      parameters:
        - description: The location in the event stream at which you want to start receiving events. Can specify special case ‘now’ to get 0 events and the latest stream position for initialization.
          in: query
          name: stream_position
          required: false
          type: string
        - description: 'Limits the type of events returned: all: returns everything, changes: returns tree changes, sync: returns tree changes only for sync folders'
          enum:
            - all
            - changes
            - sync
            - admin_logs
          in: query
          name: stream_type
          required: false
          type: string
        - description: Limits the number of events returned
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: A comma-separated list of events to filter by
          in: query
          name: event_type
          required: false
          type: string
        - description: A lower bound on the timestamp of the events returned
          format: date-time
          in: query
          name: created_after
          required: false
          type: string
        - description: An upper bound on the timestamp of the events returned
          format: date-time
          in: query
          name: created_before
          required: false
          type: string
      responses:
        '200':
          description: A collection of events is returned. See the above table for descriptions of the event types.
          examples:
            application/json:
              chunk_size: 1
              entries:
                - created_at: '2012-12-12T10:53:43-08:00'
                  created_by:
                    id: '17738362'
                    login: sean@box.com
                    name: sean rose
                    type: user
                  event_id: f82c3ba03e41f7e8a7608363cc6c0390183c3f83
                  event_type: ITEM_CREATE
                  recorded_at: '2012-12-12T10:53:48-08:00'
                  session_id: 70090280850c8d2a1933c1
                  source:
                    created_at: '2012-12-12T10:53:43-08:00'
                    created_by:
                      id: '17738362'
                      login: sean@box.com
                      name: sean rose
                      type: user
                    etag: '0'
                    id: '11446498'
                    item_status: active
                    modified_at: '2012-12-12T10:53:43-08:00'
                    modified_by:
                      id: '17738362'
                      login: sean@box.com
                      name: sean rose
                      type: user
                    name: Pictures
                    owned_by:
                      id: '17738362'
                      login: sean@box.com
                      name: sean rose
                      type: user
                    parent:
                      id: '0'
                      name: All Files
                      type: folder
                    sequence_id: '0'
                    size: 0
                    synced: false
                    type: folder
                  type: event
              next_stream_position: 1348790499819
          schema:
            $ref: '#/definitions/EventList'
        default:
          description: Get events error
          schema:
            $ref: '#/definitions/Error'
      summary: 'User Events, Enterprise Events'
      tags:
        - Events
    options:
      description: |-
        To get real-time notification of activity in a Box account, use the long poll feature of the /events API. To do so, first call the /events API with an OPTIONS call to retrieve the long poll URL to use. Next, make a GET request to the provided URL to begin listening for events. If an event occurs within an account you are monitoring, you will receive a response with the value new_change. It’s important to note that this response will not come with any other details, but should serve as a prompt to take further action such as calling the /events endpoint with your last known stream_position. After sending this response, the server will close the connection and you will need to repeat the long poll process to begin listening for events again.
        If no events occur for a period of time after you make the GET request to the long poll URL, you will receive a response with the value reconnect. When you receive this response, you’ll make another OPTIONS call to the /events endpoint and repeat the long poll process.
        If you receive no events in retry_timeout seconds, you should make another GET request to the real time server (i.e. URL in the response). This might be necessary in case you do not receive the reconnect message in the face of network errors.
        If you receive max_retries error when making GET requests to the real time server, you should make another OPTIONS request.
      externalDocs:
        url: 'https://docs.box.com/reference#long-polling'
      operationId: eventLongPolling
      parameters: []
      responses:
        '200':
          description: Paginated array of Realtime server instances
          schema:
            $ref: '#/definitions/RealtimeServerList'
        default:
          description: Options Long polling error
          schema:
            $ref: '#/definitions/Error'
      summary: Long polling
      tags:
        - Events
  /file_version_legal_holds:
    get:
      description: Get list of non-deleted Holds for a single Policy.
      externalDocs:
        url: 'https://docs.box.com/reference#get-list-of-file-version-legal-holds'
      operationId: getFileVersionLegalHoldPolicies
      parameters:
        - in: query
          name: policy_id
          required: true
          type: string
      responses:
        '200':
          description: 'Returns the list of File Version Legal Holds for the passed in Policy. By default, will only return only type, and id, but you can specify more by using the fields parameter.'
          schema:
            $ref: '#/definitions/FileVersionLegalHoldList'
        default:
          description: Get File Version Legal Hold policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Get List of File Version Legal Holds
      tags:
        - Legal Hold Policies
  '/file_version_legal_holds/{ID}':
    get:
      description: Get details of a single File Version Legal Hold.
      externalDocs:
        url: 'https://docs.box.com/reference#get-hold-by-id'
      operationId: getFileVersionLegalHoldPolicy
      parameters:
        - in: path
          name: ID
          required: true
          type: string
      responses:
        '200':
          description: 'If the ID is valid, information about the Hold is returned with a 200.'
          schema:
            $ref: '#/definitions/FileVersionLegalHold'
        '404':
          description: 'If the ID is for a non-existent Hold, a 404 is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get File Version Legal Hold policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Get File Version Legal Hold
      tags:
        - Legal Hold Policies
  /file_version_retentions:
    get:
      description: Retrieves all file version retentions for the given enterprise.
      externalDocs:
        url: 'https://docs.box.com/reference#get-file-version-retentions'
      operationId: getFileVersionRetentions
      parameters:
        - description: A file id to filter the file version retentions by.
          in: query
          name: file_id
          required: false
          type: string
        - description: A file version id to filter the file version retentions by.
          in: query
          name: file_version_id
          required: false
          type: string
        - description: A policy id to filter the file version retentions by.
          in: query
          name: policy_id
          required: false
          type: string
        - description: 'The disposition action of the retention policy. This action can be permanently_delete, which will cause the content retained by the policy to be permanently deleted, or remove_retention, which will lift the retention policy from the content, allowing it to be deleted by users, once the retention policy time period has passed.'
          enum:
            - permanently_delete
            - remove_retention
          in: query
          name: disposition_action
          required: false
          type: string
        - description: See content times for formatting
          in: query
          name: disposition_before
          required: false
          type: string
        - description: See content times for formatting
          in: query
          name: disposition_after
          required: false
          type: string
        - description: The maximum number of items to return in a page
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: Base 64 encoded string that represents where the paging should being. It should be left blank to begin paging.
          in: query
          name: marker
          required: false
          type: string
      responses:
        '200':
          description: 'Returns the list of all file version retentions for the enterprise. If the query parameters are given, only the file version retentions that match the query parameters are returned.'
          examples:
            application/json:
              entries:
                - id: '112725'
                  type: file_version_retention
                - id: '112729'
                  type: file_version_retention
                - id: '112733'
                  type: file_version_retention
              limit: 100
              order:
                - by: file_version_id
                  direction: ASC
          schema:
            $ref: '#/definitions/FileVersionRetentionList'
        default:
          description: Get File version retentions error
          schema:
            $ref: '#/definitions/Error'
      summary: Get File Version Retentions
      tags:
        - Files
  '/file_version_retentions/{FILE_VERSION_RETENTION_ID}':
    get:
      description: Used to retrieve information about a file version retention
      externalDocs:
        url: 'https://docs.box.com/reference#get-file-version-retention'
      operationId: getFileVersionRetention
      parameters:
        - in: path
          name: FILE_VERSION_RETENTION_ID
          required: true
          type: string
      responses:
        '200':
          description: The specified file version retention will be returned upon success.
          examples:
            application/json:
              applied_at: '2015-08-06T22:02:24-07:00'
              disposition_at: '2016-08-06T21:45:28-07:00'
              file:
                etag: '2'
                id: '5011706273'
                type: file_version
              file_version:
                id: '124887629'
                sha1: 4262d6250b0e6f440dca43a2337bd4621bad9136
                type: file_version
              id: '112729'
              type: file_version_retention
              winning_retention_policy:
                id: '41173'
                policy_name: Tax Documents
                type: retention_policy
          schema:
            $ref: '#/definitions/FileVersionRetention'
        '404':
          description: 'If the file version retention specified does not exist, a 404 HTTP status code of not_found is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get file version Retention error
          schema:
            $ref: '#/definitions/Error'
      summary: Get File Version Retention
      tags:
        - Files
  /files/content:
    options:
      description: The Pre-flight check API will verify that a file will be accepted by Box before you send all the bytes over the wire.
      externalDocs:
        url: 'https://docs.box.com/reference#preflight-check'
      operationId: fileUploadPreflightCheck
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/BoxFile'
      responses:
        '200':
          description: The upload would be successful
        default:
          description: File upload preflight check error
          schema:
            $ref: '#/definitions/Error'
      summary: File upload preflight check
      tags:
        - Files
  '/files/{FILE_ID}':
    delete:
      description: Discards a file to the trash. The etag of the file can be included as an ‘If-Match’ header to prevent race conditions.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-a-file'
      operationId: deleteFile
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - description: The etag of the file. This is in the ‘etag’ field of the file object.
          in: header
          name: If-Match
          required: false
          type: string
      responses:
        '204':
          description: An empty 204 response is sent to confirm deletion of the file.
        '412':
          description: 'If the If-Match header is sent and fails, a 412 Precondition Failed error is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Delete file error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete File
      tags:
        - Files
    get:
      description: Used to retrieve the metadata about a file.
      externalDocs:
        url: 'https://docs.box.com/reference#files'
      operationId: getFile
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response.
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: A full file object is returned if the ID is valid and if the user has access to the file.
          examples:
            application/json:
              created_at: '2012-12-12T10:55:30-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: a picture of tigers
              etag: '3'
              file_version:
                id: '26261748416'
                sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
                type: file_version
              id: '5000948880'
              item_status: active
              modified_at: '2012-12-12T11:04:26-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: tigers.jpeg
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                etag: '1'
                id: '11446498'
                name: Pictures
                sequence_id: '1'
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                  - etag: '1'
                    id: '11446498'
                    name: Pictures
                    sequence_id: '1'
                    type: folder
                total_count: 2
              sequence_id: '3'
              sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
              shared_link:
                access: open
                download_count: 0
                download_url: 'https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg'
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/rh935iit6ewrmw0unyul'
              size: 629644
              type: file
          schema:
            $ref: '#/definitions/BoxFile'
        '404':
          description: File Not Found
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: Media Type Not Supported
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get file info error
          schema:
            $ref: '#/definitions/Error'
      summary: 'Get File''s Info, Get Embed Link'
      tags:
        - Files
    post:
      description: 'Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same name in that parent folder, the new parent folder and/or new name will need to be included in the request.'
      externalDocs:
        url: 'https://docs.box.com/reference#restore-a-trashed-item'
      operationId: restoreTrashedFile
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/BoxFile'
      responses:
        '201':
          description: The full item will be returned with a 201 Created status. By default it is restored to the parent folder it was in before it was trashed.
          examples:
            application/json:
              content_created_at: '2013-01-30T18:43:56-08:00'
              content_modified_at: '2013-02-07T10:56:58-08:00'
              created_at: '2013-01-30T18:43:56-08:00'
              created_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              description: ''
              etag: '3'
              id: '5859258256'
              item_status: active
              modified_at: '2013-02-07T10:56:58-08:00'
              modified_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              name: Screenshot_1_30_13_6_37_PM.png
              owned_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                total_count: 1
              sequence_id: '3'
              sha1: 4bd9e98652799fc57cf9423e13629c151152ce6c
              shared_link:
                access: open
                download_count: 0
                download_url: 'https://seanrose.box.com/shared/static/ebgti08mtmhbpb4vlp55.png'
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 4
                url: 'https://seanrose.box.com/s/ebgti08mtmhbpb4vlp55'
              size: 163265
              type: file
          schema:
            $ref: '#/definitions/BoxFile'
        '403':
          description: The user doesn’t have access to the folder the item is being restored to or the user doesn’t have permission to restore items from the trash
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The item is not in the trash
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: There is an item with the same name in the folder the item is being restored to
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Restore file error
          schema:
            $ref: '#/definitions/Error'
      summary: Restore Item
      tags:
        - Files
    put:
      description: |-
        Used to update individual or multiple fields in the file object, including renaming the file, changing its description, and creating a shared link for the file. To move a file, change the ID of its parent folder. An optional If-Match header can be included to prevent race conditions.

        To lock and unlock files, you execute a PUT operation on the /files/{file id} endpoint and set or clear the lock properties on the file.

        Used to create a shared link for this particular file. Please see here for more information on the permissions available for shared links. In order to get default shared link status, set it to an empty access level, i.e. {"shared_link": {}}. In order to disable a shared link, send this same type of PUT request with the value of shared_link set to null, i.e. {"shared_link": null}
      externalDocs:
        url: 'https://docs.box.com/reference#update-a-files-information'
      operationId: updateFileInfo
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/BoxFile'
        - description: The etag of the file can be included as an ‘If-Match’ header to prevent race conditions.
          in: header
          name: If-Match
          required: false
          type: string
      responses:
        '200':
          description: A full file object is returned if the ID is valid and if the user has access to the file.
          examples:
            application/json:
              created_at: '2012-12-12T10:55:30-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: a picture of tigers
              etag: '3'
              id: '5000948880'
              item_status: active
              modified_at: '2012-12-12T11:04:26-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: new name.jpg
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                etag: '1'
                id: '11446498'
                name: Pictures
                sequence_id: '1'
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                  - etag: '1'
                    id: '11446498'
                    name: Pictures
                    sequence_id: '1'
                    type: folder
                total_count: 2
              sequence_id: '3'
              sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
              shared_link:
                access: open
                download_count: 0
                download_url: 'https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg'
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/rh935iit6ewrmw0unyul'
              size: 629644
              type: file
          schema:
            $ref: '#/definitions/BoxFile'
        default:
          description: Update file info error
          schema:
            $ref: '#/definitions/Error'
      summary: 'Update File Info, Lock and Unlock, Create Shared Link'
      tags:
        - Files
  '/files/{FILE_ID}/collaborations':
    get:
      description: Use this to get a list of all the collaborations on a file
      externalDocs:
        url: 'https://docs.box.com/reference#get-file-collaborations'
      operationId: getFileCollaborations
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: The maximum number of items to return in a page
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: The item at which to begin the response
          format: int32
          in: query
          name: offset
          required: false
          type: integer
      responses:
        '200':
          description: A collection of collaboration objects is returned
          examples:
            application/json:
              entries:
                - created_at: '2012-12-12T11:25:01-08:00'
                  created_by:
                    id: '17738362'
                    login: sean@box.com
                    name: sean rose
                    type: user
                  id: '191969'
                  is_reply_comment: false
                  item:
                    id: '5000948880'
                    type: file
                  message: These tigers are cool!
                  modified_at: '2012-12-12T11:25:01-08:00'
                  type: comment
              total_count: 1
          schema:
            $ref: '#/definitions/CollaborationList'
        default:
          description: Get File's Collaborations error
          schema:
            $ref: '#/definitions/Error'
      summary: Get File's Collaborations
      tags:
        - Files
  '/files/{FILE_ID}/comments':
    get:
      description: 'Retrieves the comments on a particular file, if any exist.'
      externalDocs:
        url: 'https://docs.box.com/reference#view-the-comments-on-a-file'
      operationId: getFileComments
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: 'A collection of comment objects are returned. If there are no comments on the file, an empty comments array is returned.'
          examples:
            application/json:
              entries:
                - created_at: '2012-12-12T11:25:01-08:00'
                  created_by:
                    id: '17738362'
                    login: sean@box.com
                    name: sean rose
                    type: user
                  id: '191969'
                  is_reply_comment: false
                  item:
                    id: '5000948880'
                    type: file
                  message: These tigers are cool!
                  modified_at: '2012-12-12T11:25:01-08:00'
                  type: comment
              total_count: 1
          schema:
            $ref: '#/definitions/CommentList'
        default:
          description: Get file's comments error
          schema:
            $ref: '#/definitions/Error'
      summary: Get File's Comments
      tags:
        - Files
  '/files/{FILE_ID}/content':
    get:
      description: Retrieves the actual data of the file. An optional version parameter can be set to download a previous version of the file.
      externalDocs:
        url: 'https://docs.box.com/reference#download-a-file'
      operationId: getFileContent
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - description: 'The range value in bytes. Format should be bytes={start_range}-{end_range}'
          in: header
          name: Range
          required: false
          type: string
        - description: The ID specific version of this file to download.
          in: query
          name: version
          required: false
          type: string
        - description: The shared link for this item. Format should be shared_link=SHARED_LINK
          in: header
          name: BoxApi
          required: false
          type: string
      responses:
        '202':
          description: 'If the file is not ready to be downloaded (i.e. in the case where the file was uploaded immediately before the download request), a response with an HTTP status of 202 Accepted will be returned with a Retry-After header indicating the time in seconds after which the file will be available for the client to download.'
        '302':
          description: 'If the file is available to be downloaded, the response will be a 302 Found to a URL at dl.boxcloud.com. The dl.boxcloud.com URL is not persistent. Clients will need to follow the redirect in order to actually download the file. The raw data of the file is returned unless the file ID is invalid or the user does not have access to it.'
        default:
          description: Download file error
          schema:
            $ref: '#/definitions/Error'
      summary: Download File
      tags:
        - Files
  '/files/{FILE_ID}/copy':
    post:
      description: Used to create a copy of a file in another folder. The original version of the file will not be altered.
      externalDocs:
        url: 'https://docs.box.com/reference#copy-a-file'
      operationId: copyFile
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CopyFile'
      responses:
        '201':
          description: A full file object is returned if the ID is valid and if the update is successful.
          examples:
            application/json:
              created_at: '2012-12-12T10:55:30-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: a picture of tigers
              etag: '3'
              id: '5000948880'
              item_status: active
              modified_at: '2012-12-12T11:04:26-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: tigers.jpeg
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                etag: '1'
                id: '11446498'
                name: Pictures
                sequence_id: '1'
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                  - etag: '1'
                    id: '11446498'
                    name: Pictures
                    sequence_id: '1'
                    type: folder
                total_count: 2
              sequence_id: '3'
              sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
              shared_link:
                access: open
                download_count: 0
                download_url: 'https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg'
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/rh935iit6ewrmw0unyul'
              size: 629644
              type: file
          schema:
            $ref: '#/definitions/BoxFile'
        '409':
          description: 'A 409 will be returned if the intended destination folder is the same, as this will cause a name collision.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Copy file error
          schema:
            $ref: '#/definitions/Error'
      summary: Copy File
      tags:
        - Files
  '/files/{FILE_ID}/metadata':
    get:
      description: Used to retrieve all metadata associated with a given file
      externalDocs:
        url: 'https://docs.box.com/reference#create-web-link'
      operationId: getAllFileMetadata
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
      responses:
        '200':
          description: An array of metadata instances associated with the file.
          examples:
            application/json:
              entries:
                - $id: 50ba0dba-0f89-4395-b867-3e057c1f6ed9
                  $parent: file_5010739061
                  $scope: enterprise_12345
                  $template: documentFlow
                  $type: documentFlow-452b4c9d-c3ad-4ac7-b1ad-9d5192f2fc5f
                  $typeVersion: 2
                  $version: 4
                  currentDocumentStage: Init
                  needsApprovalFrom: Smith
                - $id: 15d1014a-06c2-47ad-9916-014eab456194
                  $parent: file_5010739061
                  $scope: enterprise_12345
                  $template: productInfo
                  $type: productInfo-9d7b6993-b09e-4e52-b197-e42f0ea995b9
                  $typeVersion: 1
                  $version: 2
                  description: Watch
                  skuNumber: 45334223
                - $id: b6f36cbc-fc7a-4eda-8889-130f350cc057
                  $parent: file_5010739061
                  $scope: global
                  $template: properties
                  $type: properties
                  $typeVersion: 2
                  $version: 0
                  Popularity: '25'
              limit: 100
          schema:
            $ref: '#/definitions/MetadataList'
      summary: Get all Metadata on File
      tags:
        - Metadata
  '/files/{FILE_ID}/metadata/{SCOPE}/{TEMPLATE}':
    delete:
      description: 'Used to delete the template instance. To delete custom key:value pairs within a template instance, you should refer to the updating metadata section.'
      externalDocs:
        url: 'https://docs.box.com/reference#delete-metadata'
      operationId: deleteFileMetadata
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
      responses:
        '204':
          description: An empty HTTP 204 response to confirm the deletion of the template instance.
        default:
          description: Delete file metadata error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Metadata on File
      tags:
        - Metadata
    get:
      description: Used to retrieve the metadata template instance for a corresponding Box file.
      externalDocs:
        url: 'https://docs.box.com/reference#get-metadata'
      operationId: getFileMetadata
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
      responses:
        '201':
          description: 'An instance of the template that includes key:value pairs defined by a user or application.'
          examples:
            application/json:
              $id: 2094c584-68e1-475c-a581-534a4609594e
              $parent: file_5010739061
              $scope: enterprise_12345
              $template: marketingCollateral
              $type: marketingCollateral-d086c908-2498-4d3e-8a1f-01e82bfc2abe
              $typeVersion: 0
              $version: 0
              audience1: internal
              author: Jones
              competitiveDocument: 'no'
              currentState: proposal
              documentType: Q1 plans
              status: active
          schema:
            $ref: '#/definitions/Metadata'
        '404':
          description: 'If there is no template instance present, a 404 HTTP status code of not_found will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get File metdata error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Metadata on File
      tags:
        - Metadata
    post:
      description: 'Used to create the metadata template instance for a corresponding Box file. When creating metadata, only values that adhere to the metadata template schema will be accepted.'
      externalDocs:
        url: 'https://docs.box.com/reference#create-metadata'
      operationId: createFileMetadata
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Metadata'
      responses:
        '200':
          description: 'An instance of the template that includes key:value pairs defined by a user or application.'
          examples:
            application/json:
              $id: 2094c584-68e1-475c-a581-534a4609594e
              $parent: file_5010739061
              $scope: enterprise_12345
              $template: marketingCollateral
              $type: marketingCollateral-d086c908-2498-4d3e-8a1f-01e82bfc2abe
              $typeVersion: 0
              $version: 0
              audience1: internal
              author: Jones
              competitiveDocument: 'no'
              currentState: proposal
              documentType: Q1 plans
              status: active
          schema:
            $ref: '#/definitions/Metadata'
        '409':
          description: 'If the template instance already exists, a 409 HTTP status code of conflict will be returned and the update method should be used.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create File metadata error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Metadata on File
      tags:
        - Metadata
    put:
      consumes:
        - application/json-patch+json
      description: |-
        Used to update the template instance. The request body must follow the JSON-Patch specification, which is represented as a JSON array of operation objects (see examples for more details). Updates can be either add, replace, remove , test, move, or copy. The template instance can only be updated if the template instance already exists. When editing metadata, only values that adhere to the metadata template schema will be accepted.
        The update is applied atomically. If any errors occur during the application of the update operations, the metadata instance remains unchanged.
      externalDocs:
        url: 'https://docs.box.com/reference#update-metadata'
      operationId: updateFileMetadata
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateMetadata'
      responses:
        '200':
          description: 'An instance of the template that includes key:value pairs defined by a user or application.'
          examples:
            application/json:
              $id: 2094c584-68e1-475c-a581-534a4609594e
              $parent: file_5010739061
              $scope: enterprise_12345
              $template: marketingCollateral
              $type: marketingCollateral-d086c908-2498-4d3e-8a1f-01e82bfc2abe
              $typeVersion: 0
              $version: 1
              audience1: internal
              author: Jones
              currentState: reviewed
              documentType: Q1 plans
              editor: Jones
              previousState: proposal
              status: inactive
          schema:
            $ref: '#/definitions/Metadata'
        '404':
          description: 'If there is no template instance present, a 404 HTTP status code of not_found will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Update file metadata error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Metadata on File
      tags:
        - Metadata
  '/files/{FILE_ID}/tasks':
    get:
      description: Retrieves all of the tasks for given file.
      externalDocs:
        url: 'https://docs.box.com/reference#get-the-tasks-for-a-file'
      operationId: getFileTasks
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: 'A collection of mini task objects is returned. If there are no tasks, an empty collection will be returned.'
          schema:
            $ref: '#/definitions/TaskList'
        default:
          description: Get file's tasks error
          schema:
            $ref: '#/definitions/Error'
      summary: Get File's Tasks
      tags:
        - Files
  '/files/{FILE_ID}/thumbnail.{EXTENSION}':
    get:
      description: 'Retrieves a thumbnail, or smaller image representation, of this file. Sizes of 32x32,64x64, 128x128, and 256x256 can be returned in the .png format and sizes of 32x32, 94x94, 160x160, and 320x320 can be returned in the .jpg format. Thumbnails can be generated for the image and video file formats listed here.'
      externalDocs:
        url: 'https://docs.box.com/reference#get-a-thumbnail-for-a-file'
      operationId: getFileThumbnail
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - description: 'The preview format, e.g. png or jpg'
          in: path
          name: EXTENSION
          required: true
          type: string
        - description: The minimum height of the thumbnail
          format: int64
          in: query
          name: min_height
          required: false
          type: integer
        - description: The minimum width of the thumbnail
          format: int64
          in: query
          name: min_width
          required: false
          type: integer
        - description: The maximum height of the thumbnail
          format: int64
          in: query
          name: max_height
          required: false
          type: integer
        - description: The maximum width of the thumbnail
          format: int64
          in: query
          name: max_width
          required: false
          type: integer
      responses:
        '200':
          description: 'If the thumbnail is available, a 200 OK response will be returned with the contents of the thumbnail in the body.'
          schema:
            $ref: '#/definitions/BoxFile'
        '202':
          description: 'If the thumbnail isn’t available yet, a 202 Accepted HTTP status will be returned, including a Location header pointing to a placeholder graphic that can be used until the thumbnail is returned.'
          headers:
            Location:
              description: Pointing to a placeholder graphic that can be used until the thumbnail is returned.
              format: url
              type: string
            Retry-After:
              description: The time in seconds after which the thumbnail will be available. Your application should only attempt to get the thumbnail again after Retry-After time.
              format: int64
              type: integer
        '302':
          description: 'If Box can’t generate a thumbnail for this file type, a 302 Found response will be returned, redirecting to a placeholder graphic in the requested size for this particular file type, e.g. this for a CSV file).'
        '400':
          description: 'If there are any bad parameters sent in, a standard 400 Bad Request will be returned.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'If Box is unable to generate a thumbnail for this particular file, a 404 Not Found response will be returned with a code of preview_cannot_be_generated.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get thumbnail error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Thumbnail
      tags:
        - Files
  '/files/{FILE_ID}/trash':
    delete:
      description: Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone.
      operationId: deleteTrashedFile
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 No Content response will be returned upon successful deletion.
        '404':
          description: A 404 will be returned if the item is not in the trash.
      summary: Permanently Delete
      tags:
        - Files
    get:
      description: Retrieves an item that has been moved to the trash.
      externalDocs:
        url: 'https://docs.box.com/reference#get-a-trashed-file'
      operationId: getTrashedFile
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
      responses:
        '200':
          description: 'The full item will be returned, including information about when the it was moved to the trash.'
          examples:
            application/json:
              content_created_at: '2013-01-30T18:43:56-08:00'
              content_modified_at: '2013-01-30T18:44:00-08:00'
              created_at: '2013-01-30T18:43:56-08:00'
              created_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              description: ''
              etag: '2'
              id: '5859258256'
              item_status: trashed
              modified_at: '2013-01-30T18:44:00-08:00'
              modified_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              name: Screenshot_1_30_13_6_37_PM.png
              owned_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '1'
                    name: Trash
                    type: folder
                total_count: 1
              purged_at: '2013-03-09T10:49:34-08:00'
              sequence_id: '2'
              sha1: 4bd9e98652799fc57cf9423e13629c151152ce6c
              shared_link:
                access: open
                download_count: 0
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
              size: 163265
              trashed_at: '2013-02-07T10:49:34-08:00'
              type: file
          schema:
            $ref: '#/definitions/BoxFile'
        '404':
          description: A 404 will be returned if the item is not in the trash.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get trashed file error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Trashed File
      tags:
        - Files
  '/files/{FILE_ID}/versions':
    get:
      description: 'If there are previous versions of this file, this method can be used to retrieve information about the older versions. (Versions are only tracked for Box users with premium accounts.)'
      externalDocs:
        url: 'https://docs.box.com/reference#view-versions-of-a-file'
      operationId: getFileVersions
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: 'An array of version objects are returned. If there are no previous versions of this file, then an empty array will be returned.'
          schema:
            $ref: '#/definitions/FileVersionList'
        default:
          description: View file version error
          schema:
            $ref: '#/definitions/Error'
      summary: View Versions
      tags:
        - Files
  '/files/{FILE_ID}/versions/current':
    post:
      description: 'If there are previous versions of this file, this method can be used to promote one of the older versions to the top of the stack. This actually mints a copy of the old version and puts it on the top of the versions stack. The file will have the exact same contents, the same SHA1/etag, and the same name as the original. Other properties such as comments do not get updated to their former values.'
      externalDocs:
        url: 'https://docs.box.com/reference#promote-an-old-version-of-a-file'
      operationId: promotoeFileVersion
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Reference'
      responses:
        '201':
          description: 'The newly promoted file_version object is returned, along with a ‘201 Created’ status.'
          schema:
            $ref: '#/definitions/FileVersion'
        default:
          description: Promote file version error
          schema:
            $ref: '#/definitions/Error'
      summary: Promote Version
      tags:
        - Files
  '/files/{FILE_ID}/versions/{VERSION_ID}':
    delete:
      description: 'Discards a specific file version to the trash. (Depending on the enterprise settings for this user, the item will either be actually deleted from Box or moved to the trash.)'
      externalDocs:
        url: 'https://docs.box.com/reference#delete-an-old-version-of-a-file'
      operationId: deleteFileVersion
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: path
          name: VERSION_ID
          required: true
          type: string
        - description: The etag of the file. This is in the ‘etag’ field of the file object.
          in: header
          name: If-Match
          required: false
          type: string
      responses:
        '204':
          description: An empty 204 response is sent to confirm deletion of the file.
        '412':
          description: 'If the If-Match header is sent and fails, a ‘412 Precondition Failed’ error is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Delete file version error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Old Version
      tags:
        - Files
  '/files/{FILE_ID}/watermark':
    delete:
      description: Used to remove the watermark for a corresponding Box file.
      externalDocs:
        url: 'https://docs.box.com/reference#remove-watermark-on-file'
      operationId: deleteFileWatermark
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 No Content response to confirm the watermark has been removed.
          schema:
            $ref: '#/definitions/Watermark'
        '404':
          description: 'If the file did not have a watermark applied to it, a 404 Not Found will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Remove watermark on file error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove Watermark on File
      tags:
        - Watermark
    get:
      description: Used to retrieve the watermark for a corresponding Box file.
      externalDocs:
        url: 'https://docs.box.com/reference#get-watermark-on-file'
      operationId: getFileWatermark
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
      responses:
        '200':
          description: An object containing information about the watermark associated for this file.
          schema:
            $ref: '#/definitions/Watermark'
        '404':
          description: An 404 error is thrown if the the file does not have the watermark.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get watermark on file error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Watermark on File
      tags:
        - Watermark
    put:
      description: Used to apply or update the watermark for a corresponding Box file. The endpoint accepts a JSON body describing the watermark to apply.
      externalDocs:
        url: 'https://docs.box.com/reference#apply-watermark-on-file'
      operationId: updateFileWatermark
      parameters:
        - in: path
          name: FILE_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Watermark'
      responses:
        '200':
          description: An object containing information about the watermark associated for this file.
          schema:
            $ref: '#/definitions/Watermark'
        '201':
          description: 'If the file did not previously have a watermark applied to it, 201 Created is returned.'
          schema:
            $ref: '#/definitions/Watermark'
        default:
          description: Apply watermark on file error
          schema:
            $ref: '#/definitions/Error'
      summary: Apply Watermark on File
      tags:
        - Watermark
  /folders:
    post:
      description: Used to create a new empty folder. The new folder will be created inside of the specified parent folder
      externalDocs:
        url: 'https://docs.box.com/reference#create-a-new-folder'
      operationId: createFolder
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Folder'
      responses:
        '201':
          description: A full folder object is returned if the parent folder ID is valid and if no name collisions occur.
          examples:
            application/json:
              created_at: '2012-12-12T10:53:43-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: Some pictures I took
              etag: '1'
              folder_upload_email:
                access: open
                email: upload.Picture.k13sdz1@u.box.com
              id: '11446498'
              item_collection:
                entries: []
                limit: 100
                offset: 0
                total_count: 0
              item_status: active
              modified_at: '2012-12-12T11:15:04-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: Pictures
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                total_count: 1
              sequence_id: '1'
              shared_link:
                access: open
                download_count: 0
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/vspke7y05sb214wjokpk'
              size: 629644
              type: folder
          schema:
            $ref: '#/definitions/Folder'
        default:
          description: Create folder operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Folder
      tags:
        - Folders
  /folders/trash/items:
    get:
      description: 'Retrieves the files and/or folders that have been moved to the trash. Any attribute in the full files or folders objects can be passed in with the fields parameter to get specific attributes, and only those specific attributes back; otherwise, the mini format is returned for each item by default. Multiple attributes can be passed in separated by commas e.g. fields=name,created_at. Paginated results can be retrieved using the limit and offset parameters.'
      externalDocs:
        url: 'https://docs.box.com/reference#create-a-new-folder'
      operationId: getTrashedItems
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: The maximum number of items to return
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: The item at which to begin the response
          format: int64
          in: query
          name: offset
          required: false
          type: integer
      responses:
        '200':
          description: A collection of items contained in the trash is returned
          schema:
            $ref: '#/definitions/FileReferenceList'
        default:
          description: Get trashed items operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Trashed Items
      tags:
        - Folders
  '/folders/{FOLDER_ID}':
    delete:
      description: Used to delete a folder. A recursive parameter must be included in order to delete folders that have items inside of them. An optional If-Match header can be included to ensure that client only deletes the folder if it knows about the latest version.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-a-folder'
      operationId: deleteFolder
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - in: query
          name: recursive
          required: false
          type: boolean
        - description: This is in the ‘etag’ field of the folder object.
          in: header
          name: If-Match
          required: false
          type: string
      responses:
        '204':
          description: An empty 204 response will be returned upon successful deletion.
        '400':
          description: An error is thrown if the folder is not empty and the ‘recursive’ parameter is not included.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Delete folder operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Folder
      tags:
        - Folders
    get:
      description: 'Retrieves the full metadata about a folder, including information about when it was last updated as well as the files and folders contained in it. The root folder of a Box account is always represented by the id “0”.'
      externalDocs:
        url: 'https://docs.box.com/reference#get-folder-info'
      operationId: getFolder
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: path
          name: FOLDER_ID
          required: true
          type: string
      responses:
        '200':
          description: 'A full folder object is returned, including the most current information available about it.'
          schema:
            $ref: '#/definitions/Folder'
        '401':
          description: 4xx if the user does not have access to it.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: An 404 error is thrown if the folder does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get Folder's info error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Folder's Info
      tags:
        - Folders
    post:
      description: 'Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same name in that parent folder, the new parent folder and/or new name will need to be included in the request.'
      externalDocs:
        url: 'https://docs.box.com/reference#restore-a-trashed-folder'
      operationId: restoreTrashedFolder
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Folder'
      responses:
        '201':
          description: The full item will be returned with a 201 Created status. By default it is restored to the parent folder it was in before it was trashed.
          examples:
            application/json:
              content_created_at: '2013-01-15T16:15:27-08:00'
              content_modified_at: '2013-02-07T13:26:00-08:00'
              created_at: '2013-01-15T16:15:27-08:00'
              created_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              description: ''
              etag: '2'
              id: '588970022'
              item_status: active
              modified_at: '2013-02-07T13:26:00-08:00'
              modified_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              name: heloo world
              owned_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                total_count: 1
              sequence_id: '2'
              size: 0
              type: folder
          schema:
            $ref: '#/definitions/Folder'
        '403':
          description: The user doesn’t have access to the folder the item is being restored to or the user doesn’t have permission to restore items from the trash
          schema:
            $ref: '#/definitions/Error'
        '405':
          description: The item is not in the trash
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: There is an item with the same name in the folder the item is being restored to
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Restore folder operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Restore Folder
      tags:
        - Folders
    put:
      description: |-
        Used to update information about the folder. To move a folder, update the ID of its parent. To enable an email address that can be used to upload files to this folder, update the folder_upload_email attribute. An optional If-Match header can be included to ensure that client only updates the folder if it knows about the latest version.

        Used to create a shared link for this particular folder. Please see here for more information on the permissions available for shared links. In order to get default shared link status, set it to an empty access level, i.e. {"shared_link": {}}. In order to disable a shared link, send this same type of PUT request with the value of shared_link set to null, i.e. {"shared_link": null}

        To add or remove an item from a collection, you do a PUT on that item and change the list of collections it belongs to. Philosophically, this is similar to the way “move” operations work on files and folders: you do a PUT on the item and change its parent. It’s the same idea with collections, except you’re changing which collection(s) the item belongs to instead of the folder it belongs to. Currently the only collection available is the favorites collection, and you’ll need to know it’s ID for the user that is making the API call, since every user has a different favorites collection_id.
        The Add/Remove API handling will check all ids passed in before performing any add/removal operations. If any collection ids are malformed or do not exist in the user’s account, the API call will throw a 400. Only if all of the collection ids are valid will the adds and removals be carried out.
      externalDocs:
        url: 'https://docs.box.com/reference#update-information-about-a-folder'
      operationId: updateFolder
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Folder'
        - description: This is in the ‘etag’ field of the folder object.
          in: header
          name: If-Match
          required: false
          type: string
      responses:
        '200':
          description: The updated folder
          examples:
            application/json:
              created_at: '2012-12-12T10:53:43-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: Some pictures I took
              etag: '1'
              folder_upload_email:
                access: open
                email: upload.Picture.k13sdz1@u.box.com
              id: '11446498'
              item_collection:
                entries:
                  - etag: '3'
                    id: '5000948880'
                    name: tigers.jpeg
                    sequence_id: '3'
                    sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
                    type: file
                limit: 100
                offset: 0
                total_count: 1
              item_status: active
              modified_at: '2012-12-12T11:15:04-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: New Folder Name!
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                total_count: 1
              sequence_id: '1'
              shared_link:
                access: open
                download_count: 0
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/vspke7y05sb214wjokpk'
              size: 629644
              type: folder
          schema:
            $ref: '#/definitions/Folder'
        '201':
          description: When 'collections' is specified in body the folder is moved into collection with the ID
          examples:
            application/json:
              created_at: '2012-12-12T10:53:43-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: Some pictures I took
              etag: '1'
              folder_upload_email:
                access: open
                email: upload.Picture.k13sdz1@u.box.com
              id: '11446498'
              item_collection:
                entries:
                  - etag: '3'
                    id: '5000948880'
                    name: tigers.jpeg
                    sequence_id: '3'
                    sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
                    type: file
                limit: 100
                offset: 0
                total_count: 1
              item_status: active
              modified_at: '2012-12-12T11:15:04-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: New Folder Name!
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                total_count: 1
              sequence_id: '1'
              shared_link:
                access: open
                download_count: 0
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/vspke7y05sb214wjokpk'
              size: 629644
              type: folder
          schema:
            $ref: '#/definitions/Folder'
        default:
          description: Update Folder info error
          schema:
            $ref: '#/definitions/Error'
      summary: 'Update Folder, Create Shared Link, Create or Delete'
      tags:
        - Folders
  '/folders/{FOLDER_ID}/collaborations':
    get:
      description: Use this to get a list of all the collaborations on a folder i.e. all of the users that have access to that folder.
      externalDocs:
        url: 'https://docs.box.com/reference#view-a-folders-collaborations'
      operationId: getFolderCollaborations
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: The maximum number of items to return in a page. The default is 100 and the max is 1000.
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: The item at which to begin the response
          format: int64
          in: query
          name: offset
          required: false
          type: integer
      responses:
        '200':
          description: 'A collection of collaboration objects are returned. If there are no collaborations on this folder, an empty collection will be returned.'
          examples:
            application/json:
              entries:
                - accessible_by:
                    id: '755492'
                    login: simon@box.net
                    name: Simon Tan
                    type: user
                  acknowledged_at: '2011-11-29T12:59:40-08:00'
                  created_at: '2011-11-29T12:56:35-08:00'
                  created_by:
                    id: '4276790'
                    login: david@box.com
                    name: David Lee
                    type: user
                  id: '14176246'
                  modified_at: '2012-09-11T15:12:32-07:00'
                  role: editor
                  status: accepted
                  type: collaboration
              total_count: 1
          schema:
            $ref: '#/definitions/CollaborationList'
        default:
          description: Get folder collaboartions operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Folder Collaborations
      tags:
        - Folders
  '/folders/{FOLDER_ID}/copy':
    post:
      description: Used to create a copy of a folder in another folder. The original version of the folder will not be altered.
      externalDocs:
        url: 'https://docs.box.com/reference#copy-a-folder'
      operationId: copyFolder
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Folder'
      responses:
        '201':
          description: A full folder object is returned if the ID is valid and if the update is successful.
          examples:
            application/json:
              created_at: '2012-12-12T10:53:43-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: Some pictures I took
              etag: '1'
              folder_upload_email:
                access: open
                email: upload.Picture.k13sdz1@u.box.com
              id: '11446498'
              item_collection:
                entries:
                  - etag: '3'
                    id: '5000948880'
                    name: tigers.jpeg
                    sequence_id: '3'
                    sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
                    type: file
                limit: 100
                offset: 0
                total_count: 1
              item_status: active
              modified_at: '2012-12-12T11:15:04-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: Pictures
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                total_count: 1
              sequence_id: '1'
              shared_link:
                access: open
                download_count: 0
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/vspke7y05sb214wjokpk'
              size: 629644
              type: folder
          schema:
            $ref: '#/definitions/Folder'
        '409':
          description: 'If the intended destination folder is the same, as this will cause a name collision.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Copy folder operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Copy Folder
      tags:
        - Folders
  '/folders/{FOLDER_ID}/items':
    get:
      description: 'Retrieves the files and/or folders contained within this folder without any other metadata about the folder. Any attribute in the full files or folders objects can be passed in with the fields parameter to get specific attributes, and only those specific attributes back; otherwise, the mini format is returned for each item by default. Multiple attributes can be passed in separated by commas e.g. fields=name,created_at. Paginated results can be retrieved using the limit and offset parameters.'
      externalDocs:
        url: 'https://docs.box.com/reference#get-a-folders-items'
      operationId: getFolderItems
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: The maximum number of items to return in a page. The default is 100 and the max is 1000.
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: 'The offset at which to begin the response. An offset of value of 0 will start at the beginning of the folder-listing. Note: If there are hidden items in your previous response, your next offset should be = offset + limit, not the # of records you received back. The default is 0.'
          in: query
          name: offset
          required: false
          type: string
      responses:
        '200':
          description: A collection of items contained in the folder is returned.
          schema:
            $ref: '#/definitions/ItemReferenceList'
        default:
          description: Get Folder items error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Folder’s Items
      tags:
        - Folders
  '/folders/{FOLDER_ID}/metadata':
    get:
      description: Used to retrieve all metadata associated with a given folder
      externalDocs:
        url: 'https://docs.box.com/reference#get-all-metadata-on-folder'
      operationId: getAllFolderMetadata
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
      responses:
        '200':
          description: An array of metadata instances associated with the folder.
          examples:
            application/json:
              entries:
                - $id: e57f90ff-0044-48c2-807d-06b908765baf
                  $parent: folder_998951261
                  $scope: enterprise_12345
                  $template: documentFlow
                  $type: documentFlow-452b4c9d-c3ad-4ac7-b1ad-9d5192f2fc5f
                  $typeVersion: 2
                  $version: 1
                  currentDocumentStage: prioritization
                  maximumDaysAllowedInCurrentStage: 5
                  needsApprovalFrom: planning team
                - $id: 0dd54220-8340-4ea1-bd3f-59a23c68ccdd
                  $parent: folder_998951261
                  $scope: enterprise_12345
                  $template: productInfo
                  $type: productInfo-9d7b6993-b09e-4e52-b197-e42f0ea995b9
                  $typeVersion: 1
                  $version: 0
                  department: Accessories
                  description: Hat
                  skuNumber: 45234522115075
              limit: 100
          schema:
            $ref: '#/definitions/MetadataList'
        default:
          description: Get folder metadata error
          schema:
            $ref: '#/definitions/Error'
      summary: Get All Metadata on Folder
      tags:
        - Metadata
  '/folders/{FOLDER_ID}/metadata/{SCOPE}/{TEMPLATE}':
    delete:
      description: 'Used to delete the template instance. To delete custom key:value pairs within a template instance, you should refer to the updating metadata section.'
      externalDocs:
        url: 'https://docs.box.com/reference#delete-metadata-on-folder'
      operationId: deleteFolderMetadata
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
      responses:
        '204':
          description: An empty HTTP 204 response to confirm the deletion of the template instance.
        default:
          description: Delete folder metadata error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Metadata on Folder
      tags:
        - Metadata
    get:
      description: Used to retrieve the metadata template instance for a corresponding Box folder.
      externalDocs:
        url: 'https://docs.box.com/reference#get-metadata-on-folder'
      operationId: getFolderMetadata
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
      responses:
        '201':
          description: 'An instance of the template that includes key:value pairs defined by a user or application.'
          examples:
            application/json:
              $id: e57f90ff-0044-48c2-807d-06b908765baf
              $parent: folder_998951261
              $scope: enterprise_12345
              $template: documentFlow
              $type: documentFlow-452b4c9d-c3ad-4ac7-b1ad-9d5192f2fc5f
              $typeVersion: 0
              $version: 0
              currentDocumentStage: initial vetting
              needsApprovalFrom: vetting team
              nextDocumentStage: prioritization
          schema:
            $ref: '#/definitions/Metadata'
        '404':
          description: 'If there is no template instance present, a 404 HTTP status code of not_found will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get metadata error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Metadata on Folder
      tags:
        - Metadata
    post:
      description: 'Used to create the metadata template instance for a corresponding Box folder. When creating metadata, only values that adhere to the metadata template schema will be accepted.'
      externalDocs:
        url: 'https://docs.box.com/reference#create-metadata-on-folder'
      operationId: createFolderMetadata
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Metadata'
      responses:
        '200':
          description: 'An instance of the template that includes key:value pairs defined by a user or application.'
          examples:
            application/json:
              $id: e57f90ff-0044-48c2-807d-06b908765baf
              $parent: folder_998951261
              $scope: enterprise_12345
              $template: documentFlow
              $type: documentFlow-452b4c9d-c3ad-4ac7-b1ad-9d5192f2fc5f
              $typeVersion: 0
              $version: 0
              currentDocumentStage: initial vetting
              needsApprovalFrom: vetting team
              nextDocumentStage: prioritization
          schema:
            $ref: '#/definitions/Metadata'
        '409':
          description: 'If the template instance already exists, a 409 HTTP status code of conflict will be returned and the update method should be used.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create Folder metadata error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Metadata on Folder
      tags:
        - Metadata
    put:
      consumes:
        - application/json-patch+json
      description: 'Used to update the template instance. Updates can be either add, replace, remove , or test. The template instance can only be updated if the template instance already exists. When editing metadata, only values that adhere to the metadata template schema will be accepted.'
      externalDocs:
        url: 'https://docs.box.com/reference#update-metadata-1'
      operationId: updateFolderMetadata
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateMetadata'
      responses:
        '200':
          description: 'An instance of the template that includes key:value pairs defined by a user or application.'
          examples:
            application/json:
              $id: e57f90ff-0044-48c2-807d-06b908765baf
              $parent: folder_998951261
              $scope: enterprise_12345
              $template: documentFlow
              $type: documentFlow-452b4c9d-c3ad-4ac7-b1ad-9d5192f2fc5f
              $typeVersion: 2
              $version: 1
              currentDocumentStage: prioritization
              maximumDaysAllowedInCurrentStage: 5
              needsApprovalFrom: planning team
          schema:
            $ref: '#/definitions/Metadata'
        '404':
          description: 'If there is no template instance present, a 404 HTTP status code of not_found will be returned'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create Web link error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Metadata on Folder
      tags:
        - Metadata
  '/folders/{FOLDER_ID}/trash':
    delete:
      description: Permanently deletes an folder that is in the trash. The item will no longer exist in Box. This action cannot be undone.
      externalDocs:
        url: 'https://docs.box.com/reference#permanently-delete-a-trashed-folder'
      operationId: deleteTrashedFolder
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 No Content response will be returned upon successful deletion.
        '404':
          description: If the folder is not in the trash.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Permanently delete a folder operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Permanently Delete
      tags:
        - Folders
    get:
      description: Retrieves an folder that has been moved to the trash.
      externalDocs:
        url: 'https://docs.box.com/reference#get-a-trashed-folder'
      operationId: getTrashedFolder
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: 'The full folder will be returned, including information about when the it was moved to the trash.'
          examples:
            application/json:
              content_created_at: '2013-01-15T16:15:27-08:00'
              content_modified_at: '2013-01-17T13:48:23-08:00'
              created_at: '2013-01-15T16:15:27-08:00'
              created_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              description: ''
              etag: '1'
              id: '588970022'
              item_status: trashed
              modified_at: '2013-01-17T13:48:23-08:00'
              modified_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              name: heloo world
              owned_by:
                id: '181757341'
                login: sean+test@box.com
                name: sean test
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '1'
                    name: Trash
                    type: folder
                total_count: 1
              purged_at: '2013-03-09T12:53:32-08:00'
              sequence_id: '1'
              size: 0
              trashed_at: '2013-02-07T12:53:32-08:00'
              type: folder
          schema:
            $ref: '#/definitions/Folder'
        '404':
          description: If the folder is not in the trash.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get Trashed Folder operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Trashed Folder
      tags:
        - Folders
  '/folders/{FOLDER_ID}/watermark':
    delete:
      description: Used to remove the watermark for a corresponding Box Folder.
      externalDocs:
        url: 'https://docs.box.com/reference#remove-watermark-on-folder'
      operationId: deleteFolderWatermark
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 No Content response to confirm the watermark has been removed.
          schema:
            $ref: '#/definitions/Watermark'
        '404':
          description: 'If the folder did not have a watermark applied to it, a 404 Not Found will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Remove watermark on folder error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove Watermark on Folder
      tags:
        - Watermark
    get:
      description: Used to retrieve the watermark for a corresponding Box folder.
      externalDocs:
        url: 'https://docs.box.com/reference#get-watermark-on-folder'
      operationId: getFolderWatermark
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
      responses:
        '200':
          description: An object containing information about the watermark associated for this folder.
          schema:
            $ref: '#/definitions/Watermark'
        '404':
          description: 'If the folder does not have a watermark applied to it, a 404 Not Found will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get watermark on folder error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Watermark on Folder
      tags:
        - Watermark
    put:
      description: Used to apply or update the watermark for a corresponding Box folder. The endpoints accepts a JSON body describing the watermark to apply.
      externalDocs:
        url: 'https://docs.box.com/reference#apply-watermark-on-folder'
      operationId: updateFolderWatermark
      parameters:
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Watermark'
      responses:
        '200':
          description: 'An object containing information about the watermark associated for this folder. '
          schema:
            $ref: '#/definitions/Watermark'
        '201':
          description: 'If the folder did not previously have a watermark applied to it, 201 Created is returned.'
          schema:
            $ref: '#/definitions/Watermark'
        default:
          description: Apply watermark on folder error
          schema:
            $ref: '#/definitions/Error'
      summary: Apply Watermark on Folder
      tags:
        - Watermark
  /group_memberships:
    post:
      description: Used to add a member to a Group.
      externalDocs:
        url: 'https://docs.box.com/reference#add-a-member-to-a-group'
      operationId: createGroupMembership
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GroupMembership'
      responses:
        '201':
          description: A new group membership object will be returned upon success.
          examples:
            application/json:
              group:
                id: '119720'
                name: family
                type: group
              id: '1560354'
              role: member
              type: group_membership
              user:
                id: '13130406'
                login: alice@gmail.com
                name: Alison Wonderland
                type: user
          schema:
            $ref: '#/definitions/GroupMembership'
        default:
          description: Create Group membership error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Membership
      tags:
        - Groups
  '/group_memberships/{GROUP_MEMBERSHIP_ID}':
    delete:
      description: Deletes a specific group membership.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-a-group-membership'
      operationId: deleteGroupMembership
      parameters:
        - in: path
          name: GROUP_MEMBERSHIP_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 No Content response will be returned upon success.
        default:
          description: Delete Group membership error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Membership
      tags:
        - Groups
    get:
      description: Fetches a specific group membership entry.
      externalDocs:
        url: 'https://docs.box.com/reference#get-a-group-membership-entry'
      operationId: getGroupMembership
      parameters:
        - in: path
          name: GROUP_MEMBERSHIP_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: The specified group_membership object will be returned upon success.
          examples:
            application/json:
              created_at: '2013-05-16T15:27:57-07:00'
              group:
                id: '119720'
                name: family
                type: group
              id: '1560354'
              modified_at: '2013-05-16T15:27:57-07:00'
              role: member
              type: group_membership
              user:
                id: '13130406'
                login: alice@gmail.com
                name: Alison Wonderland
                type: user
          schema:
            $ref: '#/definitions/GroupMembership'
        default:
          description: Get Group membership error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Membership
      tags:
        - Groups
    put:
      description: Used to update a group membership.
      externalDocs:
        url: 'https://docs.box.com/reference#update-a-group-membership'
      operationId: updateGroupMembership
      parameters:
        - in: path
          name: GROUP_MEMBERSHIP_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GroupMembership'
      responses:
        '200':
          description: A new group membership object will be returned upon success.
          examples:
            application/json:
              created_at: '2013-05-16T15:27:57-07:00'
              group:
                id: '119720'
                name: family
                type: group
              id: '1560354'
              modified_at: '2013-05-16T15:27:57-07:00'
              role: submaster
              type: group_membership
              user:
                id: '13130406'
                login: alice@gmail.com
                name: Alison Wonderland
                type: user
          schema:
            $ref: '#/definitions/GroupMembership'
        default:
          description: Update Group memebership error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Membership
      tags:
        - Groups
  /groups:
    get:
      description: Retrieves all of the groups for given enterprise. Must have permissions to see an enterprise's groups.
      externalDocs:
        url: 'https://docs.box.com/reference#groups'
      operationId: getEnterpriseGroups
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: The maximum number of items to return in a page. The default is 100 and the max is 1000.
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: The item at which to begin the response.
          format: int64
          in: query
          name: offset
          required: false
          type: integer
      responses:
        '200':
          description: 'A collection of mini group objects is returned. If there are no groups, an empty collection will be returned.'
          examples:
            application/json:
              entries:
                - id: '1786931'
                  name: friends
                  type: group
              limit: 100
              offset: 0
              total_count: 1
          schema:
            $ref: '#/definitions/GroupList'
        default:
          description: Get groups error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Groups for an Enterprise
      tags:
        - Groups
    post:
      description: Used to create a group.
      externalDocs:
        url: 'https://docs.box.com/reference#create-a-group'
      operationId: createGroup
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Group'
      responses:
        '201':
          description: A new group object will be returned upon success.
          examples:
            application/json:
              created_at: '2013-05-16T15:27:57-07:00'
              id: '119720'
              modified_at: '2013-05-16T15:27:57-07:00'
              name: Box Employees
              type: group
          schema:
            $ref: '#/definitions/Group'
        default:
          description: Create Group error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Group
      tags:
        - Groups
  '/groups/{GROUP_ID}':
    delete:
      description: Permanently deletes a specific group.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-a-group'
      operationId: deleteGroup
      parameters:
        - in: path
          name: GROUP_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 response will be returned upon success.
        default:
          description: Delete Group error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Group
      tags:
        - Groups
    get:
      description: Used to get information about a group.
      externalDocs:
        url: 'https://docs.box.com/reference#get-group'
      operationId: getGroup
      parameters:
        - in: path
          name: GROUP_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: A group object that was requested.
          examples:
            application/json:
              created_at: '2014-09-15T13:15:35-07:00'
              id: '255224'
              modified_at: '2014-09-15T13:15:35-07:00'
              name: Everyone
              type: group
          schema:
            $ref: '#/definitions/Group'
        default:
          description: Get Group error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Group
      tags:
        - Groups
    put:
      description: Updates a specific group.
      externalDocs:
        url: 'https://docs.box.com/reference#update-a-group'
      operationId: updateGroup
      parameters:
        - in: path
          name: GROUP_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: The updated group object will be returned upon success.
          examples:
            application/json:
              created_at: '2013-05-16T15:27:57-07:00'
              id: '119720'
              modified_at: '2013-05-16T15:27:57-07:00'
              name: framily
              type: group
          schema:
            $ref: '#/definitions/Group'
        default:
          description: Update Group error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Group
      tags:
        - Groups
  '/groups/{GROUP_ID}/collaborations':
    get:
      description: Retrieves all of the group collaborations for a given group. Note this is only available to group admins.
      externalDocs:
        url: 'https://docs.box.com/reference#get-all-collaborations-for-a-group'
      operationId: getGroupCollaborations
      parameters:
        - in: path
          name: GROUP_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: The maximum number of items to return in a page. The default is 100 and the max is 1000.
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: The item at which to begin the response.
          format: int64
          in: query
          name: offset
          required: false
          type: integer
      responses:
        '200':
          description: A collection of collaboration objects will be returned upon success.
          examples:
            application/json:
              entries:
                - accessible_by:
                    id: '160018'
                    name: Hand of the King inner counsel
                    type: group
                  acknowledged_at: '2013-11-14T16:16:20-08:00'
                  created_at: '2013-11-14T16:16:20-08:00'
                  created_by:
                    id: '13130406'
                    login: ned@winterfell.com
                    name: Eddard Stark
                    type: user
                  id: '52123184'
                  item:
                    etag: '0'
                    id: '541014843'
                    name: People killed by Ice
                    sequence_id: '0'
                    type: folder
                  modified_at: '2013-11-14T16:16:20-08:00'
                  role: viewer
                  status: accepted
                  type: collaboration
              limit: 100
              offset: 0
              total_count: 1
          schema:
            $ref: '#/definitions/CollaborationList'
        default:
          description: Get Group collaborations error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Collaborations for Group
      tags:
        - Groups
  '/groups/{GROUP_ID}/memberships':
    get:
      description: Retrieves all of the members for a given group if the requesting user has access (see Group Object member_viewability_level).
      externalDocs:
        url: 'https://docs.box.com/reference#get-the-membership-list-for-a-group'
      operationId: getGroupMemberships
      parameters:
        - in: path
          name: GROUP_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: The maximum number of items to return in a page. The default is 100 and the max is 1000.
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: The item at which to begin the response.
          format: int64
          in: query
          name: offset
          required: false
          type: integer
      responses:
        '200':
          description: A collection of group membership objects will be returned upon success.
          examples:
            application/json:
              entries:
                - group:
                    id: '119720'
                    name: family
                    type: group
                  id: '1560354'
                  role: member
                  type: group_membership
                  user:
                    id: '13130906'
                    login: alice@gmail.com
                    name: Alice
                    type: user
                - group:
                    id: '119720'
                    name: family
                    type: group
                  id: '1560356'
                  role: member
                  type: group_membership
                  user:
                    id: '192633962'
                    login: rabbit@gmail.com
                    name: rabbit
                    type: user
              limit: 100
              offset: 0
              total_count: 2
          schema:
            $ref: '#/definitions/GroupMembershipList'
        default:
          description: Group Group membership error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Memberships for Group
      tags:
        - Groups
  /invites:
    post:
      description: 'Invites an existing user to join an Enterprise. The existing user can not be part of another Enterprise and must already have a Box account. Once invited, the user will receive an email and prompt to accept the invitation within the Box web application. This method requires the "Manage An Enterprise" scope for the enterprise, which can be enabled within your developer console.'
      externalDocs:
        url: 'https://docs.box.com/reference#invite-existing-user-to-join-enterprise'
      operationId: createInvite
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/InviteUser'
      responses:
        '200':
          description: 'A new invite object will be returned if successful. The status of the invite can also be queried by retrieving the invite object. This can be done by making a GET request to /invites/{invite_id}.'
          examples:
            application/json:
              actionable_by:
                id: '229667663'
                login: freeuser@box.com
                name: Lleyton Hewitt
                type: user
              created_at: '2014-12-23T12:55:53-08:00'
              id: '238632'
              invited_by:
                id: '10523870'
                login: ted@box.com
                name: Ted Blosser
                type: user
              invited_to:
                id: '42500'
                name: Blosser Account
                type: enterprise
              modified_at: '2014-12-23T12:55:53-08:00'
              status: pending
              type: invite
          schema:
            $ref: '#/definitions/Invite'
        default:
          description: Create Web link error
          schema:
            $ref: '#/definitions/Error'
      summary: Invite User
      tags:
        - Users
  '/invites/{INVITE_ID}':
    get:
      operationId: getInvite
      parameters:
        - in: path
          name: INVITE_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: Status of the invite is returned
          schema:
            $ref: '#/definitions/Invite'
        default:
          description: Get invite error
          schema:
            $ref: '#/definitions/Error'
      summary: Get status of the invite
      tags:
        - Users
  /legal_hold_policies:
    get:
      description: Get a list of Legal Hold Policies that belong to your Enterprise.
      externalDocs:
        url: 'https://docs.box.com/reference#list-of-legal-hold-policies'
      operationId: getLegalHoldPolicies
      parameters:
        - description: Case insensitive prefix-match filter on Policy name.
          in: query
          name: policy_name
          required: false
          type: string
        - description: 'Limit result size to this number. Defaults to 100, maximum is 1,000.'
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: Take from next_marker column of a prior call to get the next page
          in: query
          name: marker
          required: false
          type: string
      responses:
        '200':
          description: 'Returns the list of Legal Hold Policies in your Enterprise that match the filter parameters. By default, will only return only ''type'', ''id'', and ''policy_name'', but you can specify more by using the ''fields'' parameter.'
          schema:
            $ref: '#/definitions/LegalHoldPolicyList'
        default:
          description: Get Legal Hold policies error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Legal Hold Policies
      tags:
        - Legal Hold Policies
    post:
      description: 'Create a new Legal Hold Policy. Optional date filter may be passed. If Policy has a date filter, any Custodian assignments will apply only to file versions created or uploaded inside of the date range.'
      externalDocs:
        url: 'https://docs.box.com/reference#create-new-legal-hold-policy'
      operationId: createLegalHoldPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LegalHoldPolicy'
      responses:
        '201':
          description: A new retention policy object will be returned upon success.
          schema:
            $ref: '#/definitions/LegalHoldPolicy'
        '409':
          description: 'If the Policy Name is in use for your enterprise, will return a 409.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create Legal hold policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Create New Legal Hold Policy
      tags:
        - Legal Hold Policies
  '/legal_hold_policies/{ID}':
    delete:
      description: Sends request to delete an existing Legal Hold Policy. Note that this is an asynchronous process - the Policy will not be fully deleted yet when the response comes back.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-legal-hold-policy'
      operationId: deleteLegalHoldPolicy
      parameters:
        - in: path
          name: ID
          required: true
          type: string
      responses:
        '202':
          description: Returns a 202 if the request to delete the Policy was accepted.
        default:
          description: Delete Legal Hold policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Legal Hold Policy
      tags:
        - Legal Hold Policies
    get:
      description: Get details of a single Legal Hold Policy
      externalDocs:
        url: 'https://docs.box.com/reference#legal-hold-policy'
      operationId: getLegalHoldPolicy
      parameters:
        - in: path
          name: ID
          required: true
          type: string
      responses:
        '200':
          description: 'If the ID is valid, information about the Legal Hold Policy is returned with a 200'
          schema:
            $ref: '#/definitions/LegalHoldPolicy'
        '404':
          description: 'If the ID is for a non-existent Legal Hold Policy, a 404 is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get Legal Hold policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Legal Hold Policy
      tags:
        - Legal Hold Policies
    put:
      description: Update existing Legal Hold Policy. Only name and description can be modified.
      externalDocs:
        url: 'https://docs.box.com/reference#update-existing-legal-hold-policy'
      operationId: updateLegalHoldPolicy
      parameters:
        - in: path
          name: ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LegalHoldPolicy'
      responses:
        '201':
          description: Returns information about the Legal Hold Policy updated.
          schema:
            $ref: '#/definitions/LegalHoldPolicy'
        default:
          description: Update Legal hold policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Existing Legal Hold Policy
      tags:
        - Legal Hold Policies
  '/legal_hold_policies/{ID}/assignments':
    get:
      description: Get list of assignments for a single Policy.
      externalDocs:
        url: 'https://docs.box.com/reference#get-list-of-assignments'
      operationId: getLegalHoldPolicyAssignments
      parameters:
        - in: path
          name: ID
          required: true
          type: string
      responses:
        '200':
          description: 'Returns the list of Assignments for the passed in Policy, as well as any optional filter parameters passed in. By default, will only return only type, and id, but you can specify more by using the fields parameter.'
          schema:
            $ref: '#/definitions/LegalHoldPolicyAssignmentList'
        default:
          description: Get Legal Hold policy assignments error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Legal hold policy assignments
      tags:
        - Legal Hold Policies
  /legal_hold_policy_assignments:
    post:
      description: 'Create a new Assignment, which will apply the Legal Hold Policy to the target of the Assignment.'
      externalDocs:
        url: 'https://docs.box.com/reference#create-new-assignment'
      operationId: createLegalHoldPolicyAssignment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateLegalHoldPolicyAssignment'
      responses:
        '201':
          description: 'For a successful request, returns a 200 with information about the Assignment created.'
          schema:
            $ref: '#/definitions/LegalHoldPolicyAssignment'
        '404':
          description: 'If the policy or assign-to target cannot be found, a 404 will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create Legal hold policy assignment error
          schema:
            $ref: '#/definitions/Error'
      summary: Create New Legal Hold Policy Assignment
      tags:
        - Legal Hold Policies
  '/legal_hold_policy_assignments/{ASSIGNMENT_ID}':
    delete:
      description: Sends request to delete an existing Assignment. Note that this is an asynchronous process - the Assignment will not be fully deleted yet when the response comes back.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-assignment'
      operationId: deleteLegalHoldPolicyAssignment
      parameters:
        - in: path
          name: ASSIGNMENT_ID
          required: true
          type: string
      responses:
        '204':
          description: A successful request returns 204 No Content.
        '409':
          description: 'If the Assignment is still initializing, will return a 409.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Delete Legal Hold policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Legal Hold Policy Assignment
      tags:
        - Legal Hold Policies
    get:
      description: Get details of a single assignment.
      externalDocs:
        url: 'https://docs.box.com/reference#get-legal-hold-policy-1'
      operationId: getLegalHoldPolicyAssignment
      parameters:
        - in: path
          name: ASSIGNMENT_ID
          required: true
          type: string
      responses:
        '200':
          description: 'If the ID is valid, information about the Assignment is returned with a 200.'
        '404':
          description: 'If the ID is for a non-existent Assignment, a 404 is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Delete Legal Hold policy Assignment error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Legal Hold Policy Assignment
      tags:
        - Legal Hold Policies
  /metadata_templates/schema:
    post:
      description: Used to create a new metadata template with the specified schema.
      externalDocs:
        url: 'https://docs.box.com/reference#create-metadata-schema'
      operationId: createMetadataTemplate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MetadataTemplate'
      responses:
        '201':
          description: The schema representing the metadata template created.
          examples:
            application/json:
              displayName: Customer
              fields:
                - displayName: Customer team
                  hidden: false
                  key: customerTeam
                  type: string
                - displayName: Category
                  hidden: false
                  key: category
                  type: string
                - displayName: Brand
                  hidden: false
                  key: brand
                  type: string
                - displayName: FY
                  hidden: false
                  key: fy
                  options:
                    - key: FY11
                    - key: FY12
                    - key: FY13
                    - key: FY14
                    - key: FY15
                  type: enum
                - displayName: Qtr
                  hidden: false
                  key: qtr
                  options:
                    - key: First
                    - key: Second
                    - key: Third
                    - key: Fourth
                  type: enum
              scope: enterprise_490685
              templateKey: customer
          schema:
            $ref: '#/definitions/MetadataTemplate'
        '400':
          description: Request body contains invalid metadata schema.
          examples:
            application/json:
              code: bad_request
              help_url: 'http://developers.box.com/docs/#errors'
              message: '"displayName" is required and not set'
              request_id: 616776114571858dc4ab8f
              status: 400
              type: error
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Request body contains a scope that the user is not allowed to create a template for.
          examples:
            application/json:
              code: forbidden
              help_url: 'http://developers.box.com/docs/#errors'
              message: Forbidden
              request_id: 616776114571858dc4ab8f
              status: 403
              type: error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create Metadata template error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Metadata Template
      tags:
        - Metadata
  '/metadata_templates/{SCOPE}':
    get:
      description: Used to retrieve all metadata templates within a user's enterprise. Currently only the enterprise scope is supported.
      externalDocs:
        url: 'https://docs.box.com/reference#get-enterprise-templates'
      operationId: getEnterpriseMetadataTemplates
      parameters:
        - in: path
          name: SCOPE
          required: true
          type: string
      responses:
        '200':
          description: All the templates within an enterprise and their corresponding schema
          examples:
            application/json:
              entries:
                - displayName: Document Flow
                  fields:
                    - description: What stage in the process the document is in
                      displayName: Current Document Stage
                      hidden: false
                      key: currentDocumentStage
                      type: string
                    - displayName: Needs Approval From
                      hidden: false
                      key: needsApprovalFrom
                      type: string
                    - description: Next document stage after approval is given
                      displayName: Next Document Stage
                      hidden: false
                      key: nextDocumentStage
                      type: string
                    - description: Maximum number of days that the document is allowed to be in this stage.
                      displayName: Maximum Days Allowed In Current Stage
                      hidden: false
                      key: maximumDaysAllowedInCurrentStage
                      type: float
                  hidden: false
                  scope: enterprise_12345
                  templateKey: documentFlow
                - displayName: Marketing Collateral
                  fields:
                    - displayName: Audience
                      hidden: false
                      key: audience1
                      type: string
                    - displayName: Document Type
                      hidden: false
                      key: documentType
                      type: string
                    - displayName: Competitive Document
                      hidden: false
                      key: competitiveDocument
                      type: string
                    - displayName: Status
                      hidden: false
                      key: status
                      type: string
                    - displayName: Author
                      hidden: false
                      key: author
                      type: string
                    - displayName: Editor
                      hidden: false
                      key: editor
                      type: string
                    - displayName: Current State
                      hidden: false
                      key: currentState
                      type: string
                    - displayName: Previous State
                      hidden: false
                      key: previousState
                      type: string
                  hidden: false
                  scope: enterprise_12345
                  templateKey: marketingCollateral
                - displayName: Product Info
                  fields:
                    - displayName: SKU Number
                      hidden: false
                      key: skuNumber
                      type: float
                    - displayName: Description
                      hidden: false
                      key: description
                      type: string
                    - displayName: Department
                      hidden: false
                      key: department
                      options:
                        - key: Beauty
                        - key: Shoes
                        - key: Accessories
                        - key: Clothing
                        - key: Handbags
                        - key: Bedding
                        - key: Watches
                      type: enum
                    - displayName: Display Date
                      hidden: false
                      key: displayDate
                      type: date
                  hidden: false
                  scope: enterprise_12345
                  templateKey: productInfo
              limit: 100
          schema:
            $ref: '#/definitions/MetadataTemplateList'
        default:
          description: Get Metadata Template error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Enterprise Metadata
      tags:
        - Metadata
  '/metadata_templates/{SCOPE}/{TEMPLATE}/schema':
    get:
      description: Used to retrieve the schema for a given metadata template.
      externalDocs:
        url: 'https://docs.box.com/reference#get-metadata-schema'
      operationId: getMetadataTemplate
      parameters:
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
      responses:
        '200':
          description: The schema representing the metadata template queried
          examples:
            application/json:
              displayName: Product Info
              fields:
                - displayName: SKU Number
                  hidden: false
                  key: skuNumber
                  type: float
                - displayName: Description
                  hidden: false
                  key: description
                  type: string
                - displayName: Department
                  hidden: false
                  key: department
                  options:
                    - key: Beauty
                    - key: Shoes
                    - key: Accessories
                    - key: Clothing
                    - key: Handbags
                    - key: Bedding
                    - key: Watches
                  type: enum
                - displayName: Display Date
                  hidden: false
                  key: displayDate
                  type: date
              hidden: false
              scope: enterprise_12345
              templateKey: productInfo
          schema:
            $ref: '#/definitions/MetadataTemplate'
        default:
          description: Get Metadata Template error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Metadata Template
      tags:
        - Metadata
    put:
      description: Used to update the schema of an existing template.
      externalDocs:
        url: 'https://docs.box.com/reference#update-metadata-schema'
      operationId: updateMetadataTemplate
      parameters:
        - in: path
          name: SCOPE
          required: true
          type: string
        - in: path
          name: TEMPLATE
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateMetadataTemplate'
      responses:
        '200':
          description: The schema representing the updated metadata template.
          examples:
            application/json:
              displayName: Customer
              fields:
                - displayName: Customer team
                  hidden: false
                  key: customerTeam
                  type: string
                - displayName: Customer Group
                  hidden: false
                  key: category
                  type: string
                - displayName: Brand
                  hidden: false
                  key: brand
                  type: string
                - displayName: FY
                  hidden: false
                  key: fy
                  options:
                    - key: FY11
                    - key: FY12
                    - key: FY13
                    - key: FY14
                    - key: FY15
                  type: enum
                - displayName: Qtr
                  hidden: false
                  key: qtr
                  options:
                    - key: First
                    - key: Second
                    - key: Third
                    - key: Fourth
                  type: enum
              scope: enterprise_490685
              templateKey: customer
          schema:
            $ref: '#/definitions/MetadataTemplate'
        '400':
          description: Request body contains invalid metadata schema.
          examples:
            application/json:
              code: bad_request
              help_url: 'http://developers.box.com/docs/#errors'
              message: '"displayName" is required and not set'
              request_id: 616776114571858dc4ab8f
              status: 400
              type: error
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Request body contains a scope that the user is not allowed to create templates for.
          examples:
            application/json:
              code: forbidden
              help_url: 'http://developers.box.com/docs/#errors'
              message: Forbidden
              request_id: 616776114571858dc4ab8f
              status: 403
              type: error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Requested template is not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Patch Metadata template error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Metadata Template
      tags:
        - Metadata
  /retention_policies:
    get:
      description: Retrieves all of the retention policies for the given enterprise.
      externalDocs:
        url: 'https://docs.box.com/reference#get-retention-policies'
      operationId: getRetentionPolicies
      parameters:
        - description: A name to filter the retention policies by. A trailing partial match search is performed.
          in: query
          name: policy_name
          required: false
          type: string
        - description: A policy type to filter the retention policies by.
          enum:
            - finite
            - indefinite
          in: query
          name: policy_type
          required: false
          type: string
        - description: A user id to filter the retention policies by.
          in: query
          name: created_by_user_id
          required: false
          type: string
      responses:
        '200':
          description: 'Returns the list of all retention policies for the enterprise. If query parameters are given, only the retention policies that match the query parameters are returned.'
          examples:
            application/json:
              entries:
                - id: '123456789'
                  name: TaxDocuments
                  type: retention_policy
          schema:
            $ref: '#/definitions/RetentionPolicyList'
        '400':
          description: 'If a bad “policy_type” is given, a 400 HTTP status code of bad_request is returned.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'If the user specified in the “created_by_user_id” does not exist, a 404 HTTP status code of not_found is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get Retention policies error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Retention Policies
      tags:
        - Retention Policies
    post:
      description: Used to create a new retention policy.
      externalDocs:
        url: 'https://docs.box.com/reference#create-retention-policy'
      operationId: createRetentionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RetentionPolicy'
      responses:
        '201':
          description: A new retention policy object will be returned upon success.
          examples:
            application/json:
              created_at: '2015-05-01T11:12:54-07:00'
              created_by:
                id: '11993747'
                login: sean@box.com
                name: Sean
                type: user
              disposition_action: permanently_delete
              id: '123456789'
              policy_name: Tax Documents
              policy_type: finite
              retention_length: 365
              status: active
              type: retention_policy
          schema:
            $ref: '#/definitions/RetentionPolicy'
        '400':
          description: 'If a “retention_length” or incorrect “disposition_action” is specified for an indefinite policy, a 400 HTTP status code of bad_request will be returned.'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: 'If a retention policy with the given name already exists, a 409 HTTP status code of conflict will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create Retention policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Retention Policy
      tags:
        - Retention Policies
  '/retention_policies/{POLICY_ID}':
    get:
      description: Used to retrieve information about a retention policy
      externalDocs:
        url: 'https://docs.box.com/reference#get-retention-policy'
      operationId: getRetentionPolicy
      parameters:
        - in: path
          name: POLICY_ID
          required: true
          type: string
      responses:
        '200':
          description: The specified retention policy will be returned upon success.
          examples:
            application/json:
              created_at: '2015-05-01T11:12:54-07:00'
              created_by:
                id: '11993747'
                login: sean@box.com
                name: Sean
                type: user
              disposition_action: remove_retention
              id: '123456789'
              modified_at: '2015-06-08T11:11:50-07:00'
              policy_name: Tax Documents
              policy_type: finite
              retention_length: 365
              status: active
              type: retention_policy
          schema:
            $ref: '#/definitions/RetentionPolicy'
        '404':
          description: 'If the retention policy specified does not exist, a 404 HTTP status code of not_found is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get Retention Policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Retention Policy
      tags:
        - Retention Policies
    put:
      description: Used to update a retention policy.
      externalDocs:
        url: 'https://docs.box.com/reference#update-retention-policy'
      operationId: updateRetentionPolicy
      parameters:
        - in: path
          name: POLICY_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RetentionPolicy'
      responses:
        '200':
          description: 'An updated retention policy object will be returned upon success. '
          examples:
            application/json:
              created_at: '2015-05-01T11:12:54-07:00'
              created_by:
                id: '11993747'
                login: sean@box.com
                name: Sean
                type: user
              disposition_action: remove_retention
              id: '123456789'
              modified_at: '2015-06-08T11:11:50-07:00'
              policy_name: Tax Documents
              policy_type: finite
              retention_length: 365
              status: active
              type: retention_policy
          schema:
            $ref: '#/definitions/RetentionPolicy'
        '400':
          description: 'If an incorrect “disposition_action” is specified for an indefinite policy, a 400 HTTP status code of bad_request will be returned.'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: 'If a retention policy with the given name already exists, a 409 HTTP status code of conflict will be returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Update Retention policy error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Retention Policy
      tags:
        - Retention Policies
  '/retention_policies/{POLICY_ID}/assignments':
    get:
      description: Returns a list of all retention policy assignments associated with a specified retention policy.
      externalDocs:
        url: 'https://docs.box.com/reference#get-retention-policy-assignments'
      operationId: getRetentionPolicyAssignments
      parameters:
        - in: path
          name: POLICY_ID
          required: true
          type: string
        - description: The type of the retention policy assignment to retrieve. Can either be folder or enterprise.
          enum:
            - folder
            - enterprise
          in: query
          name: type
          required: false
          type: string
      responses:
        '200':
          description: Returns a list of the retention policy assignments associated with the specified retention policy.
          examples:
            application/json:
              entries:
                - id: '12345678'
                  type: retention_policy_assignment
          schema:
            $ref: '#/definitions/RetentionPolicyAssignmentList'
        '400':
          description: 'If a bad “type” parameter is given, a 400 HTTP status code of bad_request is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get Retention policy assignments error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Retention Policy Assignments
      tags:
        - Retention Policies
  /retention_policy_assignments:
    post:
      description: Returns a list of all retention policy assignments associated with a specified retention policy.
      externalDocs:
        url: 'https://docs.box.com/reference#create-retention-policy-assignment'
      operationId: createRetentionPolicyAssignment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateRetentionPolicyAssignment'
      responses:
        '201':
          description: A new retention policy assignment will be returned upon success.
          examples:
            application/json:
              assigned_at: '2015-07-20T14:28:09-07:00'
              assigned_by:
                id: '123456789'
                login: sean@box.com
                name: Sean
                type: user
              assigned_to:
                id: '99922219'
                type: folder
              id: '3233225'
              retention_policy:
                id: '32131'
                policy_name: TaxDocuments
                type: retention_policy
              type: retention_policy_assignment
          schema:
            $ref: '#/definitions/RetentionPolicyAssignment'
        '400':
          description: 'If an “id” is specified while assigning a retention policy to an enterprise, a 400 HTTP status code of bad_request is returned.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'If no retention policy with the given “policy_id” exists, a 404 HTTP status code of not_found is returned.'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: 'If a retention policy of equal or greater length has already been assigned to this content, a 409 HTTP status_code of conflict is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create Retention Policy Assignment error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Retention Policy Assignment
      tags:
        - Retention Policies
  '/retention_policy_assignments/{RETENTION_POLICY_ASSIGNMENT_ID}':
    get:
      description: Used to retrieve information about a retention policy assignment.
      externalDocs:
        url: 'https://docs.box.com/reference#get-retention-policy-assignment'
      operationId: getRetentionPolicyAssignment
      parameters:
        - in: path
          name: RETENTION_POLICY_ASSIGNMENT_ID
          required: true
          type: string
      responses:
        '200':
          description: The specified retention policy assignment will be returned upon success.
          examples:
            application/json:
              assigned_at: '2015-07-20T14:28:09-07:00'
              assigned_by:
                id: '123456789'
                login: sean@box.com
                name: Sean
                type: user
              assigned_to:
                id: '99922219'
                type: folder
              id: '3233225'
              retention_policy:
                id: '32131'
                policy_name: TaxDocuments
                type: retention_policy
              type: retention_policy_assignment
          schema:
            $ref: '#/definitions/RetentionPolicyAssignment'
        '404':
          description: 'If no retention policy assignment with the given ID exists, a 404 HTTP status code of not_found is returned.'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get Retention Policy Assignment error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Retention Policy Assignment
      tags:
        - Retention Policies
  /search:
    get:
      description: The search endpoint provides a powerful way of finding items that are accessible by a single user or an entire enterprise. Leverage the parameters listed below to generate targeted advanced searches.
      externalDocs:
        url: 'https://docs.box.com/reference#searching-for-content'
      operationId: search
      parameters:
        - description: 'The string to search for; can be matched against item names, descriptions, text content of a file, and other fields of the different item types.'
          in: query
          name: query
          required: true
          type: string
        - description: 'The scope for which you want to limit your search to. Can be user_content for a search limited to only the current user or enterprise_content for the entire enterprise. To enable the enterprise_content scope for an administrator, please contact us.'
          in: query
          name: scope
          required: false
          type: string
        - description: 'Limit searches to specific file extensions like pdf,png,doc. Requires one or a set of comma delimited file extensions: file_extension_1,file_extension_2,....'
          in: query
          name: file_extensions
          required: false
          type: string
        - description: 'The date for when the item was created. Specify the date range by using RFC3339 timestamp variables separated by a comma: from_date,to_date (e.g 2014-05-15T13:35:01-07:00,2014-05-17T13:35:01-07:00). Trailing from_date, and leading ,to_date commas are also accepted, where the current date and earliest known date will be designated respectively.'
          format: date-time
          in: query
          name: created_at_range
          required: false
          type: string
        - description: 'The date for when the item was last updated. Specify the date range by using RFC3339 variables separated by a comma: from_date,to_date(e.g 2014-05-15T13:35:01-07:00,2014-05-17T13:35:01-07:00). Trailing from_date, and leading ,to_date commas are also accepted, where the current date and earliest known date will be designated respectively.'
          format: date-time
          in: query
          name: updated_at_range
          required: false
          type: string
        - description: 'Filter by a file size range. Specify the file size range in bytes separated by a comma:lower_bound_size,upper_bound_size, where 1MB is equivalent to 1000000 bytes. Trailing lower_bound_size, and leading ,upper_bound_size commas are also accepted as parameters.'
          format: int64
          in: query
          name: size_range
          required: false
          type: integer
        - description: 'Search by item owners. Requires one or a set of comma delimited user_ids: user_id_1,user_id_2,...'
          in: query
          name: owner_user_ids
          required: false
          type: string
        - description: 'Limit searches to specific parent folders. Requires one or a set of comma delimited folder_ids: folder_id_1,folder_id_2,.... Parent folder results will also include items within subfolders.'
          in: query
          name: ancestor_folder_ids
          required: false
          type: string
        - description: 'Limit searches to specific Box designated content types. Can be name, description, file_content, comments, or tags. Requires one or a set of comma delimited content_types: content_type_1,content_type_2,....'
          in: query
          name: content_types
          required: false
          type: string
        - description: 'The type you want to return in your search. Can be file, folder, or web_link.'
          enum:
            - file
            - folder
            - web_link
          in: query
          name: type
          required: false
          type: string
        - description: Allows you to search within the trash. Can be trashed_only or non_trashed_only. Searches without this parameter default to non_trashed_only.
          in: query
          name: trash_content
          required: false
          type: string
        - description: Filters for a specific metadata template for files with metadata object associations. The filters are to be placed in a single JSON object. Please refer the MDFilters object in the definitions section of the swagger.json
          in: query
          name: mdfilters
          required: false
          type: string
        - description: Number of search results to return. The default is 30 and the max is 200.
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: The search result at which to start the response. The default is 0.
          format: int64
          in: query
          name: offset
          required: false
          type: integer
      responses:
        '200':
          description: 'A collection of search results is returned. If there are no matching search results, the entries array will be empty.'
          schema:
            $ref: '#/definitions/ObjectList'
        default:
          description: Search operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Searching for Content
      tags:
        - Search
  /shared_items:
    get:
      description: |-
        Shared items are any files or folders that are represented by a shared link. Shared items are different from other API resources in that a shared resource doesn’t necessarily have to be in the account of the user accessing it. The actual shared link itself is used along with a normal access token.
        Used to retrieve the metadata about a shared item when only given a shared link. Because of varying permission for shared links, a password may be required to retrieve the shared item. Once the item has been retrieved, you can make API requests against the actual resource /files/{id} or /folders/{id} as long as the shared link and optional password are in the header.
      externalDocs:
        url: 'https://docs.box.com/reference#get-a-shared-item'
      operationId: getSharedItems
      parameters:
        - description: 'The usage is ''BoxApi: shared_link=SHARED_LINK&shared_link_password=SHARED_LINK_PASSWORD'''
          in: header
          name: BoxApi
          required: true
          type: string
      responses:
        '200':
          description: A full file or folder object is returned if the shared link is valid and the user has access to it.
          examples:
            application/json:
              created_at: '2012-12-12T10:53:43-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: Some pictures I took
              etag: '1'
              folder_upload_email:
                access: open
                email: upload.Picture.k13sdz1@u.box.com
              id: '11446498'
              item_collection:
                entries:
                  - etag: '3'
                    id: '5000948880'
                    name: tigers.jpeg
                    sequence_id: '3'
                    sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
                    type: file
                limit: 100
                offset: 0
                total_count: 1
              item_status: active
              modified_at: '2012-12-12T11:15:04-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: Pictures
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                total_count: 1
              sequence_id: '1'
              shared_link:
                access: open
                download_count: 0
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/vspke7y05sb214wjokpk'
              size: 629644
              type: folder
          schema:
            type: object
        default:
          description: Get shared items operation error
          schema:
            $ref: '#/definitions/Error'
      summary: Shared Items
      tags:
        - Shared Items
  /task_assignments:
    post:
      description: Used to assign a task to a single user. There can be multiple assignments on a given task.
      externalDocs:
        url: 'https://docs.box.com/reference#create-a-task-assignment'
      operationId: createTaskAssignment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateTaskAssignment'
      responses:
        '201':
          description: A new task assignment object will be returned upon success.
          examples:
            application/json:
              assigned_at: '2013-05-10T11:43:41-07:00'
              assigned_by:
                id: '11993747'
                login: sean@box.com
                name: ☁ sean ☁
                type: user
              assigned_to:
                id: '1992432'
                login: rhaegar@box.com
                name: rhaegar@box.com
                type: user
              id: '2698512'
              item:
                etag: '0'
                id: '8018809384'
                name: scrumworksToTrello.js
                sequence_id: '0'
                sha1: 7840095ee096ee8297676a138d4e316eabb3ec96
                type: file
              resolution_state: incomplete
              type: task_assignment
          schema:
            $ref: '#/definitions/TaskAssignment'
        default:
          description: Create Task assginment error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Task Assignment
      tags:
        - Tasks
  '/task_assignments/{TASK_ASSIGNMENT_ID}':
    delete:
      description: Deletes a specific task assignment.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-a-task-assignment'
      operationId: deleteTaskAssignment
      parameters:
        - in: path
          name: TASK_ASSIGNMENT_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 No Content response will be returned upon success.
        default:
          description: Delete Task assignment error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Task Assignment
      tags:
        - Tasks
    get:
      description: Fetches a specific task assignment.
      externalDocs:
        url: 'https://docs.box.com/reference#get-a-task-assignment'
      operationId: getTaskAssignment
      parameters:
        - in: path
          name: TASK_ASSIGNMENT_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: The specified task assignment object will be returned upon success.
          examples:
            application/json:
              assigned_at: '2013-05-10T11:43:41-07:00'
              assigned_by:
                id: '11993747'
                login: sean@box.com
                name: ☁ sean ☁
                type: user
              assigned_to:
                id: '1992432'
                login: rhaegar@box.com
                name: rhaegar@box.com
                type: user
              id: '2698512'
              item:
                etag: '0'
                id: '8018809384'
                name: scrumworksToTrello.js
                sequence_id: '0'
                sha1: 7840095ee096ee8297676a138d4e316eabb3ec96
                type: file
              resolution_state: incomplete
              type: task_assignment
          schema:
            $ref: '#/definitions/TaskAssignment'
        default:
          description: Get Task assginment error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Task Assignment
      tags:
        - Tasks
    put:
      description: Used to update a task assignment.
      externalDocs:
        url: 'https://docs.box.com/reference#update-a-task-assignment'
      operationId: updateTaskAssignment
      parameters:
        - in: path
          name: TASK_ASSIGNMENT_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TaskAssignment'
      responses:
        '200':
          description: A new task assignment object will be returned upon success.
          examples:
            application/json:
              assigned_at: '2013-05-10T11:43:41-07:00'
              assigned_by:
                id: '11993747'
                login: sean@box.com
                name: ☁ sean ☁
                type: user
              assigned_to:
                id: '1992432'
                login: rhaegar@box.com
                name: rhaegar@box.com
                type: user
              id: '2698512'
              item:
                etag: '0'
                id: '8018809384'
                name: scrumworksToTrello.js
                sequence_id: '0'
                sha1: 7840095ee096ee8297676a138d4e316eabb3ec96
                type: file
              message: hello!!!
              resolution_state: incomplete
              type: task_assignment
          schema:
            $ref: '#/definitions/TaskAssignment'
        default:
          description: Update Task assginment error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Task Assignment
      tags:
        - Tasks
  /tasks:
    post:
      description: Used to create a single task for single user on a single file.
      externalDocs:
        url: 'https://docs.box.com/reference#create-a-task'
      operationId: createTask
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '201':
          description: A new task object will be returned upon success.
          examples:
            application/json:
              action: review
              created_at: '2013-04-03T11:12:54-07:00'
              created_by:
                id: '11993747'
                login: sean@box.com
                name: ☁ sean ☁
                type: user
              due_at: '2014-04-03T11:09:43-07:00'
              id: '1839355'
              is_completed: false
              item:
                etag: '0'
                id: '7287087200'
                name: box-logo.png
                sequence_id: '0'
                sha1: 0bbd79a105c504f99573e3799756debba4c760cd
                type: file
              message: REVIEW PLZ K THX
              task_assignment_collection:
                entries: []
                total_count: 0
              type: task
          schema:
            $ref: '#/definitions/Task'
        default:
          description: Create Task error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Task
      tags:
        - Tasks
  '/tasks/{TASK_ID}':
    delete:
      description: Permanently deletes a specific task.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-a-task'
      operationId: deleteTask
      parameters:
        - in: path
          name: TASK_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 response will be returned upon success.
        default:
          description: Delete Task error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Task
      tags:
        - Tasks
    get:
      description: Fetches a specific task.
      externalDocs:
        url: 'https://docs.box.com/reference#task-object'
      operationId: getTask
      parameters:
        - in: path
          name: TASK_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: The specified task object will be returned upon success.
          examples:
            application/json:
              action: review
              created_at: '2013-04-03T11:12:54-07:00'
              created_by:
                id: '11993747'
                login: sean@box.com
                name: ☁ sean ☁
                type: user
              due_at: '2014-04-03T11:09:43-07:00'
              id: '1839355'
              is_completed: false
              item:
                etag: '0'
                id: '7287087200'
                name: box-logo.png
                sequence_id: '0'
                sha1: 0bbd79a105c504f99573e3799756debba4c760cd
                type: file
              message: REVIEW PLZ K THX
              task_assignment_collection:
                entries: []
                total_count: 0
              type: task
          schema:
            $ref: '#/definitions/Task'
        default:
          description: Get task error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Task
      tags:
        - Tasks
    put:
      description: Updates a specific task.
      externalDocs:
        url: 'https://docs.box.com/reference#update-a-task'
      operationId: updateTask
      parameters:
        - in: path
          name: TASK_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: The updated task object will be returned upon success.
          examples:
            application/json:
              action: review
              created_at: '2013-04-03T11:12:54-07:00'
              created_by:
                id: '11993747'
                login: sean@box.com
                name: ☁ sean ☁
                type: user
              due_at: '2014-04-03T11:09:43-07:00'
              id: '1839355'
              is_completed: false
              item:
                etag: '0'
                id: '7287087200'
                name: box-logo.png
                sequence_id: '0'
                sha1: 0bbd79a105c504f99573e3799756debba4c760cd
                type: file
              message: REVIEW PLZ K THX
              task_assignment_collection:
                entries: []
                total_count: 0
              type: task
          schema:
            $ref: '#/definitions/Task'
        default:
          description: Update Task error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Task
      tags:
        - Tasks
  '/tasks/{TASK_ID}/assignments':
    get:
      description: Retrieves all of the assignments for a given task.
      externalDocs:
        url: 'https://docs.box.com/reference#get-the-assignments-for-a-task'
      operationId: getTaskAssignments
      parameters:
        - in: path
          name: TASK_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: A collection of task assignment mini objects will be returned upon success.
          examples:
            application/json:
              entries:
                - assigned_to:
                    id: '193425559'
                    login: rhaegar@box.com
                    name: Rhaegar Targaryen
                    type: user
                  id: '2485961'
                  item:
                    etag: '0'
                    id: '7287087200'
                    name: box-logo.png
                    sequence_id: '0'
                    sha1: 0bbd79a105c504f99573e3799756debba4c760cd
                    type: file
                  type: task_assignment
              total_count: 1
          schema:
            $ref: '#/definitions/TaskAssignmentList'
        default:
          description: Get Task assginments error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Assignments
      tags:
        - Tasks
  /users:
    get:
      description: 'Returns a list of all users for the Enterprise along with their user_id, public_name, and login.'
      externalDocs:
        url: 'https://docs.box.com/reference#get-all-users-in-an-enterprise'
      operationId: getEnterpriseUsers
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: A string used to filter the results to only users starting with the filter_term in either the name or the login.
          in: query
          name: filter_term
          required: false
          type: string
        - description: The number of records to return. The default is 100 and the max is 1000.
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: The record at which to start. The default is 0.
          format: int64
          in: query
          name: offset
          required: false
          type: integer
        - description: 'The type of user to search for. Valid values are all, external or managed.  If nothing is provided, the default behavior will be managed only'
          enum:
            - all
            - external
            - managed
          in: query
          name: user_type
          required: false
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/UserList'
        default:
          description: Get Enterprise users error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Enterprise Users
      tags:
        - Users
    post:
      description: Used to provision a new user in an enterprise. This method only works for enterprise admins.
      externalDocs:
        url: 'https://docs.box.com/reference#create-an-enterprise-user'
      operationId: createUser
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Returns the full user object for the newly created user. Errors may be thrown when the fields are invalid or this API call is made from a non-admin account.
          examples:
            application/json:
              address: 555 Box Lane
              avatar_url: 'https://www.box.com/api/avatar/large/187273718'
              can_see_managed_users: true
              created_at: '2012-11-15T16:34:28-08:00'
              id: '187273718'
              is_exempt_from_device_limits: false
              is_exempt_from_login_verification: false
              is_sync_enabled: true
              job_title: ''
              language: en
              login: eddard@box.com
              max_upload_size: 2147483648
              modified_at: '2012-11-15T16:34:29-08:00'
              name: Ned Stark
              phone: 555-555-5555
              role: user
              space_amount: 5368709120
              space_used: 0
              status: active
              tracking_codes: []
              type: user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Create User error
          schema:
            $ref: '#/definitions/Error'
      summary: Create User
      tags:
        - Users
  /users/me:
    get:
      description: Retrieves information about the user who is currently logged in i.e. the user for whom this auth token was generated.
      externalDocs:
        url: 'https://docs.box.com/reference#get-the-current-users-information'
      operationId: getCurrentUser
      parameters:
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: Returns a single complete user object.
          examples:
            application/json:
              address: 555 Office Drive
              avatar_url: 'https://app.box.com/api/avatar/large/17738362'
              created_at: '2012-03-26T15:43:07-07:00'
              id: '17738362'
              job_title: Employee
              language: en
              login: sean@box.com
              max_upload_size: 262144000
              modified_at: '2012-12-12T11:34:29-08:00'
              name: sean rose
              phone: '5555555555'
              space_amount: 5368709120
              space_used: 2377016
              status: active
              type: user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Get current user error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Current User
      tags:
        - Users
  '/users/{USER_ID}':
    delete:
      description: Deletes a user in an enterprise account.
      externalDocs:
        url: 'https://docs.box.com/reference#delete-an-enterprise-user'
      operationId: deleteUser
      parameters:
        - in: path
          name: USER_ID
          required: true
          type: string
        - in: query
          name: notify
          type: boolean
        - in: query
          name: force
          type: boolean
      responses:
        '204':
          description: 'An empty 204 response is sent to confirm deletion of the user. If the user still has files in their account and the ‘force’ parameter is not sent, an error is returned.'
        default:
          description: 'If the user still has files in their account and the ‘force’ parameter is not sent, an error is returned.'
          schema:
            $ref: '#/definitions/Error'
      summary: Delete User
      tags:
        - Users
    get:
      description: Retrieves information about a user in the enterprise. Requires enterprise administration authorization.
      externalDocs:
        url: 'https://docs.box.com/reference#users'
      operationId: getUser
      parameters:
        - in: path
          name: USER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: 'Returns a single complete user object. Note: The GET /users{id} endpoint also returns a limited set of information for external users who are collaborated on content owned by the enterprise for certain admin scopes/users. Disallowed fields will return null.'
          examples:
            application/json:
              address: ''
              avatar_url: 'https://blosserdemoaccount.app.box.com/api/avatar/large/10543465'
              created_at: '2011-01-07T12:37:09-08:00'
              id: '10543463'
              job_title: ''
              language: en
              login: ariellefrey@box.com
              max_upload_size: 5368709120
              modified_at: '2014-05-30T10:39:47-07:00'
              name: Arielle Frey
              phone: ''
              space_amount: 10737418240
              space_used: 558732
              status: active
              timezone: America/Los_Angeles
              type: user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Get User info error
          schema:
            $ref: '#/definitions/Error'
      summary: Get User's Info
      tags:
        - Users
    put:
      description: |-
        Used to edit the settings and information about a user. This method only works for enterprise admins. To roll a user out of the enterprise (and convert them to a standalone free user), update the special enterprise attribute to be null.

        Used to convert one of the user’s confirmed email aliases into the user’s primary login.
      externalDocs:
        url: 'https://docs.box.com/reference#update-a-users-information'
      operationId: updateUser
      parameters:
        - in: path
          name: USER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Returns the a full user object for the updated user. Errors may be thrown when the fields are invalid or this API call is made from a non-admin account.
          examples:
            application/json:
              address: ''
              avatar_url: 'https://www.box.com/api/avatar/large/181216415'
              can_see_managed_users: true
              created_at: '2012-05-03T21:39:11-07:00'
              id: '181216415'
              is_exempt_from_device_limits: false
              is_exempt_from_login_verification: false
              is_sync_enabled: true
              job_title: ''
              language: en
              login: sean+awesome@box.com
              max_upload_size: 2147483648
              modified_at: '2012-12-06T18:17:16-08:00'
              name: sean
              phone: '6509241374'
              role: admin
              space_amount: 5368709120
              space_used: 1237179286
              status: active
              tracking_codes: []
              type: user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Errors may be thrown when the fields are invalid or this API call is made from a non-admin account.
          schema:
            $ref: '#/definitions/Error'
      summary: 'Update User, Change User''s Login'
      tags:
        - Users
  '/users/{USER_ID}/email_aliases':
    get:
      description: Retrieves all email aliases for this user. The collection of email aliases does not include the primary login for the user; use GET /users/USER_ID to retrieve the login email address.
      externalDocs:
        url: 'https://docs.box.com/reference#get-all-email-aliases-for-a-user'
      operationId: getEmailAliases
      parameters:
        - in: path
          name: USER_ID
          required: true
          type: string
      responses:
        '200':
          description: If the user_id is valid a collection of email aliases will be returned.
          schema:
            $ref: '#/definitions/EmailAliasList'
        default:
          description: Get Email alias error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Email Aliases
      tags:
        - Users
    post:
      description: Adds a new email alias to the given user’s account.
      externalDocs:
        url: 'https://docs.box.com/reference#add-an-email-alias-for-a-user'
      operationId: addEmailAlias
      parameters:
        - in: path
          name: USER_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EmailAlias'
      responses:
        '201':
          description: Returns the newly created email_alias object.
          schema:
            $ref: '#/definitions/EmailAlias'
        default:
          description: Errors will be thrown if the user_id is not valid or the particular user’s email alias cannot be modified.
          schema:
            $ref: '#/definitions/Error'
      summary: Add Email Alias
      tags:
        - Users
  '/users/{USER_ID}/email_aliases/{EMAIL_ALIAS_ID}':
    delete:
      description: Removes an email alias from a user.
      externalDocs:
        url: 'https://docs.box.com/reference#remove-an-email-alias-from-a-user'
      operationId: deleteUserEmailAlias
      parameters:
        - in: path
          name: USER_ID
          required: true
          type: string
        - in: path
          name: EMAIL_ALIAS_ID
          required: true
          type: string
      responses:
        '204':
          description: 'If the user has permission to remove this email alias, an empty 204 No Content response will be returned to confirm deletion.'
        default:
          description: Delete Email alias error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Email Alias
      tags:
        - Users
  '/users/{USER_ID}/folders/{FOLDER_ID}':
    put:
      description: 'Moves all of the owned content from within one user’s folder into a new folder in another user’s account. You can move folders across users as long as the you have administrative permissions and the ‘source’ user owns the folders. To move everything from the root folder, use “0” which always represents the root folder of a Box account.'
      externalDocs:
        url: 'https://docs.box.com/reference#move-folder-into-another-users-folder'
      operationId: updateUserFolder
      parameters:
        - in: path
          name: USER_ID
          required: true
          type: string
        - in: path
          name: FOLDER_ID
          required: true
          type: string
        - in: query
          name: notify
          required: false
          type: boolean
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Folder'
      responses:
        '200':
          description: Returns the information for the newly created destination folder.. An error is thrown if you do not have the necessary permissions to move the folder.
          examples:
            application/json:
              created_at: '2012-12-12T10:53:43-08:00'
              created_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              description: Some pictures I took
              etag: '1'
              folder_upload_email:
                access: open
                email: upload.Picture.k13sdz1@u.box.com
              id: '11446498'
              item_collection:
                entries:
                  - etag: '3'
                    id: '5000948880'
                    name: tigers.jpeg
                    sequence_id: '3'
                    sha1: 134b65991ed521fcfe4724b7d814ab8ded5185dc
                    type: file
                limit: 100
                offset: 0
                total_count: 1
              item_status: active
              modified_at: '2012-12-12T11:15:04-08:00'
              modified_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              name: Pictures
              owned_by:
                id: '17738362'
                login: sean@box.com
                name: sean rose
                type: user
              parent:
                id: '0'
                name: All Files
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                total_count: 1
              sequence_id: '1'
              shared_link:
                access: open
                download_count: 0
                is_password_enabled: false
                permissions:
                  can_download: true
                  can_preview: true
                preview_count: 0
                url: 'https://www.box.com/s/vspke7y05sb214wjokpk'
              size: 629644
              type: folder
          schema:
            $ref: '#/definitions/Folder'
        default:
          description: An error is thrown if you do not have the necessary permissions to move the folder.
          schema:
            $ref: '#/definitions/Error'
      summary: Move User's Folder
      tags:
        - Users
  '/users/{USER_ID}/memberships':
    get:
      description: 'Retrieves all of the group memberships for a given user. Note this is only available to group admins. To retrieve group memberships for the user making the API request, use the users/me/memberships endpoint.'
      externalDocs:
        url: 'https://docs.box.com/reference#get-all-group-memberships-for-a-user'
      operationId: getUserGroupMembership
      parameters:
        - in: path
          name: USER_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - description: Default is 100. Max is 1000
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: The item at which to begin the response
          format: int64
          in: query
          name: offset
          required: false
          type: integer
      responses:
        '200':
          description: ''
          examples:
            application/json:
              entries:
                - group:
                    id: '119720'
                    name: family
                    type: group
                  id: '1560354'
                  role: member
                  type: group_membership
                  user:
                    id: '13130906'
                    login: alice@gmail.com
                    name: Alice
                    type: user
                - group:
                    id: '119720'
                    name: family
                    type: group
                  id: '1560356'
                  role: member
                  type: group_membership
                  user:
                    id: '192633962'
                    login: rabbit@gmail.com
                    name: rabbit
                    type: user
              limit: 100
              offset: 0
              total_count: 2
          schema:
            $ref: '#/definitions/GroupMembershipList'
        default:
          description: Get user membership error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Memberships for User
      tags:
        - Users
  /web_links:
    post:
      description: Creates a web link object within a given folder.
      externalDocs:
        url: 'https://docs.box.com/reference#create-web-link'
      operationId: createWebLink
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WebLink'
      responses:
        '200':
          description: Created Web link object
          examples:
            application/json:
              created_at: '2015-05-07T15:00:01-07:00'
              created_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              description: Cloud Content Management
              etag: '0'
              id: '6743065'
              item_status: active
              modified_at: '2015-05-07T15:00:01-07:00'
              modified_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              name: Box Website!
              owned_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              parent:
                etag: '1'
                id: '848123342'
                name: Documentation
                sequence_id: '1'
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                  - etag: '1'
                    id: '848123342'
                    name: Documentation
                    sequence_id: '1'
                    type: folder
                total_count: 2
              sequence_id: '0'
              type: web_link
              url: 'https://www.box.com'
          schema:
            $ref: '#/definitions/WebLink'
        default:
          description: Create Web link error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Web Link
      tags:
        - Web Links
  '/web_links/{WEB_LINK_ID}':
    delete:
      description: Deletes a web link and moves it to the trash
      externalDocs:
        url: 'https://docs.box.com/reference#delete-web-link'
      operationId: deleteWebLink
      parameters:
        - in: path
          name: WEB_LINK_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 response if successfully deleted and moved to trash.
        default:
          description: Delete web link error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Web Link
      tags:
        - Web Links
    get:
      description: Use to get information about the web link.
      externalDocs:
        url: 'https://docs.box.com/reference#get-web-link'
      operationId: getWebLink
      parameters:
        - in: path
          name: WEB_LINK_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
      responses:
        '200':
          description: The web link object is returned.
          examples:
            application/json:
              created_at: '2015-05-07T14:31:16-07:00'
              created_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              description: Cloud Content Management
              etag: '0'
              id: '6742981'
              item_status: active
              modified_at: '2015-05-07T14:31:16-07:00'
              modified_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              name: Box Website
              owned_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              parent:
                etag: '1'
                id: '848123342'
                name: Documentation
                sequence_id: '1'
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                  - etag: '1'
                    id: '848123342'
                    name: Documentation
                    sequence_id: '1'
                    type: folder
                total_count: 2
              sequence_id: '0'
              type: web_link
              url: 'https://www.box.com'
          schema:
            $ref: '#/definitions/WebLink'
        default:
          description: Get web link error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Web Link
      tags:
        - Web Links
    put:
      description: Updates information for a web link.
      externalDocs:
        url: 'https://docs.box.com/reference#update-web-link'
      operationId: updateWebLink
      parameters:
        - in: path
          name: WEB_LINK_ID
          required: true
          type: string
        - description: Attribute(s) to include in the response
          in: query
          name: fields
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WebLink'
      responses:
        '200':
          description: An updated web link object if the update was successful.
          examples:
            application/json:
              created_at: '2015-05-07T14:31:16-07:00'
              created_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              description: Cloud Content Management
              etag: '2'
              id: '6742981'
              item_status: active
              modified_at: '2015-05-07T15:45:04-07:00'
              modified_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              name: Box Marketing Web Page
              owned_by:
                id: '10523870'
                login: ted+demo@box.com
                name: Ted Blosser
                type: user
              parent:
                etag: '1'
                id: '848123342'
                name: Documentation
                sequence_id: '1'
                type: folder
              path_collection:
                entries:
                  - id: '0'
                    name: All Files
                    type: folder
                  - etag: '1'
                    id: '848123342'
                    name: Documentation
                    sequence_id: '1'
                    type: folder
                total_count: 2
              sequence_id: '2'
              type: web_link
              url: 'https://www.box.com'
          schema:
            $ref: '#/definitions/WebLink'
        default:
          description: Update Web link error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Web Link
      tags:
        - Web Links
  /webhooks:
    get:
      description: |-
        Returns all defined webhooks for the requesting application and user, up to the limit. If no limit is supplied then Box uses the default limit of 100.
        If more than limit webhooks are defined then Box returns the webhooks in batches. When the results are batched, Box sends limit webhooks along with a next_marker field in the response object. The value of the next_marker field is a marker string that you can use in later requests to tell Box which batch to send next.
        When you send a request that includes a marker string, Box sends the next batch of webhooks, beginning after the last webhook of the previous batch. When the response contains the last of the defined webhooks, Box omits the next_marker field from its response.
        You can use limit and marker together with the marker string returned in the next_marker field to paginate lists of webhooks.
      externalDocs:
        url: 'https://docs.box.com/reference#get-webhooks'
      operationId: getWebhooks
      parameters:
        - description: The maximum number of webhooks to return per page
          format: int64
          in: query
          name: limit
          required: false
          type: integer
        - description: A marker string returned by Box if the result contains less than the full number of webhooks that are defined
          in: query
          name: marker
          required: false
          type: string
      responses:
        '200':
          description: A collection of webhooks.
          examples:
            application/json:
              entries:
                - id: '4161'
                  target:
                    id: '5018326685'
                    type: folder
                  type: webhook
                - id: '4165'
                  target:
                    id: '5016243669'
                    type: file
                  type: webhook
              limit: 3
          schema:
            $ref: '#/definitions/WebhookList'
        '403':
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create webhook error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Webhooks
      tags:
        - Webhooks
    post:
      description: Create Webhook
      externalDocs:
        url: 'https://docs.box.com/reference#create-webhook'
      operationId: createWebhook
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Webhook'
      responses:
        '201':
          description: Returns a webhook object if creation succeeds
          examples:
            application/json:
              address: 'https://example.net/actions/file_changed'
              created_at: '2016-05-09T17:41:27-07:00'
              created_by:
                id: '2030392653'
                login: johnq@example.net
                name: John Q. Developer
                type: user
              id: '4165'
              target:
                id: '5016243669'
                type: file
              triggers:
                - FILE.DOWNLOADED
                - FILE.PREVIEWED
              type: webhook
          schema:
            $ref: '#/definitions/Webhook'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Target could not be found
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Webhook already exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Create webhook error
          schema:
            $ref: '#/definitions/Error'
      summary: Create Webhook
      tags:
        - Webhooks
  '/webhooks/{WEBHOOK_ID}':
    delete:
      description: Permanently deletes a webhook
      externalDocs:
        url: 'https://docs.box.com/reference#delete-webhook'
      operationId: deleteWebhook
      parameters:
        - in: path
          name: WEBHOOK_ID
          required: true
          type: string
      responses:
        '204':
          description: An empty 204 response is returned to confirm deletion of the webhook.
        '403':
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Webhook ID not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Delete webhook error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete Webhook
      tags:
        - Webhooks
    get:
      description: Get a Webhook
      externalDocs:
        url: 'https://docs.box.com/reference#get-webhook'
      operationId: getWebhook
      parameters:
        - in: path
          name: WEBHOOK_ID
          required: true
          type: string
      responses:
        '200':
          description: Returns a webhook object
          examples:
            application/json:
              address: 'https://example.net/actions/file_changed'
              created_at: '2016-05-04T18:51:45-07:00'
              created_by:
                id: '2030392653'
                login: johnq@example.net
                name: John Q. Developer
                type: user
              id: '4137'
              target:
                id: '5018848529'
                type: file
              triggers:
                - FILE.PREVIEWED
              type: webhook
          schema:
            $ref: '#/definitions/Webhook'
        '403':
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Webhook ID not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Get webhook error
          schema:
            $ref: '#/definitions/Error'
      summary: Get Webhook
      tags:
        - Webhooks
    put:
      description: Update a Webhook
      externalDocs:
        url: 'https://docs.box.com/reference#update-webhook'
      operationId: updateWebhook
      parameters:
        - in: path
          name: WEBHOOK_ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Webhook'
      responses:
        '200':
          description: Returns the updated webhook object.
          examples:
            application/json:
              address: 'https://notification.example.net'
              created_at: '2016-05-04T18:51:17-07:00'
              created_by:
                id: '2030392653'
                login: john2@example.net
                name: John Q. Developer
                type: user
              id: '4133'
              target:
                id: '1000605797'
                type: folder
              triggers:
                - FILE.PREVIEWED
              type: webhook
          schema:
            $ref: '#/definitions/Webhook'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Webhook ID not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Update webhook error
          schema:
            $ref: '#/definitions/Error'
      summary: Update Webhook
      tags:
        - Webhooks
definitions:
  AssignmentCounts:
    description: Counts of assignments within this policy by apply-to type.
    properties:
      file:
        format: int64
        type: integer
      file_version:
        format: int64
        type: integer
      folder:
        format: int64
        type: integer
      user:
        format: int64
        type: integer
    type: object
  BoxFile:
    allOf:
      - $ref: '#/definitions/FileReference'
      - properties:
          collections:
            items:
              $ref: '#/definitions/Collection'
            type: array
          comment_count:
            description: The number of comments on a file.
            format: int64
            type: integer
          content_created_at:
            description: When the content of this file was created (more info).
            format: date-time
            type: string
          content_modified_at:
            description: When the content of this file was last modified (more info).
            format: date-time
            type: string
          created_at:
            description: When this file was created on Box’s servers.
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
            description: The user who first created file.
          description:
            description: The description of this file.
            type: string
          expiring_embed_link:
            description: An expiring URL for an embedded preview session in an iframe. This URL will expire after 60 seconds and the session will expire after 60 minutes.
            type: string
          extension:
            description: 'Indicates the suffix, when available, on the file. By default, set to an empty string. The suffix usually indicates the encoding (file format) of the file contents or usage.'
            type: string
          file_version:
            $ref: '#/definitions/FileVersionReference'
          is_package:
            description: Whether the file is a package. Used for Mac Packages used by iWorks.
            type: boolean
          item_status:
            description: Whether this item is deleted or not.
            type: string
          lock:
            $ref: '#/definitions/Lock'
          modified_at:
            description: When this file was last updated on the Box servers.
            format: date-time
            type: string
          modified_by:
            $ref: '#/definitions/UserReference'
            description: The user who last updated this file.
          owned_by:
            $ref: '#/definitions/UserReference'
            description: The user who owns this file.
          parent:
            $ref: '#/definitions/ItemReference'
            description: The folder containing this file.
          path_collection:
            $ref: '#/definitions/PathCollection'
            description: 'The path of folders to this file, starting at the root.'
          permissions:
            $ref: '#/definitions/FilePermissions'
          purged_at:
            description: When this file will be permanently deleted.
            format: date-time
            type: string
          shared_link:
            $ref: '#/definitions/SharedLink'
          size:
            description: Size of this file in bytes.
            format: int64
            type: integer
          tags:
            description: All tags applied to this file.
            items:
              type: string
            type: array
          trashed_at:
            description: When this file was last moved to the trash.
            format: date-time
            type: string
          version_number:
            description: The version number of the file.
            type: string
          watermark_info:
            $ref: '#/definitions/WatermarkInfo'
    description: 'File information describe file objects in Box, with attributes like who created the file, when it was last modified, and other information. The actual content of the file itself is accessible through the /files/{id}/content endpoint.'
    title: File Object
    type: object
  ChunkPagination:
    properties:
      chunk_size:
        format: int64
        type: integer
      next_stream_position:
        type: string
    type: object
  Collaboration:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          accessible_by:
            $ref: '#/definitions/UserReference'
            description: The user or group who the collaboration applies to
          acknowledged_at:
            description: When the status of this collab was changed
            format: date-time
            type: string
          can_view_path:
            description: Whether view path collaboration feature is enabled or not. View path collaborations allow the invitee to see the entire ancestral path to the associated folder. The user will not gain privileges in any ancestral folder
            type: boolean
          created_at:
            description: The time this collaboration was created
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
            description: The user who created this collaboration
          expires_at:
            description: The time this collaboration will expire
            format: date-time
            type: string
          item:
            $ref: '#/definitions/ItemReference'
          modified_at:
            description: The time this collaboration was last modified
            format: date-time
            type: string
          role:
            description: 'The level of access this user or group has. Can be editor, viewer, previewer, uploader, previewer uploader, viewer uploader, co-owner, or owner'
            enum:
              - editor
              - viewer
              - previewer
              - uploader
              - previewer uploader
              - viewer uploader
              - co-owner
              - owner
            type: string
          status:
            description: 'The status of this collab. Can be accepted, pending, or rejected'
            type: string
    description: 'Collaborations are used to set and apply access permissions for users and groups to files and folders, similar to access control lists.'
    type: object
  CollaborationList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/Collaboration'
            type: array
    type: object
  Collection:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          collection_type:
            description: The type of the collection. This is used to determine the proper visual treatment for Box-internally created collections. Initially only “favorites” collection-type will be supported.
            enum:
              - favorites
            type: string
          name:
            description: The name of this collection. The only collection currently available is named “Favorites”
            type: string
    description: 'Collections contain information about the items contained inside of them, including files and folders. The only collection available currently is a “Favorites” collection. The contents of the collection are discovered in a similar way in which the contents of a folder are discovered.'
    title: Collection Object
    type: object
  CollectionList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/Collection'
            type: array
    type: object
  Comment:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          created_at:
            description: The time this comment was created
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
            description: A mini user object representing the author of the comment
          is_reply_comment:
            description: Whether or not this comment is a reply to another comment
            type: boolean
          item:
            $ref: '#/definitions/ItemReference'
          message:
            description: The comment text that the user typed
            type: string
          modified_at:
            description: The time this comment was last modified
            format: date-time
            type: string
          tagged_message:
            description: 'The string representing the comment text with @mentions included. @mention format is @[id:username]. Field is not included by default.'
            type: string
    description: "Comments are messages generated by Box users. Each message is tied to a specific file. You can create comments independently or create them as responses to other comments.\n\n\t\t\t"
    title: Comment Object
    type: object
  CommentList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/Comment'
            type: array
    type: object
  CopyFile:
    properties:
      name:
        type: string
      parent:
        properties:
          id:
            type: string
        type: object
      version:
        type: string
    type: object
  CreateLegalHoldPolicyAssignment:
    description: Request object to create a new Legal Policy Hold Assignment
    properties:
      assign_to:
        $ref: '#/definitions/Reference'
        description: Target Object. Type of target and ID of the target entity
      policy_id:
        description: ID of Policy to create Assignment for.
        type: string
    type: object
  CreateRetentionPolicyAssignment:
    description: Request object to create a new Retention Policy Assignment
    properties:
      assign_to:
        $ref: '#/definitions/Reference'
        description: Target Object. Type of target and ID of the target entity
      policy_id:
        description: ID of Policy to create Assignment for.
        type: string
    type: object
  CreateTaskAssignment:
    properties:
      assign_to:
        $ref: '#/definitions/UserReference'
      task:
        $ref: '#/definitions/Task'
    type: object
  DevicePinner:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          created_at:
            description: The time this pin was created
            format: date-time
            type: string
          modified_at:
            description: The time this pin was modified
            format: date-time
            type: string
          owned_by:
            $ref: '#/definitions/UserReference'
            description: The user that the pin belongs to
          product_name:
            description: The type of device being pinned
            type: string
    description: 'Device pins allow enterprises to control what devices can use native Box applications. To learn more about device pinning, please see our  documentation.'
    title: Device Pinner Object
    type: object
  DevicePinnerList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/DevicePinner'
            type: array
    type: object
  EmailAlias:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          email:
            type: string
          is_confirmed:
            type: boolean
    type: object
  EmailAliasList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/EmailAlias'
            type: array
    type: object
  Enterprise:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          name:
            type: string
    description: 'Mini representation of this user’s enterprise, including the ID of its enterprise.'
    type: object
  Error:
    properties:
      code:
        type: string
      context_info:
        properties:
          errors:
            items:
              properties:
                message:
                  type: string
                name:
                  type: string
                reason:
                  type: string
              type: object
            type: array
        type: object
      help-url:
        type: string
      message:
        type: string
      request_id:
        type: string
      status:
        format: int32
        type: integer
      type:
        enum:
          - error
        type: string
    type: object
  Event:
    description: ''
    properties:
      additional_details:
        description: This object provides additional information about the event if available. This can include how a user performed an event as well as additional information to correlate an event to external Keysafe logs. Not all events have an additional_details object.  This object is only available in the Enterprise Events.
        type: object
      created_by:
        $ref: '#/definitions/UserReference'
        description: 'The user that performed the action. Some events may be performed by users not logged into Box. In those instances, not all attributes of this object will be populated and the event will be attributed to a unknown user (user_id = 2).'
      event_id:
        description: 'The id of the event, used for de-duplication purposes'
        type: string
      event_type:
        description: One of the event types
        type: string
      session_id:
        description: The session of the user that performed the action. Not all events will populate this attribute.
        type: string
      source:
        description: 'The object that was modified. See Object definitions for appropriate object: file, folder, comment, etc. Not all events have a source object.'
        type: object
      type:
        enum:
          - event
        type: string
    title: Event Object
    type: object
  EventList:
    allOf:
      - $ref: '#/definitions/ChunkPagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/Event'
            type: array
    type: object
  FilePermissions:
    description: The permissions that the current user has on the file
    properties:
      can_download:
        type: boolean
      can_invite_collaborator:
        type: boolean
      can_preview:
        type: boolean
      can_rename:
        type: boolean
      can_set_share_access:
        type: boolean
      can_share:
        type: boolean
      can_upload:
        type: boolean
      cand_delete:
        type: boolean
    type: object
  FileReference:
    allOf:
      - $ref: '#/definitions/ItemReference'
      - properties:
          sha1:
            description: The sha1 hash of this file.
            type: string
    description: It references either a file or a folder
    type: object
  FileReferenceList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/FileReference'
            type: array
    type: object
  FileVersion:
    allOf:
      - $ref: '#/definitions/FileVersionReference'
      - properties:
          created_at:
            format: date-time
            type: string
          modified_at:
            format: date-time
            type: string
          modified_by:
            $ref: '#/definitions/UserReference'
          name:
            type: string
          size:
            format: int64
            type: integer
    type: object
  FileVersionLegalHold:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          deleted_at:
            description: Time that this File-Version-Legal-Hold was deleted.
            format: date-time
            type: string
          file:
            $ref: '#/definitions/FileReference'
            description: The parent file of the File-Version that is held. Note that there is no guarantee that the current version of this File is held.
          file_version:
            $ref: '#/definitions/FileVersionReference'
            description: The File-Version that is held.
          legal_hold_policy_assignments:
            description: List of assignments contributing to this Hold.
            items:
              $ref: '#/definitions/LegalHoldPolicyAssignment'
            type: array
    description: File-Version-Legal-Hold is an entity representing all holds on a File Version. Type is legal-hold.
    title: File Version Legal Hold object
    type: object
  FileVersionLegalHoldList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/FileVersionLegalHold'
            type: array
    type: object
  FileVersionList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/FileVersion'
            type: array
    description: A collection of FileVersions.
    type: object
  FileVersionReference:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          sha1:
            description: The sha1 hash of this file.
            type: string
    description: The version information of the file.
    type: object
  FileVersionRetention:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          applied_at:
            description: The time that this file version retention was created.
            format: date-time
            type: string
          disposition_at:
            description: The time that the retention period expires on this file version retention.
            format: date-time
            type: string
          file:
            $ref: '#/definitions/FileReference'
            description: The file this file version retention was applied to.
          file_version:
            $ref: '#/definitions/FileVersionReference'
            description: The file version this file version retention was applied to.
          winning_retention_policy:
            $ref: '#/definitions/RetentionPolicyReference'
            description: The winning retention policy applied to this file_version_retention. A file version can have multiple retention policies applied.
    description: "A retention policy blocks permanent deletion of content for a specified amount of time. Admins can apply policies to specified folders, or an entire enterprise. A file version retention is a record for a retained file version. To use this feature, you must have the manage retention policies scope enabled for your API key via your application management console. For more information about retention policies, please visit our help documentation.\n\n\t\t\t"
    title: File Version Retention Object
    type: object
  FileVersionRetentionList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/FileVersionRetention'
            type: array
    type: object
  Folder:
    allOf:
      - $ref: '#/definitions/ItemReference'
      - properties:
          allowed_invitee_roles:
            description: Folder collaboration collaboration settings allowed by the enterprise administrator.
            items:
              type: string
            type: array
          allowed_shared_link_access_levels:
            description: 'Access level settings for shared links set by administrator. Can be collaborators, open, or company.'
            enum:
              - collaborators
              - open
              - company
            items:
              type: string
            type: array
          can_non_owners_invite:
            description: Whether non-owners can invite collaborators to this folder.
            type: boolean
          collections:
            items:
              $ref: '#/definitions/Collection'
            type: array
          content_created_at:
            description: The time the folder or its contents were originally created (according to the uploader).May be null for some folders such as root or trash.
            format: date-time
            type: string
          content_modified_at:
            description: |-
              The time the folder or its contents were last modified (according to the uploader).
              May be null for some folders such as root or trash.
            format: date-time
            type: string
          created_at:
            description: |-
              The time the folder was created.
              May be null for some folders such as root or trash.
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
            description: The user who created this folder.
          description:
            description: The description of the folder.
            type: string
          folder_upload_email:
            $ref: '#/definitions/FolderUploadEmail'
          has_collaborations:
            description: Whether this folder has any collaborators.
            type: boolean
          is_externally_owned:
            description: Whether this folder is owned by a user outside of the enterprise
            type: boolean
          item_collection:
            $ref: '#/definitions/ItemCollection'
          item_status:
            description: Whether this item is deleted or not.
            type: string
          modified_by:
            $ref: '#/definitions/UserReference'
            description: The user who last modified this folder.
          owned_by:
            $ref: '#/definitions/UserReference'
            description: The user who owns this folder.
          parent:
            $ref: '#/definitions/ItemReference'
            description: 'The folder that contains this one.May be null for folders such as root, trash and child folders whose parent is inaccessible.'
          path_collection:
            $ref: '#/definitions/PathCollection'
            description: 'The path of folders to this folder, starting at the root.'
          permissions:
            $ref: '#/definitions/FolderPermissions'
          purged_at:
            description: |-
              The time the folder or its contents will be purged from the trash.
              May be null for some folders such as root or trash.
            format: date-time
            type: string
          shared_link:
            $ref: '#/definitions/SharedLink'
            description: The shared link for this folder. Null if not set.
          size:
            description: 'The folder size in bytes. Be careful parsing this integer, it can easily go into EE notation: see IEEE754 format.'
            format: int64
            type: integer
          sync_state:
            description: 'Whether this folder will be synced by the Box sync clients or not. Can be synced, not_synced, or partially_synced.'
            enum:
              - synced
              - not_synced
              - partially_synced
            type: string
          tags:
            description: All tags applied to this folder.
            items:
              type: string
            type: array
          trashed_at:
            description: |-
              The time the folder or its contents were put in the trash.
              May be null for some folders such as root or trash.
            format: date-time
            type: string
          watermark_info:
            $ref: '#/definitions/WatermarkInfo'
    description: 'Folders contain information about the items contained inside of them, including files and other folders. There is also a set of metadata such as who owns the folder and when it was modified that is also returned. When accessing other resources that make reference to folders, a ‘mini folder’ object will be used. The ''mini folder'' object will return type, id, sequence_id, etag, and name.'
    title: Folder Object
    type: object
  FolderPermissions:
    description: The permissions that the current user has on the folder
    properties:
      can_download:
        type: boolean
      can_invite_collaborator:
        type: boolean
      can_rename:
        type: boolean
      can_set_share_access:
        type: boolean
      can_share:
        type: boolean
      can_upload:
        type: boolean
      cand_delete:
        type: boolean
    type: object
  FolderUploadEmail:
    description: The upload email address for this folder. Null if not set.
    properties:
      access:
        type: string
      email:
        type: string
    type: object
  Group:
    allOf:
      - $ref: '#/definitions/GroupReference'
      - properties:
          created_at:
            description: When this groups was created on Box’s servers
            format: date-time
            type: string
          description:
            description: Human readable description of this Group.  This can be up to 255 characters long. Needs to be accessed via the fields parameter.
            type: string
          external_sync_identifier:
            description: An arbitrary identifier that can be used by external group sync tools to link this Box Group to an external group.  Example values of this field could be an Active Directory Object ID or a Google Group ID.  We recommend use of this field in order to avoid issues when group names are updated in either Box or external systems. Needs to be accessed via the fields parameter.
            type: string
          invitability_level:
            description: |-
              Specifies who can invite this group to collaborate on folders (Create Collaboration).
              admins_only Master Admin, Coadmins, group's Group Admin.
              admins_and_members Admins listed above and group members.
              all_managed_users All managed users in the enterprise.
            enum:
              - admins_only
              - admins_and_members
              - all_managed_users
            type: string
          member_viewability_level:
            description: |-
              Specifies who can view the members of this group (Get Memberships for Group).
              admins_only Master Admin, Coadmins, group's Group Admin.
              admins_and_members Admins and group members.
              all_managed_users All managed users in the enterprise.
            enum:
              - admins_only
              - admins_and_members
              - all_managed_users
            type: string
          modified_at:
            description: When this group was last updated on the Box servers
            format: date-time
            type: string
          provenance:
            description: 'Keeps track of which external source this group is coming from (e.g. "Active Directory", "Google Groups", "Facebook Groups").  This should be a human-readable identifier up to 255 characters long.  Setting this will also prevent Box users from editing this group directly through Box.  This is desirable for one-way syncing of groups. Needs to be accessed via the fields parameter.'
            type: string
    description: 'Groups contain a set of users, and can be used in place of users in some operations, such as collaborations.'
    title: Group Object
    type: object
  GroupList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/Group'
            type: array
    type: object
  GroupMembership:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          created_at:
            description: The time this membership was created.
            format: date-time
            type: string
          group:
            $ref: '#/definitions/GroupReference'
          modified_at:
            description: The time this membership was last modified.
            format: date-time
            type: string
          role:
            description: The role of the user in the group.
            enum:
              - member
              - admin
            type: string
          user:
            $ref: '#/definitions/UserReference'
    description: 'Membership is used to signify that a user is part of a group. Membership can be added, requested, updated and deleted. You can also get all members of a group, or all memberships for a given user.'
    title: Membership Object
    type: object
  GroupMembershipList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/GroupMembership'
            type: array
    type: object
  GroupReference:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          name:
            description: The name of this group
            type: string
    description: 'Mini representation of the group, including id and name of group.'
    type: object
  Invite:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          actionable_by:
            $ref: '#/definitions/UserReference'
          created_at:
            format: date-time
            type: string
          invited_by:
            $ref: '#/definitions/UserReference'
          invited_to:
            $ref: '#/definitions/Enterprise'
          modified_at:
            format: date-time
            type: string
          status:
            type: string
    type: object
  InviteUser:
    properties:
      actionable_by:
        $ref: '#/definitions/UserReference'
      enterprise:
        $ref: '#/definitions/Reference'
    type: object
  ItemCollection:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/FileReference'
            type: array
    description: A collection of mini file and folder objects contained in this folder.
    type: object
  ItemReference:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          etag:
            description: |-
              A unique string identifying the version of this folder.
              May be null for some folders such as root or trash.
            type: string
          name:
            description: The name of the folder.
            type: string
          sequence_id:
            description: |-
              A unique ID for use with the /events endpoint.
              May be null for some folders such as root or trash.
            type: string
    description: It references either a file or a folder
    type: object
  ItemReferenceList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/ItemReference'
            type: array
    type: object
  LegalHoldPolicy:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          assignment_count:
            $ref: '#/definitions/AssignmentCounts'
          created_at:
            description: Time the Policy was created.
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
            description: User who created this Policy.
          deleted_at:
            description: Time that the policy release request was sent.
            format: date-time
            type: string
          description:
            description: The type and id of the content that is under retention. The type can either be folder or enterprise.
            type: string
          filter_ended_at:
            description: 'User-specified, optional date filter applies to Custodian assignments only.'
            format: date-time
            type: string
          filter_started_at:
            description: 'User-specified, optional date filter applies to Custodian assignments only.'
            format: date-time
            type: string
          modified_at:
            description: Time that the Policy itself was modified. Does not update when assignments are added or removed.
            format: date-time
            type: string
          policy_name:
            description: Name of the Policy. This is limited to 254 characters.
            type: string
          release_notes:
            description: Notes around why the policy was released. Optional property with a 500 character limit.
            type: string
          status:
            enum:
              - active
              - applying
              - releasing
              - released
            type: string
    description: 'Legal Hold Policy information describes the basic characteristics of the Policy, such as name, description, and filter dates.'
    title: Legal Hold Policy object
    type: object
  LegalHoldPolicyAssignment:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          assigned_at:
            description: Time the Assignment was created.
            format: date-time
            type: string
          assigned_by:
            $ref: '#/definitions/UserReference'
            description: User who created this assignment.
          assigned_to:
            $ref: '#/definitions/ItemReference'
            description: The entity that this is assigned to. Includes type and ID.
          deleted_at:
            description: 'Time that the Assignment release request was sent. '
            format: date-time
            type: string
          legal_hold_policy:
            $ref: '#/definitions/RetentionPolicyReference'
            description: The Policy that this Assignment is part of.
    description: 'Legal Hold Assignments are used to assign Legal Hold Policies to Custodians, Folders, Files, or File Versions. Creating a Legal Hold Assignment puts a hold on the File-Versions that belong to the Assignment''s ''apply-to'' entity.'
    title: Legal Hold Policy Assignment object
    type: object
  LegalHoldPolicyAssignmentList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/LegalHoldPolicyAssignment'
            type: array
    type: object
  LegalHoldPolicyList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/LegalHoldPolicy'
            type: array
    type: object
  Lock:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          created_at:
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
          expired_at:
            format: date-time
            type: string
          is_download_prevented:
            type: boolean
    description: The lock held on the file.
    type: object
  MarkerPagination:
    properties:
      limit:
        format: int64
        type: integer
      next_marker:
        type: string
      prev_marker:
        type: string
    type: object
  Metadata:
    description: |-
      Metadata can be used for many purposes. Enterprises may want to have a better way to organize their digital assets for their marketing teams or developers may want to provide advanced content functionality such as facilitating workflows or approvals. Metadata is also visible in the Box Web Application. To learn more, please visit the help documentation.
      Templates
      Metadata that belongs to a file/folder is grouped by templates. Templates allow the metadata service to provide a multitude of services, such as pre-defining sets of key:value pairs or schema enforcement on specific fields. For example, a marketingCollateral template may define where and when specific marketing content should be used. You can also see the representation of the template in the Box web application while navigating to a file preview. Currently, metadata associated with folders does not show in the web application.
      Each file/folder can have multiple distinct template instances associated with it, such as a marketingCollateral and retentionPolicy template instances. Template instances are also grouped by scopes. Currently, the only scopes support are enterprise and global. Enterprise scopes are defined on a per enterprises basis, whereas global scopes are Box application-wide. Attribute order within template instances is not guaranteed.
      Currently, there are four attributes supported by templates: string, enum, float, and  date (RFC 3339).

      Global Properties Template
      In addition to enterprise scoped templates, every file on Box has access to the global properties template. The Properties template is a bucket of free form key:value string pairs, with no additional schema associated with it. Properties are ideal for scenarios where applications want to write metadata to file objects in a flexible way, without pre-defined template structure.
      Properties follow all the conventions of standard templates, except for being located at a different endpoint. All requests made to the properties template must be made to /files/{file_id}/metadata/global/properties.
    example:
      test: testvalue
    title: Metadata Object
    type: object
  MetadataList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/Metadata'
            type: array
    description: A collection of Metadata objects
    type: object
  MetadataTemplate:
    description: 'Metadata that belongs to a file or folder is grouped by templates. Templates allow the metadata service to provide a multitude of services, such as pre-defining sets of key:value pairs or schema enforcement on specific fields.'
    properties:
      displayName:
        description: The display name of the template. The character limit is 4096.
        type: string
      fields:
        description: 'The ordered set of key:value pairs for the template.'
        items:
          $ref: '#/definitions/TemplateFields'
        type: array
      hidden:
        description: Whether this template is hidden in the UI
        type: boolean
      scope:
        description: The scope of the object.
        type: string
      templateKey:
        description: A unique identifier for the template. The identifier must be unique across the scope of the enterprise to which the metadata template is being applied to. Defaults to a string derived from the displayName if no value is provided.
        type: string
    title: Metadata Template Object
    type: object
  MetadataTemplateList:
    allOf:
      - $ref: '#/definitions/MarkerPagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/MetadataTemplate'
            type: array
    description: A collection Metadata templates
    type: object
  ObjectList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              type: object
            type: array
    type: object
  Pagination:
    properties:
      limit:
        format: int64
        type: integer
      offset:
        format: int64
        type: integer
      order:
        items:
          properties:
            by:
              type: string
            direction:
              type: string
          type: object
        type: array
      total_count:
        format: int64
        type: integer
    type: object
  PathCollection:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/ItemReference'
            type: array
    description: 'The path of folders, starting at the root.'
    type: object
  RealtimeServer:
    properties:
      max_retries:
        format: int64
        type: integer
      retry_timeout:
        format: int64
        type: integer
      ttl:
        format: int64
        type: integer
      type:
        type: string
      url:
        type: string
    type: object
  RealtimeServerList:
    allOf:
      - $ref: '#/definitions/ChunkPagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/RealtimeServer'
            type: array
    type: object
  Reference:
    properties:
      id:
        type: string
      type:
        enum:
          - folder
          - file
          - user
          - file_version
          - lock
          - collaboration
          - comment
          - task
          - web_link
          - collection
          - task_assignment
          - event
          - realtime_server
          - webhook_event
          - webhook
          - enterprise
          - invite
          - email_alias
          - group
          - group_membership
          - device_pinner
          - retention_policy
          - retention_policy_assignment
          - file_version_retention
          - legal_hold_policy
          - legal_hold_policy_assignment
          - legal_hold
          - upload_session
        type: string
    type: object
  RetentionPolicy:
    allOf:
      - $ref: '#/definitions/RetentionPolicyReference'
      - properties:
          created_at:
            description: The time that the retention policy was created.
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
            description: A mini user object representing the user that created the retention policy.
          disposition_action:
            description: 'The disposition action of the retention policy. This actioncan be permanently_delete, which will cause the content retained by the policy to be permanently deleted, or remove_retention, which will lift the retention policy from the content, allowing it to be deleted by users, once the retention policy time period has passed.'
            enum:
              - permanently_delete
              - remove_retention
            type: string
          modified_at:
            description: The time that the retention policy was last modified.
            format: date-time
            type: string
          policy_type:
            description: 'The type of the retention policy. A retention policy type can either be finite, where a specific amount of time to retain the content is known upfront, or indefinite, where the amount of time to retain the content is still unknown.'
            enum:
              - finite
              - indefinite
            type: string
          retention_length:
            description: The length of the retention policy. This length specifies the duration in days that the retention policy will beactive for after being assigned to content.
            format: int64
            type: integer
          status:
            description: 'The status of a retention policy. The status of a policy will be active, unless explicitly retired by an administrator, in which case the status will be retired. Once a policyhas been retired, it cannot become active again.'
            enum:
              - active
              - retired
            type: string
    description: "A retention policy blocks permanent deletion of content for a specified amount of time. Admins can create retention policies and then later assign them to specific folders or their entire enterprise.  To use this feature, you must have the manage retention policies scope enabled for your API key via your application management console. For more information about retention policies, please visit our help documentation. \n\n\t\t\t"
    title: Retention Policy Object
    type: object
  RetentionPolicyAssignment:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          assigned_at:
            description: The time that the retention policy assignment was created.
            format: date-time
            type: string
          assigned_by:
            $ref: '#/definitions/UserReference'
            description: A mini user object representing the user that created the retention policy assignment.
          assigned_to:
            $ref: '#/definitions/ItemReference'
            description: The type and id of the content that is under retention. The type can either be folder or enterprise.
          retention_policy:
            $ref: '#/definitions/RetentionPolicyReference'
            description: A mini retention policy object representing the retention policy that has been assigned to this content.
    description: "The retention policy assignment endpoint provides a way for admins to apply a retention policy on a per-folder basis, or place a blanket policy over the entire enterprise.\n\n\t\t\t"
    title: Retention Policy Assignment Object
    type: object
  RetentionPolicyAssignmentList:
    properties:
      entries:
        items:
          $ref: '#/definitions/RetentionPolicyAssignment'
        type: array
    type: object
  RetentionPolicyList:
    properties:
      entries:
        items:
          $ref: '#/definitions/RetentionPolicy'
        type: array
    type: object
  RetentionPolicyReference:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          policy_name:
            description: The name given to the retention policy
            type: string
    description: Mini representation of the retention policy
    type: object
  SharedLink:
    properties:
      access:
        type: string
      download_count:
        format: int64
        type: integer
      download_url:
        type: string
      effective_access:
        type: string
      is_password_enabled:
        type: boolean
      password:
        type: string
      permissions:
        $ref: '#/definitions/SharedLinkPermissions'
      preview_count:
        format: int64
        type: integer
      unshared_at:
        type: string
      url:
        type: string
      vanity_url:
        type: string
    type: object
  SharedLinkPermissions:
    properties:
      can_download:
        type: boolean
      can_preview:
        type: boolean
    type: object
  Task:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          action:
            description: The action the task assignee will be prompted to do. Must be review
            enum:
              - review
            type: string
          created_at:
            description: When this task was created
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
            description: The user who created this task
          due_at:
            description: The date at which this task is due
            format: date-time
            type: string
          is_completed:
            description: Whether or not this task has been completed
            type: boolean
          item:
            $ref: '#/definitions/FileReference'
          message:
            description: A message that will be included with this task
            type: string
          task_assignment_collection:
            $ref: '#/definitions/TaskAssignmentList'
    description: "Tasks enabled file-centric workflows in Box. User can create tasks on files and assign them to collaborators on Box. You can read more about tasks in Box here.\n\n\t\t\t"
    title: Task Object
    type: object
  TaskAssignment:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          assigned_at:
            description: The date at which this task assignment was assigned
            format: date-time
            type: string
          assigned_by:
            $ref: '#/definitions/UserReference'
            description: The user who assigned this task assignment
          assigned_to:
            $ref: '#/definitions/UserReference'
          completed_at:
            description: The date at which this task assignment was completed
            format: date-time
            type: string
          item:
            $ref: '#/definitions/FileReference'
          message:
            description: A message that will be included with this task assignment
            type: string
          reminded_at:
            description: The date at which this task assignment was reminded
            format: date-time
            type: string
          resolution_state:
            description: State of this assignment (complete/incomplete)
            enum:
              - completed
              - incomplete
              - approved
              - rejected
            type: string
    type: object
  TaskAssignmentList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/TaskAssignment'
            type: array
    description: A collection Task Assignment.
    type: object
  TaskList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/Task'
            type: array
    description: A collection Tasks.
    type: object
  TemplateFields:
    properties:
      description:
        description: A description of the field. The character limit is 4096. All characters are allowed.
        type: string
      displayName:
        description: The display name of the field. The character limit is 4096. All characters are allowed.
        type: string
      hidden:
        type: boolean
      key:
        description: A unique identifier for the field. The identifier must be unique within the template to which it belongs. The character limit is 256. All characters are allowed.
        type: string
      options:
        items:
          properties:
            key:
              type: string
          type: object
        type: array
      type:
        description: The data type of the field's value.
        enum:
          - string
          - enum
          - float
          - date
        type: string
    type: object
  UpdateMetadata:
    example:
      - op: replace
        path: /test
        value: changedvalue
    items:
      properties:
        from:
          description: 'Required for move or copy. The path that designates the source key, in the format of a JSON-Pointer, formatted in the same way as path. Used in conjunction with path: from specifies the source, path specifies the destination.'
          type: string
        op:
          description: 'The operation type. Must be add, replace, remove , test, move, or copy.'
          enum:
            - add
            - replace
            - remove
            - test
            - move
            - copy
          type: string
        path:
          description: 'The path that designates the key, in the format of a JSON-Pointer. Since all keys are located at the root of the metadata instance, the key must be prefixed with a /. Special characters ~ and / in the key must be escaped according to JSON-Pointer specification. The value at the path must exist for the operation to be successful.'
          type: string
        value:
          description: 'The value to be set or tested. Required for add, replace, and test operations. For add, if value already exists, then previous value will be overwritten by the new value. For replace, the metadata value must exist before replacing.For test, the value of the existing metadata instance must match the specified value.'
          type: string
      required:
        - op
        - path
      type: object
    type: array
  UpdateMetadataTemplate:
    example:
      - data:
          description: Test
        fieldKey: test
        op: editField
    items:
      properties:
        data:
          description: The data for the operation.  Can vary depending on the operation.
          type: object
        enumOptionKeys:
          description: 'For operations that affect multiple enum options, the keys of the enum options to be affected.'
          items:
            type: string
          type: array
        fieldKey:
          description: 'For operations that affect a specific field, the key of the field to be affected.'
          type: string
        fieldKeys:
          description: 'For operations that affect multiple fields, the keys of the fields to be affected.'
          items:
            type: string
          type: array
        op:
          description: The operation name.
          enum:
            - addEnumOption
            - addField
            - editEnumOption
            - editField
            - editTemplate
            - removeEnumOption
            - removeField
            - reorderEnumOptions
            - reorderFields
          type: string
      required:
        - op
      type: object
    type: array
  User:
    allOf:
      - $ref: '#/definitions/UserReference'
      - properties:
          address:
            description: The user’s address.
            type: string
          avatar_url:
            description: URL of this user’s avatar image.
            type: string
          can_see_managed_users:
            description: Whether this user can see other enterprise users in her contact list.
            type: boolean
          created_at:
            description: The time this user was created.
            format: date-time
            type: string
          enterprise:
            $ref: '#/definitions/Enterprise'
          hostname:
            description: 'The root (protocol, subdomain, domain) of any links that need to be generated for this user'
            type: string
          is_exempt_from_device_limits:
            description: Whether to exempt this user from Enterprise device limits.
            type: boolean
          is_exempt_from_login_verification:
            description: Whether or not this user must use two-factor authentication.
            type: boolean
          is_external_collab_restricted:
            description: Whether this user is allowed to collaborate with users outside her enterprise.
            type: boolean
          is_sync_enabled:
            description: Whether or not this user can use Box Sync.
            type: boolean
          job_title:
            description: The user’s job title.
            type: string
          language:
            description: The language of this user. (ISO 639-1 Language Code)
            type: string
          max_upload_size:
            description: The maximum individual file size in bytes this user can have.
            format: int64
            type: integer
          modified_at:
            description: The time this user was last modified.
            format: date-time
            type: string
          my_tags:
            description: Tags for all files and folders owned by this user.
            items:
              type: string
            type: array
          phone:
            description: The user’s phone number.
            type: string
          role:
            description: 'This user’s enterprise role. Can be admin, coadmin, or user.'
            enum:
              - admin
              - coadmin
              - user
            type: string
          space_amount:
            description: The user’s total available space amount in bytes.
            format: int64
            type: integer
          space_used:
            description: The amount of space in use by the user.
            format: int64
            type: integer
          status:
            description: 'Can be active, inactive, cannot_delete_edit, or cannot_delete_edit_upload.'
            enum:
              - active
              - inactive
              - cannot_delete_edit
              - cannot_delete_edit_upload
            type: string
          timezone:
            description: The timezone of this user. (tz Database timezones)
            type: string
          tracking_codes:
            description: An array of key/value pairs set by the user’s admin.
            items:
              type: object
            type: array
    description: 'The users endpoint is used for managing a user and its content. For an individual user, this includes their own user information and content. For an enterprise admin, this includes both the individual user and any other users in the admin’s enterprise account.'
    title: User Object
    type: object
  UserList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/User'
            type: array
    type: object
  UserReference:
    description: It references a user
    properties:
      id:
        description: Unqiue string identifying this user.
        type: string
      login:
        description: The email address this user uses to login.
        type: string
      name:
        description: Name of this user
        type: string
      type:
        enum:
          - user
        type: string
    type: object
  Watermark:
    properties:
      watermark:
        $ref: '#/definitions/WatermarkReference'
    type: object
  WatermarkInfo:
    items:
      properties:
        is_watermarked:
          type: boolean
    type: array
  WatermarkReference:
    description: Waternmark a semi-transparent overlay on an embedded file preview that displays a viewer's email address or user ID and the time of access over a file's content
    properties:
      created_at:
        description: When this watermark was created
        format: date-time
        type: string
      imprint:
        enum:
          - default
        type: string
      modified_at:
        description: When this task was modified
        format: date-time
        type: string
    type: object
  WebLink:
    allOf:
      - $ref: '#/definitions/ItemReference'
      - properties:
          created_at:
            description: When this file was created on Box’s servers.
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
            description: The user who first created file.
          description:
            description: The description accompanying the web link. This is visible within the Box web application.
            type: string
          item_status:
            description: Whether this item is deleted or not.
            type: string
          modified_at:
            description: When this file was last updated on the Box servers.
            format: date-time
            type: string
          modified_by:
            $ref: '#/definitions/UserReference'
            description: The user who last updated this file.
          owned_by:
            $ref: '#/definitions/UserReference'
            description: The user who owns this file.
          parent:
            $ref: '#/definitions/ItemReference'
            description: The parent object the web link belongs to
          path_collection:
            $ref: '#/definitions/PathCollection'
            description: 'The path of folders to this item, starting at the root.'
          purged_at:
            description: When this file will be permanently deleted.
            format: date-time
            type: string
          shared_link:
            $ref: '#/definitions/SharedLink'
            description: The shared link object for this file.
          trashed_at:
            description: When this file was last moved to the trash.
            format: date-time
            type: string
          url:
            description: The URL this web link points to.
            type: string
    description: 'Web links are objects that point to URLs. These objects are also known as bookmarks within the Box web application. Web link objects are treated similarly to file objects, so they will also support shared links, copy, permanent delete, and restore with the format /web_links/{WEB_LINK_ID} in place of /files/{FILE_ID}.'
    title: Web Link Object
    type: object
  Webhook:
    allOf:
      - $ref: '#/definitions/Reference'
      - properties:
          address:
            description: The notification URL of the webhook. The notification URL is the URL used by Box to send a notification when the webhook is triggered.
            type: string
          created_at:
            description: An RFC-3339 timestamp identifying the time that the webhook was created.
            format: date-time
            type: string
          created_by:
            $ref: '#/definitions/UserReference'
          target:
            $ref: '#/definitions/Reference'
            description: A target is a file or folder
          triggers:
            description: 'An array of event names. The events that webhooks support are listed in the ''Event Triggers'' (https://docs.box.com/reference#event-triggers) section.'
            items:
              type: string
            type: array
    description: 'When you create or retrieve a webhook a JSON object representing the webhook is returned to you. This JSON object''s fields contain the name and ID of the webhook, along with configuration details such as its target and its notification URL.'
    title: Webhook Object
    type: object
  WebhookList:
    allOf:
      - $ref: '#/definitions/Pagination'
      - properties:
          entries:
            items:
              $ref: '#/definitions/Webhook'
            type: array
    type: object

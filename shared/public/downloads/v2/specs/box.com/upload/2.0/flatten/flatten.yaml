basePath: /api/2.0
consumes.length: 1
consumes[0]: application/json
definitions.BoxFile.allOf.length: 2
definitions.BoxFile.allOf[0].$ref: '#/definitions/FileReference'
definitions.BoxFile.allOf[1].properties.collections.items.$ref: '#/definitions/Collection'
definitions.BoxFile.allOf[1].properties.collections.type: array
definitions.BoxFile.allOf[1].properties.comment_count.description: The number of comments
  on a file.
definitions.BoxFile.allOf[1].properties.comment_count.format: int64
definitions.BoxFile.allOf[1].properties.comment_count.type: integer
definitions.BoxFile.allOf[1].properties.content_created_at.description: When the content
  of this file was created (more info).
definitions.BoxFile.allOf[1].properties.content_created_at.format: date-time
definitions.BoxFile.allOf[1].properties.content_created_at.type: string
definitions.BoxFile.allOf[1].properties.content_modified_at.description: When the
  content of this file was last modified (more info).
definitions.BoxFile.allOf[1].properties.content_modified_at.format: date-time
definitions.BoxFile.allOf[1].properties.content_modified_at.type: string
definitions.BoxFile.allOf[1].properties.created_at.description: When this file was
  created on Box’s servers.
definitions.BoxFile.allOf[1].properties.created_at.format: date-time
definitions.BoxFile.allOf[1].properties.created_at.type: string
definitions.BoxFile.allOf[1].properties.created_by.$ref: '#/definitions/UserReference'
definitions.BoxFile.allOf[1].properties.created_by.description: The user who first
  created file.
definitions.BoxFile.allOf[1].properties.description.description: The description of
  this file.
definitions.BoxFile.allOf[1].properties.description.type: string
definitions.BoxFile.allOf[1].properties.expiring_embed_link.description: An expiring
  URL for an embedded preview session in an iframe. This URL will expire after 60
  seconds and the session will expire after 60 minutes.
definitions.BoxFile.allOf[1].properties.expiring_embed_link.type: string
definitions.BoxFile.allOf[1].properties.extension.description: Indicates the suffix,
  when available, on the file. By default, set to an empty string. The suffix usually
  indicates the encoding (file format) of the file contents or usage.
definitions.BoxFile.allOf[1].properties.extension.type: string
definitions.BoxFile.allOf[1].properties.file_version.$ref: '#/definitions/FileVersionReference'
definitions.BoxFile.allOf[1].properties.is_package.description: Whether the file is
  a package. Used for Mac Packages used by iWorks.
definitions.BoxFile.allOf[1].properties.is_package.type: boolean
definitions.BoxFile.allOf[1].properties.item_status.description: Whether this item
  is deleted or not.
definitions.BoxFile.allOf[1].properties.item_status.type: string
definitions.BoxFile.allOf[1].properties.lock.$ref: '#/definitions/Lock'
definitions.BoxFile.allOf[1].properties.modified_at.description: When this file was
  last updated on the Box servers.
definitions.BoxFile.allOf[1].properties.modified_at.format: date-time
definitions.BoxFile.allOf[1].properties.modified_at.type: string
definitions.BoxFile.allOf[1].properties.modified_by.$ref: '#/definitions/UserReference'
definitions.BoxFile.allOf[1].properties.modified_by.description: The user who last
  updated this file.
definitions.BoxFile.allOf[1].properties.owned_by.$ref: '#/definitions/UserReference'
definitions.BoxFile.allOf[1].properties.owned_by.description: The user who owns this
  file.
definitions.BoxFile.allOf[1].properties.parent.$ref: '#/definitions/ItemReference'
definitions.BoxFile.allOf[1].properties.parent.description: The folder containing
  this file.
definitions.BoxFile.allOf[1].properties.path_collection.$ref: '#/definitions/PathCollection'
definitions.BoxFile.allOf[1].properties.path_collection.description: The path of folders
  to this file, starting at the root.
definitions.BoxFile.allOf[1].properties.permissions.$ref: '#/definitions/FilePermissions'
definitions.BoxFile.allOf[1].properties.purged_at.description: When this file will
  be permanently deleted.
definitions.BoxFile.allOf[1].properties.purged_at.format: date-time
definitions.BoxFile.allOf[1].properties.purged_at.type: string
definitions.BoxFile.allOf[1].properties.shared_link.$ref: '#/definitions/SharedLink'
definitions.BoxFile.allOf[1].properties.size.description: Size of this file in bytes.
definitions.BoxFile.allOf[1].properties.size.format: int64
definitions.BoxFile.allOf[1].properties.size.type: integer
definitions.BoxFile.allOf[1].properties.tags.description: All tags applied to this
  file.
definitions.BoxFile.allOf[1].properties.tags.items.type: string
definitions.BoxFile.allOf[1].properties.tags.type: array
definitions.BoxFile.allOf[1].properties.trashed_at.description: When this file was
  last moved to the trash.
definitions.BoxFile.allOf[1].properties.trashed_at.format: date-time
definitions.BoxFile.allOf[1].properties.trashed_at.type: string
definitions.BoxFile.allOf[1].properties.version_number.description: The version number
  of the file.
definitions.BoxFile.allOf[1].properties.version_number.type: string
definitions.BoxFile.allOf[1].properties.watermark_info.$ref: '#/definitions/WatermarkInfo'
definitions.BoxFile.description: File information describe file objects in Box, with
  attributes like who created the file, when it was last modified, and other information.
  The actual content of the file itself is accessible through the /files/{id}/content
  endpoint.
definitions.BoxFile.title: File Object
definitions.BoxFile.type: object
definitions.Collection.allOf.length: 2
definitions.Collection.allOf[0].$ref: '#/definitions/Reference'
definitions.Collection.allOf[1].properties.collection_type.description: The type of
  the collection. This is used to determine the proper visual treatment for Box-internally
  created collections. Initially only “favorites” collection-type will be supported.
definitions.Collection.allOf[1].properties.collection_type.enum.length: 1
definitions.Collection.allOf[1].properties.collection_type.enum[0]: favorites
definitions.Collection.allOf[1].properties.collection_type.type: string
definitions.Collection.allOf[1].properties.name.description: The name of this collection.
  The only collection currently available is named “Favorites”
definitions.Collection.allOf[1].properties.name.type: string
definitions.Collection.description: Collections contain information about the items
  contained inside of them, including files and folders. The only collection available
  currently is a “Favorites” collection. The contents of the collection are discovered
  in a similar way in which the contents of a folder are discovered.
definitions.Collection.title: Collection Object
definitions.Collection.type: object
definitions.CommitRequest.properties.attributes.additionalProperties.type: object
definitions.CommitRequest.properties.attributes.description: Optional. An array of
  attributes to set on the created file. See https://box-content.readme.io/reference#file-object
definitions.CommitRequest.properties.attributes.type: object
definitions.CommitRequest.properties.parts.description: An arrayof Part objects. MUST
  be ordered by offset.
definitions.CommitRequest.properties.parts.items.$ref: '#/definitions/Part'
definitions.CommitRequest.properties.parts.type: array
definitions.CommitRequest.type: object
definitions.Error.properties.code.type: string
definitions.Error.properties.context_info.properties.errors.items.properties.message.type: string
definitions.Error.properties.context_info.properties.errors.items.properties.name.type: string
definitions.Error.properties.context_info.properties.errors.items.properties.reason.type: string
definitions.Error.properties.context_info.properties.errors.items.type: object
definitions.Error.properties.context_info.properties.errors.type: array
definitions.Error.properties.context_info.type: object
definitions.Error.properties.help-url.type: string
definitions.Error.properties.message.type: string
definitions.Error.properties.request-id.type: string
definitions.Error.properties.status.format: int32
definitions.Error.properties.status.type: integer
definitions.Error.properties.type.enum.length: 1
definitions.Error.properties.type.enum[0]: error
definitions.Error.properties.type.type: string
definitions.Error.type: object
definitions.FileList.allOf.length: 2
definitions.FileList.allOf[0].$ref: '#/definitions/Pagination'
definitions.FileList.allOf[1].properties.entries.items.$ref: '#/definitions/BoxFile'
definitions.FileList.allOf[1].properties.entries.type: array
definitions.FileList.description: A collection Tasks.
definitions.FileList.type: object
definitions.FilePermissions.description: The permissions that the current user has
  on the file
definitions.FilePermissions.properties.can_download.type: boolean
definitions.FilePermissions.properties.can_invite_collaborator.type: boolean
definitions.FilePermissions.properties.can_preview.type: boolean
definitions.FilePermissions.properties.can_rename.type: boolean
definitions.FilePermissions.properties.can_set_share_access.type: boolean
definitions.FilePermissions.properties.can_share.type: boolean
definitions.FilePermissions.properties.can_upload.type: boolean
definitions.FilePermissions.properties.cand_delete.type: boolean
definitions.FilePermissions.type: object
definitions.FileReference.allOf.length: 2
definitions.FileReference.allOf[0].$ref: '#/definitions/ItemReference'
definitions.FileReference.allOf[1].properties.sha1.description: The sha1 hash of this
  file.
definitions.FileReference.allOf[1].properties.sha1.type: string
definitions.FileReference.description: It references either a file or a folder
definitions.FileReference.type: object
definitions.FileUploadSessionRequest.properties.file_name.description: Name of new
  file
definitions.FileUploadSessionRequest.properties.file_name.type: string
definitions.FileUploadSessionRequest.properties.file_size.description: The total number
  of bytes in the file to be uploaded
definitions.FileUploadSessionRequest.properties.file_size.format: int64
definitions.FileUploadSessionRequest.properties.file_size.type: integer
definitions.FileUploadSessionRequest.properties.folder_id.description: The ID of the
  folder that will contain the new file
definitions.FileUploadSessionRequest.properties.folder_id.type: string
definitions.FileUploadSessionRequest.type: object
definitions.FileVersionReference.allOf.length: 2
definitions.FileVersionReference.allOf[0].$ref: '#/definitions/Reference'
definitions.FileVersionReference.allOf[1].properties.sha1.description: The sha1 hash
  of this file.
definitions.FileVersionReference.allOf[1].properties.sha1.type: string
definitions.FileVersionReference.description: The version information of the file.
definitions.FileVersionReference.type: object
definitions.ItemReference.allOf.length: 2
definitions.ItemReference.allOf[0].$ref: '#/definitions/Reference'
definitions.ItemReference.allOf[1].properties.etag.description: |-
  A unique string identifying the version of this folder.
  May be null for some folders such as root or trash.
definitions.ItemReference.allOf[1].properties.etag.type: string
definitions.ItemReference.allOf[1].properties.name.description: The name of the folder.
definitions.ItemReference.allOf[1].properties.name.type: string
definitions.ItemReference.allOf[1].properties.sequence_id.description: |-
  A unique ID for use with the /events endpoint.
  May be null for some folders such as root or trash.
definitions.ItemReference.allOf[1].properties.sequence_id.type: string
definitions.ItemReference.description: It references either a file or a folder
definitions.ItemReference.type: object
definitions.Lock.allOf.length: 2
definitions.Lock.allOf[0].$ref: '#/definitions/Reference'
definitions.Lock.allOf[1].properties.created_at.format: date-time
definitions.Lock.allOf[1].properties.created_at.type: string
definitions.Lock.allOf[1].properties.created_by.$ref: '#/definitions/UserReference'
definitions.Lock.allOf[1].properties.expired_at.format: date-time
definitions.Lock.allOf[1].properties.expired_at.type: string
definitions.Lock.allOf[1].properties.is_download_prevented.type: boolean
definitions.Lock.description: The lock held on the file.
definitions.Lock.type: object
definitions.Pagination.properties.limit.format: int64
definitions.Pagination.properties.limit.type: integer
definitions.Pagination.properties.offset.format: int64
definitions.Pagination.properties.offset.type: integer
definitions.Pagination.properties.order.items.properties.by.type: string
definitions.Pagination.properties.order.items.properties.direction.type: string
definitions.Pagination.properties.order.items.type: object
definitions.Pagination.properties.order.type: array
definitions.Pagination.properties.total_count.format: int64
definitions.Pagination.properties.total_count.type: integer
definitions.Pagination.type: object
definitions.Part.properties.offset.format: int64
definitions.Part.properties.offset.type: integer
definitions.Part.properties.part_id.type: string
definitions.Part.properties.sha1.type: string
definitions.Part.properties.size.format: int64
definitions.Part.properties.size.type: integer
definitions.Part.type: object
definitions.PartList.properties.entries.description: An array of parts
definitions.PartList.properties.entries.items.$ref: '#/definitions/Part'
definitions.PartList.properties.entries.type: array
definitions.PartList.properties.limit.description: The limit that was used for these
  entries. This will be the same as the limit query parameter unless that value exceeded
  the maximum value allowed.
definitions.PartList.properties.limit.format: int32
definitions.PartList.properties.limit.type: integer
definitions.PartList.properties.offset.description: The 0-based offset of the first
  entry in this set. This will be the same as the offset query parameter.
definitions.PartList.properties.offset.format: int32
definitions.PartList.properties.offset.type: integer
definitions.PartList.properties.total_count.description: This will always be equal
  to the number of expected parts in the session (i.e. ceiling(file size / part size)).
definitions.PartList.properties.total_count.format: int32
definitions.PartList.properties.total_count.type: integer
definitions.PartList.type: object
definitions.PathCollection.allOf.length: 2
definitions.PathCollection.allOf[0].$ref: '#/definitions/Pagination'
definitions.PathCollection.allOf[1].properties.entries.items.$ref: '#/definitions/ItemReference'
definitions.PathCollection.allOf[1].properties.entries.type: array
definitions.PathCollection.description: The path of folders, starting at the root.
definitions.PathCollection.type: object
definitions.Reference.properties.id.type: string
definitions.Reference.properties.type.enum.length: 28
definitions.Reference.properties.type.enum[0]: folder
definitions.Reference.properties.type.enum[1]: file
definitions.Reference.properties.type.enum[2]: user
definitions.Reference.properties.type.enum[3]: file_version
definitions.Reference.properties.type.enum[4]: lock
definitions.Reference.properties.type.enum[5]: collaboration
definitions.Reference.properties.type.enum[6]: comment
definitions.Reference.properties.type.enum[7]: task
definitions.Reference.properties.type.enum[8]: web_link
definitions.Reference.properties.type.enum[9]: collection
definitions.Reference.properties.type.enum[10]: task_assignment
definitions.Reference.properties.type.enum[11]: event
definitions.Reference.properties.type.enum[12]: realtime_server
definitions.Reference.properties.type.enum[13]: webhook_event
definitions.Reference.properties.type.enum[14]: webhook
definitions.Reference.properties.type.enum[15]: enterprise
definitions.Reference.properties.type.enum[16]: invite
definitions.Reference.properties.type.enum[17]: email_alias
definitions.Reference.properties.type.enum[18]: group
definitions.Reference.properties.type.enum[19]: group_membership
definitions.Reference.properties.type.enum[20]: device_pinner
definitions.Reference.properties.type.enum[21]: retention_policy
definitions.Reference.properties.type.enum[22]: retention_policy_assignment
definitions.Reference.properties.type.enum[23]: file_version_retention
definitions.Reference.properties.type.enum[24]: legal_hold_policy
definitions.Reference.properties.type.enum[25]: legal_hold_policy_assignment
definitions.Reference.properties.type.enum[26]: legal_hold
definitions.Reference.properties.type.enum[27]: upload_session
definitions.Reference.properties.type.type: string
definitions.Reference.type: object
definitions.SharedLink.properties.access.type: string
definitions.SharedLink.properties.download_count.format: int64
definitions.SharedLink.properties.download_count.type: integer
definitions.SharedLink.properties.download_url.type: string
definitions.SharedLink.properties.effective_access.type: string
definitions.SharedLink.properties.is_password_enabled.type: boolean
definitions.SharedLink.properties.password.type: string
definitions.SharedLink.properties.permissions.$ref: '#/definitions/SharedLinkPermissions'
definitions.SharedLink.properties.preview_count.format: int64
definitions.SharedLink.properties.preview_count.type: integer
definitions.SharedLink.properties.unshared_at.type: string
definitions.SharedLink.properties.url.type: string
definitions.SharedLink.properties.vanity_url.type: string
definitions.SharedLink.type: object
definitions.SharedLinkPermissions.properties.can_download.type: boolean
definitions.SharedLinkPermissions.properties.can_preview.type: boolean
definitions.SharedLinkPermissions.type: object
definitions.UploadPartResponse.properties.part.$ref: '#/definitions/Part'
definitions.UploadPartResponse.type: object
definitions.UploadSession.allOf.length: 2
definitions.UploadSession.allOf[0].$ref: '#/definitions/Reference'
definitions.UploadSession.allOf[1].properties.num_parts_processed.description: Tracks
  Box’s progress in processing all the parts that have been uploaded. Always equal
  to 0 when creating new upload session. In other cases, this will be the number of
  parts that have been processed by server. When all parts have been uploaded, but
  Commit API returned 202, you can check this value == total_parts to check if file
  was uploaded.
definitions.UploadSession.allOf[1].properties.num_parts_processed.format: int32
definitions.UploadSession.allOf[1].properties.num_parts_processed.type: integer
definitions.UploadSession.allOf[1].properties.part_size.description: The part size
  in bytes that must be used for all parts of this session. Only the last part is
  allowed to be of a smaller size.
definitions.UploadSession.allOf[1].properties.part_size.format: int64
definitions.UploadSession.allOf[1].properties.part_size.type: integer
definitions.UploadSession.allOf[1].properties.session_endpoints.$ref: '#/definitions/UploadSessionEndpoints'
definitions.UploadSession.allOf[1].properties.session_expires_at.description: 'UTC
  Time in RFC 3339 date timeformat: 2016-04-17T09:12:36-00:00.'
definitions.UploadSession.allOf[1].properties.session_expires_at.format: date-time
definitions.UploadSession.allOf[1].properties.session_expires_at.type: string
definitions.UploadSession.allOf[1].properties.total_parts.description: The total number
  of parts expected in this session, as determined by the file size and part size.
definitions.UploadSession.allOf[1].properties.total_parts.format: int32
definitions.UploadSession.allOf[1].properties.total_parts.type: integer
definitions.UploadSession.description: Upload Session.
definitions.UploadSession.type: object
definitions.UploadSessionEndpoints.description: URLs for all other possible calls
  to this session.
definitions.UploadSessionEndpoints.properties.abort.description: The URL for abort
  API.
definitions.UploadSessionEndpoints.properties.abort.type: string
definitions.UploadSessionEndpoints.properties.commit.description: The URL for commit
  API.
definitions.UploadSessionEndpoints.properties.commit.type: string
definitions.UploadSessionEndpoints.properties.list_parts.description: The URL for
  list parts API.
definitions.UploadSessionEndpoints.properties.list_parts.type: string
definitions.UploadSessionEndpoints.properties.log_event.description: The URL for log
  event API.
definitions.UploadSessionEndpoints.properties.log_event.type: string
definitions.UploadSessionEndpoints.properties.status.description: The URL for status
  API.
definitions.UploadSessionEndpoints.properties.status.type: string
definitions.UploadSessionEndpoints.properties.upload_part.description: The URL for
  upload part API.
definitions.UploadSessionEndpoints.properties.upload_part.type: string
definitions.UploadSessionEndpoints.type: object
definitions.UserReference.description: It references a user
definitions.UserReference.properties.id.description: Unqiue string identifying this
  user.
definitions.UserReference.properties.id.type: string
definitions.UserReference.properties.login.description: The email address this user
  uses to login.
definitions.UserReference.properties.login.type: string
definitions.UserReference.properties.name.description: Name of this user
definitions.UserReference.properties.name.type: string
definitions.UserReference.properties.type.enum.length: 1
definitions.UserReference.properties.type.enum[0]: user
definitions.UserReference.properties.type.type: string
definitions.UserReference.type: object
definitions.VersionUploadSessionRequest.properties.file_name.description: Name of
  new file
definitions.VersionUploadSessionRequest.properties.file_name.type: string
definitions.VersionUploadSessionRequest.properties.file_size.description: The total
  number of bytes in the file to be uploaded
definitions.VersionUploadSessionRequest.properties.file_size.format: int64
definitions.VersionUploadSessionRequest.properties.file_size.type: integer
definitions.VersionUploadSessionRequest.type: object
definitions.WatermarkInfo.items.properties.is_watermarked.type: boolean
definitions.WatermarkInfo.type: array
host: upload.box.com
info.description: The Box Uploads API allows users to add a new file or add a new
  file version in the same way as uploading file.
info.license.name: Apache 2.0
info.license.url: http://www.apache.org/licenses/LICENSE-2.0
info.title: Box 2.0 Uploads
info.version: "2.0"
info.x-apisguru-categories.length: 1
info.x-apisguru-categories[0]: cloud
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_852979584169410562_etZ6V0rx_400x400.jpg
info.x-origin.length: 1
info.x-origin[0].format: swagger
info.x-origin[0].url: https://raw.githubusercontent.com/box/box-openapi/master/v2.0/upload.openapi-v2.json
info.x-origin[0].version: "2.0"
info.x-preferred: true
info.x-providerName: box.com
info.x-serviceName: upload
paths./files/{FILE_ID}/content.post.consumes.length: 1
paths./files/{FILE_ID}/content.post.consumes[0]: multipart/form-data
paths./files/{FILE_ID}/content.post.description: 'This method is used to upload a
  new version of an existing file in a user’s account. '
paths./files/{FILE_ID}/content.post.externalDocs.url: https://docs.box.com/reference#upload-a-new-version-of-a-file
paths./files/{FILE_ID}/content.post.operationId: uploadFileVersion
paths./files/{FILE_ID}/content.post.parameters.length: 4
paths./files/{FILE_ID}/content.post.parameters[0].in: path
paths./files/{FILE_ID}/content.post.parameters[0].name: FILE_ID
paths./files/{FILE_ID}/content.post.parameters[0].required: true
paths./files/{FILE_ID}/content.post.parameters[0].type: string
paths./files/{FILE_ID}/content.post.parameters[1].description: This is in the ‘etag’
  field of the file object
paths./files/{FILE_ID}/content.post.parameters[1].in: header
paths./files/{FILE_ID}/content.post.parameters[1].name: If-Match
paths./files/{FILE_ID}/content.post.parameters[1].required: false
paths./files/{FILE_ID}/content.post.parameters[1].type: string
paths./files/{FILE_ID}/content.post.parameters[2].description: File attributes
paths./files/{FILE_ID}/content.post.parameters[2].in: formData
paths./files/{FILE_ID}/content.post.parameters[2].name: attributes
paths./files/{FILE_ID}/content.post.parameters[2].type: string
paths./files/{FILE_ID}/content.post.parameters[3].description: File to upload
paths./files/{FILE_ID}/content.post.parameters[3].in: formData
paths./files/{FILE_ID}/content.post.parameters[3].name: file
paths./files/{FILE_ID}/content.post.parameters[3].required: true
paths./files/{FILE_ID}/content.post.parameters[3].type: file
paths./files/{FILE_ID}/content.post.responses.200.description: The upload would be
  successful
paths./files/{FILE_ID}/content.post.responses.200.schema.$ref: '#/definitions/FileList'
paths./files/{FILE_ID}/content.post.responses.default.description: File upload error
paths./files/{FILE_ID}/content.post.responses.default.schema.$ref: '#/definitions/Error'
paths./files/{FILE_ID}/content.post.summary: Upload File Version
paths./files/{FILE_ID}/content.post.tags.length: 1
paths./files/{FILE_ID}/content.post.tags[0]: FileUpload
paths./files/{FILE_ID}/upload_sessions.post.description: Use the Uploads API to create
  a new session to upload a new version of existing file.
paths./files/{FILE_ID}/upload_sessions.post.operationId: createUploadSessionNewVersion
paths./files/{FILE_ID}/upload_sessions.post.parameters.length: 2
paths./files/{FILE_ID}/upload_sessions.post.parameters[0].in: path
paths./files/{FILE_ID}/upload_sessions.post.parameters[0].name: FILE_ID
paths./files/{FILE_ID}/upload_sessions.post.parameters[0].required: true
paths./files/{FILE_ID}/upload_sessions.post.parameters[0].type: string
paths./files/{FILE_ID}/upload_sessions.post.parameters[1].in: body
paths./files/{FILE_ID}/upload_sessions.post.parameters[1].name: body
paths./files/{FILE_ID}/upload_sessions.post.parameters[1].required: true
paths./files/{FILE_ID}/upload_sessions.post.parameters[1].schema.$ref: '#/definitions/VersionUploadSessionRequest'
paths./files/{FILE_ID}/upload_sessions.post.responses.201.description: The upload
  session creation would be successful
paths./files/{FILE_ID}/upload_sessions.post.responses.201.schema.$ref: '#/definitions/UploadSession'
paths./files/{FILE_ID}/upload_sessions.post.responses.400.description: Bad request.
  See response body for details.
paths./files/{FILE_ID}/upload_sessions.post.responses.400.schema.$ref: '#/definitions/Error'
paths./files/{FILE_ID}/upload_sessions.post.responses.409.description: Name collision
  occurs. See response body for details.
paths./files/{FILE_ID}/upload_sessions.post.responses.409.schema.$ref: '#/definitions/Error'
paths./files/{FILE_ID}/upload_sessions.post.responses.412.description: Preconditioned
  failed. See response body for details.
paths./files/{FILE_ID}/upload_sessions.post.responses.412.schema.$ref: '#/definitions/Error'
paths./files/{FILE_ID}/upload_sessions.post.responses.413.description: Request entity
  too large. See response body for details.
paths./files/{FILE_ID}/upload_sessions.post.responses.413.schema.$ref: '#/definitions/Error'
paths./files/{FILE_ID}/upload_sessions.post.responses.default.description: File upload
  error
paths./files/{FILE_ID}/upload_sessions.post.responses.default.schema.$ref: '#/definitions/Error'
paths./files/{FILE_ID}/upload_sessions.post.summary: Create File Upload Session
paths./files/{FILE_ID}/upload_sessions.post.tags.length: 1
paths./files/{FILE_ID}/upload_sessions.post.tags[0]: ChunkedUpload
paths./files/content.post.consumes.length: 1
paths./files/content.post.consumes[0]: multipart/form-data
paths./files/content.post.description: Use the Uploads API to allow users to add a
  new file.
paths./files/content.post.externalDocs.url: https://docs.box.com/reference#upload-a-file
paths./files/content.post.operationId: uploadFile
paths./files/content.post.parameters.length: 2
paths./files/content.post.parameters[0].description: File to upload
paths./files/content.post.parameters[0].in: formData
paths./files/content.post.parameters[0].name: file
paths./files/content.post.parameters[0].required: true
paths./files/content.post.parameters[0].type: file
paths./files/content.post.parameters[1].description: File attributes
paths./files/content.post.parameters[1].in: formData
paths./files/content.post.parameters[1].name: attributes
paths./files/content.post.parameters[1].required: true
paths./files/content.post.parameters[1].type: string
paths./files/content.post.responses.201.description: The upload would be successful
paths./files/content.post.responses.201.schema.$ref: '#/definitions/FileList'
paths./files/content.post.responses.409.description: Name collision occurs
paths./files/content.post.responses.409.schema.$ref: '#/definitions/Error'
paths./files/content.post.responses.default.description: File upload error
paths./files/content.post.responses.default.schema.$ref: '#/definitions/Error'
paths./files/content.post.summary: Upload File
paths./files/content.post.tags.length: 1
paths./files/content.post.tags[0]: FileUpload
paths./files/upload_sessions.post.description: Use the Uploads API to create a new
  session to upload a new file.
paths./files/upload_sessions.post.operationId: createUploadSession
paths./files/upload_sessions.post.parameters.length: 1
paths./files/upload_sessions.post.parameters[0].in: body
paths./files/upload_sessions.post.parameters[0].name: body
paths./files/upload_sessions.post.parameters[0].required: true
paths./files/upload_sessions.post.parameters[0].schema.$ref: '#/definitions/FileUploadSessionRequest'
paths./files/upload_sessions.post.responses.201.description: The upload session creation
  would be successful
paths./files/upload_sessions.post.responses.201.schema.$ref: '#/definitions/UploadSession'
paths./files/upload_sessions.post.responses.400.description: Bad request. See response
  body for details.
paths./files/upload_sessions.post.responses.400.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions.post.responses.409.description: Name collision occurs.
paths./files/upload_sessions.post.responses.409.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions.post.responses.412.description: Preconditioned failed.
paths./files/upload_sessions.post.responses.412.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions.post.responses.413.description: Request entity too large.
paths./files/upload_sessions.post.responses.413.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions.post.responses.default.description: File upload error
paths./files/upload_sessions.post.responses.default.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions.post.summary: Create File Upload Session
paths./files/upload_sessions.post.tags.length: 1
paths./files/upload_sessions.post.tags[0]: ChunkedUpload
paths./files/upload_sessions/{SESSION_ID}.delete.description: Abort the upload session
  and discard all data uploaded. This cannot be reversed.
paths./files/upload_sessions/{SESSION_ID}.delete.operationId: abortUploadSession
paths./files/upload_sessions/{SESSION_ID}.delete.parameters.length: 1
paths./files/upload_sessions/{SESSION_ID}.delete.parameters[0].in: path
paths./files/upload_sessions/{SESSION_ID}.delete.parameters[0].name: SESSION_ID
paths./files/upload_sessions/{SESSION_ID}.delete.parameters[0].required: true
paths./files/upload_sessions/{SESSION_ID}.delete.parameters[0].type: string
paths./files/upload_sessions/{SESSION_ID}.delete.responses.204.description: Abort
  would be successful
paths./files/upload_sessions/{SESSION_ID}.delete.responses.400.description: Bad request.
  See response body for details.
paths./files/upload_sessions/{SESSION_ID}.delete.responses.400.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.delete.responses.default.description: Get
  upload session error
paths./files/upload_sessions/{SESSION_ID}.delete.responses.default.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.delete.summary: Abort Upload Session
paths./files/upload_sessions/{SESSION_ID}.delete.tags.length: 1
paths./files/upload_sessions/{SESSION_ID}.delete.tags[0]: ChunkedUpload
paths./files/upload_sessions/{SESSION_ID}.get.description: Return the information
  about this session.
paths./files/upload_sessions/{SESSION_ID}.get.operationId: getUploadSession
paths./files/upload_sessions/{SESSION_ID}.get.parameters.length: 1
paths./files/upload_sessions/{SESSION_ID}.get.parameters[0].in: path
paths./files/upload_sessions/{SESSION_ID}.get.parameters[0].name: SESSION_ID
paths./files/upload_sessions/{SESSION_ID}.get.parameters[0].required: true
paths./files/upload_sessions/{SESSION_ID}.get.parameters[0].type: string
paths./files/upload_sessions/{SESSION_ID}.get.responses.200.description: Get would
  be successful
paths./files/upload_sessions/{SESSION_ID}.get.responses.200.schema.$ref: '#/definitions/UploadSession'
paths./files/upload_sessions/{SESSION_ID}.get.responses.400.description: Bad request.
  See response body for details.
paths./files/upload_sessions/{SESSION_ID}.get.responses.400.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.get.responses.default.description: Get upload
  session error
paths./files/upload_sessions/{SESSION_ID}.get.responses.default.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.get.summary: Upload Session Details
paths./files/upload_sessions/{SESSION_ID}.get.tags.length: 1
paths./files/upload_sessions/{SESSION_ID}.get.tags[0]: ChunkedUpload
paths./files/upload_sessions/{SESSION_ID}.put.consumes.length: 1
paths./files/upload_sessions/{SESSION_ID}.put.consumes[0]: application/octet-stream
paths./files/upload_sessions/{SESSION_ID}.put.description: Upload a part of the file
  to this session.
paths./files/upload_sessions/{SESSION_ID}.put.operationId: uploadPart
paths./files/upload_sessions/{SESSION_ID}.put.parameters.length: 4
paths./files/upload_sessions/{SESSION_ID}.put.parameters[0].in: path
paths./files/upload_sessions/{SESSION_ID}.put.parameters[0].name: SESSION_ID
paths./files/upload_sessions/{SESSION_ID}.put.parameters[0].required: true
paths./files/upload_sessions/{SESSION_ID}.put.parameters[0].type: string
paths./files/upload_sessions/{SESSION_ID}.put.parameters[1].description: The message
  digest of the partbody, formatted as specified by RFC 3230. The usage is sha=BASE64_ENCODED_DIGEST.
  Currently only SHA-1 is supported.As per RFC 3230, the output from SHA-1 algorithm
  must be Base64 encoded.
paths./files/upload_sessions/{SESSION_ID}.put.parameters[1].in: header
paths./files/upload_sessions/{SESSION_ID}.put.parameters[1].name: Digest
paths./files/upload_sessions/{SESSION_ID}.put.parameters[1].required: true
paths./files/upload_sessions/{SESSION_ID}.put.parameters[1].type: string
paths./files/upload_sessions/{SESSION_ID}.put.parameters[2].description: 'Byte range
  of part within overall file. E.g: bytes 8388608-16777215/445856194. It must not
  overlap with the range of a part already uploaded to this session.'
paths./files/upload_sessions/{SESSION_ID}.put.parameters[2].in: header
paths./files/upload_sessions/{SESSION_ID}.put.parameters[2].name: Content-Range
paths./files/upload_sessions/{SESSION_ID}.put.parameters[2].required: true
paths./files/upload_sessions/{SESSION_ID}.put.parameters[2].type: string
paths./files/upload_sessions/{SESSION_ID}.put.parameters[3].description: Part bytes
paths./files/upload_sessions/{SESSION_ID}.put.parameters[3].in: body
paths./files/upload_sessions/{SESSION_ID}.put.parameters[3].name: bytes
paths./files/upload_sessions/{SESSION_ID}.put.parameters[3].required: true
paths./files/upload_sessions/{SESSION_ID}.put.parameters[3].schema.format: byte
paths./files/upload_sessions/{SESSION_ID}.put.parameters[3].schema.type: string
paths./files/upload_sessions/{SESSION_ID}.put.responses.200.description: Part upload
  would be successful
paths./files/upload_sessions/{SESSION_ID}.put.responses.200.schema.$ref: '#/definitions/UploadPartResponse'
paths./files/upload_sessions/{SESSION_ID}.put.responses.400.description: Bad request.
  See response body for details.
paths./files/upload_sessions/{SESSION_ID}.put.responses.400.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.put.responses.409.description: Part conflict.
  See response body for details.
paths./files/upload_sessions/{SESSION_ID}.put.responses.409.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.put.responses.412.description: Preconditioned
  failed. See response body for details.
paths./files/upload_sessions/{SESSION_ID}.put.responses.412.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.put.responses.416.description: Request range
  bit satisfiable. See response body for details.
paths./files/upload_sessions/{SESSION_ID}.put.responses.416.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.put.responses.default.description: Part
  upload error
paths./files/upload_sessions/{SESSION_ID}.put.responses.default.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}.put.summary: Upload Part
paths./files/upload_sessions/{SESSION_ID}.put.tags.length: 1
paths./files/upload_sessions/{SESSION_ID}.put.tags[0]: ChunkedUpload
paths./files/upload_sessions/{SESSION_ID}/commit.post.description: Create a Box file
  comprised of the uploaded parts.
paths./files/upload_sessions/{SESSION_ID}/commit.post.operationId: commitUploadSession
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters.length: 5
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[0].in: path
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[0].name: SESSION_ID
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[0].required: true
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[0].type: string
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[1].description: The
  message digest of the file, formatted as specified by RFC 3230. The usage is sha=BASE64_ENCODED_DIGEST.
  Currently only SHA-1 is supported.As per RFC 3230, the output from SHA-1 algorithm
  must be Base64 encoded.
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[1].in: header
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[1].name: Digest
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[1].required: true
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[1].type: string
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[2].description: This
  is in the ‘etag’ field of the file object. See https://developer.box.com/v2.0/reference#if-match
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[2].in: header
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[2].name: If-Match
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[2].required: false
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[2].type: string
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[3].description: This
  is in the ‘etag’ field of the file object. See https://developer.box.com/v2.0/reference#if-match
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[3].in: header
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[3].name: If-Non-Match
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[3].required: false
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[3].type: string
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[4].in: body
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[4].name: body
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[4].required: true
paths./files/upload_sessions/{SESSION_ID}/commit.post.parameters[4].schema.$ref: '#/definitions/CommitRequest'
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.201.description: The
  file has been committed successfully
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.201.schema.$ref: '#/definitions/FileList'
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.202.description: All
  parts have been uploaded but not yet processed. Use Get Upload Session API to get
  more information about the progress of processing the parts. Retry commit afterwards
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.202.headers.Retry-After.description: Indicates
  the number of seconds the client should wait before attempting their commit request
  again.
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.202.headers.Retry-After.type: integer
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.400.description: Bad
  request. See response body for details.
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.400.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.409.description: There
  is already a file with the same name in the target folder.
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.409.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.412.description: The
  If-Match condition failed.
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.412.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.413.description: Request
  entity too large. See response body for details.
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.413.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.default.description: Part
  upload error
paths./files/upload_sessions/{SESSION_ID}/commit.post.responses.default.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}/commit.post.summary: Commit Upload
paths./files/upload_sessions/{SESSION_ID}/commit.post.tags.length: 1
paths./files/upload_sessions/{SESSION_ID}/commit.post.tags[0]: ChunkedUpload
paths./files/upload_sessions/{SESSION_ID}/parts.get.description: Return the list of
  parts uploaded so far for this session.
paths./files/upload_sessions/{SESSION_ID}/parts.get.operationId: listParts
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters.length: 3
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[0].in: path
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[0].name: SESSION_ID
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[0].required: true
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[0].type: string
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[1].description: Zero-based
  index of first part to return. Defaults to zero, if not specified.
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[1].format: int32
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[1].in: query
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[1].name: offset
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[1].required: false
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[1].type: integer
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[2].description: How
  many parts to return. Defaults to 1000 if not specified, which is also the maximum
  value allowed.
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[2].format: int32
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[2].in: query
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[2].name: limit
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[2].required: false
paths./files/upload_sessions/{SESSION_ID}/parts.get.parameters[2].type: integer
paths./files/upload_sessions/{SESSION_ID}/parts.get.responses.200.description: List
  would be successful
paths./files/upload_sessions/{SESSION_ID}/parts.get.responses.200.schema.$ref: '#/definitions/PartList'
paths./files/upload_sessions/{SESSION_ID}/parts.get.responses.400.description: Bad
  request. See response body for details.
paths./files/upload_sessions/{SESSION_ID}/parts.get.responses.400.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}/parts.get.responses.default.description: Upload
  commit error
paths./files/upload_sessions/{SESSION_ID}/parts.get.responses.default.schema.$ref: '#/definitions/Error'
paths./files/upload_sessions/{SESSION_ID}/parts.get.summary: List Parts
paths./files/upload_sessions/{SESSION_ID}/parts.get.tags.length: 1
paths./files/upload_sessions/{SESSION_ID}/parts.get.tags[0]: ChunkedUpload
produces.length: 1
produces[0]: application/json
schemes.length: 1
schemes[0]: https
security.length: 1
security[0].OAuth2Security.length: 0
securityDefinitions.OAuth2Security.authorizationUrl: https://account.box.com/api/oauth2/authorize
securityDefinitions.OAuth2Security.flow: accessCode
securityDefinitions.OAuth2Security.tokenUrl: https://api.box.com/oauth2/token
securityDefinitions.OAuth2Security.type: oauth2
swagger: "2.0"

syntax = "proto3";

import "google/protobuf/struct.proto";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package mandrill;

message PostExportsActivityRequest {
    exports_activity body = 1;
}

message PostExportsInfoRequest {
    id body = 1;
}

message PostExportsListRequest {
    api_key body = 1;
}

message PostExportsRejectsRequest {
    notify_email body = 1;
}

message PostExportsWhitelistRequest {
    notify_email body = 1;
}

message PostInboundAddDomainRequest {
    domain body = 1;
}

message PostInboundAddRouteRequest {
    inbound_add-route body = 1;
}

message PostInboundCheckDomainRequest {
    domain body = 1;
}

message PostInboundDeleteDomainRequest {
    domain body = 1;
}

message PostInboundDeleteRouteRequest {
    id body = 1;
}

message PostInboundDomainsRequest {
    api_key body = 1;
}

message PostInboundRoutesRequest {
    domain body = 1;
}

message PostInboundSendRawRequest {
    inbound_send-raw body = 1;
}

message PostInboundUpdateRouteRequest {
    inbound_update-route body = 1;
}

message PostIpsCancelWarmupRequest {
    ip body = 1;
}

message PostIpsCheckCustomDnsRequest {
    ip_domain body = 1;
}

message PostIpsCreatePoolRequest {
    ips_pool-key body = 1;
}

message PostIpsDeletePoolRequest {
    ips_pool-key body = 1;
}

message PostIpsDeleteRequest {
    ip body = 1;
}

message PostIpsInfoRequest {
    ip body = 1;
}

message PostIpsListPoolsRequest {
    api_key body = 1;
}

message PostIpsListRequest {
    api_key body = 1;
}

message PostIpsPoolInfoRequest {
    ips_pool-key body = 1;
}

message PostIpsProvisionRequest {
    ips_provision body = 1;
}

message PostIpsSetCustomDnsRequest {
    ip_domain body = 1;
}

message PostIpsSetPoolRequest {
    ips_set-pool body = 1;
}

message PostIpsStartWarmupRequest {
    ip body = 1;
}

message PostMessagesCancelScheduledRequest {
    messages_cancel-scheduled body = 1;
}

message PostMessagesContentRequest {
    id body = 1;
}

message PostMessagesInfoRequest {
    id body = 1;
}

message PostMessagesListScheduledRequest {
    messages_list-scheduled body = 1;
}

message PostMessagesParseRequest {
    messages_parse body = 1;
}

message PostMessagesRescheduleRequest {
    messages_reschedule body = 1;
}

message PostMessagesSearchTimeSeriesRequest {
    messages_search-time-series body = 1;
}

message PostMessagesSearchRequest {
    messages_search body = 1;
}

message PostMessagesSendRawRequest {
    messages_send-raw body = 1;
}

message PostMessagesSendTemplateRequest {
    messages_send-template body = 1;
}

message PostMessagesSendRequest {
    messages_send body = 1;
}

message PostMetadataAddRequest {
    metadata_template body = 1;
}

message PostMetadataDeleteRequest {
    name body = 1;
}

message PostMetadataListRequest {
    api_key body = 1;
}

message PostMetadataUpdateRequest {
    metadata_template body = 1;
}

message PostRejectsAddRequest {
    rejects_add body = 1;
}

message PostRejectsDeleteRequest {
    rejects_delete body = 1;
}

message PostRejectsListRequest {
    rejects_list body = 1;
}

message PostSendersAddDomainRequest {
    domain body = 1;
}

message PostSendersCheckDomainRequest {
    domain body = 1;
}

message PostSendersDomainsRequest {
    api_key body = 1;
}

message PostSendersInfoRequest {
    sender_address body = 1;
}

message PostSendersListRequest {
    api_key body = 1;
}

message PostSendersTimeSeriesRequest {
    sender_address body = 1;
}

message PostSendersVerifyDomainRequest {
    senders_verify-domain body = 1;
}

message PostSubaccountsAddRequest {
    subaccount_info body = 1;
}

message PostSubaccountsDeleteRequest {
    id body = 1;
}

message PostSubaccountsInfoRequest {
    id body = 1;
}

message PostSubaccountsListRequest {
    url_key body = 1;
}

message PostSubaccountsPauseRequest {
    id body = 1;
}

message PostSubaccountsResumeRequest {
    id body = 1;
}

message PostSubaccountsUpdateRequest {
    subaccount_info body = 1;
}

message PostTagsAllTimeSeriesRequest {
    api_key body = 1;
}

message PostTagsDeleteRequest {
    tag_key body = 1;
}

message PostTagsInfoRequest {
    tag_key body = 1;
}

message PostTagsListRequest {
    api_key body = 1;
}

message PostTagsTimeSeriesRequest {
    tag_key body = 1;
}

message PostTemplatesAddRequest {
    template body = 1;
}

message PostTemplatesDeleteRequest {
    name body = 1;
}

message PostTemplatesInfoRequest {
    name body = 1;
}

message PostTemplatesListRequest {
    templates_list body = 1;
}

message PostTemplatesPublishRequest {
    name body = 1;
}

message PostTemplatesRenderRequest {
    templates_render body = 1;
}

message PostTemplatesTimeSeriesRequest {
    name body = 1;
}

message PostTemplatesUpdateRequest {
    template body = 1;
}

message PostUrlsAddTrackingDomainRequest {
    domain body = 1;
}

message PostUrlsCheckTrackingDomainRequest {
    domain body = 1;
}

message PostUrlsListRequest {
    api_key body = 1;
}

message PostUrlsSearchRequest {
    url_key body = 1;
}

message PostUrlsTimeSeriesRequest {
    urls_time-series body = 1;
}

message PostUrlsTrackingDomainsRequest {
    api_key body = 1;
}

message PostUsersInfoRequest {
    api_key body = 1;
}

message PostUsersPingRequest {
    api_key body = 1;
}

message PostUsersPing2Request {
    api_key body = 1;
}

message PostUsersSendersRequest {
    api_key body = 1;
}

message PostWebhooksAddRequest {
    webhooks_add body = 1;
}

message PostWebhooksDeleteRequest {
    webhook_key body = 1;
}

message PostWebhooksInfoRequest {
    webhook_key body = 1;
}

message PostWebhooksListRequest {
    api_key body = 1;
}

message PostWebhooksUpdateRequest {
    webhooks_update body = 1;
}

message PostWhitelistsAddRequest {
    email body = 1;
}

message PostWhitelistsDeleteRequest {
    email body = 1;
}

message PostWhitelistsListRequest {
    email body = 1;
}

message Api_key {
    string key = 1;
}

message Domain {
    string domain = 1;
    string key = 2;
}

message Email {
    string email = 1;
    string key = 2;
}

message Exports_activity {
    repeated string api_keys = 1;
    string date_from = 2;
    string date_to = 3;
    string key = 4;
    string notify_email = 5;
    repeated string senders = 6;
    repeated string states = 7;
    repeated string tags = 8;
}

message Exports_info_response {
    string created_at = 1;
    string finished_at = 2;
    string id = 3;
    string result_url = 4;
    string state = 5;
    string type = 6;
}

message Exports_list_response {
    string created_at = 1;
    string finished_at = 2;
    string id = 3;
    string result_url = 4;
    string state = 5;
    string type = 6;
}
repeated Exports_list_response exports_list_response = 1

message Exports_satus {
    string created_at = 1;
    google.protobuf.NullValue finished_at = 2;
    string id = 3;
    google.protobuf.NullValue result_url = 4;
    string state = 5;
    string type = 6;
}

message Id {
    string id = 1;
    string key = 2;
}

message Inbound_add_route {
    string domain = 1;
    string key = 2;
    string pattern = 3;
    string url = 4;
}

message Inbound_domains_response {
    string created_at = 1;
    string domain = 2;
    bool valid_mx = 3;
}
repeated Inbound_domains_response inbound_domains_response = 1

message Inbound_info {
    string created_at = 1;
    string domain = 2;
    bool valid_mx = 3;
}

message Inbound_routes_response {
    string id = 1;
    string pattern = 2;
    string url = 3;
}
repeated Inbound_routes_response inbound_routes_response = 1

message Inbound_send_raw {
    string client_address = 1;
    string helo = 2;
    string key = 3;
    string mail_from = 4;
    string raw_message = 5;
    repeated string to = 6;
}

message Inbound_send_raw_response {
    string email = 1;
    string pattern = 2;
    string url = 3;
}
repeated Inbound_send_raw_response inbound_send_raw_response = 1

message Inbound_update_route {
    string id = 1;
    string key = 2;
    string pattern = 3;
    string url = 4;
}

message Ip {
    string ip = 1;
    string key = 2;
}

message Ip_domain {
    string domain = 1;
    string ip = 2;
    string key = 3;
}

message Ip_info {
    string created_at = 1;
    message Custom_dns {
        bool enabled = 1;
        string error = 2;
        bool valid = 3;
    }
    Custom_dns custom_dns = 2;
    string domain = 3;
    string ip = 4;
    string pool = 5;
    message Warmup {
        string end_at = 1;
        string start_at = 2;
        bool warming_up = 3;
    }
    Warmup warmup = 6;
}

message Ips_check_custom_dns_response {
    string error = 1;
    bool valid = 2;
}

message Ips_delete_pool_response {
    bool deleted = 1;
    string pool = 2;
}

message Ips_delete_response {
    bool deleted = 1;
    string ip = 2;
}

message Ips_list_pools_response {
    string created_at = 1;
    message Ip {
        string created_at = 1;
        message Custom_dns {
            bool enabled = 1;
            string error = 2;
            bool valid = 3;
        }
        Custom_dns custom_dns = 2;
        string domain = 3;
        string ip = 4;
        string pool = 5;
        message Warmup {
            string end_at = 1;
            string start_at = 2;
            bool warming_up = 3;
        }
        Warmup warmup = 6;
    }
    repeated Ip ips = 2;
    string name = 3;
}
repeated Ips_list_pools_response ips_list_pools_response = 1

message Ips_list_response {
    string created_at = 1;
    message Custom_dns {
        bool enabled = 1;
        string error = 2;
        bool valid = 3;
    }
    Custom_dns custom_dns = 2;
    string domain = 3;
    string ip = 4;
    string pool = 5;
    message Warmup {
        string end_at = 1;
        string start_at = 2;
        bool warming_up = 3;
    }
    Warmup warmup = 6;
}
repeated Ips_list_response ips_list_response = 1

message Ips_pool {
    string created_at = 1;
    message Ip {
        string created_at = 1;
        message Custom_dns {
            bool enabled = 1;
            string error = 2;
            bool valid = 3;
        }
        Custom_dns custom_dns = 2;
        string domain = 3;
        string ip = 4;
        string pool = 5;
        message Warmup {
            string end_at = 1;
            string start_at = 2;
            bool warming_up = 3;
        }
        Warmup warmup = 6;
    }
    repeated Ip ips = 2;
    string name = 3;
}

message Ips_pool_key {
    string key = 1;
    string pool = 2;
}

message Ips_provision {
    string key = 1;
    string pool = 2;
    bool warmup = 3;
}

message Ips_provision_response {
    string requested_at = 1;
}

message Ips_set_pool {
    bool create_pool = 1;
    string ip = 2;
    string key = 3;
    string pool = 4;
}

message Message_send_statu {
    string _id = 1;
    string email = 2;
    string reject_reason = 3;
    string status = 4;
}
repeated Message_send_statu message_send_status = 1

message Messages_cancel_scheduled {
    google.protobuf.NullValue id = 1;
    string key = 2;
}

message Messages_content_response {
    string _id = 1;
    message Attachment {
        string content = 1;
        string name = 2;
        string type = 3;
    }
    repeated Attachment attachments = 2;
    string from_email = 3;
    string from_name = 4;
    message Headers {
        string Reply_To = 1;
    }
    Headers headers = 5;
    string html = 6;
    string subject = 7;
    repeated string tags = 8;
    string text = 9;
    message To {
        string email = 1;
        string name = 2;
    }
    To to = 10;
    int32 ts = 11;
}

message Messages_info_response {
    string _id = 1;
    int32 clicks = 2;
    message Clicks_detail {
        string ip = 1;
        string location = 2;
        int32 ts = 3;
        string ua = 4;
        string url = 5;
    }
    repeated Clicks_detail clicks_detail = 3;
    string email = 4;
    message Metadata {
        string user_id = 1;
        string website = 2;
    }
    Metadata metadata = 5;
    int32 opens = 6;
    message Opens_detail {
        string ip = 1;
        string location = 2;
        int32 ts = 3;
        string ua = 4;
    }
    repeated Opens_detail opens_detail = 7;
    string sender = 8;
    message Smtp_event {
        string diag = 1;
        int32 ts = 2;
        string type = 3;
    }
    repeated Smtp_event smtp_events = 9;
    string state = 10;
    string subject = 11;
    repeated string tags = 12;
    string template = 13;
    int32 ts = 14;
}

message Messages_list_scheduled {
    string key = 1;
    string to = 2;
}

message Messages_list_scheduled_response {
    string _id = 1;
    string created_at = 2;
    string from_email = 3;
    string send_at = 4;
    string subject = 5;
    string to = 6;
}
repeated Messages_list_scheduled_response messages_list_scheduled_response = 1

message Messages_parse {
    string key = 1;
    string raw_message = 2;
}

message Messages_parse_response {
    message Attachment {
        bool binary = 1;
        string content = 2;
        string name = 3;
        string type = 4;
    }
    repeated Attachment attachments = 1;
    string from_email = 2;
    string from_name = 3;
    message Headers {
        string Reply_To = 1;
    }
    Headers headers = 4;
    string html = 5;
    message Image {
        string content = 1;
        string name = 2;
        string type = 3;
    }
    repeated Image images = 6;
    string subject = 7;
    string text = 8;
    message To {
        string email = 1;
        string name = 2;
    }
    repeated To to = 9;
}

message Messages_reschedule {
    string id = 1;
    string key = 2;
    string send_at = 3;
}

message Messages_search {
    repeated string api_keys = 1;
    string date_from = 2;
    string date_to = 3;
    string key = 4;
    int32 limit = 5;
    string query = 6;
    repeated string senders = 7;
    repeated string tags = 8;
}

message Messages_search_response {
    string _id = 1;
    int32 clicks = 2;
    message Clicks_detail {
        string ip = 1;
        string location = 2;
        int32 ts = 3;
        string ua = 4;
        string url = 5;
    }
    repeated Clicks_detail clicks_detail = 3;
    string email = 4;
    message Metadata {
        string user_id = 1;
        string website = 2;
    }
    Metadata metadata = 5;
    int32 opens = 6;
    message Opens_detail {
        string ip = 1;
        string location = 2;
        int32 ts = 3;
        string ua = 4;
    }
    repeated Opens_detail opens_detail = 7;
    string sender = 8;
    string state = 9;
    string subject = 10;
    repeated string tags = 11;
    string template = 12;
    int32 ts = 13;
}
repeated Messages_search_response messages_search_response = 1

message Messages_search_time_series {
    string date_from = 1;
    string date_to = 2;
    string key = 3;
    string query = 4;
    repeated string senders = 5;
    repeated string tags = 6;
}

message Messages_send {
    bool async = 1;
    string ip_pool = 2;
    string key = 3;
    message Message {
        message Attachment {
            string content = 1;
            string name = 2;
            string type = 3;
        }
        repeated Attachment attachments = 1;
        google.protobuf.NullValue auto_html = 2;
        google.protobuf.NullValue auto_text = 3;
        string bcc_address = 4;
        string from_email = 5;
        string from_name = 6;
        message Global_merge_var {
            string content = 1;
            string name = 2;
        }
        repeated Global_merge_var global_merge_vars = 7;
        string google_analytics_campaign = 8;
        repeated string google_analytics_domains = 9;
        message Headers {
            string Reply_To = 1;
        }
        Headers headers = 10;
        string html = 11;
        message Image {
            string content = 1;
            string name = 2;
            string type = 3;
        }
        repeated Image images = 12;
        bool important = 13;
        google.protobuf.NullValue inline_css = 14;
        bool merge = 15;
        message Merge_var {
            string rcpt = 1;
            message Var {
                string content = 1;
                string name = 2;
            }
            repeated Var vars = 2;
        }
        repeated Merge_var merge_vars = 16;
        message Metadata {
            string website = 1;
        }
        Metadata metadata = 17;
        google.protobuf.NullValue preserve_recipients = 18;
        message Recipient_metadata {
            string rcpt = 1;
            message Values {
                int32 user_id = 1;
            }
            Values values = 2;
        }
        repeated Recipient_metadata recipient_metadata = 19;
        google.protobuf.NullValue return_path_domain = 20;
        google.protobuf.NullValue signing_domain = 21;
        string subaccount = 22;
        string subject = 23;
        repeated string tags = 24;
        string text = 25;
        message To {
            string email = 1;
            string name = 2;
            string type = 3;
        }
        repeated To to = 26;
        google.protobuf.NullValue track_clicks = 27;
        google.protobuf.NullValue track_opens = 28;
        google.protobuf.NullValue tracking_domain = 29;
        google.protobuf.NullValue url_strip_qs = 30;
        google.protobuf.NullValue view_content_link = 31;
    }
    Message message = 4;
    string send_at = 5;
}

message Messages_send_raw {
    bool async = 1;
    string from_email = 2;
    string from_name = 3;
    string ip_pool = 4;
    string key = 5;
    string raw_message = 6;
    google.protobuf.NullValue return_path_domain = 7;
    string send_at = 8;
    repeated string to = 9;
}

message Messages_send_template {
    bool async = 1;
    string ip_pool = 2;
    string key = 3;
    message Message {
        message Attachment {
            string content = 1;
            string name = 2;
            string type = 3;
        }
        repeated Attachment attachments = 1;
        google.protobuf.NullValue auto_html = 2;
        google.protobuf.NullValue auto_text = 3;
        string bcc_address = 4;
        string from_email = 5;
        string from_name = 6;
        message Global_merge_var {
            string content = 1;
            string name = 2;
        }
        repeated Global_merge_var global_merge_vars = 7;
        string google_analytics_campaign = 8;
        repeated string google_analytics_domains = 9;
        message Headers {
            string Reply_To = 1;
        }
        Headers headers = 10;
        string html = 11;
        message Image {
            string content = 1;
            string name = 2;
            string type = 3;
        }
        repeated Image images = 12;
        bool important = 13;
        google.protobuf.NullValue inline_css = 14;
        bool merge = 15;
        message Merge_var {
            string rcpt = 1;
            message Var {
                string content = 1;
                string name = 2;
            }
            repeated Var vars = 2;
        }
        repeated Merge_var merge_vars = 16;
        message Metadata {
            string website = 1;
        }
        Metadata metadata = 17;
        google.protobuf.NullValue preserve_recipients = 18;
        message Recipient_metadata {
            string rcpt = 1;
            message Values {
                int32 user_id = 1;
            }
            Values values = 2;
        }
        repeated Recipient_metadata recipient_metadata = 19;
        google.protobuf.NullValue return_path_domain = 20;
        google.protobuf.NullValue signing_domain = 21;
        string subaccount = 22;
        string subject = 23;
        repeated string tags = 24;
        string text = 25;
        message To {
            string email = 1;
            string name = 2;
            string type = 3;
        }
        repeated To to = 26;
        google.protobuf.NullValue track_clicks = 27;
        google.protobuf.NullValue track_opens = 28;
        google.protobuf.NullValue tracking_domain = 29;
        google.protobuf.NullValue url_strip_qs = 30;
        google.protobuf.NullValue view_content_link = 31;
    }
    Message message = 4;
    string send_at = 5;
    message Template_content {
        string content = 1;
        string name = 2;
    }
    repeated Template_content template_content = 6;
    string template_name = 7;
}

message Metadata_info {
    string name = 1;
    string state = 2;
    string view_template = 3;
}

message Metadata_list_response {
    string name = 1;
    string state = 2;
    string view_template = 3;
}
repeated Metadata_list_response metadata_list_response = 1

message Metadata_template {
    string key = 1;
    string name = 2;
    string view_template = 3;
}

message Name {
    string key = 1;
    string name = 2;
}

message Notify_email {
    string key = 1;
    string notify_email = 2;
}

message Rejects_add {
    string comment = 1;
    string email = 2;
    string key = 3;
    string subaccount = 4;
}

message Rejects_add_response {
    bool added = 1;
    string email = 2;
}

message Rejects_delete {
    string email = 1;
    string key = 2;
    string subaccount = 3;
}

message Rejects_delete_response {
    bool deleted = 1;
    string email = 2;
    string subaccount = 3;
}

message Rejects_list {
    string email = 1;
    bool include_expired = 2;
    string key = 3;
    string subaccount = 4;
}

message Rejects_list_response {
    string created_at = 1;
    string detail = 2;
    string email = 3;
    bool expired = 4;
    string expires_at = 5;
    string last_event_at = 6;
    string reason = 7;
    message Sender {
        string address = 1;
        int32 clicks = 2;
        int32 complaints = 3;
        string created_at = 4;
        int32 hard_bounces = 5;
        int32 opens = 6;
        int32 rejects = 7;
        int32 sent = 8;
        int32 soft_bounces = 9;
        int32 unique_clicks = 10;
        int32 unique_opens = 11;
        int32 unsubs = 12;
    }
    Sender sender = 8;
    string subaccount = 9;
}
repeated Rejects_list_response rejects_list_response = 1

message Route {
    string id = 1;
    string pattern = 2;
    string url = 3;
}

message Schedulingchange_info {
    string _id = 1;
    string created_at = 2;
    string from_email = 3;
    string send_at = 4;
    string subject = 5;
    string to = 6;
}

message Sender_address {
    string address = 1;
    string key = 2;
}

message Sender_domain_info {
    string created_at = 1;
    message Dkim {
        string error = 1;
        bool valid = 2;
        string valid_after = 3;
    }
    Dkim dkim = 2;
    string domain = 3;
    string last_tested_at = 4;
    message Spf {
        string error = 1;
        bool valid = 2;
        string valid_after = 3;
    }
    Spf spf = 5;
    bool valid_signing = 6;
    string verified_at = 7;
}

message Sender {
    string address = 1;
    int32 clicks = 2;
    int32 complaints = 3;
    string created_at = 4;
    int32 hard_bounces = 5;
    int32 opens = 6;
    int32 rejects = 7;
    int32 sent = 8;
    int32 soft_bounces = 9;
    int32 unique_clicks = 10;
    int32 unique_opens = 11;
    int32 unsubs = 12;
}
repeated Sender senders = 1

message Senders_domains_response {
    string created_at = 1;
    message Dkim {
        string error = 1;
        bool valid = 2;
        string valid_after = 3;
    }
    Dkim dkim = 2;
    string domain = 3;
    string last_tested_at = 4;
    message Spf {
        string error = 1;
        bool valid = 2;
        string valid_after = 3;
    }
    Spf spf = 5;
    bool valid_signing = 6;
    string verified_at = 7;
}
repeated Senders_domains_response senders_domains_response = 1

message Senders_info_response {
    string address = 1;
    int32 clicks = 2;
    int32 complaints = 3;
    string created_at = 4;
    int32 hard_bounces = 5;
    int32 opens = 6;
    int32 rejects = 7;
    int32 sent = 8;
    int32 soft_bounces = 9;
    message Stats {
        message Last_30_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_30_days last_30_days = 1;
        message Last_60_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_60_days last_60_days = 2;
        message Last_7_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_7_days last_7_days = 3;
        message Last_90_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_90_days last_90_days = 4;
        message Today {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Today today = 5;
    }
    Stats stats = 10;
    int32 unsubs = 11;
}

message Senders_verify_domain {
    string domain = 1;
    string key = 2;
    string mailbox = 3;
}

message Senders_verify_domain_response {
    string domain = 1;
    string email = 2;
    string status = 3;
}

message Subaccount_info {
    int32 custom_quota = 1;
    string id = 2;
    string key = 3;
    string name = 4;
    string notes = 5;
}

message Subaccount_info2 {
    string created_at = 1;
    int32 custom_quota = 2;
    string first_sent_at = 3;
    string id = 4;
    string name = 5;
    int32 reputation = 6;
    int32 sent_monthly = 7;
    int32 sent_total = 8;
    int32 sent_weekly = 9;
    string status = 10;
}

message Subaccounts_info_response {
    string created_at = 1;
    int32 custom_quota = 2;
    string first_sent_at = 3;
    int32 hourly_quota = 4;
    string id = 5;
    message Last_30_days {
        int32 clicks = 1;
        int32 complaints = 2;
        int32 hard_bounces = 3;
        int32 opens = 4;
        int32 rejects = 5;
        int32 sent = 6;
        int32 soft_bounces = 7;
        int32 unique_clicks = 8;
        int32 unique_opens = 9;
        int32 unsubs = 10;
    }
    Last_30_days last_30_days = 6;
    string name = 7;
    string notes = 8;
    int32 reputation = 9;
    int32 sent_hourly = 10;
    int32 sent_monthly = 11;
    int32 sent_total = 12;
    int32 sent_weekly = 13;
    string status = 14;
}

message Subaccounts_list_response {
    string created_at = 1;
    int32 custom_quota = 2;
    string first_sent_at = 3;
    string id = 4;
    string name = 5;
    int32 reputation = 6;
    int32 sent_monthly = 7;
    int32 sent_total = 8;
    int32 sent_weekly = 9;
    string status = 10;
}
repeated Subaccounts_list_response subaccounts_list_response = 1

message Tag_key {
    string key = 1;
    string tag = 2;
}

message Tags_delete_response {
    int32 clicks = 1;
    int32 complaints = 2;
    int32 hard_bounces = 3;
    int32 opens = 4;
    int32 rejects = 5;
    int32 reputation = 6;
    int32 sent = 7;
    int32 soft_bounces = 8;
    string tag = 9;
    int32 unique_clicks = 10;
    int32 unique_opens = 11;
    int32 unsubs = 12;
}

message Tags_info_response {
    int32 clicks = 1;
    int32 complaints = 2;
    int32 hard_bounces = 3;
    int32 opens = 4;
    int32 rejects = 5;
    int32 sent = 6;
    int32 soft_bounces = 7;
    message Stats {
        message Last_30_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_30_days last_30_days = 1;
        message Last_60_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_60_days last_60_days = 2;
        message Last_7_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_7_days last_7_days = 3;
        message Last_90_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_90_days last_90_days = 4;
        message Today {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Today today = 5;
    }
    Stats stats = 8;
    string tag = 9;
    int32 unsubs = 10;
}

message Tags_list_response {
    int32 clicks = 1;
    int32 complaints = 2;
    int32 hard_bounces = 3;
    int32 opens = 4;
    int32 rejects = 5;
    int32 reputation = 6;
    int32 sent = 7;
    int32 soft_bounces = 8;
    string tag = 9;
    int32 unique_clicks = 10;
    int32 unique_opens = 11;
    int32 unsubs = 12;
}
repeated Tags_list_response tags_list_response = 1

message Template {
    string code = 1;
    string from_email = 2;
    string from_name = 3;
    string key = 4;
    repeated string labels = 5;
    string name = 6;
    bool publish = 7;
    string subject = 8;
    string text = 9;
}

message Template_detailed {
    string code = 1;
    string created_at = 2;
    string from_email = 3;
    string from_name = 4;
    repeated string labels = 5;
    string name = 6;
    string publish_code = 7;
    string publish_from_email = 8;
    string publish_from_name = 9;
    string publish_name = 10;
    string publish_subject = 11;
    string publish_text = 12;
    string published_at = 13;
    string slug = 14;
    string subject = 15;
    string text = 16;
    string updated_at = 17;
}

message Templates_list {
    string key = 1;
    string label = 2;
}

message Templates_list_response {
    string code = 1;
    string created_at = 2;
    string from_email = 3;
    string from_name = 4;
    repeated string labels = 5;
    string name = 6;
    string publish_code = 7;
    string publish_from_email = 8;
    string publish_from_name = 9;
    string publish_name = 10;
    string publish_subject = 11;
    string publish_text = 12;
    string published_at = 13;
    string slug = 14;
    string subject = 15;
    string text = 16;
    string updated_at = 17;
}
repeated Templates_list_response templates_list_response = 1

message Templates_render {
    string key = 1;
    message Merge_var {
        string content = 1;
        string name = 2;
    }
    repeated Merge_var merge_vars = 2;
    message Template_content {
        string content = 1;
        string name = 2;
    }
    repeated Template_content template_content = 3;
    string template_name = 4;
}

message Templates_render_response {
    string html = 1;
}

message Time_serie {
    int32 clicks = 1;
    int32 complaints = 2;
    int32 hard_bounces = 3;
    int32 opens = 4;
    int32 rejects = 5;
    int32 sent = 6;
    int32 soft_bounces = 7;
    string time = 8;
    int32 unique_clicks = 9;
    int32 unique_opens = 10;
}
repeated Time_serie time_series = 1

message Timeserie {
    int32 clicks = 1;
    int32 complaints = 2;
    int32 hard_bounces = 3;
    int32 opens = 4;
    int32 rejects = 5;
    int32 sent = 6;
    int32 soft_bounces = 7;
    string time = 8;
    int32 unique_clicks = 9;
    int32 unique_opens = 10;
    int32 unsubs = 11;
}
repeated Timeserie timeseries = 1

message Tracking_domain_status {
    message Cname {
        string error = 1;
        bool valid = 2;
        string valid_after = 3;
    }
    Cname cname = 1;
    string created_at = 2;
    string domain = 3;
    string last_tested_at = 4;
    bool valid_tracking = 5;
}

message Url_info {
    int32 clicks = 1;
    int32 sent = 2;
    int32 unique_clicks = 3;
    string url = 4;
}
repeated Url_info url_infos = 1

message Url_key {
    string key = 1;
    string q = 2;
}

message Urls_time_series {
    string key = 1;
    string url = 2;
}

message Urls_time_series_response {
    int32 clicks = 1;
    int32 sent = 2;
    string time = 3;
    int32 unique_clicks = 4;
}
repeated Urls_time_series_response urls_time_series_response = 1

message Urls_tracking_domains_response {
    message Cname {
        string error = 1;
        bool valid = 2;
        string valid_after = 3;
    }
    Cname cname = 1;
    string created_at = 2;
    string domain = 3;
    string last_tested_at = 4;
    bool valid_tracking = 5;
}
repeated Urls_tracking_domains_response urls_tracking_domains_response = 1

message Users_info_response {
    int32 backlog = 1;
    string created_at = 2;
    int32 hourly_quota = 3;
    string public_id = 4;
    int32 reputation = 5;
    message Stats {
        message All_time {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        All_time all_time = 1;
        message Last_30_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_30_days last_30_days = 2;
        message Last_60_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_60_days last_60_days = 3;
        message Last_7_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_7_days last_7_days = 4;
        message Last_90_days {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Last_90_days last_90_days = 5;
        message Today {
            int32 clicks = 1;
            int32 complaints = 2;
            int32 hard_bounces = 3;
            int32 opens = 4;
            int32 rejects = 5;
            int32 sent = 6;
            int32 soft_bounces = 7;
            int32 unique_clicks = 8;
            int32 unique_opens = 9;
            int32 unsubs = 10;
        }
        Today today = 6;
    }
    Stats stats = 6;
    string username = 7;
}

message Users_ping2_response {
    string PING = 1;
}

message Webhook {
    string auth_key = 1;
    int32 batches_sent = 2;
    string created_at = 3;
    string description = 4;
    repeated string events = 5;
    int32 events_sent = 6;
    int32 id = 7;
    string last_error = 8;
    string last_sent_at = 9;
    string url = 10;
}

message Webhook_key {
    int32 id = 1;
    string key = 2;
}

message Webhooks_add {
    string description = 1;
    repeated string events = 2;
    string key = 3;
    string url = 4;
}

message Webhooks_list_response {
    string auth_key = 1;
    int32 batches_sent = 2;
    string created_at = 3;
    string description = 4;
    repeated string events = 5;
    int32 events_sent = 6;
    int32 id = 7;
    string last_error = 8;
    string last_sent_at = 9;
    string url = 10;
}
repeated Webhooks_list_response webhooks_list_response = 1

message Webhooks_update {
    string description = 1;
    repeated string events = 2;
    int32 id = 3;
    string key = 4;
    string url = 5;
}

message Whitelists_add_response {
    string email = 1;
    bool whether = 2;
}

message Whitelists_delete_response {
    bool deleted = 1;
    string email = 2;
}

message Whitelists_list_response {
    string created_at = 1;
    string detail = 2;
    string email = 3;
}
repeated Whitelists_list_response whitelists_list_response = 1

service MandrillService {
    // Begins an export of your activity history. The activity will be exported to a zip archive containing a single file named activity.csv in the same format as you would be able to export from your account's activity view. It includes the following fields: Date, Email Address, Sender, Subject, Status, Tags, Opens, Clicks, Bounce Detail. If you have configured any custom metadata fields, they will be included in the exported data.
    rpc PostExportsActivity(PostExportsActivityRequest) returns (Exports_satus) {
      option (google.api.http) = {
        post: "/api//exports/activity.json"
        body: "body"
      };
    }
    // Returns information about an export job. If the export job's state is 'complete', the returned data will include a URL you can use to fetch the results. Every export job produces a zip archive, but the format of the archive is distinct for each job type. The api calls that initiate exports include more details about the output format for that job type.
    rpc PostExportsInfo(PostExportsInfoRequest) returns (Exports_info-Response) {
      option (google.api.http) = {
        post: "/api//exports/info.json"
        body: "body"
      };
    }
    // Returns a list of your exports.
    rpc PostExportsList(PostExportsListRequest) returns (Exports_list-Response) {
      option (google.api.http) = {
        post: "/api//exports/list.json"
        body: "body"
      };
    }
    // Begins an export of your rejection blacklist. The blacklist will be exported to a zip archive containing a single file named rejects.csv that includes the following fields: email, reason, detail, created_at, expires_at, last_event_at, expires_at.
    rpc PostExportsRejects(PostExportsRejectsRequest) returns (Exports_satus) {
      option (google.api.http) = {
        post: "/api//exports/rejects.json"
        body: "body"
      };
    }
    // Begins an export of your rejection whitelist. The whitelist will be exported to a zip archive containing a single file named whitelist.csv that includes the following fields: email, detail, created_at.
    rpc PostExportsWhitelist(PostExportsWhitelistRequest) returns (Exports_satus) {
      option (google.api.http) = {
        post: "/api//exports/whitelist.json"
        body: "body"
      };
    }
    // Add an inbound domain to your account
    rpc PostInboundAddDomain(PostInboundAddDomainRequest) returns (Inbound_info) {
      option (google.api.http) = {
        post: "/api//inbound/add-domain.json"
        body: "body"
      };
    }
    // Add a new mailbox route to an inbound domain
    rpc PostInboundAddRoute(PostInboundAddRouteRequest) returns (Route) {
      option (google.api.http) = {
        post: "/api//inbound/add-route.json"
        body: "body"
      };
    }
    // Check the MX settings for an inbound domain. The domain must have already been added with the add-domain call
    rpc PostInboundCheckDomain(PostInboundCheckDomainRequest) returns (Inbound_info) {
      option (google.api.http) = {
        post: "/api//inbound/check-domain.json"
        body: "body"
      };
    }
    // Delete an inbound domain from the account. All mail will stop routing for this domain immediately.
    rpc PostInboundDeleteDomain(PostInboundDeleteDomainRequest) returns (Inbound_info) {
      option (google.api.http) = {
        post: "/api//inbound/delete-domain.json"
        body: "body"
      };
    }
    // Delete an existing inbound mailbox route
    rpc PostInboundDeleteRoute(PostInboundDeleteRouteRequest) returns (Route) {
      option (google.api.http) = {
        post: "/api//inbound/delete-route.json"
        body: "body"
      };
    }
    // List the domains that have been configured for inbound delivery
    rpc PostInboundDomains(PostInboundDomainsRequest) returns (Inbound_domains-Response) {
      option (google.api.http) = {
        post: "/api//inbound/domains.json"
        body: "body"
      };
    }
    // List the mailbox routes defined for an inbound domain
    rpc PostInboundRoutes(PostInboundRoutesRequest) returns (Inbound_routes-Response) {
      option (google.api.http) = {
        post: "/api//inbound/routes.json"
        body: "body"
      };
    }
    // Take a raw MIME document destined for a domain with inbound domains set up, and send it to the inbound hook exactly as if it had been sent over SMTP
    rpc PostInboundSendRaw(PostInboundSendRawRequest) returns (Inbound_send-Raw-Response) {
      option (google.api.http) = {
        post: "/api//inbound/send-raw.json"
        body: "body"
      };
    }
    // Update the pattern or webhook of an existing inbound mailbox route. If null is provided for any fields, the values will remain unchanged.
    rpc PostInboundUpdateRoute(PostInboundUpdateRouteRequest) returns (Route) {
      option (google.api.http) = {
        post: "/api//inbound/update-route.json"
        body: "body"
      };
    }
    // Cancels the warmup process for a dedicated IP.
    rpc PostIpsCancelWarmup(PostIpsCancelWarmupRequest) returns (Ip_info) {
      option (google.api.http) = {
        post: "/api//ips/cancel-warmup.json"
        body: "body"
      };
    }
    // Tests whether a domain name is valid for use as the custom reverse DNS for a dedicated IP.
    rpc PostIpsCheckCustomDns(PostIpsCheckCustomDnsRequest) returns (Ips_check-Custom-Dns-Response) {
      option (google.api.http) = {
        post: "/api//ips/check-custom-dns.json"
        body: "body"
      };
    }
    // Creates a pool and returns it. If a pool already exists with this name, no action will be performed.
    rpc PostIpsCreatePool(PostIpsCreatePoolRequest) returns (Ips_pool) {
      option (google.api.http) = {
        post: "/api//ips/create-pool.json"
        body: "body"
      };
    }
    // Deletes a pool. A pool must be empty before you can delete it, and you cannot delete your default pool.
    rpc PostIpsDeletePool(PostIpsDeletePoolRequest) returns (Ips_delete-Pool-Response) {
      option (google.api.http) = {
        post: "/api//ips/delete-pool.json"
        body: "body"
      };
    }
    // Deletes a dedicated IP. This is permanent and cannot be undone.
    rpc PostIpsDelete(PostIpsDeleteRequest) returns (Ips_delete-Response) {
      option (google.api.http) = {
        post: "/api//ips/delete.json"
        body: "body"
      };
    }
    // Retrieves information about a single dedicated ip.
    rpc PostIpsInfo(PostIpsInfoRequest) returns (Ip_info) {
      option (google.api.http) = {
        post: "/api//ips/info.json"
        body: "body"
      };
    }
    // Lists your dedicated IP pools.
    rpc PostIpsListPools(PostIpsListPoolsRequest) returns (Ips_list-Pools-Response) {
      option (google.api.http) = {
        post: "/api//ips/list-pools.json"
        body: "body"
      };
    }
    // Lists your dedicated IPs.
    rpc PostIpsList(PostIpsListRequest) returns (Ips_list-Response) {
      option (google.api.http) = {
        post: "/api//ips/list.json"
        body: "body"
      };
    }
    // Describes a single dedicated IP pool.
    rpc PostIpsPoolInfo(PostIpsPoolInfoRequest) returns (Ips_pool) {
      option (google.api.http) = {
        post: "/api//ips/pool-info.json"
        body: "body"
      };
    }
    // Requests an additional dedicated IP for your account. Accounts may have one outstanding request at any time, and provisioning requests are processed within 24 hours.
    rpc PostIpsProvision(PostIpsProvisionRequest) returns (Ips_provision-Response) {
      option (google.api.http) = {
        post: "/api//ips/provision.json"
        body: "body"
      };
    }
    // Configures the custom DNS name for a dedicated IP.
    rpc PostIpsSetCustomDns(PostIpsSetCustomDnsRequest) returns (Ip_info) {
      option (google.api.http) = {
        post: "/api//ips/set-custom-dns.json"
        body: "body"
      };
    }
    // Moves a dedicated IP to a different pool.
    rpc PostIpsSetPool(PostIpsSetPoolRequest) returns (Ip_info) {
      option (google.api.http) = {
        post: "/api//ips/set-pool.json"
        body: "body"
      };
    }
    // Begins the warmup process for a dedicated IP. During the warmup process, Mandrill will gradually increase the percentage of your mail that is sent over the warming-up IP, over a period of roughly 30 days. The rest of your mail will be sent over shared IPs or other dedicated IPs in the same pool.
    rpc PostIpsStartWarmup(PostIpsStartWarmupRequest) returns (Ip_info) {
      option (google.api.http) = {
        post: "/api//ips/start-warmup.json"
        body: "body"
      };
    }
    // Cancels a scheduled email.
    rpc PostMessagesCancelScheduled(PostMessagesCancelScheduledRequest) returns (Schedulingchange_info) {
      option (google.api.http) = {
        post: "/api//messages/cancel-scheduled.json"
        body: "body"
      };
    }
    // Get the full content of a recently sent message
    rpc PostMessagesContent(PostMessagesContentRequest) returns (Messages_content-Response) {
      option (google.api.http) = {
        post: "/api//messages/content.json"
        body: "body"
      };
    }
    // Get the information for a single recently sent message
    rpc PostMessagesInfo(PostMessagesInfoRequest) returns (Messages_info-Response) {
      option (google.api.http) = {
        post: "/api//messages/info.json"
        body: "body"
      };
    }
    // Queries your scheduled emails by sender or recipient, or both.
    rpc PostMessagesListScheduled(PostMessagesListScheduledRequest) returns (Messages_list-Scheduled-Response) {
      option (google.api.http) = {
        post: "/api//messages/list-scheduled.json"
        body: "body"
      };
    }
    // Parse the full MIME document for an email message, returning the content of the message broken into its constituent pieces
    rpc PostMessagesParse(PostMessagesParseRequest) returns (Messages_parse-Response) {
      option (google.api.http) = {
        post: "/api//messages/parse.json"
        body: "body"
      };
    }
    // Reschedules a scheduled email.
    rpc PostMessagesReschedule(PostMessagesRescheduleRequest) returns (Schedulingchange_info) {
      option (google.api.http) = {
        post: "/api//messages/reschedule.json"
        body: "body"
      };
    }
    // Search the content of recently sent messages and return the aggregated hourly stats for matching messages
    rpc PostMessagesSearchTimeSeries(PostMessagesSearchTimeSeriesRequest) returns (Timeseries) {
      option (google.api.http) = {
        post: "/api//messages/search-time-series.json"
        body: "body"
      };
    }
    // Search the content of recently sent messages and optionally narrow by date range, tags and senders. This method may be called up to 20 times per minute. If you need the data more often, you can use /messages/info.json to get the information for a single message, or webhooks to push activity to your own application for querying.
    rpc PostMessagesSearch(PostMessagesSearchRequest) returns (Messages_search-Response) {
      option (google.api.http) = {
        post: "/api//messages/search.json"
        body: "body"
      };
    }
    // Take a raw MIME document for a message, and send it exactly as if it were sent through Mandrill's SMTP servers
    rpc PostMessagesSendRaw(PostMessagesSendRawRequest) returns (Message_send-Status) {
      option (google.api.http) = {
        post: "/api//messages/send-raw.json"
        body: "body"
      };
    }
    // Send a new transactional message through Mandrill using a template
    rpc PostMessagesSendTemplate(PostMessagesSendTemplateRequest) returns (Message_send-Status) {
      option (google.api.http) = {
        post: "/api//messages/send-template.json"
        body: "body"
      };
    }
    // Send a new transactional message through Mandrill
    rpc PostMessagesSend(PostMessagesSendRequest) returns (Message_send-Status) {
      option (google.api.http) = {
        post: "/api//messages/send.json"
        body: "body"
      };
    }
    // Add a new custom metadata field to be indexed for the account.
    rpc PostMetadataAdd(PostMetadataAddRequest) returns (Metadata_info) {
      option (google.api.http) = {
        post: "/api//metadata/add.json"
        body: "body"
      };
    }
    // Delete an existing custom metadata field. Deletion isn't instataneous, and /metadata/list will continue to return the field until the asynchronous deletion process is complete.
    rpc PostMetadataDelete(PostMetadataDeleteRequest) returns (Metadata_info) {
      option (google.api.http) = {
        post: "/api//metadata/delete.json"
        body: "body"
      };
    }
    // Get the list of custom metadata fields indexed for the account.
    rpc PostMetadataList(PostMetadataListRequest) returns (Metadata_list-Response) {
      option (google.api.http) = {
        post: "/api//metadata/list.json"
        body: "body"
      };
    }
    // Update an existing custom metadata field.
    rpc PostMetadataUpdate(PostMetadataUpdateRequest) returns (Metadata_info) {
      option (google.api.http) = {
        post: "/api//metadata/update.json"
        body: "body"
      };
    }
    // Adds an email to your email rejection blacklist. Addresses that you add manually will never expire and there is no reputation penalty for removing them from your blacklist. Attempting to blacklist an address that has been whitelisted will have no effect.
    rpc PostRejectsAdd(PostRejectsAddRequest) returns (Rejects_add-Response) {
      option (google.api.http) = {
        post: "/api//rejects/add.json"
        body: "body"
      };
    }
    // Deletes an email rejection. There is no limit to how many rejections you can remove from your blacklist, but keep in mind that each deletion has an affect on your reputation.
    rpc PostRejectsDelete(PostRejectsDeleteRequest) returns (Rejects_delete-Response) {
      option (google.api.http) = {
        post: "/api//rejects/delete.json"
        body: "body"
      };
    }
    // Retrieves your email rejection blacklist. You can provide an email address to limit the results. Returns up to 1000 results. By default, entries that have expired are excluded from the results; set include_expired to true to include them.
    rpc PostRejectsList(PostRejectsListRequest) returns (Rejects_list-Response) {
      option (google.api.http) = {
        post: "/api//rejects/list.json"
        body: "body"
      };
    }
    // Adds a sender domain to your account. Sender domains are added automatically as you send, but you can use this call to add them ahead of time.
    rpc PostSendersAddDomain(PostSendersAddDomainRequest) returns (Sender_domain_info) {
      option (google.api.http) = {
        post: "/api//senders/add-domain.json"
        body: "body"
      };
    }
    // Checks the SPF and DKIM settings for a domain. If you haven't already added this domain to your account, it will be added automatically.
    rpc PostSendersCheckDomain(PostSendersCheckDomainRequest) returns (Sender_domain_info) {
      option (google.api.http) = {
        post: "/api//senders/check-domain.json"
        body: "body"
      };
    }
    // Returns the sender domains that have been added to this account.
    rpc PostSendersDomains(PostSendersDomainsRequest) returns (Senders_domains-Response) {
      option (google.api.http) = {
        post: "/api//senders/domains.json"
        body: "body"
      };
    }
    // Return more detailed information about a single sender, including aggregates of recent stats
    rpc PostSendersInfo(PostSendersInfoRequest) returns (Senders_info-Response) {
      option (google.api.http) = {
        post: "/api//senders/info.json"
        body: "body"
      };
    }
    // Return the senders that have tried to use this account.
    rpc PostSendersList(PostSendersListRequest) returns (Senders) {
      option (google.api.http) = {
        post: "/api//senders/list.json"
        body: "body"
      };
    }
    // Return the recent history (hourly stats for the last 30 days) for a sender
    rpc PostSendersTimeSeries(PostSendersTimeSeriesRequest) returns (Time-Series) {
      option (google.api.http) = {
        post: "/api//senders/time-series.json"
        body: "body"
      };
    }
    // Sends a verification email in order to verify ownership of a domain. Domain verification is an optional step to confirm ownership of a domain. Once a domain has been verified in a Mandrill account, other accounts may not have their messages signed by that domain unless they also verify the domain. This prevents other Mandrill accounts from sending mail signed by your domain.
    rpc PostSendersVerifyDomain(PostSendersVerifyDomainRequest) returns (Senders_verify-Domain-Response) {
      option (google.api.http) = {
        post: "/api//senders/verify-domain.json"
        body: "body"
      };
    }
    // Add a new subaccount
    rpc PostSubaccountsAdd(PostSubaccountsAddRequest) returns (Subaccount_info2) {
      option (google.api.http) = {
        post: "/api//subaccounts/add.json"
        body: "body"
      };
    }
    // Delete an existing subaccount. Any email related to the subaccount will be saved, but stats will be removed and any future sending calls to this subaccount will fail.
    rpc PostSubaccountsDelete(PostSubaccountsDeleteRequest) returns (Subaccount_info2) {
      option (google.api.http) = {
        post: "/api//subaccounts/delete.json"
        body: "body"
      };
    }
    // Given the ID of an existing subaccount, return the data about it
    rpc PostSubaccountsInfo(PostSubaccountsInfoRequest) returns (Subaccounts_info-Response) {
      option (google.api.http) = {
        post: "/api//subaccounts/info.json"
        body: "body"
      };
    }
    // Get the list of subaccounts defined for the account, optionally filtered by a prefix
    rpc PostSubaccountsList(PostSubaccountsListRequest) returns (Subaccounts_list-Response) {
      option (google.api.http) = {
        post: "/api//subaccounts/list.json"
        body: "body"
      };
    }
    // Pause a subaccount's sending. Any future emails delivered to this subaccount will be queued for a maximum of 3 days until the subaccount is resumed.
    rpc PostSubaccountsPause(PostSubaccountsPauseRequest) returns (Subaccount_info2) {
      option (google.api.http) = {
        post: "/api//subaccounts/pause.json"
        body: "body"
      };
    }
    // Resume a paused subaccount's sending
    rpc PostSubaccountsResume(PostSubaccountsResumeRequest) returns (Subaccount_info2) {
      option (google.api.http) = {
        post: "/api//subaccounts/resume.json"
        body: "body"
      };
    }
    // Update an existing subaccount
    rpc PostSubaccountsUpdate(PostSubaccountsUpdateRequest) returns (Subaccount_info2) {
      option (google.api.http) = {
        post: "/api//subaccounts/update.json"
        body: "body"
      };
    }
    // Return the recent history (hourly stats for the last 30 days) for all tags
    rpc PostTagsAllTimeSeries(PostTagsAllTimeSeriesRequest) returns (Timeseries) {
      option (google.api.http) = {
        post: "/api//tags/all-time-series.json"
        body: "body"
      };
    }
    // Deletes a tag permanently. Deleting a tag removes the tag from any messages that have been sent, and also deletes the tag's stats. There is no way to undo this operation, so use it carefully.
    rpc PostTagsDelete(PostTagsDeleteRequest) returns (Tags_delete-Response) {
      option (google.api.http) = {
        post: "/api//tags/delete.json"
        body: "body"
      };
    }
    // Return more detailed information about a single tag, including aggregates of recent stats
    rpc PostTagsInfo(PostTagsInfoRequest) returns (Tags_info-Response) {
      option (google.api.http) = {
        post: "/api//tags/info.json"
        body: "body"
      };
    }
    // Return all of the user-defined tag information
    rpc PostTagsList(PostTagsListRequest) returns (Tags_list-Response) {
      option (google.api.http) = {
        post: "/api//tags/list.json"
        body: "body"
      };
    }
    // Return the recent history (hourly stats for the last 30 days) for a tag
    rpc PostTagsTimeSeries(PostTagsTimeSeriesRequest) returns (Timeseries) {
      option (google.api.http) = {
        post: "/api//tags/time-series.json"
        body: "body"
      };
    }
    // Add a new template
    rpc PostTemplatesAdd(PostTemplatesAddRequest) returns (Template_detailed) {
      option (google.api.http) = {
        post: "/api//templates/add.json"
        body: "body"
      };
    }
    // Delete a template
    rpc PostTemplatesDelete(PostTemplatesDeleteRequest) returns (Template_detailed) {
      option (google.api.http) = {
        post: "/api//templates/delete.json"
        body: "body"
      };
    }
    // Get the information for an existing template
    rpc PostTemplatesInfo(PostTemplatesInfoRequest) returns (Template_detailed) {
      option (google.api.http) = {
        post: "/api//templates/info.json"
        body: "body"
      };
    }
    // Return a list of all the templates available to this user
    rpc PostTemplatesList(PostTemplatesListRequest) returns (Templates_list-Response) {
      option (google.api.http) = {
        post: "/api//templates/list.json"
        body: "body"
      };
    }
    // Publish the content for the template. Any new messages sent using this template will start using the content that was previously in draft.
    rpc PostTemplatesPublish(PostTemplatesPublishRequest) returns (Template_detailed) {
      option (google.api.http) = {
        post: "/api//templates/publish.json"
        body: "body"
      };
    }
    // Inject content and optionally merge fields into a template, returning the HTML that results
    rpc PostTemplatesRender(PostTemplatesRenderRequest) returns (Templates_render-Response) {
      option (google.api.http) = {
        post: "/api//templates/render.json"
        body: "body"
      };
    }
    // Return the recent history (hourly stats for the last 30 days) for a template
    rpc PostTemplatesTimeSeries(PostTemplatesTimeSeriesRequest) returns (Time-Series) {
      option (google.api.http) = {
        post: "/api//templates/time-series.json"
        body: "body"
      };
    }
    // Update the code for an existing template. If null is provided for any fields, the values will remain unchanged.
    rpc PostTemplatesUpdate(PostTemplatesUpdateRequest) returns (Template_detailed) {
      option (google.api.http) = {
        post: "/api//templates/update.json"
        body: "body"
      };
    }
    // Add a tracking domain to your account
    rpc PostUrlsAddTrackingDomain(PostUrlsAddTrackingDomainRequest) returns (Tracking-Domain-Status) {
      option (google.api.http) = {
        post: "/api//urls/add-tracking-domain.json"
        body: "body"
      };
    }
    // Checks the CNAME settings for a tracking domain. The domain must have been added already with the add-tracking-domain call
    rpc PostUrlsCheckTrackingDomain(PostUrlsCheckTrackingDomainRequest) returns (Tracking-Domain-Status) {
      option (google.api.http) = {
        post: "/api//urls/check-tracking-domain.json"
        body: "body"
      };
    }
    // Get the 100 most clicked URLs
    rpc PostUrlsList(PostUrlsListRequest) returns (Url_infos) {
      option (google.api.http) = {
        post: "/api//urls/list.json"
        body: "body"
      };
    }
    // Return the 100 most clicked URLs that match the search query given
    rpc PostUrlsSearch(PostUrlsSearchRequest) returns (Url_infos) {
      option (google.api.http) = {
        post: "/api//urls/search.json"
        body: "body"
      };
    }
    // Return the recent history (hourly stats for the last 30 days) for a url
    rpc PostUrlsTimeSeries(PostUrlsTimeSeriesRequest) returns (Urls_time-Series-Response) {
      option (google.api.http) = {
        post: "/api//urls/time-series.json"
        body: "body"
      };
    }
    // Get the list of tracking domains set up for this account
    rpc PostUrlsTrackingDomains(PostUrlsTrackingDomainsRequest) returns (Urls_tracking-Domains-Response) {
      option (google.api.http) = {
        post: "/api//urls/tracking-domains.json"
        body: "body"
      };
    }
    // Return the information about the API-connected user
    rpc PostUsersInfo(PostUsersInfoRequest) returns (Users_info-Response) {
      option (google.api.http) = {
        post: "/api//users/info.json"
        body: "body"
      };
    }
    // Validate an API key and respond to a ping
    rpc PostUsersPing(PostUsersPingRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api//users/ping.json"
        body: "body"
      };
    }
    // Validate an API key and respond to a ping (anal JSON parser version)
    rpc PostUsersPing2(PostUsersPing2Request) returns (Users_ping2-Response) {
      option (google.api.http) = {
        post: "/api//users/ping2.json"
        body: "body"
      };
    }
    // Return the senders that have tried to use this account, both verified and unverified
    rpc PostUsersSenders(PostUsersSendersRequest) returns (Senders) {
      option (google.api.http) = {
        post: "/api//users/senders.json"
        body: "body"
      };
    }
    // Add a new webhook
    rpc PostWebhooksAdd(PostWebhooksAddRequest) returns (Webhook) {
      option (google.api.http) = {
        post: "/api//webhooks/add.json"
        body: "body"
      };
    }
    // Delete an existing webhook
    rpc PostWebhooksDelete(PostWebhooksDeleteRequest) returns (Webhook) {
      option (google.api.http) = {
        post: "/api//webhooks/delete.json"
        body: "body"
      };
    }
    // Given the ID of an existing webhook, return the data about it
    rpc PostWebhooksInfo(PostWebhooksInfoRequest) returns (Webhook) {
      option (google.api.http) = {
        post: "/api//webhooks/info.json"
        body: "body"
      };
    }
    // Get the list of all webhooks defined on the account
    rpc PostWebhooksList(PostWebhooksListRequest) returns (Webhooks_list-Response) {
      option (google.api.http) = {
        post: "/api//webhooks/list.json"
        body: "body"
      };
    }
    // Update an existing webhook
    rpc PostWebhooksUpdate(PostWebhooksUpdateRequest) returns (Webhook) {
      option (google.api.http) = {
        post: "/api//webhooks/update.json"
        body: "body"
      };
    }
    // Adds an email to your email rejection whitelist. If the address is currently on your blacklist, that blacklist entry will be removed automatically.
    rpc PostWhitelistsAdd(PostWhitelistsAddRequest) returns (Whitelists_add-Response) {
      option (google.api.http) = {
        post: "/api//whitelists/add.json"
        body: "body"
      };
    }
    // Removes an email address from the whitelist.
    rpc PostWhitelistsDelete(PostWhitelistsDeleteRequest) returns (Whitelists_delete-Response) {
      option (google.api.http) = {
        post: "/api//whitelists/delete.json"
        body: "body"
      };
    }
    // Retrieves your email rejection whitelist. You can provide an email address or search prefix to limit the results. Returns up to 1000 results.
    rpc PostWhitelistsList(PostWhitelistsListRequest) returns (Whitelists_list-Response) {
      option (google.api.http) = {
        post: "/api//whitelists/list.json"
        body: "body"
      };
    }
}

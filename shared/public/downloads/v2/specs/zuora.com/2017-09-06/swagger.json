{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "rest.zuora.com",
  "basePath": "/",
  "info": {
    "contact": {
      "email": "docs@zuora.com"
    },
    "description": "\n\n# Introduction\nWelcome to the reference for the Zuora REST API!\n\n<a href=\"http://en.wikipedia.org/wiki/REST_API\" target=\"_blank\">REST</a> is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.\n\nThe Zuora REST API provides a broad set of operations and resources that:\n\n  * Enable Web Storefront integration from your website.\n  * Support self-service subscriber sign-ups and account management.\n  * Process revenue schedules through custom revenue rule models.\n  * Enable manipulation of most objects in the Zuora Object Model.\n  \n  ## Endpoints\n  \n  The Zuora REST API is provided via the following endpoints.\n  | Tenant              | Base URL for REST Endpoints |\n  |-------------------------|-------------------------|\n  |US Production | https://rest.zuora.com   |\n  |US API Sandbox    | https://rest.apisandbox.zuora.com|\n  |US Performance Test | https://rest.pt1.zuora.com |\n  |EU Production | https://rest.eu.zuora.com |\n  |EU Sandbox | https://rest.sandbox.eu.zuora.com |\n  \n  The production endpoint provides access to your live user data. The API Sandbox tenant is a good place to test your code without affecting real-world data. To use it, you must be provisioned with an API Sandbox tenant - your Zuora representative can help you if needed.\n  \n  ## Access to the API\n  \n  If you have a Zuora tenant, you already have access to the API.\n  \n  If you don't have a Zuora tenant, go to <a href=\"\nhttps://www.zuora.com/resource/zuora-test-drive\" target=\"_blank\">https://www.zuora.com/resource/zuora-test-drive</a> and sign up for a Production Test Drive tenant. The tenant comes with seed data, such as a sample product catalog.\n\nWe recommend that you <a href=\"https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users/Create_an_API_User\" target=\"_blank\">create an API user</a> specifically for making API calls. Don't log in to the Zuora UI with this account. Logging in to the UI enables a security feature that periodically expires the account's password, which may eventually cause authentication failures with the API. Note that a user role does not have write access to Zuora REST services unless it has the API Write Access permission as described in those instructions.\n\n\n# API Changelog\nYou can find the <a href=\"https://community.zuora.com/t5/Developers/API-Changelog/gpm-p/18092\" target=\"_blank\">Changelog</a> of the API Reference in the Zuora Community.\n\n\n# Authentication\n\n## OAuth v2.0\n\nZuora recommends that you use OAuth v2.0 to authenticate to the Zuora REST API. Currently, OAuth is not available in every environment. See [Zuora Testing Environments](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Zuora_Environments) for more information.\n\nAuthenticating via OAuth requires the following steps:\n1. Create a Client\n2. Generate a Token\n\n### Create a Client\n\nYou must first [create an OAuth client](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users#Create_an_OAuth_Client_for_a_User) in the Zuora UI. To do this, you must be an administrator of your Zuora tenant. This is a one-time operation. You will be provided with a Client ID and a Client Secret. Please note this information down, as it will be required for the next step.\n\n### Generate a Token\n\nAfter creating a client, you must make a call to obtain a bearer token using the [Generate an OAuth token](https://www.zuora.com/developer/api-reference/#operation/createToken) operation. This operation requires the following parameters:\n- `client_id` - the Client ID displayed when you created the OAuth client in the previous step\n- `client_secret` - the Client Secret displayed when you created the OAuth client in the previous step\n- `grant_type` - must be set to `client_credentials`\n\n**Note**: The Client ID and Client Secret mentioned above were displayed when you created the OAuth Client in the prior step. The [Generate an OAuth token](https://www.zuora.com/developer/api-reference/#operation/createToken) response specifies how long the bearer token is valid for. Call [Generate an OAuth token](https://www.zuora.com/developer/api-reference/#operation/createToken) again to generate a new bearer token.\n\nFor every subsequent API request, a valid bearer token must be provided in an HTTP header:\n\n`Authorization: Bearer {bearer_token}`\n\n\n\n\n## Other Supported Authentication Schemes\n\nZuora continues to support the following additional legacy means of authentication:\n\n  * Use username and password. Include authentication with each request in the header: \n  \n    * `apiAccessKeyId` \n    * `apiSecretAccessKey`\n    * `entityId` or `entityName` (Only for [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity \"Multi-entity\"). See \"Entity Id and Entity Name\" below for more information.)\n\n  * Use an authorization cookie. The cookie authorizes the user to make calls to the REST API for the duration specified in  **Administration > Security Policies > Session timeout**. The cookie expiration time is reset with this duration after every call to the REST API. To obtain a cookie, call the REST  `connections` resource with the following API user information: \n  \n    *   ID    \n    *   password\n    *   entity Id or entity name (Only for [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity \"Multi-entity\"). See \"Entity Id and Entity Name\" below for more information.) \n    \n  * For CORS-enabled APIs only: Include a 'single-use' token in the request header, which re-authenticates the user with each request. See below for more details.\n\n### Entity Id and Entity Name\n\nThe `entityId` and `entityName` parameters are only used for [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity \"Zuora Multi-entity\").\n\n\nThe  `entityId` and `entityName` parameters specify the Id and the [name of the entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity/B_Introduction_to_Entity_and_Entity_Hierarchy#Name_and_Display_Name \"Introduction to Entity and Entity Hierarchy\") that you want to access, respectively. Note that you must have permission to access the entity. \n\nYou can specify either the `entityId` or `entityName` parameter in the authentication to access and view an entity.\n\n  * If both `entityId` and `entityName` are specified in the authentication, an error occurs. \n  * If neither `entityId` nor `entityName` is specified in the authentication, you will log in to the entity in which your user account is created. \n  \n\nTo get the entity Id and entity name, you can use the GET Entities REST call. For more information, see [API User Authentication](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity/A_Overview_of_Multi-entity#API_User_Authentication \"API User Authentication\").\n  \n  ### Token Authentication for CORS-Enabled APIs\n  \n  The CORS mechanism enables REST API calls to Zuora to be made directly from your customer's browser, with all credit card and security information transmitted directly to Zuora. This minimizes your PCI compliance burden, allows you to implement advanced validation on your payment forms, and  makes your payment forms look just like any other part of your website.\n  \nFor security reasons, instead of using cookies, an API request via CORS uses **tokens** for authentication.\n\nThe token method of authentication is only designed for use with requests that must originate from your customer's browser; **it should  not be considered a replacement to the existing cookie authentication** mechanism.\n\nSee [Zuora CORS REST](https://knowledgecenter.zuora.com/DC_Developers/REST_API/A_REST_basics/G_CORS_REST \"Zuora CORS REST\") for details on how CORS works and how you can begin to implement customer calls to the Zuora REST APIs. See  [HMAC Signatures](https://www.zuora.com/developer/API-Reference/#operation/POSTHMACSignature \"HMAC Signatures\") for details on the HMAC method that returns the authentication token.\n\n# Requests and Responses\n\n## Request IDs \nAs a general rule, when asked to supply a \"key\" for an account or subscription (accountKey, account-key, subscriptionKey, subscription-key), you can provide either the actual ID or  the number of the entity.\n\n## HTTP Request Body\n\nMost of the parameters and data accompanying your requests will be contained in the body of the HTTP request. \n\nThe Zuora REST API accepts JSON in the HTTP request body. No other data format (e.g., XML) is supported.\n\n### Data Type\n\n([Actions](https://www.zuora.com/developer/api-reference/#tag/Actions) and CRUD operations only) We recommend that you do not specify the decimal values with quotation marks, commas, and spaces. Use characters of `+-0-9.eE`, for example, `5`, `1.9`, `-8.469`, and `7.7e2`. Also, Zuora does not convert currencies for decimal values.\n\n## Testing a Request\n\nUse a third party client, such as [curl](https://curl.haxx.se \"curl\"), [Postman](https://www.getpostman.com \"Postman\"), or [Advanced REST Client](https://advancedrestclient.com \"Advanced REST Client\"), to test the Zuora REST API.\n\nYou can test the Zuora REST API from the Zuora API Sandbox or Production tenants. If connecting to Production, bear in mind that you are working with your live production data, not sample data or test data.\n\n## Testing with Credit Cards\n\nSooner or later it will probably be necessary to test some transactions that involve credit cards. For suggestions on how to handle this, see [Going Live With Your Payment Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/C_Managing_Payment_Gateways/B_Going_Live_Payment_Gateways#Testing_with_Credit_Cards \"C_Zuora_User_Guides/A_Billing_and_Payments/M_Payment_Gateways/C_Managing_Payment_Gateways/B_Going_Live_Payment_Gateways#Testing_with_Credit_Cards\"\n).\n\n## Concurrent Request Limits\n\nZuora enforces tenant-level concurrent request limits. See <a href=\"https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Policies/Concurrent_Request_Limits\" target=\"_blank\">Concurrent Request Limits</a> for more information.\n\n\n\n## Error Handling\n\nResponses and error codes are detailed in [Responses and errors](https://knowledgecenter.zuora.com/DC_Developers/REST_API/A_REST_basics/3_Responses_and_errors \"Responses and errors\").\n\n# Pagination\n\nWhen retrieving information (using GET methods), the optional `pageSize` query parameter sets the maximum number of rows to return in a response. The maximum is `40`; larger values are treated as `40`. If this value is empty or invalid, `pageSize` typically defaults to `10`.\n\nThe default value for the maximum number of rows retrieved can be overridden at the method level.\n\nIf more rows are available, the response will include a `nextPage` element, which contains a URL for requesting the next page.  If this value is not provided, no more rows are available. No \"previous page\" element is explicitly provided; to support backward paging, use the previous call.\n\n## Array Size\n\nFor data items that are not paginated, the REST API supports arrays of up to 300 rows.  Thus, for instance, repeated pagination can retrieve thousands of customer accounts, but within any account an array of no more than 300 rate plans is returned.\n\n# API Versions\n\nThe Zuora REST API are version controlled. Versioning ensures that Zuora REST API changes are backward compatible. Zuora uses a major and minor version nomenclature to manage changes. By specifying a version in a REST request, you can get expected responses regardless of future changes to the API.\n\n## Major Version\n\nThe major version number of the REST API appears in the REST URL. Currently, Zuora only supports the **v1** major version. For example, `POST https://rest.zuora.com/v1/subscriptions`.\n\n## Minor Version\n\nZuora uses minor versions for the REST API to control small changes. For example, a field in a REST method is deprecated and a new field is used to replace it. \n\nSome fields in the REST methods are supported as of minor versions. If a field is not noted with a minor version, this field is available for all minor versions. If a field is noted with a minor version, this field is in version control. You must specify the supported minor version in the request header to process without an error. \n\nIf a field is in version control, it is either with a minimum minor version or a maximum minor version, or both of them. You can only use this field with the minor version between the minimum and the maximum minor versions. For example, the `invoiceCollect` field in the POST Subscription method is in version control and its maximum minor version is 189.0. You can only use this field with the minor version 189.0 or earlier.\n\nIf you specify a version number in the request header that is not supported, Zuora will use the minimum minor version of the REST API. In our REST API documentation, if a field or feature requires a minor version number, we note that in the field description.\n\nYou only need to specify the version number when you use the fields require a minor version. To specify the minor version, set the `zuora-version` parameter to the minor version number in the request header for the request call. For example, the `collect` field is in 196.0 minor version. If you want to use this field for the POST Subscription method, set the  `zuora-version` parameter to `196.0` in the request header. The `zuora-version` parameter is case sensitive.\n\nFor all the REST API fields, by default, if the minor version is not specified in the request header, Zuora will use the minimum minor version of the REST API to avoid breaking your integration. \n\n### Minor Version History\n\nThe supported minor versions are not serial. This section documents the changes made to each Zuora REST API minor version.\n\nThe following table lists the supported versions and the fields that have a Zuora REST API minor version.\n\n| Fields         | Minor Version      | REST Methods    | Description |\n|:--------|:--------|:--------|:--------|\n| invoiceCollect | 189.0 and earlier  | [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_CancelSubscription \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_SuspendSubscription \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_ResumeSubscription \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account \"Create Account\")|Generates an invoice and collects a payment for a subscription. |\n| collect        | 196.0 and later    | [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_CancelSubscription \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_SuspendSubscription \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_ResumeSubscription \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account \"Create Account\")|Collects an automatic payment for a subscription. |\n| invoice | 196.0 and 207.0| [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_CancelSubscription \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_SuspendSubscription \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_ResumeSubscription \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account \"Create Account\")|Generates an invoice for a subscription. |\n| invoiceTargetDate | 196.0 and earlier  | [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview \"Preview Subscription\") |Date through which charges are calculated on the invoice, as `yyyy-mm-dd`. |\n| invoiceTargetDate | 207.0 and earlier  | [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_CancelSubscription \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_SuspendSubscription \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_ResumeSubscription \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account \"Create Account\")|Date through which charges are calculated on the invoice, as `yyyy-mm-dd`. |\n| targetDate | 207.0 and later | [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview \"Preview Subscription\") |Date through which charges are calculated on the invoice, as `yyyy-mm-dd`. |\n| targetDate | 211.0 and later | [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_CancelSubscription \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_SuspendSubscription \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_ResumeSubscription \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account \"Create Account\")|Date through which charges are calculated on the invoice, as `yyyy-mm-dd`. |\n| includeExisting DraftInvoiceItems | 196.0 and earlier| [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview \"Preview Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\") | Specifies whether to include draft invoice items in subscription previews. Specify it to be `true` (default) to include draft invoice items in the preview result. Specify it to be `false` to excludes draft invoice items in the preview result. |\n| includeExisting DraftDocItems | 207.0 and later  | [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview \"Preview Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\") | Specifies whether to include draft invoice items in subscription previews. Specify it to be `true` (default) to include draft invoice items in the preview result. Specify it to be `false` to excludes draft invoice items in the preview result. |\n| previewType | 196.0 and earlier| [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview \"Preview Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\") | The type of preview you will receive. The possible values are `InvoiceItem`(default), `ChargeMetrics`, and `InvoiceItemChargeMetrics`. |\n| previewType | 207.0 and later  | [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview \"Preview Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\") | The type of preview you will receive. The possible values are `LegalDoc`(default), `ChargeMetrics`, and `LegalDocChargeMetrics`. |\n| runBilling  | 211.0 and later  | [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_CancelSubscription \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_SuspendSubscription \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_ResumeSubscription \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account \"Create Account\")|Generates an invoice or credit memo for a subscription. **Note:** Credit memos are only available if you have the Advanced AR Settlement feature enabled. |\n| invoiceDate | 214.0 and earlier  | [Invoice and Collect](https://www.zuora.com/developer/api-reference/#operation/POST_TransactionInvoicePayment \"Invoice and Collect\") |Date that should appear on the invoice being generated, as `yyyy-mm-dd`. |\n| invoiceTargetDate | 214.0 and earlier  | [Invoice and Collect](https://www.zuora.com/developer/api-reference/#operation/POST_TransactionInvoicePayment \"Invoice and Collect\") |Date through which to calculate charges on this account if an invoice is generated, as `yyyy-mm-dd`. |\n| documentDate | 215.0 and later | [Invoice and Collect](https://www.zuora.com/developer/api-reference/#operation/POST_TransactionInvoicePayment \"Invoice and Collect\") |Date that should appear on the invoice and credit memo being generated, as `yyyy-mm-dd`. |\n| targetDate | 215.0 and later | [Invoice and Collect](https://www.zuora.com/developer/api-reference/#operation/POST_TransactionInvoicePayment \"Invoice and Collect\") |Date through which to calculate charges on this account if an invoice or a credit memo is generated, as `yyyy-mm-dd`. |\n\n#### Version 207.0 and Later\n\nThe response structure of the [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview \"Preview Subscription\") and [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription \"Update Subscription\") methods are changed. The following invoice related response fields are moved to the invoice container:\n\n  * amount\n  * amountWithoutTax\n  * taxAmount\n  * invoiceItems\n  * targetDate\n  * chargeMetrics\n\n# Zuora Object Model\n\nThe following diagram presents a high-level view of the key Zuora objects. Click the image to open it in a new tab to resize it.\n\n<a href=\"https://www.zuora.com/wp-content/uploads/2017/01/ZuoraERD.jpeg\" target=\"_blank\"><img src=\"https://www.zuora.com/wp-content/uploads/2017/01/ZuoraERD.jpeg\" alt=\"Zuora Object Model Diagram\"></a>\n\nYou can use the [Describe object](https://www.zuora.com/developer/api-reference/#operation/GET_Describe) operation to list the fields of each Zuora object that is available in your tenant. When you call the operation, you must specify the API name of the Zuora object.\n\nThe following table provides the API name of each Zuora object:\n\n| Object                                        | API Name                                   |\n|-----------------------------------------------|--------------------------------------------|\n| Account                                       | `Account`                                  |\n| Accounting Code                               | `AccountingCode`                           |\n| Accounting Period                             | `AccountingPeriod`                         |\n| Amendment                                     | `Amendment`                                |\n| Application Group                             | `ApplicationGroup`                         |\n| Contact                                       | `Contact`                                  |\n| Contact Snapshot                              | `ContactSnapshot`                          |\n| Billing Run                                   | `BillingRun`                               |\n| Credit Balance Adjustment                     | `CreditBalanceAdjustment`                  |\n| Credit Memo                                   | `CreditMemo`                               |\n| Credit Memo Application                       | `CreditMemoApplication`                    |\n| Credit Memo Application Item                  | `CreditMemoApplicationItem`                |\n| Credit Memo Item                              | `CreditMemoItem`                           |\n| Credit Memo Part                              | `CreditMemoPart`                           |\n| Credit Memo Part Item                         | `CreditMemoPartItem`                       |\n| Credit Taxation Item                          | `CreditTaxationItem`                       |\n| Custom Exchange Rate                          | `FXCustomRate`                             |\n| Debit Memo                                    | `DebitMemo`                                |\n| Debit Memo Item                               | `DebitMemoItem`                            |\n| Debit Taxation Item                           | `DebitTaxationItem`                        |\n| Payment Method                                | `PaymentMethod`                            |\n| Entity                                        | `Tenant`                                   |\n| Gateway Reconciliation Event                  | `PaymentGatewayReconciliationEventLog`     |\n| Gateway Reconciliation Job                    | `PaymentReconciliationJob`                 |\n| Gateway Reconciliation Log                    | `PaymentReconciliationLog`                 |\n| Invoice                                       | `Invoice`                                  |\n| Invoice Adjustment                            | `InvoiceAdjustment`                        |\n| Invoice Item                                  | `InvoiceItem`                              |\n| Invoice Item Adjustment                       | `InvoiceItemAdjustment`                    |\n| Invoice Payment                               | `InvoicePayment`                           |\n| Journal Entry                                 | `JournalEntry`                             |\n| Journal Entry Item                            | `JournalEntryItem`                         |\n| Journal Run                                   | `JournalRun`                               |\n| Payment                                       | `Payment`                                  |\n| Payment Application                           | `PaymentApplication`                       |\n| Payment Application Item                      | `PaymentApplicationItem`                   |\n| Payment Method Snapshot                       | `PaymentMethodSnapshot`                    |\n| Payment Method Transaction Log                | `PaymentMethodTransactionLog`              |\n| Payment Method Update                         | `UpdaterDetail`                            |\n| Payment Part                                  | `PaymentPart`                              |\n| Payment Part Item                             | `PaymentPartItem`                          |\n| Payment Transaction Log                       | `PaymentTransactionLog`                    |\n| Processed Usage                               | `ProcessedUsage`                           |\n| Product                                       | `Product`                                  |\n| Product Rate Plan                             | `ProductRatePlan`                          |\n| Product Rate Plan Charge                      | `ProductRatePlanCharge`                    |\n| Product Rate Plan Charge Tier                 | `ProductRatePlanChargeTier`                |\n| Rate Plan                                     | `RatePlan`                                 |\n| Rate Plan Charge                              | `RatePlanCharge`                           |\n| Rate Plan Charge Tier                         | `RatePlanChargeTier`                       |\n| Refund                                        | `Refund`                                   |\n| Refund Application                            | `RefundApplication`                        |\n| Refund Application Item                       | `RefundApplicationItem`                    |\n| Refund Invoice Payment                        | `RefundInvoicePayment`                     |\n| Refund Part                                   | `RefundPart`                               |\n| Refund Part Item                              | `RefundPartItem`                           |\n| Refund Transaction Log                        | `RefundTransactionLog`                     |\n| Revenue Charge Summary                        | `RevenueChargeSummary`                     |\n| Revenue Charge Summary Item                   | `RevenueChargeSummaryItem`                 |\n| Revenue Event                                 | `RevenueEvent`                             |\n| Revenue Event Credit Memo Item                | `RevenueEventCreditMemoItem`               |\n| Revenue Event Debit Memo Item                 | `RevenueEventDebitMemoItem`                |\n| Revenue Event Invoice Item                    | `RevenueEventInvoiceItem`                  |\n| Revenue Event Invoice Item Adjustment         | `RevenueEventInvoiceItemAdjustment`        |\n| Revenue Event Item                            | `RevenueEventItem`                         |\n| Revenue Event Item Credit Memo Item           | `RevenueEventItemCreditMemoItem`           |\n| Revenue Event Item Debit Memo Item            | `RevenueEventItemDebitMemoItem`            |\n| Revenue Event Item Invoice Item               | `RevenueEventItemInvoiceItem`              |\n| Revenue Event Item Invoice Item Adjustment    | `RevenueEventItemInvoiceItemAdjustment`    |\n| Revenue Event Type                            | `RevenueEventType`                         |\n| Revenue Schedule                              | `RevenueSchedule`                          |\n| Revenue Schedule Credit Memo Item             | `RevenueScheduleCreditMemoItem`            |\n| Revenue Schedule Debit Memo Item              | `RevenueScheduleDebitMemoItem`             |\n| Revenue Schedule Invoice Item                 | `RevenueScheduleInvoiceItem`               |\n| Revenue Schedule Invoice Item Adjustment      | `RevenueScheduleInvoiceItemAdjustment`     |\n| Revenue Schedule Item                         | `RevenueScheduleItem`                      |\n| Revenue Schedule Item Credit Memo Item        | `RevenueScheduleItemCreditMemoItem`        |\n| Revenue Schedule Item Debit Memo Item         | `RevenueScheduleItemDebitMemoItem`         |\n| Revenue Schedule Item Invoice Item            | `RevenueScheduleItemInvoiceItem`           |\n| Revenue Schedule Item Invoice Item Adjustment | `RevenueScheduleItemInvoiceItemAdjustment` |\n| Subscription                                  | `Subscription`                             |\n| Taxation Item                                 | `TaxationItem`                             |\n| Updater Batch                                 | `UpdaterBatch`                             |\n| Usage                                         | `Usage`                                    |\n",
    "title": "Zuora API Reference",
    "version": "2017-09-06",
    "x-apisguru-categories": [
      "financial"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_668119405658697728_-9vZg-QM_400x400.jpg"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://www.zuora.com/wp-content/themes/zuora/yaml/swagger.yaml?v-7.0",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "zuora.com"
  },
  "consumes": [
    "application/json; charset=utf-8"
  ],
  "produces": [
    "application/json; charset=utf-8"
  ],
  "parameters": {
    "GLOBAL_HEADER_entityId": {
      "description": "The Id of the entity that you want to access. Note that you must have permission to access the entity. For more information, see [REST Authentication](https://www.zuora.com/developer/api-reference/#section/Authentication/Entity-Id-and-Entity-Name).",
      "in": "header",
      "name": "entityId",
      "required": false,
      "type": "string"
    },
    "GLOBAL_HEADER_entityName": {
      "description": "The [name of the entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity/B_Introduction_to_Entity_and_Entity_Hierarchy#Name_and_Display_Name) that you want to access. Note that you must have permission to access the entity. For more information, see [REST Authentication](https://www.zuora.com/developer/api-reference/#section/Authentication/Entity-Id-and-Entity-Name).",
      "in": "header",
      "name": "entityName",
      "required": false,
      "type": "string"
    },
    "GLOBAL_REQUEST_pageSize": {
      "default": 20,
      "description": "Number of rows returned per page.\n",
      "in": "query",
      "maximum": 40,
      "name": "pageSize",
      "required": false,
      "type": "integer"
    },
    "GLOBAL_REQUEST_pageSize_catalog": {
      "default": 10,
      "description": "Number of rows returned per page.\n",
      "in": "query",
      "maximum": 40,
      "name": "pageSize",
      "required": false,
      "type": "integer"
    },
    "GLOBAL_REQUEST_pageSize_entityConnection": {
      "default": 30,
      "description": "Number of rows returned per page.\n",
      "in": "query",
      "maximum": 300,
      "name": "pageSize",
      "required": false,
      "type": "integer"
    },
    "GLOBAL_REQUEST_pageSize_finance_accounting": {
      "default": 300,
      "description": "Number of rows returned per page.\n",
      "in": "query",
      "maximum": 300,
      "name": "pageSize",
      "required": false,
      "type": "integer"
    },
    "GLOBAL_REQUEST_pageSize_finance_revenue": {
      "default": 8,
      "description": "Number of rows returned per page.\n",
      "in": "query",
      "maximum": 300,
      "name": "pageSize",
      "required": false,
      "type": "integer"
    }
  },
  "tags": [
    {
      "description": "Actions are operations that are batch in nature. For example, the \"create\", \"update\", \"delete\", and other operations allow changes to up-to 50 objects at a time. The \"query\" operation will return up-to 2000 result records back at a time, before requiring additional pages of data to be returned via a subsequent \"queryMore\" operation.",
      "name": "Actions"
    },
    {
      "description": "",
      "name": "Accounting Codes"
    },
    {
      "description": "",
      "name": "Accounting Periods"
    },
    {
      "description": "",
      "name": "Accounts"
    },
    {
      "description": "",
      "name": "Amendments"
    },
    {
      "description": "",
      "name": "Attachments"
    },
    {
      "description": "Use the Bill Run call to create ad hoc bill runs and Post, Cancel, Query, and Delete bill runs.\n",
      "name": "Bill Run"
    },
    {
      "description": "",
      "name": "Billing Preview Run"
    },
    {
      "description": "",
      "name": "Catalog"
    },
    {
      "description": "",
      "name": "Charge Revenue Summaries"
    },
    {
      "description": "",
      "name": "Communication Profiles"
    },
    {
      "description": "",
      "name": "Connections"
    },
    {
      "description": "",
      "name": "Contacts"
    },
    {
      "description": "",
      "name": "Credit Balance Adjustments"
    },
    {
      "description": "",
      "name": "Credit Memos"
    },
    {
      "description": "",
      "name": "Custom Exchange Rates"
    },
    {
      "description": "",
      "name": "Debit Memos"
    },
    {
      "description": "",
      "name": "Describe"
    },
    {
      "description": "",
      "name": "Entities"
    },
    {
      "description": "",
      "name": "Entity Connections"
    },
    {
      "description": "",
      "name": "Exports"
    },
    {
      "description": "",
      "name": "Features"
    },
    {
      "description": "",
      "name": "Get Files"
    },
    {
      "description": "",
      "name": "HMAC Signatures"
    },
    {
      "description": "",
      "name": "Hosted Pages"
    },
    {
      "description": "",
      "name": "Imports"
    },
    {
      "description": "",
      "name": "Invoice Adjustments"
    },
    {
      "description": "",
      "name": "Invoice Item Adjustments"
    },
    {
      "description": "",
      "name": "Invoice Items"
    },
    {
      "description": "",
      "name": "Invoice Payments"
    },
    {
      "description": "",
      "name": "Invoice Split Items"
    },
    {
      "description": "",
      "name": "Invoice Splits"
    },
    {
      "description": "",
      "name": "Invoices"
    },
    {
      "description": "",
      "name": "Journal Runs"
    },
    {
      "description": "",
      "name": "Mass Updater"
    },
    {
      "description": "",
      "name": "Notification History"
    },
    {
      "description": "",
      "name": "OAuth"
    },
    {
      "description": "",
      "name": "Operations"
    },
    {
      "description": "",
      "name": "Orders"
    },
    {
      "description": "",
      "name": "Payment Gateways"
    },
    {
      "description": "",
      "name": "Payment Method Snapshots"
    },
    {
      "description": "",
      "name": "Payment Method Transaction Logs"
    },
    {
      "description": "",
      "name": "Payment Methods"
    },
    {
      "description": "",
      "name": "Payment Transaction Logs"
    },
    {
      "description": "",
      "name": "Payments"
    },
    {
      "description": "",
      "name": "Product Features"
    },
    {
      "description": "",
      "name": "Product Rate Plan Charge Tiers"
    },
    {
      "description": "",
      "name": "Product Rate Plan Charges"
    },
    {
      "description": "",
      "name": "Product Rate Plans"
    },
    {
      "description": "",
      "name": "Products"
    },
    {
      "description": "",
      "name": "Quotes Document"
    },
    {
      "description": "",
      "name": "Rate Plan Charge Tiers"
    },
    {
      "description": "",
      "name": "Rate Plan Charges"
    },
    {
      "description": "",
      "name": "Rate Plans"
    },
    {
      "description": "",
      "name": "Refund Invoice Payments"
    },
    {
      "description": "",
      "name": "Refund Transaction Logs"
    },
    {
      "description": "",
      "name": "Refunds"
    },
    {
      "description": "",
      "name": "Revenue Events"
    },
    {
      "description": "",
      "name": "Revenue Items"
    },
    {
      "description": "",
      "name": "Revenue Rules"
    },
    {
      "description": "",
      "name": "Revenue Schedules"
    },
    {
      "description": "",
      "name": "RSA Signatures"
    },
    {
      "description": "",
      "name": "Settings"
    },
    {
      "description": "",
      "name": "Subscription Product Features"
    },
    {
      "description": "",
      "name": "Subscriptions"
    },
    {
      "description": "",
      "name": "Summary Journal Entries"
    },
    {
      "description": "",
      "name": "Taxation Items"
    },
    {
      "description": "",
      "name": "Transactions"
    },
    {
      "description": "",
      "name": "Unit Of Measure"
    },
    {
      "description": "",
      "name": "Usage"
    },
    {
      "description": "",
      "name": "Users"
    }
  ],
  "paths": {
    "/oauth/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Generates a bearer token that enables an OAuth client to authenticate with the Zuora REST API. The OAuth client must have been created using the Zuora UI. See [Authentication](https://www.zuora.com/developer/api-reference/#section/Authentication) for more information.\n\n**Note:** When using this operation, do not set any authentication headers such as `Authorization`, `apiAccessKeyId`, or `apiSecretAccessKey`.\n",
        "operationId": "createToken",
        "parameters": [
          {
            "description": "The Client ID of the OAuth client.\n",
            "in": "formData",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Client Secret that was displayed when the OAuth client was created.\n",
            "in": "formData",
            "name": "client_secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "The OAuth grant type that will be used to generate the token. The value of this parameter must be `client_credentials`.\n",
            "enum": [
              "client_credentials"
            ],
            "in": "formData",
            "name": "grant_type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "access_token": "c652cbc0ea384b9f81856a93a2a74538",
                "expires_in": 3599,
                "jti": "c652cbc0ea384b9f81856a93a2a74539",
                "scope": "user.7c4d5433dc234c369a01b9719ecd059f entity.1a2b7a37-3e7d-4cb3-b0e2-883de9e766cc entity.c92ed977-510c-4c48-9b51-8d5e848671e9 service.echo.read tenant.19",
                "token_type": "bearer"
              }
            },
            "schema": {
              "$ref": "#/definitions/tokenResponse"
            }
          }
        },
        "summary": "Generate an OAuth token",
        "tags": [
          "OAuth"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"client_id=b64e42ba-7e1a-4bc6-9146-5e1b420306b5\" --data-urlencode \"client_secret=cWnRyz4svXEH81nUI+uV\" -d \"grant_type=client_credentials\" \"https://rest.zuora.com/oauth/token\"\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//oauth/token');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//oauth/token\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/oauth/token\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//oauth/token\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//oauth/token\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/payment-methods/{payment-method-id}/verify": {
      "put": {
        "description": "Sends an authorization request to the corresponding payment gateway to verify the payment method, even though no changes are made for the payment method. Supported payment methods are Credit Cards and Paypal.\n\nIf a payment method is created by a Hosted Payment Method page, it cannot be verified through this operation.\n",
        "operationId": "PUT_VerifyPaymentMethods",
        "parameters": [
          {
            "description": "The ID of the payment method to be verified.\n",
            "in": "path",
            "name": "payment-method-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTVerifyPaymentMethodType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "paymentMethodId": "402890765d9ce329015da18034ee0057",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTVerifyPaymentMethodResponseType"
            }
          }
        },
        "summary": "Verify payment method",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"gatewayOptions\": {\n        \"Comments\": \"test\", \n        \"IPAddress\": \"192.168.1.1\"\n    }, \n    \"paymentGatewayName\": \"Adyen\", \n    \"securityCode\": \"737\"\n}' \"https://rest.zuora.com//payment-methods/{payment-method-id}/verify\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//payment-methods/{payment-method-id}/verify');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"gatewayOptions\": {\n        \"Comments\": \"test\", \n        \"IPAddress\": \"192.168.1.1\"\n    }, \n    \"paymentGatewayName\": \"Adyen\", \n    \"securityCode\": \"737\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"gatewayOptions\\\": {\\n        \\\"Comments\\\": \\\"test\\\", \\n        \\\"IPAddress\\\": \\\"192.168.1.1\\\"\\n    }, \\n    \\\"paymentGatewayName\\\": \\\"Adyen\\\", \\n    \\\"securityCode\\\": \\\"737\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//payment-methods/{payment-method-id}/verify\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"gatewayOptions\\\": {\\n        \\\"Comments\\\": \\\"test\\\", \\n        \\\"IPAddress\\\": \\\"192.168.1.1\\\"\\n    }, \\n    \\\"paymentGatewayName\\\": \\\"Adyen\\\", \\n    \\\"securityCode\\\": \\\"737\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/payment-methods/{payment-method-id}/verify\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//payment-methods/{payment-method-id}/verify\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"gatewayOptions\\\": {\\n        \\\"Comments\\\": \\\"test\\\", \\n        \\\"IPAddress\\\": \\\"192.168.1.1\\\"\\n    }, \\n    \\\"paymentGatewayName\\\": \\\"Adyen\\\", \\n    \\\"securityCode\\\": \\\"737\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//payment-methods/{payment-method-id}/verify\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"gatewayOptions\\\": {\\n        \\\"Comments\\\": \\\"test\\\", \\n        \\\"IPAddress\\\": \\\"192.168.1.1\\\"\\n    }, \\n    \\\"paymentGatewayName\\\": \\\"Adyen\\\", \\n    \\\"securityCode\\\": \\\"737\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-codes": {
      "get": {
        "description": "This reference describes how to query all accounting codes in your chart of accounts through the REST API.",
        "operationId": "GET_AllAccountingCodes",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_accounting"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountingCodes": [
                  {
                    "category": "Assets",
                    "createdBy": "e20b074746ec48f40147140f51e30a1a",
                    "createdOn": "2014-07-29 02:20:20",
                    "id": "e20b0747478025a10147816ba1c20097",
                    "name": "Accounts Receivable",
                    "status": "Active",
                    "type": "AccountsReceivable",
                    "updatedBy": "e20b074746ec48f40147140f51e30a1a",
                    "updatedOn": "2014-07-29 02:20:20"
                  },
                  {
                    "category": "Revenue",
                    "createdBy": "e20b074746ec48f40147140f51e30a1a",
                    "createdOn": "2014-07-29 02:20:20",
                    "id": "e20b0747478025a10147816ba21900a0",
                    "name": "Discounts",
                    "status": "Inactive",
                    "type": "SalesDiscounts",
                    "updatedBy": "e20b074746ec48f40147140f51e30a1a",
                    "updatedOn": "2014-09-27 22:11:07"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAccountingCodesType"
            }
          }
        },
        "summary": "Get all accounting codes",
        "tags": [
          "Accounting Codes"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/accounting-codes\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-codes');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-codes\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/accounting-codes\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-codes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-codes\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "This reference describes how to create a new accounting code through the REST API. \nThe accounting code will be active as soon as it has been created.\n\n## Prerequisites\n  If you have Zuora Finance enabled on your tenant, you must have the  Configure Accounting Codes permission. \n",
        "operationId": "POST_AccountingCode",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTAccountingCodeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "8a8081ae547aac1e01547efb61f20140",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTAccountingCodeResponseType"
            }
          }
        },
        "summary": "Create accounting code",
        "tags": [
          "Accounting Codes"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}' \"https://rest.zuora.com//v1/accounting-codes\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-codes');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"name\\\": \\\"CASH\\\", \\n    \\\"type\\\": \\\"Cash\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-codes\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"name\\\": \\\"CASH\\\", \\n    \\\"type\\\": \\\"Cash\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/accounting-codes\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-codes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"name\\\": \\\"CASH\\\", \\n    \\\"type\\\": \\\"Cash\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-codes\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"name\\\": \\\"CASH\\\", \\n    \\\"type\\\": \\\"Cash\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-codes/{ac-id}": {
      "delete": {
        "description": "This reference describes how to delete an accounting code through the REST API.\n## Prerequisites\nIf you have Zuora Finance enabled on your tenant, then you must have the Delete Unused Accounting Code permission.\n## Limitations\nYou can only delete accounting codes that have never been associated with any transactions. An accounting code must be deactivated before you can delete it.\n",
        "operationId": "DELETE_AccountingCode",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting code you want to delete.",
            "in": "path",
            "name": "ac-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete accounting code",
        "tags": [
          "Accounting Codes"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/accounting-codes/{ac-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-codes/{ac-id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/accounting-codes/{ac-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "This reference describes how to query an accounting code through the REST API.",
        "operationId": "GET_AccountingCode",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting code you want to query.",
            "in": "path",
            "name": "ac-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "category": "Assets",
                "createdBy": "e20b074746ec48f40147140f51e30a1a",
                "createdOn": "2016-05-04 01:23:07",
                "customField__c": "customValue",
                "id": "8a8081ae547aac1e01547efb61f20140",
                "name": "CASH",
                "status": "Active",
                "success": true,
                "type": "Cash",
                "updatedBy": "e20b074746ec48f40147140f51e30a1a",
                "updatedOn": "2016-05-05 20:07:38"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAccountingCodeItemType"
            }
          }
        },
        "summary": "Query an accounting code",
        "tags": [
          "Accounting Codes"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/accounting-codes/{ac-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-codes/{ac-id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/accounting-codes/{ac-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "This reference describes how to update an existing accounting code through the REST API.\n## Prerequisites\n  If you have Zuora Finance enabled on your tenant, you must have the  Manage Accounting Code permission. \n## Limitations\nYou can only update accounting codes that are not already associated with any transactions.\n",
        "operationId": "PUT_AccountingCode",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting code you want to update.",
            "in": "path",
            "name": "ac-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTAccountingCodeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Update an accounting code",
        "tags": [
          "Accounting Codes"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}' \"https://rest.zuora.com//v1/accounting-codes/{ac-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-codes/{ac-id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"name\\\": \\\"CASH\\\", \\n    \\\"type\\\": \\\"Cash\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"name\\\": \\\"CASH\\\", \\n    \\\"type\\\": \\\"Cash\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounting-codes/{ac-id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"name\\\": \\\"CASH\\\", \\n    \\\"type\\\": \\\"Cash\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"name\\\": \\\"CASH\\\", \\n    \\\"type\\\": \\\"Cash\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-codes/{ac-id}/activate": {
      "put": {
        "description": "This reference describes how to activate an accounting code through the REST API.\n\nPrerequisites\n-------------\nIf you have Zuora Finance enabled on your tenant, you must have the Manage Accounting Code permission. \n",
        "operationId": "PUT_ActivateAccountingCode",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting code you want to activate.",
            "in": "path",
            "name": "ac-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Activate accounting code",
        "tags": [
          "Accounting Codes"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/accounting-codes/{ac-id}/activate\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-codes/{ac-id}/activate');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}/activate\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounting-codes/{ac-id}/activate\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}/activate\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}/activate\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-codes/{ac-id}/deactivate": {
      "put": {
        "description": "This reference describes how to deactivate an accounting code through the REST API.\n\n## Prerequisites\nIf you have Zuora Finance enabled on your tenant, you must have the Manage Accounting Code permission.\n## Limitations\nYou can only deactivate accounting codes that are not associated with any transactions. \nYou cannot disable accounting codes of type AccountsReceivable.\n",
        "operationId": "PUT_DeactivateAccountingCode",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting code you want to deactivate.",
            "in": "path",
            "name": "ac-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Deactivate accounting code",
        "tags": [
          "Accounting Codes"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/accounting-codes/{ac-id}/deactivate\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-codes/{ac-id}/deactivate');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}/deactivate\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounting-codes/{ac-id}/deactivate\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}/deactivate\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-codes/{ac-id}/deactivate\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-periods": {
      "get": {
        "description": "Retrieves all accounting periods on your tenant.",
        "operationId": "GET_AllAccountingPeriods",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_accounting"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountingPeriods": [
                  {
                    "createdBy": "e20b074746ec48f40147140f51e30a1a",
                    "createdOn": "2016-03-16 23:17:25",
                    "endDate": "2016-03-31",
                    "fileIds": {
                      "accountsReceivableAccountAgingDetailExportFileId": "8a8081ae5374904f01538340274a13f4",
                      "accountsReceivableInvoiceAgingDetailExportFileId": "8a8081ae5374904f01538340273013f3",
                      "revenueDetailCsvFileId": "8a8081ae5374904f0153834033221418",
                      "revenueDetailExcelFileId": "8a8081ae5374904f0153834032e41417"
                    },
                    "fiscalYear": 2016,
                    "id": "8a8081ae5374904f01538338b66e1005",
                    "name": "Mar 2016",
                    "notes": "",
                    "runTrialBalanceErrorMessage": "Error creating the trial balance: exchange rate from USD to GBP on 08/03/2015 is not available.  Please import the rate and run trial balance again.",
                    "runTrialBalanceStart": "2016-03-16 23:25:22",
                    "runTrialBalanceStatus": "Error",
                    "startDate": "2016-03-01",
                    "status": "Open",
                    "updatedBy": "e20b074746ec48f40147140f51e30a1a",
                    "updatedOn": "2016-03-16 23:25:22"
                  },
                  {
                    "createdBy": "e20b074746ec48f40147140f51e30a1a",
                    "createdOn": "2016-03-16 23:17:50",
                    "endDate": "2016-04-30",
                    "fileIds": {
                      "accountsReceivableAccountAgingDetailExportFileId": "8a8081ae5374904f0153833e9a7a1364",
                      "accountsReceivableInvoiceAgingDetailExportFileId": "8a8081ae5374904f0153833e9a651363",
                      "revenueDetailCsvFileId": "8a8081ae5374904f0153833ea2d613af",
                      "revenueDetailExcelFileId": "8a8081ae5374904f0153833ea2c813ae"
                    },
                    "fiscalYear": 2016,
                    "id": "8a8081ae5374904f0153833918af1007",
                    "name": "Apr 2016",
                    "notes": "",
                    "runTrialBalanceStart": "2016-03-16 23:23:40",
                    "runTrialBalanceStatus": "Error",
                    "startDate": "2016-04-01",
                    "status": "Open",
                    "updatedBy": "e20b074746ec48f40147140f51e30a1a",
                    "updatedOn": "2016-03-16 23:23:40"
                  },
                  {
                    "createdBy": "e20b074746ec48f40147140f51e30a1a",
                    "createdOn": "2016-03-16 23:23:29",
                    "endDate": "2016-05-31",
                    "fileIds": {
                      "revenueDetailCsvFileId": "8a8081ae54c2eabb0154c307e2920034",
                      "revenueDetailExcelFileId": "8a8081ae54c2eabb0154c307e27e0033"
                    },
                    "fiscalYear": 2016,
                    "id": "8a8081ae5374904f0153833e4590132d",
                    "name": "May 2016",
                    "notes": "",
                    "runTrialBalanceStart": "2016-05-18 01:42:30",
                    "runTrialBalanceStatus": "Error",
                    "startDate": "2016-05-01",
                    "status": "Open",
                    "updatedBy": "e20b074746ec48f40147140f51e30a1a",
                    "updatedOn": "2016-05-18 01:42:30"
                  },
                  {
                    "createdBy": "402881e522cf4f9b0122cf5d82860002",
                    "createdOn": "2014-07-28 23:52:46",
                    "fileIds": {},
                    "fiscalYear": 0,
                    "id": "e20b0747478025a1014780e489a60002",
                    "name": "Open-Ended",
                    "runTrialBalanceStatus": "Pending",
                    "startDate": "2016-06-01",
                    "status": "Open",
                    "updatedBy": "e20b074746ec48f40147140f51e30a1a",
                    "updatedOn": "2016-03-16 23:23:29"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAccountingPeriodsType"
            }
          }
        },
        "summary": "Get all accounting periods",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/accounting-periods\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/accounting-periods\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "Creates an accounting period.\nPrerequisites\n-------------\n* You must have Zuora Finance enabled on your tenant.\n* You must have the Create Accounting Period user permission.\n\nLimitations\n-----------\n* When creating the first accounting period on your tenant, the start date must be equal to or earlier than the date of the earliest transaction on the tenant.\n* Start and end dates of accounting periods must be contiguous. For example, if one accounting period ends on January 31, the next period must start on February 1.\n* If you have the Revenue Recognition Package and have enabled the \"Monthly recognition over time\" revenue recognition model, the accounting period start date and end date must be on the first day and last day of the month, respectively. Note that the start and end dates do not necessarily have to be in the same month.",
        "operationId": "POST_AccountingPeriod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTAccountingPeriodType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "7b7181ae547aac1e01547efb61f20162",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTAccountingPeriodResponseType"
            }
          }
        },
        "summary": "Create accounting period",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"endDate\": \"2016-06-30\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jun 2016\", \n    \"notes\": \"optional notes here\", \n    \"startDate\": \"2016-06-01\"\n}' \"https://rest.zuora.com//v1/accounting-periods\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"endDate\": \"2016-06-30\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jun 2016\", \n    \"notes\": \"optional notes here\", \n    \"startDate\": \"2016-06-01\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"endDate\\\": \\\"2016-06-30\\\", \\n    \\\"fiscalYear\\\": 2016, \\n    \\\"name\\\": \\\"Jun 2016\\\", \\n    \\\"notes\\\": \\\"optional notes here\\\", \\n    \\\"startDate\\\": \\\"2016-06-01\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"endDate\\\": \\\"2016-06-30\\\", \\n    \\\"fiscalYear\\\": 2016, \\n    \\\"name\\\": \\\"Jun 2016\\\", \\n    \\\"notes\\\": \\\"optional notes here\\\", \\n    \\\"startDate\\\": \\\"2016-06-01\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/accounting-periods\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"endDate\\\": \\\"2016-06-30\\\", \\n    \\\"fiscalYear\\\": 2016, \\n    \\\"name\\\": \\\"Jun 2016\\\", \\n    \\\"notes\\\": \\\"optional notes here\\\", \\n    \\\"startDate\\\": \\\"2016-06-01\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"endDate\\\": \\\"2016-06-30\\\", \\n    \\\"fiscalYear\\\": 2016, \\n    \\\"name\\\": \\\"Jun 2016\\\", \\n    \\\"notes\\\": \\\"optional notes here\\\", \\n    \\\"startDate\\\": \\\"2016-06-01\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-periods/{ap-id}": {
      "delete": {
        "description": "\nDeletes an accounting period.\n\nPrerequisites\n-------------\n\n * You must have Zuora Finance enabled on your tenant.\n\n * You must have the Delete Accounting Period user permission. See [Finance Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/f_Finance_Roles).\n\n\nLimitations\n-----------\n\nThe accounting period to be deleted:\n\n* Must be the most recent accounting period\n\n* Must be an open accounting period\n\n* Must have no revenue distributed into it\n\n* Must not have any active journal entries\n\n* Must not be the open-ended accounting period\n\n* Must not be in the process of running a trial balance\n",
        "operationId": "DELETE_AccountingPeriod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting period you want to delete.",
            "in": "path",
            "name": "ap-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete accounting period",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/accounting-periods/{ap-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods/{ap-id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/accounting-periods/{ap-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "Retrieves an accounting period.\nPrerequisites\n-------------\n\nYou must have Zuora Finance enabled on your tenant.\n",
        "operationId": "GET_AccountingPeriod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting period you want to get.",
            "in": "path",
            "name": "ap-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "createdBy": "e20b074746ec48f40147140f51e30a1a",
                "createdOn": "2014-11-25 22:21:22",
                "endDate": "2014-10-31",
                "fileIds": {
                  "accountsReceivableAccountAgingDetailExportFileId": "8a8081ae5002967c015012f1230e0914",
                  "accountsReceivableInvoiceAgingDetailExportFileId": "8a8081ae5002967c015012f122f10913",
                  "arRollForwardDetailExportFileId": "8a8081ae5002967c015012f15d7b09e2",
                  "fxRealizedGainAndLossDetailExportFileId": "8a8081ae5002967c015012f151a609ba",
                  "fxUnrealizedGainAndLossDetailExportFileId": "8a8081ae5002967c015012f150b509b8",
                  "revenueDetailCsvFileId": "8a8081ae5002967c015012f129a10926",
                  "revenueDetailExcelFileId": "8a8081ae5002967c015012f129870925"
                },
                "fiscalYear": 2014,
                "id": "e20b074749d2a38b0149eac2e9550aa9",
                "name": "Oct 2014",
                "notes": "",
                "runTrialBalanceEnd": "2015-09-28 00:53:36",
                "runTrialBalanceStart": "2015-09-28 00:53:13",
                "runTrialBalanceStatus": "Completed",
                "startDate": "2014-10-01",
                "status": "Closed",
                "success": true,
                "updatedBy": "e20b074746ec48f40147140f51e30a1a",
                "updatedOn": "2015-09-28 00:53:13"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAccountingPeriodType"
            }
          }
        },
        "summary": "Get accounting period",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/accounting-periods/{ap-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods/{ap-id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/accounting-periods/{ap-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "\nUpdates an accounting period.\n\nPrerequisites\n-------------\n\n* You must have Zuora Finance enabled on your tenant.\n\n* You must have the Create Accounting Period user permission. See [Finance Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/f_Finance_Roles).\n\nLimitations\n-----------\n\n* You can update the start date of only the earliest accounting period on your tenant. You cannot update the start date of later periods.\n\n* If you update the earliest accounting period, the start date must be equal to or earlier than the date of the earliest transaction on the tenant.\n\n* Start and end dates of accounting periods must be contiguous. For example, if one accounting period ends on January 31, the next period must start on February 1.\n\n* If you have the Revenue Recognition Package and have enabled the \"Monthly recognition over time\" revenue recognition model, the accounting period start date and end date must be on the first day and last day of the month, respectively. Note that the start and end dates do not necessarily have to be in the same month.\n\n* You cannot update the start date or end date of an accounting period if:\n  * Any revenue has been distributed into the period.\n  * The period has any active journal entries.\n",
        "operationId": "PUT_UpdateAccountingPeriod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting period you want to update.",
            "in": "path",
            "name": "ap-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTAccountingPeriodType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Update accounting period",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"endDate\": \"2016-01-31\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jan 2016\", \n    \"startDate\": \"2016-01-01\"\n}' \"https://rest.zuora.com//v1/accounting-periods/{ap-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods/{ap-id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"endDate\": \"2016-01-31\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jan 2016\", \n    \"startDate\": \"2016-01-01\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"endDate\\\": \\\"2016-01-31\\\", \\n    \\\"fiscalYear\\\": 2016, \\n    \\\"name\\\": \\\"Jan 2016\\\", \\n    \\\"startDate\\\": \\\"2016-01-01\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"endDate\\\": \\\"2016-01-31\\\", \\n    \\\"fiscalYear\\\": 2016, \\n    \\\"name\\\": \\\"Jan 2016\\\", \\n    \\\"startDate\\\": \\\"2016-01-01\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounting-periods/{ap-id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"endDate\\\": \\\"2016-01-31\\\", \\n    \\\"fiscalYear\\\": 2016, \\n    \\\"name\\\": \\\"Jan 2016\\\", \\n    \\\"startDate\\\": \\\"2016-01-01\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"endDate\\\": \\\"2016-01-31\\\", \\n    \\\"fiscalYear\\\": 2016, \\n    \\\"name\\\": \\\"Jan 2016\\\", \\n    \\\"startDate\\\": \\\"2016-01-01\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-periods/{ap-id}/close": {
      "put": {
        "description": "Close an accounting period by accounting period ID.\n\nPrerequisites\n-------------\nYou must have Zuora Finance enabled on your tenant. You must have the Manage Close Process and Run Trial Balance user permissions.\n\nLimitations\n-----------\n* The accounting period cannot already be closed.\n* The accounting period cannot be in the process of running a trial balance.\n* All earlier accounting periods must be closed.\n* There must be no required action items for the accounting period. See Reconcile Transactions Before Closing an Accounting Period for more information.\n\nNotes\n-----\nWhen you close an accounting period in Zuora, a trial balance is automatically run for that period. A successful response means only that the accounting period is now closed, but does not mean that the trial balance has successfully completed.",
        "operationId": "PUT_CloseAccountingPeriod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting period you want to close.",
            "in": "path",
            "name": "ap-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Close accounting period",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/accounting-periods/{ap-id}/close\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods/{ap-id}/close');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/close\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounting-periods/{ap-id}/close\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/close\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/close\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-periods/{ap-id}/pending-close": {
      "put": {
        "description": "Sets an accounting period to pending close.\n\n\nPrerequisites\n-------------\n\n* You must have Zuora Finance enabled on your tenant.\n* You must have the Manage Close Process and Run Trial Balance user permissions.\n\n            \nLimitations \n -----------\n \n * The accounting period cannot be closed or pending close.\n \n * The accounting period cannot be in the process of running a trial balance.\n \n * All earlier accounting periods must be closed.\n \n \nNotes\n-----\nWhen you set an accounting period to pending close in Zuora, a trial balance is automatically run for that period. A response of `{ \"success\": true }`  means only that the accounting period status is now pending close, but does not mean that the trial balance has successfully completed. You can use the Get Accounting Period REST API call to view details about the outcome of the trial balance.\n",
        "operationId": "PUT_PendingCloseAccountingPeriod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting period you want to set to pending close.",
            "in": "path",
            "name": "ap-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Set accounting period to pending close",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/accounting-periods/{ap-id}/pending-close\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods/{ap-id}/pending-close');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/pending-close\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounting-periods/{ap-id}/pending-close\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/pending-close\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/pending-close\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-periods/{ap-id}/reopen": {
      "put": {
        "description": "Re-opens an accounting period.\nPrerequisites\n-------------\n* You must have Zuora Finance enabled on your tenant.\n* You must have the Manage Close Process and Run Trial Balance user permissions.\n\nLimitations\n-----------\n* The accounting period must be closed or pending close.\n* You can only re-open an accounting period that is immediately previous to an open period.",
        "operationId": "PUT_ReopenAccountingPeriod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting period that you want to re-open.",
            "in": "path",
            "name": "ap-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Re-open accounting period",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/accounting-periods/{ap-id}/reopen\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods/{ap-id}/reopen');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/reopen\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounting-periods/{ap-id}/reopen\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/reopen\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/reopen\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounting-periods/{ap-id}/run-trial-balance": {
      "put": {
        "description": "Runs the trial balance for an accounting period. \n\nPrerequisites\n-------------\n\n* You must have Zuora Finance enabled on your tenant.\n\n* You must have the Manage Close Process and Run Trial Balance user permissions. See [Finance Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/f_Finance_Roles).\n\n          \nLimitations \n-----------\n \n * The accounting period must be open.\n \n * The accounting period cannot already be in the process of running a trial balance.\n \nNotes\n-----\nThe trial balance is run asynchronously. A response of `{ \"success\": true }` means only that the trial balance has started processing, but does not mean that the trial balance has successfully completed. You can use the [Get Accounting Period](https://knowledgecenter.zuora.com/DC_Developers/REST_API/B_REST_API_reference/Accounting_Periods/Get_Accounting_Period) REST API call to view details about the outcome of the trial balance.\n",
        "operationId": "PUT_RunTrialBalance",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the accounting period for which you want to run a trial balance.",
            "in": "path",
            "name": "ap-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Run trial balance",
        "tags": [
          "Accounting Periods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/accounting-periods/{ap-id}/run-trial-balance\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounting-periods/{ap-id}/run-trial-balance');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/run-trial-balance\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounting-periods/{ap-id}/run-trial-balance\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/run-trial-balance\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounting-periods/{ap-id}/run-trial-balance\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounts": {
      "post": {
        "description": "This REST API reference describes how to create a customer account with a credit-card payment method, a bill-to contact, and an optional sold-to contact. Request and response field descriptions and sample code are provided. Use this method to optionally create a subscription, invoice for that subscription, and collect payment through the default payment method. The transaction is atomic; if any part fails for any reason, the entire transaction is rolled back.\n\nThis API call is CORS Enabled, so you can use client-side Javascript to invoke the call. \n\n## Notes\n1. The account is created in active status.  \n2. The request must provide either a **creditCard** structure or the **hpmCreditCardPaymentMethodId** field (but not both). The one provided becomes the default payment method for this account. If the credit card information is declined or can't be verified, then the account is not created.\n3. Customer accounts created with this call are automatically be set to Auto Pay.\n4. If either the **workEmail** or **personalEmail** are specified, then the account's email delivery preference is automatically set to `true`. (In that case, emails go to the **workEmail** address, if it exists, or else the **personalEmail**.) If neither field is specified, the email delivery preference is automatically set to `false`.\n\n## Defaults for customerAcceptanceDate and serviceActivationDate\nDefault values for **customerAcceptanceDate** and **serviceActivationDate** are set as follows.\n\n|        | serviceActivationDate(SA) specified          | serviceActivationDate (SA) NOT specified  |\n| ------------- |:-------------:| -----:|\n| customerAcceptanceDate (CA) specified      | SA uses value in the request call; CA uses value in the request call| CA uses value in the request call;SA uses CE as default |\n| customerAcceptanceDate (CA) NOT specified      | SA uses value in the request call; CA uses SA as default |   SA and CA use CE as default |\n",
        "operationId": "POST_Account",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The minor version of the Zuora REST API. \n\nYou only need to set this parameter if you use the following fields:\n* invoice\n* collect\n* runBilling\n* targetDate\n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTAccountType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402892c74c9193cd014c96bbe7c101f9",
                "accountNumber": "A00000004",
                "paymentMethodId": "402892c74c9193cd014c96bbe7d901fd",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTAccountResponseType"
            }
          }
        },
        "summary": "Create account",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"additionalEmailAddresses\": [\n        \"test1@test.com\", \n        \"test2@test.com\"\n    ], \n    \"autoPay\": false, \n    \"billCycleDay\": 0, \n    \"billToContact\": {\n        \"address1\": \"1051 E Hillsdale Blvd\", \n        \"city\": \"Foster City\", \n        \"country\": \"United States\", \n        \"firstName\": \"John\", \n        \"lastName\": \"Smith\", \n        \"state\": \"CA\", \n        \"workEmail\": \"john.smith@test.com\", \n        \"zipCode\": \"94404\"\n    }, \n    \"currency\": \"USD\", \n    \"hpmCreditCardPaymentMethodId\": \"2c92c0f93cf64d94013cfe2d20db61a7\", \n    \"invoiceDeliveryPrefsEmail\": true, \n    \"invoiceDeliveryPrefsPrint\": false, \n    \"name\": \"Zuora Test Account\", \n    \"notes\": \"This account is for demo purposes.\", \n    \"paymentTerm\": \"Due Upon Receipt\", \n    \"subscription\": {\n        \"autoRenew\": true, \n        \"contractEffectiveDate\": \"2016-01-01\", \n        \"initialTerm\": 12, \n        \"notes\": \"This is a trial subscription for POST account demo.\", \n        \"renewalTerm\": 12, \n        \"subscribeToRatePlans\": [\n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5d4a5156b28\"\n                    }, \n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5dbe2947851\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f94ac8307f014ae5d3d1d469e2\"\n            }, \n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f83cf64298013d027725a67b7b\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f93cf64d94013d027681560341\"\n            }\n        ], \n        \"termType\": \"TERMED\"\n    }\n}' \"https://rest.zuora.com//v1/accounts\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounts');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"additionalEmailAddresses\": [\n        \"test1@test.com\", \n        \"test2@test.com\"\n    ], \n    \"autoPay\": false, \n    \"billCycleDay\": 0, \n    \"billToContact\": {\n        \"address1\": \"1051 E Hillsdale Blvd\", \n        \"city\": \"Foster City\", \n        \"country\": \"United States\", \n        \"firstName\": \"John\", \n        \"lastName\": \"Smith\", \n        \"state\": \"CA\", \n        \"workEmail\": \"john.smith@test.com\", \n        \"zipCode\": \"94404\"\n    }, \n    \"currency\": \"USD\", \n    \"hpmCreditCardPaymentMethodId\": \"2c92c0f93cf64d94013cfe2d20db61a7\", \n    \"invoiceDeliveryPrefsEmail\": true, \n    \"invoiceDeliveryPrefsPrint\": false, \n    \"name\": \"Zuora Test Account\", \n    \"notes\": \"This account is for demo purposes.\", \n    \"paymentTerm\": \"Due Upon Receipt\", \n    \"subscription\": {\n        \"autoRenew\": true, \n        \"contractEffectiveDate\": \"2016-01-01\", \n        \"initialTerm\": 12, \n        \"notes\": \"This is a trial subscription for POST account demo.\", \n        \"renewalTerm\": 12, \n        \"subscribeToRatePlans\": [\n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5d4a5156b28\"\n                    }, \n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5dbe2947851\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f94ac8307f014ae5d3d1d469e2\"\n            }, \n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f83cf64298013d027725a67b7b\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f93cf64d94013d027681560341\"\n            }\n        ], \n        \"termType\": \"TERMED\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"additionalEmailAddresses\\\": [\\n        \\\"test1@test.com\\\", \\n        \\\"test2@test.com\\\"\\n    ], \\n    \\\"autoPay\\\": false, \\n    \\\"billCycleDay\\\": 0, \\n    \\\"billToContact\\\": {\\n        \\\"address1\\\": \\\"1051 E Hillsdale Blvd\\\", \\n        \\\"city\\\": \\\"Foster City\\\", \\n        \\\"country\\\": \\\"United States\\\", \\n        \\\"firstName\\\": \\\"John\\\", \\n        \\\"lastName\\\": \\\"Smith\\\", \\n        \\\"state\\\": \\\"CA\\\", \\n        \\\"workEmail\\\": \\\"john.smith@test.com\\\", \\n        \\\"zipCode\\\": \\\"94404\\\"\\n    }, \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"hpmCreditCardPaymentMethodId\\\": \\\"2c92c0f93cf64d94013cfe2d20db61a7\\\", \\n    \\\"invoiceDeliveryPrefsEmail\\\": true, \\n    \\\"invoiceDeliveryPrefsPrint\\\": false, \\n    \\\"name\\\": \\\"Zuora Test Account\\\", \\n    \\\"notes\\\": \\\"This account is for demo purposes.\\\", \\n    \\\"paymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"subscription\\\": {\\n        \\\"autoRenew\\\": true, \\n        \\\"contractEffectiveDate\\\": \\\"2016-01-01\\\", \\n        \\\"initialTerm\\\": 12, \\n        \\\"notes\\\": \\\"This is a trial subscription for POST account demo.\\\", \\n        \\\"renewalTerm\\\": 12, \\n        \\\"subscribeToRatePlans\\\": [\\n            {\\n                \\\"chargeOverrides\\\": [\\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f94ac8307f014ae5d4a5156b28\\\"\\n                    }, \\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f94ac8307f014ae5dbe2947851\\\"\\n                    }\\n                ], \\n                \\\"productRatePlanId\\\": \\\"2c92c0f94ac8307f014ae5d3d1d469e2\\\"\\n            }, \\n            {\\n                \\\"chargeOverrides\\\": [\\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f83cf64298013d027725a67b7b\\\"\\n                    }\\n                ], \\n                \\\"productRatePlanId\\\": \\\"2c92c0f93cf64d94013d027681560341\\\"\\n            }\\n        ], \\n        \\\"termType\\\": \\\"TERMED\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounts\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"additionalEmailAddresses\\\": [\\n        \\\"test1@test.com\\\", \\n        \\\"test2@test.com\\\"\\n    ], \\n    \\\"autoPay\\\": false, \\n    \\\"billCycleDay\\\": 0, \\n    \\\"billToContact\\\": {\\n        \\\"address1\\\": \\\"1051 E Hillsdale Blvd\\\", \\n        \\\"city\\\": \\\"Foster City\\\", \\n        \\\"country\\\": \\\"United States\\\", \\n        \\\"firstName\\\": \\\"John\\\", \\n        \\\"lastName\\\": \\\"Smith\\\", \\n        \\\"state\\\": \\\"CA\\\", \\n        \\\"workEmail\\\": \\\"john.smith@test.com\\\", \\n        \\\"zipCode\\\": \\\"94404\\\"\\n    }, \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"hpmCreditCardPaymentMethodId\\\": \\\"2c92c0f93cf64d94013cfe2d20db61a7\\\", \\n    \\\"invoiceDeliveryPrefsEmail\\\": true, \\n    \\\"invoiceDeliveryPrefsPrint\\\": false, \\n    \\\"name\\\": \\\"Zuora Test Account\\\", \\n    \\\"notes\\\": \\\"This account is for demo purposes.\\\", \\n    \\\"paymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"subscription\\\": {\\n        \\\"autoRenew\\\": true, \\n        \\\"contractEffectiveDate\\\": \\\"2016-01-01\\\", \\n        \\\"initialTerm\\\": 12, \\n        \\\"notes\\\": \\\"This is a trial subscription for POST account demo.\\\", \\n        \\\"renewalTerm\\\": 12, \\n        \\\"subscribeToRatePlans\\\": [\\n            {\\n                \\\"chargeOverrides\\\": [\\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f94ac8307f014ae5d4a5156b28\\\"\\n                    }, \\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f94ac8307f014ae5dbe2947851\\\"\\n                    }\\n                ], \\n                \\\"productRatePlanId\\\": \\\"2c92c0f94ac8307f014ae5d3d1d469e2\\\"\\n            }, \\n            {\\n                \\\"chargeOverrides\\\": [\\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f83cf64298013d027725a67b7b\\\"\\n                    }\\n                ], \\n                \\\"productRatePlanId\\\": \\\"2c92c0f93cf64d94013d027681560341\\\"\\n            }\\n        ], \\n        \\\"termType\\\": \\\"TERMED\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/accounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"additionalEmailAddresses\\\": [\\n        \\\"test1@test.com\\\", \\n        \\\"test2@test.com\\\"\\n    ], \\n    \\\"autoPay\\\": false, \\n    \\\"billCycleDay\\\": 0, \\n    \\\"billToContact\\\": {\\n        \\\"address1\\\": \\\"1051 E Hillsdale Blvd\\\", \\n        \\\"city\\\": \\\"Foster City\\\", \\n        \\\"country\\\": \\\"United States\\\", \\n        \\\"firstName\\\": \\\"John\\\", \\n        \\\"lastName\\\": \\\"Smith\\\", \\n        \\\"state\\\": \\\"CA\\\", \\n        \\\"workEmail\\\": \\\"john.smith@test.com\\\", \\n        \\\"zipCode\\\": \\\"94404\\\"\\n    }, \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"hpmCreditCardPaymentMethodId\\\": \\\"2c92c0f93cf64d94013cfe2d20db61a7\\\", \\n    \\\"invoiceDeliveryPrefsEmail\\\": true, \\n    \\\"invoiceDeliveryPrefsPrint\\\": false, \\n    \\\"name\\\": \\\"Zuora Test Account\\\", \\n    \\\"notes\\\": \\\"This account is for demo purposes.\\\", \\n    \\\"paymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"subscription\\\": {\\n        \\\"autoRenew\\\": true, \\n        \\\"contractEffectiveDate\\\": \\\"2016-01-01\\\", \\n        \\\"initialTerm\\\": 12, \\n        \\\"notes\\\": \\\"This is a trial subscription for POST account demo.\\\", \\n        \\\"renewalTerm\\\": 12, \\n        \\\"subscribeToRatePlans\\\": [\\n            {\\n                \\\"chargeOverrides\\\": [\\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f94ac8307f014ae5d4a5156b28\\\"\\n                    }, \\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f94ac8307f014ae5dbe2947851\\\"\\n                    }\\n                ], \\n                \\\"productRatePlanId\\\": \\\"2c92c0f94ac8307f014ae5d3d1d469e2\\\"\\n            }, \\n            {\\n                \\\"chargeOverrides\\\": [\\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f83cf64298013d027725a67b7b\\\"\\n                    }\\n                ], \\n                \\\"productRatePlanId\\\": \\\"2c92c0f93cf64d94013d027681560341\\\"\\n            }\\n        ], \\n        \\\"termType\\\": \\\"TERMED\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounts\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"additionalEmailAddresses\\\": [\\n        \\\"test1@test.com\\\", \\n        \\\"test2@test.com\\\"\\n    ], \\n    \\\"autoPay\\\": false, \\n    \\\"billCycleDay\\\": 0, \\n    \\\"billToContact\\\": {\\n        \\\"address1\\\": \\\"1051 E Hillsdale Blvd\\\", \\n        \\\"city\\\": \\\"Foster City\\\", \\n        \\\"country\\\": \\\"United States\\\", \\n        \\\"firstName\\\": \\\"John\\\", \\n        \\\"lastName\\\": \\\"Smith\\\", \\n        \\\"state\\\": \\\"CA\\\", \\n        \\\"workEmail\\\": \\\"john.smith@test.com\\\", \\n        \\\"zipCode\\\": \\\"94404\\\"\\n    }, \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"hpmCreditCardPaymentMethodId\\\": \\\"2c92c0f93cf64d94013cfe2d20db61a7\\\", \\n    \\\"invoiceDeliveryPrefsEmail\\\": true, \\n    \\\"invoiceDeliveryPrefsPrint\\\": false, \\n    \\\"name\\\": \\\"Zuora Test Account\\\", \\n    \\\"notes\\\": \\\"This account is for demo purposes.\\\", \\n    \\\"paymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"subscription\\\": {\\n        \\\"autoRenew\\\": true, \\n        \\\"contractEffectiveDate\\\": \\\"2016-01-01\\\", \\n        \\\"initialTerm\\\": 12, \\n        \\\"notes\\\": \\\"This is a trial subscription for POST account demo.\\\", \\n        \\\"renewalTerm\\\": 12, \\n        \\\"subscribeToRatePlans\\\": [\\n            {\\n                \\\"chargeOverrides\\\": [\\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f94ac8307f014ae5d4a5156b28\\\"\\n                    }, \\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f94ac8307f014ae5dbe2947851\\\"\\n                    }\\n                ], \\n                \\\"productRatePlanId\\\": \\\"2c92c0f94ac8307f014ae5d3d1d469e2\\\"\\n            }, \\n            {\\n                \\\"chargeOverrides\\\": [\\n                    {\\n                        \\\"price\\\": 1000, \\n                        \\\"productRatePlanChargeId\\\": \\\"2c92c0f83cf64298013d027725a67b7b\\\"\\n                    }\\n                ], \\n                \\\"productRatePlanId\\\": \\\"2c92c0f93cf64d94013d027681560341\\\"\\n            }\\n        ], \\n        \\\"termType\\\": \\\"TERMED\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounts/{account-key}": {
      "get": {
        "description": "This REST API reference describes how to retrieve basic information about a customer account.\n\nThis REST call is a quick retrieval that doesn't include the account's subscriptions, invoices, payments, or usage details. Use Get account summary to get more detailed information about an account.\n",
        "operationId": "GET_Account",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Account number or account ID.",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "basicInfo": {
                  "accountNumber": "A00000001",
                  "batch": "Batch1",
                  "communicationProfileId": "303d186840e611df817c002185d714e1",
                  "crmId": "",
                  "id": "402892c74c9193cd014c91d35b0a0132",
                  "name": "Test",
                  "notes": "",
                  "status": "Active"
                },
                "billToContact": {
                  "address1": "",
                  "address2": "",
                  "city": "",
                  "fax": "",
                  "firstName": "Test",
                  "homePhone": "",
                  "lastName": "Test",
                  "mobilePhone": "",
                  "nickname": "",
                  "otherPhone": "",
                  "personalEmail": "",
                  "state": "",
                  "workEmail": "Test@test.com",
                  "workPhone": "",
                  "zipCode": ""
                },
                "billingAndPayment": {
                  "additionalEmailAddresses": [
                    "test1@test.com",
                    "test2@test.com"
                  ],
                  "billCycleDay": 1,
                  "currency": "USD",
                  "invoiceDeliveryPrefsEmail": true,
                  "invoiceDeliveryPrefsPrint": false,
                  "paymentGateway": "TestGateway",
                  "paymentTerm": "Net 30"
                },
                "metrics": {
                  "balance": 0,
                  "contractedMrr": -900,
                  "creditBalance": 0,
                  "totalInvoiceBalance": 0
                },
                "soldToContact": {
                  "address1": "",
                  "address2": "",
                  "city": "",
                  "fax": "",
                  "firstName": "Test",
                  "homePhone": "",
                  "lastName": "Test",
                  "mobilePhone": "",
                  "nickname": "",
                  "otherPhone": "",
                  "personalEmail": "",
                  "state": "",
                  "workEmail": "Test@test.com",
                  "workPhone": "",
                  "zipCode": ""
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAccountType"
            }
          }
        },
        "summary": "Get account",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/accounts/{account-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounts/{account-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounts/{account-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/accounts/{account-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounts/{account-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounts/{account-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "This REST API reference describes how to update a customer account by specifying the account-key.\n\n## Notes\n1. Only the fields to be changed should be specified.  Any field that's not included in the request body will not be changed.\n2. If an empty field is submitted with this call, the corresponding field in the account is emptied.\n3. Email addresses: If no email addresses are specified, no change is made to the email addresses on file or to the email delivery preference. If either the **personalEmail** or **workEmail** is specified (or both), the system updates the corresponding email address(es) on file and the email delivery preference is set to `true`. (In that case, emails go to the **workEmail** address, if it exists, or else the **personalEmail**.) On the other hand, if as a result of this call both of the email addresses for the account are empty, the email delivery preference is set to `false`.\n4. The bill-to and sold-to contacts are separate data entities; updating either one does not update the other.\n",
        "operationId": "PUT_Account",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Account number or account ID.",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTAccountType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Update account",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"additionalEmailAddresses\": [\n        \"test3@test.com\", \n        \"test4@test.com\"\n    ], \n    \"paymentGateway\": \"TestGateway\"\n}' \"https://rest.zuora.com//v1/accounts/{account-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounts/{account-key}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"additionalEmailAddresses\": [\n        \"test3@test.com\", \n        \"test4@test.com\"\n    ], \n    \"paymentGateway\": \"TestGateway\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"additionalEmailAddresses\\\": [\\n        \\\"test3@test.com\\\", \\n        \\\"test4@test.com\\\"\\n    ], \\n    \\\"paymentGateway\\\": \\\"TestGateway\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounts/{account-key}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"additionalEmailAddresses\\\": [\\n        \\\"test3@test.com\\\", \\n        \\\"test4@test.com\\\"\\n    ], \\n    \\\"paymentGateway\\\": \\\"TestGateway\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/accounts/{account-key}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounts/{account-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"additionalEmailAddresses\\\": [\\n        \\\"test3@test.com\\\", \\n        \\\"test4@test.com\\\"\\n    ], \\n    \\\"paymentGateway\\\": \\\"TestGateway\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounts/{account-key}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"additionalEmailAddresses\\\": [\\n        \\\"test3@test.com\\\", \\n        \\\"test4@test.com\\\"\\n    ], \\n    \\\"paymentGateway\\\": \\\"TestGateway\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounts/{account-key}/summary": {
      "get": {
        "description": "This REST API reference describes how to retrieve detailed information about the specified customer account.\n\nThe response includes the account information and a summary of the account’s subscriptions, invoices, payments, and usages for the last six recently updated subscriptions.\n\n## Notes \nReturns only the six most recent subscriptions based on the subscription updatedDate. Within those subscriptions, there may be many rate plans and many rate plan charges. These items are subject to the maximum limit on the array size. \n",
        "operationId": "GET_AccountSummary",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Account number or account ID.",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "basicInfo": {
                  "accountNumber": "A00001115",
                  "additionalEmailAddresses": [
                    "test1@test.com",
                    "test2@test.com"
                  ],
                  "balance": 0,
                  "billCycleDay": 1,
                  "currency": "USD",
                  "defaultPaymentMethod": {
                    "creditCardExpirationMonth": 10,
                    "creditCardExpirationYear": 2020,
                    "creditCardNumber": "************1111",
                    "creditCardType": "Visa",
                    "id": "2c92c8f83dabf9cf013daef12dd303b0",
                    "paymentMethodType": "CreditCard"
                  },
                  "id": "2c92a0f9391832b10139183e277a0042",
                  "invoiceDeliveryPrefsEmail": true,
                  "invoiceDeliveryPrefsPrint": false,
                  "lastInvoiceDate": "2013-02-11",
                  "lastPaymentAmount": 150248.1,
                  "lastPaymentDate": "2013-03-27",
                  "name": "subscribeCallYan_1",
                  "status": "Active"
                },
                "billToContact": {
                  "address1": "1400 Bridge Pkwy",
                  "address2": "",
                  "city": "San Jose",
                  "country": "United States",
                  "county": "",
                  "fax": "",
                  "firstName": "Cheng",
                  "id": "2c92a0f9391832b10139183e27940043",
                  "lastName": "Zou",
                  "state": "California",
                  "taxRegion": "",
                  "workEmail": "work_email@zbcloud.com",
                  "workPhone": "5555551212",
                  "zipCode": "95135"
                },
                "invoices": [
                  {
                    "amount": 139722.1,
                    "balance": 0,
                    "dueDate": "2013-02-11",
                    "id": "2c92a0953a3fa95d013a407c10a60100",
                    "invoiceDate": "2013-02-11",
                    "invoiceNumber": "INV00000323",
                    "status": "Posted"
                  },
                  {
                    "amount": 10521,
                    "balance": 0,
                    "dueDate": "2012-08-11",
                    "id": "2c92a09739190dc60139194bcf1b0098",
                    "invoiceDate": "2012-08-11",
                    "invoiceNumber": "INV00000160",
                    "status": "Posted"
                  },
                  {
                    "amount": 10,
                    "balance": 0,
                    "dueDate": "2012-08-11",
                    "id": "2c92a09539190dbe0139190f42780012",
                    "invoiceDate": "2012-08-11",
                    "invoiceNumber": "INV00000159",
                    "status": "Posted"
                  }
                ],
                "payments": [
                  {
                    "effectiveDate": "2013-03-27",
                    "id": "2c92c8f83dabf9cf013daf3bfa0305a6",
                    "paidInvoices": [
                      {
                        "appliedPaymentAmount": 5,
                        "invoiceId": "2c92a09539190dbe0139190f42780012",
                        "invoiceNumber": "INV00000159"
                      },
                      {
                        "appliedPaymentAmount": 139722.1,
                        "invoiceId": "2c92a0953a3fa95d013a407c10a60100",
                        "invoiceNumber": "INV00000323"
                      },
                      {
                        "appliedPaymentAmount": 10521,
                        "invoiceId": "2c92a09739190dc60139194bcf1b0098",
                        "invoiceNumber": "INV00000160"
                      }
                    ],
                    "paymentNumber": "P-00000075",
                    "paymentType": "Electronic",
                    "status": "Processed"
                  },
                  {
                    "effectiveDate": "2012-08-11",
                    "id": "2c92a0f9391832b101391922ad5f049d",
                    "paidInvoices": [
                      {
                        "appliedPaymentAmount": 5,
                        "invoiceId": "2c92a09539190dbe0139190f42780012",
                        "invoiceNumber": "INV00000159"
                      }
                    ],
                    "paymentNumber": "P-00000056",
                    "paymentType": "Electronic",
                    "status": "Processed"
                  }
                ],
                "soldToContact": {
                  "address1": "278 Bridgeton Circle",
                  "address2": "",
                  "city": "San Jose",
                  "country": "United States",
                  "county": "",
                  "fax": "",
                  "firstName": "Bill",
                  "id": "2c92a0f9391832b10139183e27940043",
                  "lastName": "Cho",
                  "state": "California",
                  "taxRegion": "",
                  "workEmail": "work_email@zbcloud.com",
                  "workPhone": "5555551212",
                  "zipCode": "95135"
                },
                "subscriptions": [
                  {
                    "autoRenew": true,
                    "id": "2c92c8f83dc4f752013dc72c24ee016d",
                    "initialTerm": 12,
                    "ratePlans": [
                      {
                        "productName": "Recurring Charge",
                        "ratePlanName": "QSF_Tier"
                      }
                    ],
                    "renewalTerm": 3,
                    "status": "Active",
                    "subscriptionNumber": "A-S00001081",
                    "subscriptionStartDate": "2013-02-01",
                    "termEndDate": "2014-02-01",
                    "termStartDate": "2013-02-01",
                    "termType": "TERMED"
                  },
                  {
                    "autoRenew": true,
                    "id": "2c92c8f83dc4f752013dc72bb85c0127",
                    "initialTerm": 12,
                    "ratePlans": [
                      {
                        "productName": "Recurring Charge",
                        "ratePlanName": "QSF_Tier"
                      }
                    ],
                    "renewalTerm": 3,
                    "status": "Active",
                    "subscriptionNumber": "A-S00001080",
                    "subscriptionStartDate": "2013-02-01",
                    "termEndDate": "2014-02-01",
                    "termStartDate": "2013-02-01",
                    "termType": "TERMED"
                  },
                  {
                    "autoRenew": false,
                    "id": "2c92c8f83dc4f752013dc723fdab00d4",
                    "initialTerm": 10,
                    "ratePlans": [
                      {
                        "productName": "Recurring Charge",
                        "ratePlanName": "QSF_Tier"
                      }
                    ],
                    "renewalTerm": 4,
                    "status": "Cancelled",
                    "subscriptionNumber": "A-S00001079",
                    "subscriptionStartDate": "2013-02-01",
                    "termEndDate": "2014-04-01",
                    "termStartDate": "2013-12-01",
                    "termType": "TERMED"
                  },
                  {
                    "autoRenew": false,
                    "id": "2c92c8f83db0b4b4013db4717ad000ec",
                    "initialTerm": 12,
                    "ratePlans": [
                      {
                        "productName": "Recurring Charge",
                        "ratePlanName": "Month_PerUnit"
                      },
                      {
                        "productName": "Recurring Charge",
                        "ratePlanName": "Month_PerUnit"
                      }
                    ],
                    "renewalTerm": 3,
                    "status": "Active",
                    "subscriptionNumber": "A-S00001076",
                    "subscriptionStartDate": "2011-02-11",
                    "termEndDate": "2012-02-11",
                    "termStartDate": "2011-02-11",
                    "termType": "TERMED"
                  },
                  {
                    "autoRenew": false,
                    "id": "2c92c8f83db0b4b4013db3ab6a4d00bc",
                    "initialTerm": 12,
                    "ratePlans": [
                      {
                        "productName": "Recurring Charge",
                        "ratePlanName": "Month_PerUnit"
                      },
                      {
                        "productName": "Recurring Charge",
                        "ratePlanName": "Month_PerUnit"
                      }
                    ],
                    "renewalTerm": 3,
                    "status": "Active",
                    "subscriptionNumber": "A-S00001075",
                    "subscriptionStartDate": "2011-02-11",
                    "termEndDate": "2012-02-11",
                    "termStartDate": "2011-02-11",
                    "termType": "TERMED"
                  },
                  {
                    "autoRenew": false,
                    "id": "2c92c8f83db0b4b4013db3aa9fbd0090",
                    "initialTerm": 12,
                    "ratePlans": [
                      {
                        "productName": "Recurring Charge",
                        "ratePlanName": "Month_PerUnit"
                      }
                    ],
                    "renewalTerm": 3,
                    "status": "Active",
                    "subscriptionNumber": "A-S00001074",
                    "subscriptionStartDate": "2011-02-11",
                    "termEndDate": "2012-02-11",
                    "termStartDate": "2011-02-11",
                    "termType": "TERMED"
                  }
                ],
                "success": true,
                "usage": [
                  {
                    "quantity": 10,
                    "startDate": "2012-02",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "quantity": 10,
                    "startDate": "2012-01",
                    "unitOfMeasure": "UOM"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAccountSummaryType"
            }
          }
        },
        "summary": "Get account summary",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/accounts/{account-key}/summary\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounts/{account-key}/summary');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounts/{account-key}/summary\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/accounts/{account-key}/summary\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounts/{account-key}/summary\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounts/{account-key}/summary\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/accounts/{id}/billing-documents/generate": {
      "post": {
        "description": "Generates draft or posted billing documents for a specified account. You can also generate billing documents for specified subscriptions of a specified account. The billing documents contain invoices and credit memos. To generate credit memos, you must have the Advanced AR Settlement feature enabled.\n",
        "operationId": "POST_GenerateBillingDocuments",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostGenerateBillingDocumentType"
            }
          },
          {
            "description": "The ID of the customer account that billing documents are generated for. For example, 8a8082e65b27f6c3015ba3e326b26419.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "creditMemos": [
                  {
                    "id": "402890555c33b44b015c33bfe947003c"
                  },
                  {
                    "id": "402890555c33b44b015c33bfe93c003a"
                  }
                ],
                "invoices": [
                  {
                    "id": "402890555c33b44b015c33bfe9c70044"
                  },
                  {
                    "id": "402890555c33b44b015c33bfe9d70046"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GenerateBillingDocumentResponseType"
            }
          }
        },
        "summary": "Generate billing documents by account",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"autoPost\": false, \n    \"effectiveDate\": \"2017-05-23\", \n    \"subscriptionIds\": [\n        \"4028905558b483220158b48983dd0015\", \n        \"6028905558b483220158b68983dd0016\"\n    ], \n    \"targetDate\": \"2017-08-23\"\n}' \"https://rest.zuora.com//v1/accounts/{id}/billing-documents/generate\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/accounts/{id}/billing-documents/generate');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"autoPost\": false, \n    \"effectiveDate\": \"2017-05-23\", \n    \"subscriptionIds\": [\n        \"4028905558b483220158b48983dd0015\", \n        \"6028905558b483220158b68983dd0016\"\n    ], \n    \"targetDate\": \"2017-08-23\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"autoPost\\\": false, \\n    \\\"effectiveDate\\\": \\\"2017-05-23\\\", \\n    \\\"subscriptionIds\\\": [\\n        \\\"4028905558b483220158b48983dd0015\\\", \\n        \\\"6028905558b483220158b68983dd0016\\\"\\n    ], \\n    \\\"targetDate\\\": \\\"2017-08-23\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/accounts/{id}/billing-documents/generate\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"autoPost\\\": false, \\n    \\\"effectiveDate\\\": \\\"2017-05-23\\\", \\n    \\\"subscriptionIds\\\": [\\n        \\\"4028905558b483220158b48983dd0015\\\", \\n        \\\"6028905558b483220158b68983dd0016\\\"\\n    ], \\n    \\\"targetDate\\\": \\\"2017-08-23\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/accounts/{id}/billing-documents/generate\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/accounts/{id}/billing-documents/generate\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"autoPost\\\": false, \\n    \\\"effectiveDate\\\": \\\"2017-05-23\\\", \\n    \\\"subscriptionIds\\\": [\\n        \\\"4028905558b483220158b48983dd0015\\\", \\n        \\\"6028905558b483220158b68983dd0016\\\"\\n    ], \\n    \\\"targetDate\\\": \\\"2017-08-23\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/accounts/{id}/billing-documents/generate\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"autoPost\\\": false, \\n    \\\"effectiveDate\\\": \\\"2017-05-23\\\", \\n    \\\"subscriptionIds\\\": [\\n        \\\"4028905558b483220158b48983dd0015\\\", \\n        \\\"6028905558b483220158b68983dd0016\\\"\\n    ], \\n    \\\"targetDate\\\": \\\"2017-08-23\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/amend": {
      "post": {
        "description": "\nUse the amend call to change a subscription, such as upgrading the subscription.\n\n**Note:** Zuora recommends that you use [Update subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription) to amend subscriptions.\n\nThe amend call:\n\n* Supports the Amendment object\n* Is not an asynchronous process\n\n## Limits \n### Objects per Call \nUp to ten Amendment objects.\n\n\n\n### Errors \nIf one of your Amendment objects fails in a single amend call, then the entire call fails.\n\n## Required Fields \nThe following fields are always required for this call:\n\n* `Amendment`.`Type`\n* `Amendment`.`Name`\n* `Amendment`.`SubscriptionId`\n",
        "operationId": "Action_POSTamend",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "amendRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActionamendRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "results": [
                  {
                    "AmendmentIds": [
                      "2c93808457d787030157e02e27781ea0"
                    ],
                    "SubscriptionId": "2c93808457d787030157e02e27e21eaa",
                    "Success": true,
                    "TotalDeltaMrr": 30,
                    "TotalDeltaTcv": 360
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyActionamendResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "Amend",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"requests\": [\n        {\n            \"AmendOptions\": {\n                \"GenerateInvoice\": false, \n                \"InvoiceProcessingOptions\": {}, \n                \"ProcessPayments\": false\n            }, \n            \"Amendments\": [\n                {\n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"CurrentTerm\": 3, \n                    \"CurrentTermPeriodType\": \"Day\", \n                    \"CustomerAcceptanceDate\": \"2016-10-20\", \n                    \"Description\": \"AM7j4i2rsxb9\", \n                    \"EffectiveDate\": \"2016-10-20\", \n                    \"Name\": \"AM7j4i2rsxb9\", \n                    \"RatePlanData\": {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e02e250e1e9a\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02e26701e9d\"\n                                }\n                            }\n                        ]\n                    }, \n                    \"RenewalSetting\": \"RENEW_TO_EVERGREEN\", \n                    \"RenewalTerm\": 2, \n                    \"RenewalTermPeriodType\": \"Day\", \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"Status\": \"Completed\", \n                    \"SubscriptionId\": \"2c93808457d787030157e02e23911e8d\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\", \n                    \"Type\": \"NewProduct\"\n                }\n            ], \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false\n            }\n        }\n    ]\n}' \"https://rest.zuora.com//v1/action/amend\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/amend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"requests\": [\n        {\n            \"AmendOptions\": {\n                \"GenerateInvoice\": false, \n                \"InvoiceProcessingOptions\": {}, \n                \"ProcessPayments\": false\n            }, \n            \"Amendments\": [\n                {\n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"CurrentTerm\": 3, \n                    \"CurrentTermPeriodType\": \"Day\", \n                    \"CustomerAcceptanceDate\": \"2016-10-20\", \n                    \"Description\": \"AM7j4i2rsxb9\", \n                    \"EffectiveDate\": \"2016-10-20\", \n                    \"Name\": \"AM7j4i2rsxb9\", \n                    \"RatePlanData\": {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e02e250e1e9a\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02e26701e9d\"\n                                }\n                            }\n                        ]\n                    }, \n                    \"RenewalSetting\": \"RENEW_TO_EVERGREEN\", \n                    \"RenewalTerm\": 2, \n                    \"RenewalTermPeriodType\": \"Day\", \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"Status\": \"Completed\", \n                    \"SubscriptionId\": \"2c93808457d787030157e02e23911e8d\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\", \n                    \"Type\": \"NewProduct\"\n                }\n            ], \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false\n            }\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"requests\\\": [\\n        {\\n            \\\"AmendOptions\\\": {\\n                \\\"GenerateInvoice\\\": false, \\n                \\\"InvoiceProcessingOptions\\\": {}, \\n                \\\"ProcessPayments\\\": false\\n            }, \\n            \\\"Amendments\\\": [\\n                {\\n                    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"CurrentTerm\\\": 3, \\n                    \\\"CurrentTermPeriodType\\\": \\\"Day\\\", \\n                    \\\"CustomerAcceptanceDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Description\\\": \\\"AM7j4i2rsxb9\\\", \\n                    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Name\\\": \\\"AM7j4i2rsxb9\\\", \\n                    \\\"RatePlanData\\\": {\\n                        \\\"RatePlan\\\": {\\n                            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e02e250e1e9a\\\"\\n                        }, \\n                        \\\"RatePlanChargeData\\\": [\\n                            {\\n                                \\\"RatePlanCharge\\\": {\\n                                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e02e26701e9d\\\"\\n                                }\\n                            }\\n                        ]\\n                    }, \\n                    \\\"RenewalSetting\\\": \\\"RENEW_TO_EVERGREEN\\\", \\n                    \\\"RenewalTerm\\\": 2, \\n                    \\\"RenewalTermPeriodType\\\": \\\"Day\\\", \\n                    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Status\\\": \\\"Completed\\\", \\n                    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02e23911e8d\\\", \\n                    \\\"TermStartDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermType\\\": \\\"TERMED\\\", \\n                    \\\"Type\\\": \\\"NewProduct\\\"\\n                }\\n            ], \\n            \\\"PreviewOptions\\\": {\\n                \\\"EnablePreviewMode\\\": false\\n            }\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/amend\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"requests\\\": [\\n        {\\n            \\\"AmendOptions\\\": {\\n                \\\"GenerateInvoice\\\": false, \\n                \\\"InvoiceProcessingOptions\\\": {}, \\n                \\\"ProcessPayments\\\": false\\n            }, \\n            \\\"Amendments\\\": [\\n                {\\n                    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"CurrentTerm\\\": 3, \\n                    \\\"CurrentTermPeriodType\\\": \\\"Day\\\", \\n                    \\\"CustomerAcceptanceDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Description\\\": \\\"AM7j4i2rsxb9\\\", \\n                    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Name\\\": \\\"AM7j4i2rsxb9\\\", \\n                    \\\"RatePlanData\\\": {\\n                        \\\"RatePlan\\\": {\\n                            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e02e250e1e9a\\\"\\n                        }, \\n                        \\\"RatePlanChargeData\\\": [\\n                            {\\n                                \\\"RatePlanCharge\\\": {\\n                                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e02e26701e9d\\\"\\n                                }\\n                            }\\n                        ]\\n                    }, \\n                    \\\"RenewalSetting\\\": \\\"RENEW_TO_EVERGREEN\\\", \\n                    \\\"RenewalTerm\\\": 2, \\n                    \\\"RenewalTermPeriodType\\\": \\\"Day\\\", \\n                    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Status\\\": \\\"Completed\\\", \\n                    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02e23911e8d\\\", \\n                    \\\"TermStartDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermType\\\": \\\"TERMED\\\", \\n                    \\\"Type\\\": \\\"NewProduct\\\"\\n                }\\n            ], \\n            \\\"PreviewOptions\\\": {\\n                \\\"EnablePreviewMode\\\": false\\n            }\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/amend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/amend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"requests\\\": [\\n        {\\n            \\\"AmendOptions\\\": {\\n                \\\"GenerateInvoice\\\": false, \\n                \\\"InvoiceProcessingOptions\\\": {}, \\n                \\\"ProcessPayments\\\": false\\n            }, \\n            \\\"Amendments\\\": [\\n                {\\n                    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"CurrentTerm\\\": 3, \\n                    \\\"CurrentTermPeriodType\\\": \\\"Day\\\", \\n                    \\\"CustomerAcceptanceDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Description\\\": \\\"AM7j4i2rsxb9\\\", \\n                    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Name\\\": \\\"AM7j4i2rsxb9\\\", \\n                    \\\"RatePlanData\\\": {\\n                        \\\"RatePlan\\\": {\\n                            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e02e250e1e9a\\\"\\n                        }, \\n                        \\\"RatePlanChargeData\\\": [\\n                            {\\n                                \\\"RatePlanCharge\\\": {\\n                                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e02e26701e9d\\\"\\n                                }\\n                            }\\n                        ]\\n                    }, \\n                    \\\"RenewalSetting\\\": \\\"RENEW_TO_EVERGREEN\\\", \\n                    \\\"RenewalTerm\\\": 2, \\n                    \\\"RenewalTermPeriodType\\\": \\\"Day\\\", \\n                    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Status\\\": \\\"Completed\\\", \\n                    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02e23911e8d\\\", \\n                    \\\"TermStartDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermType\\\": \\\"TERMED\\\", \\n                    \\\"Type\\\": \\\"NewProduct\\\"\\n                }\\n            ], \\n            \\\"PreviewOptions\\\": {\\n                \\\"EnablePreviewMode\\\": false\\n            }\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/amend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"requests\\\": [\\n        {\\n            \\\"AmendOptions\\\": {\\n                \\\"GenerateInvoice\\\": false, \\n                \\\"InvoiceProcessingOptions\\\": {}, \\n                \\\"ProcessPayments\\\": false\\n            }, \\n            \\\"Amendments\\\": [\\n                {\\n                    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"CurrentTerm\\\": 3, \\n                    \\\"CurrentTermPeriodType\\\": \\\"Day\\\", \\n                    \\\"CustomerAcceptanceDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Description\\\": \\\"AM7j4i2rsxb9\\\", \\n                    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Name\\\": \\\"AM7j4i2rsxb9\\\", \\n                    \\\"RatePlanData\\\": {\\n                        \\\"RatePlan\\\": {\\n                            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e02e250e1e9a\\\"\\n                        }, \\n                        \\\"RatePlanChargeData\\\": [\\n                            {\\n                                \\\"RatePlanCharge\\\": {\\n                                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e02e26701e9d\\\"\\n                                }\\n                            }\\n                        ]\\n                    }, \\n                    \\\"RenewalSetting\\\": \\\"RENEW_TO_EVERGREEN\\\", \\n                    \\\"RenewalTerm\\\": 2, \\n                    \\\"RenewalTermPeriodType\\\": \\\"Day\\\", \\n                    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n                    \\\"Status\\\": \\\"Completed\\\", \\n                    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02e23911e8d\\\", \\n                    \\\"TermStartDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermType\\\": \\\"TERMED\\\", \\n                    \\\"Type\\\": \\\"NewProduct\\\"\\n                }\\n            ], \\n            \\\"PreviewOptions\\\": {\\n                \\\"EnablePreviewMode\\\": false\\n            }\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/create": {
      "post": {
        "description": "Use the create call to create one or more objects of a specific type. You can specify different types in different create calls, but each create call must apply to only one type of object.\n\n## Limits\n\n### Objects per Call\n\n50 objects are supported in a single call.\n\n\n\n## How to Use this Call\n\nYou can call create on an array of one or more zObjects. It returns an array of SaveResults, indicating the success or failure of creating each object. The following information applies to this call:\n\n* You cannot pass in null zObjects.\n* You can pass in a maximum of 50 zObjects at a time.\n* All objects must be of the same type.\n\n### Using Create and Subscribe Calls \nBoth the create and subscribe calls will create a new account. However, there are differences between the calls.\n\nUse the create call to create an account independent of a subscription.\n\nUse the subscribe call to create the account with the subscription and the initial payment information.\n",
        "operationId": "Action_POSTcreate",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "createRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActioncreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": [
                {
                  "Id": "2c93808457d787030157e0324aea5158",
                  "Success": true
                }
              ]
            },
            "schema": {
              "$ref": "#/definitions/ProxyActioncreateResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "Create",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"objects\": [\n        {\n            \"AccountingCode\": \"Accounts Receivable\", \n            \"AdjustmentDate\": \"2016-10-20\", \n            \"Amount\": 1.2, \n            \"Comment\": \"this is comments\", \n            \"InvoiceId\": \"2c93808457d787030157e03248c75142\", \n            \"InvoiceNumber\": \"INV00000001\", \n            \"ReferenceId\": \"refid-1476935174845\", \n            \"SourceId\": \"2c93808457d787030157e03248c95144\", \n            \"SourceType\": \"InvoiceDetail\", \n            \"Type\": \"Credit\"\n        }\n    ], \n    \"type\": \"InvoiceItemAdjustment\"\n}' \"https://rest.zuora.com//v1/action/create\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/create');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"objects\": [\n        {\n            \"AccountingCode\": \"Accounts Receivable\", \n            \"AdjustmentDate\": \"2016-10-20\", \n            \"Amount\": 1.2, \n            \"Comment\": \"this is comments\", \n            \"InvoiceId\": \"2c93808457d787030157e03248c75142\", \n            \"InvoiceNumber\": \"INV00000001\", \n            \"ReferenceId\": \"refid-1476935174845\", \n            \"SourceId\": \"2c93808457d787030157e03248c95144\", \n            \"SourceType\": \"InvoiceDetail\", \n            \"Type\": \"Credit\"\n        }\n    ], \n    \"type\": \"InvoiceItemAdjustment\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountingCode\\\": \\\"Accounts Receivable\\\", \\n            \\\"AdjustmentDate\\\": \\\"2016-10-20\\\", \\n            \\\"Amount\\\": 1.2, \\n            \\\"Comment\\\": \\\"this is comments\\\", \\n            \\\"InvoiceId\\\": \\\"2c93808457d787030157e03248c75142\\\", \\n            \\\"InvoiceNumber\\\": \\\"INV00000001\\\", \\n            \\\"ReferenceId\\\": \\\"refid-1476935174845\\\", \\n            \\\"SourceId\\\": \\\"2c93808457d787030157e03248c95144\\\", \\n            \\\"SourceType\\\": \\\"InvoiceDetail\\\", \\n            \\\"Type\\\": \\\"Credit\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"InvoiceItemAdjustment\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/create\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountingCode\\\": \\\"Accounts Receivable\\\", \\n            \\\"AdjustmentDate\\\": \\\"2016-10-20\\\", \\n            \\\"Amount\\\": 1.2, \\n            \\\"Comment\\\": \\\"this is comments\\\", \\n            \\\"InvoiceId\\\": \\\"2c93808457d787030157e03248c75142\\\", \\n            \\\"InvoiceNumber\\\": \\\"INV00000001\\\", \\n            \\\"ReferenceId\\\": \\\"refid-1476935174845\\\", \\n            \\\"SourceId\\\": \\\"2c93808457d787030157e03248c95144\\\", \\n            \\\"SourceType\\\": \\\"InvoiceDetail\\\", \\n            \\\"Type\\\": \\\"Credit\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"InvoiceItemAdjustment\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/create\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/create\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountingCode\\\": \\\"Accounts Receivable\\\", \\n            \\\"AdjustmentDate\\\": \\\"2016-10-20\\\", \\n            \\\"Amount\\\": 1.2, \\n            \\\"Comment\\\": \\\"this is comments\\\", \\n            \\\"InvoiceId\\\": \\\"2c93808457d787030157e03248c75142\\\", \\n            \\\"InvoiceNumber\\\": \\\"INV00000001\\\", \\n            \\\"ReferenceId\\\": \\\"refid-1476935174845\\\", \\n            \\\"SourceId\\\": \\\"2c93808457d787030157e03248c95144\\\", \\n            \\\"SourceType\\\": \\\"InvoiceDetail\\\", \\n            \\\"Type\\\": \\\"Credit\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"InvoiceItemAdjustment\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/create\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountingCode\\\": \\\"Accounts Receivable\\\", \\n            \\\"AdjustmentDate\\\": \\\"2016-10-20\\\", \\n            \\\"Amount\\\": 1.2, \\n            \\\"Comment\\\": \\\"this is comments\\\", \\n            \\\"InvoiceId\\\": \\\"2c93808457d787030157e03248c75142\\\", \\n            \\\"InvoiceNumber\\\": \\\"INV00000001\\\", \\n            \\\"ReferenceId\\\": \\\"refid-1476935174845\\\", \\n            \\\"SourceId\\\": \\\"2c93808457d787030157e03248c95144\\\", \\n            \\\"SourceType\\\": \\\"InvoiceDetail\\\", \\n            \\\"Type\\\": \\\"Credit\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"InvoiceItemAdjustment\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/delete": {
      "post": {
        "description": "Deletes one or more objects of the same type. You can specify different types in different delete calls, but each delete call must apply only to one type of object.\n\nThe following information applies to this call:\n\n* You will need to first determine the IDs for the objects you wish to delete.\n* You cannot pass in any null IDs.\n* All objects in a specific delete call must be of the same type.\n\n\n### Objects per Call\n50 objects are supported in a single call.\n",
        "operationId": "Action_POSTdelete",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "deleteRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActiondeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": [
                {
                  "id": "2c93808457d787030157e031fcd34e19",
                  "success": true
                }
              ]
            },
            "schema": {
              "$ref": "#/definitions/ProxyActiondeleteResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "Delete",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"ids\": [\n        \"2c93808457d787030157e031fcd34e19\"\n    ], \n    \"type\": \"ProductRatePlanCharge\"\n}' \"https://rest.zuora.com//v1/action/delete\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/delete');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"ids\": [\n        \"2c93808457d787030157e031fcd34e19\"\n    ], \n    \"type\": \"ProductRatePlanCharge\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"ids\\\": [\\n        \\\"2c93808457d787030157e031fcd34e19\\\"\\n    ], \\n    \\\"type\\\": \\\"ProductRatePlanCharge\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/delete\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"ids\\\": [\\n        \\\"2c93808457d787030157e031fcd34e19\\\"\\n    ], \\n    \\\"type\\\": \\\"ProductRatePlanCharge\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/delete\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/delete\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"ids\\\": [\\n        \\\"2c93808457d787030157e031fcd34e19\\\"\\n    ], \\n    \\\"type\\\": \\\"ProductRatePlanCharge\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/delete\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"ids\\\": [\\n        \\\"2c93808457d787030157e031fcd34e19\\\"\\n    ], \\n    \\\"type\\\": \\\"ProductRatePlanCharge\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/execute": {
      "post": {
        "description": "Use the execute call to execute a process to split an invoice into multiple invoices. The original invoice must be in draft status. The resulting invoices are called split invoices.\n\n**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com). \n\nTo split a draft invoice into multiple split invoices:\n\n1. Use the create call to create a separate InvoiceSplitItem object for each split invoice that you want to create from the original draft invoice.\n2. Use the create call to create a single InvoiceSplit object to collect all of the InvoiceSplitItem objects.\n3. Use the execute call to split the draft invoice into multiple split invoices.\n\nYou need to create InvoiceSplitItem objects and an InvoiceSplit object before you can use the execute call. \n\n* Supported objects: InvoiceSplit\n* Asynchronous process: yes\n",
        "operationId": "Action_POSTexecute",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "executeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActionexecuteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": [
                {
                  "Id": "2c93808457d787030157e031d5844c53",
                  "Success": true
                }
              ]
            },
            "schema": {
              "$ref": "#/definitions/ProxyActionexecuteResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "Execute",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"ids\": [\n        \"2c93808457d787030157e031d5844c53\"\n    ], \n    \"synchronous\": false, \n    \"type\": \"InvoiceSplit\"\n}' \"https://rest.zuora.com//v1/action/execute\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/execute');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"ids\": [\n        \"2c93808457d787030157e031d5844c53\"\n    ], \n    \"synchronous\": false, \n    \"type\": \"InvoiceSplit\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"ids\\\": [\\n        \\\"2c93808457d787030157e031d5844c53\\\"\\n    ], \\n    \\\"synchronous\\\": false, \\n    \\\"type\\\": \\\"InvoiceSplit\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/execute\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"ids\\\": [\\n        \\\"2c93808457d787030157e031d5844c53\\\"\\n    ], \\n    \\\"synchronous\\\": false, \\n    \\\"type\\\": \\\"InvoiceSplit\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/execute\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/execute\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"ids\\\": [\\n        \\\"2c93808457d787030157e031d5844c53\\\"\\n    ], \\n    \\\"synchronous\\\": false, \\n    \\\"type\\\": \\\"InvoiceSplit\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/execute\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"ids\\\": [\\n        \\\"2c93808457d787030157e031d5844c53\\\"\\n    ], \\n    \\\"synchronous\\\": false, \\n    \\\"type\\\": \\\"InvoiceSplit\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/generate": {
      "post": {
        "description": "Generates an on-demand invoice for a specific customer. This is similar to creating an ad-hoc bill run for a specific customer account in the Zuora UI.\n\n* Supported objects: Invoice\n* Asynchronous process: yes\n\nThe ID of the generated invoice is returned in the response. If multiple invoices are generated, only the id of the first invoice generated is returned. This occurs when an account has multiple subscriptions with the [invoice subscription separately](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions/B_Creating_Subscriptions/Invoicing_Subscriptions_Separately) option enabled.\n",
        "operationId": "Action_POSTgenerate",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "generateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActiongenerateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": [
                {
                  "Id": "2c93808457d787030157e0306cd13a86",
                  "Success": true
                }
              ]
            },
            "schema": {
              "$ref": "#/definitions/ProxyActiongenerateResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "Generate",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"objects\": [\n        {\n            \"AccountId\": \"2c93808457d787030157e0306be53a75\", \n            \"InvoiceDate\": \"2016-10-20\", \n            \"TargetDate\": \"2016-10-20\"\n        }\n    ], \n    \"type\": \"Invoice\"\n}' \"https://rest.zuora.com//v1/action/generate\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/generate');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"objects\": [\n        {\n            \"AccountId\": \"2c93808457d787030157e0306be53a75\", \n            \"InvoiceDate\": \"2016-10-20\", \n            \"TargetDate\": \"2016-10-20\"\n        }\n    ], \n    \"type\": \"Invoice\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountId\\\": \\\"2c93808457d787030157e0306be53a75\\\", \\n            \\\"InvoiceDate\\\": \\\"2016-10-20\\\", \\n            \\\"TargetDate\\\": \\\"2016-10-20\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"Invoice\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/generate\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountId\\\": \\\"2c93808457d787030157e0306be53a75\\\", \\n            \\\"InvoiceDate\\\": \\\"2016-10-20\\\", \\n            \\\"TargetDate\\\": \\\"2016-10-20\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"Invoice\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/generate\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/generate\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountId\\\": \\\"2c93808457d787030157e0306be53a75\\\", \\n            \\\"InvoiceDate\\\": \\\"2016-10-20\\\", \\n            \\\"TargetDate\\\": \\\"2016-10-20\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"Invoice\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/generate\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountId\\\": \\\"2c93808457d787030157e0306be53a75\\\", \\n            \\\"InvoiceDate\\\": \\\"2016-10-20\\\", \\n            \\\"TargetDate\\\": \\\"2016-10-20\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"Invoice\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/query": {
      "post": {
        "description": "The query call sends a query expression by specifying the object to query, the fields to retrieve from that object, and any filters to determine whether a given object should be queried.\n\n\nYou can use ZOQL (Zuora Object Query Language) to construct those queries, passing them through the `queryString`.\n\n\nOnce the call is made, the API executes the query against the specified object and returns a query response object to your application. Your application can then iterate through rows in the query response to retrieve information.\n\n## Limitations \n\nThis call has the following limitations:\n\n* All ZOQL keywords must be in lower case.\n* The number of records returned is limited to 2000 records\n",
        "operationId": "Action_POSTquery",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "queryRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActionqueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": [
                  {
                    "AccountId": "2c93808457d787030157e032485b5131",
                    "AccountingCode": "Accounts Receivable",
                    "AdjustmentDate": "2016-10-20",
                    "AdjustmentNumber": "IIA-00000001",
                    "Amount": 1.2,
                    "Comment": "this is comments",
                    "CreatedById": "2c93808457d787030157e032283c4fb2",
                    "CreatedDate": "2016-10-20T05:46:14.000+02:00",
                    "Id": "2c93808457d787030157e0324aea5158",
                    "InvoiceId": "2c93808457d787030157e03248c75142",
                    "InvoiceItemName": "OneTime_Flat Fee Pricing1476935174089",
                    "InvoiceNumber": "INV00000001",
                    "ReasonCode": "Standard Adjustment",
                    "ReferenceId": "refid-1476935174845",
                    "ServiceEndDate": "2016-10-20",
                    "ServiceStartDate": "2016-10-20",
                    "SourceId": "2c93808457d787030157e03248c95144",
                    "SourceType": "InvoiceDetail",
                    "Status": "Processed",
                    "Type": "Credit",
                    "UpdatedById": "2c93808457d787030157e032283c4fb2",
                    "UpdatedDate": "2016-10-20T05:46:14.000+02:00"
                  }
                ],
                "size": 1
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyActionqueryResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "Query",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"queryString\": \"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\"\n}' \"https://rest.zuora.com//v1/action/query\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/query');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"queryString\": \"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"queryString\\\": \\\"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/query\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"queryString\\\": \\\"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/query\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/query\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"queryString\\\": \\\"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/query\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"queryString\\\": \\\"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/queryMore": {
      "post": {
        "description": "Use queryMore to request additional results from a previous query call. If your initial query call returns more than 2000 results, you can use queryMore to query for the additional results.\n\n\nAny `queryLocator` results greater than 2,000, will only be stored by Zuora for 5 days before it is deleted.\n\n\n This call sends a request for additional results from an initial query call. If the initial query call returns more than 2000 results, you can use the `queryLocator` returned from query to request the next set of results.\n\n\n**Note:** Zuora expires queryMore cursors after 15 minutes of activity.\n\n\nTo use queryMore, you first construct a query call. By default, the query call will return up to 2000 results. If there are more than 2000 results, query will return a boolean `done`, which will be marked as `false`, and a `queryLocator`, which is a marker you will pass to queryMore to get the next set of results.\n",
        "operationId": "Action_POSTqueryMore",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "queryMoreRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActionqueryMoreRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyActionqueryMoreResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "QueryMore",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/action/queryMore\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/queryMore');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/queryMore\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/queryMore\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/queryMore\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/queryMore\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/subscribe": {
      "post": {
        "description": "\nThis call performs many actions.  Use the subscribe call to bundle information required to create at least one new subscription. \n\nThe call takes in an array of SubscribeRequests. Because it takes an array, you can submit a batch of subscription requests at once. You can create up to 50 different subscriptions in a single subscribe call.\n\nThis is a combined call that you can use to perform all of the following tasks in a single call:\n\n* Create accounts\n* Create contacts\n* Create payment methods, including external payment options\n* Create an invoice for the subscription\n* Apply the first payment to a subscription\n\n## Object Limits \n50 objects are supported in a single call.\n\n\n\n## Effective Date\nIf the effective date is in the future, the invoices will not be generated, and there will be no invoice number.\n\n## Subscription Name, Number, and ID \n### Subscription Name and Number \nThe subscription name is a unique identifier for the subscription. If you do not specify a value for the name, Zuora will create one automatically. The automatically generated value is known as the subscription number, such as `A-S00000080`. You cannot change the subscription name or number after creating the subscription. \n\n* **Subscription name**: The name that you set for the subscription.\n* **Subscription number**: The value generated by Zuora automatically if you do not specify a subscription name. \n\nBoth the subscription name and number must be unique. If they are not, an error will occur.\n\n### Subscription ID \nThe subscription ID is a 32-digit ID in the format 4028xxxx. This is also the unique identifier for a subscription. This value is automatically generated by the system and cannot be edited or updated, but it can be queried. One subscription can have only one subscription name or number, but it can have multiple IDs: Each version of a subscription has a different ID.\n\nThe Subscription object contains the fields `OriginalId` and `PreviousSubscriptionId`. `OriginalId` is the ID for the first version of a subscription. `PreviousSubscriptionId` is the ID of the version created immediately prior to the current version.\n\n## Subscription Preview \nYou can preview invoices that would be generated by the subscribe call. \n\n## Invoice Subscriptions Separately\nIf you have enabled the invoice subscriptions separately feature, a subscribe call will generate an invoice for each subscription for every subscription where the field `IsInvoiceSeparate` is set to `true`.\n\nIf the invoice subscriptions separately feature is disabled, a subscribe call will generate a single invoice for all subscriptions.\n\nSee [Invoicing Subscriptions Separately](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions/B_Creating_Subscriptions/Invoicing_Subscriptions_Separately) for more information.\n\n## Subscriptions and Draft Invoices \nIf a draft invoice that includes charges exists in a customer account, using the subscribe call to create a new subscription and generate an invoice will cause the new subscription to be added to the existing draft invoice. Zuora will then post the invoice. \n\n## When to Use Subscribe and Create Calls \nYou can use either the subscribe call or the create call to create the objects associated with a subscription (accounts, contacts, and so on). There are differences between these calls, however, and some situations are better for one or the other.\n\n### Use the Subscribe Call \nThe subscribe call bundles up all the information you need for a subscription. Use the subscribe call to create new subscriptions when you have all the information you need.\n\nSubscribe calls cannot update BillTo, SoldTo, and Payment information objects cannot be updated if there is an existing account ID in the call. These objects are not supported in a subscribe call.\n\n### Use the Create Call \nThe create call is more useful when you want to develop in stages. For example, if you want to first create an account, then a contact, and so on. If you do not have all information available, use the create call. To create a subscription, you must activate the account from Draft status to Active by calling the subscribe call.\n",
        "operationId": "Action_POSTsubscribe",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "subscribeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActionsubscribeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": [
                {
                  "AccountId": "2c93808457d787030157e032485b5131",
                  "AccountNumber": "AN_1476935174239",
                  "InvoiceId": "2c93808457d787030157e03248c75142",
                  "InvoiceNumber": "INV00000001",
                  "InvoiceResult": {
                    "Invoice": [
                      {
                        "Id": "2c93808457d787030157e03248c75142",
                        "InvoiceNumber": "INV00000001"
                      }
                    ]
                  },
                  "SubscriptionId": "2c93808457d787030157e03248715134",
                  "SubscriptionNumber": "S_1476935174239",
                  "Success": true,
                  "TotalMrr": 0,
                  "TotalTcv": 100.3
                }
              ]
            },
            "schema": {
              "$ref": "#/definitions/ProxyActionsubscribeResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "Subscribe",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"subscribes\": [\n        {\n            \"Account\": {\n                \"AccountNumber\": \"AN_1476935174239\", \n                \"AutoPay\": false, \n                \"Batch\": \"Batch1\", \n                \"BillCycleDay\": 1, \n                \"Currency\": \"USD\", \n                \"Name\": \"AC_1476935174239\", \n                \"PaymentTerm\": \"Due Upon Receipt\", \n                \"Status\": \"Draft\"\n            }, \n            \"BillToContact\": {\n                \"Address1\": \"312 2nd Ave W\", \n                \"City\": \"Seattle\", \n                \"Country\": \"United States\", \n                \"FirstName\": \"FN1476935174239\", \n                \"LastName\": \"LN1476935174239\", \n                \"PersonalEmail\": \"person@test.com\", \n                \"PostalCode\": \"98119\", \n                \"State\": \"Washington\", \n                \"WorkEmail\": \"work@test.com\"\n            }, \n            \"PaymentMethod\": {\n                \"CreditCardAddress1\": \"312 2nd Ave W\", \n                \"CreditCardCity\": \"Seattle\", \n                \"CreditCardCountry\": \"United States\", \n                \"CreditCardExpirationMonth\": 12, \n                \"CreditCardExpirationYear\": 2020, \n                \"CreditCardHolderName\": \"Somebody\", \n                \"CreditCardNumber\": \"4111111111111111\", \n                \"CreditCardPostalCode\": \"98119\", \n                \"CreditCardState\": \"Washington\", \n                \"CreditCardType\": \"Visa\", \n                \"Type\": \"CreditCard\"\n            }, \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false, \n                \"NumberOfPeriods\": 3\n            }, \n            \"SubscribeOptions\": {\n                \"GenerateInvoice\": true, \n                \"ProcessPayments\": false, \n                \"SubscribeInvoiceProcessingOptions\": {}\n            }, \n            \"SubscriptionData\": {\n                \"RatePlanData\": [\n                    {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e0324735512b\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e03247c2512d\"\n                                }\n                            }\n                        ]\n                    }\n                ], \n                \"Subscription\": {\n                    \"AutoRenew\": false, \n                    \"ContractAcceptanceDate\": \"2016-10-20\", \n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"InitialTerm\": 12, \n                    \"Name\": \"S_1476935174239\", \n                    \"Notes\": \"this is notes\", \n                    \"RenewalTerm\": 12, \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\"\n                }\n            }\n        }\n    ]\n}' \"https://rest.zuora.com//v1/action/subscribe\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/subscribe');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"subscribes\": [\n        {\n            \"Account\": {\n                \"AccountNumber\": \"AN_1476935174239\", \n                \"AutoPay\": false, \n                \"Batch\": \"Batch1\", \n                \"BillCycleDay\": 1, \n                \"Currency\": \"USD\", \n                \"Name\": \"AC_1476935174239\", \n                \"PaymentTerm\": \"Due Upon Receipt\", \n                \"Status\": \"Draft\"\n            }, \n            \"BillToContact\": {\n                \"Address1\": \"312 2nd Ave W\", \n                \"City\": \"Seattle\", \n                \"Country\": \"United States\", \n                \"FirstName\": \"FN1476935174239\", \n                \"LastName\": \"LN1476935174239\", \n                \"PersonalEmail\": \"person@test.com\", \n                \"PostalCode\": \"98119\", \n                \"State\": \"Washington\", \n                \"WorkEmail\": \"work@test.com\"\n            }, \n            \"PaymentMethod\": {\n                \"CreditCardAddress1\": \"312 2nd Ave W\", \n                \"CreditCardCity\": \"Seattle\", \n                \"CreditCardCountry\": \"United States\", \n                \"CreditCardExpirationMonth\": 12, \n                \"CreditCardExpirationYear\": 2020, \n                \"CreditCardHolderName\": \"Somebody\", \n                \"CreditCardNumber\": \"4111111111111111\", \n                \"CreditCardPostalCode\": \"98119\", \n                \"CreditCardState\": \"Washington\", \n                \"CreditCardType\": \"Visa\", \n                \"Type\": \"CreditCard\"\n            }, \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false, \n                \"NumberOfPeriods\": 3\n            }, \n            \"SubscribeOptions\": {\n                \"GenerateInvoice\": true, \n                \"ProcessPayments\": false, \n                \"SubscribeInvoiceProcessingOptions\": {}\n            }, \n            \"SubscriptionData\": {\n                \"RatePlanData\": [\n                    {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e0324735512b\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e03247c2512d\"\n                                }\n                            }\n                        ]\n                    }\n                ], \n                \"Subscription\": {\n                    \"AutoRenew\": false, \n                    \"ContractAcceptanceDate\": \"2016-10-20\", \n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"InitialTerm\": 12, \n                    \"Name\": \"S_1476935174239\", \n                    \"Notes\": \"this is notes\", \n                    \"RenewalTerm\": 12, \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\"\n                }\n            }\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"subscribes\\\": [\\n        {\\n            \\\"Account\\\": {\\n                \\\"AccountNumber\\\": \\\"AN_1476935174239\\\", \\n                \\\"AutoPay\\\": false, \\n                \\\"Batch\\\": \\\"Batch1\\\", \\n                \\\"BillCycleDay\\\": 1, \\n                \\\"Currency\\\": \\\"USD\\\", \\n                \\\"Name\\\": \\\"AC_1476935174239\\\", \\n                \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n                \\\"Status\\\": \\\"Draft\\\"\\n            }, \\n            \\\"BillToContact\\\": {\\n                \\\"Address1\\\": \\\"312 2nd Ave W\\\", \\n                \\\"City\\\": \\\"Seattle\\\", \\n                \\\"Country\\\": \\\"United States\\\", \\n                \\\"FirstName\\\": \\\"FN1476935174239\\\", \\n                \\\"LastName\\\": \\\"LN1476935174239\\\", \\n                \\\"PersonalEmail\\\": \\\"person@test.com\\\", \\n                \\\"PostalCode\\\": \\\"98119\\\", \\n                \\\"State\\\": \\\"Washington\\\", \\n                \\\"WorkEmail\\\": \\\"work@test.com\\\"\\n            }, \\n            \\\"PaymentMethod\\\": {\\n                \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W\\\", \\n                \\\"CreditCardCity\\\": \\\"Seattle\\\", \\n                \\\"CreditCardCountry\\\": \\\"United States\\\", \\n                \\\"CreditCardExpirationMonth\\\": 12, \\n                \\\"CreditCardExpirationYear\\\": 2020, \\n                \\\"CreditCardHolderName\\\": \\\"Somebody\\\", \\n                \\\"CreditCardNumber\\\": \\\"4111111111111111\\\", \\n                \\\"CreditCardPostalCode\\\": \\\"98119\\\", \\n                \\\"CreditCardState\\\": \\\"Washington\\\", \\n                \\\"CreditCardType\\\": \\\"Visa\\\", \\n                \\\"Type\\\": \\\"CreditCard\\\"\\n            }, \\n            \\\"PreviewOptions\\\": {\\n                \\\"EnablePreviewMode\\\": false, \\n                \\\"NumberOfPeriods\\\": 3\\n            }, \\n            \\\"SubscribeOptions\\\": {\\n                \\\"GenerateInvoice\\\": true, \\n                \\\"ProcessPayments\\\": false, \\n                \\\"SubscribeInvoiceProcessingOptions\\\": {}\\n            }, \\n            \\\"SubscriptionData\\\": {\\n                \\\"RatePlanData\\\": [\\n                    {\\n                        \\\"RatePlan\\\": {\\n                            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e0324735512b\\\"\\n                        }, \\n                        \\\"RatePlanChargeData\\\": [\\n                            {\\n                                \\\"RatePlanCharge\\\": {\\n                                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e03247c2512d\\\"\\n                                }\\n                            }\\n                        ]\\n                    }\\n                ], \\n                \\\"Subscription\\\": {\\n                    \\\"AutoRenew\\\": false, \\n                    \\\"ContractAcceptanceDate\\\": \\\"2016-10-20\\\", \\n                    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"InitialTerm\\\": 12, \\n                    \\\"Name\\\": \\\"S_1476935174239\\\", \\n                    \\\"Notes\\\": \\\"this is notes\\\", \\n                    \\\"RenewalTerm\\\": 12, \\n                    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermStartDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermType\\\": \\\"TERMED\\\"\\n                }\\n            }\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/subscribe\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"subscribes\\\": [\\n        {\\n            \\\"Account\\\": {\\n                \\\"AccountNumber\\\": \\\"AN_1476935174239\\\", \\n                \\\"AutoPay\\\": false, \\n                \\\"Batch\\\": \\\"Batch1\\\", \\n                \\\"BillCycleDay\\\": 1, \\n                \\\"Currency\\\": \\\"USD\\\", \\n                \\\"Name\\\": \\\"AC_1476935174239\\\", \\n                \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n                \\\"Status\\\": \\\"Draft\\\"\\n            }, \\n            \\\"BillToContact\\\": {\\n                \\\"Address1\\\": \\\"312 2nd Ave W\\\", \\n                \\\"City\\\": \\\"Seattle\\\", \\n                \\\"Country\\\": \\\"United States\\\", \\n                \\\"FirstName\\\": \\\"FN1476935174239\\\", \\n                \\\"LastName\\\": \\\"LN1476935174239\\\", \\n                \\\"PersonalEmail\\\": \\\"person@test.com\\\", \\n                \\\"PostalCode\\\": \\\"98119\\\", \\n                \\\"State\\\": \\\"Washington\\\", \\n                \\\"WorkEmail\\\": \\\"work@test.com\\\"\\n            }, \\n            \\\"PaymentMethod\\\": {\\n                \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W\\\", \\n                \\\"CreditCardCity\\\": \\\"Seattle\\\", \\n                \\\"CreditCardCountry\\\": \\\"United States\\\", \\n                \\\"CreditCardExpirationMonth\\\": 12, \\n                \\\"CreditCardExpirationYear\\\": 2020, \\n                \\\"CreditCardHolderName\\\": \\\"Somebody\\\", \\n                \\\"CreditCardNumber\\\": \\\"4111111111111111\\\", \\n                \\\"CreditCardPostalCode\\\": \\\"98119\\\", \\n                \\\"CreditCardState\\\": \\\"Washington\\\", \\n                \\\"CreditCardType\\\": \\\"Visa\\\", \\n                \\\"Type\\\": \\\"CreditCard\\\"\\n            }, \\n            \\\"PreviewOptions\\\": {\\n                \\\"EnablePreviewMode\\\": false, \\n                \\\"NumberOfPeriods\\\": 3\\n            }, \\n            \\\"SubscribeOptions\\\": {\\n                \\\"GenerateInvoice\\\": true, \\n                \\\"ProcessPayments\\\": false, \\n                \\\"SubscribeInvoiceProcessingOptions\\\": {}\\n            }, \\n            \\\"SubscriptionData\\\": {\\n                \\\"RatePlanData\\\": [\\n                    {\\n                        \\\"RatePlan\\\": {\\n                            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e0324735512b\\\"\\n                        }, \\n                        \\\"RatePlanChargeData\\\": [\\n                            {\\n                                \\\"RatePlanCharge\\\": {\\n                                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e03247c2512d\\\"\\n                                }\\n                            }\\n                        ]\\n                    }\\n                ], \\n                \\\"Subscription\\\": {\\n                    \\\"AutoRenew\\\": false, \\n                    \\\"ContractAcceptanceDate\\\": \\\"2016-10-20\\\", \\n                    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"InitialTerm\\\": 12, \\n                    \\\"Name\\\": \\\"S_1476935174239\\\", \\n                    \\\"Notes\\\": \\\"this is notes\\\", \\n                    \\\"RenewalTerm\\\": 12, \\n                    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermStartDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermType\\\": \\\"TERMED\\\"\\n                }\\n            }\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/subscribe\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/subscribe\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"subscribes\\\": [\\n        {\\n            \\\"Account\\\": {\\n                \\\"AccountNumber\\\": \\\"AN_1476935174239\\\", \\n                \\\"AutoPay\\\": false, \\n                \\\"Batch\\\": \\\"Batch1\\\", \\n                \\\"BillCycleDay\\\": 1, \\n                \\\"Currency\\\": \\\"USD\\\", \\n                \\\"Name\\\": \\\"AC_1476935174239\\\", \\n                \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n                \\\"Status\\\": \\\"Draft\\\"\\n            }, \\n            \\\"BillToContact\\\": {\\n                \\\"Address1\\\": \\\"312 2nd Ave W\\\", \\n                \\\"City\\\": \\\"Seattle\\\", \\n                \\\"Country\\\": \\\"United States\\\", \\n                \\\"FirstName\\\": \\\"FN1476935174239\\\", \\n                \\\"LastName\\\": \\\"LN1476935174239\\\", \\n                \\\"PersonalEmail\\\": \\\"person@test.com\\\", \\n                \\\"PostalCode\\\": \\\"98119\\\", \\n                \\\"State\\\": \\\"Washington\\\", \\n                \\\"WorkEmail\\\": \\\"work@test.com\\\"\\n            }, \\n            \\\"PaymentMethod\\\": {\\n                \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W\\\", \\n                \\\"CreditCardCity\\\": \\\"Seattle\\\", \\n                \\\"CreditCardCountry\\\": \\\"United States\\\", \\n                \\\"CreditCardExpirationMonth\\\": 12, \\n                \\\"CreditCardExpirationYear\\\": 2020, \\n                \\\"CreditCardHolderName\\\": \\\"Somebody\\\", \\n                \\\"CreditCardNumber\\\": \\\"4111111111111111\\\", \\n                \\\"CreditCardPostalCode\\\": \\\"98119\\\", \\n                \\\"CreditCardState\\\": \\\"Washington\\\", \\n                \\\"CreditCardType\\\": \\\"Visa\\\", \\n                \\\"Type\\\": \\\"CreditCard\\\"\\n            }, \\n            \\\"PreviewOptions\\\": {\\n                \\\"EnablePreviewMode\\\": false, \\n                \\\"NumberOfPeriods\\\": 3\\n            }, \\n            \\\"SubscribeOptions\\\": {\\n                \\\"GenerateInvoice\\\": true, \\n                \\\"ProcessPayments\\\": false, \\n                \\\"SubscribeInvoiceProcessingOptions\\\": {}\\n            }, \\n            \\\"SubscriptionData\\\": {\\n                \\\"RatePlanData\\\": [\\n                    {\\n                        \\\"RatePlan\\\": {\\n                            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e0324735512b\\\"\\n                        }, \\n                        \\\"RatePlanChargeData\\\": [\\n                            {\\n                                \\\"RatePlanCharge\\\": {\\n                                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e03247c2512d\\\"\\n                                }\\n                            }\\n                        ]\\n                    }\\n                ], \\n                \\\"Subscription\\\": {\\n                    \\\"AutoRenew\\\": false, \\n                    \\\"ContractAcceptanceDate\\\": \\\"2016-10-20\\\", \\n                    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"InitialTerm\\\": 12, \\n                    \\\"Name\\\": \\\"S_1476935174239\\\", \\n                    \\\"Notes\\\": \\\"this is notes\\\", \\n                    \\\"RenewalTerm\\\": 12, \\n                    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermStartDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermType\\\": \\\"TERMED\\\"\\n                }\\n            }\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/subscribe\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"subscribes\\\": [\\n        {\\n            \\\"Account\\\": {\\n                \\\"AccountNumber\\\": \\\"AN_1476935174239\\\", \\n                \\\"AutoPay\\\": false, \\n                \\\"Batch\\\": \\\"Batch1\\\", \\n                \\\"BillCycleDay\\\": 1, \\n                \\\"Currency\\\": \\\"USD\\\", \\n                \\\"Name\\\": \\\"AC_1476935174239\\\", \\n                \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n                \\\"Status\\\": \\\"Draft\\\"\\n            }, \\n            \\\"BillToContact\\\": {\\n                \\\"Address1\\\": \\\"312 2nd Ave W\\\", \\n                \\\"City\\\": \\\"Seattle\\\", \\n                \\\"Country\\\": \\\"United States\\\", \\n                \\\"FirstName\\\": \\\"FN1476935174239\\\", \\n                \\\"LastName\\\": \\\"LN1476935174239\\\", \\n                \\\"PersonalEmail\\\": \\\"person@test.com\\\", \\n                \\\"PostalCode\\\": \\\"98119\\\", \\n                \\\"State\\\": \\\"Washington\\\", \\n                \\\"WorkEmail\\\": \\\"work@test.com\\\"\\n            }, \\n            \\\"PaymentMethod\\\": {\\n                \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W\\\", \\n                \\\"CreditCardCity\\\": \\\"Seattle\\\", \\n                \\\"CreditCardCountry\\\": \\\"United States\\\", \\n                \\\"CreditCardExpirationMonth\\\": 12, \\n                \\\"CreditCardExpirationYear\\\": 2020, \\n                \\\"CreditCardHolderName\\\": \\\"Somebody\\\", \\n                \\\"CreditCardNumber\\\": \\\"4111111111111111\\\", \\n                \\\"CreditCardPostalCode\\\": \\\"98119\\\", \\n                \\\"CreditCardState\\\": \\\"Washington\\\", \\n                \\\"CreditCardType\\\": \\\"Visa\\\", \\n                \\\"Type\\\": \\\"CreditCard\\\"\\n            }, \\n            \\\"PreviewOptions\\\": {\\n                \\\"EnablePreviewMode\\\": false, \\n                \\\"NumberOfPeriods\\\": 3\\n            }, \\n            \\\"SubscribeOptions\\\": {\\n                \\\"GenerateInvoice\\\": true, \\n                \\\"ProcessPayments\\\": false, \\n                \\\"SubscribeInvoiceProcessingOptions\\\": {}\\n            }, \\n            \\\"SubscriptionData\\\": {\\n                \\\"RatePlanData\\\": [\\n                    {\\n                        \\\"RatePlan\\\": {\\n                            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e0324735512b\\\"\\n                        }, \\n                        \\\"RatePlanChargeData\\\": [\\n                            {\\n                                \\\"RatePlanCharge\\\": {\\n                                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e03247c2512d\\\"\\n                                }\\n                            }\\n                        ]\\n                    }\\n                ], \\n                \\\"Subscription\\\": {\\n                    \\\"AutoRenew\\\": false, \\n                    \\\"ContractAcceptanceDate\\\": \\\"2016-10-20\\\", \\n                    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n                    \\\"InitialTerm\\\": 12, \\n                    \\\"Name\\\": \\\"S_1476935174239\\\", \\n                    \\\"Notes\\\": \\\"this is notes\\\", \\n                    \\\"RenewalTerm\\\": 12, \\n                    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermStartDate\\\": \\\"2016-10-20\\\", \\n                    \\\"TermType\\\": \\\"TERMED\\\"\\n                }\\n            }\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/action/update": {
      "post": {
        "description": "\nUpdates the information in one or more objects of the same type. You can specify different types of objects in different update calls, but each specific update call must apply to only one type of object.\n\nYou can update an array of one or more zObjects. It returns an array of SaveResults, indicating the success or failure of updating each object. The following information applies to this call:\n\n* You cannot pass in null zObjects.\n* You can pass in a maximum of 50 zObjects at a time.\n* All objects must be of the same type.\n* For each field in each object, you must determine that object's ID. Then populate the fields that you want update with the new information.\n* Zuora ignores unrecognized fields in update calls. For example, if an optional field is spelled incorrectly or a field that does not exist is specified, Zuora ignores the field and continues to process the call. No error message is returned for unrecognized fields.\n\n## Object Limits \n50 objects are supported in a single call.\n",
        "operationId": "Action_POSTupdate",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "updateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyActionupdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": [
                {
                  "Id": "2c93808457d787030157e0321fdf4fab",
                  "Success": true
                }
              ]
            },
            "schema": {
              "$ref": "#/definitions/ProxyActionupdateResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "Update",
        "tags": [
          "Actions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"objects\": [\n        {\n            \"AccountNumber\": \"AN_1476935163869\", \n            \"AutoPay\": true, \n            \"Batch\": \"Batch1\", \n            \"BillCycleDay\": 1, \n            \"BillToId\": \"2c93808457d787030157e03220684fac\", \n            \"CrmId\": \"crmid\", \n            \"Currency\": \"USD\", \n            \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n            \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n            \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n            \"Name\": \"AC_1476935163869\", \n            \"Notes\": \"this is notes\", \n            \"PaymentTerm\": \"Due Upon Receipt\", \n            \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n            \"Status\": \"Active\"\n        }\n    ], \n    \"type\": \"Account\"\n}' \"https://rest.zuora.com//v1/action/update\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/action/update');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"objects\": [\n        {\n            \"AccountNumber\": \"AN_1476935163869\", \n            \"AutoPay\": true, \n            \"Batch\": \"Batch1\", \n            \"BillCycleDay\": 1, \n            \"BillToId\": \"2c93808457d787030157e03220684fac\", \n            \"CrmId\": \"crmid\", \n            \"Currency\": \"USD\", \n            \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n            \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n            \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n            \"Name\": \"AC_1476935163869\", \n            \"Notes\": \"this is notes\", \n            \"PaymentTerm\": \"Due Upon Receipt\", \n            \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n            \"Status\": \"Active\"\n        }\n    ], \n    \"type\": \"Account\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n            \\\"AutoPay\\\": true, \\n            \\\"Batch\\\": \\\"Batch1\\\", \\n            \\\"BillCycleDay\\\": 1, \\n            \\\"BillToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n            \\\"CrmId\\\": \\\"crmid\\\", \\n            \\\"Currency\\\": \\\"USD\\\", \\n            \\\"DefaultPaymentMethodId\\\": \\\"2c93808457d787030157e03220ec4fad\\\", \\n            \\\"Id\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n            \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n            \\\"Name\\\": \\\"AC_1476935163869\\\", \\n            \\\"Notes\\\": \\\"this is notes\\\", \\n            \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n            \\\"SoldToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n            \\\"Status\\\": \\\"Active\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"Account\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/action/update\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n            \\\"AutoPay\\\": true, \\n            \\\"Batch\\\": \\\"Batch1\\\", \\n            \\\"BillCycleDay\\\": 1, \\n            \\\"BillToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n            \\\"CrmId\\\": \\\"crmid\\\", \\n            \\\"Currency\\\": \\\"USD\\\", \\n            \\\"DefaultPaymentMethodId\\\": \\\"2c93808457d787030157e03220ec4fad\\\", \\n            \\\"Id\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n            \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n            \\\"Name\\\": \\\"AC_1476935163869\\\", \\n            \\\"Notes\\\": \\\"this is notes\\\", \\n            \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n            \\\"SoldToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n            \\\"Status\\\": \\\"Active\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"Account\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/action/update\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/action/update\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n            \\\"AutoPay\\\": true, \\n            \\\"Batch\\\": \\\"Batch1\\\", \\n            \\\"BillCycleDay\\\": 1, \\n            \\\"BillToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n            \\\"CrmId\\\": \\\"crmid\\\", \\n            \\\"Currency\\\": \\\"USD\\\", \\n            \\\"DefaultPaymentMethodId\\\": \\\"2c93808457d787030157e03220ec4fad\\\", \\n            \\\"Id\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n            \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n            \\\"Name\\\": \\\"AC_1476935163869\\\", \\n            \\\"Notes\\\": \\\"this is notes\\\", \\n            \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n            \\\"SoldToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n            \\\"Status\\\": \\\"Active\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"Account\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/action/update\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"objects\\\": [\\n        {\\n            \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n            \\\"AutoPay\\\": true, \\n            \\\"Batch\\\": \\\"Batch1\\\", \\n            \\\"BillCycleDay\\\": 1, \\n            \\\"BillToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n            \\\"CrmId\\\": \\\"crmid\\\", \\n            \\\"Currency\\\": \\\"USD\\\", \\n            \\\"DefaultPaymentMethodId\\\": \\\"2c93808457d787030157e03220ec4fad\\\", \\n            \\\"Id\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n            \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n            \\\"Name\\\": \\\"AC_1476935163869\\\", \\n            \\\"Notes\\\": \\\"this is notes\\\", \\n            \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n            \\\"SoldToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n            \\\"Status\\\": \\\"Active\\\"\\n        }\\n    ], \\n    \\\"type\\\": \\\"Account\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/amendments/subscriptions/{subscription-id}": {
      "get": {
        "description": "Retrieves detailed information about the amendment with the specified subscription.",
        "operationId": "GET_AmendmentsBySubscriptionID",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The ID of the subscription whose amendment changes you want to retrieve.",
            "in": "path",
            "name": "subscription-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "autoRenew": false,
                "baseSubscriptionId": "402896a9529c100a01529c2f2cc30010",
                "code": "A-AM00000002",
                "contractEffectiveDate": "2016-02-01",
                "currentTerm": 2,
                "currentTermPeriodType": "Month",
                "customerAcceptanceDate": "2016-02-01",
                "description": "just for test",
                "destinationAccountId": "402896a9529bc3dc01529bcba7120023",
                "destinationInvoiceOwnerId": "402896a9529bc3dc01529bcba7120023",
                "effectiveDate": "2016-02-01",
                "id": "402896a9529c100a01529c30e26a0018",
                "name": "testAmendment",
                "newSubscriptionId": "402896a9529c100a01529c311930001d",
                "renewalSetting": "RENEW_WITH_SPECIFIC_TERM",
                "renewalTerm": 1,
                "renewalTermPeriodType": "Month",
                "serviceActivationDate": "2016-02-01",
                "status": "Completed",
                "success": true,
                "termStartDate": "2015-12-31",
                "termType": "TERMED",
                "type": "TermsAndConditions"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAmendmentType"
            }
          }
        },
        "summary": "Get amendments by subscription ID",
        "tags": [
          "Amendments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/amendments/subscriptions/{subscription-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/amendments/subscriptions/{subscription-id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/amendments/subscriptions/{subscription-id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/amendments/subscriptions/{subscription-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/amendments/subscriptions/{subscription-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/amendments/subscriptions/{subscription-id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/amendments/{amendment-key}": {
      "get": {
        "description": "Retrieves detailed information about the specified subscription amendment.",
        "operationId": "GET_AmendmentsByKey",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Can be the amendment ID or the amendment code.",
            "in": "path",
            "name": "amendment-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "autoRenew": false,
                "baseSubscriptionId": "402896a9529c100a01529c2f2cc30010",
                "code": "A-AM00000002",
                "contractEffectiveDate": "2016-02-01",
                "currentTerm": 2,
                "currentTermPeriodType": "Month",
                "customerAcceptanceDate": "2016-02-01",
                "description": "just for test",
                "destinationAccountId": "402896a9529bc3dc01529bcba7120023",
                "destinationInvoiceOwnerId": "402896a9529bc3dc01529bcba7120023",
                "effectiveDate": "2016-02-01",
                "id": "402896a9529c100a01529c30e26a0018",
                "name": "testAmendment",
                "newSubscriptionId": "402896a9529c100a01529c311930001d",
                "renewalSetting": "RENEW_WITH_SPECIFIC_TERM",
                "renewalTerm": 1,
                "renewalTermPeriodType": "Month",
                "serviceActivationDate": "2016-02-01",
                "status": "Completed",
                "success": true,
                "termStartDate": "2015-12-31",
                "termType": "TERMED",
                "type": "TermsAndConditions"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAmendmentType"
            }
          }
        },
        "summary": "Get amendments by key",
        "tags": [
          "Amendments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/amendments/{amendment-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/amendments/{amendment-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/amendments/{amendment-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/amendments/{amendment-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/amendments/{amendment-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/amendments/{amendment-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/attachments": {
      "post": {
        "description": "Use the Add Attachment REST request with a multipart/form-data to attach a document file to an Account, a Subscription, or an Invoice.",
        "operationId": "POST_Attachments",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Description of the attachment document.\n",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Specify one of the following values: Account, Subscription, or Invoice.\n",
            "in": "query",
            "name": "associatedObjectType",
            "required": true,
            "type": "string"
          },
          {
            "description": "For the Subscription type, specify the Subscription Number. An attachment is tied to the Subscription Number and thus viewable with every subscription version.\n\nFor Account and Invoice, specify the id.\n",
            "in": "query",
            "name": "associatedObjectKey",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTAttachmentType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "fileId": "402880ea536ff494015372a7ea12001e",
                "id": "402880ea536ff494015372a7ea17001f",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTAttachmentResponseType"
            }
          }
        },
        "summary": "Add attachments",
        "tags": [
          "Attachments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '\"curl\\n--form \\\"file=@PODocument.pdf\\\" \\\\\\n-X POST https://rest.zuora.com/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\"' \"https://rest.zuora.com//v1/attachments\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/attachments');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('\"curl\\n--form \\\"file=@PODocument.pdf\\\" \\\\\\n-X POST https://rest.zuora.com/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\"');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"\\\"curl\\\\n--form \\\\\\\"file=@PODocument.pdf\\\\\\\" \\\\\\\\\\\\n-X POST https://rest.zuora.com/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\\\"\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/attachments\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"\\\"curl\\\\n--form \\\\\\\"file=@PODocument.pdf\\\\\\\" \\\\\\\\\\\\n-X POST https://rest.zuora.com/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\\\"\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/attachments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/attachments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"\\\"curl\\\\n--form \\\\\\\"file=@PODocument.pdf\\\\\\\" \\\\\\\\\\\\n-X POST https://rest.zuora.com/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\\\"\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/attachments\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"\\\"curl\\\\n--form \\\\\\\"file=@PODocument.pdf\\\\\\\" \\\\\\\\\\\\n-X POST https://rest.zuora.com/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\\\"\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/attachments/{attachment-id}": {
      "delete": {
        "description": "Use the Delete Attachment REST request to delete an attachment from a Zuora object.",
        "operationId": "DELETE_Attachments",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Id of the attachment to be deleted.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete attachments",
        "tags": [
          "Attachments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/attachments/{attachment-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/attachments/{attachment-id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/attachments/{attachment-id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/attachments/{attachment-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/attachments/{attachment-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/attachments/{attachment-id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "Use the View Attachment REST request to retrieve information about an attachment document.",
        "operationId": "GET_Attachments",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Id of the attachment you want to view.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "createdBy": "4028e487327fd45a0132829ebb673ff9",
                "createdOn": "2016-05-02 13:09:17",
                "description": "",
                "fileContentType": "text/plain",
                "fileId": "8a8083e1545b706a01547316d9094400",
                "fileName": "AttachTest.txt",
                "id": "8a8083e1545b706a01547316d93f4401",
                "success": true,
                "updatedBy": "4028e487327fd45a0132829ebb673ff9",
                "updatedOn": "2016-05-02 13:09:17"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAttachmentResponseType"
            }
          }
        },
        "summary": "View attachments",
        "tags": [
          "Attachments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/attachments/{attachment-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/attachments/{attachment-id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/attachments/{attachment-id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/attachments/{attachment-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/attachments/{attachment-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/attachments/{attachment-id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "Use the Edit Attachment REST request to make changes to the descriptive fields of an attachment, such as the description and the file name. You cannot change the actual content of the attached file in Zuora. If you need to change the actual content, you need to delete the attachment and add the updated file as a new attachment.",
        "operationId": "PUT_Attachments",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Id of the attachment to be updated.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PUTAttachmentType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Edit attachments",
        "tags": [
          "Attachments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '\"curl\\n-H \\\"filename\\\":\\\"Image123.png\\\" \\\\\\n-H \\\"description\\\":\\\"Updated Image\\\" \\\\\\n-H \\\"Accept:application:json\\\" \\\\\\n-X PUT https://rest.zuora.com/v1/attachments/8a8083e1545b706a015473153e4743f\"' \"https://rest.zuora.com//v1/attachments/{attachment-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/attachments/{attachment-id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('\"curl\\n-H \\\"filename\\\":\\\"Image123.png\\\" \\\\\\n-H \\\"description\\\":\\\"Updated Image\\\" \\\\\\n-H \\\"Accept:application:json\\\" \\\\\\n-X PUT https://rest.zuora.com/v1/attachments/8a8083e1545b706a015473153e4743f\"');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"\\\"curl\\\\n-H \\\\\\\"filename\\\\\\\":\\\\\\\"Image123.png\\\\\\\" \\\\\\\\\\\\n-H \\\\\\\"description\\\\\\\":\\\\\\\"Updated Image\\\\\\\" \\\\\\\\\\\\n-H \\\\\\\"Accept:application:json\\\\\\\" \\\\\\\\\\\\n-X PUT https://rest.zuora.com/v1/attachments/8a8083e1545b706a015473153e4743f\\\"\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/attachments/{attachment-id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"\\\"curl\\\\n-H \\\\\\\"filename\\\\\\\":\\\\\\\"Image123.png\\\\\\\" \\\\\\\\\\\\n-H \\\\\\\"description\\\\\\\":\\\\\\\"Updated Image\\\\\\\" \\\\\\\\\\\\n-H \\\\\\\"Accept:application:json\\\\\\\" \\\\\\\\\\\\n-X PUT https://rest.zuora.com/v1/attachments/8a8083e1545b706a015473153e4743f\\\"\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/attachments/{attachment-id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/attachments/{attachment-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"\\\"curl\\\\n-H \\\\\\\"filename\\\\\\\":\\\\\\\"Image123.png\\\\\\\" \\\\\\\\\\\\n-H \\\\\\\"description\\\\\\\":\\\\\\\"Updated Image\\\\\\\" \\\\\\\\\\\\n-H \\\\\\\"Accept:application:json\\\\\\\" \\\\\\\\\\\\n-X PUT https://rest.zuora.com/v1/attachments/8a8083e1545b706a015473153e4743f\\\"\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/attachments/{attachment-id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"\\\"curl\\\\n-H \\\\\\\"filename\\\\\\\":\\\\\\\"Image123.png\\\\\\\" \\\\\\\\\\\\n-H \\\\\\\"description\\\\\\\":\\\\\\\"Updated Image\\\\\\\" \\\\\\\\\\\\n-H \\\\\\\"Accept:application:json\\\\\\\" \\\\\\\\\\\\n-X PUT https://rest.zuora.com/v1/attachments/8a8083e1545b706a015473153e4743f\\\"\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/attachments/{object-type}/{object-key}": {
      "get": {
        "description": "Use the View Attachment REST request to get a list of attachments on an account, an invoice, or a subscription.",
        "operationId": "GET_AttachmentsList",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The type of object to list attachements for.\n",
            "enum": [
              "account",
              "invoice",
              "subscription"
            ],
            "in": "path",
            "name": "object-type",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the object to list attachements for.\n - If `object-type` is `account`, specify an account ID.\n - If `object-type` is `invoice`, specify an invoice ID.\n - If `object-type` is `subscription`, specify a subscription number.\n",
            "in": "path",
            "name": "object-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "attachments": [
                  {
                    "createdBy": "402881e522cf4f9b0122cf5d82860002",
                    "createdOn": "2016-03-21 14:00:47",
                    "fileContentType": "application/pdf",
                    "fileId": "402896b95397c169015397c2ebc50002",
                    "fileName": "Search _ Splunk.pdf",
                    "id": "402896b95397c169015397c2ebca0003",
                    "success": true,
                    "updatedBy": "402881e522cf4f9b0122cf5d82860002",
                    "updatedOn": "2016-03-21 14:00:47"
                  },
                  {
                    "createdBy": "4028e487327fd45a0132829ebb673ff9",
                    "createdOn": "2016-05-02 13:09:17",
                    "description": "",
                    "fileContentType": "text/plain",
                    "fileId": "8a8083e1545b706a01547316d9094400",
                    "fileName": "AttachTest.txt",
                    "id": "8a8083e1545b706a01547316d93f4401",
                    "updatedBy": "4028e487327fd45a0132829ebb673ff9",
                    "updatedOn": "2016-05-02 13:09:17"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETAttachmentsResponseType"
            }
          }
        },
        "summary": "View attachments list",
        "tags": [
          "Attachments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/attachments/{object-type}/{object-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/attachments/{object-type}/{object-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/attachments/{object-type}/{object-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/attachments/{object-type}/{object-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/attachments/{object-type}/{object-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/attachments/{object-type}/{object-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/bill-runs/{billRunId}/emails": {
      "post": {
        "description": "Manually emails all the billing documents that are generated from a specified bill run to your customers. \n\n\nBill runs can generate invoices and credit memos based on your [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos). Credit memos are only available if you have the Advanced AR Settlement feature enabled.\n\n\nUsing this API operation, the billing documents are sent to the email addresses specified in the **To Email** field of the email templates. The email template used for each billing document is set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.\n\n\n\n\n\n## Notes\n  - Even though no field is required in the Request body, you still need to specify `{}` in the request. Otherwise, an error will be returned.\n\n\n  - You can only email posted billing documents.\n  \n  \n  - You must activate the following notifications before emailing invoices and credit memos:\n    - **Manual Email For Invoice | Manual Email For Invoice** \n    - **Email Credit Memo | Manually email Credit Memo**\n \n  \n  - To include the invoice PDF in the email, select the **Include Invoice PDF** check box in the **Edit notification** dialog from the Zuora UI. To include the credit memo PDF in the email, select the **Include Credit Memo PDF** check box in the **Edit notification** dialog from the Zuora UI. See [Create and Edit Notifications](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/C_Create_Notifications#section_2) for more information.\n\n\n\n  - Zuora sends the email messages based on the email template you set. You can set the email template to use in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. By default, the following templates are used for billing documents:\n    - Invoices: **Invoice Posted Default Email Template**\n    - Credit memos: **Manual Email for Credit Memo Default Template**  \n\n    See [Create and Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information.\n  \n  \n",
        "operationId": "POST_EmailBillingDocumentsfromBillRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The ID of the bill run. For example, 2c92c8f95d0c886e015d11287a8f0f8b.\n",
            "in": "path",
            "name": "billRunId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTEmailBillingDocfromBillRunType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Email billing documents generated from bill run",
        "tags": [
          "Bill Run"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"resend\": \"true\"\n}' \"https://rest.zuora.com//v1/bill-runs/{billRunId}/emails\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/bill-runs/{billRunId}/emails');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"resend\": \"true\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"resend\\\": \\\"true\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/bill-runs/{billRunId}/emails\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"resend\\\": \\\"true\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/bill-runs/{billRunId}/emails\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/bill-runs/{billRunId}/emails\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"resend\\\": \\\"true\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/bill-runs/{billRunId}/emails\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"resend\\\": \\\"true\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/billing-preview-runs": {
      "post": {
        "description": "**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n\nCreates billing preview runs for multiple customer accounts.\n\nYou can run up to 10 billing previews in batches concurrently. A single batch of customer accounts can only have one billing preview run at a time. So you can have up to 10 batches running at the same time. If you create a billing preview run for all customer batches, you cannot create another billing preview run until this preview run is completed.\n",
        "operationId": "POST_BillingPreviewRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostBillingPreviewRunParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "billingPreviewRunId": "402890b757d1ec1b0157d5aa3d6802aa",
                "success": true
              }
            },
            "schema": {
              "properties": {
                "billingPreviewRunId": {
                  "description": "Id of the billing preview run.\n",
                  "type": "string"
                },
                "success": {
                  "description": "Returns `true` if the request was processed successfully.\n",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Create Billing Preview Run",
        "tags": [
          "Billing Preview Run"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"assumeRenewal\": \"None\", \n    \"batch\": \"\", \n    \"chargeTypeToExclude\": \"\", \n    \"includingEvergreenSubscription\": \"true\", \n    \"targetDate\": \"2017-01-10\"\n}' \"https://rest.zuora.com//v1/billing-preview-runs\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/billing-preview-runs');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"assumeRenewal\": \"None\", \n    \"batch\": \"\", \n    \"chargeTypeToExclude\": \"\", \n    \"includingEvergreenSubscription\": \"true\", \n    \"targetDate\": \"2017-01-10\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"assumeRenewal\\\": \\\"None\\\", \\n    \\\"batch\\\": \\\"\\\", \\n    \\\"chargeTypeToExclude\\\": \\\"\\\", \\n    \\\"includingEvergreenSubscription\\\": \\\"true\\\", \\n    \\\"targetDate\\\": \\\"2017-01-10\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/billing-preview-runs\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"assumeRenewal\\\": \\\"None\\\", \\n    \\\"batch\\\": \\\"\\\", \\n    \\\"chargeTypeToExclude\\\": \\\"\\\", \\n    \\\"includingEvergreenSubscription\\\": \\\"true\\\", \\n    \\\"targetDate\\\": \\\"2017-01-10\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/billing-preview-runs\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/billing-preview-runs\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"assumeRenewal\\\": \\\"None\\\", \\n    \\\"batch\\\": \\\"\\\", \\n    \\\"chargeTypeToExclude\\\": \\\"\\\", \\n    \\\"includingEvergreenSubscription\\\": \\\"true\\\", \\n    \\\"targetDate\\\": \\\"2017-01-10\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/billing-preview-runs\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"assumeRenewal\\\": \\\"None\\\", \\n    \\\"batch\\\": \\\"\\\", \\n    \\\"chargeTypeToExclude\\\": \\\"\\\", \\n    \\\"includingEvergreenSubscription\\\": \\\"true\\\", \\n    \\\"targetDate\\\": \\\"2017-01-10\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/billing-preview-runs/{billingPreviewRunId}": {
      "get": {
        "description": "**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\n\nRetrieves a preview of future invoice items for multiple customer accounts through a billing preview run. If you have the Advanced AR Settlement feature enabled,  you can also retrieve a preview of future credit memo items. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nA billing preview run asynchronously generates a downloadable CSV file containing a preview of invoice item data and credit memo item data for a batch of customer accounts.\n",
        "operationId": "GET_BillingPreviewRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Id of the billing preview run.\n",
            "in": "path",
            "name": "billingPreviewRunId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "assumeRenewal": "Autorenew",
                "batch": "AllBatches",
                "chargeTypeToExclude": "OneTime",
                "createdById": "4028906d58240f960158241132be0003",
                "createdDate": "2016-11-04 16:18:56",
                "endDate": "2016-11-04 16:19:00",
                "includingEvergreenSubscription": true,
                "resultFileUrl": "http://localhost:8080/apps/api/file/4028906d582d21a101582e6b663c0a65",
                "runNumber": "BPR-00000010",
                "startDate": "2016-11-04 16:19:00",
                "status": "Completed",
                "succeededAccounts": 7,
                "success": true,
                "targetDate": "2016-12-01",
                "totalAccounts": 7,
                "updatedById": "4028906d58240f960158241132be0003",
                "updatedDate": "2016-11-04 16:19:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/GetBillingPreviewRunResponse"
            }
          }
        },
        "summary": "Get Billing Preview Run",
        "tags": [
          "Billing Preview Run"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/billing-preview-runs/{billingPreviewRunId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/billing-preview-runs/{billingPreviewRunId}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/billing-preview-runs/{billingPreviewRunId}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/billing-preview-runs/{billingPreviewRunId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/billing-preview-runs/{billingPreviewRunId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/billing-preview-runs/{billingPreviewRunId}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/bulk": {
      "post": {
        "description": "This reference describes how to perform a mass action through the REST API. \n\nUsing this API method, you send a multipart/form-data request containing a `.csv` file with data about the mass action you want to perform. Zuora returns a key and then asynchronously processes the mass action. You can use the key to get details about the result of the mass action.\n",
        "operationId": "POST_MassUpdater",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Must be multipart/form-data.\n",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTMassUpdateType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "bulkKey": "402892f04c97b89a014c97bb30a50003",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTMassUpdateResponseType"
            }
          }
        },
        "summary": "Perform mass action",
        "tags": [
          "Mass Updater"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '\"curl\\n-H \\\"apiAccessKeyId:Username\\\"\\n-H \\\"apiSecretAccessKey:Password\\\"\\n-H \\\"Accept:application/json\\\"\\n--form \\\"file=@CreateRevenueSchedules.csv\\\"\\n--form \\\"params={actionType:CreateRevenueSchedule}\\\"\\n-X POST https://rest.zuora.com/v1/bulk\"' \"https://rest.zuora.com//v1/bulk\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/bulk');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('\"curl\\n-H \\\"apiAccessKeyId:Username\\\"\\n-H \\\"apiSecretAccessKey:Password\\\"\\n-H \\\"Accept:application/json\\\"\\n--form \\\"file=@CreateRevenueSchedules.csv\\\"\\n--form \\\"params={actionType:CreateRevenueSchedule}\\\"\\n-X POST https://rest.zuora.com/v1/bulk\"');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"\\\"curl\\\\n-H \\\\\\\"apiAccessKeyId:Username\\\\\\\"\\\\n-H \\\\\\\"apiSecretAccessKey:Password\\\\\\\"\\\\n-H \\\\\\\"Accept:application/json\\\\\\\"\\\\n--form \\\\\\\"file=@CreateRevenueSchedules.csv\\\\\\\"\\\\n--form \\\\\\\"params={actionType:CreateRevenueSchedule}\\\\\\\"\\\\n-X POST https://rest.zuora.com/v1/bulk\\\"\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/bulk\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"\\\"curl\\\\n-H \\\\\\\"apiAccessKeyId:Username\\\\\\\"\\\\n-H \\\\\\\"apiSecretAccessKey:Password\\\\\\\"\\\\n-H \\\\\\\"Accept:application/json\\\\\\\"\\\\n--form \\\\\\\"file=@CreateRevenueSchedules.csv\\\\\\\"\\\\n--form \\\\\\\"params={actionType:CreateRevenueSchedule}\\\\\\\"\\\\n-X POST https://rest.zuora.com/v1/bulk\\\"\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/bulk\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/bulk\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"\\\"curl\\\\n-H \\\\\\\"apiAccessKeyId:Username\\\\\\\"\\\\n-H \\\\\\\"apiSecretAccessKey:Password\\\\\\\"\\\\n-H \\\\\\\"Accept:application/json\\\\\\\"\\\\n--form \\\\\\\"file=@CreateRevenueSchedules.csv\\\\\\\"\\\\n--form \\\\\\\"params={actionType:CreateRevenueSchedule}\\\\\\\"\\\\n-X POST https://rest.zuora.com/v1/bulk\\\"\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/bulk\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"\\\"curl\\\\n-H \\\\\\\"apiAccessKeyId:Username\\\\\\\"\\\\n-H \\\\\\\"apiSecretAccessKey:Password\\\\\\\"\\\\n-H \\\\\\\"Accept:application/json\\\\\\\"\\\\n--form \\\\\\\"file=@CreateRevenueSchedules.csv\\\\\\\"\\\\n--form \\\\\\\"params={actionType:CreateRevenueSchedule}\\\\\\\"\\\\n-X POST https://rest.zuora.com/v1/bulk\\\"\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/bulk/{bulk-key}": {
      "get": {
        "description": "This reference describes how to get information about the result of a mass action through the REST API. \n",
        "operationId": "GET_MassUpdater",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "String of 32 characters that identifies a mass action. You get the bulk-key after performing a mass action through the REST API.\n",
            "in": "path",
            "name": "bulk-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "actionType": "UpdateAccountingCode",
                "endedOn": "2015-04-07 14:32:01",
                "errorCount": 1,
                "inputSize": 354,
                "outputSize": 350,
                "outputType": "(url:.csv.zip)",
                "outputURL": "https://rest.zuora.com/api/file/402892c84c9285b1014c9293f5320007",
                "processedCount": 3,
                "startedOn": "2015-04-07 14:22:11",
                "status": "Completed",
                "success": true,
                "successCount": 2,
                "totalCount": 3,
                "uploadedBy": "john.doe@acme.com",
                "uploadedOn": "2015-04-07 14:22:09"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETMassUpdateType"
            }
          }
        },
        "summary": "Get mass action result",
        "tags": [
          "Mass Updater"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/bulk/{bulk-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/bulk/{bulk-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/bulk/{bulk-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/bulk/{bulk-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/bulk/{bulk-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/bulk/{bulk-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/bulk/{bulk-key}/stop": {
      "put": {
        "description": "This reference describes how to stop a mass action through the REST API. You can stop a mass action when its status is Pending or Processing. After you have stopped a mass action, you can get the mass action result to see details of the mass action.\n\n- If you stop a mass action when its status is Pending, no response file is generated because no records have been processed.\n\n- If you stop a mass action when its status is Processing, a response file is generated. You can check the response file to see which records have been processed and which have not. In the response file, the **Success** column has the value `Y` (successful) or `N` (failed) for processed records, and a blank value for unprocessed records.\n\nRecords that have already been processed when a mass action is stopped are not rolled back.\n",
        "operationId": "PUT_MassUpdater",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "String of 32 characters that identifies a mass action. You get the bulk-key after performing a mass action through the REST API.\n",
            "in": "path",
            "name": "bulk-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Stop mass action",
        "tags": [
          "Mass Updater"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/bulk/{bulk-key}/stop\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/bulk/{bulk-key}/stop');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/bulk/{bulk-key}/stop\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/bulk/{bulk-key}/stop\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/bulk/{bulk-key}/stop\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/bulk/{bulk-key}/stop\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/catalog/products": {
      "get": {
        "description": "This REST API reference describes how to retrieve the entire product catalog, including all products, features, and their corresponding rate plans, charges. Products are returned in reverse chronological order on the UpdatedDate field. \n\nWith rate plans and rate plan charges, the REST API has a maximum array size. \n",
        "operationId": "GET_Catalog",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_catalog"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "products": [
                  {
                    "category": "Base Products",
                    "description": "",
                    "effectiveEndDate": "2020-01-01",
                    "effectiveStartDate": "2017-01-01",
                    "id": "8a8082c45aa81b51015ad5a2d07d0e89",
                    "name": "ABC",
                    "productRatePlans": [
                      {
                        "description": "",
                        "effectiveEndDate": "2020-01-01",
                        "effectiveStartDate": "2017-01-01",
                        "id": "8a8082c45aa81b51015ad5a473fb0e8d",
                        "name": "RatePlan 1",
                        "productRatePlanCharges": [
                          {
                            "applyDiscountTo": "ONETIMERECURRINGUSAGE",
                            "billingDay": "DefaultFromCustomer",
                            "billingPeriod": "Month",
                            "billingPeriodAlignment": "AlignToCharge",
                            "description": "",
                            "discountClass": "VIP Discount",
                            "discountLevel": "subscription",
                            "endDateCondition": "Subscription_End",
                            "financeInformation": {},
                            "id": "8a8082c45aa81b51015ad683bc590fd8",
                            "model": "DiscountFixedAmount",
                            "name": "Discount-Fixed 10",
                            "pricing": [
                              {
                                "currency": "USD",
                                "discountAmount": 10,
                                "includedUnits": 0
                              }
                            ],
                            "pricingSummary": [
                              "USD10 fixed amount discount"
                            ],
                            "productDiscountApplyDetails": [
                              {
                                "appliedProductRatePlanChargeId": "8a8082c45aa81b51015ad5a655c00e8f",
                                "appliedProductRatePlanId": "8a8082c45aa81b51015ad5a473fb0e8d"
                              }
                            ],
                            "taxable": false,
                            "triggerEvent": "ContractEffective",
                            "type": "Recurring",
                            "useDiscountSpecificAccountingCode": false
                          },
                          {
                            "billingDay": "DefaultFromCustomer",
                            "billingPeriod": "Annual",
                            "billingPeriodAlignment": "AlignToCharge",
                            "billingTiming": "IN_ADVANCE",
                            "description": "",
                            "endDateCondition": "Subscription_End",
                            "financeInformation": {
                              "deferredRevenueAccountingCode": "",
                              "recognizedRevenueAccountingCode": ""
                            },
                            "id": "8a8082c45aa81b51015ad5a655c00e8f",
                            "listPriceBase": "Per_Billing_Period",
                            "model": "FlatFee",
                            "name": "Annual Charge",
                            "pricing": [
                              {
                                "currency": "USD",
                                "price": 100
                              }
                            ],
                            "pricingSummary": [
                              "USD100"
                            ],
                            "productDiscountApplyDetails": [],
                            "revenueRecognitionRuleName": "Recognize upon invoicing",
                            "taxCode": "",
                            "taxMode": "TaxExclusive",
                            "taxable": false,
                            "triggerEvent": "ContractEffective",
                            "type": "Recurring",
                            "useTenantDefaultForPriceChange": true
                          }
                        ],
                        "status": "Active"
                      }
                    ],
                    "sku": "SKU-00000987"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCatalogType"
            }
          }
        },
        "summary": "Get product catalog",
        "tags": [
          "Catalog"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/catalog/products\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/catalog/products');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/catalog/products\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/catalog/products\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/catalog/products\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/catalog/products\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/catalog/products/{product-id}/share": {
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nShares a product with a target entity. Zuora synchronizes the shared products to the target entity after sharing. For more information about product sharing, see [Products Sharing Across Entities](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity/C_Business_Objects_Sharing_Across_Entities/B_Products_Sharing_Across_Entities).\n\nNote that:\n\n- You must finish all the [prerequisites](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity/C_Business_Objects_Sharing_Across_Entities/B_Products_Sharing_Across_Entities/Share_Products) before sharing products with other entities. \n\n- Only source entity administrators have permission to share products with other entities. You must make the call as a source entity administrator.\n\n- Currently, you can only share a product with one entity at a time. An error occurs if you try to share a product to more than one entity.\n",
        "operationId": "PUT_Catalog",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The Id of the product you want to share. For example, 8a808255575bdae4015774e9602e16fe.",
            "in": "path",
            "name": "product-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTCatalogType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Multi-entity: Share a Product with an Entity",
        "tags": [
          "Catalog"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"targetEntityIds\": [\n        \"8a80825555a3c7a10155b460f53858e6\"\n    ]\n}' \"https://rest.zuora.com//v1/catalog/products/{product-id}/share\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/catalog/products/{product-id}/share');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"targetEntityIds\": [\n        \"8a80825555a3c7a10155b460f53858e6\"\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"targetEntityIds\\\": [\\n        \\\"8a80825555a3c7a10155b460f53858e6\\\"\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/catalog/products/{product-id}/share\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"targetEntityIds\\\": [\\n        \\\"8a80825555a3c7a10155b460f53858e6\\\"\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/catalog/products/{product-id}/share\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/catalog/products/{product-id}/share\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"targetEntityIds\\\": [\\n        \\\"8a80825555a3c7a10155b460f53858e6\\\"\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/catalog/products/{product-id}/share\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"targetEntityIds\\\": [\\n        \\\"8a80825555a3c7a10155b460f53858e6\\\"\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/charge-revenue-summaries/subscription-charges/{charge-key}": {
      "get": {
        "description": "This REST API reference describes how to retrieve the details of a charge revenue summary by specifying the subscription charge ID. This response retrieves all revenue items associated with a charge revenue summary.\n",
        "operationId": "GET_CRSByChargeID",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012.\n",
            "in": "path",
            "name": "charge-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c92c0f9410f55ee014110a008f6791f",
                "amount": 428,
                "currency": "USD",
                "number": "CRS-00000001",
                "recognitionRuleName": "Recognize daily over time",
                "recognizedRevenue": 0,
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2012-05-31",
                    "accountingPeriodName": "May 2012",
                    "accountingPeriodStartDate": "2012-05-01",
                    "amount": 100,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2012-06-30",
                    "accountingPeriodName": "Jun 2012",
                    "accountingPeriodStartDate": "2012-06-01",
                    "amount": 92,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2012-07-31",
                    "accountingPeriodName": "Jul 2012",
                    "accountingPeriodStartDate": "2012-07-01",
                    "amount": 0,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2012-08-31",
                    "accountingPeriodName": "Aug 2012",
                    "accountingPeriodStartDate": "2012-08-01",
                    "amount": 85,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2012-09-30",
                    "accountingPeriodName": "Sep 2012",
                    "accountingPeriodStartDate": "2012-09-01",
                    "amount": 85,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2013-01-31",
                    "accountingPeriodName": "Jan'2013",
                    "accountingPeriodStartDate": "2013-01-01",
                    "amount": 80,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2013-02-28",
                    "accountingPeriodName": "Feb'2013",
                    "accountingPeriodStartDate": "2013-02-01",
                    "amount": 5,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2013-09-30",
                    "accountingPeriodName": "Sep'2013",
                    "accountingPeriodStartDate": "2013-09-01",
                    "amount": -7,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2013-11-30",
                    "accountingPeriodName": "Nov'2013",
                    "accountingPeriodStartDate": "2013-11-01",
                    "amount": -12,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2014-01-10",
                    "accountingPeriodName": "Dec 2013",
                    "accountingPeriodStartDate": "2013-12-11",
                    "amount": 0,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodName": "Open-Ended",
                    "accountingPeriodStartDate": "2014-03-12",
                    "amount": 0,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  }
                ],
                "subscriptionChargeId": "2c92c0f9410f55dd014110b22cbc023f",
                "subscriptionId": "2c92c0f9410f55dd014110a14aa47f09",
                "success": true,
                "undistributedUnrecognizedRevenue": 0,
                "unrecognizedRevenue": 428
              }
            },
            "schema": {
              "$ref": "#/definitions/GETChargeRSDetailType"
            }
          }
        },
        "summary": "Get charge summary details by charge ID",
        "tags": [
          "Charge Revenue Summaries"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/charge-revenue-summaries/subscription-charges/{charge-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/charge-revenue-summaries/subscription-charges/{charge-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/charge-revenue-summaries/subscription-charges/{charge-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/charge-revenue-summaries/subscription-charges/{charge-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/charge-revenue-summaries/subscription-charges/{charge-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/charge-revenue-summaries/subscription-charges/{charge-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/charge-revenue-summaries/{crs-number}": {
      "get": {
        "description": "This REST API reference describes how to retrieve the details of a charge revenue summary by specifying the charge revenue summary number. The response includes all revenue items associated with the charge revenue summary.\n",
        "operationId": "GET_CRSByCRSNumber",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The charge revenue summary number.\n",
            "in": "path",
            "name": "crs-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c92c0f8439770960143b2141f5a555e",
                "amount": 660,
                "currency": "USD",
                "number": "CRS-00000001",
                "recognitionRuleName": "Recognize upon invoicing",
                "recognizedRevenue": 0,
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2013-09-30",
                    "accountingPeriodName": "Sep'2013",
                    "accountingPeriodStartDate": "2013-09-01",
                    "amount": 35,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2013-10-31",
                    "accountingPeriodName": "Oct'2013",
                    "accountingPeriodStartDate": "2013-10-01",
                    "amount": 50,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodName": "Open-Ended",
                    "accountingPeriodStartDate": "2013-12-11",
                    "amount": 150,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  }
                ],
                "subscriptionChargeId": "2c92c0f943977b4f0143b11187ed432e",
                "subscriptionId": "2c92c0f943977b4f0143b23487999327",
                "success": true,
                "undistributedUnrecognizedRevenue": 565,
                "unrecognizedRevenue": 660
              }
            },
            "schema": {
              "$ref": "#/definitions/GETChargeRSDetailType"
            }
          }
        },
        "summary": "Get charge summary details by CRS number",
        "tags": [
          "Charge Revenue Summaries"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/charge-revenue-summaries/{crs-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/charge-revenue-summaries/{crs-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/charge-revenue-summaries/{crs-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/charge-revenue-summaries/{crs-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/charge-revenue-summaries/{crs-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/charge-revenue-summaries/{crs-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/connections": {
      "post": {
        "description": "Establishes a connection to the Zuora REST API service based on a valid user credentials.\n\nThis call authenticates the user and returns an API session cookie that's used to authorize subsequent calls to the REST API. A call to `connections` is a required first step before using the Zuora REST API to access data.\n\nThe credentials must belong to a user account that has permission to access the API service.\n\nAs noted elsewhere, it's strongly recommended that an account used for Zuora API activity is never used to log into the Zuora UI.  Once an account is used to log into the UI, it may be subject to periodic forced password changes, which may eventually lead to authentication failures when using the API.\n",
        "operationId": "POST_Connections",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Account username\n",
            "in": "header",
            "name": "apiAccessKeyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Account password\n",
            "in": "header",
            "name": "apiSecretAccessKey",
            "required": true,
            "type": "string"
          },
          {
            "description": "Must be set to \"application/json\"\n",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Establish connection to Zuora REST API service",
        "tags": [
          "Connections"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/connections\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/connections');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/connections\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/connections\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/connections\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/connections\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all credit memos.\n",
        "operationId": "GET_CreditMemos",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "This parameter restricts the data returned in the response. You can use this parameter to supply a dimension you want to filter on.\n\n A single filter uses the following form: \n\n*fieldsFilterable* `=` *field_value*\n            \nFilters can be combined by using `&`. For example: *fieldsFilterable* `=` *field_value* `&` *fieldsFilterable* `=` *field_value*\n\n*fieldsFilterable* indicates the name of a supported field that you can use to filter the response data. The supported filterable fields of this operation are as below:\n\n  - number\n  - accountID \n  - currency\n  - creditMemoDate\n  - targetDate\n  - status\n  - amount\n  - taxAmount\n  - totalTaxExemptAmount\n  - unappliedAmount\n  - refundAmount\n  - appliedAmount\n  - referredInvoiceId\n  - transferredToAccounting\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  - autoApplyUponPosting\n  - excludeFromAutoApplyRules\n\n *field_value* indicates a valid value of the filterable field. If the type of the field value is string, you can set the field to `null` value for filtering. Then, you can get the response data with this field value being 'null'. For more information about these fields, see the field descriptions in the **Responses** section. \n  \nExamples:\n\n- /creditmemos?status=Processed\n\n- /creditmemos?referredInvoiceId=null&status=Draft\n\n- /creditmemos?status=Processed&type=External&sort=+number\n",
            "in": "query",
            "name": "fieldsFilterable",
            "required": false,
            "type": "string"
          },
          {
            "description": "This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.\n\nA sortable field uses the following form: \n\n*operator* *field_name*\n\nYou can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*  \n\n*operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.\n\n  - The `-` operator indicates an ascending order.\n  - The `+` operator indicates a descending order.\n\nBy default, the response data is displayed in descending order by credit memo number.\n\n*field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:\n\n  - number\n  - accountID \n  - creditMemoDate\n  - targetDate\n  - status\n  - amount\n  - taxAmount\n  - totalTaxExemptAmount\n  - unappliedAmount\n  - refundAmount\n  - appliedAmount\n  - referredInvoiceId\n  - transferredToAccounting\n  - createdDate\n  - createdById\n  - updatedDate\n\n  \nExamples:\n\n- /creditmemos?sort=+number\n\n- /creditmemos?status=Processed&sort=-number,+amount\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "creditmemos": [
                  {
                    "accountId": "2c92c8f95bd63b98015bd7ab09ef0926",
                    "amount": 23,
                    "appliedAmount": 0,
                    "autoApplyUponPosting": false,
                    "comment": "",
                    "createdById": "2c92c8f95b79c9ad015b80614273052c",
                    "createdDate": "2017-05-05 01:39:30",
                    "creditMemoDate": "2017-05-05",
                    "currency": "USD",
                    "excludeFromAutoApplyRules": false,
                    "id": "2c92c8f95bd63b94015bd7c39289112e",
                    "latestPDFFileId": "2c92c8955bd63b6c015bd7c395e90023",
                    "number": "CM00000002",
                    "reasonCode": "Correcting invoice error",
                    "referredInvoiceId": "2c92c8955bd63cc1015bd7c151af02ab",
                    "refundAmount": 0,
                    "source": "BillRun",
                    "sourceId": "BR-00000024",
                    "status": "Draft",
                    "taxAmount": 0,
                    "totalTaxExemptAmount": 0,
                    "transferredToAccounting": "No",
                    "unappliedAmount": 23,
                    "updatedById": "2c92c8f95b79c9ad015b80614273052c",
                    "updatedDate": "2017-05-05 01:39:30"
                  },
                  {
                    "accountId": "2c92c8f95bd63b98015bd7ab09ef0926",
                    "amount": 10,
                    "appliedAmount": 0,
                    "autoApplyUponPosting": false,
                    "comment": "",
                    "createdById": "2c92c8f95b79c9ad015b80614273052c",
                    "createdDate": "2017-05-05 01:15:23",
                    "creditMemoDate": "2017-05-01",
                    "currency": "USD",
                    "excludeFromAutoApplyRules": false,
                    "id": "2c92c8f95bd63b9d015bd7ad7fe206f9",
                    "latestPDFFileId": "2c92c8955bd63b6c015bd7ad8921001d",
                    "number": "CM00000001",
                    "reasonCode": "Correcting invoice error",
                    "refundAmount": 0,
                    "source": "AdhocFromInvoice",
                    "status": "Draft",
                    "taxAmount": 0,
                    "totalTaxExemptAmount": 0,
                    "transferredToAccounting": "No",
                    "unappliedAmount": 10,
                    "updatedById": "2c92c8f95b79c9ad015b80614273052c",
                    "updatedDate": "2017-05-05 01:15:24"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoCollectionType"
            }
          }
        },
        "summary": "Get credit memos",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCreates an ad-hoc credit memo from a product rate plan charge. Zuora only supports one-time negative charges for credit memos.\n",
        "operationId": "POST_CreditMemoFromPrpc",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreditMemoFromChargeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7e9791015a7f15fe44001c",
                "amount": 2020,
                "appliedAmount": 0,
                "autoApplyUponPosting": false,
                "comment": "the comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 15:31:10",
                "creditMemoDate": "2017-10-17",
                "currency": "USD",
                "excludeFromAutoApplyRules": false,
                "id": "402890555a87d7f5015a88c7a6830022",
                "number": "CM00000015",
                "reasonCode": "Correcting invoice error",
                "refundAmount": 0,
                "source": "AdhocFromPrpc",
                "status": "Draft",
                "success": true,
                "taxAmount": 0,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "unappliedAmount": 2020,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 15:31:10"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoType"
            }
          }
        },
        "summary": "Create credit memo from charge",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountId\": \"402890555a7e9791015a7f15fe44001c\", \n    \"charges\": [\n        {\n            \"chargeId\": \"402890555a87d7f5015a88c613c5001e\", \n            \"comment\": \"this is comment1\", \n            \"memoItemAmount\": null, \n            \"serviceEndDate\": \"2018-10-17\", \n            \"serviceStartDate\": \"2017-10-17\"\n        }, \n        {\n            \"chargeId\": \"402890555a7d4022015a7d90906b0067\", \n            \"comment\": \"this is comment2\", \n            \"memoItemAmount\": 20, \n            \"serviceEndDate\": \"2018-10-17\", \n            \"serviceStartDate\": \"2017-10-17\"\n        }\n    ], \n    \"comment\": \"the comment\", \n    \"effectiveDate\": \"2017-10-17\", \n    \"reasonCode\": \"Correcting invoice error\"\n}' \"https://rest.zuora.com//v1/creditmemos\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountId\": \"402890555a7e9791015a7f15fe44001c\", \n    \"charges\": [\n        {\n            \"chargeId\": \"402890555a87d7f5015a88c613c5001e\", \n            \"comment\": \"this is comment1\", \n            \"memoItemAmount\": null, \n            \"serviceEndDate\": \"2018-10-17\", \n            \"serviceStartDate\": \"2017-10-17\"\n        }, \n        {\n            \"chargeId\": \"402890555a7d4022015a7d90906b0067\", \n            \"comment\": \"this is comment2\", \n            \"memoItemAmount\": 20, \n            \"serviceEndDate\": \"2018-10-17\", \n            \"serviceStartDate\": \"2017-10-17\"\n        }\n    ], \n    \"comment\": \"the comment\", \n    \"effectiveDate\": \"2017-10-17\", \n    \"reasonCode\": \"Correcting invoice error\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountId\\\": \\\"402890555a7e9791015a7f15fe44001c\\\", \\n    \\\"charges\\\": [\\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a88c613c5001e\\\", \\n            \\\"comment\\\": \\\"this is comment1\\\", \\n            \\\"memoItemAmount\\\": null, \\n            \\\"serviceEndDate\\\": \\\"2018-10-17\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-10-17\\\"\\n        }, \\n        {\\n            \\\"chargeId\\\": \\\"402890555a7d4022015a7d90906b0067\\\", \\n            \\\"comment\\\": \\\"this is comment2\\\", \\n            \\\"memoItemAmount\\\": 20, \\n            \\\"serviceEndDate\\\": \\\"2018-10-17\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-10-17\\\"\\n        }\\n    ], \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-10-17\\\", \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountId\\\": \\\"402890555a7e9791015a7f15fe44001c\\\", \\n    \\\"charges\\\": [\\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a88c613c5001e\\\", \\n            \\\"comment\\\": \\\"this is comment1\\\", \\n            \\\"memoItemAmount\\\": null, \\n            \\\"serviceEndDate\\\": \\\"2018-10-17\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-10-17\\\"\\n        }, \\n        {\\n            \\\"chargeId\\\": \\\"402890555a7d4022015a7d90906b0067\\\", \\n            \\\"comment\\\": \\\"this is comment2\\\", \\n            \\\"memoItemAmount\\\": 20, \\n            \\\"serviceEndDate\\\": \\\"2018-10-17\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-10-17\\\"\\n        }\\n    ], \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-10-17\\\", \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountId\\\": \\\"402890555a7e9791015a7f15fe44001c\\\", \\n    \\\"charges\\\": [\\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a88c613c5001e\\\", \\n            \\\"comment\\\": \\\"this is comment1\\\", \\n            \\\"memoItemAmount\\\": null, \\n            \\\"serviceEndDate\\\": \\\"2018-10-17\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-10-17\\\"\\n        }, \\n        {\\n            \\\"chargeId\\\": \\\"402890555a7d4022015a7d90906b0067\\\", \\n            \\\"comment\\\": \\\"this is comment2\\\", \\n            \\\"memoItemAmount\\\": 20, \\n            \\\"serviceEndDate\\\": \\\"2018-10-17\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-10-17\\\"\\n        }\\n    ], \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-10-17\\\", \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountId\\\": \\\"402890555a7e9791015a7f15fe44001c\\\", \\n    \\\"charges\\\": [\\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a88c613c5001e\\\", \\n            \\\"comment\\\": \\\"this is comment1\\\", \\n            \\\"memoItemAmount\\\": null, \\n            \\\"serviceEndDate\\\": \\\"2018-10-17\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-10-17\\\"\\n        }, \\n        {\\n            \\\"chargeId\\\": \\\"402890555a7d4022015a7d90906b0067\\\", \\n            \\\"comment\\\": \\\"this is comment2\\\", \\n            \\\"memoItemAmount\\\": 20, \\n            \\\"serviceEndDate\\\": \\\"2018-10-17\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-10-17\\\"\\n        }\\n    ], \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-10-17\\\", \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/invoice/{invoiceId}": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCreates an ad-hoc credit memo from an invoice.\n",
        "operationId": "POST_CreditMemoFromInvoice",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreditMemoFromInvoiceType"
            }
          },
          {
            "description": "The ID of an invoice that you want to create a credit memo from.\n",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7d4022015a7dabf5f60088",
                "amount": 0.01,
                "appliedAmount": 0,
                "autoApplyUponPosting": false,
                "comment": "the comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 15:19:42",
                "creditMemoDate": "2017-11-30",
                "currency": "USD",
                "excludeFromAutoApplyRules": false,
                "id": "402890555a87d7f5015a88bd27f80014",
                "number": "CM00000013",
                "reasonCode": "Write-off",
                "referredInvoiceId": "402890555a7d4022015a7dadb3b300a4",
                "refundAmount": 0,
                "source": "AdhocFromInvoice",
                "status": "Draft",
                "success": true,
                "taxAmount": 0.01,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "unappliedAmount": 0.01,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 15:19:42"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoType"
            }
          }
        },
        "summary": "Create credit memo from invoice",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"autoApplyToInvoiceUponPosting\": false, \n    \"comment\": \"the comment\", \n    \"effectiveDate\": \"2016-11-30\", \n    \"excludeFromAutoApplyRules\": false, \n    \"items\": [\n        {\n            \"amount\": 0, \n            \"comment\": \"This is comment!\", \n            \"invoiceItemId\": \"4028905558b483220158b48983dd0015\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-30\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.01, \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"sourceTaxItemId\": \"4028905558b483220158b48983150010\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }\n    ], \n    \"reasonCode\": \"Write-off\"\n}' \"https://rest.zuora.com//v1/creditmemos/invoice/{invoiceId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/invoice/{invoiceId}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"autoApplyToInvoiceUponPosting\": false, \n    \"comment\": \"the comment\", \n    \"effectiveDate\": \"2016-11-30\", \n    \"excludeFromAutoApplyRules\": false, \n    \"items\": [\n        {\n            \"amount\": 0, \n            \"comment\": \"This is comment!\", \n            \"invoiceItemId\": \"4028905558b483220158b48983dd0015\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-30\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.01, \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"sourceTaxItemId\": \"4028905558b483220158b48983150010\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }\n    ], \n    \"reasonCode\": \"Write-off\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"autoApplyToInvoiceUponPosting\\\": false, \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2016-11-30\\\", \\n    \\\"excludeFromAutoApplyRules\\\": false, \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 0, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"invoiceItemId\\\": \\\"4028905558b483220158b48983dd0015\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-30\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.01, \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"sourceTaxItemId\\\": \\\"4028905558b483220158b48983150010\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Write-off\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/invoice/{invoiceId}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"autoApplyToInvoiceUponPosting\\\": false, \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2016-11-30\\\", \\n    \\\"excludeFromAutoApplyRules\\\": false, \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 0, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"invoiceItemId\\\": \\\"4028905558b483220158b48983dd0015\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-30\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.01, \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"sourceTaxItemId\\\": \\\"4028905558b483220158b48983150010\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Write-off\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/invoice/{invoiceId}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/invoice/{invoiceId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"autoApplyToInvoiceUponPosting\\\": false, \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2016-11-30\\\", \\n    \\\"excludeFromAutoApplyRules\\\": false, \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 0, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"invoiceItemId\\\": \\\"4028905558b483220158b48983dd0015\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-30\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.01, \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"sourceTaxItemId\\\": \\\"4028905558b483220158b48983150010\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Write-off\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/invoice/{invoiceId}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"autoApplyToInvoiceUponPosting\\\": false, \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2016-11-30\\\", \\n    \\\"excludeFromAutoApplyRules\\\": false, \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 0, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"invoiceItemId\\\": \\\"4028905558b483220158b48983dd0015\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-30\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.01, \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"sourceTaxItemId\\\": \\\"4028905558b483220158b48983150010\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Write-off\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/query": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all credit memos associated with a specific account. \n",
        "operationId": "POST_QueryCreditMemos",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreditMemoQueryType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "creditmemos": [
                  {
                    "accountId": "4028905f5a87c0ff015a87d25ae90025",
                    "amount": 10.76,
                    "appliedAmount": 0,
                    "autoApplyUponPosting": false,
                    "comment": "",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-02 13:17:51",
                    "creditMemoDate": "2017-03-02",
                    "currency": "USD",
                    "excludeFromAutoApplyRules": true,
                    "id": "4028905f5a890526015a8d73f73d0015",
                    "latestPDFFileId": "4028905f5a890526015a8d77af600036",
                    "number": "CM00000001",
                    "postedById": "402881e522cf4f9b0122cf5d82860002",
                    "postedOn": "2017-03-02 13:21:55",
                    "reasonCode": "Correcting invoice error",
                    "referredInvoiceId": "4028905f5a87c0ff015a87d3f8f10043",
                    "refundAmount": 7.1,
                    "source": "API",
                    "status": "Posted",
                    "taxAmount": 0.76,
                    "totalTaxExemptAmount": 0,
                    "transferredToAccounting": "No",
                    "unappliedAmount": 3.66,
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-02 13:25:29"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoCollectionType"
            }
          }
        },
        "summary": "Query credit memos by account",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountId\": \"4028905f5a87c0ff015a87d25ae90025\"\n}' \"https://rest.zuora.com//v1/creditmemos/query\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/query');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountId\": \"4028905f5a87c0ff015a87d25ae90025\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a87d25ae90025\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/query\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a87d25ae90025\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/query\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/query\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a87d25ae90025\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/query\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a87d25ae90025\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}": {
      "delete": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nDeletes a credit memo. Only credit memos with the Cancelled status can be deleted. \n",
        "operationId": "DELETE_CreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/creditmemos/{creditMemoId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about a specific credit memo.\n",
        "operationId": "GET_CreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7e9791015a7f15fe44001c",
                "amount": 3.1,
                "appliedAmount": 0,
                "autoApplyUponPosting": false,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 10:07:10",
                "creditMemoDate": "2017-03-01",
                "currency": "USD",
                "excludeFromAutoApplyRules": false,
                "id": "402890555a7e9791015a879f064a0054",
                "latestPDFFileId": "402890555a7e9791015a879f07fb005e",
                "number": "CM00000012",
                "reasonCode": "Correcting invoice error",
                "referredInvoiceId": "402890555a7e9791015a7f1756aa0035",
                "refundAmount": 0,
                "source": "API",
                "status": "Draft",
                "success": true,
                "taxAmount": 0.1,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "unappliedAmount": 3.1,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 10:08:43"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoType"
            }
          }
        },
        "summary": "Get credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos/{creditMemoId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nUpdates the basic and finance information about a credit memo. Currently, Zuora supports updating tax-exclusive memo items, but does not support updating tax-inclusive memo items. \n\nIf the amount of a memo item is updated, the tax will be recalculated in the following conditions:\n  - The memo is created from a product rate plan charge and you use Avalara to calculate the tax.\n  - The memo is created from an invoice and you use Avalara or Zuora Tax to calculate the tax.\n",
        "operationId": "PUT_UpdateCreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTCreditMemoType"
            }
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172. \n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 10.76,
                "appliedAmount": 0,
                "autoApplyUponPosting": false,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-02 13:17:51",
                "creditMemoDate": "2017-03-02",
                "currency": "USD",
                "excludeFromAutoApplyRules": true,
                "id": "4028905f5a890526015a8d73f73d0015",
                "latestPDFFileId": "4028905f5a890526015a8d7408730024",
                "number": "CM00000001",
                "reasonCode": "Correcting invoice error",
                "referredInvoiceId": "4028905f5a87c0ff015a87d3f8f10043",
                "refundAmount": 0,
                "source": "AdhocFromPrpc",
                "status": "Draft",
                "success": true,
                "taxAmount": 0.76,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "unappliedAmount": 10.76,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-02 13:19:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoType"
            }
          }
        },
        "summary": "Update credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"CustomField1__c\": \"custom field value\", \n    \"IndexedCustomFiled1__c\": \"custom field value\", \n    \"autoApplyUponPosting\": false, \n    \"comment\": \"new comment\", \n    \"effectiveDate\": \"2017-04-17\", \n    \"excludeFromAutoApplyRules\": false, \n    \"items\": [\n        {\n            \"amount\": 1, \n            \"comment\": \"This is comment!\", \n            \"id\": \"402890555b797b57015b7986fc1a001c\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-1\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.03, \n                    \"id\": \"402890555b797b57015b7986fc3c001d\", \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX1\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }, \n        {\n            \"amount\": 2, \n            \"comment\": \"This is comment!\", \n            \"id\": \"402890555b797b57015b7986fc41001e\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-2\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.06, \n                    \"id\": \"402890555b797b57015b7986fc4c001f\", \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX2\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }\n    ], \n    \"reasonCode\": \"Correcting invoice error\"\n}' \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"CustomField1__c\": \"custom field value\", \n    \"IndexedCustomFiled1__c\": \"custom field value\", \n    \"autoApplyUponPosting\": false, \n    \"comment\": \"new comment\", \n    \"effectiveDate\": \"2017-04-17\", \n    \"excludeFromAutoApplyRules\": false, \n    \"items\": [\n        {\n            \"amount\": 1, \n            \"comment\": \"This is comment!\", \n            \"id\": \"402890555b797b57015b7986fc1a001c\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-1\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.03, \n                    \"id\": \"402890555b797b57015b7986fc3c001d\", \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX1\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }, \n        {\n            \"amount\": 2, \n            \"comment\": \"This is comment!\", \n            \"id\": \"402890555b797b57015b7986fc41001e\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-2\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.06, \n                    \"id\": \"402890555b797b57015b7986fc4c001f\", \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX2\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }\n    ], \n    \"reasonCode\": \"Correcting invoice error\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"CustomField1__c\\\": \\\"custom field value\\\", \\n    \\\"IndexedCustomFiled1__c\\\": \\\"custom field value\\\", \\n    \\\"autoApplyUponPosting\\\": false, \\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-04-17\\\", \\n    \\\"excludeFromAutoApplyRules\\\": false, \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc1a001c\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-1\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.03, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc3c001d\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX1\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 2, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc41001e\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-2\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.06, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc4c001f\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX2\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"CustomField1__c\\\": \\\"custom field value\\\", \\n    \\\"IndexedCustomFiled1__c\\\": \\\"custom field value\\\", \\n    \\\"autoApplyUponPosting\\\": false, \\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-04-17\\\", \\n    \\\"excludeFromAutoApplyRules\\\": false, \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc1a001c\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-1\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.03, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc3c001d\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX1\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 2, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc41001e\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-2\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.06, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc4c001f\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX2\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/creditmemos/{creditMemoId}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"CustomField1__c\\\": \\\"custom field value\\\", \\n    \\\"IndexedCustomFiled1__c\\\": \\\"custom field value\\\", \\n    \\\"autoApplyUponPosting\\\": false, \\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-04-17\\\", \\n    \\\"excludeFromAutoApplyRules\\\": false, \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc1a001c\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-1\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.03, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc3c001d\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX1\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 2, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc41001e\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-2\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.06, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc4c001f\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX2\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"CustomField1__c\\\": \\\"custom field value\\\", \\n    \\\"IndexedCustomFiled1__c\\\": \\\"custom field value\\\", \\n    \\\"autoApplyUponPosting\\\": false, \\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-04-17\\\", \\n    \\\"excludeFromAutoApplyRules\\\": false, \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc1a001c\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-1\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.03, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc3c001d\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX1\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 2, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc41001e\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-2\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.06, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc4c001f\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX2\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/apply": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nApplies a posted credit memo to one or more invoices and debit memos. \n",
        "operationId": "POST_ApplyCreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyCreditMemoType"
            }
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 10.76,
                "appliedAmount": 1,
                "autoApplyUponPosting": false,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-02 13:17:51",
                "creditMemoDate": "2017-03-02",
                "currency": "USD",
                "excludeFromAutoApplyRules": true,
                "id": "4028905f5a890526015a8d73f73d0015",
                "latestPDFFileId": "4028905f5a890526015a8d77af600036",
                "number": "CM00000001",
                "postedById": "402881e522cf4f9b0122cf5d82860002",
                "postedOn": "2017-03-02 13:21:55",
                "reasonCode": "Correcting invoice error",
                "referredInvoiceId": "4028905f5a87c0ff015a87d3f8f10043",
                "refundAmount": 7.1,
                "source": "AdhocFromPrpc",
                "status": "Posted",
                "success": true,
                "taxAmount": 0.76,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "unappliedAmount": 2.66,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-02 13:25:29"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoType"
            }
          }
        },
        "summary": "Apply credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"effectiveDate\": \"2017-03-02\", \n    \"invoices\": [\n        {\n            \"amount\": 1, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 0.9, \n                    \"creditMemoItemId\": \"4028905f5a890526015a8d73f74b0016\", \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"creditTaxItemId\": \"4028905f5a890526015a8d73f90c0018\", \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ]\n}' \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/apply\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/apply');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"effectiveDate\": \"2017-03-02\", \n    \"invoices\": [\n        {\n            \"amount\": 1, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 0.9, \n                    \"creditMemoItemId\": \"4028905f5a890526015a8d73f74b0016\", \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"creditTaxItemId\": \"4028905f5a890526015a8d73f90c0018\", \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"effectiveDate\\\": \\\"2017-03-02\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 0.9, \\n                    \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\", \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\", \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/apply\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"effectiveDate\\\": \\\"2017-03-02\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 0.9, \\n                    \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\", \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\", \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/{creditMemoId}/apply\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/apply\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"effectiveDate\\\": \\\"2017-03-02\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 0.9, \\n                    \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\", \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\", \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/apply\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"effectiveDate\\\": \\\"2017-03-02\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 0.9, \\n                    \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\", \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\", \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/cancel": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCancels a credit memo. Only credit memos with the Draft status can be cancelled. \n",
        "operationId": "POST_CancelCreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7e9791015a7f15fe44001c",
                "amount": 2020,
                "appliedAmount": 0,
                "autoApplyUponPosting": false,
                "cancelledById": "402881e522cf4f9b0122cf5d82860002",
                "cancelledOn": "2017-09-03 19:59:07",
                "comment": "the comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 15:31:10",
                "creditMemoDate": "2017-10-17",
                "currency": "USD",
                "excludeFromAutoApplyRules": false,
                "id": "402890555a87d7f5015a88c7a6830022",
                "latestPDFFileId": "402890555a87d7f5015a88c7a7a2002a",
                "number": "CM00000015",
                "reasonCode": "Correcting invoice error",
                "refundAmount": 0,
                "source": "AdhocFromPrpc",
                "status": "Canceled",
                "success": true,
                "taxAmount": 0,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "unappliedAmount": 2020,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 15:36:57"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoType"
            }
          }
        },
        "summary": "Cancel credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/cancel\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/cancel');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/cancel\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/{creditMemoId}/cancel\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/cancel\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/emails": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nSends a posted credit memo to the specified email addresses manually.\n\n\n\n## Notes\n  - You must activate the **Email Credit Memo | Manually email Credit Memo** notification before emailing credit memos. To include the credit memo PDF in the email, select the **Include Credit Memo PDF** check box in the **Edit notification** dialog from the Zuora UI. See [Create and Edit Notifications](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/C_Create_Notifications#section_2) for more information.\n\n\n  - Zuora sends the email messages based on the email template you set. You can set the email template to use in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. By default, the **Manual Email for Credit Memo Default Template** template is used. See [Create and Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information.\n\n\n  - The credit memos are sent only to the work email addresses or personal email addresses of the Bill To contact if the following conditions are all met:\n\n    * The `useEmailTemplateSetting` field is set to `false`.\n    * The email addresses are not specified in the `emailAddresses` field.\n",
        "operationId": "POST_EmailCreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCreditMemoEmailRequestType"
            }
          },
          {
            "description": "The ID of a posted credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Email credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"emailAddresses\": \"test1@test.com,test2@test.com\", \n    \"includeAdditionalEmailAddresses\": false, \n    \"useEmailTemplateSetting\": false\n}' \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/emails\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/emails');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"emailAddresses\": \"test1@test.com,test2@test.com\", \n    \"includeAdditionalEmailAddresses\": false, \n    \"useEmailTemplateSetting\": false\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/emails\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/{creditMemoId}/emails\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/emails\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/emails\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/items": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all items of a credit memo. A credit memo item is a single line item in a credit memo. \n",
        "operationId": "GET_CreditMemoItems",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          },
          {
            "description": "This parameter restricts the data returned in the response. You can use this parameter to supply a dimension you want to filter on.\n\n A single filter uses the following form: \n\n*fieldsFilterable* `=` *field_value*\n            \nFilters can be combined by using `&`. For example: *fieldsFilterable* `=` *field_value* `&` *fieldsFilterable* `=` *field_value*\n\n*fieldsFilterable* indicates the name of a supported field that you can use to filter the response data. The supported filterable fields of this operation are as below:\n\n  - id\n  - amount\n  - appliedAmount\n  - refundAmount\n  - sku\n  - skuName\n  - serviceStartDate\n  - serviceEndDate\n  - sourceItemId\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  - subscriptionId\n\n *field_value* indicates a valid value of the filterable field. If the type of the field value is string, you can set the field to `null` value for filtering. Then, you can get the response data with this field value being 'null'. For more information about these fields, see the field descriptions in the **Responses** section. \n  \nExamples:\n\n- /creditmemos/402890245c7ca371015c7cb40ac30015/items?amount=100\n\n- /creditmemos/402890245c7ca371015c7cb40ac30015/items?amount=100&sort=createdDate\n",
            "in": "query",
            "name": "fieldsFilterable",
            "required": false,
            "type": "string"
          },
          {
            "description": "This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.\n\nA sortable field uses the following form: \n\n*operator* *field_name*\n\nYou can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*  \n\n*operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.\n\n  - The `-` operator indicates an ascending order.\n  - The `+` operator indicates a descending order.\n\nBy default, the response data is displayed in descending order by updated date.\n\n*field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:\n\n  - id\n  - amount\n  - appliedAmount\n  - refundAmount\n  - sku\n  - skuName\n  - serviceStartDate\n  - serviceEndDate\n  - sourceItemId\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  - subscriptionId\n  \nExamples:\n\n- /creditmemos/402890245c7ca371015c7cb40ac30015/items?sort=createdDate\n\n- /creditmemos/402890245c7ca371015c7cb40ac30015/items?amount=100&sort=createdDate\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "items": [
                  {
                    "amount": 1,
                    "appliedAmount": 0,
                    "comment": "",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 10:07:10",
                    "creditTaxItems": [
                      {
                        "appliedAmount": 0,
                        "exemptAmount": 0,
                        "financeInformation": {
                          "onAccountAccountingCode": "Check",
                          "onAccountAccountingCodeType": "Cash",
                          "salesTaxPayableAccountingCode": "Check",
                          "salesTaxPayableAccountingCodeType": "Cash"
                        },
                        "id": "402890555a7e9791015a87a072880062",
                        "jurisdiction": "CALIFORNIA",
                        "locationCode": "06",
                        "name": "STATE TAX",
                        "refundAmount": 0,
                        "taxAmount": 0.1,
                        "taxCode": "ServiceTaxCode",
                        "taxCodeDescription": "This is tax code description!",
                        "taxDate": "2016-09-30",
                        "taxRate": 0.0625,
                        "taxRateDescription": "This is tax rate description!",
                        "taxRateType": "Percentage",
                        "unappliedAmount": 0.1
                      }
                    ],
                    "financeInformation": {},
                    "id": "402890555a7e9791015a879f064d0055",
                    "refundAmount": 0,
                    "serviceEndDate": "2017-03-26",
                    "serviceStartDate": "2017-02-27",
                    "sku": "SKU-00000001",
                    "skuName": "New Component",
                    "sourceItemId": "402890555a7e9791015a7f1756bc0037",
                    "sourceItemType": "InvoiceDetail",
                    "subscriptionId": "402890d25bec1155015bec35cc7c0bc7",
                    "unappliedAmount": 1,
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 10:08:43"
                  },
                  {
                    "amount": 2,
                    "appliedAmount": 0,
                    "comment": "",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 10:07:10",
                    "creditTaxItems": [],
                    "financeInformation": {},
                    "id": "402890555a7e9791015a879f06610056",
                    "refundAmount": 0,
                    "serviceEndDate": "2017-03-26",
                    "serviceStartDate": "2017-02-27",
                    "sku": "SKU-00000001",
                    "skuName": "New Component",
                    "sourceItemId": "402890555a7e9791015a7f1756bd0038",
                    "sourceItemType": "InvoiceDetail",
                    "subscriptionId": "402890d25bec1155015bec35cc7c0bc7",
                    "unappliedAmount": 2,
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 10:07:10"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoItemsListType"
            }
          }
        },
        "summary": "Get credit memo items",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos/{creditMemoId}/items\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/items/{cmitemid}": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the information about a specific item of a credit memo. A credit memo item is a single line item in a credit memo.\n",
        "operationId": "GET_CreditMemoItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).\n",
            "in": "path",
            "name": "cmitemid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 1,
                "appliedAmount": 0,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 10:07:10",
                "creditTaxItems": [],
                "financeInformation": {},
                "id": "402890555a7e9791015a879f064d0055",
                "refundAmount": 0,
                "serviceEndDate": "2017-03-26",
                "serviceStartDate": "2017-02-27",
                "sku": "SKU-00000001",
                "skuName": "New Component",
                "sourceItemId": "402890555a7e9791015a7f1756bc0037",
                "sourceItemType": "InvoiceDetail",
                "subscriptionId": "402890d25bec1155015bec35cc7c0bc7",
                "success": true,
                "unappliedAmount": 1,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 10:08:43"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoItemType"
            }
          }
        },
        "summary": "Get credit memo item",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items/{cmitemid}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items/{cmitemid}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items/{cmitemid}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos/{creditMemoId}/items/{cmitemid}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items/{cmitemid}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/items/{cmitemid}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/parts": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all parts of a credit memo. A credit memo can consist of an unapplied part, and several parts applied to invoices and debit memos. You can use this operation to get all the applied and unapplied portions of a credit memo.\n",
        "operationId": "GET_CreditMemoParts",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "parts": [
                  {
                    "amount": 3.66,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-02 13:21:55",
                    "id": "4028905f5a890526015a8d77adea0029",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-02 13:21:55"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoPartsCollectionType"
            }
          }
        },
        "summary": "Get credit memo parts",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos/{creditMemoId}/parts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/parts/{partid}": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about a specific credit memo part. A credit memo can consist of an unapplied part, and several parts applied to invoices and debit memos.\n",
        "operationId": "GET_CreditMemoPart",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a specific credit memo part. You can get the credit memo part ID from the response of [Get credit memo parts](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoParts).\n",
            "in": "path",
            "name": "partid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 1,
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-02 14:00:21",
                "id": "4028905f5a890526015a8d9adeb30059",
                "invoiceId": "4028905f5a87c0ff015a87d3f8f10043",
                "success": true,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-02 14:00:21"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoPartType"
            }
          }
        },
        "summary": "Get credit memo part",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos/{creditMemoId}/parts/{partid}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all items of a credit memo part. A credit memo part item is a single line item in a credit memo part. A credit memo part can consist of several different types of items.\n",
        "operationId": "GET_CreditMemoItemParts",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The unique ID of a specific credit memo part. You can get the credit memo part ID from the response of [Get credit memo parts](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoParts). .\n",
            "in": "path",
            "name": "partid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "itemParts": [
                  {
                    "amount": 2.1,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-02 13:21:55",
                    "creditMemoItemId": "4028905f5a890526015a8d73f74b0016",
                    "id": "4028905f5a890526015a8d77ae01002c",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-02 13:47:20"
                  },
                  {
                    "amount": 0.05,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-02 13:21:55",
                    "creditTaxItemId": "4028905f5a890526015a8d73f90c0018",
                    "id": "4028905f5a890526015a8d77ae02002e",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-02 13:47:20"
                  },
                  {
                    "amount": 0.51,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-02 13:21:55",
                    "creditTaxItemId": "4028905f5a890526015a8d73f90c0019",
                    "id": "4028905f5a890526015a8d77ae030030",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-02 13:21:55"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoItemPartsCollectionType"
            }
          }
        },
        "summary": "Get credit memo part items",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts/{itempartid}": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the information about a specific credit memo part item.  A credit memo part item is a single line item in a credit memo part. A credit memo part can consist of several different types of items.\n",
        "operationId": "GET_CreditMemoItemPart",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a specific credit memo part. You can get the credit memo part ID from the response of [Get credit memo parts](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoParts).\n",
            "in": "path",
            "name": "partid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a specific credit memo part item. You can get the credit memo part item ID from the response of [Get credit memo part items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItemParts).\n",
            "in": "path",
            "name": "itempartid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 0.9,
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-02 14:00:21",
                "creditMemoItemId": "4028905f5a890526015a8d73f74b0016",
                "id": "4028905f5a890526015a8d9adeb5005c",
                "invoiceItemId": "4028905f5a87c0ff015a87d3f90c0045",
                "success": true,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-02 14:00:21"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoItemPartType"
            }
          }
        },
        "summary": "Get credit memo part item",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts/{itempartid}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts/{itempartid}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts/{itempartid}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts/{itempartid}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts/{itempartid}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/parts/{partid}/itemparts/{itempartid}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/pdfs": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCreates PDF for a specified credit memo. To access the generated PDF, you can download it by clicking **View PDF** on the detailed credit memo page through the Zuora UI.\n",
        "operationId": "POST_CreditMemoPDF",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of the credit memo that you want to create PDF for. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTMemoPdfResponse"
            }
          }
        },
        "summary": "Create credit memo PDF",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/pdfs\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/pdfs');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/pdfs\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/{creditMemoId}/pdfs\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/pdfs\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/pdfs\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/post": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nPosts a credit memo to activate it. You can post credit memos only if you have the [Billing permissions](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles#Billing_Permissions).\n",
        "operationId": "POST_PostCreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7e9791015a7f15fe44001c",
                "amount": 3.1,
                "appliedAmount": 0,
                "autoApplyUponPosting": false,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 10:07:10",
                "creditMemoDate": "2017-03-01",
                "currency": "USD",
                "excludeFromAutoApplyRules": false,
                "id": "402890555a7e9791015a879f064a0054",
                "number": "CM00000012",
                "postedById": "402881e522cf4f9b0122cf5d82860002",
                "postedOn": "2017-03-01 14:28:06",
                "reasonCode": "Correcting invoice error",
                "referredInvoiceId": "402890555a7e9791015a7f1756aa0035",
                "refundAmount": 0,
                "source": "API",
                "status": "Posted",
                "success": true,
                "taxAmount": 0.1,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "unappliedAmount": 3.1,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 14:28:06"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoType"
            }
          }
        },
        "summary": "Post credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/post\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/post');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/post\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/{creditMemoId}/post\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/post\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/post\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoId}/unapply": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nUnapplies an applied credit memo from one or more invoices and debit memos. The full applied amount from invoices and debit memos is transferred into the unapplied amount of the credit memo. \n",
        "operationId": "POST_UnapplyCreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnapplyCreditMemoType"
            }
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 10.76,
                "appliedAmount": 0,
                "autoApplyUponPosting": false,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-02 13:17:51",
                "creditMemoDate": "2017-03-02",
                "currency": "USD",
                "excludeFromAutoApplyRules": true,
                "id": "4028905f5a890526015a8d73f73d0015",
                "latestPDFFileId": "4028905f5a890526015a8d77af600036",
                "number": "CM00000001",
                "postedById": "402881e522cf4f9b0122cf5d82860002",
                "postedOn": "2017-03-02 13:21:55",
                "reasonCode": "Correcting invoice error",
                "referredInvoiceId": "4028905f5a87c0ff015a87d3f8f10043",
                "refundAmount": 7.1,
                "source": "AdhocFromPrpc",
                "status": "Posted",
                "success": true,
                "taxAmount": 0.76,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "unappliedAmount": 3.66,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-02 13:25:29"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCreditMemoType"
            }
          }
        },
        "summary": "Unapply credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"effectiveDate\": \"2017-03-02\", \n    \"invoices\": [\n        {\n            \"amount\": 1, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 0.9, \n                    \"creditMemoItemId\": \"4028905f5a890526015a8d73f74b0016\", \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"creditTaxItemId\": \"4028905f5a890526015a8d73f90c0018\", \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ]\n}' \"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/unapply\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoId}/unapply');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"effectiveDate\": \"2017-03-02\", \n    \"invoices\": [\n        {\n            \"amount\": 1, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 0.9, \n                    \"creditMemoItemId\": \"4028905f5a890526015a8d73f74b0016\", \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"creditTaxItemId\": \"4028905f5a890526015a8d73f90c0018\", \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"effectiveDate\\\": \\\"2017-03-02\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 0.9, \\n                    \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\", \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\", \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/unapply\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"effectiveDate\\\": \\\"2017-03-02\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 0.9, \\n                    \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\", \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\", \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/{creditMemoId}/unapply\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/unapply\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"effectiveDate\\\": \\\"2017-03-02\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 0.9, \\n                    \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\", \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\", \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoId}/unapply\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"effectiveDate\\\": \\\"2017-03-02\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 0.9, \\n                    \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\", \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\", \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditMemoNumber}/amountBreakdownByOrder": {
      "get": {
        "description": "**Note:** This operation is only available if you have the [Advanced AR Settlement](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement) and [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) features enabled. If you wish to have access to the features, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n\nRetrieves a specified credit memo that is broken down by orders. The credit memo items might be broken down into a list of order rated items.\n",
        "operationId": "GET_BreakdownCreditMemoByOrder",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Number of credit memo to be broken down.",
            "in": "path",
            "name": "creditMemoNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "breakdowns": [
                  {
                    "amount": 10,
                    "breakdownDetails": [
                      {
                        "amount": 10,
                        "orderNumber": "O-00000001",
                        "termNumber": 1
                      }
                    ],
                    "chargeNumber": "C-00000002",
                    "creditMemoItemId": "402890355de4856f015de97983190bfe",
                    "endDate": "2017-06-30",
                    "startDate": "2017-06-01",
                    "subscriptionNumber": "A-S00000001"
                  }
                ],
                "currency": "USD",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetCreditMemoAmountBreakdownByOrderResponse"
            }
          }
        },
        "summary": "Get breakdown of credit memo by order",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/creditmemos/{creditMemoNumber}/amountBreakdownByOrder\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditMemoNumber}/amountBreakdownByOrder');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditMemoNumber}/amountBreakdownByOrder\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/creditmemos/{creditMemoNumber}/amountBreakdownByOrder\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditMemoNumber}/amountBreakdownByOrder\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditMemoNumber}/amountBreakdownByOrder\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/creditmemos/{creditmemoId}/refund": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRefunds a full or partial posted credit memo to your customers. Only the amount of unapplied part could be refunded. See [Refunds](https://knowledgecenter.zuora.com/CB_Billing/K_Payment_Operations/Refunds) fore more information. \n",
        "operationId": "POST_RefundCreditMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostNonRefRefundType"
            }
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "creditmemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 7.1,
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-02 13:25:29",
                "creditMemoId": "4028905f5a890526015a8d73f73d0015",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a890526015a8d7af4280039",
                "methodType": "CreditCard",
                "number": "R-00000002",
                "reasonCode": "Standard Refund",
                "refundDate": "2017-03-02",
                "status": "Processed",
                "success": true,
                "type": "External",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-02 13:25:29"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundCreditMemoType"
            }
          }
        },
        "summary": "Refund credit memo",
        "tags": [
          "Credit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"items\": [\n        {\n            \"amount\": 7, \n            \"creditMemoItemId\": \"4028905f5a890526015a8d73f74b0016\"\n        }, \n        {\n            \"amount\": 0.1, \n            \"creditTaxItemId\": \"4028905f5a890526015a8d73f90c0018\"\n        }\n    ], \n    \"methodType\": \"CreditCard\", \n    \"refundDate\": \"2017-03-02\", \n    \"totalAmount\": 7.1, \n    \"type\": \"External\"\n}' \"https://rest.zuora.com//v1/creditmemos/{creditmemoId}/refund\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/creditmemos/{creditmemoId}/refund');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"items\": [\n        {\n            \"amount\": 7, \n            \"creditMemoItemId\": \"4028905f5a890526015a8d73f74b0016\"\n        }, \n        {\n            \"amount\": 0.1, \n            \"creditTaxItemId\": \"4028905f5a890526015a8d73f90c0018\"\n        }\n    ], \n    \"methodType\": \"CreditCard\", \n    \"refundDate\": \"2017-03-02\", \n    \"totalAmount\": 7.1, \n    \"type\": \"External\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 7, \\n            \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 0.1, \\n            \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\"\\n        }\\n    ], \\n    \\\"methodType\\\": \\\"CreditCard\\\", \\n    \\\"refundDate\\\": \\\"2017-03-02\\\", \\n    \\\"totalAmount\\\": 7.1, \\n    \\\"type\\\": \\\"External\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/creditmemos/{creditmemoId}/refund\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 7, \\n            \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 0.1, \\n            \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\"\\n        }\\n    ], \\n    \\\"methodType\\\": \\\"CreditCard\\\", \\n    \\\"refundDate\\\": \\\"2017-03-02\\\", \\n    \\\"totalAmount\\\": 7.1, \\n    \\\"type\\\": \\\"External\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/creditmemos/{creditmemoId}/refund\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/creditmemos/{creditmemoId}/refund\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 7, \\n            \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 0.1, \\n            \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\"\\n        }\\n    ], \\n    \\\"methodType\\\": \\\"CreditCard\\\", \\n    \\\"refundDate\\\": \\\"2017-03-02\\\", \\n    \\\"totalAmount\\\": 7.1, \\n    \\\"type\\\": \\\"External\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/creditmemos/{creditmemoId}/refund\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 7, \\n            \\\"creditMemoItemId\\\": \\\"4028905f5a890526015a8d73f74b0016\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 0.1, \\n            \\\"creditTaxItemId\\\": \\\"4028905f5a890526015a8d73f90c0018\\\"\\n        }\\n    ], \\n    \\\"methodType\\\": \\\"CreditCard\\\", \\n    \\\"refundDate\\\": \\\"2017-03-02\\\", \\n    \\\"totalAmount\\\": 7.1, \\n    \\\"type\\\": \\\"External\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/custom-exchange-rates/{currency}": {
      "get": {
        "description": "This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nThis reference describes how to query custom foreign exchange rates from Zuora. You can use this API method to query exchange rates only if you use a custom exchange rate provider and upload rates with the Import Foreign Exchange Rates mass action. \n",
        "operationId": "GET_CustomExchangeRates",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The target currency. The exchange rates in the response are calculated in relation to the target currency.\n\nThe value must be a three-letter currency code, for example, USD. \n",
            "in": "path",
            "name": "currency",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start date of the date range for which you want to get exchange rates.\n\nThe date must be in yyyy-mm-dd format, for example, 2016-01-15. The start date cannot be later than the end date.\n",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "End date of the date range for which you want to get exchange rates.\n\nThe date must be in yyyy-mm-dd format, for example, 2016-01-16. The end date can be a maximum of 90 days after the start date.\n",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "inverse": true,
                "rates": {
                  "2016-01-15": {
                    "EUR": 1.0815,
                    "GBP": 1.4472,
                    "JPY": 0.0084,
                    "providerExchangeRateDate": "2016-01-14"
                  },
                  "2016-01-16": {
                    "EUR": 1.0827,
                    "GBP": 1.4634,
                    "JPY": 0.0085,
                    "providerExchangeRateDate": "2016-01-15"
                  }
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCustomExchangeRatesType"
            }
          }
        },
        "summary": "Get custom foreign currency exchange rates",
        "tags": [
          "Custom Exchange Rates"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/custom-exchange-rates/{currency}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/custom-exchange-rates/{currency}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/custom-exchange-rates/{currency}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/custom-exchange-rates/{currency}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/custom-exchange-rates/{currency}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/custom-exchange-rates/{currency}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the information about all debit memos associated with all customer accounts.\n",
        "operationId": "GET_DebitMemos",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "This parameter restricts the data returned in the response. You can use this parameter to supply a dimension you want to filter on.\n\n A single filter uses the following form: \n\n*fieldsFilterable* `=` *field_value*\n            \nFilters can be combined by using `&`. For example: *fieldsFilterable* `=` *field_value* `&` *fieldsFilterable* `=` *field_value*\n\n*fieldsFilterable* indicates the name of a supported field that you can use to filter the response data. The supported filterable fields of this operation are as below:\n\n  - number\n  - accountID\n  - debitMemoDate\n  - targetDate\n  - dueDate\n  - currency\n  - status\n  - amount\n  - taxAmount\n  - totalTaxExemptAmount\n  - balance\n  - beAppliedAmount\n  - referredInvoiceId\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n\n *field_value* indicates a valid value of the filterable field. If the type of the field value is string, you can set the field to `null` value for filtering. Then, you can get the response data with this field value being 'null'. For more information about these fields, see the field descriptions in the **Responses** section. \n  \nExamples:\n\n- /debitmemos?status=Processed\n\n- /debitmemos?referredInvoiceId=null&status=Draft\n\n- /debitmemos?status=Processed&type=External&sort=+number\n",
            "in": "query",
            "name": "fieldsFilterable",
            "required": false,
            "type": "string"
          },
          {
            "description": "This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.\n\nA sortable field uses the following form: \n\n*operator* *field_name*\n\nYou can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*  \n\n*operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.\n\n  - The `-` operator indicates an ascending order.\n  - The `+` operator indicates a descending order.\n\nBy default, the response data is displayed in descending order by debit memo number.\n\n*field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:\n\n  - number\n  - accountID\n  - debitMemoDate\n  - targetDate\n  - dueDate\n  - amount\n  - taxAmount\n  - totalTaxExemptAmount\n  - balance\n  - beAppliedAmount\n  - referredInvoiceId\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  \nExamples:\n\n- /debitmemos?sort=+number\n\n- /debitmemos?status=Processed&sort=-number,+amount\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "debitmemos": [
                  {
                    "accountId": "402890555a7e9791015a7f15fe44001c",
                    "amount": 50,
                    "balance": 50,
                    "beAppliedAmount": 0,
                    "comment": "the comment",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 17:24:14",
                    "debitMemoDate": "2017-10-17",
                    "dueDate": "2017-11-16",
                    "id": "402890555a87d7f5015a892f2ba10057",
                    "latestPDFFileId": "402890555a87d7f5015a892f2c5c0060",
                    "number": "DM00000006",
                    "reasonCode": "Correcting invoice error",
                    "status": "Draft",
                    "taxAmount": 0,
                    "totalTaxExemptAmount": 0,
                    "transferredToAccounting": "No",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 17:24:14"
                  },
                  {
                    "accountId": "402890555a7d4022015a7dabf5f60088",
                    "amount": 0.01,
                    "balance": 0.01,
                    "beAppliedAmount": 0,
                    "comment": "the comment",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 17:13:15",
                    "debitMemoDate": "2017-11-30",
                    "dueDate": "2017-12-30",
                    "id": "402890555a87d7f5015a89251edc0045",
                    "number": "DM00000003",
                    "reasonCode": "Charge Dispute",
                    "referredInvoiceId": "402890555a7d4022015a7dadb3b300a4",
                    "status": "Draft",
                    "taxAmount": 0.01,
                    "totalTaxExemptAmount": 0,
                    "transferredToAccounting": "No",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 17:13:15"
                  },
                  {
                    "accountId": "402890555a7d4022015a7dabf5f60088",
                    "amount": 9,
                    "balance": 9,
                    "beAppliedAmount": 0,
                    "comment": "",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 17:01:00",
                    "debitMemoDate": "2017-03-01",
                    "dueDate": "2017-03-31",
                    "id": "402890555a87d7f5015a8919e4fe002e",
                    "latestPDFFileId": "402890555a87d7f5015a8919e95d003a",
                    "number": "DM00000002",
                    "reasonCode": "Correcting invoice error",
                    "referredInvoiceId": "402890555a7d4022015a7dadb3b300a4",
                    "status": "Draft",
                    "taxAmount": 8,
                    "totalTaxExemptAmount": 0,
                    "transferredToAccounting": "No",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 17:01:00"
                  },
                  {
                    "accountId": "402890555a7e9791015a7f15fe44001c",
                    "amount": 8.02,
                    "balance": 8.02,
                    "beAppliedAmount": 0,
                    "comment": "",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 10:26:16",
                    "debitMemoDate": "2017-03-01",
                    "dueDate": "2017-03-31",
                    "id": "402890555a7e9791015a87b082940067",
                    "latestPDFFileId": "402890555a7e9791015a87b083f00072",
                    "number": "DM00000001",
                    "reasonCode": "Correcting invoice error",
                    "referredInvoiceId": "402890555a7e9791015a7f1756aa0035",
                    "status": "Draft",
                    "taxAmount": 0.02,
                    "totalTaxExemptAmount": 0,
                    "transferredToAccounting": "No",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 10:45:03"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoCollectionType"
            }
          }
        },
        "summary": "Get debit memos",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/debitmemos\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/debitmemos\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCreates an ad-hoc debit memo from a product rate plan charge. Zuora only supports one-time positive charges for debit memos.\n",
        "operationId": "POST_DebitMemoFromPrpc",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DebitMemoFromChargeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7e9791015a7f15fe44001c",
                "amount": 50,
                "balance": 50,
                "beAppliedAmount": 0,
                "comment": "the comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 17:24:14",
                "debitMemoDate": "2017-10-17",
                "dueDate": "2017-11-16",
                "id": "402890555a87d7f5015a892f2ba10057",
                "number": "DM00000006",
                "reasonCode": "Correcting invoice error",
                "status": "Draft",
                "success": true,
                "taxAmount": 0,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 17:24:14"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoType"
            }
          }
        },
        "summary": "Create debit memo from charge",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountId\": \"402890555a7e9791015a7f15fe44001c\", \n    \"charges\": [\n        {\n            \"chargeId\": \"402890555a87d7f5015a892cae910050\", \n            \"comment\": \"this is comment1\", \n            \"memoItemAmount\": 30\n        }, \n        {\n            \"chargeId\": \"402890555a87d7f5015a892dff7f0053\", \n            \"comment\": \"this is comment2\", \n            \"memoItemAmount\": 20\n        }\n    ], \n    \"comment\": \"the comment\", \n    \"effectiveDate\": \"2017-10-17\", \n    \"reasonCode\": \"Correcting invoice error\"\n}' \"https://rest.zuora.com//v1/debitmemos\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountId\": \"402890555a7e9791015a7f15fe44001c\", \n    \"charges\": [\n        {\n            \"chargeId\": \"402890555a87d7f5015a892cae910050\", \n            \"comment\": \"this is comment1\", \n            \"memoItemAmount\": 30\n        }, \n        {\n            \"chargeId\": \"402890555a87d7f5015a892dff7f0053\", \n            \"comment\": \"this is comment2\", \n            \"memoItemAmount\": 20\n        }\n    ], \n    \"comment\": \"the comment\", \n    \"effectiveDate\": \"2017-10-17\", \n    \"reasonCode\": \"Correcting invoice error\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountId\\\": \\\"402890555a7e9791015a7f15fe44001c\\\", \\n    \\\"charges\\\": [\\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a892cae910050\\\", \\n            \\\"comment\\\": \\\"this is comment1\\\", \\n            \\\"memoItemAmount\\\": 30\\n        }, \\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a892dff7f0053\\\", \\n            \\\"comment\\\": \\\"this is comment2\\\", \\n            \\\"memoItemAmount\\\": 20\\n        }\\n    ], \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-10-17\\\", \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountId\\\": \\\"402890555a7e9791015a7f15fe44001c\\\", \\n    \\\"charges\\\": [\\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a892cae910050\\\", \\n            \\\"comment\\\": \\\"this is comment1\\\", \\n            \\\"memoItemAmount\\\": 30\\n        }, \\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a892dff7f0053\\\", \\n            \\\"comment\\\": \\\"this is comment2\\\", \\n            \\\"memoItemAmount\\\": 20\\n        }\\n    ], \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-10-17\\\", \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/debitmemos\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountId\\\": \\\"402890555a7e9791015a7f15fe44001c\\\", \\n    \\\"charges\\\": [\\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a892cae910050\\\", \\n            \\\"comment\\\": \\\"this is comment1\\\", \\n            \\\"memoItemAmount\\\": 30\\n        }, \\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a892dff7f0053\\\", \\n            \\\"comment\\\": \\\"this is comment2\\\", \\n            \\\"memoItemAmount\\\": 20\\n        }\\n    ], \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-10-17\\\", \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountId\\\": \\\"402890555a7e9791015a7f15fe44001c\\\", \\n    \\\"charges\\\": [\\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a892cae910050\\\", \\n            \\\"comment\\\": \\\"this is comment1\\\", \\n            \\\"memoItemAmount\\\": 30\\n        }, \\n        {\\n            \\\"chargeId\\\": \\\"402890555a87d7f5015a892dff7f0053\\\", \\n            \\\"comment\\\": \\\"this is comment2\\\", \\n            \\\"memoItemAmount\\\": 20\\n        }\\n    ], \\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-10-17\\\", \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos/invoice/{invoiceId}": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCreates an ad-hoc debit memo from an invoice.\n",
        "operationId": "POST_DebitMemoFromInvoice",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The ID of an invoice that you want to create a debit memo from.\n",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DebitMemoFromInvoiceType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7d4022015a7dabf5f60088",
                "amount": 0.01,
                "balance": 0.01,
                "beAppliedAmount": 0,
                "comment": "the comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 17:13:15",
                "debitMemoDate": "2017-11-30",
                "dueDate": "2017-12-30",
                "id": "402890555a87d7f5015a89251edc0045",
                "number": "DM00000003",
                "reasonCode": "Charge Dispute",
                "referredInvoiceId": "402890555a7d4022015a7dadb3b300a4",
                "status": "Draft",
                "success": true,
                "taxAmount": 0.01,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 17:13:15"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoType"
            }
          }
        },
        "summary": "Create debit memo from invoice",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"comment\": \"the comment\", \n    \"effectiveDate\": \"2017-11-30\", \n    \"items\": [\n        {\n            \"amount\": 0, \n            \"comment\": \"This is comment!\", \n            \"invoiceItemId\": \"402890555a7d4022015a7dadb3b700a6\", \n            \"serviceEndDate\": \"2017-11-30\", \n            \"serviceStartDate\": \"2017-11-01\", \n            \"skuName\": \"SKU-30\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.01, \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"sourceTaxItemId\": \"402890555a7d4022015a7dadb39b00a1\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": null, \n                    \"taxDate\": \"2017-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }\n    ], \n    \"reasonCode\": \"Charge Dispute\"\n}' \"https://rest.zuora.com//v1/debitmemos/invoice/{invoiceId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/invoice/{invoiceId}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"comment\": \"the comment\", \n    \"effectiveDate\": \"2017-11-30\", \n    \"items\": [\n        {\n            \"amount\": 0, \n            \"comment\": \"This is comment!\", \n            \"invoiceItemId\": \"402890555a7d4022015a7dadb3b700a6\", \n            \"serviceEndDate\": \"2017-11-30\", \n            \"serviceStartDate\": \"2017-11-01\", \n            \"skuName\": \"SKU-30\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.01, \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"sourceTaxItemId\": \"402890555a7d4022015a7dadb39b00a1\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": null, \n                    \"taxDate\": \"2017-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }\n    ], \n    \"reasonCode\": \"Charge Dispute\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-11-30\\\", \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 0, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"invoiceItemId\\\": \\\"402890555a7d4022015a7dadb3b700a6\\\", \\n            \\\"serviceEndDate\\\": \\\"2017-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-30\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.01, \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7dadb39b00a1\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": null, \\n                    \\\"taxDate\\\": \\\"2017-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Charge Dispute\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/invoice/{invoiceId}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-11-30\\\", \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 0, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"invoiceItemId\\\": \\\"402890555a7d4022015a7dadb3b700a6\\\", \\n            \\\"serviceEndDate\\\": \\\"2017-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-30\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.01, \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7dadb39b00a1\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": null, \\n                    \\\"taxDate\\\": \\\"2017-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Charge Dispute\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/debitmemos/invoice/{invoiceId}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/invoice/{invoiceId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-11-30\\\", \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 0, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"invoiceItemId\\\": \\\"402890555a7d4022015a7dadb3b700a6\\\", \\n            \\\"serviceEndDate\\\": \\\"2017-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-30\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.01, \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7dadb39b00a1\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": null, \\n                    \\\"taxDate\\\": \\\"2017-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Charge Dispute\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/invoice/{invoiceId}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"comment\\\": \\\"the comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-11-30\\\", \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 0, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"invoiceItemId\\\": \\\"402890555a7d4022015a7dadb3b700a6\\\", \\n            \\\"serviceEndDate\\\": \\\"2017-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2017-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-30\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.01, \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7dadb39b00a1\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": null, \\n                    \\\"taxDate\\\": \\\"2017-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Charge Dispute\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos/{debitMemoId}": {
      "delete": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nDeletes a debit memo. Only debit memos with the Cancelled status can be deleted. \n",
        "operationId": "DELETE_DebitMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete debit memo",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/debitmemos/{debitMemoId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about a specific debit memo.\n",
        "operationId": "GET_DebitMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7d4022015a7dabf5f60088",
                "amount": 9,
                "balance": 9,
                "beAppliedAmount": 0,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 17:01:00",
                "debitMemoDate": "2017-03-01",
                "dueDate": "2017-03-31",
                "id": "402890555a87d7f5015a8919e4fe002e",
                "latestPDFFileId": "402890555a87d7f5015a8919e95d003a",
                "number": "DM00000002",
                "reasonCode": "Correcting invoice error",
                "referredInvoiceId": "402890555a7d4022015a7dadb3b300a4",
                "status": "Draft",
                "success": true,
                "taxAmount": 8,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 17:01:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoType"
            }
          }
        },
        "summary": "Get debit memo",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/debitmemos/{debitMemoId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nUpdates the basic and finance information about a debit memo. Currently, Zuora supports updating tax-exclusive memo items, but does not support updating tax-inclusive memo items. \n\nIf the amount of a memo item is updated, the tax will be recalculated in the following conditions:\n  - The memo is created from a product rate plan charge and you use Avalara to calculate the tax.\n  - The memo is created from an invoice and you use Avalara or Zuora Tax to calculate the tax.\n",
        "operationId": "PUT_DebitMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTDebitMemoType"
            }
          },
          {
            "description": "The unique ID of a debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 12.9,
                "balance": 12.9,
                "beAppliedAmount": 0,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-02 14:26:45",
                "debitMemoDate": "2017-03-02",
                "dueDate": "2017-04-01",
                "id": "4028905f5a890526015a8db30954007a",
                "latestPDFFileId": "4028905f5a890526015a8db30a570085",
                "number": "DM00000003",
                "reasonCode": "Correcting invoice error",
                "referredInvoiceId": "4028905f5a87c0ff015a87d3f8f10043",
                "status": "Draft",
                "success": true,
                "taxAmount": 0.9,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-02 14:27:05"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoType"
            }
          }
        },
        "summary": "Update debit memo",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"CustomField1__c\": \"cf111\", \n    \"IndexedCustomFiled1__c\": \"cf222\", \n    \"comment\": \"new comment\", \n    \"effectiveDate\": \"2017-04-17\", \n    \"items\": [\n        {\n            \"amount\": 1, \n            \"comment\": \"This is comment!\", \n            \"id\": \"402890555b797b57015b7986fc1a001c\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-1\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.03, \n                    \"id\": \"402890555b797b57015b7986fc3c001d\", \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX1\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }, \n        {\n            \"amount\": 2, \n            \"comment\": \"This is comment!\", \n            \"id\": \"402890555b797b57015b7986fc41001e\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-2\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.06, \n                    \"id\": \"402890555b797b57015b7986fc4c001f\", \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX2\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }\n    ], \n    \"reasonCode\": \"Correcting invoice error\"\n}' \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"CustomField1__c\": \"cf111\", \n    \"IndexedCustomFiled1__c\": \"cf222\", \n    \"comment\": \"new comment\", \n    \"effectiveDate\": \"2017-04-17\", \n    \"items\": [\n        {\n            \"amount\": 1, \n            \"comment\": \"This is comment!\", \n            \"id\": \"402890555b797b57015b7986fc1a001c\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-1\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.03, \n                    \"id\": \"402890555b797b57015b7986fc3c001d\", \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX1\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }, \n        {\n            \"amount\": 2, \n            \"comment\": \"This is comment!\", \n            \"id\": \"402890555b797b57015b7986fc41001e\", \n            \"serviceEndDate\": \"2016-11-30\", \n            \"serviceStartDate\": \"2016-11-01\", \n            \"skuName\": \"SKU-2\", \n            \"taxItems\": [\n                {\n                    \"amount\": 0.06, \n                    \"id\": \"402890555b797b57015b7986fc4c001f\", \n                    \"jurisdiction\": \"CALIFORNIA\", \n                    \"locationCode\": \"06\", \n                    \"taxCode\": null, \n                    \"taxCodeDescription\": \"This is tax code description!\", \n                    \"taxDate\": \"2016-11-30\", \n                    \"taxExemptAmount\": 0.0, \n                    \"taxName\": \"STATE TAX2\", \n                    \"taxRate\": 0.0625, \n                    \"taxRateDescription\": \"This is tax rate description!\", \n                    \"taxRateType\": \"Percentage\"\n                }\n            ], \n            \"unitOfMeasure\": \"Test_UOM\"\n        }\n    ], \n    \"reasonCode\": \"Correcting invoice error\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"CustomField1__c\\\": \\\"cf111\\\", \\n    \\\"IndexedCustomFiled1__c\\\": \\\"cf222\\\", \\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-04-17\\\", \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc1a001c\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-1\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.03, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc3c001d\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX1\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 2, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc41001e\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-2\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.06, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc4c001f\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX2\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"CustomField1__c\\\": \\\"cf111\\\", \\n    \\\"IndexedCustomFiled1__c\\\": \\\"cf222\\\", \\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-04-17\\\", \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc1a001c\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-1\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.03, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc3c001d\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX1\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 2, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc41001e\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-2\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.06, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc4c001f\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX2\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/debitmemos/{debitMemoId}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"CustomField1__c\\\": \\\"cf111\\\", \\n    \\\"IndexedCustomFiled1__c\\\": \\\"cf222\\\", \\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-04-17\\\", \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc1a001c\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-1\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.03, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc3c001d\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX1\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 2, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc41001e\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-2\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.06, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc4c001f\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX2\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"CustomField1__c\\\": \\\"cf111\\\", \\n    \\\"IndexedCustomFiled1__c\\\": \\\"cf222\\\", \\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"effectiveDate\\\": \\\"2017-04-17\\\", \\n    \\\"items\\\": [\\n        {\\n            \\\"amount\\\": 1, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc1a001c\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-1\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.03, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc3c001d\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX1\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }, \\n        {\\n            \\\"amount\\\": 2, \\n            \\\"comment\\\": \\\"This is comment!\\\", \\n            \\\"id\\\": \\\"402890555b797b57015b7986fc41001e\\\", \\n            \\\"serviceEndDate\\\": \\\"2016-11-30\\\", \\n            \\\"serviceStartDate\\\": \\\"2016-11-01\\\", \\n            \\\"skuName\\\": \\\"SKU-2\\\", \\n            \\\"taxItems\\\": [\\n                {\\n                    \\\"amount\\\": 0.06, \\n                    \\\"id\\\": \\\"402890555b797b57015b7986fc4c001f\\\", \\n                    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n                    \\\"locationCode\\\": \\\"06\\\", \\n                    \\\"taxCode\\\": null, \\n                    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n                    \\\"taxDate\\\": \\\"2016-11-30\\\", \\n                    \\\"taxExemptAmount\\\": 0.0, \\n                    \\\"taxName\\\": \\\"STATE TAX2\\\", \\n                    \\\"taxRate\\\": 0.0625, \\n                    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n                    \\\"taxRateType\\\": \\\"Percentage\\\"\\n                }\\n            ], \\n            \\\"unitOfMeasure\\\": \\\"Test_UOM\\\"\\n        }\\n    ], \\n    \\\"reasonCode\\\": \\\"Correcting invoice error\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos/{debitMemoId}/cancel": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCancels a debit memo. Only debit memos with the Draft status can be cancelled.\n",
        "operationId": "POST_CancelDebitMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7d4022015a7dabf5f60088",
                "amount": 0.01,
                "balance": 0.01,
                "beAppliedAmount": 0,
                "cancelledById": "402881e522cf4f9b0122cf5d82860002",
                "cancelledOn": "2017-09-01 19:59:07",
                "comment": "the comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 17:13:15",
                "debitMemoDate": "2017-11-30",
                "dueDate": "2017-12-30",
                "id": "402890555a87d7f5015a89251edc0045",
                "number": "DM00000003",
                "reasonCode": "Charge Dispute",
                "referredInvoiceId": "402890555a7d4022015a7dadb3b300a4",
                "status": "Canceled",
                "success": true,
                "taxAmount": 0.01,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 17:57:26"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoType"
            }
          }
        },
        "summary": "Cancel debit memo",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/cancel\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}/cancel');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/cancel\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/debitmemos/{debitMemoId}/cancel\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/cancel\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos/{debitMemoId}/emails": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nSends a posted debit memo to the specified email addresses manually.\n\n\n\n## Notes\n  - You must activate the **Email Debit Memo | Manually email Debit Memo** notification before emailing debit memos. To include the debit memo PDF in the email, select the **Include Debit Memo PDF** check box in the **Edit notification** dialog from the Zuora UI. See [Create and Edit Notifications](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/C_Create_Notifications#section_2) for more information.\n\n\n  - Zuora sends the email messages based on the email template you set. You can set the email template to use in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. By default, the **Manual Email for Debit Memo Default Template** template is used. See [Create and Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information.\n\n\n  - The debit memos are sent only to the work email addresses or personal email addresses of the Bill To contact if the following conditions are all met:\n\n    * The `useEmailTemplateSetting` field is set to `false`.\n    * The email addresses are not specified in the `emailAddresses` field.\n",
        "operationId": "POST_EmailDebitMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDebitMemoEmailType"
            }
          },
          {
            "description": "The ID of a posted debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Email debit memo",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"emailAddresses\": \"test1@test.com,test2@test.com\", \n    \"includeAdditionalEmailAddresses\": false, \n    \"useEmailTemplateSetting\": false\n}' \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/emails\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}/emails');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"emailAddresses\": \"test1@test.com,test2@test.com\", \n    \"includeAdditionalEmailAddresses\": false, \n    \"useEmailTemplateSetting\": false\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/emails\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/debitmemos/{debitMemoId}/emails\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/emails\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/emails\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos/{debitMemoId}/items": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all items of a debit memo. A debit memo item is a single line item in a debit memo. \n",
        "operationId": "GET_DebitMemoItems",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The unique ID of a debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          },
          {
            "description": "This parameter restricts the data returned in the response. You can use this parameter to supply a dimension you want to filter on.\n\n A single filter uses the following form: \n\n*fieldsFilterable* `=` *field_value*\n            \nFilters can be combined by using `&`. For example: *fieldsFilterable* `=` *field_value* `&` *fieldsFilterable* `=` *field_value*\n\n*fieldsFilterable* indicates the name of a supported field that you can use to filter the response data. The supported filterable fields of this operation are as below:\n\n  - id\n  - amount\n  - beAppliedAmount\n  - sku\n  - skuName\n  - serviceStartDate\n  - serviceEndDate\n  - sourceItemId\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  - subscriptionId\n\n *field_value* indicates a valid value of the filterable field. If the type of the field value is string, you can set the field to `null` value for filtering. Then, you can get the response data with this field value being 'null'. For more information about these fields, see the field descriptions in the **Responses** section. \n  \nExamples:\n\n- /debitmemos/402890245c7ca371015c7cb40b28001f/items?amount=100\n\n- /debitmemos/402890245c7ca371015c7cb40b28001f/items?amount=100&sort=createdDate\n",
            "in": "query",
            "name": "fieldsFilterable",
            "required": false,
            "type": "string"
          },
          {
            "description": "This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.\n\nA sortable field uses the following form: \n\n*operator* *field_name*\n\nYou can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*  \n\n*operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.\n\n  - The `-` operator indicates an ascending order.\n  - The `+` operator indicates a descending order.\n\nBy default, the response data is displayed in descending order by updated date.\n\n*field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:\n\n  - id\n  - amount\n  - beAppliedAmount\n  - sku\n  - skuName\n  - serviceStartDate\n  - serviceEndDate\n  - sourceItemId\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  - subscriptionId\n  \nExamples:\n\n- /debitmemos/402890245c7ca371015c7cb40b28001f/items?sort=createdDate\n\n- /debitmemos/402890245c7ca371015c7cb40b28001f/items?amount=100&sort=createdDate\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "items": [
                  {
                    "amount": 0,
                    "balance": 0,
                    "beAppliedAmount": 0,
                    "comment": "This is comment!",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 17:13:15",
                    "financeInformation": {
                      "deferredRevenueAccountingCode": "Subscription Revenue",
                      "deferredRevenueAccountingCodeType": "SalesRevenue",
                      "recognizedRevenueAccountingCode": "Subscription Revenue",
                      "recognizedRevenueAccountingCodeType": "SalesRevenue"
                    },
                    "id": "402890555a87d7f5015a89251ede0046",
                    "serviceEndDate": "2017-11-30",
                    "serviceStartDate": "2017-11-01",
                    "sku": "SKU-00000002",
                    "skuName": "SKU-30",
                    "sourceItemId": "402890555a7d4022015a7dadb3b700a6",
                    "sourceItemType": "InvoiceDetail",
                    "taxItems": [
                      {
                        "appliedAmount": 0,
                        "creditAmount": 0,
                        "exemptAmount": 0,
                        "financeInformation": {},
                        "id": "402890555a87d7f5015a89251ef10047",
                        "jurisdiction": "CALIFORNIA",
                        "locationCode": "06",
                        "name": "STATE TAX",
                        "paymentAmount": 0,
                        "refundAmount": 0,
                        "sourceTaxItemId": "402890555a7d4022015a7dadb39b00a1",
                        "taxAmount": 0.01,
                        "taxCode": "ZtaxCode",
                        "taxCodeDescription": "",
                        "taxDate": "2017-11-30",
                        "taxRate": 0.0625,
                        "taxRateDescription": "This is tax rate description!",
                        "taxRateType": "Percentage",
                        "unappliedAmount": 0.01
                      }
                    ],
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 17:13:15"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoItemCollectionType"
            }
          }
        },
        "summary": "Get debit memo items",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/debitmemos/{debitMemoId}/items\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos/{debitMemoId}/items/{dmitemid}": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the information about a specific item of a debit memo. A debit memo item is a single line item in a debit memo.\n",
        "operationId": "GET_DebitMemoItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).\n",
            "in": "path",
            "name": "dmitemid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 1,
                "balance": 1,
                "beAppliedAmount": 0,
                "comment": "aa",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 17:01:00",
                "financeInformation": {
                  "deferredRevenueAccountingCode": "Subscription Revenue",
                  "deferredRevenueAccountingCodeType": "SalesRevenue",
                  "recognizedRevenueAccountingCode": "Subscription Revenue",
                  "recognizedRevenueAccountingCodeType": "SalesRevenue"
                },
                "id": "402890555a87d7f5015a8919e500002f",
                "serviceEndDate": "2017-03-26",
                "serviceStartDate": "2017-02-27",
                "sku": "SKU-00000002",
                "skuName": "ZTax Component",
                "sourceItemId": "402890555a7d4022015a7dadb3b700a6",
                "sourceItemType": "InvoiceDetail",
                "success": true,
                "taxItems": [
                  {
                    "appliedAmount": 0,
                    "creditAmount": 0,
                    "exemptAmount": 0,
                    "financeInformation": {},
                    "id": "402890555a87d7f5015a8919e8450031",
                    "jurisdiction": "USA",
                    "locationCode": "",
                    "name": "my tax",
                    "paymentAmount": 0,
                    "refundAmount": 0,
                    "sourceTaxItemId": "402890555a7d4022015a7dadb39b00a1",
                    "taxAmount": 5,
                    "taxCode": "ZtaxCode",
                    "taxCodeDescription": "",
                    "taxDate": "2017-02-27",
                    "taxRate": 5,
                    "taxRateDescription": "desc3",
                    "taxRateType": "FlatFee",
                    "unappliedAmount": 5
                  },
                  {
                    "appliedAmount": 0,
                    "creditAmount": 0,
                    "exemptAmount": 0,
                    "financeInformation": {},
                    "id": "402890555a87d7f5015a8919e8450032",
                    "jurisdiction": "USA",
                    "locationCode": "",
                    "name": "Country Tax",
                    "paymentAmount": 0,
                    "refundAmount": 0,
                    "sourceTaxItemId": "402890555a7d4022015a7dadb39c00a2",
                    "taxAmount": 3,
                    "taxCode": "ZtaxCode",
                    "taxCodeDescription": "",
                    "taxDate": "2017-02-27",
                    "taxRate": 3,
                    "taxRateDescription": "",
                    "taxRateType": "FlatFee",
                    "unappliedAmount": 3
                  }
                ],
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 17:01:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoItemType"
            }
          }
        },
        "summary": "Get debit memo item",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items/{dmitemid}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items/{dmitemid}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items/{dmitemid}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/debitmemos/{debitMemoId}/items/{dmitemid}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items/{dmitemid}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/items/{dmitemid}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos/{debitMemoId}/pdfs": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nCreates PDF for a specified debit memo. To access the generated PDF, you can download it by clicking **View PDF** on the detailed debit memo page through the Zuora UI.\n",
        "operationId": "POST_DebitMemoPDF",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of the debit memo that you want to create PDF for. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTMemoPdfResponse"
            }
          }
        },
        "summary": "Create debit memo PDF",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/pdfs\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}/pdfs');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/pdfs\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/debitmemos/{debitMemoId}/pdfs\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/pdfs\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/pdfs\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/debitmemos/{debitMemoId}/post": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nPosts a debit memo to activate it. You can post debit memos only if you have the [Billing permissions](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles#Billing_Permissions).\n",
        "operationId": "POST_PostDebitMemo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "debitMemoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890555a7d4022015a7dabf5f60088",
                "amount": 9,
                "balance": 9,
                "beAppliedAmount": 0,
                "comment": "",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 17:01:00",
                "debitMemoDate": "2017-03-01",
                "dueDate": "2017-03-31",
                "id": "402890555a87d7f5015a8919e4fe002e",
                "number": "DM00000002",
                "postedById": "402881e522cf4f9b0122cf5d82860002",
                "postedOn": "2017-03-01 18:14:29",
                "reasonCode": "Correcting invoice error",
                "referredInvoiceId": "402890555a7d4022015a7dadb3b300a4",
                "status": "Posted",
                "success": true,
                "taxAmount": 8,
                "totalTaxExemptAmount": 0,
                "transferredToAccounting": "No",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 18:14:29"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETDebitMemoType"
            }
          }
        },
        "summary": "Post debit memo",
        "tags": [
          "Debit Memos"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/post\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/debitmemos/{debitMemoId}/post');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/post\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/debitmemos/{debitMemoId}/post\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/post\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/debitmemos/{debitMemoId}/post\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/describe/{object}": {
      "get": {
        "description": "Provides a reference listing of each object that is available in your Zuora tenant.\n\nThe information returned by this call is useful if you are using [CRUD: Create Export](https://www.zuora.com/developer/api-reference/#operation/Object_POSTExport) or the [AQuA API](https://knowledgecenter.zuora.com/DC_Developers/T_Aggregate_Query_API) to create a data source export. See [Export ZOQ](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL) for more information.\n\n## Response\nThe response contains an XML document that lists the fields of the specified object. Each of the object's fields is represented by a `<field>` element in the XML document.\n    \nEach `<field>` element contains the following elements:\n  * `<name>` - API name of the field\n  * `<label>` - Name of the field in the Zuora user interface\n  * `<type>` - Data type of the field. For example, `text`, `decimal`, or `picklist`. If the data type is `picklist`, the `<field>` element contains an `<options>` element that lists the possible values of the field\n  * `<contexts>` - Specifies the availability of the field. If the `<contexts>` element lists the `export` context, the field is available for use in data source exports\n\nFor example:\n```xml\n<field>\n  <name>TaxMode</name>\n  <label>Tax Mode</label>\n  <type>picklist</type>\n  <options>\n    <option>TaxExclusive</option>\n    <option>TaxInclusive</option>\n  </options>\n  <contexts>\n    <context>export</context>\n  </contexts>\n</field>\n```\n\nIt is strongly recommended that your integration checks `<contexts>` elements in the response. If your integration does not check `<contexts>` elements, your integration may process fields that are not available for use in data source exports. See [Changes to the Describe API](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL/Changes_to_the_Describe_API) for more information.\n",
        "operationId": "GET_Describe",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "API name of an object in your Zuora tenant. For example, `InvoiceItem`. See [Zuora Object Model](https://www.zuora.com/developer/api-reference/#section/Zuora-Object-Model) for the list of valid object names.\n\nDepending on the features enabled in your Zuora tenant, you may not be able to list the fields of some objects.\n",
            "in": "path",
            "name": "object",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/xml; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Returns an XML document that lists the fields of the specified object\n"
          }
        },
        "summary": "Describe object",
        "tags": [
          "Describe"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/describe/{object}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/describe/{object}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/describe/{object}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/describe/{object}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/describe/{object}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/describe/{object}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/entities": {
      "get": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\n\nRetrieves detailed information of certain entities in a multi-entity hierarchy.\n\n\nYou can retrieve:\n\n - Provisioned entities\n  \n - Unprovisioned entities\n  \n - Both provisioned and unprovisioned entities\n\n## User Access Permission\n\nYou can make the call as any entity user.\n",
        "operationId": "GET_Entities",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Specify whether to retrieve provisioned or unprovisioned entities:\n\n- `true`: Provisioned entities\n\n- `false`: Unprovisioned entities\n\n\nIf you do not specify this field in the request, both the provisioned and unprovisioned entities are returned.\n",
            "in": "query",
            "name": "provisioned",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "entities": [
                  {
                    "displayName": "Acme Corporation",
                    "id": "8a808255557baba1015580e12fa5083a",
                    "locale": "en_US",
                    "name": "Acme Corporation",
                    "status": "Provisioned",
                    "tenantId": "6398",
                    "timezone": "GMT"
                  },
                  {
                    "displayName": "Acme-Americas",
                    "id": "8a80825555a3c7a10155b460f53858e6",
                    "locale": "en_US",
                    "name": "Acme-Americas",
                    "parentId": "8a808255557baba1015580e12fa5083a",
                    "status": "Provisioned",
                    "tenantId": "6398",
                    "timezone": "America/Los_Angeles"
                  },
                  {
                    "displayName": "Acme-US",
                    "id": "8a80825555a3c7a10155b46120d058e7",
                    "locale": "en_US",
                    "name": "Acme-US",
                    "parentId": "8a80825555a3c7a10155b460f53858e6",
                    "status": "Provisioned",
                    "tenantId": "6398",
                    "timezone": "America/Los_Angeles"
                  },
                  {
                    "displayName": "Acme-Europe",
                    "id": "8a80825556ff28a4015708ba29312ecc",
                    "locale": "en_US",
                    "name": "Acme-Europe",
                    "parentId": "8a808255557baba1015580e12fa5083a",
                    "status": "Provisioned",
                    "tenantId": "6398",
                    "timezone": "Europe/Paris"
                  },
                  {
                    "displayName": "Acme-UK",
                    "id": "8a80825556ff28a4015708bac1d8305f",
                    "locale": "en_US",
                    "name": "Acme-UK",
                    "parentId": "8a80825556ff28a4015708ba29312ecc",
                    "status": "Unprovisioned",
                    "tenantId": "6398",
                    "timezone": "Europe/London"
                  },
                  {
                    "displayName": "Acme-France",
                    "id": "8a80825556ff28a4015708bb21963060",
                    "locale": "en_US",
                    "name": "Acme-France",
                    "parentId": "8a80825556ff28a4015708ba29312ecc",
                    "status": "Unprovisioned",
                    "tenantId": "6398",
                    "timezone": "Europe/Paris"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETEntitiesResponseType"
            }
          }
        },
        "summary": "Multi-entity: Get entities",
        "tags": [
          "Entities"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/entities\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entities');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entities\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/entities\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entities\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entities\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCreates an entity in a multi-entity hierarchy.\n\n## User Access Permission\nYou must make the call as a global entity administrator.\n\n## Notes\n* We recommend that you assign only one administrator to manage the entity hierarchy, because an administrator of the global entity by default can only access to the entities that are created by themselves.\n",
        "operationId": "POST_Entities",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEntityType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "displayName": "Acme-Asia",
                "id": "8a80825556ff28a4015709096c5d6f5d",
                "locale": "zh_CN",
                "name": "Acme-Asia",
                "parentId": "8a808255557baba1015580e12fa5083a",
                "status": "Unprovisioned",
                "success": true,
                "tenantId": "6398",
                "timezone": "Asia/Harbin"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateEntityResponseType"
            }
          }
        },
        "summary": "Multi-entity: Create entity",
        "tags": [
          "Entities"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"displayName\": \"Acme-Asia\", \n    \"locale\": \"zh_CN\", \n    \"name\": \"Acme-Asia\", \n    \"parentId\": \"8a808255557baba1015580e12fa5083a\", \n    \"timezone\": \"Asia/Harbin\"\n}' \"https://rest.zuora.com//v1/entities\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entities');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"displayName\": \"Acme-Asia\", \n    \"locale\": \"zh_CN\", \n    \"name\": \"Acme-Asia\", \n    \"parentId\": \"8a808255557baba1015580e12fa5083a\", \n    \"timezone\": \"Asia/Harbin\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"displayName\\\": \\\"Acme-Asia\\\", \\n    \\\"locale\\\": \\\"zh_CN\\\", \\n    \\\"name\\\": \\\"Acme-Asia\\\", \\n    \\\"parentId\\\": \\\"8a808255557baba1015580e12fa5083a\\\", \\n    \\\"timezone\\\": \\\"Asia/Harbin\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entities\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"displayName\\\": \\\"Acme-Asia\\\", \\n    \\\"locale\\\": \\\"zh_CN\\\", \\n    \\\"name\\\": \\\"Acme-Asia\\\", \\n    \\\"parentId\\\": \\\"8a808255557baba1015580e12fa5083a\\\", \\n    \\\"timezone\\\": \\\"Asia/Harbin\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/entities\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entities\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"displayName\\\": \\\"Acme-Asia\\\", \\n    \\\"locale\\\": \\\"zh_CN\\\", \\n    \\\"name\\\": \\\"Acme-Asia\\\", \\n    \\\"parentId\\\": \\\"8a808255557baba1015580e12fa5083a\\\", \\n    \\\"timezone\\\": \\\"Asia/Harbin\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entities\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"displayName\\\": \\\"Acme-Asia\\\", \\n    \\\"locale\\\": \\\"zh_CN\\\", \\n    \\\"name\\\": \\\"Acme-Asia\\\", \\n    \\\"parentId\\\": \\\"8a808255557baba1015580e12fa5083a\\\", \\n    \\\"timezone\\\": \\\"Asia/Harbin\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/entities/{id}": {
      "delete": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRemoves an entity and its sub-entities from a multi-entity hierarchy. You can only remove unprovisioned entities. An error occurred when you remove a provisioned entity.\n\n## User Access Permission\nYou must make the call as a global entity administrator.   \n",
        "operationId": "DELETE_Entities",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Specify the Id of the entity that you want to delete. You can get the entity Id from the GET Entities call.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/DELETEntityResponseType"
            }
          }
        },
        "summary": "Multi-entity: Delete entity",
        "tags": [
          "Entities"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/entities/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entities/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entities/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/entities/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entities/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entities/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves detailed information about a specified entity.\n\n## User Access Permission\nYou can make the call as any entity user.     \n",
        "operationId": "GET_EntityById",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Specify the Id of the entity that you want to retrieve. You can get the entity Id from the GET Entities call.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "displayName": "Acme-Americas",
                "id": "8a80825555a3c7a10155b460f53858e6",
                "locale": "en_US",
                "name": "Acme-Americas",
                "parentId": "8a808255557baba1015580e12fa5083a",
                "status": "Provisioned",
                "success": true,
                "tenantId": "6398",
                "timezone": "America/Los_Angeles"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETEntitiesResponseTypeWithId"
            }
          }
        },
        "summary": "Multi-entity: Get entity by Id",
        "tags": [
          "Entities"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/entities/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entities/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entities/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/entities/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entities/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entities/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nEdits the following information about an unprovisioned entity:\n\n - Name\n \n - Display name\n \n - Locale\n \n - Timezone\n\n## User Access Permission\nYou must make the call as a global entity administrator.\n\n## Notes\n* You are not allowed to edit the locale and time zone of the provisioned entities through the REST API.\n* You are not allowed to edit the display name of the global entity.\n",
        "operationId": "PUT_Entities",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The Id of the entity that you want to edit. You can get the entity Id from the GET Entities call.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEntityType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/UpdateEntityResponseType"
            }
          }
        },
        "summary": "Multi-entity: Update entity",
        "tags": [
          "Entities"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"displayName\": \"Acme-Italy\", \n    \"locale\": \"en_GB\", \n    \"name\": \"Acme-Italy\", \n    \"timezone\": \"Europe/Rome\"\n}' \"https://rest.zuora.com//v1/entities/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entities/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"displayName\": \"Acme-Italy\", \n    \"locale\": \"en_GB\", \n    \"name\": \"Acme-Italy\", \n    \"timezone\": \"Europe/Rome\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"displayName\\\": \\\"Acme-Italy\\\", \\n    \\\"locale\\\": \\\"en_GB\\\", \\n    \\\"name\\\": \\\"Acme-Italy\\\", \\n    \\\"timezone\\\": \\\"Europe/Rome\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entities/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"displayName\\\": \\\"Acme-Italy\\\", \\n    \\\"locale\\\": \\\"en_GB\\\", \\n    \\\"name\\\": \\\"Acme-Italy\\\", \\n    \\\"timezone\\\": \\\"Europe/Rome\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/entities/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entities/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"displayName\\\": \\\"Acme-Italy\\\", \\n    \\\"locale\\\": \\\"en_GB\\\", \\n    \\\"name\\\": \\\"Acme-Italy\\\", \\n    \\\"timezone\\\": \\\"Europe/Rome\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entities/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"displayName\\\": \\\"Acme-Italy\\\", \\n    \\\"locale\\\": \\\"en_GB\\\", \\n    \\\"name\\\": \\\"Acme-Italy\\\", \\n    \\\"timezone\\\": \\\"Europe/Rome\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/entities/{id}/provision": {
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nProvisions an entity. You can only provision an entity if its parent entity is provisioned.\n\n## User Access Permission\nYou must make the call as a global entity administrator. \n\n## Notes\n* Zuora does not allow you to remove a provisioned entity from the multi-entity hierarchy. So before you provision an entity, make sure that you put the entity in the correct place in the multi-entity hierarchy. \n",
        "operationId": "PUT_ProvisionEntity",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Specify the Id of the entity that you want to provision.  You can get the entity Id from the GET Entities call.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProvisionEntityResponseType"
            }
          }
        },
        "summary": "Multi-entity: Provision entity",
        "tags": [
          "Entities"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/entities/{id}/provision\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entities/{id}/provision');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entities/{id}/provision\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/entities/{id}/provision\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entities/{id}/provision\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entities/{id}/provision\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/entity-connections": {
      "get": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves information about certain connections for a specified entity. You can specify the entity to retrieve in the `entityId` or `entityName` request header.\n\nYou can retrieve:\n - Inbound connections\n - Outbound connections\n - Both inbound and outbound connections\n\n## User Access Permission\nYou can make the call as any entity user. \n",
        "operationId": "GET_EntityConnections",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_entityConnection"
          },
          {
            "description": "Specifies whether to retrieve inbound or outbound connections for an entity.\n\nPossible values:\n - `inbound`: All the incoming connections to the entity.\n - `outbound`: All the outgoing connections from the entity.\n\nIf you do not specify this field in the request, both the inbound and outbound connections are returned.\n",
            "enum": [
              "inbound",
              "outbound"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "entityConnections": [
                  {
                    "id": "8a80825555a3c7a10155b54a63821c0d",
                    "sourceEntityId": "8a80825555a3c7a10155b46120d058e7",
                    "status": "Connected",
                    "targetEntityId": "8a808255557baba1015580e12fa5083a"
                  },
                  {
                    "id": "8a80825555a3c7a10155b466736c5c3f",
                    "sourceEntityId": "8a808255557baba1015580e12fa5083a",
                    "status": "Connected",
                    "targetEntityId": "8a80825555a3c7a10155b460f53858e6"
                  },
                  {
                    "id": "8a808255575bdae401576a914a140420",
                    "sourceEntityId": "8a808255557baba1015580e12fa5083a",
                    "status": "Connected",
                    "targetEntityId": "8a80825556ff28a4015708ba29312ecc"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETEntityConnectionsResponseType"
            }
          }
        },
        "summary": "Multi-entity: Get connections",
        "tags": [
          "Entity Connections"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/entity-connections\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entity-connections');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entity-connections\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/entity-connections\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entity-connections\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entity-connections\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nInitiates a connection request from a source entity to a target entity.\n\n## User Access Permission\nYou must make the call as a source entity administrator. Also, this administrator must have permission to access to the target entity.\n",
        "operationId": "POST_EntityConnections",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "schema": {
              "$ref": "#/definitions/POSTEntityConnectionsType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "8a808255575bdae401576a914a140420",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTEntityConnectionsResponseType"
            }
          }
        },
        "summary": "Multi-entity: Initiate connection",
        "tags": [
          "Entity Connections"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"targetEntityId\": \"8a80825556ff28a4015708ba29312ecc\"\n}' \"https://rest.zuora.com//v1/entity-connections\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entity-connections');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"targetEntityId\": \"8a80825556ff28a4015708ba29312ecc\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"targetEntityId\\\": \\\"8a80825556ff28a4015708ba29312ecc\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entity-connections\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"targetEntityId\\\": \\\"8a80825556ff28a4015708ba29312ecc\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/entity-connections\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entity-connections\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"targetEntityId\\\": \\\"8a80825556ff28a4015708ba29312ecc\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entity-connections\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"targetEntityId\\\": \\\"8a80825556ff28a4015708ba29312ecc\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/entity-connections/{connection-id}/accept": {
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nAccepts a connection request.\n\n## User Access Permission\nYou must make the call as an entity administrator to accept a connection request.\n",
        "operationId": "PUT_EntityConnectionsAccept",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The ID of the connection that you want to accept.\n",
            "in": "path",
            "name": "connection-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTEntityConnectionsAcceptResponseType"
            }
          }
        },
        "summary": "Multi-entity: Accept connection",
        "tags": [
          "Entity Connections"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/entity-connections/{connection-id}/accept\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entity-connections/{connection-id}/accept');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/accept\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/entity-connections/{connection-id}/accept\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/accept\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/accept\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/entity-connections/{connection-id}/deny": {
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nDenies a connection request.\n\n## User Access Permission\nYou must make the call as an entity administrator to deny a connection request.\n",
        "operationId": "PUT_EntityConnectionsDeny",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The ID of the connection that you want to deny.\n",
            "in": "path",
            "name": "connection-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTEntityConnectionsDenyResponseType"
            }
          }
        },
        "summary": "Multi-entity: Deny connection",
        "tags": [
          "Entity Connections"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/entity-connections/{connection-id}/deny\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entity-connections/{connection-id}/deny');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/deny\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/entity-connections/{connection-id}/deny\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/deny\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/deny\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/entity-connections/{connection-id}/disconnect": {
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nDisconnects an established connection request.\n\n## User Access Permission\nYou must make the call as an administrator of the target entity or source entity.\n",
        "operationId": "PUT_EntityConnectionsDisconnect",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The ID of the connection that you want to disconnect.\n",
            "in": "path",
            "name": "connection-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTEntityConnectionsDisconnectResponseType"
            }
          }
        },
        "summary": "Multi-entity: Disconnect connection",
        "tags": [
          "Entity Connections"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/entity-connections/{connection-id}/disconnect\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/entity-connections/{connection-id}/disconnect');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/disconnect\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/entity-connections/{connection-id}/disconnect\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/disconnect\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/entity-connections/{connection-id}/disconnect\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/files/{file-id}": {
      "get": {
        "description": "Retrieve a file by specifying its file ID. You can retrieve accounting period reports, such as the Revenue Detail report, as well as other files such as invoice PDFs.\n\n## Example\n\n```curl\ncurl -i -k -H \"apiAccessKeyId:$USER_NAME\" -H \"apiSecretAccessKey:$PASSWORD\"\n-H \"Accept:application/pdf\"\n-X GET https://rest.zuora.com/v1/files/2c92c08c55534cf00155581fb474314d\n-o /Users/jsmith/Downloads/invoiceFile1.pdf\n```\nThe invoice PDF is downloaded to /Users/jsmith/Downloads and named invoiceFile1.pdf.\n\n## File Size Limitation\nThe maximum export file size is 2047MB. If you have large data requests that go over this limit, you will get the following 403 HTTP response code from Zuora.\n\n`<security:max-object-size>2047MB</security:max-object-size>`\n\nSubmit a request at [Zuora Global Support](https://zuora.zendesk.com/agent/) if you require additional assistance.\n\nWe can work with you to determine if large file optimization is an option for you.\n",
        "operationId": "GET_Files",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The Zuora ID of the file you want to retrieve.\n",
            "in": "path",
            "name": "file-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get files",
        "tags": [
          "Get Files"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/files/{file-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/files/{file-id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/files/{file-id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/files/{file-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/files/{file-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/files/{file-id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/hmac-signatures": {
      "post": {
        "description": "This REST API reference describes how to return unique signature and token values that used to process a CORS enabled API call.\n",
        "operationId": "POST_HMACSignatures",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTHMACSignatureType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "signature": "ZmI0ZjE2ZTMxMWY1YjA0ZTc4MTg1ZDhlYWRkMTEwNDE3M2RiMzNiNQ==",
                "success": true,
                "token": "gCH6gYqQffQCsFKSLuxyagXsuXcIK0uf"
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTHMACSignatureResponseType"
            }
          }
        },
        "summary": "Return HMAC signatures",
        "tags": [
          "HMAC Signatures"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountKey\": \"A00000001\", \n    \"method\": \"POST\", \n    \"uri\": \"https://rest.zuora.com/v1/payment-methods/credit-cards\"\n}' \"https://rest.zuora.com//v1/hmac-signatures\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/hmac-signatures');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountKey\": \"A00000001\", \n    \"method\": \"POST\", \n    \"uri\": \"https://rest.zuora.com/v1/payment-methods/credit-cards\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountKey\\\": \\\"A00000001\\\", \\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"uri\\\": \\\"https://rest.zuora.com/v1/payment-methods/credit-cards\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/hmac-signatures\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountKey\\\": \\\"A00000001\\\", \\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"uri\\\": \\\"https://rest.zuora.com/v1/payment-methods/credit-cards\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/hmac-signatures\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/hmac-signatures\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountKey\\\": \\\"A00000001\\\", \\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"uri\\\": \\\"https://rest.zuora.com/v1/payment-methods/credit-cards\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/hmac-signatures\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountKey\\\": \\\"A00000001\\\", \\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"uri\\\": \\\"https://rest.zuora.com/v1/payment-methods/credit-cards\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/hostedpages": {
      "get": {
        "description": "The hostedpages call returns the Payment Pages configuration metadata,\nspecifically, page ID, page version, payment method type.\n\nThe following are the version-specific and general REST requests for Payment Pages:\n\n* The request for Payment Pages 1.0 configuration information: `GET <BaseURL>/hostedpages?version=1`\n* The request for Payment Pages 2.0 configuration information: `GET <BaseURL>/hostedpages?version=2`\n* The request for all versions of Payment Pages configuration information: `GET <BaseURL>/hostedpages`\n\n## Notes\nIf you do not have the corresponding tenant setting enabled, e.g., the request `version` parameter set to 2 with the Payment Pages 2.0 setting disabled, you will receive an error.\n",
        "operationId": "Get_HostedPages",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "Version of the Payment Pages for which you want to retrieve the configuration information. Specify 1 for Payment Pages 1.0 or 2 for Payment Pages 2.0. If omitted, information for all versions of Payment Pages are returned.\n\nThe response also depends on your tenant settings for Payment Pages 1.0 and Payment Pages 2.0. For example, if only the tenant setting for Payment Pages 2.0 is enabled, the response will only contain information for Payment Pages 2.0 forms even when this parameter is omitted.\n",
            "in": "query",
            "name": "versionNumber",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "hostedpages": [
                  {
                    "pageId": "8a85858f49a3f2230149abccaa2e004a",
                    "pageType": "ACH",
                    "pageVersion": 2
                  },
                  {
                    "pageId": "8a85858f49a3f2230149abcd99090057",
                    "pageType": "Bank Transfer",
                    "pageVersion": 2
                  },
                  {
                    "pageId": "8a85858f49a3f2230149a71083d40019",
                    "pageType": "Credit Card",
                    "pageVersion": 2
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetHostedPagesType"
            }
          }
        },
        "summary": "Return hosted pages",
        "tags": [
          "Hosted Pages"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/hostedpages\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/hostedpages');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/hostedpages\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/hostedpages\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/hostedpages\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/hostedpages\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/invoices/{invoiceId}/emails": {
      "post": {
        "description": "Sends a posted invoice to the specified email addresses manually.\n\n\n\n## Notes\n  - You must activate the **Manual Email For Invoice | Manual Email For Invoice** notification before emailing invoices. To include the invoice PDF in the email, select the **Include Invoice PDF** check box in the **Edit notification** dialog from the Zuora UI. See [Create and Edit Notifications](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/C_Create_Notifications#section_2) for more information.\n\n\n  - Zuora sends the email messages based on the email template you set. You can set the email template to use in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. By default, the **Invoice Posted Default Email Template** template is used. See [Create and Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information.\n\n\n  - The invoices are sent only to the work email addresses or personal email addresses of the Bill To contact if the following conditions are all met:\n\n    * The `useEmailTemplateSetting` field is set to `false`.\n    * The email addresses are not specified in the `emailAddresses` field.\n",
        "operationId": "POST_EmailInvoice",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostInvoiceEmailRequestType"
            }
          },
          {
            "description": "The ID of the invoice. For example, 2c92c8955bd63cc1015bd7c151af02ab.\n",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Email invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"emailAddresses\": \"test1@test.com,test2@test.com\", \n    \"includeAdditionalEmailAddresses\": false, \n    \"useEmailTemplateSetting\": false\n}' \"https://rest.zuora.com//v1/invoices/{invoiceId}/emails\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/invoices/{invoiceId}/emails');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"emailAddresses\": \"test1@test.com,test2@test.com\", \n    \"includeAdditionalEmailAddresses\": false, \n    \"useEmailTemplateSetting\": false\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/invoices/{invoiceId}/emails\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/invoices/{invoiceId}/emails\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/invoices/{invoiceId}/emails\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/invoices/{invoiceId}/emails\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"emailAddresses\\\": \\\"test1@test.com,test2@test.com\\\", \\n    \\\"includeAdditionalEmailAddresses\\\": false, \\n    \\\"useEmailTemplateSetting\\\": false\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/invoices/{invoiceId}/reverse": {
      "put": {
        "description": "Reverses posted invoices. \n\n\n**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Restrictions**\n\nYou are not allowed to reverse an invoice if one of the following restrictions is met:\n\n* Payments and credit memos are applied to the invoice.\n* The invoice is split.\n* The invoice is not in Posted status.\n* The total amount of the invoice is less than 0 (a negative invoice).\n* Using Tax Connector for Extension Platform to calculate taxes.\n\nSee [Reverse Posted Invoices](https://knowledgecenter.zuora.com/CB_Billing/IA_Invoices/Reverse_Posted_Invoices) for more information.\n",
        "operationId": "PUT_ReverseInvoice",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The ID of the invoice. For example, 2c92c8955bd63cc1015bd7c151af02ab.\n",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutReverseInvoiceType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "creditMemo": {
                  "id": "402890555a40ca7f015a5b099b0e307a"
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PutReverseInvoiceResponseType"
            }
          }
        },
        "summary": "Reverse invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"applyEffectiveDate\": \"2017-02-20\", \n    \"memoDate\": \"2017-02-20\"\n}' \"https://rest.zuora.com//v1/invoices/{invoiceId}/reverse\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/invoices/{invoiceId}/reverse');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"applyEffectiveDate\": \"2017-02-20\", \n    \"memoDate\": \"2017-02-20\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"applyEffectiveDate\\\": \\\"2017-02-20\\\", \\n    \\\"memoDate\\\": \\\"2017-02-20\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/invoices/{invoiceId}/reverse\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"applyEffectiveDate\\\": \\\"2017-02-20\\\", \\n    \\\"memoDate\\\": \\\"2017-02-20\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/invoices/{invoiceId}/reverse\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/invoices/{invoiceId}/reverse\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"applyEffectiveDate\\\": \\\"2017-02-20\\\", \\n    \\\"memoDate\\\": \\\"2017-02-20\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/invoices/{invoiceId}/reverse\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"applyEffectiveDate\\\": \\\"2017-02-20\\\", \\n    \\\"memoDate\\\": \\\"2017-02-20\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/invoices/{invoiceNumber}/amountBreakdownByOrder": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\n\nRetrieves a specified invoice that is broken down by orders. The invoice items might be broken down into a list of order rated items.\n",
        "operationId": "GET_BreakdownInvoiceByOrder",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Number of invoice to be broken down.",
            "in": "path",
            "name": "invoiceNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "breakdowns": [
                  {
                    "amount": 20,
                    "breakdownDetails": [
                      {
                        "amount": 20,
                        "orderNumber": "OR-00009",
                        "termNumber": 1
                      }
                    ],
                    "chargeNumber": "C-00000006",
                    "endDate": "2017-01-31",
                    "invoiceItemId": "8a8081085d834928015d9d2af19f1d59",
                    "startDate": "2017-01-01",
                    "subscriptionNumber": "A-S00000003"
                  },
                  {
                    "amount": 10,
                    "breakdownDetails": [
                      {
                        "amount": 10,
                        "orderNumber": "OR-00009",
                        "termNumber": 1
                      }
                    ],
                    "chargeNumber": "C-00000010",
                    "endDate": "2017-01-31",
                    "invoiceItemId": "8a8081085d834928015d9d2af1a01d5b",
                    "startDate": "2017-01-01",
                    "subscriptionNumber": "A-S00000005"
                  },
                  {
                    "amount": 20,
                    "breakdownDetails": [
                      {
                        "amount": 20,
                        "orderNumber": "OR-00009",
                        "termNumber": 1
                      }
                    ],
                    "chargeNumber": "C-00000009",
                    "endDate": "2017-01-31",
                    "invoiceItemId": "8a8081085d834928015d9d2af1a11d5e",
                    "startDate": "2017-01-01",
                    "subscriptionNumber": "A-S00000005"
                  },
                  {
                    "amount": 10,
                    "breakdownDetails": [
                      {
                        "amount": 10,
                        "orderNumber": "OR-00009",
                        "termNumber": 1
                      }
                    ],
                    "chargeNumber": "C-00000008",
                    "endDate": "2017-01-31",
                    "invoiceItemId": "8a8081085d834928015d9d2af1a21d60",
                    "startDate": "2017-01-01",
                    "subscriptionNumber": "A-S00000004"
                  },
                  {
                    "amount": 20,
                    "breakdownDetails": [
                      {
                        "amount": 20,
                        "orderNumber": "OR-00009",
                        "termNumber": 1
                      }
                    ],
                    "chargeNumber": "C-00000007",
                    "endDate": "2017-01-31",
                    "invoiceItemId": "8a8081085d834928015d9d2af1a21d61",
                    "startDate": "2017-01-01",
                    "subscriptionNumber": "A-S00000004"
                  },
                  {
                    "amount": 20,
                    "breakdownDetails": [
                      {
                        "amount": 20,
                        "orderNumber": "OR-00009",
                        "termNumber": 1
                      }
                    ],
                    "chargeNumber": "C-00000006",
                    "endDate": "2017-02-28",
                    "invoiceItemId": "8a8081085d834928015d9d2af19f1d5a",
                    "startDate": "2017-02-01",
                    "subscriptionNumber": "A-S00000003"
                  }
                ],
                "currency": "USD",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetInvoiceAmountBreakdownByOrderResponse"
            }
          }
        },
        "summary": "Get breakdown of invoice by order",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/invoices/{invoiceNumber}/amountBreakdownByOrder\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/invoices/{invoiceNumber}/amountBreakdownByOrder');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/invoices/{invoiceNumber}/amountBreakdownByOrder\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/invoices/{invoiceNumber}/amountBreakdownByOrder\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/invoices/{invoiceNumber}/amountBreakdownByOrder\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/invoices/{invoiceNumber}/amountBreakdownByOrder\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/journal-entries": {
      "post": {
        "description": "This REST API reference describes how to manually create a summary journal entry. Request and response field descriptions and sample code are provided.\n## Requirements\n1.The sum of debits must equal the sum of credits in the summary journal entry.\n\n2.The following applies only if you use foreign currency conversion:\n  * If you have configured Aggregate transactions with different currencies during a Journal Run to \"Yes\", the value of the **currency** field must be the same as your tenant's home currency. That is, you must create journal entries using your home currency.\n  * All journal entries in an accounting period must either all be aggregated or all be unaggregated. You cannot have a mix of aggregated and unaggregated journal entries in the same accounting period.\n",
        "operationId": "POST_SummaryJournalEntry",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTJournalEntryType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "journalEntryNumber": "JE-00000001",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTJournalEntryResponseType"
            }
          }
        },
        "summary": "Create summary journal entry",
        "tags": [
          "Summary Journal Entries"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"cf_pk1__c\": \"CreditCard\", \n    \"cf_pk2__c\": \"John Smith\", \n    \"cf_txt1__c\": \"1000001\", \n    \"cf_txt2__c\": \"2014-11-01\", \n    \"currency\": \"USD\", \n    \"journalEntryDate\": \"2014-09-09\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"accountingCodeType\": \"Deferred Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"Subscription Revenue\", \n            \"accountingCodeType\": \"Sales Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"my account\", \n    \"segments\": [\n        {\n            \"segmentName\": \"billToCountry\", \n            \"segmentValue\": \"United States\"\n        }, \n        {\n            \"segmentName\": \"billToState\", \n            \"segmentValue\": \"California\"\n        }\n    ], \n    \"transferredToAccounting\": \"No\"\n}' \"https://rest.zuora.com//v1/journal-entries\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-entries');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"cf_pk1__c\": \"CreditCard\", \n    \"cf_pk2__c\": \"John Smith\", \n    \"cf_txt1__c\": \"1000001\", \n    \"cf_txt2__c\": \"2014-11-01\", \n    \"currency\": \"USD\", \n    \"journalEntryDate\": \"2014-09-09\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"accountingCodeType\": \"Deferred Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"Subscription Revenue\", \n            \"accountingCodeType\": \"Sales Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"my account\", \n    \"segments\": [\n        {\n            \"segmentName\": \"billToCountry\", \n            \"segmentValue\": \"United States\"\n        }, \n        {\n            \"segmentName\": \"billToState\", \n            \"segmentValue\": \"California\"\n        }\n    ], \n    \"transferredToAccounting\": \"No\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountingPeriodName\\\": \\\"Nov-2014\\\", \\n    \\\"cf_pk1__c\\\": \\\"CreditCard\\\", \\n    \\\"cf_pk2__c\\\": \\\"John Smith\\\", \\n    \\\"cf_txt1__c\\\": \\\"1000001\\\", \\n    \\\"cf_txt2__c\\\": \\\"2014-11-01\\\", \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"journalEntryDate\\\": \\\"2014-09-09\\\", \\n    \\\"journalEntryItems\\\": [\\n        {\\n            \\\"accountingCodeName\\\": \\\"Accounts Receivable\\\", \\n            \\\"accountingCodeType\\\": \\\"Deferred Revenue\\\", \\n            \\\"amount\\\": \\\"400.9\\\", \\n            \\\"homeCurrencyAmount\\\": \\\"801.8\\\", \\n            \\\"type\\\": \\\"Credit\\\"\\n        }, \\n        {\\n            \\\"accountingCodeName\\\": \\\"Subscription Revenue\\\", \\n            \\\"accountingCodeType\\\": \\\"Sales Revenue\\\", \\n            \\\"amount\\\": \\\"400.9\\\", \\n            \\\"homeCurrencyAmount\\\": \\\"801.8\\\", \\n            \\\"type\\\": \\\"Debit\\\"\\n        }\\n    ], \\n    \\\"notes\\\": \\\"my account\\\", \\n    \\\"segments\\\": [\\n        {\\n            \\\"segmentName\\\": \\\"billToCountry\\\", \\n            \\\"segmentValue\\\": \\\"United States\\\"\\n        }, \\n        {\\n            \\\"segmentName\\\": \\\"billToState\\\", \\n            \\\"segmentValue\\\": \\\"California\\\"\\n        }\\n    ], \\n    \\\"transferredToAccounting\\\": \\\"No\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-entries\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountingPeriodName\\\": \\\"Nov-2014\\\", \\n    \\\"cf_pk1__c\\\": \\\"CreditCard\\\", \\n    \\\"cf_pk2__c\\\": \\\"John Smith\\\", \\n    \\\"cf_txt1__c\\\": \\\"1000001\\\", \\n    \\\"cf_txt2__c\\\": \\\"2014-11-01\\\", \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"journalEntryDate\\\": \\\"2014-09-09\\\", \\n    \\\"journalEntryItems\\\": [\\n        {\\n            \\\"accountingCodeName\\\": \\\"Accounts Receivable\\\", \\n            \\\"accountingCodeType\\\": \\\"Deferred Revenue\\\", \\n            \\\"amount\\\": \\\"400.9\\\", \\n            \\\"homeCurrencyAmount\\\": \\\"801.8\\\", \\n            \\\"type\\\": \\\"Credit\\\"\\n        }, \\n        {\\n            \\\"accountingCodeName\\\": \\\"Subscription Revenue\\\", \\n            \\\"accountingCodeType\\\": \\\"Sales Revenue\\\", \\n            \\\"amount\\\": \\\"400.9\\\", \\n            \\\"homeCurrencyAmount\\\": \\\"801.8\\\", \\n            \\\"type\\\": \\\"Debit\\\"\\n        }\\n    ], \\n    \\\"notes\\\": \\\"my account\\\", \\n    \\\"segments\\\": [\\n        {\\n            \\\"segmentName\\\": \\\"billToCountry\\\", \\n            \\\"segmentValue\\\": \\\"United States\\\"\\n        }, \\n        {\\n            \\\"segmentName\\\": \\\"billToState\\\", \\n            \\\"segmentValue\\\": \\\"California\\\"\\n        }\\n    ], \\n    \\\"transferredToAccounting\\\": \\\"No\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/journal-entries\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-entries\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountingPeriodName\\\": \\\"Nov-2014\\\", \\n    \\\"cf_pk1__c\\\": \\\"CreditCard\\\", \\n    \\\"cf_pk2__c\\\": \\\"John Smith\\\", \\n    \\\"cf_txt1__c\\\": \\\"1000001\\\", \\n    \\\"cf_txt2__c\\\": \\\"2014-11-01\\\", \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"journalEntryDate\\\": \\\"2014-09-09\\\", \\n    \\\"journalEntryItems\\\": [\\n        {\\n            \\\"accountingCodeName\\\": \\\"Accounts Receivable\\\", \\n            \\\"accountingCodeType\\\": \\\"Deferred Revenue\\\", \\n            \\\"amount\\\": \\\"400.9\\\", \\n            \\\"homeCurrencyAmount\\\": \\\"801.8\\\", \\n            \\\"type\\\": \\\"Credit\\\"\\n        }, \\n        {\\n            \\\"accountingCodeName\\\": \\\"Subscription Revenue\\\", \\n            \\\"accountingCodeType\\\": \\\"Sales Revenue\\\", \\n            \\\"amount\\\": \\\"400.9\\\", \\n            \\\"homeCurrencyAmount\\\": \\\"801.8\\\", \\n            \\\"type\\\": \\\"Debit\\\"\\n        }\\n    ], \\n    \\\"notes\\\": \\\"my account\\\", \\n    \\\"segments\\\": [\\n        {\\n            \\\"segmentName\\\": \\\"billToCountry\\\", \\n            \\\"segmentValue\\\": \\\"United States\\\"\\n        }, \\n        {\\n            \\\"segmentName\\\": \\\"billToState\\\", \\n            \\\"segmentValue\\\": \\\"California\\\"\\n        }\\n    ], \\n    \\\"transferredToAccounting\\\": \\\"No\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-entries\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountingPeriodName\\\": \\\"Nov-2014\\\", \\n    \\\"cf_pk1__c\\\": \\\"CreditCard\\\", \\n    \\\"cf_pk2__c\\\": \\\"John Smith\\\", \\n    \\\"cf_txt1__c\\\": \\\"1000001\\\", \\n    \\\"cf_txt2__c\\\": \\\"2014-11-01\\\", \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"journalEntryDate\\\": \\\"2014-09-09\\\", \\n    \\\"journalEntryItems\\\": [\\n        {\\n            \\\"accountingCodeName\\\": \\\"Accounts Receivable\\\", \\n            \\\"accountingCodeType\\\": \\\"Deferred Revenue\\\", \\n            \\\"amount\\\": \\\"400.9\\\", \\n            \\\"homeCurrencyAmount\\\": \\\"801.8\\\", \\n            \\\"type\\\": \\\"Credit\\\"\\n        }, \\n        {\\n            \\\"accountingCodeName\\\": \\\"Subscription Revenue\\\", \\n            \\\"accountingCodeType\\\": \\\"Sales Revenue\\\", \\n            \\\"amount\\\": \\\"400.9\\\", \\n            \\\"homeCurrencyAmount\\\": \\\"801.8\\\", \\n            \\\"type\\\": \\\"Debit\\\"\\n        }\\n    ], \\n    \\\"notes\\\": \\\"my account\\\", \\n    \\\"segments\\\": [\\n        {\\n            \\\"segmentName\\\": \\\"billToCountry\\\", \\n            \\\"segmentValue\\\": \\\"United States\\\"\\n        }, \\n        {\\n            \\\"segmentName\\\": \\\"billToState\\\", \\n            \\\"segmentValue\\\": \\\"California\\\"\\n        }\\n    ], \\n    \\\"transferredToAccounting\\\": \\\"No\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/journal-entries/journal-runs/{jr-number}": {
      "get": {
        "description": "\nThis REST API reference describes how to retrieve information about all summary journal entries in a journal run.\n",
        "operationId": "GET_AllSummaryJournalEntries",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_revenue"
          },
          {
            "description": "Journal run number.",
            "in": "path",
            "name": "jr-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "journalEntries": [
                  {
                    "accountingPeriodName": "Dec'16",
                    "aggregateCurrency": true,
                    "cf_txt1__c": "custom text",
                    "currency": "USD",
                    "homeCurrency": "USD",
                    "journalEntryDate": "2016-12-31",
                    "journalEntryItems": [
                      {
                        "accountingCodeName": "Accounts Receivable",
                        "accountingCodeType": "AccountsReceivable",
                        "amount": 100,
                        "glAccountName": "Accounts Receivable",
                        "glAccountNumber": "10-001-000-1234",
                        "homeCurrencyAmount": 100,
                        "type": "Debit"
                      },
                      {
                        "accountingCodeName": "Sales Revenue",
                        "accountingCodeType": "SalesRevenue",
                        "amount": 100,
                        "glAccountName": "Sales Revenue",
                        "glAccountNumber": "10-001-000-1000",
                        "homeCurrencyAmount": 100,
                        "type": "Credit"
                      }
                    ],
                    "notes": "note",
                    "number": "JE-00000006",
                    "segments": [
                      {
                        "segmentName": "Seg1",
                        "segmentValue": "seg value"
                      }
                    ],
                    "status": "Created",
                    "timePeriodEnd": "2016-12-31",
                    "timePeriodStart": "2016-12-01",
                    "transactionType": "Invoice Item",
                    "transferredToAccounting": "No"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETJournalEntriesInJournalRunType"
            }
          }
        },
        "summary": "Get all summary journal entries in a journal run",
        "tags": [
          "Summary Journal Entries"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/journal-entries/journal-runs/{jr-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-entries/journal-runs/{jr-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-entries/journal-runs/{jr-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/journal-entries/journal-runs/{jr-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-entries/journal-runs/{jr-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-entries/journal-runs/{jr-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/journal-entries/{je-number}": {
      "delete": {
        "description": "This reference describes how to delete a summary journal entry using the REST API.\n\nYou must have the \"Delete Cancelled Journal Entry\" user permission enabled to delete summary journal entries.\n\nA summary journal entry must be canceled before it can be deleted.\n",
        "operationId": "DELETE_SummaryJournalEntry",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Journal entry number in the format JE-00000001.",
            "in": "path",
            "name": "je-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete summary journal entry",
        "tags": [
          "Summary Journal Entries"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/journal-entries/{je-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-entries/{je-number}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-entries/{je-number}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/journal-entries/{je-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-entries/{je-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-entries/{je-number}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "This REST API reference describes how to get information about a summary journal entry by its journal entry number.\n",
        "operationId": "GET_SummaryJournalEntry",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "path",
            "name": "je-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountingPeriodName": "Jan'16",
                "aggregateCurrency": true,
                "currency": "USD",
                "homeCurrency": "USD",
                "journalEntryDate": "2016-01-31",
                "journalEntryItems": [
                  {
                    "accountingCodeName": "Deferred Revenue",
                    "accountingCodeType": "DeferredRevenue",
                    "amount": 424.08,
                    "homeCurrencyAmount": 424.08,
                    "type": "Debit"
                  },
                  {
                    "accountingCodeName": "Professional Services Revenue",
                    "accountingCodeType": "SalesRevenue",
                    "amount": 424.08,
                    "homeCurrencyAmount": 424.08,
                    "type": "Credit"
                  }
                ],
                "number": "JE-00000001",
                "segments": [
                  {
                    "segmentName": "Customer Code",
                    "segmentValue": "A00000001"
                  },
                  {
                    "segmentName": "Charge Type",
                    "segmentValue": "OneTime"
                  }
                ],
                "status": "Created",
                "success": true,
                "timePeriodEnd": "2016-01-31",
                "timePeriodStart": "2016-01-01",
                "transactionType": "Revenue Event Item"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETJournalEntryDetailType"
            }
          }
        },
        "summary": "Get summary journal entry",
        "tags": [
          "Summary Journal Entries"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/journal-entries/{je-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-entries/{je-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-entries/{je-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/journal-entries/{je-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-entries/{je-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-entries/{je-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/journal-entries/{je-number}/basic-information": {
      "put": {
        "description": "\nThis REST API reference describes how to update the basic information of a summary journal entry. Request and response field descriptions and sample code are provided.\n",
        "operationId": "PUT_BasicSummaryJournalEntry",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Journal entry number in the format JE-00000001.",
            "in": "path",
            "name": "je-number",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUT_BasicSummaryJournalEntryType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Update basic information of a summary journal entry",
        "tags": [
          "Summary Journal Entries"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cf_issueNumberc\": \"1000001\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"cf_phasesc\": \"Phase 1\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"\", \n            \"cf_phases__c\": \"Phase 1\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"Transfer to accounting system\", \n    \"transferredToAccounting\": \"Yes\"\n}' \"https://rest.zuora.com//v1/journal-entries/{je-number}/basic-information\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-entries/{je-number}/basic-information');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cf_issueNumberc\": \"1000001\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"cf_phasesc\": \"Phase 1\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"\", \n            \"cf_phases__c\": \"Phase 1\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"Transfer to accounting system\", \n    \"transferredToAccounting\": \"Yes\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"cf_issueNumberc\\\": \\\"1000001\\\", \\n    \\\"journalEntryItems\\\": [\\n        {\\n            \\\"accountingCodeName\\\": \\\"Accounts Receivable\\\", \\n            \\\"cf_phasesc\\\": \\\"Phase 1\\\", \\n            \\\"type\\\": \\\"Credit\\\"\\n        }, \\n        {\\n            \\\"accountingCodeName\\\": \\\"\\\", \\n            \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n            \\\"type\\\": \\\"Debit\\\"\\n        }\\n    ], \\n    \\\"notes\\\": \\\"Transfer to accounting system\\\", \\n    \\\"transferredToAccounting\\\": \\\"Yes\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-entries/{je-number}/basic-information\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"cf_issueNumberc\\\": \\\"1000001\\\", \\n    \\\"journalEntryItems\\\": [\\n        {\\n            \\\"accountingCodeName\\\": \\\"Accounts Receivable\\\", \\n            \\\"cf_phasesc\\\": \\\"Phase 1\\\", \\n            \\\"type\\\": \\\"Credit\\\"\\n        }, \\n        {\\n            \\\"accountingCodeName\\\": \\\"\\\", \\n            \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n            \\\"type\\\": \\\"Debit\\\"\\n        }\\n    ], \\n    \\\"notes\\\": \\\"Transfer to accounting system\\\", \\n    \\\"transferredToAccounting\\\": \\\"Yes\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/journal-entries/{je-number}/basic-information\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-entries/{je-number}/basic-information\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"cf_issueNumberc\\\": \\\"1000001\\\", \\n    \\\"journalEntryItems\\\": [\\n        {\\n            \\\"accountingCodeName\\\": \\\"Accounts Receivable\\\", \\n            \\\"cf_phasesc\\\": \\\"Phase 1\\\", \\n            \\\"type\\\": \\\"Credit\\\"\\n        }, \\n        {\\n            \\\"accountingCodeName\\\": \\\"\\\", \\n            \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n            \\\"type\\\": \\\"Debit\\\"\\n        }\\n    ], \\n    \\\"notes\\\": \\\"Transfer to accounting system\\\", \\n    \\\"transferredToAccounting\\\": \\\"Yes\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-entries/{je-number}/basic-information\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"cf_issueNumberc\\\": \\\"1000001\\\", \\n    \\\"journalEntryItems\\\": [\\n        {\\n            \\\"accountingCodeName\\\": \\\"Accounts Receivable\\\", \\n            \\\"cf_phasesc\\\": \\\"Phase 1\\\", \\n            \\\"type\\\": \\\"Credit\\\"\\n        }, \\n        {\\n            \\\"accountingCodeName\\\": \\\"\\\", \\n            \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n            \\\"type\\\": \\\"Debit\\\"\\n        }\\n    ], \\n    \\\"notes\\\": \\\"Transfer to accounting system\\\", \\n    \\\"transferredToAccounting\\\": \\\"Yes\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/journal-entries/{je-number}/cancel": {
      "put": {
        "description": "\nThis reference describes how to cancel a summary journal entry using the REST API.\n\nYou must have the \"Cancel Journal Entry\" user permission enabled to cancel summary journal entries.\n\nA summary journal entry cannot be canceled if its Transferred to Accounting status is \"Yes\" or \"Processing\".\n",
        "operationId": "PUT_SummaryJournalEntry",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Journal entry number in the format JE-00000001.",
            "in": "path",
            "name": "je-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Cancel summary journal entry",
        "tags": [
          "Summary Journal Entries"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/journal-entries/{je-number}/cancel\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-entries/{je-number}/cancel');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-entries/{je-number}/cancel\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/journal-entries/{je-number}/cancel\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-entries/{je-number}/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-entries/{je-number}/cancel\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/journal-runs": {
      "post": {
        "description": "This REST API reference describes how to create a journal run. Request and response field descriptions and sample code are provided.\n",
        "operationId": "POST_JournalRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTJournalRunType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "journalRunNumber": "JR-00000008",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTJournalRunResponseType"
            }
          }
        },
        "summary": "Create journal run",
        "tags": [
          "Journal Runs"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"journalEntryDate\": \"2014-11-04\", \n    \"transactionTypes\": [\n        {\n            \"type\": \"Invoice Item\"\n        }, \n        {\n            \"type\": \"Revenue Event Item\"\n        }\n    ]\n}' \"https://rest.zuora.com//v1/journal-runs\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-runs');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"journalEntryDate\": \"2014-11-04\", \n    \"transactionTypes\": [\n        {\n            \"type\": \"Invoice Item\"\n        }, \n        {\n            \"type\": \"Revenue Event Item\"\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountingPeriodName\\\": \\\"Nov-2014\\\", \\n    \\\"journalEntryDate\\\": \\\"2014-11-04\\\", \\n    \\\"transactionTypes\\\": [\\n        {\\n            \\\"type\\\": \\\"Invoice Item\\\"\\n        }, \\n        {\\n            \\\"type\\\": \\\"Revenue Event Item\\\"\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-runs\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountingPeriodName\\\": \\\"Nov-2014\\\", \\n    \\\"journalEntryDate\\\": \\\"2014-11-04\\\", \\n    \\\"transactionTypes\\\": [\\n        {\\n            \\\"type\\\": \\\"Invoice Item\\\"\\n        }, \\n        {\\n            \\\"type\\\": \\\"Revenue Event Item\\\"\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/journal-runs\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-runs\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountingPeriodName\\\": \\\"Nov-2014\\\", \\n    \\\"journalEntryDate\\\": \\\"2014-11-04\\\", \\n    \\\"transactionTypes\\\": [\\n        {\\n            \\\"type\\\": \\\"Invoice Item\\\"\\n        }, \\n        {\\n            \\\"type\\\": \\\"Revenue Event Item\\\"\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-runs\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountingPeriodName\\\": \\\"Nov-2014\\\", \\n    \\\"journalEntryDate\\\": \\\"2014-11-04\\\", \\n    \\\"transactionTypes\\\": [\\n        {\\n            \\\"type\\\": \\\"Invoice Item\\\"\\n        }, \\n        {\\n            \\\"type\\\": \\\"Revenue Event Item\\\"\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/journal-runs/{jr-number}": {
      "delete": {
        "description": "This reference describes how to delete a journal run using the REST API.\n                      \n You can only delete journal runs that have already been canceled.\n                      \n You must have the \"Delete Cancelled Journal Run\" Zuora Finance user permission enabled to delete journal runs.\n",
        "operationId": "DELETE_JournalRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Journal run number. Must be a valid journal run number in the format `JR-00000001`.\n",
            "in": "path",
            "name": "jr-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete journal run",
        "tags": [
          "Journal Runs"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/journal-runs/{jr-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-runs/{jr-number}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-runs/{jr-number}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/journal-runs/{jr-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-runs/{jr-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-runs/{jr-number}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "This REST API reference describes how to get information about a journal run. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_JournalRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Journal run number. Must be a valid journal run number in the format `JR-00000001`.\n",
            "in": "path",
            "name": "jr-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "executedOn": "2014-11-15 22:05:12",
                "journalEntryDate": "2016-02-02",
                "number": "JR-00000002",
                "segmentationRuleName": "s1",
                "status": "Completed",
                "success": true,
                "targetEndDate": "2016-03-31",
                "targetStartDate": "2016-03-01",
                "totalJournalEntryCount": 2,
                "transactionTypes": [
                  {
                    "type": "Invoice Item"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/GETJournalRunType"
            }
          }
        },
        "summary": "Get journal run",
        "tags": [
          "Journal Runs"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/journal-runs/{jr-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-runs/{jr-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-runs/{jr-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/journal-runs/{jr-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-runs/{jr-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-runs/{jr-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/journal-runs/{jr-number}/cancel": {
      "put": {
        "description": "This reference describes how to cancel a journal run using the REST API.\n          \nThe summary journal entries in the journal run are canceled asynchronously. See the \"Example\" section below for details.\n          \nYou must have the \"Cancel Journal Run\" Zuora Finance user permission enabled to cancel journal runs.\n\n## Notes\nWhen you cancel a journal run, the summary journal entries associated with that journal run are canceled asynchronously. A response of `{ \"success\": true }` means only that the specified journal run has a status of \"Pending\", \"Error\", or \"Completed\" and therefore can be canceled, but does not mean that the whole journal run was successfully canceled.\n\nFor example, let's say you want to cancel journal run JR-00000075. The journal run status is \"Completed\" and it contains ten journal entries. One of the journal entries has its Transferred to Accounting status set to \"Yes\", meaning that the entry cannot be canceled. The workflow might go as follows:\n1. You make an API call to cancel the journal run.\n2. The journal run status is \"Completed\", so you receive a response of `{ \"success\": true }`.\n3. Zuora begins asynchronously canceling journal entries associated with the journal run. The journal entry whose Transferred to Accounting status is \"Yes\" fails to be canceled. The cancelation process continues, and the other journal entries are successfully canceled.\n4. The journal run status remains as \"Completed\". The status does not change to \"Canceled\" because the journal run still contains a journey entry that is not canceled.\n",
        "operationId": "PUT_JournalRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Journal run number. Must be a valid journal run number in the format JR-00000001. \nYou can only cancel a journal run whose status is \"Pending\", \"Error\", or \"Completed\".\n",
            "in": "path",
            "name": "jr-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Cancel journal run",
        "tags": [
          "Journal Runs"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/journal-runs/{jr-number}/cancel\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/journal-runs/{jr-number}/cancel');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/journal-runs/{jr-number}/cancel\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/journal-runs/{jr-number}/cancel\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/journal-runs/{jr-number}/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/journal-runs/{jr-number}/cancel\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/notification-history/callout": {
      "get": {
        "description": "This REST API reference describes how to get a notification history for callouts.\n",
        "operationId": "GET_CalloutHistory",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The final date and time of records to be returned. Defaults to now. Use format yyyy-MM-ddTHH:mm:ss.",
            "format": "date-time",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "The initial date and time of records to be returned. Defaults to (end time - 1 day). Use format yyyy-MM-ddTHH:mm:ss.",
            "format": "date-time",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "The ID of an object that triggered a callout notification.",
            "in": "query",
            "name": "objectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "If `true`, only return failed records. If `false`, return all records in the given date range. The default value is `true`.",
            "in": "query",
            "name": "failedOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Category of records to be returned by event category.",
            "in": "query",
            "name": "eventCategory",
            "required": false,
            "type": "string"
          },
          {
            "description": "",
            "in": "query",
            "name": "includeResponseContent",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "calloutHistories": [
                  {
                    "attemptedNum": 3,
                    "createTime": "2015-01-13T03:33:51",
                    "eventCategory": 1210,
                    "eventContext": {
                      "<Account.Currency>": "USD",
                      "<Account.CurrencySymbol>": "$",
                      "<Account.ID>": "402881e54ade80c8014ade884c48000b",
                      "<Account.Name>": "test",
                      "<Account.Number>": "A00000001",
                      "<BillToContact.FirstName>": "Mary",
                      "<BillToContact.ID>": "402881e54ade80c8014ade884c51000c",
                      "<BillToContact.LastName>": "Smith",
                      "<BillToContact.WorkEmail>": "test@test.test",
                      "<BillingAccount.ID>": "402881e54ade80c8014ade884c48000b",
                      "<Contact.ID>": "402881e54ade80c8014ade884c51000c",
                      "<Event.Category>": "SubscriptionCreated",
                      "<Event.ID>": "402892fa47866fe701478674a4ff0093",
                      "<Event.Timestamp>": "2015-01-13T22:31:43.248+0800",
                      "<Notification>": {
                        "EmailTemplate": "New Subscription Created Default Email Template",
                        "Event": "New Subscription Created",
                        "Profile": "Default Profile",
                        "calloutAction": true,
                        "emailAction": true,
                        "id": "402892fa47866fe701478674a5c100eb",
                        "updatedBy": "402892fa47866fe7014786749d9b0002",
                        "updatedOn": "01/12/2015 03:23:08"
                      },
                      "<Object.ID>": "402881e54ae37f31014ae3b514e100fd",
                      "<Subscription.AutoRenew>": "No",
                      "<Subscription.CMRR>": "$250.00",
                      "<Subscription.ContractEffective>": "01/01/2016",
                      "<Subscription.CreateDate>": "01/13/2015",
                      "<Subscription.CreatedBy>": "da@da.com",
                      "<Subscription.CustomerAcceptance>": "01/01/2016",
                      "<Subscription.ID>": "402881e54ae37f31014ae3b514e100fd",
                      "<Subscription.InitialTerm>": "50",
                      "<Subscription.RenewalTerm>": "0",
                      "<Subscription.ServiceActivation>": "01/01/2016",
                      "<Subscription.SubscriptionDetailTable>": {
                        "Charge Name": "recurringcharge",
                        "Charge Type": "Recurring",
                        "Effective Start Date": "01 / 01 / 2016",
                        "QTY": 5,
                        "Total": 250,
                        "Unit Price": 50
                      },
                      "<Subscription.SubscriptionName>": "A-S00000003",
                      "<Subscription.TCV>": "$12,500.00",
                      "<Subscription.TermEndDate>": "03/01/2020",
                      "<Subscription.TermSetting>": "termed",
                      "<Subscription.TermStartDate>": "01/01/2016"
                    },
                    "notification": "New Subscription Created",
                    "requestMethod": "POST",
                    "requestUrl": "https://www.google.com",
                    "responseCode": 405
                  }
                ],
                "nextPage": "https://localhost:8080/apps/v1/notification-history/callout?page=2&pageSize=1&startTime=2015-01-12T00:00:00&endTime=2015-01-15T00:00:00&failedOnly=false&eventCategory=1000",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETCalloutHistoryVOsType"
            }
          }
        },
        "summary": "Get callout notification histories",
        "tags": [
          "Notification History"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/notification-history/callout\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/notification-history/callout');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/notification-history/callout\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/notification-history/callout\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/notification-history/callout\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/notification-history/callout\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/notification-history/email": {
      "get": {
        "description": "This REST API reference describes how to get a notification history for notification emails.\n\n\n## Notes\nRequest parameters and their values may be appended with a \"?\" following the HTTPS GET request.  Additional request parameter are separated by \"&\". \n\nFor example:\n\n`GET https://rest.zuora.com/v1/notification-history/email?startTime=2015-01-12T00:00:00&endTime=2015-01-15T00:00:00&failedOnly=false&eventCategory=1000&pageSize=1`\n",
        "operationId": "GET_EmailHistory",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The end date and time of records to be returned. Defaults to now. Use format yyyy-MM-ddTHH:mm:ss. The maximum date range (endTime - startTime) is three days.",
            "format": "date-time",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "The initial date and time of records to be returned. Defaults to (end time - 1 day). Use format yyyy-MM-ddTHH:mm:ss. The maximum date range (endTime - startTime) is three days.",
            "format": "date-time",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "The Id of an object that triggered an email notification.",
            "in": "query",
            "name": "objectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "If `true`, only returns failed records. When `false`, returns all records in the given date range. Defaults to `true` when not specified.",
            "in": "query",
            "name": "failedOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Category of records to be returned by event category.",
            "in": "query",
            "name": "eventCategory",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "emailHistories": [
                  {
                    "bcc": "ceo@company.test,cto@company.test",
                    "cc": "bob@company.test,chris@company.test",
                    "eventCategory": 1210,
                    "fromEmail": "no-reply@sender.test",
                    "notification": "New Subscription Created",
                    "replyTo": "support@sender.test",
                    "result": "OK",
                    "sendTime": "2015-01-13T03:31:43",
                    "subject": "New subscription A-S00000003 was created and activated",
                    "toEmail": "mary.smith@company.test"
                  }
                ],
                "nextPage": "https://localhost:8080/apps/v1/notification-history/email?page=2&pageSize=1&startTime=2015-01-12T00:00:00&endTime=2015-01-15T00:00:00&failedOnly=false&eventCategory=1000",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETEmailHistoryVOsType"
            }
          }
        },
        "summary": "Get email notification histories",
        "tags": [
          "Notification History"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/notification-history/email\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/notification-history/email');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/notification-history/email\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/notification-history/email\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/notification-history/email\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/notification-history/email\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/account": {
      "post": {
        "description": "",
        "operationId": "Object_POSTAccount",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e0321fdf4fab",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create Account",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": false, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"Status\": \"Draft\"\n}' \"https://rest.zuora.com//v1/object/account\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/account');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": false, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"Status\": \"Draft\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n    \\\"AutoPay\\\": false, \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": 1, \\n    \\\"CrmId\\\": \\\"crmid\\\", \\n    \\\"Currency\\\": \\\"USD\\\", \\n    \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n    \\\"Name\\\": \\\"AC_1476935163869\\\", \\n    \\\"Notes\\\": \\\"this is notes\\\", \\n    \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"Status\\\": \\\"Draft\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/account\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n    \\\"AutoPay\\\": false, \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": 1, \\n    \\\"CrmId\\\": \\\"crmid\\\", \\n    \\\"Currency\\\": \\\"USD\\\", \\n    \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n    \\\"Name\\\": \\\"AC_1476935163869\\\", \\n    \\\"Notes\\\": \\\"this is notes\\\", \\n    \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"Status\\\": \\\"Draft\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/account\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/account\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n    \\\"AutoPay\\\": false, \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": 1, \\n    \\\"CrmId\\\": \\\"crmid\\\", \\n    \\\"Currency\\\": \\\"USD\\\", \\n    \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n    \\\"Name\\\": \\\"AC_1476935163869\\\", \\n    \\\"Notes\\\": \\\"this is notes\\\", \\n    \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"Status\\\": \\\"Draft\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/account\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n    \\\"AutoPay\\\": false, \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": 1, \\n    \\\"CrmId\\\": \\\"crmid\\\", \\n    \\\"Currency\\\": \\\"USD\\\", \\n    \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n    \\\"Name\\\": \\\"AC_1476935163869\\\", \\n    \\\"Notes\\\": \\\"this is notes\\\", \\n    \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"Status\\\": \\\"Draft\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/account/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEAccount",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e031b1ea4a98",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete Account",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/account/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/account/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/account/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/account/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/account/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/account/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETAccount",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountNumber": "AN_1476935136687",
                "AllowInvoiceEdit": false,
                "AutoPay": true,
                "Balance": 0,
                "Batch": "Batch1",
                "BcdSettingOption": "ManualSet",
                "BillCycleDay": 1,
                "BillToId": "2c93808457d787030157e031b6444a9e",
                "CreatedById": "2c93808457d787030157e0319d644922",
                "CreatedDate": "2016-10-20T05:45:36.000+02:00",
                "CreditBalance": 0,
                "CrmId": "crmid",
                "Currency": "USD",
                "DefaultPaymentMethodId": "2c93808457d787030157e031b6d24a9f",
                "Id": "2c93808457d787030157e031b5b74a9d",
                "InvoiceDeliveryPrefsEmail": false,
                "InvoiceDeliveryPrefsPrint": false,
                "InvoiceTemplateId": "2c93808457d787030157e031a33c4a94",
                "Name": "AC_1476935136687",
                "Notes": "this is notes",
                "PaymentTerm": "Due Upon Receipt",
                "SoldToId": "2c93808457d787030157e031b6444a9e",
                "Status": "Draft",
                "TotalInvoiceBalance": 0,
                "UpdatedById": "2c93808457d787030157e0319d644922",
                "UpdatedDate": "2016-10-20T05:45:37.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetAccount"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Account",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/account/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/account/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/account/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/account/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/account/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/account/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTAccount",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e0321fdf4fab",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update Account",
        "tags": [
          "Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": true, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"BillToId\": \"2c93808457d787030157e03220684fac\", \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n    \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n    \"Status\": \"Active\"\n}' \"https://rest.zuora.com//v1/object/account/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/account/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": true, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"BillToId\": \"2c93808457d787030157e03220684fac\", \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n    \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n    \"Status\": \"Active\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n    \\\"AutoPay\\\": true, \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": 1, \\n    \\\"BillToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n    \\\"CrmId\\\": \\\"crmid\\\", \\n    \\\"Currency\\\": \\\"USD\\\", \\n    \\\"DefaultPaymentMethodId\\\": \\\"2c93808457d787030157e03220ec4fad\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n    \\\"Name\\\": \\\"AC_1476935163869\\\", \\n    \\\"Notes\\\": \\\"this is notes\\\", \\n    \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"SoldToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n    \\\"Status\\\": \\\"Active\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/account/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n    \\\"AutoPay\\\": true, \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": 1, \\n    \\\"BillToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n    \\\"CrmId\\\": \\\"crmid\\\", \\n    \\\"Currency\\\": \\\"USD\\\", \\n    \\\"DefaultPaymentMethodId\\\": \\\"2c93808457d787030157e03220ec4fad\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n    \\\"Name\\\": \\\"AC_1476935163869\\\", \\n    \\\"Notes\\\": \\\"this is notes\\\", \\n    \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"SoldToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n    \\\"Status\\\": \\\"Active\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/account/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/account/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n    \\\"AutoPay\\\": true, \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": 1, \\n    \\\"BillToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n    \\\"CrmId\\\": \\\"crmid\\\", \\n    \\\"Currency\\\": \\\"USD\\\", \\n    \\\"DefaultPaymentMethodId\\\": \\\"2c93808457d787030157e03220ec4fad\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n    \\\"Name\\\": \\\"AC_1476935163869\\\", \\n    \\\"Notes\\\": \\\"this is notes\\\", \\n    \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"SoldToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n    \\\"Status\\\": \\\"Active\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/account/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountNumber\\\": \\\"AN_1476935163869\\\", \\n    \\\"AutoPay\\\": true, \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": 1, \\n    \\\"BillToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n    \\\"CrmId\\\": \\\"crmid\\\", \\n    \\\"Currency\\\": \\\"USD\\\", \\n    \\\"DefaultPaymentMethodId\\\": \\\"2c93808457d787030157e03220ec4fad\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"InvoiceTemplateId\\\": \\\"2c93808457d787030157e03208864f97\\\", \\n    \\\"Name\\\": \\\"AC_1476935163869\\\", \\n    \\\"Notes\\\": \\\"this is notes\\\", \\n    \\\"PaymentTerm\\\": \\\"Due Upon Receipt\\\", \\n    \\\"SoldToId\\\": \\\"2c93808457d787030157e03220684fac\\\", \\n    \\\"Status\\\": \\\"Active\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/amendment": {
      "post": {
        "description": "This operation has some limitations. Zuora recommends that you use [Update subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription) to amend subscriptions. If you need to create an Amendment object, Zuora recommends that you use [Amend](https://www.zuora.com/developer/api-reference/#operation/Action_POSTamend) instead of CRUD: Create Amendment.\n",
        "operationId": "Object_POSTAmendment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateAmendment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02ec4b42599",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create amendment",
        "tags": [
          "Amendments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"ContractEffectiveDate\": \"2016-10-20\", \n    \"CustomerAcceptanceDate\": \"2016-10-20\", \n    \"Description\": \"AMpqvyqhhzpg\", \n    \"EffectiveDate\": \"2016-10-20\", \n    \"Name\": \"AMpqvyqhhzpg\", \n    \"RatePlanData\": {\n        \"RatePlan\": {\n            \"ProductRatePlanId\": \"2c93808457d787030157e02ec2202584\"\n        }, \n        \"RatePlanChargeData\": [\n            {\n                \"RatePlanCharge\": {\n                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02ec34d2587\"\n                }\n            }\n        ]\n    }, \n    \"ServiceActivationDate\": \"2016-10-20\", \n    \"SubscriptionId\": \"2c93808457d787030157e02ec3f9258e\", \n    \"Type\": \"NewProduct\"\n}' \"https://rest.zuora.com//v1/object/amendment\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/amendment');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"ContractEffectiveDate\": \"2016-10-20\", \n    \"CustomerAcceptanceDate\": \"2016-10-20\", \n    \"Description\": \"AMpqvyqhhzpg\", \n    \"EffectiveDate\": \"2016-10-20\", \n    \"Name\": \"AMpqvyqhhzpg\", \n    \"RatePlanData\": {\n        \"RatePlan\": {\n            \"ProductRatePlanId\": \"2c93808457d787030157e02ec2202584\"\n        }, \n        \"RatePlanChargeData\": [\n            {\n                \"RatePlanCharge\": {\n                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02ec34d2587\"\n                }\n            }\n        ]\n    }, \n    \"ServiceActivationDate\": \"2016-10-20\", \n    \"SubscriptionId\": \"2c93808457d787030157e02ec3f9258e\", \n    \"Type\": \"NewProduct\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"CustomerAcceptanceDate\\\": \\\"2016-10-20\\\", \\n    \\\"Description\\\": \\\"AMpqvyqhhzpg\\\", \\n    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"Name\\\": \\\"AMpqvyqhhzpg\\\", \\n    \\\"RatePlanData\\\": {\\n        \\\"RatePlan\\\": {\\n            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e02ec2202584\\\"\\n        }, \\n        \\\"RatePlanChargeData\\\": [\\n            {\\n                \\\"RatePlanCharge\\\": {\\n                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e02ec34d2587\\\"\\n                }\\n            }\\n        ]\\n    }, \\n    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02ec3f9258e\\\", \\n    \\\"Type\\\": \\\"NewProduct\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/amendment\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"CustomerAcceptanceDate\\\": \\\"2016-10-20\\\", \\n    \\\"Description\\\": \\\"AMpqvyqhhzpg\\\", \\n    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"Name\\\": \\\"AMpqvyqhhzpg\\\", \\n    \\\"RatePlanData\\\": {\\n        \\\"RatePlan\\\": {\\n            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e02ec2202584\\\"\\n        }, \\n        \\\"RatePlanChargeData\\\": [\\n            {\\n                \\\"RatePlanCharge\\\": {\\n                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e02ec34d2587\\\"\\n                }\\n            }\\n        ]\\n    }, \\n    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02ec3f9258e\\\", \\n    \\\"Type\\\": \\\"NewProduct\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/amendment\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/amendment\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"CustomerAcceptanceDate\\\": \\\"2016-10-20\\\", \\n    \\\"Description\\\": \\\"AMpqvyqhhzpg\\\", \\n    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"Name\\\": \\\"AMpqvyqhhzpg\\\", \\n    \\\"RatePlanData\\\": {\\n        \\\"RatePlan\\\": {\\n            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e02ec2202584\\\"\\n        }, \\n        \\\"RatePlanChargeData\\\": [\\n            {\\n                \\\"RatePlanCharge\\\": {\\n                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e02ec34d2587\\\"\\n                }\\n            }\\n        ]\\n    }, \\n    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02ec3f9258e\\\", \\n    \\\"Type\\\": \\\"NewProduct\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/amendment\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"ContractEffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"CustomerAcceptanceDate\\\": \\\"2016-10-20\\\", \\n    \\\"Description\\\": \\\"AMpqvyqhhzpg\\\", \\n    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"Name\\\": \\\"AMpqvyqhhzpg\\\", \\n    \\\"RatePlanData\\\": {\\n        \\\"RatePlan\\\": {\\n            \\\"ProductRatePlanId\\\": \\\"2c93808457d787030157e02ec2202584\\\"\\n        }, \\n        \\\"RatePlanChargeData\\\": [\\n            {\\n                \\\"RatePlanCharge\\\": {\\n                    \\\"ProductRatePlanChargeId\\\": \\\"2c93808457d787030157e02ec34d2587\\\"\\n                }\\n            }\\n        ]\\n    }, \\n    \\\"ServiceActivationDate\\\": \\\"2016-10-20\\\", \\n    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02ec3f9258e\\\", \\n    \\\"Type\\\": \\\"NewProduct\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/amendment/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEAmendment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02e3a541ef4",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete amendment",
        "tags": [
          "Amendments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/amendment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/amendment/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/amendment/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/amendment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/amendment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/amendment/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETAmendment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Code": "A-AM00000004",
                "ContractEffectiveDate": "2016-10-20",
                "CreatedById": "2c93808457d787030157e02e0bcf1d0c",
                "CreatedDate": "2016-10-20T05:41:50.000+02:00",
                "CurrentTermPeriodType": "Month",
                "CustomerAcceptanceDate": "2016-10-20",
                "Description": "AMtssl1bnuq1",
                "EffectiveDate": "2016-10-20",
                "Id": "2c93808457d787030157e02e430c1f15",
                "Name": "AMtssl1bnuq1_new",
                "RenewalSetting": "RENEW_WITH_SPECIFIC_TERM",
                "RenewalTermPeriodType": "Month",
                "ServiceActivationDate": "2016-10-20",
                "Status": "Draft",
                "SubscriptionId": "2c93808457d787030157e02e3ef61f02",
                "Type": "NewProduct",
                "UpdatedById": "2c93808457d787030157e02e0bcf1d0c",
                "UpdatedDate": "2016-10-20T05:41:50.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetAmendment"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Get amendment",
        "tags": [
          "Amendments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/amendment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/amendment/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/amendment/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/amendment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/amendment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/amendment/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTAmendment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyAmendment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02e430c1f15",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update amendment",
        "tags": [
          "Amendments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\": \"2c93808457d787030157e02e430c1f15\", \n    \"Name\": \"AMtssl1bnuq1_new\"\n}' \"https://rest.zuora.com//v1/object/amendment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/amendment/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\": \"2c93808457d787030157e02e430c1f15\", \n    \"Name\": \"AMtssl1bnuq1_new\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02e430c1f15\\\", \\n    \\\"Name\\\": \\\"AMtssl1bnuq1_new\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/amendment/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02e430c1f15\\\", \\n    \\\"Name\\\": \\\"AMtssl1bnuq1_new\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/amendment/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/amendment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02e430c1f15\\\", \\n    \\\"Name\\\": \\\"AMtssl1bnuq1_new\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/amendment/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02e430c1f15\\\", \\n    \\\"Name\\\": \\\"AMtssl1bnuq1_new\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/bill-run": {
      "post": {
        "description": "**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com). \n\n\nCreates an ad hoc bill run or a single account or multiple customer accounts.\n\nWhen creating a single account ad hoc bill run, your request must include `AccountId` and must not include `Batch` or `BillCycleDay`. \n",
        "operationId": "Object_POSTBillRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateBillRun"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c92c0f959d961e1015a0872b69a7347",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create Bill Run",
        "tags": [
          "Bill Run"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AutoEmail\": \"false\", \n    \"AutoPost\": \"false\", \n    \"AutoRenewal\": \"false\", \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": \"2\", \n    \"ChargeTypeToExclued\": \"OneTime, Usage\", \n    \"InvoiceDate\": \"2017-02-04\", \n    \"NoEmailForZeroAmountInvoice\": \"false\", \n    \"TargetDate\": \"2017-02-04\"\n}' \"https://rest.zuora.com//v1/object/bill-run\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/bill-run');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AutoEmail\": \"false\", \n    \"AutoPost\": \"false\", \n    \"AutoRenewal\": \"false\", \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": \"2\", \n    \"ChargeTypeToExclued\": \"OneTime, Usage\", \n    \"InvoiceDate\": \"2017-02-04\", \n    \"NoEmailForZeroAmountInvoice\": \"false\", \n    \"TargetDate\": \"2017-02-04\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AutoEmail\\\": \\\"false\\\", \\n    \\\"AutoPost\\\": \\\"false\\\", \\n    \\\"AutoRenewal\\\": \\\"false\\\", \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": \\\"2\\\", \\n    \\\"ChargeTypeToExclued\\\": \\\"OneTime, Usage\\\", \\n    \\\"InvoiceDate\\\": \\\"2017-02-04\\\", \\n    \\\"NoEmailForZeroAmountInvoice\\\": \\\"false\\\", \\n    \\\"TargetDate\\\": \\\"2017-02-04\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/bill-run\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AutoEmail\\\": \\\"false\\\", \\n    \\\"AutoPost\\\": \\\"false\\\", \\n    \\\"AutoRenewal\\\": \\\"false\\\", \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": \\\"2\\\", \\n    \\\"ChargeTypeToExclued\\\": \\\"OneTime, Usage\\\", \\n    \\\"InvoiceDate\\\": \\\"2017-02-04\\\", \\n    \\\"NoEmailForZeroAmountInvoice\\\": \\\"false\\\", \\n    \\\"TargetDate\\\": \\\"2017-02-04\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/bill-run\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/bill-run\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AutoEmail\\\": \\\"false\\\", \\n    \\\"AutoPost\\\": \\\"false\\\", \\n    \\\"AutoRenewal\\\": \\\"false\\\", \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": \\\"2\\\", \\n    \\\"ChargeTypeToExclued\\\": \\\"OneTime, Usage\\\", \\n    \\\"InvoiceDate\\\": \\\"2017-02-04\\\", \\n    \\\"NoEmailForZeroAmountInvoice\\\": \\\"false\\\", \\n    \\\"TargetDate\\\": \\\"2017-02-04\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/bill-run\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AutoEmail\\\": \\\"false\\\", \\n    \\\"AutoPost\\\": \\\"false\\\", \\n    \\\"AutoRenewal\\\": \\\"false\\\", \\n    \\\"Batch\\\": \\\"Batch1\\\", \\n    \\\"BillCycleDay\\\": \\\"2\\\", \\n    \\\"ChargeTypeToExclued\\\": \\\"OneTime, Usage\\\", \\n    \\\"InvoiceDate\\\": \\\"2017-02-04\\\", \\n    \\\"NoEmailForZeroAmountInvoice\\\": \\\"false\\\", \\n    \\\"TargetDate\\\": \\\"2017-02-04\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/bill-run/{id}": {
      "delete": {
        "description": "**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com). \n\n\nWhen deleting a bill run, the logic is the same as when using the UI to delete a bill run. The only required parameter is `BillRunId`. The Status for the bill run must be `Canceled` in order to delete a bill run.\n",
        "operationId": "Object_DELETEBillRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c92c0f959d961e1015a0872b69a7347",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete Bill Run",
        "tags": [
          "Bill Run"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/bill-run/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/bill-run/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/bill-run/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/bill-run/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/bill-run/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/bill-run/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com). \n\n\nBusiness operations depending on the completion of the bill run will not be available while the bill run query returns `PostInProgress`. Upon completion of the bill run, a query will return `Posted`.\n",
        "operationId": "Object_GETBillRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AutoEmail": false,
                "AutoPost": false,
                "AutoRenewal": false,
                "Batch": "Batch1",
                "BillCycleDay": "AllBillCycleDays",
                "BillRunNumber": "BR-00002572",
                "CreatedById": "2c92c0f956bc8fcb0156f8eee04b4d54",
                "CreatedDate": "2017-01-31T19:00:01.000-08:00",
                "ExecutedDate": "2017-02-01T19:00:00.000-08:00",
                "Id": "2c92c09459d949220159f79d592f7e1a",
                "InvoiceDate": "2017-02-01",
                "InvoicesEmailed": false,
                "NoEmailForZeroAmountInvoice": false,
                "NumberOfAccounts": 1,
                "NumberOfInvoices": 1,
                "Status": "Completed",
                "TargetDate": "2017-02-20",
                "UpdatedById": "2c92c0f956bc8fcb0156f8eee04b4d54",
                "UpdatedDate": "2017-02-01T19:00:00.000-08:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetBillRun"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Bill Run",
        "tags": [
          "Bill Run"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/bill-run/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/bill-run/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/bill-run/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/bill-run/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/bill-run/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/bill-run/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com). \n\n\n## Post a Bill Run\n\nPosting a bill run is an asynchronous operation. To post a bill run, the current bill run must have a status of `Completed`.\n\nWhen a bill run is posted, its status is changed to `PostInProgress`. Once all invoices for this bill run are posted then its status is changed to `Posted`.   \n\nWhen you post a bill run and query the status of a bill run, you will get one of the following results `PostInProgress`, `Completed`, or `Posted`. If all invoices in the bill run are posted, then the status of the bill run is `Posted`. If one or more invoices fail to post, the status will change back to `Completed` and you will need to post the bill run again.\n\n## Cancel a Bill Run\n\nCanceling a bill run is an asynchronous operation. When canceling a bill run, the logic is the same as when using the UI to cancel a bill run. You need to provide the `BillRunId`, and set the Status to `Canceled`. \n\nWhen canceling a bill run, consider the following:\n\n* Canceling a bill run with a `Completed` status.\n  * Only the current bill run will be canceled.\n* Canceling a bill run with a `Pending` status.\n  * When canceling an Ad-hoc bill run, only the current bill run will be canceled.\n  * When canceling a scheduled bill, all scheduled bill runs will be canceled.\n\nThe Cancel operation may not be successful. Its success depends on its current business validation. Only a bill run that has no posted invoices can be canceled. If any posted invoices belong to the bill run then an invalid value exception will be thrown with the message, \"The Bill Run cannot be Cancelled, There are Posted invoices.\"\n",
        "operationId": "Object_PUTBillRun",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyBillRun"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c92c0f959d961e1015a0872b69a7347",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Post or Cancel Bill Run",
        "tags": [
          "Bill Run"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Status\": \"Posted\"\n}' \"https://rest.zuora.com//v1/object/bill-run/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/bill-run/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Status\": \"Posted\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Status\\\": \\\"Posted\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/bill-run/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Status\\\": \\\"Posted\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/bill-run/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/bill-run/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Status\\\": \\\"Posted\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/bill-run/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Status\\\": \\\"Posted\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/communication-profile/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETCommunicationProfile",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyGetCommunicationProfile"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve CommunicationProfile",
        "tags": [
          "Communication Profiles"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/communication-profile/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/communication-profile/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/communication-profile/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/communication-profile/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/communication-profile/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/communication-profile/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/contact": {
      "post": {
        "description": "",
        "operationId": "Object_POSTContact",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateContact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e03220684fac",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create Contact",
        "tags": [
          "Contacts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"Address1\": \"312 2nd Ave W\", \n    \"City\": \"Seattle\", \n    \"Country\": \"United States\", \n    \"Description\": \"desc\", \n    \"Fax\": \"123456\", \n    \"FirstName\": \"FN1476935164020\", \n    \"HomePhone\": \"86123456789\", \n    \"LastName\": \"LN1476935164020\", \n    \"MobilePhone\": \"8613312345678\", \n    \"NickName\": \"this is nick name\", \n    \"OtherPhone\": \"11111111111111111\", \n    \"OtherPhoneType\": \"Work\", \n    \"PersonalEmail\": \"person@test.com\", \n    \"PostalCode\": \"98119\", \n    \"State\": \"Washington\", \n    \"TaxRegion\": \"CA\", \n    \"WorkEmail\": \"work@test.com\"\n}' \"https://rest.zuora.com//v1/object/contact\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/contact');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"Address1\": \"312 2nd Ave W\", \n    \"City\": \"Seattle\", \n    \"Country\": \"United States\", \n    \"Description\": \"desc\", \n    \"Fax\": \"123456\", \n    \"FirstName\": \"FN1476935164020\", \n    \"HomePhone\": \"86123456789\", \n    \"LastName\": \"LN1476935164020\", \n    \"MobilePhone\": \"8613312345678\", \n    \"NickName\": \"this is nick name\", \n    \"OtherPhone\": \"11111111111111111\", \n    \"OtherPhoneType\": \"Work\", \n    \"PersonalEmail\": \"person@test.com\", \n    \"PostalCode\": \"98119\", \n    \"State\": \"Washington\", \n    \"TaxRegion\": \"CA\", \n    \"WorkEmail\": \"work@test.com\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"Address1\\\": \\\"312 2nd Ave W\\\", \\n    \\\"City\\\": \\\"Seattle\\\", \\n    \\\"Country\\\": \\\"United States\\\", \\n    \\\"Description\\\": \\\"desc\\\", \\n    \\\"Fax\\\": \\\"123456\\\", \\n    \\\"FirstName\\\": \\\"FN1476935164020\\\", \\n    \\\"HomePhone\\\": \\\"86123456789\\\", \\n    \\\"LastName\\\": \\\"LN1476935164020\\\", \\n    \\\"MobilePhone\\\": \\\"8613312345678\\\", \\n    \\\"NickName\\\": \\\"this is nick name\\\", \\n    \\\"OtherPhone\\\": \\\"11111111111111111\\\", \\n    \\\"OtherPhoneType\\\": \\\"Work\\\", \\n    \\\"PersonalEmail\\\": \\\"person@test.com\\\", \\n    \\\"PostalCode\\\": \\\"98119\\\", \\n    \\\"State\\\": \\\"Washington\\\", \\n    \\\"TaxRegion\\\": \\\"CA\\\", \\n    \\\"WorkEmail\\\": \\\"work@test.com\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/contact\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"Address1\\\": \\\"312 2nd Ave W\\\", \\n    \\\"City\\\": \\\"Seattle\\\", \\n    \\\"Country\\\": \\\"United States\\\", \\n    \\\"Description\\\": \\\"desc\\\", \\n    \\\"Fax\\\": \\\"123456\\\", \\n    \\\"FirstName\\\": \\\"FN1476935164020\\\", \\n    \\\"HomePhone\\\": \\\"86123456789\\\", \\n    \\\"LastName\\\": \\\"LN1476935164020\\\", \\n    \\\"MobilePhone\\\": \\\"8613312345678\\\", \\n    \\\"NickName\\\": \\\"this is nick name\\\", \\n    \\\"OtherPhone\\\": \\\"11111111111111111\\\", \\n    \\\"OtherPhoneType\\\": \\\"Work\\\", \\n    \\\"PersonalEmail\\\": \\\"person@test.com\\\", \\n    \\\"PostalCode\\\": \\\"98119\\\", \\n    \\\"State\\\": \\\"Washington\\\", \\n    \\\"TaxRegion\\\": \\\"CA\\\", \\n    \\\"WorkEmail\\\": \\\"work@test.com\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/contact\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/contact\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"Address1\\\": \\\"312 2nd Ave W\\\", \\n    \\\"City\\\": \\\"Seattle\\\", \\n    \\\"Country\\\": \\\"United States\\\", \\n    \\\"Description\\\": \\\"desc\\\", \\n    \\\"Fax\\\": \\\"123456\\\", \\n    \\\"FirstName\\\": \\\"FN1476935164020\\\", \\n    \\\"HomePhone\\\": \\\"86123456789\\\", \\n    \\\"LastName\\\": \\\"LN1476935164020\\\", \\n    \\\"MobilePhone\\\": \\\"8613312345678\\\", \\n    \\\"NickName\\\": \\\"this is nick name\\\", \\n    \\\"OtherPhone\\\": \\\"11111111111111111\\\", \\n    \\\"OtherPhoneType\\\": \\\"Work\\\", \\n    \\\"PersonalEmail\\\": \\\"person@test.com\\\", \\n    \\\"PostalCode\\\": \\\"98119\\\", \\n    \\\"State\\\": \\\"Washington\\\", \\n    \\\"TaxRegion\\\": \\\"CA\\\", \\n    \\\"WorkEmail\\\": \\\"work@test.com\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/contact\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"Address1\\\": \\\"312 2nd Ave W\\\", \\n    \\\"City\\\": \\\"Seattle\\\", \\n    \\\"Country\\\": \\\"United States\\\", \\n    \\\"Description\\\": \\\"desc\\\", \\n    \\\"Fax\\\": \\\"123456\\\", \\n    \\\"FirstName\\\": \\\"FN1476935164020\\\", \\n    \\\"HomePhone\\\": \\\"86123456789\\\", \\n    \\\"LastName\\\": \\\"LN1476935164020\\\", \\n    \\\"MobilePhone\\\": \\\"8613312345678\\\", \\n    \\\"NickName\\\": \\\"this is nick name\\\", \\n    \\\"OtherPhone\\\": \\\"11111111111111111\\\", \\n    \\\"OtherPhoneType\\\": \\\"Work\\\", \\n    \\\"PersonalEmail\\\": \\\"person@test.com\\\", \\n    \\\"PostalCode\\\": \\\"98119\\\", \\n    \\\"State\\\": \\\"Washington\\\", \\n    \\\"TaxRegion\\\": \\\"CA\\\", \\n    \\\"WorkEmail\\\": \\\"work@test.com\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/contact/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEContact",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02e5b26208f",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete Contact",
        "tags": [
          "Contacts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/contact/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/contact/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/contact/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/contact/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/contact/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/contact/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETContact",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c93808457d787030157e02e5fde2094",
                "Address1": "312 2nd Ave W",
                "City": "Seattle",
                "Country": "United States",
                "CreatedById": "2c93808457d787030157e02e45291f18",
                "CreatedDate": "2016-10-20T05:41:58.000+02:00",
                "Description": "desc",
                "Fax": "123456",
                "FirstName": "FN1476934918260_new",
                "HomePhone": "86123456789",
                "Id": "2c93808457d787030157e02e606e2095",
                "LastName": "LN1476934918260",
                "MobilePhone": "8613312345678",
                "NickName": "this is nick name",
                "OtherPhone": "11111111111111111",
                "OtherPhoneType": "Work",
                "PersonalEmail": "person@test.com",
                "PostalCode": "98119",
                "State": "Washington",
                "TaxRegion": "CA",
                "UpdatedById": "2c93808457d787030157e02e45291f18",
                "UpdatedDate": "2016-10-20T05:41:58.000+02:00",
                "WorkEmail": "work@test.com"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetContact"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Contact",
        "tags": [
          "Contacts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/contact/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/contact/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/contact/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/contact/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/contact/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/contact/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTContact",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyContact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02e606e2095",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update Contact",
        "tags": [
          "Contacts"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"FirstName\": \"FN1476934918260_new\", \n    \"Id\": \"2c93808457d787030157e02e606e2095\"\n}' \"https://rest.zuora.com//v1/object/contact/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/contact/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"FirstName\": \"FN1476934918260_new\", \n    \"Id\": \"2c93808457d787030157e02e606e2095\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"FirstName\\\": \\\"FN1476934918260_new\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02e606e2095\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/contact/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"FirstName\\\": \\\"FN1476934918260_new\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02e606e2095\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/contact/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/contact/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"FirstName\\\": \\\"FN1476934918260_new\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02e606e2095\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/contact/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"FirstName\\\": \\\"FN1476934918260_new\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02e606e2095\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/credit-balance-adjustment/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETCreditBalanceAdjustment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c93808457d787030157e02f5fb82c76",
                "AdjustmentDate": "2016-10-20",
                "Amount": 30.8,
                "CancelledOn": "2016-10-20T05:43:05.000+02:00",
                "CreatedById": "2c93808457d787030157e02f409a2af9",
                "CreatedDate": "2016-10-20T05:43:04.000+02:00",
                "Id": "2c93808457d787030157e02f640b2c9f",
                "Number": "CBA-00000001",
                "ReasonCode": "Standard Adjustment",
                "SourceTransactionId": "2c93808457d787030157e02f60a42c87",
                "SourceTransactionNumber": "INV00000001",
                "SourceTransactionType": "Invoice",
                "Status": "Canceled",
                "Type": "Increase",
                "UpdatedById": "2c93808457d787030157e02f409a2af9",
                "UpdatedDate": "2016-10-20T05:43:05.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetCreditBalanceAdjustment"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve CreditBalanceAdjustment",
        "tags": [
          "Credit Balance Adjustments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/credit-balance-adjustment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/credit-balance-adjustment/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/credit-balance-adjustment/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/credit-balance-adjustment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/credit-balance-adjustment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/credit-balance-adjustment/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/export": {
      "post": {
        "description": "",
        "operationId": "Object_POSTExport",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateExport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e03222184fae",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create Export",
        "tags": [
          "Exports"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Format\": \"csv\", \n    \"Name\": \"test_Export_1476935164445\", \n    \"Query\": \"select * from account\", \n    \"Status\": \"Processing\", \n    \"Zip\": true\n}' \"https://rest.zuora.com//v1/object/export\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/export');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Format\": \"csv\", \n    \"Name\": \"test_Export_1476935164445\", \n    \"Query\": \"select * from account\", \n    \"Status\": \"Processing\", \n    \"Zip\": true\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Format\\\": \\\"csv\\\", \\n    \\\"Name\\\": \\\"test_Export_1476935164445\\\", \\n    \\\"Query\\\": \\\"select * from account\\\", \\n    \\\"Status\\\": \\\"Processing\\\", \\n    \\\"Zip\\\": true\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/export\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Format\\\": \\\"csv\\\", \\n    \\\"Name\\\": \\\"test_Export_1476935164445\\\", \\n    \\\"Query\\\": \\\"select * from account\\\", \\n    \\\"Status\\\": \\\"Processing\\\", \\n    \\\"Zip\\\": true\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/export\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/export\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Format\\\": \\\"csv\\\", \\n    \\\"Name\\\": \\\"test_Export_1476935164445\\\", \\n    \\\"Query\\\": \\\"select * from account\\\", \\n    \\\"Status\\\": \\\"Processing\\\", \\n    \\\"Zip\\\": true\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/export\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Format\\\": \\\"csv\\\", \\n    \\\"Name\\\": \\\"test_Export_1476935164445\\\", \\n    \\\"Query\\\": \\\"select * from account\\\", \\n    \\\"Status\\\": \\\"Processing\\\", \\n    \\\"Zip\\\": true\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/export/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETExport",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e03202294e25",
                "CreatedDate": "2016-10-20T05:46:04.000+02:00",
                "Encrypted": false,
                "FileId": "2c93808457d787030157e032228d4fb0",
                "Format": "csv",
                "Id": "2c93808457d787030157e03222184fae",
                "Name": "test_Export_1476935164445",
                "Query": "select * from account",
                "Size": 5,
                "Status": "Completed",
                "UpdatedById": "2c93808457d787030157e03202294e25",
                "UpdatedDate": "2016-10-20T05:46:04.000+02:00",
                "Zip": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetExport"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Export",
        "tags": [
          "Exports"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/export/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/export/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/export/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/export/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/export/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/export/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/feature/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEFeature",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02f80e92e24",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete Feature",
        "tags": [
          "Features"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/feature/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/feature/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/feature/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/feature/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/feature/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/feature/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETFeature",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e02f68272cae",
                "CreatedDate": "2016-10-20T05:43:12.000+02:00",
                "Description": "this is desc",
                "FeatureCode": "feature_code_1476934992537",
                "Id": "2c93808457d787030157e02f82872e25",
                "Name": "name_1476934992537_new",
                "Status": "Active",
                "UpdatedById": "2c93808457d787030157e02f68272cae",
                "UpdatedDate": "2016-10-20T05:43:12.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetFeature"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Feature",
        "tags": [
          "Features"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/feature/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/feature/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/feature/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/feature/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/feature/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/feature/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/import/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETImport",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyGetImport"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Import",
        "tags": [
          "Imports"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/import/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/import/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/import/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/import/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/import/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/import/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice-adjustment": {
      "post": {
        "description": "",
        "operationId": "Object_POSTInvoiceAdjustment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateInvoiceAdjustment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e030d3043f79",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create InvoiceAdjustment",
        "tags": [
          "Invoice Adjustments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountingCode\": \"Accounts Receivable\", \n    \"AdjustmentDate\": \"2016-10-20\", \n    \"Amount\": 1.2, \n    \"Comments\": \"this is comments\", \n    \"InvoiceId\": \"2c93808457d787030157e030d10f3f64\", \n    \"InvoiceNumber\": \"INV00000001\", \n    \"ReferenceId\": \"refid-1476935078657\", \n    \"Type\": \"Credit\"\n}' \"https://rest.zuora.com//v1/object/invoice-adjustment\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-adjustment');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountingCode\": \"Accounts Receivable\", \n    \"AdjustmentDate\": \"2016-10-20\", \n    \"Amount\": 1.2, \n    \"Comments\": \"this is comments\", \n    \"InvoiceId\": \"2c93808457d787030157e030d10f3f64\", \n    \"InvoiceNumber\": \"INV00000001\", \n    \"ReferenceId\": \"refid-1476935078657\", \n    \"Type\": \"Credit\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountingCode\\\": \\\"Accounts Receivable\\\", \\n    \\\"AdjustmentDate\\\": \\\"2016-10-20\\\", \\n    \\\"Amount\\\": 1.2, \\n    \\\"Comments\\\": \\\"this is comments\\\", \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e030d10f3f64\\\", \\n    \\\"InvoiceNumber\\\": \\\"INV00000001\\\", \\n    \\\"ReferenceId\\\": \\\"refid-1476935078657\\\", \\n    \\\"Type\\\": \\\"Credit\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-adjustment\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountingCode\\\": \\\"Accounts Receivable\\\", \\n    \\\"AdjustmentDate\\\": \\\"2016-10-20\\\", \\n    \\\"Amount\\\": 1.2, \\n    \\\"Comments\\\": \\\"this is comments\\\", \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e030d10f3f64\\\", \\n    \\\"InvoiceNumber\\\": \\\"INV00000001\\\", \\n    \\\"ReferenceId\\\": \\\"refid-1476935078657\\\", \\n    \\\"Type\\\": \\\"Credit\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/invoice-adjustment\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-adjustment\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountingCode\\\": \\\"Accounts Receivable\\\", \\n    \\\"AdjustmentDate\\\": \\\"2016-10-20\\\", \\n    \\\"Amount\\\": 1.2, \\n    \\\"Comments\\\": \\\"this is comments\\\", \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e030d10f3f64\\\", \\n    \\\"InvoiceNumber\\\": \\\"INV00000001\\\", \\n    \\\"ReferenceId\\\": \\\"refid-1476935078657\\\", \\n    \\\"Type\\\": \\\"Credit\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-adjustment\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountingCode\\\": \\\"Accounts Receivable\\\", \\n    \\\"AdjustmentDate\\\": \\\"2016-10-20\\\", \\n    \\\"Amount\\\": 1.2, \\n    \\\"Comments\\\": \\\"this is comments\\\", \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e030d10f3f64\\\", \\n    \\\"InvoiceNumber\\\": \\\"INV00000001\\\", \\n    \\\"ReferenceId\\\": \\\"refid-1476935078657\\\", \\n    \\\"Type\\\": \\\"Credit\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice-adjustment/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEInvoiceAdjustment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete InvoiceAdjustment",
        "tags": [
          "Invoice Adjustments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-adjustment/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/invoice-adjustment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETInvoiceAdjustment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c93808457d787030157e030d0a43f53",
                "AccountingCode": "Accounts Receivable",
                "AdjustmentDate": "2016-10-20",
                "AdjustmentNumber": "IA-00000001",
                "Amount": 1.2,
                "Comments": "this is comments",
                "CreatedById": "2c93808457d787030157e030b4fa3dd6",
                "CreatedDate": "2016-10-20T05:44:38.000+02:00",
                "CustomerName": "AC_1476935078064",
                "CustomerNumber": "AN_1476935078064",
                "Id": "2c93808457d787030157e030d3043f79",
                "ImpactAmount": -1.2,
                "InvoiceId": "2c93808457d787030157e030d10f3f64",
                "InvoiceNumber": "INV00000001",
                "ReasonCode": "Standard Adjustment",
                "ReferenceId": "refid-1476935078657",
                "Status": "Processed",
                "Type": "Credit",
                "UpdatedById": "2c93808457d787030157e030b4fa3dd6",
                "UpdatedDate": "2016-10-20T05:44:38.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetInvoiceAdjustment"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve InvoiceAdjustment",
        "tags": [
          "Invoice Adjustments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-adjustment/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/invoice-adjustment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTInvoiceAdjustment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyInvoiceAdjustment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update InvoiceAdjustment",
        "tags": [
          "Invoice Adjustments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-adjustment/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/invoice-adjustment/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-adjustment/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice-item-adjustment/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEInvoiceItemAdjustment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete InvoiceItemAdjustment",
        "tags": [
          "Invoice Item Adjustments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/invoice-item-adjustment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETInvoiceItemAdjustment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c93808457d787030157e032485b5131",
                "AccountingCode": "Accounts Receivable",
                "AdjustmentDate": "2016-10-20",
                "AdjustmentNumber": "IIA-00000001",
                "Amount": 1.2,
                "Comment": "this is comments",
                "CreatedById": "2c93808457d787030157e032283c4fb2",
                "CreatedDate": "2016-10-20T05:46:14.000+02:00",
                "Id": "2c93808457d787030157e0324aea5158",
                "InvoiceId": "2c93808457d787030157e03248c75142",
                "InvoiceItemName": "OneTime_Flat Fee Pricing1476935174089",
                "InvoiceNumber": "INV00000001",
                "ReasonCode": "Standard Adjustment",
                "ReferenceId": "refid-1476935174845",
                "ServiceEndDate": "2016-10-20",
                "ServiceStartDate": "2016-10-20",
                "SourceId": "2c93808457d787030157e03248c95144",
                "SourceType": "InvoiceDetail",
                "Status": "Processed",
                "Type": "Credit",
                "UpdatedById": "2c93808457d787030157e032283c4fb2",
                "UpdatedDate": "2016-10-20T05:46:14.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetInvoiceItemAdjustment"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve InvoiceItemAdjustment",
        "tags": [
          "Invoice Item Adjustments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/invoice-item-adjustment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-item-adjustment/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice-item/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETInvoiceItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountingCode": "Accounts Receivable",
                "ChargeAmount": 10,
                "ChargeDate": "2016-10-20T05:44:19.000+02:00",
                "ChargeName": "OneTime_Flat Fee Pricing1476935059154",
                "CreatedById": "2c93808457d787030157e03071873a9a",
                "CreatedDate": "2016-10-20T05:44:19.000+02:00",
                "Id": "2c93808457d787030157e03089c03c3b",
                "InvoiceId": "2c93808457d787030157e03089bb3c39",
                "PicklistCustom__c": "2",
                "ProcessingType": 0,
                "ProductDescription": "Create product via API",
                "Quantity": 1,
                "RatePlanChargeId": "2c93808457d787030157e03088ec3c2d",
                "SKU": "API-SKU1476935058740",
                "ServiceEndDate": "2016-10-20",
                "ServiceStartDate": "2016-10-20",
                "SubscriptionId": "2c93808457d787030157e03088bf3c24",
                "TaxAmount": 0,
                "TaxExemptAmount": 0,
                "UnitPrice": 10,
                "UpdatedById": "2c93808457d787030157e03071873a9a",
                "UpdatedDate": "2016-10-20T05:44:21.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetInvoiceItem"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve InvoiceItem",
        "tags": [
          "Invoice Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice-item/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-item/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-item/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/invoice-item/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-item/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-item/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice-payment": {
      "post": {
        "description": "",
        "operationId": "Object_POSTInvoicePayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateInvoicePayment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02dee6e1b7a",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create InvoicePayment",
        "tags": [
          "Invoice Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Amount\": 10, \n    \"InvoiceId\": \"2c93808457d787030157e02deadb1b6d\", \n    \"PaymentId\": \"2c93808457d787030157e02de5fc1b57\"\n}' \"https://rest.zuora.com//v1/object/invoice-payment\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-payment');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Amount\": 10, \n    \"InvoiceId\": \"2c93808457d787030157e02deadb1b6d\", \n    \"PaymentId\": \"2c93808457d787030157e02de5fc1b57\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Amount\\\": 10, \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e02deadb1b6d\\\", \\n    \\\"PaymentId\\\": \\\"2c93808457d787030157e02de5fc1b57\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-payment\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Amount\\\": 10, \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e02deadb1b6d\\\", \\n    \\\"PaymentId\\\": \\\"2c93808457d787030157e02de5fc1b57\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/invoice-payment\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-payment\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Amount\\\": 10, \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e02deadb1b6d\\\", \\n    \\\"PaymentId\\\": \\\"2c93808457d787030157e02de5fc1b57\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-payment\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Amount\\\": 10, \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e02deadb1b6d\\\", \\n    \\\"PaymentId\\\": \\\"2c93808457d787030157e02de5fc1b57\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice-payment/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETInvoicePayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Amount": 10,
                "CreatedById": "2c93808457d787030157e02dc3d919dc",
                "CreatedDate": "2016-10-20T05:41:29.000+02:00",
                "Id": "2c93808457d787030157e02dee6e1b7a",
                "InvoiceId": "2c93808457d787030157e02deadb1b6d",
                "PaymentId": "2c93808457d787030157e02de5fc1b57",
                "RefundAmount": 0,
                "UpdatedById": "2c93808457d787030157e02dc3d919dc",
                "UpdatedDate": "2016-10-20T05:41:29.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetInvoicePayment"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve InvoicePayment",
        "tags": [
          "Invoice Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice-payment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-payment/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-payment/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/invoice-payment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-payment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-payment/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTInvoicePayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyInvoicePayment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update InvoicePayment",
        "tags": [
          "Invoice Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/object/invoice-payment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-payment/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-payment/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/invoice-payment/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-payment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-payment/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice-split-item/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETInvoiceSplitItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e031bb3f4aa5",
                "CreatedDate": "2016-10-20T05:45:45.000+02:00",
                "Id": "2c93808457d787030157e031d7214c55",
                "InvoiceDate": "2011-01-20",
                "InvoiceSplitId": "2c93808457d787030157e031d5844c53",
                "PaymentTerm": "Due Upon Receipt",
                "SplitPercentage": 50.9,
                "UpdatedById": "2c93808457d787030157e031bb3f4aa5",
                "UpdatedDate": "2016-10-20T05:45:45.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetInvoiceSplitItem"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve InvoiceSplitItem",
        "tags": [
          "Invoice Split Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice-split-item/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-split-item/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-split-item/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/invoice-split-item/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-split-item/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-split-item/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice-split/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETInvoiceSplit",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e03111d542ae",
                "CreatedDate": "2016-10-20T05:45:01.000+02:00",
                "Id": "2c93808457d787030157e0312cb2445c",
                "InvoiceId": "2c93808457d787030157e0312aa34449",
                "UpdatedById": "2c93808457d787030157e03111d542ae",
                "UpdatedDate": "2016-10-20T05:45:01.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetInvoiceSplit"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve InvoiceSplit",
        "tags": [
          "Invoice Splits"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice-split/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice-split/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice-split/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/invoice-split/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice-split/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice-split/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/invoice/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEInvoice",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02f149f2922",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete Invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/invoice/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETInvoice",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c93808457d787030157e031d2704c28",
                "AdjustmentAmount": 0,
                "Amount": 23.92,
                "AmountWithoutTax": 23.92,
                "Balance": 23.92,
                "Body": "JVBERi0xLjUNCjQg......QNCiUlRU9GDQo=",
                "CreatedById": "2c93808457d787030157e031bb3f4aa5",
                "CreatedDate": "2016-10-20T05:45:45.000+02:00",
                "CreditBalanceAdjustmentAmount": 0,
                "DueDate": "2011-01-10",
                "Id": "2c93808457d787030157e031d86c4c57",
                "IncludesOneTime": true,
                "IncludesRecurring": true,
                "IncludesUsage": true,
                "InvoiceDate": "2011-01-10",
                "InvoiceNumber": "INV00000002",
                "PaymentAmount": 0,
                "PostedBy": "2c93808457d787030157e031bb3f4aa5",
                "PostedDate\"": "2016-10-20T05:45:45.000+02:00",
                "RefundAmount": 0,
                "Status": "Posted",
                "TargetDate": "2016-10-20",
                "TaxAmount": 0,
                "TaxExemptAmount": 0,
                "UpdatedById": "2c93808457d787030157e031bb3f4aa5",
                "UpdatedDate": "2016-10-20T05:45:45.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetInvoice"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/invoice/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/invoice/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTInvoice",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyInvoice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e031d86c4c57",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update Invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\": \"2c93808457d787030157e031d86c4c57\", \n    \"Status\": \"Posted\"\n}' \"https://rest.zuora.com//v1/object/invoice/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/invoice/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\": \"2c93808457d787030157e031d86c4c57\", \n    \"Status\": \"Posted\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e031d86c4c57\\\", \\n    \\\"Status\\\": \\\"Posted\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/invoice/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e031d86c4c57\\\", \\n    \\\"Status\\\": \\\"Posted\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/invoice/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/invoice/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e031d86c4c57\\\", \\n    \\\"Status\\\": \\\"Posted\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/invoice/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e031d86c4c57\\\", \\n    \\\"Status\\\": \\\"Posted\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/payment": {
      "post": {
        "description": "Creates a payment.\n",
        "operationId": "Object_POSTPayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreatePayment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e03197714910",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 2, \n    \"AppliedCreditBalanceAmount\": 0, \n    \"AppliedInvoiceAmount\": 2, \n    \"EffectiveDate\": \"2016-10-20\", \n    \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n    \"PaymentMethodId\": \"2c93808457d787030157e03196d1490e\", \n    \"Status\": \"Processed\", \n    \"Type\": \"Electronic\"\n}' \"https://rest.zuora.com//v1/object/payment\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 2, \n    \"AppliedCreditBalanceAmount\": 0, \n    \"AppliedInvoiceAmount\": 2, \n    \"EffectiveDate\": \"2016-10-20\", \n    \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n    \"PaymentMethodId\": \"2c93808457d787030157e03196d1490e\", \n    \"Status\": \"Processed\", \n    \"Type\": \"Electronic\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e03190e748ea\\\", \\n    \\\"Amount\\\": 2, \\n    \\\"AppliedCreditBalanceAmount\\\": 0, \\n    \\\"AppliedInvoiceAmount\\\": 2, \\n    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e03195604902\\\", \\n    \\\"PaymentMethodId\\\": \\\"2c93808457d787030157e03196d1490e\\\", \\n    \\\"Status\\\": \\\"Processed\\\", \\n    \\\"Type\\\": \\\"Electronic\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e03190e748ea\\\", \\n    \\\"Amount\\\": 2, \\n    \\\"AppliedCreditBalanceAmount\\\": 0, \\n    \\\"AppliedInvoiceAmount\\\": 2, \\n    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e03195604902\\\", \\n    \\\"PaymentMethodId\\\": \\\"2c93808457d787030157e03196d1490e\\\", \\n    \\\"Status\\\": \\\"Processed\\\", \\n    \\\"Type\\\": \\\"Electronic\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/payment\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e03190e748ea\\\", \\n    \\\"Amount\\\": 2, \\n    \\\"AppliedCreditBalanceAmount\\\": 0, \\n    \\\"AppliedInvoiceAmount\\\": 2, \\n    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e03195604902\\\", \\n    \\\"PaymentMethodId\\\": \\\"2c93808457d787030157e03196d1490e\\\", \\n    \\\"Status\\\": \\\"Processed\\\", \\n    \\\"Type\\\": \\\"Electronic\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e03190e748ea\\\", \\n    \\\"Amount\\\": 2, \\n    \\\"AppliedCreditBalanceAmount\\\": 0, \\n    \\\"AppliedInvoiceAmount\\\": 2, \\n    \\\"EffectiveDate\\\": \\\"2016-10-20\\\", \\n    \\\"InvoiceId\\\": \\\"2c93808457d787030157e03195604902\\\", \\n    \\\"PaymentMethodId\\\": \\\"2c93808457d787030157e03196d1490e\\\", \\n    \\\"Status\\\": \\\"Processed\\\", \\n    \\\"Type\\\": \\\"Electronic\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/payment-method": {
      "post": {
        "description": "",
        "operationId": "Object_POSTPaymentMethod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreatePaymentMethod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e03220ec4fad",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create payment method",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"CreditCardAddress1\": \"312 2nd Ave W\", \n    \"CreditCardCity\": \"Seattle\", \n    \"CreditCardCountry\": \"United States\", \n    \"CreditCardExpirationMonth\": 12, \n    \"CreditCardExpirationYear\": 2020, \n    \"CreditCardHolderName\": \"Somebody\", \n    \"CreditCardNumber\": \"4111111111111111\", \n    \"CreditCardPostalCode\": \"98119\", \n    \"CreditCardState\": \"Washington\", \n    \"CreditCardType\": \"Visa\", \n    \"MaxConsecutivePaymentFailures\": 10, \n    \"NumConsecutiveFailures\": 3, \n    \"PaymentRetryWindow\": 3, \n    \"Type\": \"CreditCard\"\n}' \"https://rest.zuora.com//v1/object/payment-method\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment-method');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"CreditCardAddress1\": \"312 2nd Ave W\", \n    \"CreditCardCity\": \"Seattle\", \n    \"CreditCardCountry\": \"United States\", \n    \"CreditCardExpirationMonth\": 12, \n    \"CreditCardExpirationYear\": 2020, \n    \"CreditCardHolderName\": \"Somebody\", \n    \"CreditCardNumber\": \"4111111111111111\", \n    \"CreditCardPostalCode\": \"98119\", \n    \"CreditCardState\": \"Washington\", \n    \"CreditCardType\": \"Visa\", \n    \"MaxConsecutivePaymentFailures\": 10, \n    \"NumConsecutiveFailures\": 3, \n    \"PaymentRetryWindow\": 3, \n    \"Type\": \"CreditCard\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W\\\", \\n    \\\"CreditCardCity\\\": \\\"Seattle\\\", \\n    \\\"CreditCardCountry\\\": \\\"United States\\\", \\n    \\\"CreditCardExpirationMonth\\\": 12, \\n    \\\"CreditCardExpirationYear\\\": 2020, \\n    \\\"CreditCardHolderName\\\": \\\"Somebody\\\", \\n    \\\"CreditCardNumber\\\": \\\"4111111111111111\\\", \\n    \\\"CreditCardPostalCode\\\": \\\"98119\\\", \\n    \\\"CreditCardState\\\": \\\"Washington\\\", \\n    \\\"CreditCardType\\\": \\\"Visa\\\", \\n    \\\"MaxConsecutivePaymentFailures\\\": 10, \\n    \\\"NumConsecutiveFailures\\\": 3, \\n    \\\"PaymentRetryWindow\\\": 3, \\n    \\\"Type\\\": \\\"CreditCard\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment-method\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W\\\", \\n    \\\"CreditCardCity\\\": \\\"Seattle\\\", \\n    \\\"CreditCardCountry\\\": \\\"United States\\\", \\n    \\\"CreditCardExpirationMonth\\\": 12, \\n    \\\"CreditCardExpirationYear\\\": 2020, \\n    \\\"CreditCardHolderName\\\": \\\"Somebody\\\", \\n    \\\"CreditCardNumber\\\": \\\"4111111111111111\\\", \\n    \\\"CreditCardPostalCode\\\": \\\"98119\\\", \\n    \\\"CreditCardState\\\": \\\"Washington\\\", \\n    \\\"CreditCardType\\\": \\\"Visa\\\", \\n    \\\"MaxConsecutivePaymentFailures\\\": 10, \\n    \\\"NumConsecutiveFailures\\\": 3, \\n    \\\"PaymentRetryWindow\\\": 3, \\n    \\\"Type\\\": \\\"CreditCard\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/payment-method\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment-method\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W\\\", \\n    \\\"CreditCardCity\\\": \\\"Seattle\\\", \\n    \\\"CreditCardCountry\\\": \\\"United States\\\", \\n    \\\"CreditCardExpirationMonth\\\": 12, \\n    \\\"CreditCardExpirationYear\\\": 2020, \\n    \\\"CreditCardHolderName\\\": \\\"Somebody\\\", \\n    \\\"CreditCardNumber\\\": \\\"4111111111111111\\\", \\n    \\\"CreditCardPostalCode\\\": \\\"98119\\\", \\n    \\\"CreditCardState\\\": \\\"Washington\\\", \\n    \\\"CreditCardType\\\": \\\"Visa\\\", \\n    \\\"MaxConsecutivePaymentFailures\\\": 10, \\n    \\\"NumConsecutiveFailures\\\": 3, \\n    \\\"PaymentRetryWindow\\\": 3, \\n    \\\"Type\\\": \\\"CreditCard\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment-method\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e0321fdf4fab\\\", \\n    \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W\\\", \\n    \\\"CreditCardCity\\\": \\\"Seattle\\\", \\n    \\\"CreditCardCountry\\\": \\\"United States\\\", \\n    \\\"CreditCardExpirationMonth\\\": 12, \\n    \\\"CreditCardExpirationYear\\\": 2020, \\n    \\\"CreditCardHolderName\\\": \\\"Somebody\\\", \\n    \\\"CreditCardNumber\\\": \\\"4111111111111111\\\", \\n    \\\"CreditCardPostalCode\\\": \\\"98119\\\", \\n    \\\"CreditCardState\\\": \\\"Washington\\\", \\n    \\\"CreditCardType\\\": \\\"Visa\\\", \\n    \\\"MaxConsecutivePaymentFailures\\\": 10, \\n    \\\"NumConsecutiveFailures\\\": 3, \\n    \\\"PaymentRetryWindow\\\": 3, \\n    \\\"Type\\\": \\\"CreditCard\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/payment-method-snapshot/{id}": {
      "get": {
        "description": "This REST API reference describes how to retrieve a Payment Method Snapshot.\n\nA Payment Method Snapshot is a copy of the particular Payment Method used in a transaction. If the Payment Method is deleted, the Payment Method Snapshot continues to retain the data used in each of the past transactions.\n\n## Notes\nThe following Payment Method fields are not available in Payment Method Snapshots:\n\n* `Active`\n* `AchAddress1`\n* `AchAddress2`\n* `CreatedById`\n* `CreatedDate`\n* `UpdatedById`\n* `UpdatedDate`\n\nThe Payment Method Snapshot field `PaymentMethodId` is not available in Payment Methods.\n",
        "operationId": "Object_GETPaymentMethodSnapshot",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c93808457d787030157e0314c0945d4",
                "BankIdentificationNumber": "411111",
                "CreditCardAddress1": "312 2nd Ave W",
                "CreditCardCity": "Seattle",
                "CreditCardCountry": "United States",
                "CreditCardExpirationMonth": 12,
                "CreditCardExpirationYear": 2020,
                "CreditCardHolderName": "Somebody",
                "CreditCardMaskNumber": "************1111",
                "CreditCardPostalCode": "98119",
                "CreditCardState": "Washington",
                "CreditCardType": "Visa",
                "Id": "2c93808457d787030157e0314f2245d8",
                "NumConsecutiveFailures": 0,
                "PaymentMethodId": "2c93808457d787030157e0314e8145d7",
                "PaymentMethodStatus": "Active",
                "TotalNumberOfErrorPayments": 0,
                "TotalNumberOfProcessedPayments": 0,
                "Type": "CreditCard",
                "UseDefaultRetryRule": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetPaymentMethodSnapshot"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve PaymentMethodSnapshot",
        "tags": [
          "Payment Method Snapshots"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/payment-method-snapshot/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment-method-snapshot/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment-method-snapshot/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/payment-method-snapshot/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment-method-snapshot/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment-method-snapshot/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/payment-method-transaction-log/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETPaymentMethodTransactionLog",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyGetPaymentMethodTransactionLog"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve PaymentMethodTransactionLog",
        "tags": [
          "Payment Method Transaction Logs"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/payment-method-transaction-log/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment-method-transaction-log/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment-method-transaction-log/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/payment-method-transaction-log/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment-method-transaction-log/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment-method-transaction-log/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/payment-method/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEPaymentMethod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02fcc8e329f",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete payment method",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/payment-method/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment-method/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment-method/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/payment-method/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment-method/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment-method/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETPaymentMethod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c93808457d787030157e0314c0945d4",
                "AchAddress1": "312 2nd Ave W",
                "Active": false,
                "BankIdentificationNumber": "411111",
                "CreatedById": "2c93808457d787030157e0312ef1445e",
                "CreatedDate": "2016-10-20T05:45:10.000+02:00",
                "CreditCardAddress1": "312 2nd Ave W",
                "CreditCardCity": "Seattle",
                "CreditCardCountry": "United States",
                "CreditCardExpirationMonth": 12,
                "CreditCardExpirationYear": 2020,
                "CreditCardHolderName": "Somebody",
                "CreditCardMaskNumber": "************1111",
                "CreditCardPostalCode": "98119",
                "CreditCardState": "Washington",
                "CreditCardType": "Visa",
                "Id": "2c93808457d787030157e0314e8145d7",
                "LastTransactionDateTime": "2016-10-20T05:45:10.000+02:00",
                "LastTransactionStatus": "Approved",
                "NumConsecutiveFailures": 7,
                "PaymentMethodStatus": "Active",
                "TotalNumberOfErrorPayments": 0,
                "TotalNumberOfProcessedPayments": 1,
                "Type": "CreditCard",
                "UpdatedById": "2c93808457d787030157e0312ef1445e",
                "UpdatedDate": "2016-10-20T05:45:10.000+02:00",
                "UseDefaultRetryRule": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetPaymentMethod"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Get payment method",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/payment-method/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment-method/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment-method/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/payment-method/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment-method/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment-method/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTPaymentMethod",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyPaymentMethod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02fced332a2",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update payment method",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"CreditCardAddress1\": \"312 2nd Ave W_new\", \n    \"Id\": \"2c93808457d787030157e02fced332a2\"\n}' \"https://rest.zuora.com//v1/object/payment-method/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment-method/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"CreditCardAddress1\": \"312 2nd Ave W_new\", \n    \"Id\": \"2c93808457d787030157e02fced332a2\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W_new\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02fced332a2\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment-method/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W_new\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02fced332a2\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/payment-method/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment-method/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W_new\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02fced332a2\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment-method/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"CreditCardAddress1\\\": \\\"312 2nd Ave W_new\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02fced332a2\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/payment-transaction-log/{id}": {
      "get": {
        "description": "Retrieves information about a specific payment transaction log.\n",
        "operationId": "Object_GETPaymentTransactionLog",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The ID of a payment transaction log.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Gateway": "TEST gateway name1476935063101",
                "GatewayReasonCode": "approve",
                "GatewayReasonCodeDescription": "This transaction has been approved by Test gateway.",
                "GatewayState": "Submitted",
                "GatewayTransactionType": "Sale",
                "Id": "2c93808457d787030157e030b2703dcd",
                "PaymentId": "2c93808457d787030157e030b2673dcc",
                "TransactionDate": "2016-10-20T05:44:30.000+02:00",
                "TransactionId": "874200.071357285"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetPaymentTransactionLog"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Get payment transaction log",
        "tags": [
          "Payment Transaction Logs"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/payment-transaction-log/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment-transaction-log/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment-transaction-log/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/payment-transaction-log/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment-transaction-log/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment-transaction-log/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/payment/{id}": {
      "delete": {
        "description": "Deletes a payment. Only payments with the Cancelled status can be deleted. \n",
        "operationId": "Object_DELETEPayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of the payment to be deleted. For example, 2c92c0f85d4e95ae015d4f7e5d690622.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c92c0f85d4e95ae015d4f7e5d690622",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/payment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/payment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "Retrives the information about one specific payment. \n",
        "operationId": "Object_GETPayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c92c0f94fd7f22d014fef0b703e26f4",
                "Amount": 19696.44,
                "AppliedCreditBalanceAmount": 0,
                "BankIdentificationNumber": "111111",
                "CreatedById": "2c92c0f955e2bcfc0155e3019d0c4963",
                "CreatedDate": "2017-01-03T13:00:00.000-08:00",
                "EffectiveDate": "2017-01-03",
                "Gateway": "Test Gateway2",
                "GatewayResponse": "This transaction has been approved by Test gateway.",
                "GatewayResponseCode": "approve",
                "GatewayState": "Submitted",
                "Id": "2c92c095592623ea01596621ada84352",
                "PaymentMethodId": "2c92c0f94fd7f22d014fef0b714e26f9",
                "PaymentMethodSnapshotId": "2c92c095592623ea01596621ada44351",
                "PaymentNumber": "P-00000036",
                "ReferenceId": "3115031.8425435387",
                "RefundAmount": 0,
                "Source": "PaymentRun",
                "SourceName": "PR-00001035",
                "Status": "Processed",
                "SubmittedOn": "2017-01-03T13:00:00.000-08:00",
                "Type": "Electronic",
                "UpdatedById": "2c92c0f955e2bcfc0155e3019d0c4963",
                "UpdatedDate": "2017-01-03T13:00:00.000-08:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetPayment"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Get payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/payment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/payment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "Updates a payment. \n",
        "operationId": "Object_PUTPayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyPayment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c92c0f85d5964dc015d59bb40ff3f0e",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/object/payment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/payment/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/payment/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/payment/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/payment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/payment/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/product": {
      "post": {
        "description": "",
        "operationId": "Object_POSTProduct",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e03246ae5129",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create Product",
        "tags": [
          "Products"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Description\": \"Create product via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"P_1476935173677\", \n    \"SKU\": \"API-SKU1476935173677\"\n}' \"https://rest.zuora.com//v1/object/product\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Description\": \"Create product via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"P_1476935173677\", \n    \"SKU\": \"API-SKU1476935173677\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Description\\\": \\\"Create product via API\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Name\\\": \\\"P_1476935173677\\\", \\n    \\\"SKU\\\": \\\"API-SKU1476935173677\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Description\\\": \\\"Create product via API\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Name\\\": \\\"P_1476935173677\\\", \\n    \\\"SKU\\\": \\\"API-SKU1476935173677\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/product\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Description\\\": \\\"Create product via API\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Name\\\": \\\"P_1476935173677\\\", \\n    \\\"SKU\\\": \\\"API-SKU1476935173677\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Description\\\": \\\"Create product via API\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Name\\\": \\\"P_1476935173677\\\", \\n    \\\"SKU\\\": \\\"API-SKU1476935173677\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/product-feature/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEProductFeature",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02d820f16d3",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete ProductFeature",
        "tags": [
          "Product Features"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product-feature/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-feature/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-feature/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/product-feature/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-feature/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-feature/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETProductFeature",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {},
            "schema": {
              "$ref": "#/definitions/ProxyGetProductFeature"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve ProductFeature",
        "tags": [
          "Product Features"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product-feature/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-feature/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-feature/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/product-feature/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-feature/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-feature/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/product-rate-plan": {
      "post": {
        "description": "",
        "operationId": "Object_POSTProductRatePlan",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateProductRatePlan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e0324735512b",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create ProductRatePlan",
        "tags": [
          "Product Rate Plans"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Description\": \"Test create product rateplan via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"ProductRatePlan1476935173957\", \n    \"ProductId\": \"2c93808457d787030157e03246ae5129\"\n}' \"https://rest.zuora.com//v1/object/product-rate-plan\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-rate-plan');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Description\": \"Test create product rateplan via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"ProductRatePlan1476935173957\", \n    \"ProductId\": \"2c93808457d787030157e03246ae5129\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Description\\\": \\\"Test create product rateplan via API\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Name\\\": \\\"ProductRatePlan1476935173957\\\", \\n    \\\"ProductId\\\": \\\"2c93808457d787030157e03246ae5129\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-rate-plan\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Description\\\": \\\"Test create product rateplan via API\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Name\\\": \\\"ProductRatePlan1476935173957\\\", \\n    \\\"ProductId\\\": \\\"2c93808457d787030157e03246ae5129\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/product-rate-plan\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-rate-plan\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Description\\\": \\\"Test create product rateplan via API\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Name\\\": \\\"ProductRatePlan1476935173957\\\", \\n    \\\"ProductId\\\": \\\"2c93808457d787030157e03246ae5129\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-rate-plan\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Description\\\": \\\"Test create product rateplan via API\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Name\\\": \\\"ProductRatePlan1476935173957\\\", \\n    \\\"ProductId\\\": \\\"2c93808457d787030157e03246ae5129\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/product-rate-plan-charge-tier/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETProductRatePlanChargeTier",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e02fd0f132a4",
                "CreatedDate": "2016-10-20T05:43:38.000+02:00",
                "Currency": "USD",
                "EndingUnit": 0,
                "Id": "2c93808457d787030157e02fe725341f",
                "Price": 30,
                "PriceFormat": "Flat Fee",
                "StartingUnit": 0,
                "Tier": 1,
                "UpdatedById": "2c93808457d787030157e02fd0f132a4",
                "UpdatedDate": "2016-10-20T05:43:38.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetProductRatePlanChargeTier"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve ProductRatePlanChargeTier",
        "tags": [
          "Product Rate Plan Charge Tiers"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product-rate-plan-charge-tier/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-rate-plan-charge-tier/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-rate-plan-charge-tier/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/product-rate-plan-charge-tier/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-rate-plan-charge-tier/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-rate-plan-charge-tier/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/product-rate-plan-charge/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEProductRatePlanCharge",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e031fcd34e19",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete ProductRatePlanCharge",
        "tags": [
          "Product Rate Plan Charges"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/product-rate-plan-charge/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETProductRatePlanCharge",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountingCode": "name_1476935155610",
                "BillCycleDay": 1,
                "BillCycleType": "DefaultFromCustomer",
                "BillingPeriod": "Month",
                "BillingPeriodAlignment": "AlignToCharge",
                "BillingTiming": "In Advance",
                "ChargeModel": "Flat Fee Pricing",
                "ChargeType": "Recurring",
                "CreatedById": "2c93808457d787030157e031dd264c85",
                "CreatedDate": "2016-10-20T05:45:55.000+02:00",
                "DefaultQuantity": 1,
                "DeferredRevenueAccount": "name_1476935155610",
                "Description": "Recurring Flat Fee Pricing",
                "EndDateCondition": "SubscriptionEnd",
                "Id": "2c93808457d787030157e032002b4e21",
                "IncludedUnits": 0,
                "LegacyRevenueReporting": false,
                "ListPriceBase": "Per Billing Period",
                "Name": "Recurring_Flat Fee Pricing1476935155610",
                "NumberOfPeriod": 1,
                "OverageCalculationOption": "EndOfSmoothingPeriod",
                "OverageUnusedUnitsCreditOption": "NoCredit",
                "PriceChangeOption": "NoChange",
                "PriceIncreasePercentage": 0,
                "ProductRatePlanId": "2c93808457d787030157e031ff054e1e",
                "RecognizedRevenueAccount": "name_1476935155610",
                "RevenueRecognitionRuleName": "Recognize upon invoicing",
                "Taxable": false,
                "TriggerEvent": "ContractEffective",
                "UpToPeriodsType": "Billing Periods",
                "UpdatedById": "2c93808457d787030157e031dd264c85",
                "UpdatedDate": "2016-10-20T05:45:55.000+02:00",
                "UseTenantDefaultForPriceChange": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetProductRatePlanCharge"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve ProductRatePlanCharge",
        "tags": [
          "Product Rate Plan Charges"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/product-rate-plan-charge/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-rate-plan-charge/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/product-rate-plan/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEProductRatePlan",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02d9dde184f",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete ProductRatePlan",
        "tags": [
          "Product Rate Plans"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product-rate-plan/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-rate-plan/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/product-rate-plan/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETProductRatePlan",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e02d84c116d5",
                "CreatedDate": "2016-10-20T05:41:09.000+02:00",
                "Description": "Test create product rateplan via API",
                "EffectiveEndDate": "2066-10-20",
                "EffectiveStartDate": "1966-10-20",
                "Id": "2c93808457d787030157e02da0d91852",
                "Name": "ProductRatePlan1476934869186_new",
                "ProductId": "2c93808457d787030157e02da0231850",
                "UpdatedById": "2c93808457d787030157e02d84c116d5",
                "UpdatedDate": "2016-10-20T05:41:09.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetProductRatePlan"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve ProductRatePlan",
        "tags": [
          "Product Rate Plans"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product-rate-plan/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-rate-plan/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/product-rate-plan/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTProductRatePlan",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyProductRatePlan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02da0d91852",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update ProductRatePlan",
        "tags": [
          "Product Rate Plans"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\": \"2c93808457d787030157e02da0d91852\", \n    \"Name\": \"ProductRatePlan1476934869186_new\"\n}' \"https://rest.zuora.com//v1/object/product-rate-plan/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product-rate-plan/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\": \"2c93808457d787030157e02da0d91852\", \n    \"Name\": \"ProductRatePlan1476934869186_new\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02da0d91852\\\", \\n    \\\"Name\\\": \\\"ProductRatePlan1476934869186_new\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02da0d91852\\\", \\n    \\\"Name\\\": \\\"ProductRatePlan1476934869186_new\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/product-rate-plan/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02da0d91852\\\", \\n    \\\"Name\\\": \\\"ProductRatePlan1476934869186_new\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product-rate-plan/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02da0d91852\\\", \\n    \\\"Name\\\": \\\"ProductRatePlan1476934869186_new\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/product/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEProduct",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02e7a22220e",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete Product",
        "tags": [
          "Products"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/product/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETProduct",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e02e62af2097",
                "CreatedDate": "2016-10-20T05:42:05.000+02:00",
                "Description": "Create product via API_new",
                "EffectiveEndDate": "2066-10-20",
                "EffectiveStartDate": "1966-10-20",
                "Id": "2c93808457d787030157e02e7be22210",
                "Name": "P_1476934925293_new",
                "SKU": "API-SKU1476934925293",
                "UpdatedById": "2c93808457d787030157e02e62af2097",
                "UpdatedDate": "2016-10-20T05:42:05.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetProduct"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Product",
        "tags": [
          "Products"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/product/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/product/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTProduct",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02e7be22210",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update Product",
        "tags": [
          "Products"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Description\": \"Create product via API_new\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Id\": \"2c93808457d787030157e02e7be22210\", \n    \"Name\": \"P_1476934925293_new\", \n    \"SKU\": \"API-SKU1476934925293\"\n}' \"https://rest.zuora.com//v1/object/product/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/product/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Description\": \"Create product via API_new\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Id\": \"2c93808457d787030157e02e7be22210\", \n    \"Name\": \"P_1476934925293_new\", \n    \"SKU\": \"API-SKU1476934925293\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Description\\\": \\\"Create product via API_new\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02e7be22210\\\", \\n    \\\"Name\\\": \\\"P_1476934925293_new\\\", \\n    \\\"SKU\\\": \\\"API-SKU1476934925293\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/product/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Description\\\": \\\"Create product via API_new\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02e7be22210\\\", \\n    \\\"Name\\\": \\\"P_1476934925293_new\\\", \\n    \\\"SKU\\\": \\\"API-SKU1476934925293\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/product/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/product/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Description\\\": \\\"Create product via API_new\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02e7be22210\\\", \\n    \\\"Name\\\": \\\"P_1476934925293_new\\\", \\n    \\\"SKU\\\": \\\"API-SKU1476934925293\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/product/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Description\\\": \\\"Create product via API_new\\\", \\n    \\\"EffectiveEndDate\\\": \\\"2066-10-20\\\", \\n    \\\"EffectiveStartDate\\\": \\\"1966-10-20\\\", \\n    \\\"Id\\\": \\\"2c93808457d787030157e02e7be22210\\\", \\n    \\\"Name\\\": \\\"P_1476934925293_new\\\", \\n    \\\"SKU\\\": \\\"API-SKU1476934925293\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/rate-plan-charge-tier/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETRatePlanChargeTier",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e02da3161854",
                "CreatedDate": "2016-10-20T05:41:16.000+02:00",
                "EndingUnit": 0,
                "Id": "2c93808457d787030157e02dbecc19d8",
                "Price": 30,
                "PriceFormat": "Flat Fee",
                "RatePlanChargeId": "2c93808457d787030157e02dbee919da",
                "StartingUnit": 0,
                "Tier": 1,
                "UpdatedById": "2c93808457d787030157e02da3161854",
                "UpdatedDate": "2016-10-20T05:41:16.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetRatePlanChargeTier"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve RatePlanChargeTier",
        "tags": [
          "Rate Plan Charge Tiers"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/rate-plan-charge-tier/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/rate-plan-charge-tier/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/rate-plan-charge-tier/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/rate-plan-charge-tier/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/rate-plan-charge-tier/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/rate-plan-charge-tier/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/rate-plan-charge/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETRatePlanCharge",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountingCode": "name_1476934998566",
                "BillCycleDay": 1,
                "BillCycleType": "DefaultFromCustomer",
                "BillingPeriod": "Month",
                "BillingPeriodAlignment": "AlignToCharge",
                "BillingTiming": "In Arrears",
                "ChargeModel": "Flat Fee Pricing",
                "ChargeNumber": "C-00000001",
                "ChargeType": "Recurring",
                "CreatedById": "2c93808457d787030157e02f84852e27",
                "CreatedDate": "2016-10-20T05:43:18.000+02:00",
                "Description": "Recurring Flat Fee Pricing",
                "EndDateCondition": "SubscriptionEnd",
                "Id": "2c93808457d787030157e02f9b802fad",
                "IsLastSegment": true,
                "ListPriceBase": "Per Billing Period",
                "Name": "Recurring_Flat Fee Pricing1476934998566",
                "NumberOfPeriods": 1,
                "OriginalId": "2c93808457d787030157e02f9b802fad",
                "OverageCalculationOption": "EndOfSmoothingPeriod",
                "OverageUnusedUnitsCreditOption": "NoCredit",
                "PriceChangeOption": "NoChange",
                "PriceIncreasePercentage": 0,
                "Quantity": 1,
                "RatePlanId": "2c93808457d787030157e02f9b762fac",
                "Segment": 1,
                "TriggerEvent": "ContractEffective",
                "UpToPeriodsType": "Billing Periods",
                "UpdatedById": "2c93808457d787030157e02f84852e27",
                "UpdatedDate": "2016-10-20T05:43:19.000+02:00",
                "Version": 1
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetRatePlanCharge"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve RatePlanCharge",
        "tags": [
          "Rate Plan Charges"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/rate-plan-charge/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/rate-plan-charge/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/rate-plan-charge/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/rate-plan-charge/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/rate-plan-charge/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/rate-plan-charge/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/rate-plan/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETRatePlan",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AmendmentId": "2c93808457d787030157e02ec4b42599",
                "CreatedById": "2c93808457d787030157e02ea77723ef",
                "CreatedDate": "2016-10-20T05:42:24.000+02:00",
                "Id": "2c93808457d787030157e02ec54f259e",
                "Name": "ProductRatePlan1476934943281",
                "UpdatedById": "2c93808457d787030157e02ea77723ef",
                "UpdatedDate": "2016-10-20T05:42:24.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetRatePlan"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve RatePlan",
        "tags": [
          "Rate Plans"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/rate-plan/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/rate-plan/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/rate-plan/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/rate-plan/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/rate-plan/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/rate-plan/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/refund": {
      "post": {
        "description": "",
        "operationId": "Object_POSTRefund",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateRefund"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e03198c84918",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create refund",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 1.1, \n    \"Comment\": \"this is comments\", \n    \"PaymentId\": \"2c93808457d787030157e03197714910\", \n    \"ReasonCode\": \"Standard Refund\", \n    \"RefundInvoicePaymentData\": {\n        \"RefundInvoicePayment\": [\n            {\n                \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n                \"RefundAmount\": 1.1\n            }\n        ]\n    }, \n    \"SoftDescriptor\": \"thisSD\", \n    \"SoftDescriptorPhone\": \"a@a.com\", \n    \"SourceType\": \"Payment\", \n    \"Type\": \"Electronic\"\n}' \"https://rest.zuora.com//v1/object/refund\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/refund');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 1.1, \n    \"Comment\": \"this is comments\", \n    \"PaymentId\": \"2c93808457d787030157e03197714910\", \n    \"ReasonCode\": \"Standard Refund\", \n    \"RefundInvoicePaymentData\": {\n        \"RefundInvoicePayment\": [\n            {\n                \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n                \"RefundAmount\": 1.1\n            }\n        ]\n    }, \n    \"SoftDescriptor\": \"thisSD\", \n    \"SoftDescriptorPhone\": \"a@a.com\", \n    \"SourceType\": \"Payment\", \n    \"Type\": \"Electronic\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e03190e748ea\\\", \\n    \\\"Amount\\\": 1.1, \\n    \\\"Comment\\\": \\\"this is comments\\\", \\n    \\\"PaymentId\\\": \\\"2c93808457d787030157e03197714910\\\", \\n    \\\"ReasonCode\\\": \\\"Standard Refund\\\", \\n    \\\"RefundInvoicePaymentData\\\": {\\n        \\\"RefundInvoicePayment\\\": [\\n            {\\n                \\\"InvoiceId\\\": \\\"2c93808457d787030157e03195604902\\\", \\n                \\\"RefundAmount\\\": 1.1\\n            }\\n        ]\\n    }, \\n    \\\"SoftDescriptor\\\": \\\"thisSD\\\", \\n    \\\"SoftDescriptorPhone\\\": \\\"a@a.com\\\", \\n    \\\"SourceType\\\": \\\"Payment\\\", \\n    \\\"Type\\\": \\\"Electronic\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/refund\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e03190e748ea\\\", \\n    \\\"Amount\\\": 1.1, \\n    \\\"Comment\\\": \\\"this is comments\\\", \\n    \\\"PaymentId\\\": \\\"2c93808457d787030157e03197714910\\\", \\n    \\\"ReasonCode\\\": \\\"Standard Refund\\\", \\n    \\\"RefundInvoicePaymentData\\\": {\\n        \\\"RefundInvoicePayment\\\": [\\n            {\\n                \\\"InvoiceId\\\": \\\"2c93808457d787030157e03195604902\\\", \\n                \\\"RefundAmount\\\": 1.1\\n            }\\n        ]\\n    }, \\n    \\\"SoftDescriptor\\\": \\\"thisSD\\\", \\n    \\\"SoftDescriptorPhone\\\": \\\"a@a.com\\\", \\n    \\\"SourceType\\\": \\\"Payment\\\", \\n    \\\"Type\\\": \\\"Electronic\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/refund\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/refund\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e03190e748ea\\\", \\n    \\\"Amount\\\": 1.1, \\n    \\\"Comment\\\": \\\"this is comments\\\", \\n    \\\"PaymentId\\\": \\\"2c93808457d787030157e03197714910\\\", \\n    \\\"ReasonCode\\\": \\\"Standard Refund\\\", \\n    \\\"RefundInvoicePaymentData\\\": {\\n        \\\"RefundInvoicePayment\\\": [\\n            {\\n                \\\"InvoiceId\\\": \\\"2c93808457d787030157e03195604902\\\", \\n                \\\"RefundAmount\\\": 1.1\\n            }\\n        ]\\n    }, \\n    \\\"SoftDescriptor\\\": \\\"thisSD\\\", \\n    \\\"SoftDescriptorPhone\\\": \\\"a@a.com\\\", \\n    \\\"SourceType\\\": \\\"Payment\\\", \\n    \\\"Type\\\": \\\"Electronic\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/refund\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e03190e748ea\\\", \\n    \\\"Amount\\\": 1.1, \\n    \\\"Comment\\\": \\\"this is comments\\\", \\n    \\\"PaymentId\\\": \\\"2c93808457d787030157e03197714910\\\", \\n    \\\"ReasonCode\\\": \\\"Standard Refund\\\", \\n    \\\"RefundInvoicePaymentData\\\": {\\n        \\\"RefundInvoicePayment\\\": [\\n            {\\n                \\\"InvoiceId\\\": \\\"2c93808457d787030157e03195604902\\\", \\n                \\\"RefundAmount\\\": 1.1\\n            }\\n        ]\\n    }, \\n    \\\"SoftDescriptor\\\": \\\"thisSD\\\", \\n    \\\"SoftDescriptorPhone\\\": \\\"a@a.com\\\", \\n    \\\"SourceType\\\": \\\"Payment\\\", \\n    \\\"Type\\\": \\\"Electronic\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/refund-invoice-payment/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETRefundInvoicePayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyGetRefundInvoicePayment"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve RefundInvoicePayment",
        "tags": [
          "Refund Invoice Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/refund-invoice-payment/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/refund-invoice-payment/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/refund-invoice-payment/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/refund-invoice-payment/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/refund-invoice-payment/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/refund-invoice-payment/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/refund-transaction-log/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETRefundTransactionLog",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Gateway": "TEST gateway name1476935035677",
                "GatewayReasonCode": "approve",
                "GatewayReasonCodeDescription": "This transaction has been approved by Test gateway.",
                "GatewayState": "Submitted",
                "GatewayTransactionType": "Refund",
                "Id": "2c93808457d787030157e0304c0538f2",
                "RefundId": "2c93808457d787030157e0304bf638f0",
                "TransactionDate": "2016-10-20T05:44:04.000+02:00",
                "TransactionId": "9036150.175338026"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetRefundTransactionLog"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve RefundTransactionLog",
        "tags": [
          "Refund Transaction Logs"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/refund-transaction-log/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/refund-transaction-log/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/refund-transaction-log/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/refund-transaction-log/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/refund-transaction-log/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/refund-transaction-log/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/refund/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETERefund",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e03198c84918",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete refund",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/refund/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/refund/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/refund/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/refund/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/refund/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/refund/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETRefund",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {},
            "schema": {
              "$ref": "#/definitions/ProxyGetRefund"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Get refund",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/refund/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/refund/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/refund/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/refund/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/refund/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/refund/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTRefund",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyRefund"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e03198c84918",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update refund",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\": \"2c93808457d787030157e03198c84918\", \n    \"Status\": \"Canceled\"\n}' \"https://rest.zuora.com//v1/object/refund/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/refund/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\": \"2c93808457d787030157e03198c84918\", \n    \"Status\": \"Canceled\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e03198c84918\\\", \\n    \\\"Status\\\": \\\"Canceled\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/refund/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e03198c84918\\\", \\n    \\\"Status\\\": \\\"Canceled\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/refund/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/refund/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e03198c84918\\\", \\n    \\\"Status\\\": \\\"Canceled\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/refund/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e03198c84918\\\", \\n    \\\"Status\\\": \\\"Canceled\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/subscription-product-feature/{id}": {
      "get": {
        "description": "",
        "operationId": "Object_GETSubscriptionProductFeature",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "CreatedById": "2c93808457d787030157e03151e845e3",
                "CreatedDate": "2016-10-20T05:45:17.000+02:00",
                "Description": "update description",
                "FeatureCode": "feature_code_1476935116658",
                "FeatureId": "2c93808457d787030157e03167fe4758",
                "Id": "2c93808457d787030157e0316ae7476a",
                "Name": "name_1476935116658",
                "RatePlanId": "2c93808457d787030157e0316ae64769",
                "UpdatedById": "2c93808457d787030157e03151e845e3",
                "UpdatedDate": "2016-10-20T05:45:18.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetSubscriptionProductFeature"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve SubscriptionProductFeature",
        "tags": [
          "Subscription Product Features"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/subscription-product-feature/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/subscription-product-feature/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/subscription-product-feature/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/subscription-product-feature/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/subscription-product-feature/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/subscription-product-feature/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/subscription/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETESubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "2c93808457d787030157e02ea04123cf",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/subscription/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/subscription/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/subscription/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/subscription/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/subscription/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/subscription/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {},
            "schema": {
              "$ref": "#/definitions/ProxyGetSubscription"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/subscription/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/subscription/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/subscription/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/subscription/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/subscription/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/subscription/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifySubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02ea04123cf",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\": \"2c93808457d787030157e02ea04123cf\", \n    \"Name\": \"S_1476934934547_name\", \n    \"Notes\": \"this is notes_new\"\n}' \"https://rest.zuora.com//v1/object/subscription/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/subscription/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\": \"2c93808457d787030157e02ea04123cf\", \n    \"Name\": \"S_1476934934547_name\", \n    \"Notes\": \"this is notes_new\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02ea04123cf\\\", \\n    \\\"Name\\\": \\\"S_1476934934547_name\\\", \\n    \\\"Notes\\\": \\\"this is notes_new\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/subscription/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02ea04123cf\\\", \\n    \\\"Name\\\": \\\"S_1476934934547_name\\\", \\n    \\\"Notes\\\": \\\"this is notes_new\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/subscription/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/subscription/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02ea04123cf\\\", \\n    \\\"Name\\\": \\\"S_1476934934547_name\\\", \\n    \\\"Notes\\\": \\\"this is notes_new\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/subscription/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Id\\\": \\\"2c93808457d787030157e02ea04123cf\\\", \\n    \\\"Name\\\": \\\"S_1476934934547_name\\\", \\n    \\\"Notes\\\": \\\"this is notes_new\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/taxation-item": {
      "post": {
        "description": "",
        "operationId": "Object_POSTTaxationItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateTaxationItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e0306f413a96",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create TaxationItem",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountingCode\": \"Usage Revenue\", \n    \"ExemptAmount\": 50, \n    \"InvoiceItemId\": \"2c93808457d787030157e0306cd43a88\", \n    \"Jurisdiction\": \"test\", \n    \"LocationCode\": \"code - 001\", \n    \"Name\": \"test\", \n    \"TaxAmount\": 3, \n    \"TaxCode\": \"taxcode\", \n    \"TaxCodeDescription\": \"description\", \n    \"TaxDate\": \"2016-10-20\", \n    \"TaxMode\": \"TaxExclusive\", \n    \"TaxRate\": 3, \n    \"TaxRateDescription\": \"test\", \n    \"TaxRateType\": \"FlatFee\"\n}' \"https://rest.zuora.com//v1/object/taxation-item\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/taxation-item');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountingCode\": \"Usage Revenue\", \n    \"ExemptAmount\": 50, \n    \"InvoiceItemId\": \"2c93808457d787030157e0306cd43a88\", \n    \"Jurisdiction\": \"test\", \n    \"LocationCode\": \"code - 001\", \n    \"Name\": \"test\", \n    \"TaxAmount\": 3, \n    \"TaxCode\": \"taxcode\", \n    \"TaxCodeDescription\": \"description\", \n    \"TaxDate\": \"2016-10-20\", \n    \"TaxMode\": \"TaxExclusive\", \n    \"TaxRate\": 3, \n    \"TaxRateDescription\": \"test\", \n    \"TaxRateType\": \"FlatFee\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountingCode\\\": \\\"Usage Revenue\\\", \\n    \\\"ExemptAmount\\\": 50, \\n    \\\"InvoiceItemId\\\": \\\"2c93808457d787030157e0306cd43a88\\\", \\n    \\\"Jurisdiction\\\": \\\"test\\\", \\n    \\\"LocationCode\\\": \\\"code - 001\\\", \\n    \\\"Name\\\": \\\"test\\\", \\n    \\\"TaxAmount\\\": 3, \\n    \\\"TaxCode\\\": \\\"taxcode\\\", \\n    \\\"TaxCodeDescription\\\": \\\"description\\\", \\n    \\\"TaxDate\\\": \\\"2016-10-20\\\", \\n    \\\"TaxMode\\\": \\\"TaxExclusive\\\", \\n    \\\"TaxRate\\\": 3, \\n    \\\"TaxRateDescription\\\": \\\"test\\\", \\n    \\\"TaxRateType\\\": \\\"FlatFee\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/taxation-item\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountingCode\\\": \\\"Usage Revenue\\\", \\n    \\\"ExemptAmount\\\": 50, \\n    \\\"InvoiceItemId\\\": \\\"2c93808457d787030157e0306cd43a88\\\", \\n    \\\"Jurisdiction\\\": \\\"test\\\", \\n    \\\"LocationCode\\\": \\\"code - 001\\\", \\n    \\\"Name\\\": \\\"test\\\", \\n    \\\"TaxAmount\\\": 3, \\n    \\\"TaxCode\\\": \\\"taxcode\\\", \\n    \\\"TaxCodeDescription\\\": \\\"description\\\", \\n    \\\"TaxDate\\\": \\\"2016-10-20\\\", \\n    \\\"TaxMode\\\": \\\"TaxExclusive\\\", \\n    \\\"TaxRate\\\": 3, \\n    \\\"TaxRateDescription\\\": \\\"test\\\", \\n    \\\"TaxRateType\\\": \\\"FlatFee\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/taxation-item\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/taxation-item\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountingCode\\\": \\\"Usage Revenue\\\", \\n    \\\"ExemptAmount\\\": 50, \\n    \\\"InvoiceItemId\\\": \\\"2c93808457d787030157e0306cd43a88\\\", \\n    \\\"Jurisdiction\\\": \\\"test\\\", \\n    \\\"LocationCode\\\": \\\"code - 001\\\", \\n    \\\"Name\\\": \\\"test\\\", \\n    \\\"TaxAmount\\\": 3, \\n    \\\"TaxCode\\\": \\\"taxcode\\\", \\n    \\\"TaxCodeDescription\\\": \\\"description\\\", \\n    \\\"TaxDate\\\": \\\"2016-10-20\\\", \\n    \\\"TaxMode\\\": \\\"TaxExclusive\\\", \\n    \\\"TaxRate\\\": 3, \\n    \\\"TaxRateDescription\\\": \\\"test\\\", \\n    \\\"TaxRateType\\\": \\\"FlatFee\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/taxation-item\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountingCode\\\": \\\"Usage Revenue\\\", \\n    \\\"ExemptAmount\\\": 50, \\n    \\\"InvoiceItemId\\\": \\\"2c93808457d787030157e0306cd43a88\\\", \\n    \\\"Jurisdiction\\\": \\\"test\\\", \\n    \\\"LocationCode\\\": \\\"code - 001\\\", \\n    \\\"Name\\\": \\\"test\\\", \\n    \\\"TaxAmount\\\": 3, \\n    \\\"TaxCode\\\": \\\"taxcode\\\", \\n    \\\"TaxCodeDescription\\\": \\\"description\\\", \\n    \\\"TaxDate\\\": \\\"2016-10-20\\\", \\n    \\\"TaxMode\\\": \\\"TaxExclusive\\\", \\n    \\\"TaxRate\\\": 3, \\n    \\\"TaxRateDescription\\\": \\\"test\\\", \\n    \\\"TaxRateType\\\": \\\"FlatFee\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/taxation-item/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETETaxationItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete TaxationItem",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/taxation-item/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/taxation-item/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/taxation-item/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/taxation-item/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/taxation-item/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/taxation-item/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETTaxationItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountingCode": "Usage Revenue",
                "CreatedById": "2c93808457d787030157e0304e2f38f8",
                "CreatedDate": "2016-10-20T05:44:13.000+02:00",
                "ExemptAmount": 50,
                "Id": "2c93808457d787030157e0306f413a96",
                "InvoiceItemId": "2c93808457d787030157e0306cd43a88",
                "Jurisdiction": "test",
                "LocationCode": "code - 001",
                "Name": "test",
                "TaxAmount": 3,
                "TaxCode": "taxcode",
                "TaxCodeDescription": "description",
                "TaxDate": "2016-10-20",
                "TaxRate": 3,
                "TaxRateDescription": "test",
                "TaxRateType": "FlatFee",
                "UpdatedById": "2c93808457d787030157e0304e2f38f8",
                "UpdatedDate": "2016-10-20T05:44:13.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetTaxationItem"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve TaxationItem",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/taxation-item/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/taxation-item/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/taxation-item/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/taxation-item/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/taxation-item/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/taxation-item/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTTaxationItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyTaxationItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update TaxationItem",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/object/taxation-item/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/taxation-item/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/taxation-item/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/taxation-item/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/taxation-item/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/taxation-item/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/unit-of-measure": {
      "post": {
        "description": "",
        "operationId": "Object_POSTUnitOfMeasure",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateUnitOfMeasure"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e030232f3748",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create UnitOfMeasure",
        "tags": [
          "Unit Of Measure"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Active\": true, \n    \"DecimalPlaces\": 9, \n    \"DisplayedAs\": \"name_display_name_1476935033519\", \n    \"RoundingMode\": \"UP\", \n    \"UomName\": \"name_1476935033519\"\n}' \"https://rest.zuora.com//v1/object/unit-of-measure\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/unit-of-measure');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Active\": true, \n    \"DecimalPlaces\": 9, \n    \"DisplayedAs\": \"name_display_name_1476935033519\", \n    \"RoundingMode\": \"UP\", \n    \"UomName\": \"name_1476935033519\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Active\\\": true, \\n    \\\"DecimalPlaces\\\": 9, \\n    \\\"DisplayedAs\\\": \\\"name_display_name_1476935033519\\\", \\n    \\\"RoundingMode\\\": \\\"UP\\\", \\n    \\\"UomName\\\": \\\"name_1476935033519\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/unit-of-measure\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"Active\\\": true, \\n    \\\"DecimalPlaces\\\": 9, \\n    \\\"DisplayedAs\\\": \\\"name_display_name_1476935033519\\\", \\n    \\\"RoundingMode\\\": \\\"UP\\\", \\n    \\\"UomName\\\": \\\"name_1476935033519\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/unit-of-measure\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/unit-of-measure\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"Active\\\": true, \\n    \\\"DecimalPlaces\\\": 9, \\n    \\\"DisplayedAs\\\": \\\"name_display_name_1476935033519\\\", \\n    \\\"RoundingMode\\\": \\\"UP\\\", \\n    \\\"UomName\\\": \\\"name_1476935033519\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/unit-of-measure\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"Active\\\": true, \\n    \\\"DecimalPlaces\\\": 9, \\n    \\\"DisplayedAs\\\": \\\"name_display_name_1476935033519\\\", \\n    \\\"RoundingMode\\\": \\\"UP\\\", \\n    \\\"UomName\\\": \\\"name_1476935033519\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/unit-of-measure/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEUnitOfMeasure",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete UnitOfMeasure",
        "tags": [
          "Unit Of Measure"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/unit-of-measure/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/unit-of-measure/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/unit-of-measure/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETUnitOfMeasure",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Active": true,
                "CreatedById": "2c93808457d787030157e0300f6735d3",
                "CreatedDate": "2016-10-20T05:43:53.000+02:00",
                "DecimalPlaces": 9,
                "DisplayedAs": "name_display_name_1476935033519",
                "Id": "2c93808457d787030157e030232f3748",
                "RoundingMode": "UP",
                "UomName": "name_1476935033519",
                "UpdatedById": "2c93808457d787030157e0300f6735d3",
                "UpdatedDate": "2016-10-20T05:43:53.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetUnitOfMeasure"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve UnitOfMeasure",
        "tags": [
          "Unit Of Measure"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/unit-of-measure/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/unit-of-measure/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/unit-of-measure/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTUnitOfMeasure",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyUnitOfMeasure"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update UnitOfMeasure",
        "tags": [
          "Unit Of Measure"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/object/unit-of-measure/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/unit-of-measure/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/unit-of-measure/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/unit-of-measure/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/usage": {
      "post": {
        "description": "",
        "operationId": "Object_POSTUsage",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "CreateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCreateUsage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "Id": "2c93808457d787030157e02e0a301d0a",
                "Success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "Errors": [
                  {
                    "Code": "INVALID_VALUE",
                    "Message": "The account number 123xProxy is invalid."
                  }
                ],
                "Success": false
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyBadRequestResponse"
            }
          }
        },
        "summary": "CRUD: Create Usage",
        "tags": [
          "Usage"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\": \"2c93808457d787030157e02e07991cfc\", \n    \"AccountNumber\": \"AN_1476934895501\", \n    \"ChargeId\": \"2c93808457d787030157e02e07cc1d04\", \n    \"ChargeNumber\": \"C-00000001\", \n    \"Description\": \"this is desc\", \n    \"EndDateTime\": \"2016-11-20T04:41:36.000+01:00\", \n    \"Quantity\": 9.9, \n    \"StartDateTime\": \"2016-10-20T05:41:36.000+02:00\", \n    \"SubscriptionId\": \"2c93808457d787030157e02e07b11cff\", \n    \"SubscriptionNumber\": \"S_1476934895501\", \n    \"UOM\": \"Each\"\n}' \"https://rest.zuora.com//v1/object/usage\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/usage');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\": \"2c93808457d787030157e02e07991cfc\", \n    \"AccountNumber\": \"AN_1476934895501\", \n    \"ChargeId\": \"2c93808457d787030157e02e07cc1d04\", \n    \"ChargeNumber\": \"C-00000001\", \n    \"Description\": \"this is desc\", \n    \"EndDateTime\": \"2016-11-20T04:41:36.000+01:00\", \n    \"Quantity\": 9.9, \n    \"StartDateTime\": \"2016-10-20T05:41:36.000+02:00\", \n    \"SubscriptionId\": \"2c93808457d787030157e02e07b11cff\", \n    \"SubscriptionNumber\": \"S_1476934895501\", \n    \"UOM\": \"Each\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e02e07991cfc\\\", \\n    \\\"AccountNumber\\\": \\\"AN_1476934895501\\\", \\n    \\\"ChargeId\\\": \\\"2c93808457d787030157e02e07cc1d04\\\", \\n    \\\"ChargeNumber\\\": \\\"C-00000001\\\", \\n    \\\"Description\\\": \\\"this is desc\\\", \\n    \\\"EndDateTime\\\": \\\"2016-11-20T04:41:36.000+01:00\\\", \\n    \\\"Quantity\\\": 9.9, \\n    \\\"StartDateTime\\\": \\\"2016-10-20T05:41:36.000+02:00\\\", \\n    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02e07b11cff\\\", \\n    \\\"SubscriptionNumber\\\": \\\"S_1476934895501\\\", \\n    \\\"UOM\\\": \\\"Each\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/usage\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e02e07991cfc\\\", \\n    \\\"AccountNumber\\\": \\\"AN_1476934895501\\\", \\n    \\\"ChargeId\\\": \\\"2c93808457d787030157e02e07cc1d04\\\", \\n    \\\"ChargeNumber\\\": \\\"C-00000001\\\", \\n    \\\"Description\\\": \\\"this is desc\\\", \\n    \\\"EndDateTime\\\": \\\"2016-11-20T04:41:36.000+01:00\\\", \\n    \\\"Quantity\\\": 9.9, \\n    \\\"StartDateTime\\\": \\\"2016-10-20T05:41:36.000+02:00\\\", \\n    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02e07b11cff\\\", \\n    \\\"SubscriptionNumber\\\": \\\"S_1476934895501\\\", \\n    \\\"UOM\\\": \\\"Each\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/object/usage\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/usage\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e02e07991cfc\\\", \\n    \\\"AccountNumber\\\": \\\"AN_1476934895501\\\", \\n    \\\"ChargeId\\\": \\\"2c93808457d787030157e02e07cc1d04\\\", \\n    \\\"ChargeNumber\\\": \\\"C-00000001\\\", \\n    \\\"Description\\\": \\\"this is desc\\\", \\n    \\\"EndDateTime\\\": \\\"2016-11-20T04:41:36.000+01:00\\\", \\n    \\\"Quantity\\\": 9.9, \\n    \\\"StartDateTime\\\": \\\"2016-10-20T05:41:36.000+02:00\\\", \\n    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02e07b11cff\\\", \\n    \\\"SubscriptionNumber\\\": \\\"S_1476934895501\\\", \\n    \\\"UOM\\\": \\\"Each\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/usage\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"AccountId\\\": \\\"2c93808457d787030157e02e07991cfc\\\", \\n    \\\"AccountNumber\\\": \\\"AN_1476934895501\\\", \\n    \\\"ChargeId\\\": \\\"2c93808457d787030157e02e07cc1d04\\\", \\n    \\\"ChargeNumber\\\": \\\"C-00000001\\\", \\n    \\\"Description\\\": \\\"this is desc\\\", \\n    \\\"EndDateTime\\\": \\\"2016-11-20T04:41:36.000+01:00\\\", \\n    \\\"Quantity\\\": 9.9, \\n    \\\"StartDateTime\\\": \\\"2016-10-20T05:41:36.000+02:00\\\", \\n    \\\"SubscriptionId\\\": \\\"2c93808457d787030157e02e07b11cff\\\", \\n    \\\"SubscriptionNumber\\\": \\\"S_1476934895501\\\", \\n    \\\"UOM\\\": \\\"Each\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/object/usage/{id}": {
      "delete": {
        "description": "",
        "operationId": "Object_DELETEUsage",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyDeleteResponse"
            }
          }
        },
        "summary": "CRUD: Delete Usage",
        "tags": [
          "Usage"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/usage/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/usage/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/usage/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/object/usage/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/usage/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/usage/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "",
        "operationId": "Object_GETUsage",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object fields to return",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "AccountId": "2c93808457d787030157e02e07991cfc",
                "AccountNumber": "AN_1476934895501",
                "ChargeId": "2c93808457d787030157e02e07cc1d04",
                "CreatedById": "2c93808457d787030157e02df0221b7c",
                "CreatedDate": "2016-10-20T05:41:36.000+02:00",
                "EndDateTime": "2016-11-20T04:41:36.000+01:00",
                "Id": "2c93808457d787030157e02e0a301d0a",
                "Quantity": 9.9,
                "RbeStatus": "Pending",
                "SourceType": "API",
                "StartDateTime": "2016-10-20T05:41:36.000+02:00",
                "SubmissionDateTime": "2016-10-20T05:41:36.000+02:00",
                "SubscriptionId": "2c93808457d787030157e02e07b11cff",
                "UOM": "Each",
                "UpdatedById": "2c93808457d787030157e02df0221b7c",
                "UpdatedDate": "2016-10-20T05:41:36.000+02:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyGetUsage"
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "done": true,
                "records": {},
                "size": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/ProxyNoDataResponse"
            }
          }
        },
        "summary": "CRUD: Retrieve Usage",
        "tags": [
          "Usage"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/object/usage/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/usage/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/usage/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/object/usage/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/usage/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/usage/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "",
        "operationId": "Object_PUTUsage",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Object id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "ModifyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyModifyUsage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProxyCreateOrModifyResponse"
            }
          }
        },
        "summary": "CRUD: Update Usage",
        "tags": [
          "Usage"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/object/usage/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/object/usage/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/object/usage/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/object/usage/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/object/usage/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/object/usage/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/operations/billing-preview": {
      "post": {
        "description": "**Note:** The Billing Preview feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\n\nGenerates a preview of future invoice items for one customer account. Use the BillingPreview call to calculate how much a single customer will be invoiced from the most recent invoice to a specific end of term date in the future.\n\nAdditionally, you can use the BillingPreview service to access real-time data on an individual customer's usage consumption. \n\nThe BillingPreview call does not calculate taxes for charges in the subscription.\n\nIf you have the Advanced AR Settlement feature enabled, you can also generate a preview of future credit memo items for one customer account. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n",
        "operationId": "POST_BillingPreview",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostBillingPreviewParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "402890b75972406c0159724cd4d00011",
                "creditMemoItems": [
                  {
                    "amount": 50,
                    "chargeDate": "2017-01-06 16:38:26",
                    "chargeNumber": "C-00000002",
                    "chargeType": "Recurring",
                    "comment": "",
                    "id": "cf6326638f3c4ddda3722734aebd7ba7",
                    "processingType": "Charge",
                    "quantity": 1,
                    "ratePlanChargeId": "402890b75972406c0159724e2ef10032",
                    "serviceEndDate": "2017-05-31",
                    "serviceStartDate": "2017-05-01",
                    "sku": "SKU-00000001",
                    "skuName": "negative_charge",
                    "subscriptionId": "402890b75972406c0159724e2e810029",
                    "subscriptionNumber": "A-S00000001",
                    "unitOfMeasure": "License"
                  }
                ],
                "invoiceItems": [
                  {
                    "chargeAmount": 100,
                    "chargeDate": "2017-01-06 16:38:26",
                    "chargeDescription": "",
                    "chargeId": "402890b75972406c0159724e2eec0031",
                    "chargeName": "positive-charge",
                    "chargeNumber": "C-00000001",
                    "chargeType": "Recurring",
                    "id": "93ac165212294c1a8bef1c8f99121461",
                    "processingType": "Charge",
                    "productName": "FA-freshAir",
                    "quantity": 1,
                    "serviceEndDate": "2017-05-31",
                    "serviceStartDate": "2017-05-01",
                    "subscriptionId": "402890b75972406c0159724e2e810029",
                    "subscriptionName": "A-S00000001",
                    "subscriptionNumber": "A-S00000001",
                    "taxAmount": 0,
                    "unitOfMeasure": "License"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/BillingPreviewResult"
            }
          }
        },
        "summary": "Create billing preview",
        "tags": [
          "Operations"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountId\": \"402890b75972406c0159724cd4d00011\", \n    \"assumeRenewal\": \"None\", \n    \"chargeTypeToExclude\": \"\", \n    \"includingEvergreenSubscription\": \"true\", \n    \"targetDate\": \"2017-05-10\"\n}' \"https://rest.zuora.com//v1/operations/billing-preview\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/operations/billing-preview');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountId\": \"402890b75972406c0159724cd4d00011\", \n    \"assumeRenewal\": \"None\", \n    \"chargeTypeToExclude\": \"\", \n    \"includingEvergreenSubscription\": \"true\", \n    \"targetDate\": \"2017-05-10\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountId\\\": \\\"402890b75972406c0159724cd4d00011\\\", \\n    \\\"assumeRenewal\\\": \\\"None\\\", \\n    \\\"chargeTypeToExclude\\\": \\\"\\\", \\n    \\\"includingEvergreenSubscription\\\": \\\"true\\\", \\n    \\\"targetDate\\\": \\\"2017-05-10\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/operations/billing-preview\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountId\\\": \\\"402890b75972406c0159724cd4d00011\\\", \\n    \\\"assumeRenewal\\\": \\\"None\\\", \\n    \\\"chargeTypeToExclude\\\": \\\"\\\", \\n    \\\"includingEvergreenSubscription\\\": \\\"true\\\", \\n    \\\"targetDate\\\": \\\"2017-05-10\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/operations/billing-preview\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/operations/billing-preview\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountId\\\": \\\"402890b75972406c0159724cd4d00011\\\", \\n    \\\"assumeRenewal\\\": \\\"None\\\", \\n    \\\"chargeTypeToExclude\\\": \\\"\\\", \\n    \\\"includingEvergreenSubscription\\\": \\\"true\\\", \\n    \\\"targetDate\\\": \\\"2017-05-10\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/operations/billing-preview\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountId\\\": \\\"402890b75972406c0159724cd4d00011\\\", \\n    \\\"assumeRenewal\\\": \\\"None\\\", \\n    \\\"chargeTypeToExclude\\\": \\\"\\\", \\n    \\\"includingEvergreenSubscription\\\": \\\"true\\\", \\n    \\\"targetDate\\\": \\\"2017-05-10\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/operations/invoice-collect": {
      "post": {
        "description": "Generates and posts invoices and credit memos and collects payments for posted invoices. Credit memos are only available if you have the Advanced AR Settlement feature enabled and negative charges exist. Credit memos will not be applied to invoices. If draft invoices and credit memos exist when you run this operation, this operation will post the invoices and credit memos. Note that draft credit memos created from an invoice or a product rate plan charge will not be posted.\n\nYou can use this operation to generate invoices and collect payments on the posted invoices,\n or else simply collect payment on a specified existing\ninvoice. The customer's default payment method is used, and the full\namount due is collected. The operation depends on the parameters you\nspecify.\n\n- To generate one or more new invoices for that customer and collect\npayment on the generated invoice(s), leave the **invoiceId** field empty. \n\n- To collect payment on an existing invoice, specify the invoice ID. \n\n\nThe operation is atomic; if any part is unsuccessful, the entire\noperation is rolled back.\n\n\n## Notes\n\nTimeouts may occur when using this method on an account that\nhas an extremely high number of subscriptions.\n",
        "operationId": "POST_TransactionInvoicePayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "\nThe minor version of the Zuora REST API. \n\nYou need to set this parameter if you use the following fields:\n* documentDate\n* targetDate            \n\nIf you have the Advanced AR Settlement feature enabled, you need to specify this parameter. Otherwise, an error is returned.\n\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTInvoiceCollectType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amountCollected": 801.73,
                "creditMemos": [
                  {
                    "id": "402890555a7e9791015a879f064a0054",
                    "memoAmount": 801.73,
                    "memoNumber": "CM00000012"
                  }
                ],
                "invoices": [
                  {
                    "invoiceAmount": 801.73,
                    "invoiceId": "4028925a4cb74ec9014cb7540988002e",
                    "invoiceNumber": "INV00000091"
                  }
                ],
                "paymentId": "402892053e100406013e1024ab7c00e3",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTInvoiceCollectResponseType"
            }
          }
        },
        "summary": "Invoice and collect",
        "tags": [
          "Operations"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountKey\": \"4028925a4cb74ec9014cb7520fc00005\", \n    \"invoiceId\": \"4028925a4cb74ec9014cb7540988002e\", \n    \"paymentGateway\": \"TestGateway\"\n}' \"https://rest.zuora.com//v1/operations/invoice-collect\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/operations/invoice-collect');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountKey\": \"4028925a4cb74ec9014cb7520fc00005\", \n    \"invoiceId\": \"4028925a4cb74ec9014cb7540988002e\", \n    \"paymentGateway\": \"TestGateway\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountKey\\\": \\\"4028925a4cb74ec9014cb7520fc00005\\\", \\n    \\\"invoiceId\\\": \\\"4028925a4cb74ec9014cb7540988002e\\\", \\n    \\\"paymentGateway\\\": \\\"TestGateway\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/operations/invoice-collect\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountKey\\\": \\\"4028925a4cb74ec9014cb7520fc00005\\\", \\n    \\\"invoiceId\\\": \\\"4028925a4cb74ec9014cb7540988002e\\\", \\n    \\\"paymentGateway\\\": \\\"TestGateway\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/operations/invoice-collect\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/operations/invoice-collect\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountKey\\\": \\\"4028925a4cb74ec9014cb7520fc00005\\\", \\n    \\\"invoiceId\\\": \\\"4028925a4cb74ec9014cb7540988002e\\\", \\n    \\\"paymentGateway\\\": \\\"TestGateway\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/operations/invoice-collect\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountKey\\\": \\\"4028925a4cb74ec9014cb7520fc00005\\\", \\n    \\\"invoiceId\\\": \\\"4028925a4cb74ec9014cb7540988002e\\\", \\n    \\\"paymentGateway\\\": \\\"TestGateway\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/orders": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\n\nRetrieves information about all orders in your tenant. By default, it returns the first page of the orders. \n",
        "operationId": "GET_AllOrders",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "default": 1,
            "description": "The page number of the orders retrieved. \n",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The date type to filter on.This field value can be orderDate or updatedDate. Default is orderDate.\n",
            "in": "query",
            "name": "dateFilterOption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The result will only contain the orders with the date of dateFilterOption later than or equal to this date.\n",
            "format": "date",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The result will only contains orders with the date of dateFilterOption earlier than or equal to this date.\n",
            "format": "date",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "nextPage": "https://rest.zuora.com/v1/orders?page=2",
                "orders": [
                  {
                    "createdBy": "8a8081085d834928015d837c3c4e0037",
                    "createdDate": "2017-08-01",
                    "currency": "USD",
                    "customFields": {},
                    "existingAccountNumber": "A-00004",
                    "orderDate": "2017-01-01",
                    "orderNumber": "OR-00010",
                    "status": "Completed",
                    "subscriptions": [
                      {
                        "customFields": {},
                        "newVersion": 1,
                        "orderActions": [
                          {
                            "customFields": {},
                            "orderMetrics": [
                              {
                                "chargeNumber": "C-00000011",
                                "mrr": [
                                  {
                                    "amount": 80,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-03-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ],
                                "originRatePlanId": "8a8081085d834928015da0c506091e5c",
                                "productRatePlanChargeId": "8a8081085d834928015d9c55d45f0aac",
                                "productRatePlanId": "8a8081085d834928015da0c506041e59",
                                "quantity": [
                                  {
                                    "amount": 40,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-03-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1
                                  }
                                ],
                                "tcb": [
                                  {
                                    "amount": 800,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-03-01",
                                    "subscriptionOwner": "A-00004",
                                    "tax": 0,
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ],
                                "tcv": [
                                  {
                                    "amount": 800,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-03-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ]
                              }
                            ],
                            "sequence": 1,
                            "triggerDates": [
                              {
                                "name": "ServiceActivation",
                                "triggerDate": "2017-03-01"
                              },
                              {
                                "name": "CustomerAcceptance",
                                "triggerDate": "2017-03-01"
                              }
                            ],
                            "type": "UpdateProduct",
                            "updateProduct": {
                              "chargeUpdates": [
                                {
                                  "billing": {},
                                  "chargeNumber": "C-00000011",
                                  "customFields": {},
                                  "effectiveDate": {
                                    "specificTriggerDate": "2017-03-01",
                                    "triggerEvent": "SpecificDate"
                                  },
                                  "newRatePlanChargeId": "8a8081085d834928015da0c506681e60",
                                  "pricing": {
                                    "recurringPerUnit": {
                                      "quantity": 50
                                    }
                                  },
                                  "uniqueToken": "Base Product Charge"
                                }
                              ],
                              "customFields": {},
                              "newRatePlanId": "8a8081085d834928015da0c506091e5c",
                              "specificUpdateDate": "2017-03-01",
                              "uniqueToken": "Base Product"
                            }
                          }
                        ],
                        "subscriptionNumber": "S-00001"
                      }
                    ],
                    "updatedBy": "8a8081085d834928015d837c3c4e0037",
                    "updatedDate": "2017-08-01"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetAllOrdersResponseType"
            }
          }
        },
        "summary": "Get all orders",
        "tags": [
          "Orders"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/orders\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/orders');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/orders\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/orders\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/orders\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/orders\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/orders/invoiceOwner/{accountNumber}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\nRetrieves the detailed information about all orders for a specified invoice owner.\n",
        "operationId": "GET_OrdersByInvoiceOwner",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The invoice owner account number.",
            "format": "string",
            "in": "path",
            "name": "accountNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page number of the orders retrieved. The default is 1.\n",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The date type to filter on. This field value can be orderDate or updatedDate. Default is orderDate.\n",
            "in": "query",
            "name": "dateFilterOption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The result will only contain the orders with the date of dateFilterOption later than or equal to this date.\n",
            "format": "date",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The result will only contain the orders with the date of dateFilterOption earlier than or equal to this date.\n",
            "format": "date",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "orders": [
                  {
                    "createdBy": "8a8081085d834928015d837c3c4e0037",
                    "createdDate": "2017-08-01",
                    "currency": "USD",
                    "customFields": {},
                    "existingAccountNumber": "A-00004",
                    "orderDate": "2017-01-01",
                    "orderNumber": "OR-00010",
                    "status": "Completed",
                    "subscriptions": [
                      {
                        "customFields": {},
                        "newVersion": 1,
                        "orderActions": [
                          {
                            "createSubscription": {
                              "subscribeToRatePlans": [
                                {
                                  "chargeOverrides": [
                                    {
                                      "billing": {},
                                      "chargeNumber": "C-00000011",
                                      "customFields": {},
                                      "endDate": {},
                                      "pricing": {
                                        "recurringPerUnit": {}
                                      },
                                      "productRateplanChargeId": "8a8081085d834928015d9c55d45f0aac",
                                      "startDate": {},
                                      "uniqueToken": "Base Product Charge"
                                    }
                                  ],
                                  "customFields": {},
                                  "newRatePlanId": "8a8081085d834928015da0c506091e5c",
                                  "productRatePlanId": "8a8081085d834928015d9c54e67f0aa9",
                                  "uniqueToken": "Base Product"
                                }
                              ],
                              "terms": {
                                "autoRenew": true,
                                "initialTerm": {
                                  "period": 12,
                                  "periodType": "Month",
                                  "startDate": "2017-01-01",
                                  "termType": "TERMED"
                                },
                                "renewalSetting": "RENEW_WITH_SPECIFIC_TERM",
                                "renewalTerms": [
                                  {
                                    "period": 12,
                                    "periodType": "Month"
                                  }
                                ]
                              }
                            },
                            "customFields": {},
                            "orderMetrics": [
                              {
                                "chargeNumber": "C-00000011",
                                "mrr": [
                                  {
                                    "amount": 20,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-01-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ],
                                "originRatePlanId": "8a8081085d834928015da0c506091e5c",
                                "productRatePlanChargeId": "8a8081085d834928015d9c55d45f0aac",
                                "productRatePlanId": "8a8081085d834928015da0c506041e59",
                                "quantity": [
                                  {
                                    "amount": 10,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-01-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1
                                  }
                                ],
                                "tcb": [
                                  {
                                    "amount": 240,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-01-01",
                                    "subscriptionOwner": "A-00004",
                                    "tax": 0,
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ],
                                "tcv": [
                                  {
                                    "amount": 240,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-01-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ]
                              }
                            ],
                            "sequence": 0,
                            "triggerDates": [
                              {
                                "name": "ServiceActivation",
                                "triggerDate": "2017-01-01"
                              },
                              {
                                "name": "CustomerAcceptance",
                                "triggerDate": "2017-01-01"
                              }
                            ],
                            "type": "CreateSubscription"
                          }
                        ],
                        "subscriptionNumber": "S-00001"
                      }
                    ],
                    "updatedBy": "8a8081085d834928015d837c3c4e0037",
                    "updatedDate": "2017-08-01"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetOrdersResponse"
            }
          }
        },
        "summary": "Get orders by invoice owner",
        "tags": [
          "Orders"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/orders/invoiceOwner/{accountNumber}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/orders/invoiceOwner/{accountNumber}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/orders/invoiceOwner/{accountNumber}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/orders/invoiceOwner/{accountNumber}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/orders/invoiceOwner/{accountNumber}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/orders/invoiceOwner/{accountNumber}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/orders/subscription/{subscriptionNumber}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\nRetrieves the detailed information about all orders for a specified subscription. Any orders containing the changes on the specified subscription are returned.\n",
        "operationId": "GET_OrdersBySubscriptionNumber",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The subscription number.",
            "in": "path",
            "name": "subscriptionNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page number of the orders retrieved. The default is '1'.\n",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The date type to filter on. This field value can be 'orderDate' or 'updatedDate'. Default is orderDate.\n",
            "in": "query",
            "name": "dateFilterOption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The result will only contain the orders with the date of 'dateFilterOption' later than or equal to this date.\n",
            "format": "date",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The result will only contain the orders with the date of 'dateFilterOption' earlier than or equal to this date.\n",
            "format": "date",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "orders": [
                  {
                    "createdBy": "8a8081085d834928015d837c3c4e0037",
                    "createdDate": "2017-08-01",
                    "currency": "USD",
                    "customFields": {},
                    "existingAccountNumber": "A-00004",
                    "orderDate": "2017-01-01",
                    "orderNumber": "OR-00010",
                    "status": "Completed",
                    "subscriptions": [
                      {
                        "customFields": {},
                        "newVersion": 1,
                        "orderActions": [
                          {
                            "customFields": {},
                            "orderMetrics": [
                              {
                                "chargeNumber": "C-00000011",
                                "mrr": [
                                  {
                                    "amount": 80,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-03-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ],
                                "originRatePlanId": "8a8081085d834928015da0c506091e5c",
                                "productRatePlanChargeId": "8a8081085d834928015d9c55d45f0aac",
                                "productRatePlanId": "8a8081085d834928015da0c506041e59",
                                "quantity": [
                                  {
                                    "amount": 40,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-03-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1
                                  }
                                ],
                                "tcb": [
                                  {
                                    "amount": 800,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-03-01",
                                    "subscriptionOwner": "A-00004",
                                    "tax": 0,
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ],
                                "tcv": [
                                  {
                                    "amount": 800,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00004",
                                    "startDate": "2017-03-01",
                                    "subscriptionOwner": "A-00004",
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ]
                              }
                            ],
                            "sequence": 1,
                            "triggerDates": [
                              {
                                "name": "ServiceActivation",
                                "triggerDate": "2017-03-01"
                              },
                              {
                                "name": "CustomerAcceptance",
                                "triggerDate": "2017-03-01"
                              }
                            ],
                            "type": "UpdateProduct",
                            "updateProduct": {
                              "chargeUpdates": [
                                {
                                  "billing": {},
                                  "chargeNumber": "C-00000011",
                                  "customFields": {},
                                  "effectiveDate": {
                                    "specificTriggerDate": "2017-03-01",
                                    "triggerEvent": "SpecificDate"
                                  },
                                  "newRatePlanChargeId": "8a8081085d834928015da0c506681e60",
                                  "pricing": {
                                    "recurringPerUnit": {
                                      "quantity": 50
                                    }
                                  },
                                  "uniqueToken": "Base Product Charge"
                                }
                              ],
                              "customFields": {},
                              "newRatePlanId": "8a8081085d834928015da0c506091e5c",
                              "specificUpdateDate": "2017-03-01",
                              "uniqueToken": "Base Product"
                            }
                          }
                        ],
                        "subscriptionNumber": "S-00001"
                      }
                    ],
                    "updatedBy": "8a8081085d834928015d837c3c4e0037",
                    "updatedDate": "2017-08-01"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetOrdersResponse"
            }
          }
        },
        "summary": "Get orders by subscription number",
        "tags": [
          "Orders"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/orders/subscription/{subscriptionNumber}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/orders/subscription/{subscriptionNumber}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/orders/subscription/{subscriptionNumber}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/orders/subscription/{subscriptionNumber}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/orders/subscription/{subscriptionNumber}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/orders/subscription/{subscriptionNumber}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/orders/subscriptionOwner/{accountNumber}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\nRetrieves the detailed information about all orders for a specified subscription owner. Any orders containing the changes on the subscriptions owned by this account are returned.\n",
        "operationId": "GET_OrdersBySubscriptionOwner",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The subscription owner account number.",
            "format": "string",
            "in": "path",
            "name": "accountNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page number of the orders retrieved. The default is 1.\n",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The date type to filter on.\nThis field value can be 'orderDate' or 'updatedDate'. Default is orderDate.\n",
            "in": "query",
            "name": "dateFilterOption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The result will only contain the orders with the date of 'dateFilterOption' later than or equal to this date.\n",
            "format": "date",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The result will only contain the orders with the date of 'dateFilterOption' earlier than or equal to this date.\n",
            "format": "date",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "orders": [
                  {
                    "createdBy": "8a8081085d834928015d837c3c4e0037",
                    "createdDate": "2017-08-01",
                    "currency": "USD",
                    "customFields": {},
                    "existingAccountNumber": "A-00002",
                    "orderDate": "2017-01-01",
                    "orderNumber": "OR-00006",
                    "status": "Completed",
                    "subscriptions": [
                      {
                        "baseVersion": 1,
                        "customFields": {},
                        "newVersion": 2,
                        "orderActions": [
                          {
                            "cancelSubscription": {
                              "cancellationEffectiveDate": "2017-01-01",
                              "cancellationPolicy": "SpecificDate"
                            },
                            "customFields": {},
                            "orderMetrics": [
                              {
                                "chargeNumber": "C-00000003",
                                "mrr": [
                                  {
                                    "amount": -20,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00002",
                                    "startDate": "2017-01-01",
                                    "subscriptionOwner": "A-00002",
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ],
                                "originRatePlanId": "8a8081085d834928015d9cfbada91ba7",
                                "productRatePlanChargeId": "8a8081085d834928015d9c55d45f0aac",
                                "productRatePlanId": "8a8081085d834928015d9cfbada61ba4",
                                "quantity": [
                                  {
                                    "amount": -10,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00002",
                                    "startDate": "2017-01-01",
                                    "subscriptionOwner": "A-00002",
                                    "termNumber": 1
                                  }
                                ],
                                "tcb": [
                                  {
                                    "amount": -240,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00002",
                                    "startDate": "2017-01-01",
                                    "subscriptionOwner": "A-00002",
                                    "tax": 0,
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ],
                                "tcv": [
                                  {
                                    "amount": -240,
                                    "endDate": "2017-12-31",
                                    "invoiceOwner": "A-00002",
                                    "startDate": "2017-01-01",
                                    "subscriptionOwner": "A-00002",
                                    "termNumber": 1,
                                    "type": "Regular"
                                  }
                                ]
                              }
                            ],
                            "sequence": 0,
                            "triggerDates": [
                              {
                                "name": "ServiceActivation",
                                "triggerDate": "2017-01-01"
                              },
                              {
                                "name": "CustomerAcceptance",
                                "triggerDate": "2017-01-01"
                              }
                            ],
                            "type": "CancelSubscription"
                          }
                        ],
                        "subscriptionNumber": "403_RampSubscription"
                      }
                    ],
                    "updatedBy": "8a8081085d834928015d837c3c4e0037",
                    "updatedDate": "2017-08-01"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetOrdersResponse"
            }
          }
        },
        "summary": "Get orders by subscription owner",
        "tags": [
          "Orders"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/orders/subscriptionOwner/{accountNumber}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/orders/subscriptionOwner/{accountNumber}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/orders/subscriptionOwner/{accountNumber}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/orders/subscriptionOwner/{accountNumber}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/orders/subscriptionOwner/{accountNumber}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/orders/subscriptionOwner/{accountNumber}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/orders/{orderNumber}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\n\nRetrieves the detailed information about a specified order.\n",
        "operationId": "GET_Order",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The order number to be retrieved.",
            "format": "string",
            "in": "path",
            "name": "orderNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "order": {
                  "createdBy": "8a8081085d834928015d837c3c4e0037",
                  "createdDate": "2017-08-01",
                  "currency": "USD",
                  "customFields": {},
                  "existingAccountNumber": "A-00001",
                  "orderDate": "2017-01-01",
                  "orderNumber": "OR-00003",
                  "status": "Completed",
                  "subscriptions": [
                    {
                      "baseVersion": 2,
                      "customFields": {},
                      "newVersion": 3,
                      "orderActions": [
                        {
                          "customFields": {},
                          "orderMetrics": [
                            {
                              "chargeNumber": "C-00000002",
                              "mrr": [
                                {
                                  "amount": 80,
                                  "endDate": "2017-12-31",
                                  "invoiceOwner": "A-00001",
                                  "startDate": "2017-01-01",
                                  "subscriptionOwner": "A-00001",
                                  "termNumber": 1,
                                  "type": "Regular"
                                }
                              ],
                              "originRatePlanId": "8a8081085d834928015d9ce909ff1aec",
                              "productRatePlanChargeId": "8a8081085d834928015d9ce6ae821ad1",
                              "productRatePlanId": "8a8081085d834928015d9ce909f91ae9",
                              "quantity": [
                                {
                                  "amount": 80,
                                  "endDate": "2017-12-31",
                                  "invoiceOwner": "A-00001",
                                  "startDate": "2017-01-01",
                                  "subscriptionOwner": "A-00001",
                                  "termNumber": 1
                                }
                              ],
                              "tcb": [
                                {
                                  "amount": 960,
                                  "endDate": "2017-12-31",
                                  "invoiceOwner": "A-00001",
                                  "startDate": "2017-01-01",
                                  "subscriptionOwner": "A-00001",
                                  "tax": 0,
                                  "termNumber": 1,
                                  "type": "Regular"
                                }
                              ],
                              "tcv": [
                                {
                                  "amount": 960,
                                  "endDate": "2017-12-31",
                                  "invoiceOwner": "A-00001",
                                  "startDate": "2017-01-01",
                                  "subscriptionOwner": "A-00001",
                                  "termNumber": 1,
                                  "type": "Regular"
                                }
                              ]
                            }
                          ],
                          "sequence": 0,
                          "triggerDates": [
                            {
                              "name": "ServiceActivation",
                              "triggerDate": "2017-01-01"
                            },
                            {
                              "name": "CustomerAcceptance",
                              "triggerDate": "2017-01-01"
                            }
                          ],
                          "type": "UpdateProduct",
                          "updateProduct": {
                            "chargeUpdates": [
                              {
                                "billing": {},
                                "chargeNumber": "C-00000002",
                                "customFields": {},
                                "effectiveDate": {},
                                "newRatePlanChargeId": "8a8081085d834928015d9cee9c151b22",
                                "pricing": {
                                  "recurringPerUnit": {
                                    "quantity": 100
                                  }
                                }
                              }
                            ],
                            "customFields": {},
                            "newRatePlanId": "8a8081085d834928015d9cee9bd21b1e",
                            "ratePlanId": "8a8081085d834928015d9ce909ff1aec"
                          }
                        }
                      ],
                      "subscriptionNumber": "402_RampSubscription"
                    }
                  ],
                  "updatedBy": "8a8081085d834928015d837c3c4e0037",
                  "updatedDate": "2017-08-01"
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetOrderResponse"
            }
          }
        },
        "summary": "Get an order",
        "tags": [
          "Orders"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/orders/{orderNumber}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/orders/{orderNumber}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/orders/{orderNumber}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/orders/{orderNumber}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/orders/{orderNumber}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/orders/{orderNumber}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/orders/{orderNumber}/billingInfo": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\nRetrieves the billing information about a specified order. The information includes the billed and unbilled amount of the order.\n",
        "operationId": "GET_OrderBillingInfo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The order number.",
            "in": "path",
            "name": "orderNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Billing states of the order will be calculated as of this date. Invoices with the invoice date later than this date will not be counted into the billed amount. The default value is today.",
            "format": "date",
            "in": "query",
            "name": "asOfDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "billingInfo": {
                  "billedAmount": 160,
                  "currency": "USD",
                  "tcb": 960,
                  "unbilledAmount": 800
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetOrderBillingInfoResponseType"
            }
          }
        },
        "summary": "Get billing information for order",
        "tags": [
          "Orders"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/orders/{orderNumber}/billingInfo\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/orders/{orderNumber}/billingInfo');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/orders/{orderNumber}/billingInfo\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/orders/{orderNumber}/billingInfo\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/orders/{orderNumber}/billingInfo\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/orders/{orderNumber}/billingInfo\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/orders/{orderNumber}/evergreenMetrics/{subscriptionNumber}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\n\nRetrieves the metrics of an evergreen subscription in a specified order.\n",
        "operationId": "GET_OrderMetricsforEvergreenSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The order number.\n",
            "format": "string",
            "in": "path",
            "name": "orderNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "The subscription number you want to get the metrics for.\n",
            "in": "path",
            "name": "subscriptionNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "The start date of the date range for which you want to get the metrics. The date must be in yyyy-mm-dd format. For example, 2017-12-03.\n",
            "format": "date",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "The end date of the date range for which you want to get the metrics. The date must be in yyyy-mm-dd format. For example, 2017-12-03.\n",
            "format": "date",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "order": {
                  "createdBy": "8a8081085d834928015d837c3c4e0037",
                  "createdDate": "2017-08-02",
                  "currency": "USD",
                  "customFields": {},
                  "existingAccountNumber": "A-00002",
                  "orderDate": "2017-01-01",
                  "orderNumber": "OR-00015",
                  "status": "Completed",
                  "subscriptions": [
                    {
                      "customFields": {},
                      "newVersion": 1,
                      "orderActions": [
                        {
                          "createSubscription": {
                            "subscribeToRatePlans": [
                              {
                                "chargeOverrides": [
                                  {
                                    "billing": {},
                                    "chargeNumber": "C-00000015",
                                    "customFields": {},
                                    "endDate": {},
                                    "pricing": {
                                      "recurringPerUnit": {}
                                    },
                                    "productRateplanChargeId": "8a8081085d834928015d9c55d45f0aac",
                                    "startDate": {},
                                    "uniqueToken": "Sugar-free Membership Monthly Charge"
                                  }
                                ],
                                "customFields": {},
                                "newRatePlanId": "8a8081085d834928015da1e36fdd2061",
                                "productRatePlanId": "8a8081085d834928015d9c54e67f0aa9",
                                "uniqueToken": "Sugar-free Monthly"
                              }
                            ],
                            "terms": {
                              "initialTerm": {
                                "startDate": "2017-01-01",
                                "termType": "EVERGREEN"
                              },
                              "renewalTerms": [
                                {}
                              ]
                            }
                          },
                          "customFields": {},
                          "orderMetrics": [
                            {
                              "chargeNumber": "C-00000015",
                              "mrr": [
                                {
                                  "amount": 20,
                                  "endDate": "2017-02-28",
                                  "invoiceOwner": "A-00002",
                                  "startDate": "2017-01-07",
                                  "subscriptionOwner": "A-00002",
                                  "termNumber": 1,
                                  "type": "Regular"
                                }
                              ],
                              "originRatePlanId": "8a8081085d834928015da1e36fdd2061",
                              "productRatePlanChargeId": "8a8081085d834928015d9c55d45f0aac",
                              "productRatePlanId": "8a8081085d834928015da1e36fd9205e",
                              "quantity": [
                                {
                                  "amount": 10,
                                  "endDate": "2017-02-28",
                                  "invoiceOwner": "A-00002",
                                  "startDate": "2017-01-07",
                                  "subscriptionOwner": "A-00002",
                                  "termNumber": 1
                                }
                              ],
                              "tcb": [
                                {
                                  "amount": 36.129032258,
                                  "endDate": "2017-02-28",
                                  "invoiceOwner": "A-00002",
                                  "startDate": "2017-01-07",
                                  "subscriptionOwner": "A-00002",
                                  "tax": 0,
                                  "termNumber": 1,
                                  "type": "Regular"
                                }
                              ],
                              "tcv": [
                                {
                                  "amount": 35.714285714,
                                  "endDate": "2017-02-28",
                                  "invoiceOwner": "A-00002",
                                  "startDate": "2017-01-07",
                                  "subscriptionOwner": "A-00002",
                                  "termNumber": 1,
                                  "type": "Regular"
                                }
                              ]
                            }
                          ],
                          "sequence": 0,
                          "triggerDates": [
                            {
                              "name": "ServiceActivation",
                              "triggerDate": "2017-01-01"
                            },
                            {
                              "name": "CustomerAcceptance",
                              "triggerDate": "2017-01-01"
                            }
                          ],
                          "type": "CreateSubscription"
                        }
                      ],
                      "subscriptionNumber": "S-00004"
                    }
                  ],
                  "updatedBy": "8a8081085d834928015d837c3c4e0037",
                  "updatedDate": "2017-08-02"
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetOrderResponse"
            }
          }
        },
        "summary": "Get order metrics for evergreen subscription",
        "tags": [
          "Orders"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/orders/{orderNumber}/evergreenMetrics/{subscriptionNumber}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/orders/{orderNumber}/evergreenMetrics/{subscriptionNumber}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/orders/{orderNumber}/evergreenMetrics/{subscriptionNumber}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/orders/{orderNumber}/evergreenMetrics/{subscriptionNumber}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/orders/{orderNumber}/evergreenMetrics/{subscriptionNumber}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/orders/{orderNumber}/evergreenMetrics/{subscriptionNumber}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/orders/{orderNumber}/ratedResults": {
      "get": {
        "description": "**Note:** This feature is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n\nRetrieves the rated results of all the subscriptions in the specified order.\n",
        "operationId": "GET_OrderRatedResult",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The order number.",
            "in": "path",
            "name": "orderNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "orderRatedResult": {
                  "orderNumber": "OR-00009",
                  "subscriptionRatedResults": [
                    {
                      "chargeRatedResults": [
                        {
                          "chargeNumber": "C-00000006",
                          "ratedItems": [
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-01-31",
                              "serviceStartDate": "2017-01-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-02-28",
                              "serviceStartDate": "2017-02-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-03-31",
                              "serviceStartDate": "2017-03-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-04-30",
                              "serviceStartDate": "2017-04-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-05-31",
                              "serviceStartDate": "2017-05-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-06-30",
                              "serviceStartDate": "2017-06-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-07-31",
                              "serviceStartDate": "2017-07-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-08-31",
                              "serviceStartDate": "2017-08-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-09-30",
                              "serviceStartDate": "2017-09-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-10-31",
                              "serviceStartDate": "2017-10-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-11-30",
                              "serviceStartDate": "2017-11-01"
                            },
                            {
                              "changedAmount": 20,
                              "serviceEndDate": "2017-12-31",
                              "serviceStartDate": "2017-12-01"
                            }
                          ]
                        }
                      ],
                      "subscriptionNumber": "A-S00000003"
                    }
                  ]
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GetOrderRatedResultResponseType"
            }
          }
        },
        "summary": "Get rated result for order",
        "tags": [
          "Orders"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/orders/{orderNumber}/ratedResults\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/orders/{orderNumber}/ratedResults');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/orders/{orderNumber}/ratedResults\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/orders/{orderNumber}/ratedResults\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/orders/{orderNumber}/ratedResults\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/orders/{orderNumber}/ratedResults\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payment-methods/credit-cards": {
      "post": {
        "description": "This REST API reference describes how to create a new credit card\npayment method for a customer account.\n\n## Notes\n\nThis API call is CORS Enabled. Use client-side JavaScript to invoke the call. \n",
        "operationId": "POST_PaymentMethods",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTPaymentMethodType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "paymentMethodId": "2c92c8f83dcbd8b1013dcce1d6a60",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTPaymentMethodResponseType"
            }
          }
        },
        "summary": "Create payment method",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountKey\": \"A00001115\", \n    \"cardHolderInfo\": {\n        \"addressLine1\": \"77 Fallon Glen\", \n        \"addressLine2\": \"\", \n        \"cardHolderName\": \"Bill Thiebault\", \n        \"city\": \"Fremont\", \n        \"country\": \"USA\", \n        \"email\": \"bill@testaddress.com\", \n        \"phone\": \"4155551234\", \n        \"state\": \"California\", \n        \"zipCode\": \"94020\"\n    }, \n    \"creditCardNumber\": \"1111222233334444\", \n    \"creditCardType\": \"Discover\", \n    \"defaultPaymentMethod\": false, \n    \"expirationMonth\": \"10\", \n    \"expirationYear\": \"2015\", \n    \"numConsecutiveFailures\": 3, \n    \"securityCode\": \"123\"\n}' \"https://rest.zuora.com//v1/payment-methods/credit-cards\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payment-methods/credit-cards');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountKey\": \"A00001115\", \n    \"cardHolderInfo\": {\n        \"addressLine1\": \"77 Fallon Glen\", \n        \"addressLine2\": \"\", \n        \"cardHolderName\": \"Bill Thiebault\", \n        \"city\": \"Fremont\", \n        \"country\": \"USA\", \n        \"email\": \"bill@testaddress.com\", \n        \"phone\": \"4155551234\", \n        \"state\": \"California\", \n        \"zipCode\": \"94020\"\n    }, \n    \"creditCardNumber\": \"1111222233334444\", \n    \"creditCardType\": \"Discover\", \n    \"defaultPaymentMethod\": false, \n    \"expirationMonth\": \"10\", \n    \"expirationYear\": \"2015\", \n    \"numConsecutiveFailures\": 3, \n    \"securityCode\": \"123\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountKey\\\": \\\"A00001115\\\", \\n    \\\"cardHolderInfo\\\": {\\n        \\\"addressLine1\\\": \\\"77 Fallon Glen\\\", \\n        \\\"addressLine2\\\": \\\"\\\", \\n        \\\"cardHolderName\\\": \\\"Bill Thiebault\\\", \\n        \\\"city\\\": \\\"Fremont\\\", \\n        \\\"country\\\": \\\"USA\\\", \\n        \\\"email\\\": \\\"bill@testaddress.com\\\", \\n        \\\"phone\\\": \\\"4155551234\\\", \\n        \\\"state\\\": \\\"California\\\", \\n        \\\"zipCode\\\": \\\"94020\\\"\\n    }, \\n    \\\"creditCardNumber\\\": \\\"1111222233334444\\\", \\n    \\\"creditCardType\\\": \\\"Discover\\\", \\n    \\\"defaultPaymentMethod\\\": false, \\n    \\\"expirationMonth\\\": \\\"10\\\", \\n    \\\"expirationYear\\\": \\\"2015\\\", \\n    \\\"numConsecutiveFailures\\\": 3, \\n    \\\"securityCode\\\": \\\"123\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payment-methods/credit-cards\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountKey\\\": \\\"A00001115\\\", \\n    \\\"cardHolderInfo\\\": {\\n        \\\"addressLine1\\\": \\\"77 Fallon Glen\\\", \\n        \\\"addressLine2\\\": \\\"\\\", \\n        \\\"cardHolderName\\\": \\\"Bill Thiebault\\\", \\n        \\\"city\\\": \\\"Fremont\\\", \\n        \\\"country\\\": \\\"USA\\\", \\n        \\\"email\\\": \\\"bill@testaddress.com\\\", \\n        \\\"phone\\\": \\\"4155551234\\\", \\n        \\\"state\\\": \\\"California\\\", \\n        \\\"zipCode\\\": \\\"94020\\\"\\n    }, \\n    \\\"creditCardNumber\\\": \\\"1111222233334444\\\", \\n    \\\"creditCardType\\\": \\\"Discover\\\", \\n    \\\"defaultPaymentMethod\\\": false, \\n    \\\"expirationMonth\\\": \\\"10\\\", \\n    \\\"expirationYear\\\": \\\"2015\\\", \\n    \\\"numConsecutiveFailures\\\": 3, \\n    \\\"securityCode\\\": \\\"123\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/payment-methods/credit-cards\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payment-methods/credit-cards\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountKey\\\": \\\"A00001115\\\", \\n    \\\"cardHolderInfo\\\": {\\n        \\\"addressLine1\\\": \\\"77 Fallon Glen\\\", \\n        \\\"addressLine2\\\": \\\"\\\", \\n        \\\"cardHolderName\\\": \\\"Bill Thiebault\\\", \\n        \\\"city\\\": \\\"Fremont\\\", \\n        \\\"country\\\": \\\"USA\\\", \\n        \\\"email\\\": \\\"bill@testaddress.com\\\", \\n        \\\"phone\\\": \\\"4155551234\\\", \\n        \\\"state\\\": \\\"California\\\", \\n        \\\"zipCode\\\": \\\"94020\\\"\\n    }, \\n    \\\"creditCardNumber\\\": \\\"1111222233334444\\\", \\n    \\\"creditCardType\\\": \\\"Discover\\\", \\n    \\\"defaultPaymentMethod\\\": false, \\n    \\\"expirationMonth\\\": \\\"10\\\", \\n    \\\"expirationYear\\\": \\\"2015\\\", \\n    \\\"numConsecutiveFailures\\\": 3, \\n    \\\"securityCode\\\": \\\"123\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payment-methods/credit-cards\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountKey\\\": \\\"A00001115\\\", \\n    \\\"cardHolderInfo\\\": {\\n        \\\"addressLine1\\\": \\\"77 Fallon Glen\\\", \\n        \\\"addressLine2\\\": \\\"\\\", \\n        \\\"cardHolderName\\\": \\\"Bill Thiebault\\\", \\n        \\\"city\\\": \\\"Fremont\\\", \\n        \\\"country\\\": \\\"USA\\\", \\n        \\\"email\\\": \\\"bill@testaddress.com\\\", \\n        \\\"phone\\\": \\\"4155551234\\\", \\n        \\\"state\\\": \\\"California\\\", \\n        \\\"zipCode\\\": \\\"94020\\\"\\n    }, \\n    \\\"creditCardNumber\\\": \\\"1111222233334444\\\", \\n    \\\"creditCardType\\\": \\\"Discover\\\", \\n    \\\"defaultPaymentMethod\\\": false, \\n    \\\"expirationMonth\\\": \\\"10\\\", \\n    \\\"expirationYear\\\": \\\"2015\\\", \\n    \\\"numConsecutiveFailures\\\": 3, \\n    \\\"securityCode\\\": \\\"123\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payment-methods/credit-cards/accounts/{account-key}": {
      "get": {
        "description": "This REST API reference describes how to retrieve all credit card\ninformation for the specified customer account. \n\n## Notes\nThe response includes details credit or debit cards for the specified customer account. Card numbers are masked, e.g., \"************1234\". Cards are returned in reverse chronological order of last update.\n\nYou can send requests for bank transfer payment methods types. The response will not include bank transfer details.\n\nThe response only includes payment details on payment methods that are credit or debit cards.\n",
        "operationId": "GET_PaymentMethods",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "Account number or account ID.",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "creditCards": [
                  {
                    "cardHolderInfo": {
                      "cardHolderName": "Leo",
                      "email": "test@zuora.com",
                      "phone": "4082021111"
                    },
                    "cardNumber": "************1111",
                    "cardType": "Visa",
                    "defaultPaymentMethod": true,
                    "expirationMonth": 10,
                    "expirationYear": 2020,
                    "id": "2c92c8f83dabf9cf013daef12dd303b0"
                  },
                  {
                    "cardHolderInfo": {
                      "addressLine1": "1400 Bridge Pkwy",
                      "cardHolderName": "foo CC name",
                      "city": "San Jose",
                      "country": "United States",
                      "state": "California",
                      "zipCode": "95135"
                    },
                    "cardNumber": "*****foo CC #",
                    "cardType": "Visa",
                    "defaultPaymentMethod": false,
                    "expirationMonth": 10,
                    "expirationYear": 2012,
                    "id": "2c92a0f9391832b10139183e279e0044"
                  }
                ],
                "nextPage": "https://rest.zuora.com/v1/payment-methods/credit-cards/accounts/A00001115?page=2&pageSize=2",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETPaymentMethodsType"
            }
          }
        },
        "summary": "Get payment methods",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payment-methods/credit-cards/accounts/{account-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payment-methods/credit-cards/accounts/{account-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payment-methods/credit-cards/accounts/{account-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/payment-methods/credit-cards/accounts/{account-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payment-methods/credit-cards/accounts/{account-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payment-methods/credit-cards/accounts/{account-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payment-methods/credit-cards/{payment-method-id}": {
      "put": {
        "description": "Updates an existing credit card payment method for the specified\ncustomer account.\n",
        "operationId": "PUT_PaymentMethods",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Unique ID of the payment method to update.",
            "in": "path",
            "name": "payment-method-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTPaymentMethodType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "paymentMethodId": "2c92c8f83dcbd8b1013dcce1d6a600ce",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTPaymentMethodResponseType"
            }
          }
        },
        "summary": "Update payment method",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cardHolderName\": \"Leo\", \n    \"expirationMonth\": 8, \n    \"expirationYear\": 2015, \n    \"numConsecutiveFailures\": 5, \n    \"securityCode\": \"111\"\n}' \"https://rest.zuora.com//v1/payment-methods/credit-cards/{payment-method-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payment-methods/credit-cards/{payment-method-id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cardHolderName\": \"Leo\", \n    \"expirationMonth\": 8, \n    \"expirationYear\": 2015, \n    \"numConsecutiveFailures\": 5, \n    \"securityCode\": \"111\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"cardHolderName\\\": \\\"Leo\\\", \\n    \\\"expirationMonth\\\": 8, \\n    \\\"expirationYear\\\": 2015, \\n    \\\"numConsecutiveFailures\\\": 5, \\n    \\\"securityCode\\\": \\\"111\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payment-methods/credit-cards/{payment-method-id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"cardHolderName\\\": \\\"Leo\\\", \\n    \\\"expirationMonth\\\": 8, \\n    \\\"expirationYear\\\": 2015, \\n    \\\"numConsecutiveFailures\\\": 5, \\n    \\\"securityCode\\\": \\\"111\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/payment-methods/credit-cards/{payment-method-id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payment-methods/credit-cards/{payment-method-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"cardHolderName\\\": \\\"Leo\\\", \\n    \\\"expirationMonth\\\": 8, \\n    \\\"expirationYear\\\": 2015, \\n    \\\"numConsecutiveFailures\\\": 5, \\n    \\\"securityCode\\\": \\\"111\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payment-methods/credit-cards/{payment-method-id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"cardHolderName\\\": \\\"Leo\\\", \\n    \\\"expirationMonth\\\": 8, \\n    \\\"expirationYear\\\": 2015, \\n    \\\"numConsecutiveFailures\\\": 5, \\n    \\\"securityCode\\\": \\\"111\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payment-methods/decryption": {
      "post": {
        "description": "The decryption API endpoint can conditionally perform 3 tasks in one atomic call:\n  * Decrypt Apple Pay Payment token\n  * Create Credit Card Payment Method in Zuora with decrypted Apple Pay information\n  * Process Payment on a specified Invoice (optional)\n",
        "operationId": "POST_PaymentMethodsDecryption",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTPaymentMethodDecryption"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "paymentMethodId": "2c92c8f83dcbd8b1013dcce1d6a600ce",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTPaymentMethodResponseDecryption"
            }
          }
        },
        "summary": "Create payment method decryption",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountID\": \"402891a25a02e11c015a02f3c6100003\", \n    \"integrationType\": \"ApplePay\", \n    \"merchantID\": \"merchant.CN.com.zuora.services416\", \n    \"paymentToken\": {\n        \"data\": \"xGc......JDxuYz1gug0KZRrGXJQ=\", \n        \"header\": {\n            \"ephemeralPublicKey\": \"MFkwEw......TMbLoojKBA==\", \n            \"publicKeyHash\": \"HuLvfqvLon......9jEyX0w=\", \n            \"transactionId\": \"abbadd18818baea1f37b40844c9e09afa9733b0eccb373905b811da43cf1753b\"\n        }, \n        \"signature\": \"MIAGCSqGSIb......AEtrLSv7hE9gAAAAAAAA==\", \n        \"version\": \"EC_v1\"\n    }, \n    \"processPayment\": false\n}' \"https://rest.zuora.com//v1/payment-methods/decryption\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payment-methods/decryption');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountID\": \"402891a25a02e11c015a02f3c6100003\", \n    \"integrationType\": \"ApplePay\", \n    \"merchantID\": \"merchant.CN.com.zuora.services416\", \n    \"paymentToken\": {\n        \"data\": \"xGc......JDxuYz1gug0KZRrGXJQ=\", \n        \"header\": {\n            \"ephemeralPublicKey\": \"MFkwEw......TMbLoojKBA==\", \n            \"publicKeyHash\": \"HuLvfqvLon......9jEyX0w=\", \n            \"transactionId\": \"abbadd18818baea1f37b40844c9e09afa9733b0eccb373905b811da43cf1753b\"\n        }, \n        \"signature\": \"MIAGCSqGSIb......AEtrLSv7hE9gAAAAAAAA==\", \n        \"version\": \"EC_v1\"\n    }, \n    \"processPayment\": false\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountID\\\": \\\"402891a25a02e11c015a02f3c6100003\\\", \\n    \\\"integrationType\\\": \\\"ApplePay\\\", \\n    \\\"merchantID\\\": \\\"merchant.CN.com.zuora.services416\\\", \\n    \\\"paymentToken\\\": {\\n        \\\"data\\\": \\\"xGc......JDxuYz1gug0KZRrGXJQ=\\\", \\n        \\\"header\\\": {\\n            \\\"ephemeralPublicKey\\\": \\\"MFkwEw......TMbLoojKBA==\\\", \\n            \\\"publicKeyHash\\\": \\\"HuLvfqvLon......9jEyX0w=\\\", \\n            \\\"transactionId\\\": \\\"abbadd18818baea1f37b40844c9e09afa9733b0eccb373905b811da43cf1753b\\\"\\n        }, \\n        \\\"signature\\\": \\\"MIAGCSqGSIb......AEtrLSv7hE9gAAAAAAAA==\\\", \\n        \\\"version\\\": \\\"EC_v1\\\"\\n    }, \\n    \\\"processPayment\\\": false\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payment-methods/decryption\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountID\\\": \\\"402891a25a02e11c015a02f3c6100003\\\", \\n    \\\"integrationType\\\": \\\"ApplePay\\\", \\n    \\\"merchantID\\\": \\\"merchant.CN.com.zuora.services416\\\", \\n    \\\"paymentToken\\\": {\\n        \\\"data\\\": \\\"xGc......JDxuYz1gug0KZRrGXJQ=\\\", \\n        \\\"header\\\": {\\n            \\\"ephemeralPublicKey\\\": \\\"MFkwEw......TMbLoojKBA==\\\", \\n            \\\"publicKeyHash\\\": \\\"HuLvfqvLon......9jEyX0w=\\\", \\n            \\\"transactionId\\\": \\\"abbadd18818baea1f37b40844c9e09afa9733b0eccb373905b811da43cf1753b\\\"\\n        }, \\n        \\\"signature\\\": \\\"MIAGCSqGSIb......AEtrLSv7hE9gAAAAAAAA==\\\", \\n        \\\"version\\\": \\\"EC_v1\\\"\\n    }, \\n    \\\"processPayment\\\": false\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/payment-methods/decryption\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payment-methods/decryption\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountID\\\": \\\"402891a25a02e11c015a02f3c6100003\\\", \\n    \\\"integrationType\\\": \\\"ApplePay\\\", \\n    \\\"merchantID\\\": \\\"merchant.CN.com.zuora.services416\\\", \\n    \\\"paymentToken\\\": {\\n        \\\"data\\\": \\\"xGc......JDxuYz1gug0KZRrGXJQ=\\\", \\n        \\\"header\\\": {\\n            \\\"ephemeralPublicKey\\\": \\\"MFkwEw......TMbLoojKBA==\\\", \\n            \\\"publicKeyHash\\\": \\\"HuLvfqvLon......9jEyX0w=\\\", \\n            \\\"transactionId\\\": \\\"abbadd18818baea1f37b40844c9e09afa9733b0eccb373905b811da43cf1753b\\\"\\n        }, \\n        \\\"signature\\\": \\\"MIAGCSqGSIb......AEtrLSv7hE9gAAAAAAAA==\\\", \\n        \\\"version\\\": \\\"EC_v1\\\"\\n    }, \\n    \\\"processPayment\\\": false\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payment-methods/decryption\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountID\\\": \\\"402891a25a02e11c015a02f3c6100003\\\", \\n    \\\"integrationType\\\": \\\"ApplePay\\\", \\n    \\\"merchantID\\\": \\\"merchant.CN.com.zuora.services416\\\", \\n    \\\"paymentToken\\\": {\\n        \\\"data\\\": \\\"xGc......JDxuYz1gug0KZRrGXJQ=\\\", \\n        \\\"header\\\": {\\n            \\\"ephemeralPublicKey\\\": \\\"MFkwEw......TMbLoojKBA==\\\", \\n            \\\"publicKeyHash\\\": \\\"HuLvfqvLon......9jEyX0w=\\\", \\n            \\\"transactionId\\\": \\\"abbadd18818baea1f37b40844c9e09afa9733b0eccb373905b811da43cf1753b\\\"\\n        }, \\n        \\\"signature\\\": \\\"MIAGCSqGSIb......AEtrLSv7hE9gAAAAAAAA==\\\", \\n        \\\"version\\\": \\\"EC_v1\\\"\\n    }, \\n    \\\"processPayment\\\": false\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payment-methods/{payment-method-id}": {
      "delete": {
        "description": "Deletes a credit card payment method from the specified customer\naccount.\n\nIf the specified payment method is the account's default payment\nmethod, the request will fail.  In that case, you must first designate a\ndifferent payment method for that customer to be the default.\n",
        "operationId": "DELETE_PaymentMethods",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Unique identifier of a payment method. (Since this ID is unique, and linked to a customer account in the system, no customer identifier is needed.)",
            "in": "path",
            "name": "payment-method-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete payment method",
        "tags": [
          "Payment Methods"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payment-methods/{payment-method-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payment-methods/{payment-method-id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payment-methods/{payment-method-id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/payment-methods/{payment-method-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payment-methods/{payment-method-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payment-methods/{payment-method-id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/paymentgateways": {
      "get": {
        "description": "Retrieves the basic information about all the payment gateways.\n",
        "operationId": "GET_Paymentgateways",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "paymentgateways": [
                  {
                    "id": "4028905f5702783601570291e14c0015",
                    "isActive": true,
                    "isDefault": true,
                    "name": "Test Gateway Adapter",
                    "type": "Test Gateway"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETPaymentGatwaysResponse"
            }
          }
        },
        "summary": "Get payment gateways",
        "tags": [
          "Payment Gateways"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/paymentgateways\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/paymentgateways');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/paymentgateways\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/paymentgateways\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/paymentgateways\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/paymentgateways\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all payments from all your customer accounts.\n",
        "operationId": "GET_RetrieveAllPayments",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "This parameter restricts the data returned in the response. You can use this parameter to supply a dimension you want to filter on.\n\n A single filter uses the following form: \n\n*fieldsFilterable* `=` *field_value*\n            \nFilters can be combined by using `&`. For example: *fieldsFilterable* `=` *field_value* & *fieldsFilterable* `=` *field_value*\n\n*fieldsFilterable* indicates the name of a supported field that you can use to filter the response data. The supported filterable fields of this operation are as below:\n\n  - number\n  - status\n  - type\n  - accountID\n  - amount\n  - appliedAmount\n  - unappliedAmount\n  - refundAmount\n  - creditBalanceAmount\n  - currency\n  - effectiveDate\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n\n *field_value* indicates a valid value of the filterable field. If the type of the field value is string, you can set the field to `null` value for filtering. Then, you can get the response data with this field value being 'null'. For more information about these fields, see the field descriptions in the **Responses** section. \n  \nExamples:\n\n- /payments?status=Processed\n\n- /payments?currency=USD&status=Processed\n\n- /payments?status=Processed&type=External&sort=+number\n",
            "in": "query",
            "name": "fieldsFilterable",
            "required": false,
            "type": "string"
          },
          {
            "description": "This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.\n\nA sortable field uses the following form: \n\n*operator* *field_name*\n\nYou can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*  \n\n*operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.\n\n  - The `-` operator indicates an ascending order.\n  - The `+` operator indicates a descending order.\n\nBy default, the response data is displayed in descending order by payment number.\n\n*field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:\n\n  - number\n  - accountID\n  - amount\n  - appliedAmount\n  - unappliedAmount\n  - refundAmount\n  - creditBalanceAmount\n  - effectiveDate\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  \nExamples:\n\n- /payments?sort=+number\n\n- /payments?status=Processed&sort=-number,+amount\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "payments": [
                  {
                    "accountId": "4028905f5a87c0ff015a87d25ae90025",
                    "amount": 44.1,
                    "appliedAmount": 44.1,
                    "comment": "normal payment",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 11:30:37",
                    "creditBalanceAmount": 0,
                    "currency": "USD",
                    "custom_field_picklist__c": "option1",
                    "effectiveDate": "2017-03-01",
                    "financeInformation": {
                      "transferredToAccounting": "No"
                    },
                    "gatewayState": "NotSubmitted",
                    "id": "4028905f5a87c0ff015a87eb6b75007f",
                    "number": "P-00000001",
                    "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
                    "refundAmount": 0,
                    "status": "Processed",
                    "type": "External",
                    "unappliedAmount": 0,
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 11:30:37"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCollectionResponseType"
            }
          }
        },
        "summary": "Get all payments",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payments\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/payments\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCreates a payment for the following scenarios:\n\n- A full payment on an invoice or debit memo\n- A partial payment\n- A payment for several invoices and debit memos\n- An unapplied payment \n\nIf you do not know to which customer account the payment belongs, you can create a payment without specifying a customer account.\n\nFor more information, see [Create Payments](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/A_Unapplied_Payments/Management_of_Unapplied_Payments/AA_Create_Payments) and [Create Payments Without Specifying Customer Accounts](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/A_Unapplied_Payments/Management_of_Unapplied_Payments/AA_Create_Payments_Without_Specifying_Customer_Accounts).\n    \n",
        "operationId": "POST_CreatePayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePaymentType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 44.1,
                "appliedAmount": 44.1,
                "comment": "normal payment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "creditBalanceAmount": 0,
                "currency": "USD",
                "custom_field_picklist__c": "option1",
                "effectiveDate": "2017-03-01",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a87eb6b75007f",
                "number": "P-00000001",
                "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
                "refundAmount": 0,
                "status": "Processed",
                "success": true,
                "type": "External",
                "unappliedAmount": 0,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 11:30:37"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETARPaymentType"
            }
          }
        },
        "summary": "Create payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountId\": \"4028905f5a87c0ff015a87d25ae90025\", \n    \"amount\": 44.1, \n    \"comment\": \"normal payment\", \n    \"currency\": \"USD\", \n    \"custom_field_picklist__c\": \"option1\", \n    \"debitMemos\": [\n        {\n            \"amount\": 4.1, \n            \"debitMemoId\": \"4028905f5a87c0ff015a87e49e6b0062\", \n            \"items\": [\n                {\n                    \"amount\": 4, \n                    \"debitMemoItemId\": \"4028905f5a87c0ff015a87e49e7a0063\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87e49f5e0065\"\n                }\n            ]\n        }\n    ], \n    \"effectiveDate\": \"2017-03-01\", \n    \"invoices\": [\n        {\n            \"amount\": 40, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 39, \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 1, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ], \n    \"paymentMethodId\": \"402881e522cf4f9b0122cf5dc4020045\", \n    \"type\": \"External\"\n}' \"https://rest.zuora.com//v1/payments\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountId\": \"4028905f5a87c0ff015a87d25ae90025\", \n    \"amount\": 44.1, \n    \"comment\": \"normal payment\", \n    \"currency\": \"USD\", \n    \"custom_field_picklist__c\": \"option1\", \n    \"debitMemos\": [\n        {\n            \"amount\": 4.1, \n            \"debitMemoId\": \"4028905f5a87c0ff015a87e49e6b0062\", \n            \"items\": [\n                {\n                    \"amount\": 4, \n                    \"debitMemoItemId\": \"4028905f5a87c0ff015a87e49e7a0063\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87e49f5e0065\"\n                }\n            ]\n        }\n    ], \n    \"effectiveDate\": \"2017-03-01\", \n    \"invoices\": [\n        {\n            \"amount\": 40, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 39, \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 1, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ], \n    \"paymentMethodId\": \"402881e522cf4f9b0122cf5dc4020045\", \n    \"type\": \"External\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a87d25ae90025\\\", \\n    \\\"amount\\\": 44.1, \\n    \\\"comment\\\": \\\"normal payment\\\", \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"custom_field_picklist__c\\\": \\\"option1\\\", \\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 4.1, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 4, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 40, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 39, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"paymentMethodId\\\": \\\"402881e522cf4f9b0122cf5dc4020045\\\", \\n    \\\"type\\\": \\\"External\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a87d25ae90025\\\", \\n    \\\"amount\\\": 44.1, \\n    \\\"comment\\\": \\\"normal payment\\\", \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"custom_field_picklist__c\\\": \\\"option1\\\", \\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 4.1, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 4, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 40, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 39, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"paymentMethodId\\\": \\\"402881e522cf4f9b0122cf5dc4020045\\\", \\n    \\\"type\\\": \\\"External\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/payments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a87d25ae90025\\\", \\n    \\\"amount\\\": 44.1, \\n    \\\"comment\\\": \\\"normal payment\\\", \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"custom_field_picklist__c\\\": \\\"option1\\\", \\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 4.1, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 4, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 40, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 39, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"paymentMethodId\\\": \\\"402881e522cf4f9b0122cf5dc4020045\\\", \\n    \\\"type\\\": \\\"External\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a87d25ae90025\\\", \\n    \\\"amount\\\": 44.1, \\n    \\\"comment\\\": \\\"normal payment\\\", \\n    \\\"currency\\\": \\\"USD\\\", \\n    \\\"custom_field_picklist__c\\\": \\\"option1\\\", \\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 4.1, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 4, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 40, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 39, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"paymentMethodId\\\": \\\"402881e522cf4f9b0122cf5dc4020045\\\", \\n    \\\"type\\\": \\\"External\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}": {
      "delete": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nDeletes a payment. Only payments with the Cancelled status can be deleted. \n",
        "operationId": "DELETE_Payment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of an unapplied payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payments/{paymentId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/payments/{paymentId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about one specific payment.\n",
        "operationId": "GET_Payment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 44.1,
                "appliedAmount": 44.1,
                "comment": "normal payment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "creditBalanceAmount": 0,
                "currency": "USD",
                "custom_field_picklist__c": "option1",
                "effectiveDate": "2017-03-01",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a87eb6b75007f",
                "number": "P-00000001",
                "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
                "refundAmount": 0,
                "status": "Processed",
                "success": true,
                "type": "External",
                "unappliedAmount": 0,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 11:30:37"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETARPaymentType"
            }
          }
        },
        "summary": "Get payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payments/{paymentId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/payments/{paymentId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nUpdates a payment.\n",
        "operationId": "PUT_UpdatePayemnt",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentType"
            }
          },
          {
            "description": "The unique ID of an unapplied payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a88889fe500a8",
                "amount": 44.1,
                "appliedAmount": 0,
                "comment": "new comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "creditBalanceAmount": 0,
                "currency": "USD",
                "custom_field_picklist__c": "option1",
                "effectiveDate": "2017-03-01",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a87eb6b75007f",
                "number": "P-00000001",
                "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
                "refundAmount": 0,
                "status": "Processed",
                "success": true,
                "type": "External",
                "unappliedAmount": 44.1,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 14:25:34"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETARPaymentType"
            }
          }
        },
        "summary": "Update payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"comment\": \"new comment\", \n    \"financeInformation\": {\n        \"transferredToAccounting\": \"No\"\n    }\n}' \"https://rest.zuora.com//v1/payments/{paymentId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"comment\": \"new comment\", \n    \"financeInformation\": {\n        \"transferredToAccounting\": \"No\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"financeInformation\\\": {\\n        \\\"transferredToAccounting\\\": \\\"No\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"financeInformation\\\": {\\n        \\\"transferredToAccounting\\\": \\\"No\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/payments/{paymentId}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"financeInformation\\\": {\\n        \\\"transferredToAccounting\\\": \\\"No\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"comment\\\": \\\"new comment\\\", \\n    \\\"financeInformation\\\": {\\n        \\\"transferredToAccounting\\\": \\\"No\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/accounts": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nTransfers an unapplied payment.\n\nFor more information, see [Transfer Unapplied Payments](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/A_Unapplied_Payments/Management_of_Unapplied_Payments/Transfer_Unapplied_Payments).\n",
        "operationId": "POST_TransferPayemnt",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferPaymentType"
            }
          },
          {
            "description": "The unique ID of an unapplied payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a88889fe500a8",
                "amount": 44.1,
                "appliedAmount": 0,
                "comment": "normal payment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "creditBalanceAmount": 0,
                "currency": "USD",
                "custom_field_picklist__c": "option1",
                "effectiveDate": "2017-03-01",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a87eb6b75007f",
                "number": "P-00000001",
                "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
                "refundAmount": 0,
                "status": "Processed",
                "success": true,
                "type": "External",
                "unappliedAmount": 44.1,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 14:22:58"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETARPaymentType"
            }
          }
        },
        "summary": "Transfer payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountId\": \"4028905f5a87c0ff015a88889fe500a8\"\n}' \"https://rest.zuora.com//v1/payments/{paymentId}/accounts\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/accounts');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountId\": \"4028905f5a87c0ff015a88889fe500a8\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a88889fe500a8\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/accounts\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a88889fe500a8\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/payments/{paymentId}/accounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/accounts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a88889fe500a8\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/accounts\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountId\\\": \\\"4028905f5a87c0ff015a88889fe500a8\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/apply": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nApplies an unapplied payment to invoices and debit memos.\n\nFor more information, see [Apply Unapplied Payments to Invoices and Debit Memos](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/A_Unapplied_Payments/Management_of_Unapplied_Payments/Apply_Unapplied_Payments_to_Invoices_and_Debit_Memos).\n",
        "operationId": "POST_ApplyPayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyPaymentType"
            }
          },
          {
            "description": "The unique ID of an unapplied payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 44.1,
                "appliedAmount": 44.1,
                "comment": "normal payment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "creditBalanceAmount": 0,
                "currency": "USD",
                "custom_field_picklist__c": "option1",
                "effectiveDate": "2017-03-01",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a87eb6b75007f",
                "number": "P-00000001",
                "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
                "refundAmount": 0,
                "status": "Processed",
                "success": true,
                "type": "External",
                "unappliedAmount": 0,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 13:56:15"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETARPaymentType"
            }
          }
        },
        "summary": "Apply payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"debitMemos\": [\n        {\n            \"amount\": 1.02, \n            \"debitMemoId\": \"4028905f5a87c0ff015a87e49e6b0062\", \n            \"items\": [\n                {\n                    \"amount\": 1, \n                    \"debitMemoItemId\": \"4028905f5a87c0ff015a87e49e7a0063\"\n                }, \n                {\n                    \"amount\": 0.02, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87e49f5e0065\"\n                }\n            ]\n        }\n    ], \n    \"effectiveDate\": \"2017-03-01\", \n    \"invoices\": [\n        {\n            \"amount\": 10.1, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 10, \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ]\n}' \"https://rest.zuora.com//v1/payments/{paymentId}/apply\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/apply');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"debitMemos\": [\n        {\n            \"amount\": 1.02, \n            \"debitMemoId\": \"4028905f5a87c0ff015a87e49e6b0062\", \n            \"items\": [\n                {\n                    \"amount\": 1, \n                    \"debitMemoItemId\": \"4028905f5a87c0ff015a87e49e7a0063\"\n                }, \n                {\n                    \"amount\": 0.02, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87e49f5e0065\"\n                }\n            ]\n        }\n    ], \n    \"effectiveDate\": \"2017-03-01\", \n    \"invoices\": [\n        {\n            \"amount\": 10.1, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 10, \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 1.02, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.02, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 10.1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 10, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/apply\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 1.02, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.02, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 10.1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 10, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/payments/{paymentId}/apply\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/apply\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 1.02, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.02, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 10.1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 10, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/apply\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 1.02, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.02, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 10.1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 10, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/cancel": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCancels a payment.\n",
        "operationId": "POST_CancelPayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of an unapplied payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a88889fe500a8",
                "amount": 44.1,
                "appliedAmount": 0,
                "comment": "new comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "creditBalanceAmount": 0,
                "currency": "USD",
                "custom_field_picklist__c": "option1",
                "effectiveDate": "2017-03-01",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a87eb6b75007f",
                "number": "P-00000001",
                "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
                "refundAmount": 0,
                "status": "Canceled",
                "success": true,
                "type": "External",
                "unappliedAmount": 44.1,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 14:26:57"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETARPaymentType"
            }
          }
        },
        "summary": "Cancel payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/payments/{paymentId}/cancel\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/cancel');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/cancel\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/payments/{paymentId}/cancel\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/cancel\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/parts": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all parts of a payment. A payment can consist of an unapplied part, and several parts applied to invoices and debit memos. You can use this operation to get all the applied and unapplied portions of a payment.\n",
        "operationId": "GET_PaymentParts",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The unique ID of a payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "parts": [
                  {
                    "amount": 4.1,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 11:30:37",
                    "debitMemoId": "4028905f5a87c0ff015a87e49e6b0062",
                    "id": "4028905f5a87c0ff015a87eb6beb008d",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 11:30:37"
                  },
                  {
                    "amount": 40,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 11:30:37",
                    "id": "4028905f5a87c0ff015a87eb6beb008c",
                    "invoiceId": "4028905f5a87c0ff015a87d3f8f10043",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 11:30:37"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETPaymentPartsCollectionType"
            }
          }
        },
        "summary": "Get payment parts",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payments/{paymentId}/parts\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/parts');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/parts\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/payments/{paymentId}/parts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/parts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/parts\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/parts/{partid}": {
      "get": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about a specific payment part. A payment can consist of an unapplied part, and several parts applied to invoices and debit memos.\n",
        "operationId": "GET_PaymentPart",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a specific payment part. You can get the payment part ID from the response of [Get payment parts](https://www.zuora.com/developer/api-reference/#operation/GET_PaymentParts).\n",
            "in": "path",
            "name": "partid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 4.1,
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "debitMemoId": "4028905f5a87c0ff015a87e49e6b0062",
                "id": "4028905f5a87c0ff015a87eb6beb008d",
                "success": true,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 11:30:37"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETPaymentPartType"
            }
          }
        },
        "summary": "Get payment part",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/payments/{paymentId}/parts/{partid}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/parts/{partid}/itemparts": {
      "get": {
        "description": "**Note:** The Invoice Item Settlement feature is in **Limited Availability**, and it must be used together with other Advanced AR Settlement features (Unapplied Payments, and Credit and Debit memos). If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all items of a payment part. A payment part item is a single line item in a payment part. A payment part can consist of several different types of items.\n",
        "operationId": "GET_PayemntItemParts",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The unique ID of a specific payment part. You can get the payment part ID from the response of [Get payment parts](https://www.zuora.com/developer/api-reference/#operation/GET_PaymentParts).\n",
            "in": "path",
            "name": "partid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "itemParts": [
                  {
                    "amount": 4,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 11:30:37",
                    "debitMemoItemId": "4028905f5a87c0ff015a87e49e7a0063",
                    "id": "4028905f5a87c0ff015a87eb6bd8008a",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 11:30:37"
                  },
                  {
                    "amount": 0.1,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 11:30:37",
                    "id": "4028905f5a87c0ff015a87eb6bd8008b",
                    "taxItemId": "4028905f5a87c0ff015a87e49f5e0065",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 11:30:37"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETPaymentItemPartCollectionType"
            }
          }
        },
        "summary": "Get payment part items",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/payments/{paymentId}/parts/{partid}/itemparts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/parts/{partid}/itemparts/{itempartid}": {
      "get": {
        "description": "**Note:** The Invoice Item Settlement feature is in **Limited Availability**, and it must be used together with other Advanced AR Settlement features (Unapplied Payments, and Credit and Debit memos). If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the information about a specific payment part item. A payment part item is a single line item in a payment part. A payment part can consist of several different types of items.\n",
        "operationId": "GET_PaymentItemPart",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a specific payment part. You can get the payment part ID from the response of [Get payment parts](https://www.zuora.com/developer/api-reference/#operation/GET_PaymentParts).\n",
            "in": "path",
            "name": "partid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a specific payment part item. You can get the payment part item ID from the response of [Get payment part items](https://www.zuora.com/developer/api-reference/#operation/GET_PayemntItemParts).\n",
            "in": "path",
            "name": "itempartid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 4,
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "debitMemoItemId": "4028905f5a87c0ff015a87e49e7a0063",
                "id": "4028905f5a87c0ff015a87eb6bd8008a",
                "success": true,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 11:30:37"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETPaymentItemPartType"
            }
          }
        },
        "summary": "Get payment part item",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts/{itempartid}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts/{itempartid}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts/{itempartid}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/payments/{paymentId}/parts/{partid}/itemparts/{itempartid}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts/{itempartid}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/parts/{partid}/itemparts/{itempartid}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/refund": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRefunds a full or partial unapplied payment to your customers. To refund applied payments, you must unapply the applied payments from the invoices or debit memos, and then refund the unapplied payments to customers.\n\nFor more information, see [Refund Payments](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/A_Unapplied_Payments/Management_of_Unapplied_Payments/Z_Refund_Payments).\n",
        "operationId": "POST_RefundPayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostRefundType"
            }
          },
          {
            "description": "The unique ID of an unapplied payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 4,
                "comment": "Create a refund for unapplied payment.",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 14:46:03",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a889e590e00c9",
                "methodType": "CreditCard",
                "number": "R-00000001",
                "paymentId": "4028905f5a87c0ff015a889ddfb800c0",
                "reasonCode": "Standard Refund",
                "refundDate": "2017-03-01",
                "status": "Processed",
                "success": true,
                "type": "External",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 14:46:03"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundPaymentType"
            }
          }
        },
        "summary": "Refund payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"comment\": \"Create a refund for unapplied payment.\", \n    \"methodType\": \"CreditCard\", \n    \"reasonCode\": \"Standard Refund\", \n    \"refundDate\": \"2017-03-01\", \n    \"totalAmount\": 4, \n    \"type\": \"External\"\n}' \"https://rest.zuora.com//v1/payments/{paymentId}/refund\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/refund');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"comment\": \"Create a refund for unapplied payment.\", \n    \"methodType\": \"CreditCard\", \n    \"reasonCode\": \"Standard Refund\", \n    \"refundDate\": \"2017-03-01\", \n    \"totalAmount\": 4, \n    \"type\": \"External\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"comment\\\": \\\"Create a refund for unapplied payment.\\\", \\n    \\\"methodType\\\": \\\"CreditCard\\\", \\n    \\\"reasonCode\\\": \\\"Standard Refund\\\", \\n    \\\"refundDate\\\": \\\"2017-03-01\\\", \\n    \\\"totalAmount\\\": 4, \\n    \\\"type\\\": \\\"External\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/refund\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"comment\\\": \\\"Create a refund for unapplied payment.\\\", \\n    \\\"methodType\\\": \\\"CreditCard\\\", \\n    \\\"reasonCode\\\": \\\"Standard Refund\\\", \\n    \\\"refundDate\\\": \\\"2017-03-01\\\", \\n    \\\"totalAmount\\\": 4, \\n    \\\"type\\\": \\\"External\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/payments/{paymentId}/refund\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/refund\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"comment\\\": \\\"Create a refund for unapplied payment.\\\", \\n    \\\"methodType\\\": \\\"CreditCard\\\", \\n    \\\"reasonCode\\\": \\\"Standard Refund\\\", \\n    \\\"refundDate\\\": \\\"2017-03-01\\\", \\n    \\\"totalAmount\\\": 4, \\n    \\\"type\\\": \\\"External\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/refund\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"comment\\\": \\\"Create a refund for unapplied payment.\\\", \\n    \\\"methodType\\\": \\\"CreditCard\\\", \\n    \\\"reasonCode\\\": \\\"Standard Refund\\\", \\n    \\\"refundDate\\\": \\\"2017-03-01\\\", \\n    \\\"totalAmount\\\": 4, \\n    \\\"type\\\": \\\"External\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/payments/{paymentId}/unapply": {
      "post": {
        "description": "**Note:** The Advanced AR Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nUnapplies an applied payment from invoices and debit memos.\n\nFor more information, see [Unapply Payments from Invoices and Debit Memos](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/A_Unapplied_Payments/Management_of_Unapplied_Payments/Unapply_Payments_from_Invoices_and_Debit_Memos).\n",
        "operationId": "POST_UNAPPLY_PAYMENT",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnapplyPaymentType"
            }
          },
          {
            "description": "The unique ID of an applied payment. For example, 8a8082e65b27f6c3015b89e4344c16b1.\n",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 44.1,
                "appliedAmount": 32.98,
                "comment": "normal payment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 11:30:37",
                "creditBalanceAmount": 0,
                "currency": "USD",
                "custom_field_picklist__c": "option1",
                "effectiveDate": "2017-03-01",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a87eb6b75007f",
                "number": "P-00000001",
                "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
                "refundAmount": 0,
                "status": "Processed",
                "success": true,
                "type": "External",
                "unappliedAmount": 11.12,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 13:53:12"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETARPaymentType"
            }
          }
        },
        "summary": "Unapply payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"debitMemos\": [\n        {\n            \"amount\": 1.02, \n            \"debitMemoId\": \"4028905f5a87c0ff015a87e49e6b0062\", \n            \"items\": [\n                {\n                    \"amount\": 1, \n                    \"debitMemoItemId\": \"4028905f5a87c0ff015a87e49e7a0063\"\n                }, \n                {\n                    \"amount\": 0.02, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87e49f5e0065\"\n                }\n            ]\n        }\n    ], \n    \"effectiveDate\": \"2017-03-01\", \n    \"invoices\": [\n        {\n            \"amount\": 10.1, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 10, \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ]\n}' \"https://rest.zuora.com//v1/payments/{paymentId}/unapply\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/payments/{paymentId}/unapply');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"debitMemos\": [\n        {\n            \"amount\": 1.02, \n            \"debitMemoId\": \"4028905f5a87c0ff015a87e49e6b0062\", \n            \"items\": [\n                {\n                    \"amount\": 1, \n                    \"debitMemoItemId\": \"4028905f5a87c0ff015a87e49e7a0063\"\n                }, \n                {\n                    \"amount\": 0.02, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87e49f5e0065\"\n                }\n            ]\n        }\n    ], \n    \"effectiveDate\": \"2017-03-01\", \n    \"invoices\": [\n        {\n            \"amount\": 10.1, \n            \"invoiceId\": \"4028905f5a87c0ff015a87d3f8f10043\", \n            \"items\": [\n                {\n                    \"amount\": 10, \n                    \"invoiceItemId\": \"4028905f5a87c0ff015a87d3f90c0045\"\n                }, \n                {\n                    \"amount\": 0.1, \n                    \"taxItemId\": \"4028905f5a87c0ff015a87d3f884003f\"\n                }\n            ]\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 1.02, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.02, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 10.1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 10, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/payments/{paymentId}/unapply\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 1.02, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.02, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 10.1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 10, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/payments/{paymentId}/unapply\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/payments/{paymentId}/unapply\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 1.02, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.02, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 10.1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 10, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/payments/{paymentId}/unapply\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"debitMemos\\\": [\\n        {\\n            \\\"amount\\\": 1.02, \\n            \\\"debitMemoId\\\": \\\"4028905f5a87c0ff015a87e49e6b0062\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 1, \\n                    \\\"debitMemoItemId\\\": \\\"4028905f5a87c0ff015a87e49e7a0063\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.02, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87e49f5e0065\\\"\\n                }\\n            ]\\n        }\\n    ], \\n    \\\"effectiveDate\\\": \\\"2017-03-01\\\", \\n    \\\"invoices\\\": [\\n        {\\n            \\\"amount\\\": 10.1, \\n            \\\"invoiceId\\\": \\\"4028905f5a87c0ff015a87d3f8f10043\\\", \\n            \\\"items\\\": [\\n                {\\n                    \\\"amount\\\": 10, \\n                    \\\"invoiceItemId\\\": \\\"4028905f5a87c0ff015a87d3f90c0045\\\"\\n                }, \\n                {\\n                    \\\"amount\\\": 0.1, \\n                    \\\"taxItemId\\\": \\\"4028905f5a87c0ff015a87d3f884003f\\\"\\n                }\\n            ]\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/quotes/document": {
      "post": {
        "description": "The `document` call generates a quote document and returns the generated document URL. You can directly access the generated quote file through the returned URL.\n\nThe `document` call should be only used from Zuora Quotes. \n\n## File Size Limitation \nThe maximum export file size is 2047MB. If you have large data requests that go over this limit, you will get the following 403 HTTP response code from Zuora:\n`security:max-object-size>2047MB</security:max-object-size>`\n\nSubmit a request at [Zuora Global Support](http://support.zuora.com/) if you require additional assistance.\n\nWe can work with you to determine if large file optimization is an option for you.\n",
        "operationId": "POST_QuotesDocument",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTQuoteDocType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "file": "https://rest.zuora.com/v1/file/2c92c09447f1ca410147f7bfed8c5a87",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTQuoteDocResponseType"
            }
          }
        },
        "summary": "Generate quotes document",
        "tags": [
          "Quotes Document"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"apiuser\": \"superadmin@zuora.com\", \n    \"documentType\": \"pdf\", \n    \"locale\": \"en_US\", \n    \"quoteId\": \"a0Bi000000A71rp\", \n    \"serverUrl\": \"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\", \n    \"sessionId\": \"we764buuM03bkE0fmmc5zGMYp\", \n    \"templateId\": \"4028925648fdb7830148fdc1246c0003\", \n    \"useSFDCLocale\": \"1\", \n    \"zquotesMajorVersion\": \"7\", \n    \"zquotesMinorVersion\": \"0\"\n}' \"https://rest.zuora.com//v1/quotes/document\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/quotes/document');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"apiuser\": \"superadmin@zuora.com\", \n    \"documentType\": \"pdf\", \n    \"locale\": \"en_US\", \n    \"quoteId\": \"a0Bi000000A71rp\", \n    \"serverUrl\": \"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\", \n    \"sessionId\": \"we764buuM03bkE0fmmc5zGMYp\", \n    \"templateId\": \"4028925648fdb7830148fdc1246c0003\", \n    \"useSFDCLocale\": \"1\", \n    \"zquotesMajorVersion\": \"7\", \n    \"zquotesMinorVersion\": \"0\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"apiuser\\\": \\\"superadmin@zuora.com\\\", \\n    \\\"documentType\\\": \\\"pdf\\\", \\n    \\\"locale\\\": \\\"en_US\\\", \\n    \\\"quoteId\\\": \\\"a0Bi000000A71rp\\\", \\n    \\\"serverUrl\\\": \\\"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\\\", \\n    \\\"sessionId\\\": \\\"we764buuM03bkE0fmmc5zGMYp\\\", \\n    \\\"templateId\\\": \\\"4028925648fdb7830148fdc1246c0003\\\", \\n    \\\"useSFDCLocale\\\": \\\"1\\\", \\n    \\\"zquotesMajorVersion\\\": \\\"7\\\", \\n    \\\"zquotesMinorVersion\\\": \\\"0\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/quotes/document\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"apiuser\\\": \\\"superadmin@zuora.com\\\", \\n    \\\"documentType\\\": \\\"pdf\\\", \\n    \\\"locale\\\": \\\"en_US\\\", \\n    \\\"quoteId\\\": \\\"a0Bi000000A71rp\\\", \\n    \\\"serverUrl\\\": \\\"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\\\", \\n    \\\"sessionId\\\": \\\"we764buuM03bkE0fmmc5zGMYp\\\", \\n    \\\"templateId\\\": \\\"4028925648fdb7830148fdc1246c0003\\\", \\n    \\\"useSFDCLocale\\\": \\\"1\\\", \\n    \\\"zquotesMajorVersion\\\": \\\"7\\\", \\n    \\\"zquotesMinorVersion\\\": \\\"0\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/quotes/document\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/quotes/document\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"apiuser\\\": \\\"superadmin@zuora.com\\\", \\n    \\\"documentType\\\": \\\"pdf\\\", \\n    \\\"locale\\\": \\\"en_US\\\", \\n    \\\"quoteId\\\": \\\"a0Bi000000A71rp\\\", \\n    \\\"serverUrl\\\": \\\"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\\\", \\n    \\\"sessionId\\\": \\\"we764buuM03bkE0fmmc5zGMYp\\\", \\n    \\\"templateId\\\": \\\"4028925648fdb7830148fdc1246c0003\\\", \\n    \\\"useSFDCLocale\\\": \\\"1\\\", \\n    \\\"zquotesMajorVersion\\\": \\\"7\\\", \\n    \\\"zquotesMinorVersion\\\": \\\"0\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/quotes/document\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"apiuser\\\": \\\"superadmin@zuora.com\\\", \\n    \\\"documentType\\\": \\\"pdf\\\", \\n    \\\"locale\\\": \\\"en_US\\\", \\n    \\\"quoteId\\\": \\\"a0Bi000000A71rp\\\", \\n    \\\"serverUrl\\\": \\\"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\\\", \\n    \\\"sessionId\\\": \\\"we764buuM03bkE0fmmc5zGMYp\\\", \\n    \\\"templateId\\\": \\\"4028925648fdb7830148fdc1246c0003\\\", \\n    \\\"useSFDCLocale\\\": \\\"1\\\", \\n    \\\"zquotesMajorVersion\\\": \\\"7\\\", \\n    \\\"zquotesMinorVersion\\\": \\\"0\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/refunds": {
      "get": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all refunds. Two types of refunds are available, electronic refunds and external refunds.\n",
        "operationId": "GET_Refunds",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "This parameter restricts the data returned in the response. You can use this parameter to supply a dimension you want to filter on.\n\n A single filter uses the following form: \n\n*fieldsFilterable* `=` *field_value*\n            \nFilters can be combined by using `&`. For example: *fieldsFilterable* `=` *field_value* `&` *fieldsFilterable* `=` *field_value*\n\n*fieldsFilterable* indicates the name of a supported field that you can use to filter the response data. The supported filterable fields of this operation are as below:\n\n  - number\n  - status\n  - type\n  - accountID\n  - amount\n  - refundDate\n  - paymentId\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  - methodType\n\n *field_value* indicates a valid value of the filterable field. If the type of the field value is string, you can set the field to `null` value for filtering. Then, you can get the response data with this field value being 'null'. For more information about these fields, see the field descriptions in the **Responses** section. \n  \nExamples:\n\n- /refunds?status=Processed\n\n- /refunds?amount=4&status=Processed\n\n- /refunds?status=Processed&type=External&sort=+number\n",
            "in": "query",
            "name": "fieldsFilterable",
            "required": false,
            "type": "string"
          },
          {
            "description": "This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.\n\nA sortable field uses the following form: \n\n*operator* *field_name*\n\nYou can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*  \n\n*operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.\n\n  - The `-` operator indicates an ascending order.\n  - The `+` operator indicates a descending order.\n\nBy default, the response data is displayed in descending order by refund number.\n\n*field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:\n\n  - number\n  - accountID\n  - amount\n  - refundDate\n  - paymentId\n  - createdDate\n  - createdById\n  - updatedDate\n  - updatedById\n  \nExamples:\n\n- /refunds?sort=+number\n\n- /refunds?status=Processed&sort=-number,+amount\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "refunds": [
                  {
                    "accountId": "4028905f5a87c0ff015a87d25ae90025",
                    "amount": 4,
                    "comment": "update comment",
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 14:46:03",
                    "financeInformation": {
                      "transferredToAccounting": "No"
                    },
                    "gatewayState": "NotSubmitted",
                    "id": "4028905f5a87c0ff015a889e590e00c9",
                    "methodType": "CreditCard",
                    "number": "R-00000001",
                    "paymentId": "4028905f5a87c0ff015a889ddfb800c0",
                    "reasonCode": "Standard Refund",
                    "refundDate": "2017-03-01",
                    "status": "Processed",
                    "type": "External",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 16:56:41"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundCollectionType"
            }
          }
        },
        "summary": "Get all refunds",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/refunds\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/refunds\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/refunds/{refundId}": {
      "delete": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nDeletes a refund. You can delete a refund with the Canceled or Error status. \n",
        "operationId": "DELETE_Refund",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a refund. For example, 4028905f5a87c0ff015a889e590e00c9.\n",
            "in": "path",
            "name": "refundId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete refund",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/refunds/{refundId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds/{refundId}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds/{refundId}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/refunds/{refundId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds/{refundId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds/{refundId}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about a specific refund.\n",
        "operationId": "GET_Refund",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a refund. For example, 4028905f5a87c0ff015a889e590e00c9.\n",
            "in": "path",
            "name": "refundId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 4,
                "comment": "Create a refund for unapplied payment.",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 14:46:03",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a889e590e00c9",
                "methodType": "CreditCard",
                "number": "R-00000001",
                "paymentId": "4028905f5a87c0ff015a889ddfb800c0",
                "reasonCode": "Standard Refund",
                "refundDate": "2017-03-01",
                "status": "Processed",
                "success": true,
                "type": "External",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 14:46:03"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundType"
            }
          }
        },
        "summary": "Get refund",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/refunds/{refundId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds/{refundId}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds/{refundId}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/refunds/{refundId}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds/{refundId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds/{refundId}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nUpdates the basic and finance information about a refund.\n",
        "operationId": "PUT_UpdateRefund",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTRefundType"
            }
          },
          {
            "description": "The unique ID of a refund. For example, 4028905f5a87c0ff015a889e590e00c9.\n",
            "in": "path",
            "name": "refundId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 4,
                "comment": "update comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 14:46:03",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a889e590e00c9",
                "methodType": "CreditCard",
                "number": "R-00000001",
                "paymentId": "4028905f5a87c0ff015a889ddfb800c0",
                "reasonCode": "Standard Refund",
                "refundDate": "2017-03-01",
                "status": "Processed",
                "success": true,
                "type": "External",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 16:56:41"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundType"
            }
          }
        },
        "summary": "Update refund",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"comment\": \"update comment\", \n    \"financeInformation\": {\n        \"transferredToAccounting\": \"No\"\n    }\n}' \"https://rest.zuora.com//v1/refunds/{refundId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds/{refundId}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"comment\": \"update comment\", \n    \"financeInformation\": {\n        \"transferredToAccounting\": \"No\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"comment\\\": \\\"update comment\\\", \\n    \\\"financeInformation\\\": {\\n        \\\"transferredToAccounting\\\": \\\"No\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds/{refundId}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"comment\\\": \\\"update comment\\\", \\n    \\\"financeInformation\\\": {\\n        \\\"transferredToAccounting\\\": \\\"No\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/refunds/{refundId}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds/{refundId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"comment\\\": \\\"update comment\\\", \\n    \\\"financeInformation\\\": {\\n        \\\"transferredToAccounting\\\": \\\"No\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds/{refundId}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"comment\\\": \\\"update comment\\\", \\n    \\\"financeInformation\\\": {\\n        \\\"transferredToAccounting\\\": \\\"No\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/refunds/{refundId}/cancel": {
      "post": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nCancels a refund.\n",
        "operationId": "POST_CancelRefund",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a refund. For example, 4028905f5a87c0ff015a889e590e00c9.      \n",
            "in": "path",
            "name": "refundId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "4028905f5a87c0ff015a87d25ae90025",
                "amount": 4,
                "cancelledOn": "2017-03-01 17:03:07",
                "comment": "update comment",
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 14:46:03",
                "financeInformation": {
                  "transferredToAccounting": "No"
                },
                "gatewayState": "NotSubmitted",
                "id": "4028905f5a87c0ff015a889e590e00c9",
                "methodType": "CreditCard",
                "number": "R-00000001",
                "paymentId": "4028905f5a87c0ff015a889ddfb800c0",
                "reasonCode": "Standard Refund",
                "refundDate": "2017-03-01",
                "status": "Canceled",
                "success": true,
                "type": "External",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 17:03:07"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundType"
            }
          }
        },
        "summary": "Cancel refund",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/refunds/{refundId}/cancel\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds/{refundId}/cancel');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds/{refundId}/cancel\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/refunds/{refundId}/cancel\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds/{refundId}/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds/{refundId}/cancel\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/refunds/{refundId}/parts": {
      "get": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about all parts of a refund.\n",
        "operationId": "GET_RefundParts",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a refund. For example, 4028905f5a87c0ff015a889e590e00c9.\n",
            "in": "path",
            "name": "refundId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "parts": [
                  {
                    "amount": 4,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 14:46:03",
                    "id": "4028905f5a87c0ff015a889e592b00cf",
                    "paymentId": "4028905f5a87c0ff015a889ddfb800c0",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 14:46:03"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundPartCollectionType"
            }
          }
        },
        "summary": "Get refund parts",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/refunds/{refundId}/parts\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds/{refundId}/parts');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds/{refundId}/parts\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/refunds/{refundId}/parts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds/{refundId}/parts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds/{refundId}/parts\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/refunds/{refundId}/parts/{refundpartid}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the information about a specific refund part.\n",
        "operationId": "GET_RefundPart",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a specific refund part. You can get the refund part ID from the response of [Get refund parts](https://www.zuora.com/developer/api-reference/#operation/GET_RefundParts).\n",
            "in": "path",
            "name": "refundpartid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a refund. For example, 4028905f5a87c0ff015a889e590e00c9.\n",
            "in": "path",
            "name": "refundId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 4,
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 14:46:03",
                "id": "4028905f5a87c0ff015a889e592b00cf",
                "paymentId": "4028905f5a87c0ff015a889ddfb800c0",
                "success": true,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 14:46:03"
              }
            },
            "schema": {
              "$ref": "#/definitions/RefundPartResponseType"
            }
          }
        },
        "summary": "Get refund part",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/refunds/{refundId}/parts/{refundpartid}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/refunds/{refundId}/parts/{refundpartid}/itemparts": {
      "get": {
        "description": "**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at  [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the information about all items of a refund part. A refund part item is a single line item in a refund part. A refund part can consist of several different types of items.\n",
        "operationId": "GET_RefundItemParts",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "The unique ID of a specific refund part. You can get the refund part ID from the response of [Get refund parts](https://www.zuora.com/developer/api-reference/#operation/GET_RefundParts).\n",
            "in": "path",
            "name": "refundpartid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a refund. For example, 4028905f5a87c0ff015a889e590e00c9.\n",
            "in": "path",
            "name": "refundId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "itemParts": [
                  {
                    "amount": 4,
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 14:46:03",
                    "id": "4028905f5a87c0ff015a889e592a00ce",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 14:46:03"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundItemPartCollectionType"
            }
          }
        },
        "summary": "Get refund part items",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/refunds/{refundId}/parts/{refundpartid}/itemparts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/refunds/{refundId}/parts/{refundpartid}/itemparts/{itempartid}": {
      "get": {
        "description": "**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at  [Zuora Global Support](http://support.zuora.com/).  \n\nRetrieves the information about a specific refund part item. A refund part item is a single line item in a refund part. A refund part can consist of several different types of items.\n",
        "operationId": "GET_RefundItemPart",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a specific refund part item. You can get the refund part item ID from the response of [Get refund part items](https://www.zuora.com/developer/api-reference/#operation/GET_RefundItemParts).\n",
            "in": "path",
            "name": "itempartid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a specific refund part. You can get the refund part ID from the response of [Get refund parts](https://www.zuora.com/developer/api-reference/#operation/GET_RefundParts).\n",
            "in": "path",
            "name": "refundpartid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a refund. For example, 4028905f5a87c0ff015a889e590e00c9.\n",
            "in": "path",
            "name": "refundId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 4,
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-03-01 14:46:03",
                "id": "4028905f5a87c0ff015a889e592a00ce",
                "success": true,
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-03-01 14:46:03"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRefundItemPartType"
            }
          }
        },
        "summary": "Get refund part item",
        "tags": [
          "Refunds"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts/{itempartid}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts/{itempartid}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts/{itempartid}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/refunds/{refundId}/parts/{refundpartid}/itemparts/{itempartid}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts/{itempartid}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/refunds/{refundId}/parts/{refundpartid}/itemparts/{itempartid}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-events/revenue-schedules/{rs-number}": {
      "get": {
        "description": "\nThis REST API reference describes how to get all revenue events in a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RevenueEventForRevenueSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_revenue"
          },
          {
            "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueEventDetails": [
                  {
                    "accountId": "2c92c0f8439770960143b2111f5a584e",
                    "cf_phases__c": "Phase 1",
                    "cf_project__c": "project A",
                    "createdOn": "2014-01-21 11:35:42",
                    "currency": "USD",
                    "eventType": "Revenue Distributed",
                    "notes": "Phase 1 Test",
                    "number": "RE-00000001",
                    "revenueItems": [
                      {
                        "accountingPeriodEndDate": "2013-10-31",
                        "accountingPeriodName": "Oct'2013",
                        "accountingPeriodStartDate": "2013-10-01",
                        "amount": 10,
                        "currency": "USD",
                        "isAccountingPeriodClosed": false
                      },
                      {
                        "accountingPeriodName": "Open-Ended",
                        "accountingPeriodStartDate": "2013-11-12",
                        "amount": -10,
                        "currency": "USD",
                        "isAccountingPeriodClosed": false
                      }
                    ],
                    "subscriptionChargeId": "2c92c0f943977b4f0143b22287ed432e",
                    "subscriptionId": "2c92c0f943977b4f0143b23487999327"
                  },
                  {
                    "accountId": "2c92c0f8439770960143b2111f5a584e",
                    "cf_phases__c": "Phase 1",
                    "cf_project__c": "project A",
                    "createdOn": "2014-01-20 16:36:45",
                    "currency": "USD",
                    "eventType": "Invoice Posted",
                    "number": "RE-00000002",
                    "recognitionEnd": "2013-10-10",
                    "recognitionStart": "2013-10-10",
                    "revenueItems": [
                      {
                        "accountingPeriodEndDate": "2013-10-31",
                        "accountingPeriodName": "Oct'2013",
                        "accountingPeriodStartDate": "2013-10-01",
                        "amount": 50,
                        "currency": "USD",
                        "isAccountingPeriodClosed": false
                      }
                    ],
                    "subscriptionChargeId": "2c92c0f943977b4f0143b99987ed432e",
                    "subscriptionId": "2c92c0f943977b4f0143b22287994327"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRevenueEventDetailsType"
            }
          }
        },
        "summary": "Get revenue events for a revenue schedule",
        "tags": [
          "Revenue Events"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-events/revenue-schedules/{rs-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-events/revenue-schedules/{rs-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-events/revenue-schedules/{rs-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-events/revenue-schedules/{rs-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-events/revenue-schedules/{rs-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-events/revenue-schedules/{rs-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-events/{event-number}": {
      "get": {
        "description": "\nThis REST API reference describes how to get revenue event details by specifying the revenue event number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RevenueEventDetails",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The number associated with the revenue event.",
            "in": "path",
            "name": "event-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c92c0f8439770960143b2141f5a584e",
                "cf_phases__c": "Scoping Phase",
                "cf_project__c": "Security",
                "createdOn": "2014-01-20 16:36:45",
                "currency": "USD",
                "eventType": "Invoice Posted",
                "number": "RE-00000001",
                "recognitionEnd": "2013-10-10",
                "recognitionStart": "2013-10-10",
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2013-10-31",
                    "accountingPeriodName": "Oct'2013",
                    "accountingPeriodStartDate": "2013-10-01",
                    "amount": 50,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  }
                ],
                "subscriptionChargeId": "2c92c0f943977b4f0143b23487ed432e",
                "subscriptionId": "2c92c0f943977b4f0143b23487994327",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRevenueEventDetailType"
            }
          }
        },
        "summary": "Get revenue event details",
        "tags": [
          "Revenue Events"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-events/{event-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-events/{event-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-events/{event-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-events/{event-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-events/{event-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-events/{event-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-items/charge-revenue-summaries/{crs-number}": {
      "get": {
        "description": "This REST API reference describes how to get the details for each revenue item in a charge revenue summary by specifying the charge revenue summary number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RevenueItemsByChargeRevenueSummaryNumber",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_accounting"
          },
          {
            "description": "The charge revenue summary number.",
            "in": "path",
            "name": "crs-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2013-09-30",
                    "accountingPeriodName": "Sep'2013",
                    "accountingPeriodStartDate": "2013-09-01",
                    "amount": 35,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodEndDate": "2013-10-31",
                    "accountingPeriodName": "Oct'2013",
                    "accountingPeriodStartDate": "2013-10-01",
                    "amount": 50,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  },
                  {
                    "accountingPeriodName": "Open-Ended",
                    "accountingPeriodStartDate": "2013-12-11",
                    "amount": 150,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRevenueItemsType"
            }
          }
        },
        "summary": "Get revenue items by charge revenue summary number",
        "tags": [
          "Revenue Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-items/charge-revenue-summaries/{crs-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-items/charge-revenue-summaries/{crs-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-items/charge-revenue-summaries/{crs-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-items/charge-revenue-summaries/{crs-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-items/charge-revenue-summaries/{crs-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-items/charge-revenue-summaries/{crs-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-items/revenue-events/{event-number}": {
      "get": {
        "description": "This REST API reference describes how to get the details of each revenue item in a revenue event by specifying the revenue event number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RevenueItemsByChargeRevenueEventNumber",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_accounting"
          },
          {
            "description": "The number associated with the revenue event.",
            "in": "path",
            "name": "event-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2013-10-31",
                    "accountingPeriodName": "Oct'2013",
                    "accountingPeriodStartDate": "2013-10-01",
                    "amount": 50,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRevenueItemsType"
            }
          }
        },
        "summary": "Get revenue items by revenue event number",
        "tags": [
          "Revenue Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-items/revenue-events/{event-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "This REST API reference describes how to update custom fields on revenue items by specifying the revenue event number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "PUT_CustomFieldsonRevenueItemsByRevenueEvent",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The number associated with the revenue event.",
            "in": "path",
            "name": "event-number",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTEventRIDetailType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Update custom fields on revenue items by revenue event number",
        "tags": [
          "Revenue Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}' \"https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"revenueItems\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Oct'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Scoping Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Nov'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Design Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"revenueItems\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Oct'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Scoping Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Nov'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Design Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/revenue-items/revenue-events/{event-number}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"revenueItems\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Oct'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Scoping Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Nov'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Design Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-items/revenue-events/{event-number}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"revenueItems\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Oct'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Scoping Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Nov'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Design Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-items/revenue-schedules/{rs-number}": {
      "get": {
        "description": "This REST API reference describes how to get the details for each revenue items in a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RevenueItemsByRevenueSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_accounting"
          },
          {
            "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2013-10-31",
                    "accountingPeriodName": "Oct'2013",
                    "accountingPeriodStartDate": "2013-10-01",
                    "amount": 50,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRsRevenueItemsType"
            }
          }
        },
        "summary": "Get revenue items by revenue schedule",
        "tags": [
          "Revenue Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-items/revenue-schedules/{rs-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "This REST API reference describes how to update custom fields on revenue Items by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "PUT_CustomFieldsonRevenueItemsByRevenueSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTScheduleRIDetailType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Update custom fields on revenue items by revenue schedule number",
        "tags": [
          "Revenue Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}' \"https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"revenueItems\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Oct'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Scoping Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Nov'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Design Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"revenueItems\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Oct'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Scoping Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Nov'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Design Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/revenue-items/revenue-schedules/{rs-number}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"revenueItems\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Oct'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Scoping Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Nov'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Design Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-items/revenue-schedules/{rs-number}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"revenueItems\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Oct'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Scoping Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Nov'2014\\\", \\n            \\\"cf_phases__c\\\": \\\"Design Phase\\\", \\n            \\\"cf_project__c\\\": \\\"Security\\\"\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-recognition-rules/product-charges/{charge-key}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves the revenue recognition rule associated with a production rate plan charge by specifying the charge ID.\n",
        "operationId": "GET_RevenueRecRulebyProductRatePlanCharge",
        "parameters": [
          {
            "description": "The unique ID of a product rate plan charge. For example, 8a8082e65ba86084015bb323d3c61d82.\n",
            "in": "path",
            "name": "charge-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueRecognitionRuleName": "Custom - Unlimited recognition",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRevenueRecognitionRuleAssociationType"
            }
          }
        },
        "summary": "Get revenue recognition rule by product rate plan charge",
        "tags": [
          "Revenue Rules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-recognition-rules/product-charges/{charge-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-recognition-rules/product-charges/{charge-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-recognition-rules/product-charges/{charge-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-recognition-rules/product-charges/{charge-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-recognition-rules/product-charges/{charge-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-recognition-rules/product-charges/{charge-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-recognition-rules/subscription-charges/{charge-key}": {
      "get": {
        "description": "Retrieves the revenue recognition rule associated with a subscription charge by specifying the charge ID. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RevenueRecRules",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of the subscription rate plan charge. For example, 402892793e173340013e173b81000012.\n",
            "in": "path",
            "name": "charge-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueRecognitionRuleName": "Recognize upon invoicing",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRevenueRecognitionRuleAssociationType"
            }
          }
        },
        "summary": "Get revenue recognition rule by subscription charge",
        "tags": [
          "Revenue Rules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-recognition-rules/subscription-charges/{charge-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-recognition-rules/subscription-charges/{charge-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-recognition-rules/subscription-charges/{charge-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-recognition-rules/subscription-charges/{charge-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-recognition-rules/subscription-charges/{charge-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-recognition-rules/subscription-charges/{charge-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/credit-memo-items/{cmi-id}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the details about a revenue schedule by specifying a valid credit memo item ID.\n",
        "operationId": "GET_RSbyCreditMemoItem",
        "parameters": [
          {
            "description": "The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).\n",
            "in": "path",
            "name": "cmi-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c90838f42cf16030142cf215ecb0014",
                "amount": -100,
                "cf__c": "custom field",
                "createdOn": "2017-03-03 08:52:59",
                "currency": "USD",
                "linkedTransactionId": "4028903b5a7eb9bc015a91a7bb380171",
                "linkedTransactionNumber": "CM00000001",
                "linkedTransactionType": "CreditMemoItem",
                "number": "RS-00000116",
                "productChargeId": "4028903b5a7eb9bc015a91a744a90165",
                "recognitionRuleName": "Recognize upon invoicing",
                "recognizedRevenue": 0,
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2017-03-31",
                    "accountingPeriodName": "Mar-2017",
                    "accountingPeriodStartDate": "2017-03-01",
                    "amount": -100,
                    "cf__c": "custom field",
                    "currency": "USD",
                    "deferredRevenueAccountingCode": "Deferred Revenue",
                    "deferredRevenueAccountingCodeType": "Deferred Revenue",
                    "isAccountingPeriodClosed": false,
                    "recognizedRevenueAccountingCode": "Subscription Revenue",
                    "recognizedRevenueAccountingCodeType": "Sales Revenue"
                  }
                ],
                "revenueScheduleDate": "2017-03-03",
                "subscriptionChargeId": "4028903b5a7eb9bc015a91a744a90222",
                "subscriptionId": "4028903b5a7eb9bc015a91a744a90111",
                "success": true,
                "undistributedUnrecognizedRevenue": 0,
                "unrecognizedRevenue": -100,
                "updatedOn": "2017-03-03 08:53:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRSDetailType"
            }
          }
        },
        "summary": "Get revenue schedule by credit memo item ID\n",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-schedules/credit-memo-items/{cmi-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nCreates a revenue schedule for a credit memo item, and manually distribute the revenue.\n",
        "operationId": "POST_RSforCrditMemoItem_ManualDistribution",
        "parameters": [
          {
            "description": "The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).\n",
            "in": "path",
            "name": "cmi-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "RS-00000119",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionResponseType"
            }
          }
        },
        "summary": "Create revenue schedule for credit memo item (manual distribution)\n",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}' \"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/credit-memo-items/{cmi-id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/credit-memo-items/{cmi-id}/distribute-revenue-with-date-range": {
      "post": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nCreates a revenue schedule for a credit memo item, and automatically distribute the revenue by specifying the recognition start and end dates.\n",
        "operationId": "POST_RSforCreditMemoItem_DistributeByDateRange",
        "parameters": [
          {
            "description": "The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).\n",
            "in": "path",
            "name": "cmi-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionRatablyType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "RS-00000119",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionResponseType"
            }
          }
        },
        "summary": "Create revenue schedule for credit memo item (distribute by date range)\n",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"application/json\": {\n        \"distributionType\": \"daily distribution\", \n        \"notes\": \"notes\", \n        \"recognitionEnd\": \"2016-12-31\", \n        \"recognitionStart\": \"2016-01-01\", \n        \"revenueEvent\": {\n            \"eventType\": \"Credit Memo Posted | Debit Memo Posted\", \n            \"eventTypeSystemId\": \"CreditMemoPosted__z | DebitMemoPosted__z\", \n            \"notes\": \"some notes\"\n        }\n    }\n}' \"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}/distribute-revenue-with-date-range\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}/distribute-revenue-with-date-range');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"application/json\": {\n        \"distributionType\": \"daily distribution\", \n        \"notes\": \"notes\", \n        \"recognitionEnd\": \"2016-12-31\", \n        \"recognitionStart\": \"2016-01-01\", \n        \"revenueEvent\": {\n            \"eventType\": \"Credit Memo Posted | Debit Memo Posted\", \n            \"eventTypeSystemId\": \"CreditMemoPosted__z | DebitMemoPosted__z\", \n            \"notes\": \"some notes\"\n        }\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"application/json\\\": {\\n        \\\"distributionType\\\": \\\"daily distribution\\\", \\n        \\\"notes\\\": \\\"notes\\\", \\n        \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n        \\\"recognitionStart\\\": \\\"2016-01-01\\\", \\n        \\\"revenueEvent\\\": {\\n            \\\"eventType\\\": \\\"Credit Memo Posted | Debit Memo Posted\\\", \\n            \\\"eventTypeSystemId\\\": \\\"CreditMemoPosted__z | DebitMemoPosted__z\\\", \\n            \\\"notes\\\": \\\"some notes\\\"\\n        }\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}/distribute-revenue-with-date-range\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"application/json\\\": {\\n        \\\"distributionType\\\": \\\"daily distribution\\\", \\n        \\\"notes\\\": \\\"notes\\\", \\n        \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n        \\\"recognitionStart\\\": \\\"2016-01-01\\\", \\n        \\\"revenueEvent\\\": {\\n            \\\"eventType\\\": \\\"Credit Memo Posted | Debit Memo Posted\\\", \\n            \\\"eventTypeSystemId\\\": \\\"CreditMemoPosted__z | DebitMemoPosted__z\\\", \\n            \\\"notes\\\": \\\"some notes\\\"\\n        }\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/credit-memo-items/{cmi-id}/distribute-revenue-with-date-range\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}/distribute-revenue-with-date-range\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"application/json\\\": {\\n        \\\"distributionType\\\": \\\"daily distribution\\\", \\n        \\\"notes\\\": \\\"notes\\\", \\n        \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n        \\\"recognitionStart\\\": \\\"2016-01-01\\\", \\n        \\\"revenueEvent\\\": {\\n            \\\"eventType\\\": \\\"Credit Memo Posted | Debit Memo Posted\\\", \\n            \\\"eventTypeSystemId\\\": \\\"CreditMemoPosted__z | DebitMemoPosted__z\\\", \\n            \\\"notes\\\": \\\"some notes\\\"\\n        }\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/credit-memo-items/{cmi-id}/distribute-revenue-with-date-range\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"application/json\\\": {\\n        \\\"distributionType\\\": \\\"daily distribution\\\", \\n        \\\"notes\\\": \\\"notes\\\", \\n        \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n        \\\"recognitionStart\\\": \\\"2016-01-01\\\", \\n        \\\"revenueEvent\\\": {\\n            \\\"eventType\\\": \\\"Credit Memo Posted | Debit Memo Posted\\\", \\n            \\\"eventTypeSystemId\\\": \\\"CreditMemoPosted__z | DebitMemoPosted__z\\\", \\n            \\\"notes\\\": \\\"some notes\\\"\\n        }\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/debit-memo-items/{dmi-id}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the details about a revenue schedule by specifying a valid debit memo item ID.\n",
        "operationId": "GET_RSbyDebitMemoItem",
        "parameters": [
          {
            "description": "The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).\n",
            "in": "path",
            "name": "dmi-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c90838f42cf16030142cf215ecb0014",
                "amount": -100,
                "cf__c": "custom field",
                "createdOn": "2017-03-03 08:52:59",
                "currency": "USD",
                "linkedTransactionId": "4028903b5a7eb9bc015a33a7bb380171",
                "linkedTransactionNumber": "DM00000001",
                "linkedTransactionType": "DebitMemoItem",
                "number": "RS-00000117",
                "productChargeId": "4028903b5a7eb9bc015a91a734a90165",
                "recognitionRuleName": "Recognize upon invoicing",
                "recognizedRevenue": 0,
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2017-03-31",
                    "accountingPeriodName": "Mar-2017",
                    "accountingPeriodStartDate": "2017-03-01",
                    "amount": -100,
                    "cf__c": "custom field",
                    "currency": "USD",
                    "deferredRevenueAccountingCode": "Deferred Revenue",
                    "deferredRevenueAccountingCodeType": "Deferred Revenue",
                    "isAccountingPeriodClosed": false,
                    "recognizedRevenueAccountingCode": "Subscription Revenue",
                    "recognizedRevenueAccountingCodeType": "Sales Revenue"
                  }
                ],
                "revenueScheduleDate": "2017-03-03",
                "subscriptionChargeId": "4028903b5a7eb9bc015a91a344a90222",
                "subscriptionId": "4028903b5a7eb9bc015a91a744a30111",
                "success": true,
                "undistributedUnrecognizedRevenue": 0,
                "unrecognizedRevenue": -100,
                "updatedOn": "2017-03-03 08:53:00"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRSDetailType"
            }
          }
        },
        "summary": "Get revenue schedule by debit memo item ID\n",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-schedules/debit-memo-items/{dmi-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nCreates a revenue schedule for a debit memo item, and manually distribute the revenue.\n",
        "operationId": "POST_RSforDebitMemoItem_ManualDistribution",
        "parameters": [
          {
            "description": "The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).\n",
            "in": "path",
            "name": "dmi-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "RS-00000119",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionResponseType"
            }
          }
        },
        "summary": "Create revenue schedule for debit memo item (manual distribution)\n",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}' \"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/debit-memo-items/{dmi-id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/debit-memo-items/{dmi-id}/distribute-revenue-with-date-range": {
      "post": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nCreates a revenue schedule for a debit memo item, and automatically distribute the revenue by specifying the recognition start and end dates.\n",
        "operationId": "POST_RSforDebitMemoItem_DistributeByDateRange",
        "parameters": [
          {
            "description": "The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).\n",
            "in": "path",
            "name": "dmi-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionRatablyType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "RS-00000119",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionResponseType"
            }
          }
        },
        "summary": "Create revenue schedule for debit memo item (distribute by date range)\n",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"application/json\": {\n        \"distributionType\": \"daily distribution\", \n        \"notes\": \"notes\", \n        \"recognitionEnd\": \"2016-12-31\", \n        \"recognitionStart\": \"2016-01-01\", \n        \"revenueEvent\": {\n            \"eventType\": \"Credit Memo Posted | Debit Memo Posted\", \n            \"eventTypeSystemId\": \"CreditMemoPosted__z | DebitMemoPosted__z\", \n            \"notes\": \"some notes\"\n        }\n    }\n}' \"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}/distribute-revenue-with-date-range\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}/distribute-revenue-with-date-range');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"application/json\": {\n        \"distributionType\": \"daily distribution\", \n        \"notes\": \"notes\", \n        \"recognitionEnd\": \"2016-12-31\", \n        \"recognitionStart\": \"2016-01-01\", \n        \"revenueEvent\": {\n            \"eventType\": \"Credit Memo Posted | Debit Memo Posted\", \n            \"eventTypeSystemId\": \"CreditMemoPosted__z | DebitMemoPosted__z\", \n            \"notes\": \"some notes\"\n        }\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"application/json\\\": {\\n        \\\"distributionType\\\": \\\"daily distribution\\\", \\n        \\\"notes\\\": \\\"notes\\\", \\n        \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n        \\\"recognitionStart\\\": \\\"2016-01-01\\\", \\n        \\\"revenueEvent\\\": {\\n            \\\"eventType\\\": \\\"Credit Memo Posted | Debit Memo Posted\\\", \\n            \\\"eventTypeSystemId\\\": \\\"CreditMemoPosted__z | DebitMemoPosted__z\\\", \\n            \\\"notes\\\": \\\"some notes\\\"\\n        }\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}/distribute-revenue-with-date-range\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"application/json\\\": {\\n        \\\"distributionType\\\": \\\"daily distribution\\\", \\n        \\\"notes\\\": \\\"notes\\\", \\n        \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n        \\\"recognitionStart\\\": \\\"2016-01-01\\\", \\n        \\\"revenueEvent\\\": {\\n            \\\"eventType\\\": \\\"Credit Memo Posted | Debit Memo Posted\\\", \\n            \\\"eventTypeSystemId\\\": \\\"CreditMemoPosted__z | DebitMemoPosted__z\\\", \\n            \\\"notes\\\": \\\"some notes\\\"\\n        }\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/debit-memo-items/{dmi-id}/distribute-revenue-with-date-range\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}/distribute-revenue-with-date-range\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"application/json\\\": {\\n        \\\"distributionType\\\": \\\"daily distribution\\\", \\n        \\\"notes\\\": \\\"notes\\\", \\n        \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n        \\\"recognitionStart\\\": \\\"2016-01-01\\\", \\n        \\\"revenueEvent\\\": {\\n            \\\"eventType\\\": \\\"Credit Memo Posted | Debit Memo Posted\\\", \\n            \\\"eventTypeSystemId\\\": \\\"CreditMemoPosted__z | DebitMemoPosted__z\\\", \\n            \\\"notes\\\": \\\"some notes\\\"\\n        }\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/debit-memo-items/{dmi-id}/distribute-revenue-with-date-range\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"application/json\\\": {\\n        \\\"distributionType\\\": \\\"daily distribution\\\", \\n        \\\"notes\\\": \\\"notes\\\", \\n        \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n        \\\"recognitionStart\\\": \\\"2016-01-01\\\", \\n        \\\"revenueEvent\\\": {\\n            \\\"eventType\\\": \\\"Credit Memo Posted | Debit Memo Posted\\\", \\n            \\\"eventTypeSystemId\\\": \\\"CreditMemoPosted__z | DebitMemoPosted__z\\\", \\n            \\\"notes\\\": \\\"some notes\\\"\\n        }\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/": {
      "get": {
        "description": "Retrieves the details of a revenue schedule by specifying a valid invoice item adjustment identifier. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RSbyInvoiceItemAdjustment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72.",
            "in": "path",
            "name": "invoice-item-adj-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c92c0f8439770960143b2141f5a584e",
                "amount": -25,
                "cf_phases__c": "Phase 1",
                "cf_project__c": "project A",
                "createdOn": "2014-01-21 13:52:38",
                "currency": "USD",
                "linkedTransactionId": "2c92c0f8439770a40143b6ca76df205a",
                "linkedTransactionNumber": "IIA-00000070",
                "linkedTransactionType": "InvoiceItemAdjustment",
                "number": "RS-00000273",
                "recognitionRuleName": "Recognize upon invoicing",
                "recognizedRevenue": 0,
                "revenueItems": [
                  {
                    "accountingPeriodName": "Open-Ended",
                    "accountingPeriodStartDate": "2013-12-11",
                    "amount": -25,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false
                  }
                ],
                "revenueScheduleDate": "2014-01-21",
                "subscriptionChargeId": "2c92c0f943977b4f0143b23487ed432e",
                "subscriptionId": "2c92c0f943977b4f0143b23487994327",
                "success": true,
                "undistributedUnrecognizedRevenue": -25,
                "unrecognizedRevenue": -25,
                "updatedOn": "2014-01-21 13:52:38"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRSDetailType"
            }
          }
        },
        "summary": "Get revenue schedule by invoice item adjustment",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}": {
      "post": {
        "description": "Creates a revenue schedule for an Invoice Item Adjustment and manually distribute the revenue.\n",
        "operationId": "POST_RSforInvoiceItemAdjustment_ManualDistribution",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72.\nIf the specified Invoice Item Adjustment is already associated with a revenue schedule, the call will fail.\n",
            "in": "path",
            "name": "invoice-item-adj-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "rs-00000002",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionResponseType"
            }
          }
        },
        "summary": "Create revenue schedule for Invoice Item Adjustment (manual distribution)",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}' \"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range": {
      "post": {
        "description": "Creates a revenue schedule for an Invoice Item Adjustment and distribute the revenue by specifying the recognition start and end dates.\n",
        "operationId": "POST_RSforInvoiceItemAdjustment_DistributeByDateRange",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72.\nIf the specified Invoice Item Adjustment is already associated with a revenue schedule, the call will fail.\n",
            "in": "path",
            "name": "invoice-item-adj-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByDateRangeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "RS-00000003",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionResponseType"
            }
          }
        },
        "summary": "Create revenue schedule for Invoice Item Adjustment (distribute by date range)",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}' \"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"customField__c\\\": null, \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2016-12-1\\\", \\n    \\\"revenueEvent\\\": {\\n        \\\"customField__c\\\": null, \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"customField__c\\\": null, \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2016-12-1\\\", \\n    \\\"revenueEvent\\\": {\\n        \\\"customField__c\\\": null, \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"customField__c\\\": null, \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2016-12-1\\\", \\n    \\\"revenueEvent\\\": {\\n        \\\"customField__c\\\": null, \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"customField__c\\\": null, \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2016-12-1\\\", \\n    \\\"revenueEvent\\\": {\\n        \\\"customField__c\\\": null, \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/invoice-items/{invoice-item-id}": {
      "get": {
        "description": "Retrieves the details of a revenue schedule by specifying the invoice item ID.\n",
        "operationId": "GET_RSbyInvoiceItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "A valid Invoice Item ID.",
            "in": "path",
            "name": "invoice-item-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c92c0f8439770960143b2141f5a584e",
                "amount": 50,
                "cf_phases__c": "Phase 1",
                "cf_project__c": "project A",
                "createdOn": "2014-01-21 13:59:25",
                "currency": "USD",
                "linkedTransactionId": "2c92c094439782460143b62c2ee60f59",
                "linkedTransactionType": "InvoiceItem",
                "number": "RS-00000290",
                "recognitionRuleName": "Recognize upon invoicing",
                "recognizedRevenue": 0,
                "revenueItems": [
                  {
                    "accountingPeriodName": "Open-Ended",
                    "accountingPeriodStartDate": "2013-12-11",
                    "amount": 50,
                    "currency": "USD",
                    "isAccountingPeriodClosed": false,
                    "recognizedRevenueAccountingCode": "Recurring Monthly Revenue",
                    "recognizedRevenueAccountingCodeType": "Revenue: Sales"
                  }
                ],
                "revenueScheduleDate": "2014-01-21",
                "subscriptionChargeId": "2c92c0f943977b4f0143b23487ed432e",
                "subscriptionId": "2c92c0f943977b4f0143b23487994327",
                "success": true,
                "undistributedUnrecognizedRevenue": 50,
                "unrecognizedRevenue": 50,
                "updatedOn": "2014-01-21 13:59:25"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRSDetailType"
            }
          }
        },
        "summary": "Get revenue schedule by invoice item ID",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-schedules/invoice-items/{invoice-item-id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "Creates a revenue schedule for an Invoice Item and manually distribute the revenue.\n",
        "operationId": "POST_RSforInvoiceItem_ManualDistribution",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the Invoice Item, for example, e20b07fd416dcfcf0141c81164fd0a75.\nIf the specified Invoice Item is already associated with a revenue schedule, the call will fail.\n",
            "in": "path",
            "name": "invoice-item-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "RS-00000002",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionResponseType"
            }
          }
        },
        "summary": "Create revenue schedule for Invoice Item (manual distribution)",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}' \"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/invoice-items/{invoice-item-id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan '16\\\", \\n            \\\"newAmount\\\": \\\"20\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Open-Ended\\\", \\n            \\\"newAmount\\\": \\\"30\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"My notes\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range": {
      "post": {
        "description": "Creates a revenue schedule for an Invoice Item and distribute the revenue by specifying the recognition start and end dates.\n",
        "operationId": "POST_RSforInvoiceItem_DistributeByDateRange",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the Invoice Item, for example, e20b07fd416dcfcf0141c81164fd0a75.\nIf the specified Invoice Item is already associated with a revenue schedule, the call will fail.\n",
            "in": "path",
            "name": "invoice-item-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByDateRangeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "RS-00000003",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByTransactionResponseType"
            }
          }
        },
        "summary": "Create revenue schedule for Invoice Item (distribute by date range)",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}' \"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"customField__c\\\": null, \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2016-12-1\\\", \\n    \\\"revenueEvent\\\": {\\n        \\\"customField__c\\\": null, \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"customField__c\\\": null, \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2016-12-1\\\", \\n    \\\"revenueEvent\\\": {\\n        \\\"customField__c\\\": null, \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"\\\"\\n    }\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"customField__c\\\": null, \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2016-12-1\\\", \\n    \\\"revenueEvent\\\": {\\n        \\\"customField__c\\\": null, \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"\\\"\\n    }\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"customField__c\\\": null, \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2016-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2016-12-1\\\", \\n    \\\"revenueEvent\\\": {\\n        \\\"customField__c\\\": null, \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n        \\\"notes\\\": \\\"\\\"\\n    }\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/product-charges/{charge-key}/{account-key}": {
      "get": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nRetrieves the details about all revenue schedules of a product rate plan charge by specifying the charge ID and billing account ID.\n",
        "operationId": "GET_RSbyProductChargeAndBillingAccount",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_revenue"
          },
          {
            "description": "The account number or account ID.\n",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique ID of a product rate plan charge. For example, 8a8082e65ba86084015bb323d3c61d82.\n",
            "in": "path",
            "name": "charge-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueSchedules": [
                  {
                    "accountId": "2c90838f42cf16030142cf215ecb0014",
                    "amount": 100,
                    "createdOn": "2017-03-03 09:55:53",
                    "currency": "USD",
                    "linkedTransactionId": "4028903b5a7eb9bc015a91df45ea024e",
                    "linkedTransactionNumber": "DM00000003",
                    "linkedTransactionType": "DebitMemoItem",
                    "notes": "some notes",
                    "number": "RS-00000123",
                    "productChargeId": "4028903b5a7eb9bc015a91a77404016a",
                    "recognitionRuleName": "Custom - Unlimited recognition",
                    "recognizedRevenue": 0,
                    "revenueItems": [
                      {
                        "accountingPeriodEndDate": "2017-03-31",
                        "accountingPeriodName": "Mar-2017",
                        "accountingPeriodStartDate": "2017-03-01",
                        "amount": 50,
                        "currency": "USD",
                        "isAccountingPeriodClosed": false
                      },
                      {
                        "accountingPeriodEndDate": "2017-04-30",
                        "accountingPeriodName": "Apr-2017",
                        "accountingPeriodStartDate": "2017-04-01",
                        "amount": 50,
                        "currency": "USD",
                        "isAccountingPeriodClosed": false
                      }
                    ],
                    "revenueScheduleDate": "2017-03-03",
                    "undistributedUnrecognizedRevenue": 0,
                    "unrecognizedRevenue": 100,
                    "updatedOn": "2017-03-03 09:55:53"
                  },
                  {
                    "accountId": "2c90838f42cf16030142cf215ecb0014",
                    "amount": 98.9,
                    "createdOn": "2017-03-03 09:36:57",
                    "currency": "USD",
                    "linkedTransactionId": "4028903b5a7eb9bc015a91cc368101d1",
                    "linkedTransactionNumber": "DM00000002",
                    "linkedTransactionType": "DebitMemoItem",
                    "notes": "notes",
                    "number": "RS-00000120",
                    "productChargeId": "4028903b5a7eb9bc015a91a77404016a",
                    "recognitionRuleName": "Custom - Unlimited recognition",
                    "recognizedRevenue": 0,
                    "revenueItems": [
                      {
                        "accountingPeriodEndDate": "2016-01-31",
                        "accountingPeriodName": "Jan-2016",
                        "accountingPeriodStartDate": "2016-01-01",
                        "amount": 98.9,
                        "currency": "USD",
                        "isAccountingPeriodClosed": false
                      }
                    ],
                    "revenueScheduleDate": "2017-03-03",
                    "undistributedUnrecognizedRevenue": 0,
                    "unrecognizedRevenue": 100,
                    "updatedOn": "2017-03-03 09:36:57"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRSDetailsByProductChargeType"
            }
          }
        },
        "summary": "Get all revenue schedules of product charge by charge ID and billing account ID\n",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-schedules/product-charges/{charge-key}/{account-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/product-charges/{charge-key}/{account-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/product-charges/{charge-key}/{account-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-schedules/product-charges/{charge-key}/{account-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/product-charges/{charge-key}/{account-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/product-charges/{charge-key}/{account-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/subscription-charges/{charge-key}": {
      "get": {
        "description": "Retrieves the revenue schedule details by specifying subscription charge ID. Request and response field descriptions and sample code are provided\n",
        "operationId": "GET_RSforSubscCharge",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize_finance_revenue"
          },
          {
            "description": "ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012.",
            "in": "path",
            "name": "charge-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "nextPage": "https://rest.zuora.com/v1/revenue-schedules/subscription-charges/2c92c0f943977b4f0143b23487ed432e?page=2&pageSize=8",
                "revenueSchedules": [
                  {
                    "accountId": "2c92c0f8439770960143b2141f5a584e",
                    "amount": 50,
                    "cf_phases__c": "Phase 1",
                    "cf_project__c": "project A",
                    "createdOn": "2014-01-21 13:59:25",
                    "currency": "USD",
                    "linkedTransactionId": "2c92c094439782460143b62c2ee90f5a",
                    "linkedTransactionType": "InvoiceItem",
                    "number": "RS-00000291",
                    "recognitionRuleName": "Recognize upon invoicing",
                    "recognizedRevenue": 0,
                    "revenueItems": [
                      {
                        "accountingPeriodName": "Open-Ended",
                        "accountingPeriodStartDate": "2013-12-11",
                        "amount": 50,
                        "currency": "USD",
                        "isAccountingPeriodClosed": false
                      }
                    ],
                    "revenueScheduleDate": "2014-01-21",
                    "subscriptionChargeId": "2c92c0f943977b4f0143b23487ed432e",
                    "subscriptionId": "2c92c0f943977b4f0143b23487994327",
                    "undistributedUnrecognizedRevenue": 50,
                    "unrecognizedRevenue": 50,
                    "updatedOn": "2014-01-21 13:59:25"
                  },
                  {
                    "accountId": "2c92c0f8439770960143b2141f5a584e",
                    "amount": 50,
                    "cf_phases__c": "Phase 1",
                    "cf_project__c": "project A",
                    "createdOn": "2014-01-21 13:59:25",
                    "currency": "USD",
                    "linkedTransactionId": "2c92c094439782460143b62c2ee60f59",
                    "linkedTransactionNumber": "INV00000838",
                    "linkedTransactionType": "InvoiceItem",
                    "number": "RS-00000290",
                    "recognitionRuleName": "Recognize upon invoicing",
                    "recognizedRevenue": 0,
                    "revenueItems": [
                      {
                        "accountingPeriodName": "Open-Ended",
                        "accountingPeriodStartDate": "2013-12-11",
                        "amount": 50,
                        "currency": "USD",
                        "isAccountingPeriodClosed": false
                      }
                    ],
                    "revenueScheduleDate": "2014-01-21",
                    "subscriptionChargeId": "2c92c0f943977b4f0143b23487ed432e",
                    "subscriptionId": "2c92c0f943977b4f0143b23487994327",
                    "undistributedUnrecognizedRevenue": 50,
                    "unrecognizedRevenue": 50,
                    "updatedOn": "2014-01-21 13:59:25"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRSDetailsByChargeType"
            }
          }
        },
        "summary": "Get revenue schedule by subscription charge",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-schedules/subscription-charges/{charge-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "post": {
        "description": "Creates a revenue schedule by specifying the subscription charge. This method is for custom unlimited revenue recognition only.\n",
        "operationId": "POST_RSforSubsCharge",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012.",
            "in": "path",
            "name": "charge-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByChargeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueScheduleNumber": "rs-00000001",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRevenueScheduleByChargeResponseType"
            }
          }
        },
        "summary": "Create revenue schedule on subscription charge",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"amount\": \"300\", \n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"deferredRevenueAccountingCode\": \"Deferred Revenue\", \n    \"deferredRevenueAccountingCodeType\": \"Deferred Revenue\", \n    \"overrideChargeAccountingCodes\": \"true\", \n    \"recognizedRevenueAccountingCode\": \"Subscription Revenue\", \n    \"recognizedRevenueAccountingCodeType\": \"Sales Revenue\", \n    \"referenceId\": \"rs transaction ref\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"100\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"200\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"cf_phases__c\": \"Phase 1\", \n        \"cf_project__c\": \"project A\", \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"1111111\", \n        \"notes\": \"Manually distribute revenue by usage\"\n    }, \n    \"revenueScheduleDate\": \"2013-01-01\"\n}' \"https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"amount\": \"300\", \n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"deferredRevenueAccountingCode\": \"Deferred Revenue\", \n    \"deferredRevenueAccountingCodeType\": \"Deferred Revenue\", \n    \"overrideChargeAccountingCodes\": \"true\", \n    \"recognizedRevenueAccountingCode\": \"Subscription Revenue\", \n    \"recognizedRevenueAccountingCodeType\": \"Sales Revenue\", \n    \"referenceId\": \"rs transaction ref\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"100\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"200\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"cf_phases__c\": \"Phase 1\", \n        \"cf_project__c\": \"project A\", \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"1111111\", \n        \"notes\": \"Manually distribute revenue by usage\"\n    }, \n    \"revenueScheduleDate\": \"2013-01-01\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"amount\\\": \\\"300\\\", \\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"cf_project__c\\\": \\\"project A\\\", \\n    \\\"deferredRevenueAccountingCode\\\": \\\"Deferred Revenue\\\", \\n    \\\"deferredRevenueAccountingCodeType\\\": \\\"Deferred Revenue\\\", \\n    \\\"overrideChargeAccountingCodes\\\": \\\"true\\\", \\n    \\\"recognizedRevenueAccountingCode\\\": \\\"Subscription Revenue\\\", \\n    \\\"recognizedRevenueAccountingCodeType\\\": \\\"Sales Revenue\\\", \\n    \\\"referenceId\\\": \\\"rs transaction ref\\\", \\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan'2013\\\", \\n            \\\"newAmount\\\": \\\"100\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Feb'2013\\\", \\n            \\\"newAmount\\\": \\\"200\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n        \\\"cf_project__c\\\": \\\"project A\\\", \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"1111111\\\", \\n        \\\"notes\\\": \\\"Manually distribute revenue by usage\\\"\\n    }, \\n    \\\"revenueScheduleDate\\\": \\\"2013-01-01\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"amount\\\": \\\"300\\\", \\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"cf_project__c\\\": \\\"project A\\\", \\n    \\\"deferredRevenueAccountingCode\\\": \\\"Deferred Revenue\\\", \\n    \\\"deferredRevenueAccountingCodeType\\\": \\\"Deferred Revenue\\\", \\n    \\\"overrideChargeAccountingCodes\\\": \\\"true\\\", \\n    \\\"recognizedRevenueAccountingCode\\\": \\\"Subscription Revenue\\\", \\n    \\\"recognizedRevenueAccountingCodeType\\\": \\\"Sales Revenue\\\", \\n    \\\"referenceId\\\": \\\"rs transaction ref\\\", \\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan'2013\\\", \\n            \\\"newAmount\\\": \\\"100\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Feb'2013\\\", \\n            \\\"newAmount\\\": \\\"200\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n        \\\"cf_project__c\\\": \\\"project A\\\", \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"1111111\\\", \\n        \\\"notes\\\": \\\"Manually distribute revenue by usage\\\"\\n    }, \\n    \\\"revenueScheduleDate\\\": \\\"2013-01-01\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/revenue-schedules/subscription-charges/{charge-key}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"amount\\\": \\\"300\\\", \\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"cf_project__c\\\": \\\"project A\\\", \\n    \\\"deferredRevenueAccountingCode\\\": \\\"Deferred Revenue\\\", \\n    \\\"deferredRevenueAccountingCodeType\\\": \\\"Deferred Revenue\\\", \\n    \\\"overrideChargeAccountingCodes\\\": \\\"true\\\", \\n    \\\"recognizedRevenueAccountingCode\\\": \\\"Subscription Revenue\\\", \\n    \\\"recognizedRevenueAccountingCodeType\\\": \\\"Sales Revenue\\\", \\n    \\\"referenceId\\\": \\\"rs transaction ref\\\", \\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan'2013\\\", \\n            \\\"newAmount\\\": \\\"100\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Feb'2013\\\", \\n            \\\"newAmount\\\": \\\"200\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n        \\\"cf_project__c\\\": \\\"project A\\\", \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"1111111\\\", \\n        \\\"notes\\\": \\\"Manually distribute revenue by usage\\\"\\n    }, \\n    \\\"revenueScheduleDate\\\": \\\"2013-01-01\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/subscription-charges/{charge-key}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"amount\\\": \\\"300\\\", \\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"cf_project__c\\\": \\\"project A\\\", \\n    \\\"deferredRevenueAccountingCode\\\": \\\"Deferred Revenue\\\", \\n    \\\"deferredRevenueAccountingCodeType\\\": \\\"Deferred Revenue\\\", \\n    \\\"overrideChargeAccountingCodes\\\": \\\"true\\\", \\n    \\\"recognizedRevenueAccountingCode\\\": \\\"Subscription Revenue\\\", \\n    \\\"recognizedRevenueAccountingCodeType\\\": \\\"Sales Revenue\\\", \\n    \\\"referenceId\\\": \\\"rs transaction ref\\\", \\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan'2013\\\", \\n            \\\"newAmount\\\": \\\"100\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Feb'2013\\\", \\n            \\\"newAmount\\\": \\\"200\\\"\\n        }\\n    ], \\n    \\\"revenueEvent\\\": {\\n        \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n        \\\"cf_project__c\\\": \\\"project A\\\", \\n        \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n        \\\"eventTypeSystemId\\\": \\\"1111111\\\", \\n        \\\"notes\\\": \\\"Manually distribute revenue by usage\\\"\\n    }, \\n    \\\"revenueScheduleDate\\\": \\\"2013-01-01\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/{rs-number}": {
      "delete": {
        "description": "Deletes a revenue schedule by specifying its revenue schedule number\n## Prerequisites\nYou must have the Delete Custom Revenue Schedule permissions in Zuora Finance.\n",
        "operationId": "DELETE_RS",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "\nRevenue schedule number of the revenue schedule you want to delete, for example, RS-00000256. To be deleted, the revenue schedule:\n* Must be using a custom unlimited recognition rule.\n* Cannot have any revenue in a closed accounting period.\n* Cannot be included in a summary journal entry.\n* Cannot have a revenue schedule date in a closed accounting period.\n",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete revenue schedule",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-schedules/{rs-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/{rs-number}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/revenue-schedules/{rs-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "Retrieves the details of a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RS",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c92c0f8439770960143b2141f5a584e",
                "amount": 50,
                "cf_phases__c": "Phase 1",
                "createdOn": "2014-01-20 16:36:45",
                "currency": "USD",
                "linkedTransactionId": "2c92c095439782cd0143b239aa234cf5",
                "linkedTransactionType": "InvoiceItem",
                "notes": "change recognition term",
                "number": "RS-00000008",
                "recognitionRuleName": "Recognize upon invoicing",
                "recognizedRevenue": 0,
                "revenueItems": [
                  {
                    "accountingPeriodEndDate": "2013-10-31",
                    "accountingPeriodName": "Nov'2013",
                    "accountingPeriodStartDate": "2013-10-01",
                    "amount": 60,
                    "currency": "USD",
                    "deferredRevenueAccountingCode": "MONTHLY RECURRING CHARGE",
                    "deferredRevenueAccountingCodeType": "Liabilities: Deferred Revenue",
                    "isAccountingPeriodClosed": true,
                    "recognizedRevenueAccountingCode": "MONTHLY RECURRING CHARGE",
                    "recognizedRevenueAccountingCodeType": "Revenue: Sales"
                  },
                  {
                    "accountingPeriodName": "Open-Ended",
                    "accountingPeriodStartDate": "2013-11-01",
                    "amount": -10,
                    "currency": "USD",
                    "deferredRevenueAccountingCode": "MONTHLY RECURRING CHARGE",
                    "deferredRevenueAccountingCodeType": "Liabilities: Sales",
                    "isAccountingPeriodClosed": false,
                    "recognizedRevenueAccountingCode": "MONTHLY RECURRING CHARGE",
                    "recognizedRevenueAccountingCodeType": "Revenue: Sales"
                  }
                ],
                "revenueScheduleDate": "2014-01-20",
                "subscriptionChargeId": "2c92c0f943977b4f0143b23487ed432e",
                "subscriptionId": "2c92c0f943977b4f0143b23487994327",
                "success": true,
                "undistributedUnrecognizedRevenue": -10,
                "unrecognizedRevenue": 50,
                "updatedOn": "2014-01-28 17:05:52"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRSDetailType"
            }
          }
        },
        "summary": "Get revenue schedule details",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/revenue-schedules/{rs-number}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/{rs-number}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/revenue-schedules/{rs-number}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/{rs-number}/basic-information": {
      "put": {
        "description": "Retrieves basic information of a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "PUT_RSBasicInfo",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTRSBasicInfoType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Update revenue schedule basic information",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cf_phases__c\": \"Phase 1\", \n    \"notes\": \"change recognition term\", \n    \"referenceId\": \"Reference ID\"\n}' \"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/basic-information\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/{rs-number}/basic-information');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cf_phases__c\": \"Phase 1\", \n    \"notes\": \"change recognition term\", \n    \"referenceId\": \"Reference ID\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"notes\\\": \\\"change recognition term\\\", \\n    \\\"referenceId\\\": \\\"Reference ID\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/basic-information\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"notes\\\": \\\"change recognition term\\\", \\n    \\\"referenceId\\\": \\\"Reference ID\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/revenue-schedules/{rs-number}/basic-information\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/basic-information\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"notes\\\": \\\"change recognition term\\\", \\n    \\\"referenceId\\\": \\\"Reference ID\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/basic-information\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"notes\\\": \\\"change recognition term\\\", \\n    \\\"referenceId\\\": \\\"Reference ID\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods": {
      "put": {
        "description": "Distributes revenue by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.\n",
        "operationId": "PUT_RevenueAcrossAP",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTAllocateManuallyType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueEventNumber": "RE-00000326",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTRevenueScheduleResponseType"
            }
          }
        },
        "summary": "Distribute revenue across accounting periods",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"Manually distribute revenue for Phase 1\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"500\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"600\"\n        }\n    ]\n}' \"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"Manually distribute revenue for Phase 1\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"500\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"600\"\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"cf_project__c\\\": \\\"project A\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue for Phase 1\\\", \\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan'2013\\\", \\n            \\\"newAmount\\\": \\\"500\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Feb'2013\\\", \\n            \\\"newAmount\\\": \\\"600\\\"\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"cf_project__c\\\": \\\"project A\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue for Phase 1\\\", \\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan'2013\\\", \\n            \\\"newAmount\\\": \\\"500\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Feb'2013\\\", \\n            \\\"newAmount\\\": \\\"600\\\"\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"cf_project__c\\\": \\\"project A\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue for Phase 1\\\", \\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan'2013\\\", \\n            \\\"newAmount\\\": \\\"500\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Feb'2013\\\", \\n            \\\"newAmount\\\": \\\"600\\\"\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 1\\\", \\n    \\\"cf_project__c\\\": \\\"project A\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"Manually distribute revenue for Phase 1\\\", \\n    \\\"revenueDistributions\\\": [\\n        {\\n            \\\"accountingPeriodName\\\": \\\"Jan'2013\\\", \\n            \\\"newAmount\\\": \\\"500\\\"\\n        }, \\n        {\\n            \\\"accountingPeriodName\\\": \\\"Feb'2013\\\", \\n            \\\"newAmount\\\": \\\"600\\\"\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date": {
      "put": {
        "description": "Distributes revenue on a specific recognition date. Request and response field descriptions and sample code are provided.\n",
        "operationId": "PUT_RevenueSpecificDate",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTSpecificDateAllocationType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueEventNumber": "RE-00000326",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTRevenueScheduleResponseType"
            }
          }
        },
        "summary": "Distribute revenue on specific date",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"amount\": \"1000.00\", \n    \"distributeOn\": \"2016-02-03\", \n    \"distributionType\": \"specific date (delta fixed amount)\", \n    \"eventNumber__c\": \"phase 2\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"service delivered and accepted by customer\"\n}' \"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"amount\": \"1000.00\", \n    \"distributeOn\": \"2016-02-03\", \n    \"distributionType\": \"specific date (delta fixed amount)\", \n    \"eventNumber__c\": \"phase 2\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"service delivered and accepted by customer\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"amount\\\": \\\"1000.00\\\", \\n    \\\"distributeOn\\\": \\\"2016-02-03\\\", \\n    \\\"distributionType\\\": \\\"specific date (delta fixed amount)\\\", \\n    \\\"eventNumber__c\\\": \\\"phase 2\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"service delivered and accepted by customer\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"amount\\\": \\\"1000.00\\\", \\n    \\\"distributeOn\\\": \\\"2016-02-03\\\", \\n    \\\"distributionType\\\": \\\"specific date (delta fixed amount)\\\", \\n    \\\"eventNumber__c\\\": \\\"phase 2\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"service delivered and accepted by customer\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"amount\\\": \\\"1000.00\\\", \\n    \\\"distributeOn\\\": \\\"2016-02-03\\\", \\n    \\\"distributionType\\\": \\\"specific date (delta fixed amount)\\\", \\n    \\\"eventNumber__c\\\": \\\"phase 2\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"service delivered and accepted by customer\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"amount\\\": \\\"1000.00\\\", \\n    \\\"distributeOn\\\": \\\"2016-02-03\\\", \\n    \\\"distributionType\\\": \\\"specific date (delta fixed amount)\\\", \\n    \\\"eventNumber__c\\\": \\\"phase 2\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"service delivered and accepted by customer\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range": {
      "put": {
        "description": "Distributes revenue by specifying the recognition start and end dates. Request and response field descriptions and sample code are provided.\n",
        "operationId": "PUT_RevenueByRecognitionStartandEndDates",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Revenue schedule number. Specify the revenue schedule whose revenue you want to distribute.\n  \nThe revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
            "in": "path",
            "name": "rs-number",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTRSTermType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "revenueEventNumber": "RE-00000326",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTRevenueScheduleResponseType"
            }
          }
        },
        "summary": "Distribute revenue by recognition start and end dates",
        "tags": [
          "Revenue Schedules"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cf_phases__c\": \"Phase 2\", \n    \"distributionType\": \"Daily distribution\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"manual distribute revenue by usage\", \n    \"recognitionEnd\": \"2015-12-31\", \n    \"recognitionStart\": \"2015-12-1\"\n}' \"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cf_phases__c\": \"Phase 2\", \n    \"distributionType\": \"Daily distribution\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"manual distribute revenue by usage\", \n    \"recognitionEnd\": \"2015-12-31\", \n    \"recognitionStart\": \"2015-12-1\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 2\\\", \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"manual distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2015-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2015-12-1\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 2\\\", \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"manual distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2015-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2015-12-1\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 2\\\", \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"manual distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2015-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2015-12-1\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"cf_phases__c\\\": \\\"Phase 2\\\", \\n    \\\"distributionType\\\": \\\"Daily distribution\\\", \\n    \\\"eventType\\\": \\\"Revenue Distributed\\\", \\n    \\\"eventTypeSystemId\\\": \\\"RevenueDistributed__z\\\", \\n    \\\"notes\\\": \\\"manual distribute revenue by usage\\\", \\n    \\\"recognitionEnd\\\": \\\"2015-12-31\\\", \\n    \\\"recognitionStart\\\": \\\"2015-12-1\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/rsa-signatures": {
      "post": {
        "description": "\nThe REST API used in Payment Pages 2.0 are CORS (Cross-Origin Resource Sharing) enabled and therefore requires a digital signature. The POST rsa_signatures call generates and returns the required digital signature and token for a Payment Pages 2.0 form. You need to pass the generated signature to your client for it to access Payment Pages 2.0. \n  \nThis REST service should be used only when you implement Payment Pages 2.0. \n",
        "operationId": "POST_RSASignatures",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTRSASignatureType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "key": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB",
                "signature": "VpCAFL2hHC2irxbhWYGLJmdBigjARsCStwHZiQ78z5LyVuBCFr2lkie0db/7E8n38MXaq12Ng5As5Qj+9Nhz6RBsSEWLod7c7hvwNI28OcgBZtcV/wscbWU69EP/+/XrQnF3ZUbHbqmcmhE8C/zNnc2zvHckfArroDW2HxxmATfMJS0xKUm5TrHi4tiILZVMYY1KIUqQTyuXV6uRWYzkqMkFkZDNCxSxf0XwzuBI/VOgTCmFZb0c3+bk/q6+7d/azFCrrg8C3dquCNJRfUeaBou+SLUa4TW3hV4rGd2zpvSrD/425x4qFNGV6JQ7wvIleIdrXU4qbh9nCmYoApMODA==",
                "success": true,
                "tenantId": "12270",
                "token": "E2BJEle7YrAlw93SjkaKthTmzMvXF341"
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTRSASignatureResponseType"
            }
          }
        },
        "summary": "Generate RSA signature",
        "tags": [
          "RSA Signatures"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"method\": \"POST\", \n    \"pageId\": \"2c92c0f855e2b4630155ec9e6a1b6eec\", \n    \"uri\": \"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\"\n}' \"https://rest.zuora.com//v1/rsa-signatures\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/rsa-signatures');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"method\": \"POST\", \n    \"pageId\": \"2c92c0f855e2b4630155ec9e6a1b6eec\", \n    \"uri\": \"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"pageId\\\": \\\"2c92c0f855e2b4630155ec9e6a1b6eec\\\", \\n    \\\"uri\\\": \\\"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/rsa-signatures\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"pageId\\\": \\\"2c92c0f855e2b4630155ec9e6a1b6eec\\\", \\n    \\\"uri\\\": \\\"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/rsa-signatures\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/rsa-signatures\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"pageId\\\": \\\"2c92c0f855e2b4630155ec9e6a1b6eec\\\", \\n    \\\"uri\\\": \\\"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/rsa-signatures\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"pageId\\\": \\\"2c92c0f855e2b4630155ec9e6a1b6eec\\\", \\n    \\\"uri\\\": \\\"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/rsa-signatures/decrypt": {
      "post": {
        "description": "\nThe REST API used in Payment Pages 2.0 are CORS (Cross-Origin Resource Sharing) enabled and therefore requires a digital signature. You use rsa_signatures to generate the required digital signature and token for a Payment Pages 2.0 form, and then you use the decrypt REST service to decrypt the signature to validate the signature and key.\n\nThis REST service should be used only when you implement Payment Pages 2.0. \n",
        "operationId": "POST_DecryptRSASignatures",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTDecryptionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "decryptedSignature": "/apps/publichostedpagelite.do#12270#tpyeSbjfUdpZpY4EMSCy7CrupvuhIdvM#1473658419005#2c92c0f855e2b4630155ec9e6a1b6eec",
                "publicKey": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB",
                "signature": "BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTDecryptResponseType"
            }
          }
        },
        "summary": "Decrypt RSA signature",
        "tags": [
          "RSA Signatures"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"method\": \"POST\", \n    \"publicKey\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\", \n    \"signature\": \"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\"\n}' \"https://rest.zuora.com//v1/rsa-signatures/decrypt\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/rsa-signatures/decrypt');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"method\": \"POST\", \n    \"publicKey\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\", \n    \"signature\": \"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"publicKey\\\": \\\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\\\", \\n    \\\"signature\\\": \\\"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/rsa-signatures/decrypt\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"publicKey\\\": \\\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\\\", \\n    \\\"signature\\\": \\\"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/rsa-signatures/decrypt\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/rsa-signatures/decrypt\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"publicKey\\\": \\\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\\\", \\n    \\\"signature\\\": \\\"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/rsa-signatures/decrypt\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"method\\\": \\\"POST\\\", \\n    \\\"publicKey\\\": \\\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\\\", \\n    \\\"signature\\\": \\\"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/settings/finance/revenue-automation-start-date": {
      "get": {
        "description": "This REST API reference describes how to get the revenue automation start date. Request and response field descriptions and sample code are provided.\n",
        "operationId": "GET_RevenueAutomationStartDate",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "startDate": "2012-02-01",
                "success": true,
                "updatedBy": "MyCorpAdmin",
                "updatedOn": "2013-09-11 22:49:18"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETRevenueStartDateSettingType"
            }
          }
        },
        "summary": "Get the revenue automation start date",
        "tags": [
          "Settings"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/settings/finance/revenue-automation-start-date\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/settings/finance/revenue-automation-start-date');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/settings/finance/revenue-automation-start-date\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/settings/finance/revenue-automation-start-date\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/settings/finance/revenue-automation-start-date\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/settings/finance/revenue-automation-start-date\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions": {
      "post": {
        "description": "This REST API reference describes how to create a new subscription for an existing customer account.\n\n## Notes\nIf invoiceCollect is `true`, the call will not return success = `true` unless the subscription, invoice, and payment are all successful.\n\nDefault values for **customerAcceptanceDate** and **serviceActivationDate** are set as follows.\n\n|        | serviceActivationDate(SA) specified          | serviceActivationDate (SA) NOT specified  |\n| ------------- |:-------------:| -----:|\n| customerAcceptanceDate (CA) specified| SA uses value in the request call; CA uses value in the request call| CA uses value in the request call;SA uses CE as default |\n| customerAcceptanceDate (CA) NOT specified      | SA uses value in the request call; CA uses SA as default |   SA and CA use CE as default |\n",
        "operationId": "POST_Subscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The minor version of the Zuora REST API. \n\nYou only need to set this parameter if you use the following fields:\n* invoice\n* collect\n* runBilling\n* targetDate\n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTSubscriptionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "contractedMrr": 1950,
                "subscriptionId": "402890fc4fa094d5014fa0a4aa78001d",
                "subscriptionNumber": "A-S00000041",
                "success": true,
                "totalContractedValue": 6227.41935465
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTSubscriptionResponseType"
            }
          }
        },
        "summary": "Create subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountKey\": \"A00001115\", \n    \"autoRenew\": true, \n    \"collect\": false, \n    \"contractEffectiveDate\": \"2015-02-1\", \n    \"initialTerm\": \"12\", \n    \"initialTermPeriodType\": \"Week\", \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test POST subscription from z-ruby-sdk\", \n    \"renewalTerm\": \"3\", \n    \"renewalTermPeriodType\": \"Week\", \n    \"runBilling\": true, \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"billCycleDay\": \"5\", \n                    \"billCycleType\": \"SpecificDayofMonth\", \n                    \"billingPeriodAlignment\": \"AlignToCharge\", \n                    \"billingTiming\": \"IN_ARREARS\", \n                    \"description\": \"This is rate plan charge description\", \n                    \"myCustomField__c\": \"test\", \n                    \"number\": \"TestCharge\", \n                    \"price\": 12.01, \n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"triggerDate\": \"2015-09-01\", \n                    \"triggerEvent\": \"SpecificDate\"\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"targetDate\": \"2015-12-31\", \n    \"termType\": \"TERMED\"\n}' \"https://rest.zuora.com//v1/subscriptions\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountKey\": \"A00001115\", \n    \"autoRenew\": true, \n    \"collect\": false, \n    \"contractEffectiveDate\": \"2015-02-1\", \n    \"initialTerm\": \"12\", \n    \"initialTermPeriodType\": \"Week\", \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test POST subscription from z-ruby-sdk\", \n    \"renewalTerm\": \"3\", \n    \"renewalTermPeriodType\": \"Week\", \n    \"runBilling\": true, \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"billCycleDay\": \"5\", \n                    \"billCycleType\": \"SpecificDayofMonth\", \n                    \"billingPeriodAlignment\": \"AlignToCharge\", \n                    \"billingTiming\": \"IN_ARREARS\", \n                    \"description\": \"This is rate plan charge description\", \n                    \"myCustomField__c\": \"test\", \n                    \"number\": \"TestCharge\", \n                    \"price\": 12.01, \n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"triggerDate\": \"2015-09-01\", \n                    \"triggerEvent\": \"SpecificDate\"\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"targetDate\": \"2015-12-31\", \n    \"termType\": \"TERMED\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"accountKey\\\": \\\"A00001115\\\", \\n    \\\"autoRenew\\\": true, \\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2015-02-1\\\", \\n    \\\"initialTerm\\\": \\\"12\\\", \\n    \\\"initialTermPeriodType\\\": \\\"Week\\\", \\n    \\\"myCustomField__c\\\": \\\"test\\\", \\n    \\\"notes\\\": \\\"Test POST subscription from z-ruby-sdk\\\", \\n    \\\"renewalTerm\\\": \\\"3\\\", \\n    \\\"renewalTermPeriodType\\\": \\\"Week\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"subscribeToRatePlans\\\": [\\n        {\\n            \\\"chargeOverrides\\\": [\\n                {\\n                    \\\"billCycleDay\\\": \\\"5\\\", \\n                    \\\"billCycleType\\\": \\\"SpecificDayofMonth\\\", \\n                    \\\"billingPeriodAlignment\\\": \\\"AlignToCharge\\\", \\n                    \\\"billingTiming\\\": \\\"IN_ARREARS\\\", \\n                    \\\"description\\\": \\\"This is rate plan charge description\\\", \\n                    \\\"myCustomField__c\\\": \\\"test\\\", \\n                    \\\"number\\\": \\\"TestCharge\\\", \\n                    \\\"price\\\": 12.01, \\n                    \\\"productRatePlanChargeId\\\": \\\"ff8080811ca15d19011cddad8c953b53\\\", \\n                    \\\"triggerDate\\\": \\\"2015-09-01\\\", \\n                    \\\"triggerEvent\\\": \\\"SpecificDate\\\"\\n                }\\n            ], \\n            \\\"productRatePlanId\\\": \\\"ff8080811ca15d19011cdda9b0ad3b51\\\"\\n        }\\n    ], \\n    \\\"targetDate\\\": \\\"2015-12-31\\\", \\n    \\\"termType\\\": \\\"TERMED\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"accountKey\\\": \\\"A00001115\\\", \\n    \\\"autoRenew\\\": true, \\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2015-02-1\\\", \\n    \\\"initialTerm\\\": \\\"12\\\", \\n    \\\"initialTermPeriodType\\\": \\\"Week\\\", \\n    \\\"myCustomField__c\\\": \\\"test\\\", \\n    \\\"notes\\\": \\\"Test POST subscription from z-ruby-sdk\\\", \\n    \\\"renewalTerm\\\": \\\"3\\\", \\n    \\\"renewalTermPeriodType\\\": \\\"Week\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"subscribeToRatePlans\\\": [\\n        {\\n            \\\"chargeOverrides\\\": [\\n                {\\n                    \\\"billCycleDay\\\": \\\"5\\\", \\n                    \\\"billCycleType\\\": \\\"SpecificDayofMonth\\\", \\n                    \\\"billingPeriodAlignment\\\": \\\"AlignToCharge\\\", \\n                    \\\"billingTiming\\\": \\\"IN_ARREARS\\\", \\n                    \\\"description\\\": \\\"This is rate plan charge description\\\", \\n                    \\\"myCustomField__c\\\": \\\"test\\\", \\n                    \\\"number\\\": \\\"TestCharge\\\", \\n                    \\\"price\\\": 12.01, \\n                    \\\"productRatePlanChargeId\\\": \\\"ff8080811ca15d19011cddad8c953b53\\\", \\n                    \\\"triggerDate\\\": \\\"2015-09-01\\\", \\n                    \\\"triggerEvent\\\": \\\"SpecificDate\\\"\\n                }\\n            ], \\n            \\\"productRatePlanId\\\": \\\"ff8080811ca15d19011cdda9b0ad3b51\\\"\\n        }\\n    ], \\n    \\\"targetDate\\\": \\\"2015-12-31\\\", \\n    \\\"termType\\\": \\\"TERMED\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/subscriptions\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"accountKey\\\": \\\"A00001115\\\", \\n    \\\"autoRenew\\\": true, \\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2015-02-1\\\", \\n    \\\"initialTerm\\\": \\\"12\\\", \\n    \\\"initialTermPeriodType\\\": \\\"Week\\\", \\n    \\\"myCustomField__c\\\": \\\"test\\\", \\n    \\\"notes\\\": \\\"Test POST subscription from z-ruby-sdk\\\", \\n    \\\"renewalTerm\\\": \\\"3\\\", \\n    \\\"renewalTermPeriodType\\\": \\\"Week\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"subscribeToRatePlans\\\": [\\n        {\\n            \\\"chargeOverrides\\\": [\\n                {\\n                    \\\"billCycleDay\\\": \\\"5\\\", \\n                    \\\"billCycleType\\\": \\\"SpecificDayofMonth\\\", \\n                    \\\"billingPeriodAlignment\\\": \\\"AlignToCharge\\\", \\n                    \\\"billingTiming\\\": \\\"IN_ARREARS\\\", \\n                    \\\"description\\\": \\\"This is rate plan charge description\\\", \\n                    \\\"myCustomField__c\\\": \\\"test\\\", \\n                    \\\"number\\\": \\\"TestCharge\\\", \\n                    \\\"price\\\": 12.01, \\n                    \\\"productRatePlanChargeId\\\": \\\"ff8080811ca15d19011cddad8c953b53\\\", \\n                    \\\"triggerDate\\\": \\\"2015-09-01\\\", \\n                    \\\"triggerEvent\\\": \\\"SpecificDate\\\"\\n                }\\n            ], \\n            \\\"productRatePlanId\\\": \\\"ff8080811ca15d19011cdda9b0ad3b51\\\"\\n        }\\n    ], \\n    \\\"targetDate\\\": \\\"2015-12-31\\\", \\n    \\\"termType\\\": \\\"TERMED\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"accountKey\\\": \\\"A00001115\\\", \\n    \\\"autoRenew\\\": true, \\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2015-02-1\\\", \\n    \\\"initialTerm\\\": \\\"12\\\", \\n    \\\"initialTermPeriodType\\\": \\\"Week\\\", \\n    \\\"myCustomField__c\\\": \\\"test\\\", \\n    \\\"notes\\\": \\\"Test POST subscription from z-ruby-sdk\\\", \\n    \\\"renewalTerm\\\": \\\"3\\\", \\n    \\\"renewalTermPeriodType\\\": \\\"Week\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"subscribeToRatePlans\\\": [\\n        {\\n            \\\"chargeOverrides\\\": [\\n                {\\n                    \\\"billCycleDay\\\": \\\"5\\\", \\n                    \\\"billCycleType\\\": \\\"SpecificDayofMonth\\\", \\n                    \\\"billingPeriodAlignment\\\": \\\"AlignToCharge\\\", \\n                    \\\"billingTiming\\\": \\\"IN_ARREARS\\\", \\n                    \\\"description\\\": \\\"This is rate plan charge description\\\", \\n                    \\\"myCustomField__c\\\": \\\"test\\\", \\n                    \\\"number\\\": \\\"TestCharge\\\", \\n                    \\\"price\\\": 12.01, \\n                    \\\"productRatePlanChargeId\\\": \\\"ff8080811ca15d19011cddad8c953b53\\\", \\n                    \\\"triggerDate\\\": \\\"2015-09-01\\\", \\n                    \\\"triggerEvent\\\": \\\"SpecificDate\\\"\\n                }\\n            ], \\n            \\\"productRatePlanId\\\": \\\"ff8080811ca15d19011cdda9b0ad3b51\\\"\\n        }\\n    ], \\n    \\\"targetDate\\\": \\\"2015-12-31\\\", \\n    \\\"termType\\\": \\\"TERMED\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions/accounts/{account-key}": {
      "get": {
        "description": "Retrieves all subscriptions associated with the specified account. Zuora only returns the latest version of the subscriptions.\n\nSubscription data is returned in reverse chronological order based on `updatedDate`.\n",
        "operationId": "GET_SubscriptionsByAccount",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "\nPossible values are:\n* an account number\n* an account ID\n",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "The segmented rate plan charges.\n\nWhen an amendment results in a change to a charge, Zuora creates a segmented rate plan charge. Use this field to track segment charges.\n\nPossible values are:\n\n* __last-segment__: (Default) The last rate plan charge on the subscription. The last rate plan charge is the last one in the order of time on the subscription rather than the most recent changed charge on the subscription.\n * __current-segment__: The segmented charge that is active on today’s date (effectiveStartDate <= today’s date < effectiveEndDate).\n \n * __all-segments__: All the segmented charges. The `chargeSegments` field is returned in the response. The `chargeSegments` field contains an array of the charge information for all the charge segments.\n\n * __specific-segment&as-of-date=date__: The segmented charge that is active on a date you specified (effectiveStartDate <= specific date < effectiveEndDate). The format of the date is yyyy-mm-dd.\n",
            "in": "query",
            "name": "charge-detail",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "subscriptions": [
                  {
                    "accountId": "8a8082c45aa81b51015ad64396090f5c",
                    "accountName": "ABCD",
                    "accountNumber": "A00002641",
                    "autoRenew": true,
                    "contractEffectiveDate": "2017-01-01",
                    "contractedMrr": 8.33,
                    "currentTerm": 12,
                    "currentTermPeriodType": "Month",
                    "customerAcceptanceDate": "2017-01-01",
                    "id": "8a8082c45aa81b51015ad68743ec0fdb",
                    "initialTerm": 12,
                    "initialTermPeriodType": "Month",
                    "invoiceOwnerAccountId": "8a8082c45aa81b51015ad64396090f5c",
                    "invoiceOwnerAccountName": "ABCD",
                    "invoiceOwnerAccountNumber": "A00002641",
                    "invoiceSeparately": false,
                    "notes": "",
                    "ratePlans": [
                      {
                        "id": "8a8082c45aa81b51015ad68744030fe3",
                        "productId": "8a8082c45aa81b51015ad5a2d07d0e89",
                        "productName": "ABC",
                        "productRatePlanId": "8a8082c45aa81b51015ad5a473fb0e8d",
                        "productSku": "SKU-00000987",
                        "ratePlanCharges": [
                          {
                            "billingDay": "DefaultFromCustomer",
                            "billingPeriod": "Annual",
                            "billingPeriodAlignment": "AlignToCharge",
                            "billingTiming": "IN_ADVANCE",
                            "currency": "USD",
                            "description": "",
                            "discountApplyDetails": [],
                            "dmrc": 8.333333,
                            "done": false,
                            "dtcv": 100,
                            "effectiveEndDate": "2018-01-01",
                            "effectiveStartDate": "2017-01-01",
                            "endDateCondition": "Subscription_End",
                            "id": "8a8082c45aa81b51015ad68744160fe4",
                            "listPriceBase": "Per_Billing_Period",
                            "model": "FlatFee",
                            "mrr": 8.333333,
                            "name": "Annual Charge",
                            "number": "C-00032238",
                            "originalChargeId": "8a8082c45aa81b51015ad68744160fe4",
                            "price": 100,
                            "priceChangeOption": "NoChange",
                            "pricingSummary": "USD100",
                            "productRatePlanChargeId": "8a8082c45aa81b51015ad5a655c00e8f",
                            "quantity": 1,
                            "segment": 1,
                            "tcv": 100,
                            "triggerEvent": "ContractEffective",
                            "type": "Recurring",
                            "version": 1
                          },
                          {
                            "applyDiscountTo": "ONETIMERECURRINGUSAGE",
                            "billingDay": "DefaultFromCustomer",
                            "billingPeriod": "Month",
                            "billingPeriodAlignment": "AlignToCharge",
                            "currency": "USD",
                            "description": "",
                            "discountAmount": 10,
                            "discountApplyDetails": [
                              {
                                "appliedProductRatePlanChargeId": "8a8082c45aa81b51015ad5a655c00e8f",
                                "appliedProductRatePlanId": "8a8082c45aa81b51015ad5a473fb0e8d"
                              },
                              {
                                "appliedProductRatePlanChargeId": "8a8082c45aa81b51015ad5a655c00e8f",
                                "appliedProductRatePlanId": "8a8082c45aa81b51015ad5a473fb0e8d"
                              }
                            ],
                            "discountClass": "VIP Discount",
                            "discountLevel": "subscription",
                            "dmrc": 0,
                            "done": false,
                            "dtcv": 0,
                            "effectiveEndDate": "2018-01-01",
                            "effectiveStartDate": "2017-01-01",
                            "endDateCondition": "Subscription_End",
                            "id": "8a8082c45aa81b51015ad68744240fe5",
                            "model": "DiscountFixedAmount",
                            "mrr": 0,
                            "name": "Discount-Fixed 10",
                            "number": "C-00032239",
                            "originalChargeId": "8a8082c45aa81b51015ad68744240fe5",
                            "pricingSummary": "USD10 fixed amount discount",
                            "productRatePlanChargeId": "8a8082c45aa81b51015ad683bc590fd8",
                            "segment": 1,
                            "tcv": 0,
                            "triggerEvent": "ContractEffective",
                            "type": "Recurring",
                            "version": 1
                          }
                        ],
                        "ratePlanName": "RatePlan 1"
                      }
                    ],
                    "renewalSetting": "RENEW_WITH_SPECIFIC_TERM",
                    "renewalTerm": 12,
                    "renewalTermPeriodType": "Month",
                    "serviceActivationDate": "2017-01-01",
                    "status": "Active",
                    "subscriptionNumber": "A-S00007412",
                    "subscriptionStartDate": "2017-01-01",
                    "termEndDate": "2018-01-01",
                    "termStartDate": "2017-01-01",
                    "termType": "TERMED",
                    "totalContractedValue": 100
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETSubscriptionWrapper"
            }
          }
        },
        "summary": "Get subscriptions by account",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/subscriptions/accounts/{account-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/accounts/{account-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/accounts/{account-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/subscriptions/accounts/{account-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/accounts/{account-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/accounts/{account-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions/preview": {
      "post": {
        "description": "The REST API reference describes how to create a new subscription in preview mode. This call does not require a valid customer account. It can be used to show potential new customers a preview of a subscription with complete details and charges before creating an account, or to let existing customers preview a subscription with all charges before committing.\n\n## Notes\n- The response of the Preview Subscription call is based on the REST API minor version you set in the request header. The response structure might be different if you use different minor version numbers. \n\n- If you have the Advanced AR Settlement feature enabled, we recommend that you set the `zuora-version` parameter to `207.0` or later. Otherwise, an error is returned.\n\n\n- Default values for **customerAcceptanceDate** and **serviceActivationDate** are set as follows.\n\n|        | serviceActivationDate (SA) specified          | serviceActivationDate (SA) NOT specified  |\n| ------------- |:-------------:| -----:|\n| customerAcceptanceDate (CA) specified      | SA uses value in the request call; CA uses value in the request call| CA uses value in the request call;SA uses CE as default |\n| customerAcceptanceDate (CA) NOT specified      | SA uses value in the request call; CA uses SA as default |   SA and CA use CE as default |\n",
        "operationId": "POST_PreviewSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "\nThe minor version of the Zuora REST API. \n\nYou need to set this parameter if you use the following fields:\n* targetDate\n* includeExistingDraftDocItems\n* previewType\n\n\nIf you have the Advanced AR Settlement feature enabled, you need to specify this parameter. Otherwise, an error is returned.\n\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information. \n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTSubscriptionPreviewType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "amount": 278.28,
                "amountWithoutTax": 278.28,
                "contractedMrr": 100,
                "invoiceItems": [
                  {
                    "chargeAmount": 51.61,
                    "chargeDescription": "",
                    "chargeName": "recurring",
                    "productName": "restAPITest",
                    "productRatePlanChargeId": "40289070576ad42f0157b24a62420918",
                    "quantity": 1,
                    "serviceEndDate": "2016-01-30",
                    "serviceStartDate": "2016-01-15",
                    "unitOfMeasure": ""
                  },
                  {
                    "chargeAmount": 100,
                    "chargeDescription": "",
                    "chargeName": "recurring",
                    "productName": "restAPITest",
                    "productRatePlanChargeId": "40289070576ad42f0157b24a62420918",
                    "quantity": 1,
                    "serviceEndDate": "2016-02-28",
                    "serviceStartDate": "2016-01-31",
                    "unitOfMeasure": ""
                  },
                  {
                    "chargeAmount": 100,
                    "chargeDescription": "",
                    "chargeName": "recurring",
                    "productName": "restAPITest",
                    "productRatePlanChargeId": "40289070576ad42f0157b24a62420918",
                    "quantity": 1,
                    "serviceEndDate": "2016-03-30",
                    "serviceStartDate": "2016-02-29",
                    "unitOfMeasure": ""
                  },
                  {
                    "chargeAmount": 26.67,
                    "chargeDescription": "",
                    "chargeName": "recurring",
                    "productName": "restAPITest",
                    "productRatePlanChargeId": "40289070576ad42f0157b24a62420918",
                    "quantity": 1,
                    "serviceEndDate": "2016-04-07",
                    "serviceStartDate": "2016-03-31",
                    "unitOfMeasure": ""
                  }
                ],
                "invoiceTargetDate": "2016-12-31",
                "success": true,
                "taxAmount": 0,
                "totalContractedValue": 277.4193548
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTSubscriptionPreviewResponseType"
            }
          }
        },
        "summary": "Preview subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"contractEffectiveDate\": \"2013-1-15\", \n    \"initialTerm\": 12, \n    \"initialTermPeriodType\": \"Week\", \n    \"invoiceTargetDate\": \"2013-12-31\", \n    \"previewAccountInfo\": {\n        \"billCycleDay\": 31, \n        \"billToContact\": {\n            \"city\": \"Walnut Creek\", \n            \"country\": \"United States\", \n            \"county\": \"Contra Consta\", \n            \"state\": \"California\", \n            \"zipCode\": \"94549\"\n        }, \n        \"currency\": \"USD\"\n    }, \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"quantity\": 100\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}' \"https://rest.zuora.com//v1/subscriptions/preview\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/preview');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"contractEffectiveDate\": \"2013-1-15\", \n    \"initialTerm\": 12, \n    \"initialTermPeriodType\": \"Week\", \n    \"invoiceTargetDate\": \"2013-12-31\", \n    \"previewAccountInfo\": {\n        \"billCycleDay\": 31, \n        \"billToContact\": {\n            \"city\": \"Walnut Creek\", \n            \"country\": \"United States\", \n            \"county\": \"Contra Consta\", \n            \"state\": \"California\", \n            \"zipCode\": \"94549\"\n        }, \n        \"currency\": \"USD\"\n    }, \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"quantity\": 100\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"contractEffectiveDate\\\": \\\"2013-1-15\\\", \\n    \\\"initialTerm\\\": 12, \\n    \\\"initialTermPeriodType\\\": \\\"Week\\\", \\n    \\\"invoiceTargetDate\\\": \\\"2013-12-31\\\", \\n    \\\"previewAccountInfo\\\": {\\n        \\\"billCycleDay\\\": 31, \\n        \\\"billToContact\\\": {\\n            \\\"city\\\": \\\"Walnut Creek\\\", \\n            \\\"country\\\": \\\"United States\\\", \\n            \\\"county\\\": \\\"Contra Consta\\\", \\n            \\\"state\\\": \\\"California\\\", \\n            \\\"zipCode\\\": \\\"94549\\\"\\n        }, \\n        \\\"currency\\\": \\\"USD\\\"\\n    }, \\n    \\\"subscribeToRatePlans\\\": [\\n        {\\n            \\\"chargeOverrides\\\": [\\n                {\\n                    \\\"productRatePlanChargeId\\\": \\\"ff8080811ca15d19011cddad8c953b53\\\", \\n                    \\\"quantity\\\": 100\\n                }\\n            ], \\n            \\\"productRatePlanId\\\": \\\"ff8080811ca15d19011cdda9b0ad3b51\\\"\\n        }\\n    ], \\n    \\\"termType\\\": \\\"TERMED\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/preview\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"contractEffectiveDate\\\": \\\"2013-1-15\\\", \\n    \\\"initialTerm\\\": 12, \\n    \\\"initialTermPeriodType\\\": \\\"Week\\\", \\n    \\\"invoiceTargetDate\\\": \\\"2013-12-31\\\", \\n    \\\"previewAccountInfo\\\": {\\n        \\\"billCycleDay\\\": 31, \\n        \\\"billToContact\\\": {\\n            \\\"city\\\": \\\"Walnut Creek\\\", \\n            \\\"country\\\": \\\"United States\\\", \\n            \\\"county\\\": \\\"Contra Consta\\\", \\n            \\\"state\\\": \\\"California\\\", \\n            \\\"zipCode\\\": \\\"94549\\\"\\n        }, \\n        \\\"currency\\\": \\\"USD\\\"\\n    }, \\n    \\\"subscribeToRatePlans\\\": [\\n        {\\n            \\\"chargeOverrides\\\": [\\n                {\\n                    \\\"productRatePlanChargeId\\\": \\\"ff8080811ca15d19011cddad8c953b53\\\", \\n                    \\\"quantity\\\": 100\\n                }\\n            ], \\n            \\\"productRatePlanId\\\": \\\"ff8080811ca15d19011cdda9b0ad3b51\\\"\\n        }\\n    ], \\n    \\\"termType\\\": \\\"TERMED\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/subscriptions/preview\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/preview\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"contractEffectiveDate\\\": \\\"2013-1-15\\\", \\n    \\\"initialTerm\\\": 12, \\n    \\\"initialTermPeriodType\\\": \\\"Week\\\", \\n    \\\"invoiceTargetDate\\\": \\\"2013-12-31\\\", \\n    \\\"previewAccountInfo\\\": {\\n        \\\"billCycleDay\\\": 31, \\n        \\\"billToContact\\\": {\\n            \\\"city\\\": \\\"Walnut Creek\\\", \\n            \\\"country\\\": \\\"United States\\\", \\n            \\\"county\\\": \\\"Contra Consta\\\", \\n            \\\"state\\\": \\\"California\\\", \\n            \\\"zipCode\\\": \\\"94549\\\"\\n        }, \\n        \\\"currency\\\": \\\"USD\\\"\\n    }, \\n    \\\"subscribeToRatePlans\\\": [\\n        {\\n            \\\"chargeOverrides\\\": [\\n                {\\n                    \\\"productRatePlanChargeId\\\": \\\"ff8080811ca15d19011cddad8c953b53\\\", \\n                    \\\"quantity\\\": 100\\n                }\\n            ], \\n            \\\"productRatePlanId\\\": \\\"ff8080811ca15d19011cdda9b0ad3b51\\\"\\n        }\\n    ], \\n    \\\"termType\\\": \\\"TERMED\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/preview\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"contractEffectiveDate\\\": \\\"2013-1-15\\\", \\n    \\\"initialTerm\\\": 12, \\n    \\\"initialTermPeriodType\\\": \\\"Week\\\", \\n    \\\"invoiceTargetDate\\\": \\\"2013-12-31\\\", \\n    \\\"previewAccountInfo\\\": {\\n        \\\"billCycleDay\\\": 31, \\n        \\\"billToContact\\\": {\\n            \\\"city\\\": \\\"Walnut Creek\\\", \\n            \\\"country\\\": \\\"United States\\\", \\n            \\\"county\\\": \\\"Contra Consta\\\", \\n            \\\"state\\\": \\\"California\\\", \\n            \\\"zipCode\\\": \\\"94549\\\"\\n        }, \\n        \\\"currency\\\": \\\"USD\\\"\\n    }, \\n    \\\"subscribeToRatePlans\\\": [\\n        {\\n            \\\"chargeOverrides\\\": [\\n                {\\n                    \\\"productRatePlanChargeId\\\": \\\"ff8080811ca15d19011cddad8c953b53\\\", \\n                    \\\"quantity\\\": 100\\n                }\\n            ], \\n            \\\"productRatePlanId\\\": \\\"ff8080811ca15d19011cdda9b0ad3b51\\\"\\n        }\\n    ], \\n    \\\"termType\\\": \\\"TERMED\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions/{subscription-key}": {
      "get": {
        "description": "This REST API reference describes how to retrieve detailed information about a specified subscription in the latest version.\n",
        "operationId": "GET_SubscriptionsByKey",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Possible values are:\n  * a subscription number\n  * a subscription ID\n",
            "in": "path",
            "name": "subscription-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "\nThe segmented rate plan charges. When an amendment results in a change to a charge, Zuora creates a segmented rate plan charge. Use this field to track segment charges.\n\nPossible values are:\n\n * __last-segment__: (Default) The last rate plan charge on the subscription. The last rate plan charge is the last one in the order of time on the subscription rather than the most recent changed charge on the subscription.\n * __current-segment__: The segmented charge that is active on today’s date (effectiveStartDate <= today’s date < effectiveEndDate).\n \n * __all-segments__: All the segmented charges. The `chargeSegments` field is returned in the response. The `chargeSegments` field contains an array of the charge information for all the charge segments.\n\n * __specific-segment&as-of-date=date__: The segmented charge that is active on a date you specified (effectiveStartDate <= specific date < effectiveEndDate). The format of the date is yyyy-mm-dd.\n",
            "in": "query",
            "name": "charge-detail",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "8a8082c45aa81b51015ad64396090f5c",
                "accountName": "ABCD",
                "accountNumber": "A00002641",
                "autoRenew": true,
                "contractEffectiveDate": "2017-01-01",
                "contractedMrr": 8.33,
                "currentTerm": 12,
                "currentTermPeriodType": "Month",
                "customerAcceptanceDate": "2017-01-01",
                "id": "8a8082c45aa81b51015ad68743ec0fdb",
                "initialTerm": 12,
                "initialTermPeriodType": "Month",
                "invoiceOwnerAccountId": "8a8082c45aa81b51015ad64396090f5c",
                "invoiceOwnerAccountName": "ABCD",
                "invoiceOwnerAccountNumber": "A00002641",
                "invoiceSeparately": false,
                "notes": "",
                "ratePlans": [
                  {
                    "id": "8a8082c45aa81b51015ad68744030fe3",
                    "productId": "8a8082c45aa81b51015ad5a2d07d0e89",
                    "productName": "ABC",
                    "productRatePlanId": "8a8082c45aa81b51015ad5a473fb0e8d",
                    "productSku": "SKU-00000987",
                    "ratePlanCharges": [
                      {
                        "billingDay": "DefaultFromCustomer",
                        "billingPeriod": "Annual",
                        "billingPeriodAlignment": "AlignToCharge",
                        "billingTiming": "IN_ADVANCE",
                        "currency": "USD",
                        "description": "",
                        "discountApplyDetails": [],
                        "dmrc": 8.333333,
                        "done": false,
                        "dtcv": 100,
                        "effectiveEndDate": "2018-01-01",
                        "effectiveStartDate": "2017-01-01",
                        "endDateCondition": "Subscription_End",
                        "id": "8a8082c45aa81b51015ad68744160fe4",
                        "listPriceBase": "Per_Billing_Period",
                        "model": "FlatFee",
                        "mrr": 8.333333,
                        "name": "Annual Charge",
                        "number": "C-00032238",
                        "originalChargeId": "8a8082c45aa81b51015ad68744160fe4",
                        "price": 100,
                        "priceChangeOption": "NoChange",
                        "pricingSummary": "USD100",
                        "productRatePlanChargeId": "8a8082c45aa81b51015ad5a655c00e8f",
                        "quantity": 1,
                        "segment": 1,
                        "tcv": 100,
                        "triggerEvent": "ContractEffective",
                        "type": "Recurring",
                        "version": 1
                      },
                      {
                        "applyDiscountTo": "ONETIMERECURRINGUSAGE",
                        "billingDay": "DefaultFromCustomer",
                        "billingPeriod": "Month",
                        "billingPeriodAlignment": "AlignToCharge",
                        "currency": "USD",
                        "description": "",
                        "discountAmount": 10,
                        "discountApplyDetails": [
                          {
                            "appliedProductRatePlanChargeId": "8a8082c45aa81b51015ad5a655c00e8f",
                            "appliedProductRatePlanId": "8a8082c45aa81b51015ad5a473fb0e8d"
                          }
                        ],
                        "discountClass": "VIP Discount",
                        "discountLevel": "subscription",
                        "dmrc": 0,
                        "done": false,
                        "dtcv": 0,
                        "effectiveEndDate": "2018-01-01",
                        "effectiveStartDate": "2017-01-01",
                        "endDateCondition": "Subscription_End",
                        "id": "8a8082c45aa81b51015ad68744240fe5",
                        "model": "DiscountFixedAmount",
                        "mrr": 0,
                        "name": "Discount-Fixed 10",
                        "number": "C-00032239",
                        "originalChargeId": "8a8082c45aa81b51015ad68744240fe5",
                        "pricingSummary": "USD10 fixed amount discount",
                        "productRatePlanChargeId": "8a8082c45aa81b51015ad683bc590fd8",
                        "segment": 1,
                        "tcv": 0,
                        "triggerEvent": "ContractEffective",
                        "type": "Recurring",
                        "version": 1
                      }
                    ],
                    "ratePlanName": "RatePlan 1"
                  }
                ],
                "renewalSetting": "RENEW_WITH_SPECIFIC_TERM",
                "renewalTerm": 12,
                "renewalTermPeriodType": "Month",
                "serviceActivationDate": "2017-01-01",
                "status": "Active",
                "subscriptionNumber": "A-S00007412",
                "subscriptionStartDate": "2017-01-01",
                "success": true,
                "termEndDate": "2018-01-01",
                "termStartDate": "2017-01-01",
                "termType": "TERMED",
                "totalContractedValue": 100
              }
            },
            "schema": {
              "$ref": "#/definitions/GETSubscriptionTypeWithSuccess"
            }
          }
        },
        "summary": "Get subscriptions by key",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/subscriptions/{subscription-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/{subscription-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/subscriptions/{subscription-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "Use this call to make the following kinds of changes to a subscription:\n  * Add a note\n  * Change the renewal term or auto-renewal flag\n  * Change the term length or change between evergreen and termed\n  * Add a new product rate plan\n  * Remove an existing subscription rate plan\n  * Change the quantity or price of an existing subscription rate plan\n\n## Notes\n* The Update Subscription call creates a new subscription, which has the old subscription number but a new subscription ID.  The old subscription is canceled but remains in the system.\n* In one request, this call can make:\n  * Up to 9 combined add, update, and remove changes\n  * No more than 1 change to terms & conditions\n* Updates are performed in the following sequence:\n  1. First change the notes on the existing subscription, if requested.\n  2. Then change the terms and conditions, if requested.\n  3. Then perform the remaining amendments based upon the effective dates specified. If multiple amendments have the same contract-effective dates, then execute adds before updates, and updates before removes.\n* The update operation is atomic. If any of the updates fails, the entire operation is rolled back.\n* The response of the Update Subscription call is based on the REST API minor version you set in the request header. The response structure might be different if you use different minor version numbers. \n* If you have the Advanced AR Settlement feature enabled, we recommend that you set the `zuora-version` parameter to `207.0` or later. Otherwise, an error is returned.\n\n## Override a Tiered Price\nThere are two ways you override a tiered price:\n\n* Override a specific tier number\nFor example: `tiers[{tier:1,price:8},{tier:2,price:6}]`\n\n* Override the entire tier structure\nFor example:  `tiers[{tier:1,price:8,startingUnit:1,endingUnit:100,priceFormat:\"FlatFee\"},\n{tier:2,price:6,startingUnit:101,priceFormat:\"FlatFee\"}]`\n\nIf you just override a specific tier, do not include the `startingUnit` field in the request.\n",
        "operationId": "PUT_Subscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "\nThe minor version of the Zuora REST API. \n\nYou need to set this parameter if you use the following fields:\n* collect\n* invoice\n* includeExistingDraftDocItems\n* previewType\n* runBilling\n* targetDate\n\n\nIf you have the Advanced AR Settlement feature enabled, you need to specify this parameter. Otherwise, an error is returned.\n\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "Subscription number or ID.",
            "in": "path",
            "name": "subscription-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTSubscriptionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "subscriptionId": "4028bb83510f8ed7015114a503cf0373",
                "success": true,
                "totalDeltaMrr": 100,
                "totalDeltaTcv": 4867.7419355
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTSubscriptionResponseType"
            }
          }
        },
        "summary": "Update subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"autoRenew\": false, \n    \"collect\": false, \n    \"currentTerm\": \"10\", \n    \"currentTermPeriodType\": \"Month\", \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test UPDATE subscription from z-ruby-sdk\", \n    \"renewalSetting\": \"RENEW_WITH_SPECIFIC_TERM\", \n    \"renewalTerm\": \"4\", \n    \"renewalTermPeriodType\": \"Month\", \n    \"runBilling\": true, \n    \"termType\": \"TERMED\", \n    \"update\": [\n        {\n            \"chargeUpdateDetails\": [\n                {\n                    \"quantity\": 12, \n                    \"ratePlanChargeId\": \"2c92c8f83dcbd8b1013dcce0eb510075\"\n                }\n            ], \n            \"contractEffectiveDate\": \"2013-04-28\", \n            \"ratePlanId\": \"2c92c8f83dcbd8b1013dcce0ea7e006f\"\n        }\n    ]\n}' \"https://rest.zuora.com//v1/subscriptions/{subscription-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/{subscription-key}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"autoRenew\": false, \n    \"collect\": false, \n    \"currentTerm\": \"10\", \n    \"currentTermPeriodType\": \"Month\", \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test UPDATE subscription from z-ruby-sdk\", \n    \"renewalSetting\": \"RENEW_WITH_SPECIFIC_TERM\", \n    \"renewalTerm\": \"4\", \n    \"renewalTermPeriodType\": \"Month\", \n    \"runBilling\": true, \n    \"termType\": \"TERMED\", \n    \"update\": [\n        {\n            \"chargeUpdateDetails\": [\n                {\n                    \"quantity\": 12, \n                    \"ratePlanChargeId\": \"2c92c8f83dcbd8b1013dcce0eb510075\"\n                }\n            ], \n            \"contractEffectiveDate\": \"2013-04-28\", \n            \"ratePlanId\": \"2c92c8f83dcbd8b1013dcce0ea7e006f\"\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"autoRenew\\\": false, \\n    \\\"collect\\\": false, \\n    \\\"currentTerm\\\": \\\"10\\\", \\n    \\\"currentTermPeriodType\\\": \\\"Month\\\", \\n    \\\"myCustomField__c\\\": \\\"test\\\", \\n    \\\"notes\\\": \\\"Test UPDATE subscription from z-ruby-sdk\\\", \\n    \\\"renewalSetting\\\": \\\"RENEW_WITH_SPECIFIC_TERM\\\", \\n    \\\"renewalTerm\\\": \\\"4\\\", \\n    \\\"renewalTermPeriodType\\\": \\\"Month\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"termType\\\": \\\"TERMED\\\", \\n    \\\"update\\\": [\\n        {\\n            \\\"chargeUpdateDetails\\\": [\\n                {\\n                    \\\"quantity\\\": 12, \\n                    \\\"ratePlanChargeId\\\": \\\"2c92c8f83dcbd8b1013dcce0eb510075\\\"\\n                }\\n            ], \\n            \\\"contractEffectiveDate\\\": \\\"2013-04-28\\\", \\n            \\\"ratePlanId\\\": \\\"2c92c8f83dcbd8b1013dcce0ea7e006f\\\"\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"autoRenew\\\": false, \\n    \\\"collect\\\": false, \\n    \\\"currentTerm\\\": \\\"10\\\", \\n    \\\"currentTermPeriodType\\\": \\\"Month\\\", \\n    \\\"myCustomField__c\\\": \\\"test\\\", \\n    \\\"notes\\\": \\\"Test UPDATE subscription from z-ruby-sdk\\\", \\n    \\\"renewalSetting\\\": \\\"RENEW_WITH_SPECIFIC_TERM\\\", \\n    \\\"renewalTerm\\\": \\\"4\\\", \\n    \\\"renewalTermPeriodType\\\": \\\"Month\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"termType\\\": \\\"TERMED\\\", \\n    \\\"update\\\": [\\n        {\\n            \\\"chargeUpdateDetails\\\": [\\n                {\\n                    \\\"quantity\\\": 12, \\n                    \\\"ratePlanChargeId\\\": \\\"2c92c8f83dcbd8b1013dcce0eb510075\\\"\\n                }\\n            ], \\n            \\\"contractEffectiveDate\\\": \\\"2013-04-28\\\", \\n            \\\"ratePlanId\\\": \\\"2c92c8f83dcbd8b1013dcce0ea7e006f\\\"\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/subscriptions/{subscription-key}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"autoRenew\\\": false, \\n    \\\"collect\\\": false, \\n    \\\"currentTerm\\\": \\\"10\\\", \\n    \\\"currentTermPeriodType\\\": \\\"Month\\\", \\n    \\\"myCustomField__c\\\": \\\"test\\\", \\n    \\\"notes\\\": \\\"Test UPDATE subscription from z-ruby-sdk\\\", \\n    \\\"renewalSetting\\\": \\\"RENEW_WITH_SPECIFIC_TERM\\\", \\n    \\\"renewalTerm\\\": \\\"4\\\", \\n    \\\"renewalTermPeriodType\\\": \\\"Month\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"termType\\\": \\\"TERMED\\\", \\n    \\\"update\\\": [\\n        {\\n            \\\"chargeUpdateDetails\\\": [\\n                {\\n                    \\\"quantity\\\": 12, \\n                    \\\"ratePlanChargeId\\\": \\\"2c92c8f83dcbd8b1013dcce0eb510075\\\"\\n                }\\n            ], \\n            \\\"contractEffectiveDate\\\": \\\"2013-04-28\\\", \\n            \\\"ratePlanId\\\": \\\"2c92c8f83dcbd8b1013dcce0ea7e006f\\\"\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"autoRenew\\\": false, \\n    \\\"collect\\\": false, \\n    \\\"currentTerm\\\": \\\"10\\\", \\n    \\\"currentTermPeriodType\\\": \\\"Month\\\", \\n    \\\"myCustomField__c\\\": \\\"test\\\", \\n    \\\"notes\\\": \\\"Test UPDATE subscription from z-ruby-sdk\\\", \\n    \\\"renewalSetting\\\": \\\"RENEW_WITH_SPECIFIC_TERM\\\", \\n    \\\"renewalTerm\\\": \\\"4\\\", \\n    \\\"renewalTermPeriodType\\\": \\\"Month\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"termType\\\": \\\"TERMED\\\", \\n    \\\"update\\\": [\\n        {\\n            \\\"chargeUpdateDetails\\\": [\\n                {\\n                    \\\"quantity\\\": 12, \\n                    \\\"ratePlanChargeId\\\": \\\"2c92c8f83dcbd8b1013dcce0eb510075\\\"\\n                }\\n            ], \\n            \\\"contractEffectiveDate\\\": \\\"2013-04-28\\\", \\n            \\\"ratePlanId\\\": \\\"2c92c8f83dcbd8b1013dcce0ea7e006f\\\"\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions/{subscription-key}/cancel": {
      "put": {
        "description": "This REST API reference describes how to cancel an active subscription.\n",
        "operationId": "PUT_CancelSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The minor version of the Zuora REST API. \n\nYou only need to set this parameter if you use the following fields:\n* invoice\n* collect\n* runBilling\n* targetDate \n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "Subscription number or ID. Subscription status must be `Active`.",
            "in": "path",
            "name": "subscription-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTSubscriptionCancellationType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "cancelledDate": "2019-05-31",
                "invoiceId": "8a8082c453cd2a620153e426c7eb78b3",
                "subscriptionId": "8a8082c453cd2a620154efc7bba0350e",
                "success": true,
                "totalDeltaMrr": 0,
                "totalDeltaTcv": -703.2258065
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTSubscriptionCancellationResponseType"
            }
          }
        },
        "summary": "Cancel subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cancellationEffectiveDate\": \"2019-05-31\", \n    \"cancellationPolicy\": \"SpecificDate\", \n    \"collect\": false, \n    \"runBilling\": true\n}' \"https://rest.zuora.com//v1/subscriptions/{subscription-key}/cancel\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/{subscription-key}/cancel');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cancellationEffectiveDate\": \"2019-05-31\", \n    \"cancellationPolicy\": \"SpecificDate\", \n    \"collect\": false, \n    \"runBilling\": true\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"cancellationEffectiveDate\\\": \\\"2019-05-31\\\", \\n    \\\"cancellationPolicy\\\": \\\"SpecificDate\\\", \\n    \\\"collect\\\": false, \\n    \\\"runBilling\\\": true\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/cancel\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"cancellationEffectiveDate\\\": \\\"2019-05-31\\\", \\n    \\\"cancellationPolicy\\\": \\\"SpecificDate\\\", \\n    \\\"collect\\\": false, \\n    \\\"runBilling\\\": true\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/subscriptions/{subscription-key}/cancel\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"cancellationEffectiveDate\\\": \\\"2019-05-31\\\", \\n    \\\"cancellationPolicy\\\": \\\"SpecificDate\\\", \\n    \\\"collect\\\": false, \\n    \\\"runBilling\\\": true\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/cancel\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"cancellationEffectiveDate\\\": \\\"2019-05-31\\\", \\n    \\\"cancellationPolicy\\\": \\\"SpecificDate\\\", \\n    \\\"collect\\\": false, \\n    \\\"runBilling\\\": true\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions/{subscription-key}/renew": {
      "put": {
        "description": "Renews a termed subscription using existing renewal terms.\n",
        "operationId": "PUT_RenewSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The minor version of the Zuora REST API. \n\nYou only need to set this parameter if you use the following fields:\n* invoice\n* collect\n* runBilling\n* targetDate \n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "Subscription number or ID",
            "in": "path",
            "name": "subscription-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTRenewSubscriptionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "subscriptionId": "2c92c8f83dcbd8b1013dcce0f09100a5",
                "success": true,
                "termEndDate": "2014-05-01",
                "termStartDate": "2014-02-01"
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTRenewSubscriptionResponseType"
            }
          }
        },
        "summary": "Renew subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"collect\": false, \n    \"runBilling\": true\n}' \"https://rest.zuora.com//v1/subscriptions/{subscription-key}/renew\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/{subscription-key}/renew');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"collect\": false, \n    \"runBilling\": true\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"collect\\\": false, \\n    \\\"runBilling\\\": true\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/renew\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"collect\\\": false, \\n    \\\"runBilling\\\": true\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/subscriptions/{subscription-key}/renew\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/renew\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"collect\\\": false, \\n    \\\"runBilling\\\": true\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/renew\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"collect\\\": false, \\n    \\\"runBilling\\\": true\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions/{subscription-key}/resume": {
      "put": {
        "description": "This REST API reference describes how to resume a suspended subscription. \n\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://suport.zuora.com). \n",
        "operationId": "PUT_ResumeSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The minor version of the Zuora REST API. \n\nYou only need to set this parameter if you use the following fields:\n* invoice\n* collect\n* runBilling\n* targetDate\n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "Subscription number or ID. Subscription status must be Active.",
            "in": "path",
            "name": "subscription-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTSubscriptionResumeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "resumeDate": "2019-10-01",
                "subscriptionId": "8a8082c4539c5bcc0153a752f9c87094",
                "success": true,
                "termEndDate": "2020-01-31",
                "totalDeltaTcv": 396.7741935
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTSubscriptionResumeResponseType"
            }
          }
        },
        "summary": "Resume subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-10-01\", \n    \"runBilling\": true\n}' \"https://rest.zuora.com//v1/subscriptions/{subscription-key}/resume\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/{subscription-key}/resume');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-10-01\", \n    \"runBilling\": true\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2019-02-01\\\", \\n    \\\"extendsTerm\\\": true, \\n    \\\"resumePolicy\\\": \\\"SpecificDate\\\", \\n    \\\"resumeSpecificDate\\\": \\\"2019-10-01\\\", \\n    \\\"runBilling\\\": true\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/resume\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2019-02-01\\\", \\n    \\\"extendsTerm\\\": true, \\n    \\\"resumePolicy\\\": \\\"SpecificDate\\\", \\n    \\\"resumeSpecificDate\\\": \\\"2019-10-01\\\", \\n    \\\"runBilling\\\": true\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/subscriptions/{subscription-key}/resume\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/resume\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2019-02-01\\\", \\n    \\\"extendsTerm\\\": true, \\n    \\\"resumePolicy\\\": \\\"SpecificDate\\\", \\n    \\\"resumeSpecificDate\\\": \\\"2019-10-01\\\", \\n    \\\"runBilling\\\": true\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/resume\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2019-02-01\\\", \\n    \\\"extendsTerm\\\": true, \\n    \\\"resumePolicy\\\": \\\"SpecificDate\\\", \\n    \\\"resumeSpecificDate\\\": \\\"2019-10-01\\\", \\n    \\\"runBilling\\\": true\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions/{subscription-key}/suspend": {
      "put": {
        "description": "This REST API reference describes how to suspend an active subscription. \n\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://suport.zuora.com).\n",
        "operationId": "PUT_SuspendSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The minor version of the Zuora REST API. \n\nYou only need to set this parameter if you use the following fields:\n* invoice\n* collect\n* runBilling\n* targetDate\n",
            "in": "header",
            "name": "zuora-version",
            "required": false,
            "type": "string"
          },
          {
            "description": "Subscription number or ID. Subscription status must be Active.",
            "in": "path",
            "name": "subscription-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTSubscriptionSuspendType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "invoiceId": "8a8082c453bb061f0153c529bc921b4b",
                "resumeDate": "2016-06-01",
                "subscriptionId": "8a8082c4539c5bcc0153a658a9636fcc",
                "success": true,
                "suspendDate": "2019-05-01",
                "termEndDate": "2020-02-01",
                "totalDeltaTcv": -896.6666667
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTSubscriptionSuspendResponseType"
            }
          }
        },
        "summary": "Suspend subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"resume\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-06-01\", \n    \"runBilling\": true, \n    \"suspendPeriods\": 10, \n    \"suspendPeriodsType\": \"Day\", \n    \"suspendPolicy\": \"FixedPeriodsFromToday\"\n}' \"https://rest.zuora.com//v1/subscriptions/{subscription-key}/suspend\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/{subscription-key}/suspend');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"resume\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-06-01\", \n    \"runBilling\": true, \n    \"suspendPeriods\": 10, \n    \"suspendPeriodsType\": \"Day\", \n    \"suspendPolicy\": \"FixedPeriodsFromToday\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2019-02-01\\\", \\n    \\\"extendsTerm\\\": true, \\n    \\\"resume\\\": true, \\n    \\\"resumePolicy\\\": \\\"SpecificDate\\\", \\n    \\\"resumeSpecificDate\\\": \\\"2019-06-01\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"suspendPeriods\\\": 10, \\n    \\\"suspendPeriodsType\\\": \\\"Day\\\", \\n    \\\"suspendPolicy\\\": \\\"FixedPeriodsFromToday\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/suspend\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2019-02-01\\\", \\n    \\\"extendsTerm\\\": true, \\n    \\\"resume\\\": true, \\n    \\\"resumePolicy\\\": \\\"SpecificDate\\\", \\n    \\\"resumeSpecificDate\\\": \\\"2019-06-01\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"suspendPeriods\\\": 10, \\n    \\\"suspendPeriodsType\\\": \\\"Day\\\", \\n    \\\"suspendPolicy\\\": \\\"FixedPeriodsFromToday\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/subscriptions/{subscription-key}/suspend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/suspend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2019-02-01\\\", \\n    \\\"extendsTerm\\\": true, \\n    \\\"resume\\\": true, \\n    \\\"resumePolicy\\\": \\\"SpecificDate\\\", \\n    \\\"resumeSpecificDate\\\": \\\"2019-06-01\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"suspendPeriods\\\": 10, \\n    \\\"suspendPeriodsType\\\": \\\"Day\\\", \\n    \\\"suspendPolicy\\\": \\\"FixedPeriodsFromToday\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/suspend\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"collect\\\": false, \\n    \\\"contractEffectiveDate\\\": \\\"2019-02-01\\\", \\n    \\\"extendsTerm\\\": true, \\n    \\\"resume\\\": true, \\n    \\\"resumePolicy\\\": \\\"SpecificDate\\\", \\n    \\\"resumeSpecificDate\\\": \\\"2019-06-01\\\", \\n    \\\"runBilling\\\": true, \\n    \\\"suspendPeriods\\\": 10, \\n    \\\"suspendPeriodsType\\\": \\\"Day\\\", \\n    \\\"suspendPolicy\\\": \\\"FixedPeriodsFromToday\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/subscriptions/{subscription-key}/versions/{version}": {
      "get": {
        "description": "This REST API reference describes how to retrieve detailed information about a specified subscription in a specified version. When you create a subscription amendment, you create a new version of the subscription. You can use this method to retrieve information about a subscription in any version.\n",
        "operationId": "GET_SubscriptionsByKeyAndVersion",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Subscription number. For example, A-S00000135.\n",
            "in": "path",
            "name": "subscription-key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Subscription version. For example, 1.\n",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "\nThe segmented rate plan charges. When an amendment results in a change to a charge, Zuora creates a segmented rate plan charge. Use this field to track segment charges.\n\nPossible values are:\n\n * __last-segment__: (Default) The last rate plan charge on the subscription. The last rate plan charge is the last one in the order of time on the subscription rather than the most recent changed charge on the subscription.\n * __current-segment__: The segmented charge that is active on today’s date (effectiveStartDate <= today’s date < effectiveEndDate).\n \n * __all-segments__: All the segmented charges. The `chargeSegments` field is returned in the response. The `chargeSegments` field contains an array of the charge information for all the charge segments.\n\n * __specific-segment&as-of-date=date__: The segmented charge that is active on a date you specified (effectiveStartDate <= specific date < effectiveEndDate). The format of the date is yyyy-mm-dd.\n",
            "in": "query",
            "name": "charge-detail",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "accountId": "2c9081a03c63c94c013c66688a2c00bf",
                "accountName": "RestAPI",
                "accountNumber": "RestAPI",
                "autoRenew": false,
                "contractEffectiveDate": "2012-02-01",
                "contractedMrr": 26.67,
                "currentTerm": 12,
                "currentTermPeriodType": "Week",
                "customerAcceptanceDate": "2012-02-01",
                "id": "2c9081a03c63c94c013c687b864e0195",
                "initialTermPeriodType": "Week",
                "notes": "",
                "ratePlans": [
                  {
                    "id": "2c9081a03c63c94c013c687b868901a4",
                    "productId": "2c9081a03c63c94c013c66499ef0001b",
                    "productName": "OneTime",
                    "productRatePlanId": "2c9081a03c63c94c013c665102e5003a",
                    "productSku": "SKU-00000022",
                    "ratePlanCharges": [
                      {
                        "chargedThroughDate": "2012-02-02",
                        "currency": "USD",
                        "description": "",
                        "done": true,
                        "dtcv": 24,
                        "effectiveEndDate": "2012-02-02",
                        "effectiveStartDate": "2012-02-01",
                        "endDateCondition": "One_Time",
                        "id": "2c9081a03c63c94c013c687b868901a5",
                        "model": "Tiered",
                        "name": "OT_Tiered",
                        "number": "C-00000010",
                        "originalChargeId": "2c9081a03c63c94c013c687a92d70175",
                        "pecker__c": "good",
                        "point__c": "6",
                        "pricingSummary": "0 to 10 Each: USD20 flat fee;  11 Each or more: USD4/Each",
                        "processedThroughDate": "2012-02-02",
                        "productRatePlanChargeId": "2c9081a03c63c94c013c6651d677003c",
                        "quantity": 11,
                        "segment": 1,
                        "tcv": 24,
                        "tiers": [
                          {
                            "endingUnit": 10,
                            "price": 20,
                            "priceFormat": "FlatFee",
                            "startingUnit": 0,
                            "tier": 1
                          },
                          {
                            "price": 4,
                            "priceFormat": "PerUnit",
                            "startingUnit": 11,
                            "tier": 2
                          }
                        ],
                        "triggerEvent": "ContractEffective",
                        "type": "OneTime",
                        "uom": "Each",
                        "version": 1
                      }
                    ],
                    "ratePlanName": "OT_Tiered"
                  }
                ],
                "renewalSetting": "RENEW_WITH_SPECIFIC_TERM",
                "renewalTerm": 0,
                "renewalTermPeriodType": "Week",
                "serviceActivationDate": "2012-02-01",
                "status": "Active",
                "subscriptionNumber": "A-S00000004",
                "subscriptionStartDate": "2012-02-01",
                "success": true,
                "termEndDate": "2013-02-01",
                "termStartDate": "2012-02-01",
                "termType": "TERMED",
                "totalContractedValue": 404
              }
            },
            "schema": {
              "$ref": "#/definitions/GETSubscriptionTypeWithSuccess"
            }
          }
        },
        "summary": "Get subscriptions by key and version",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/subscriptions/{subscription-key}/versions/{version}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/subscriptions/{subscription-key}/versions/{version}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/versions/{version}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/subscriptions/{subscription-key}/versions/{version}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/versions/{version}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/subscriptions/{subscription-key}/versions/{version}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/taxationitems/creditmemo/{memoId}": {
      "post": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nCreates taxation items for a credit memo.\n",
        "operationId": "POST_CM_TaxationItems",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a credit memo. For example, 8a8082e65b27f6c3015ba45ff82c7172.\n",
            "in": "path",
            "name": "memoId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTTaxationItemListForCMType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true,
                "taxationItems": [
                  {
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 10:08:43",
                    "exemptAmount": 0,
                    "financeInformation": {
                      "onAccountAccountingCode": "Check",
                      "onAccountAccountingCodeType": "Cash",
                      "salesTaxPayableAccountingCode": "Check",
                      "salesTaxPayableAccountingCodeType": "Cash"
                    },
                    "id": "402890555a7e9791015a87a072880062",
                    "jurisdiction": "CALIFORNIA",
                    "locationCode": "06",
                    "memoItemId": "402890555a7e9791015a879f064d0055",
                    "name": "STATE TAX",
                    "sourceTaxItemId": "402890555a7d4022015a7db254e200c1",
                    "taxAmount": 0.1,
                    "taxCode": "ServiceTaxCode",
                    "taxCodeDescription": "This is tax code description!",
                    "taxDate": "2016-09-30",
                    "taxRate": 0.0625,
                    "taxRateDescription": "This is tax rate description!",
                    "taxRateType": "Percentage",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 10:08:43"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/GETTaxationItemListType"
            }
          }
        },
        "summary": "Create taxation items for credit memo",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"taxationItems\": [\n        {\n            \"exemptAmount\": 0.0, \n            \"financeInformation\": {\n                \"onAccountAccountingCode\": \"Check\", \n                \"salesTaxPayableAccountingCode\": \"Check\"\n            }, \n            \"jurisdiction\": \"CALIFORNIA\", \n            \"locationCode\": \"06\", \n            \"memoItemId\": \"402890555a7e9791015a879f064d0055\", \n            \"name\": \"STATE TAX\", \n            \"sourceTaxItemId\": \"402890555a7d4022015a7db254e200c1\", \n            \"taxAmount\": 0.1, \n            \"taxCode\": \"ServiceTaxCode\", \n            \"taxCodeDescription\": \"This is tax code description!\", \n            \"taxDate\": \"2016-09-30\", \n            \"taxRate\": 0.0625, \n            \"taxRateDescription\": \"This is tax rate description!\", \n            \"taxRateType\": \"Percentage\"\n        }\n    ]\n}' \"https://rest.zuora.com//v1/taxationitems/creditmemo/{memoId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/taxationitems/creditmemo/{memoId}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"taxationItems\": [\n        {\n            \"exemptAmount\": 0.0, \n            \"financeInformation\": {\n                \"onAccountAccountingCode\": \"Check\", \n                \"salesTaxPayableAccountingCode\": \"Check\"\n            }, \n            \"jurisdiction\": \"CALIFORNIA\", \n            \"locationCode\": \"06\", \n            \"memoItemId\": \"402890555a7e9791015a879f064d0055\", \n            \"name\": \"STATE TAX\", \n            \"sourceTaxItemId\": \"402890555a7d4022015a7db254e200c1\", \n            \"taxAmount\": 0.1, \n            \"taxCode\": \"ServiceTaxCode\", \n            \"taxCodeDescription\": \"This is tax code description!\", \n            \"taxDate\": \"2016-09-30\", \n            \"taxRate\": 0.0625, \n            \"taxRateDescription\": \"This is tax rate description!\", \n            \"taxRateType\": \"Percentage\"\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"taxationItems\\\": [\\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"onAccountAccountingCode\\\": \\\"Check\\\", \\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a879f064d0055\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c1\\\", \\n            \\\"taxAmount\\\": 0.1, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-09-30\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/taxationitems/creditmemo/{memoId}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"taxationItems\\\": [\\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"onAccountAccountingCode\\\": \\\"Check\\\", \\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a879f064d0055\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c1\\\", \\n            \\\"taxAmount\\\": 0.1, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-09-30\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/taxationitems/creditmemo/{memoId}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/taxationitems/creditmemo/{memoId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"taxationItems\\\": [\\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"onAccountAccountingCode\\\": \\\"Check\\\", \\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a879f064d0055\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c1\\\", \\n            \\\"taxAmount\\\": 0.1, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-09-30\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/taxationitems/creditmemo/{memoId}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"taxationItems\\\": [\\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"onAccountAccountingCode\\\": \\\"Check\\\", \\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a879f064d0055\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c1\\\", \\n            \\\"taxAmount\\\": 0.1, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-09-30\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/taxationitems/debitmemo/{memoId}": {
      "post": {
        "description": "**Note:** This feature is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nCreates taxation items for a debit memo.\n",
        "operationId": "POST_DM_TaxationItems",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a debit memo. For example, 8a8082e65b27f6c3015ba419f3c2644e.\n",
            "in": "path",
            "name": "memoId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POSTTaxationItemListForDMType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true,
                "taxationItems": [
                  {
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 10:27:20",
                    "exemptAmount": 0,
                    "financeInformation": {
                      "salesTaxPayableAccountingCode": "Check",
                      "salesTaxPayableAccountingCodeType": "Cash"
                    },
                    "id": "402890555a7e9791015a87b17cee0076",
                    "jurisdiction": "CALIFORNIA",
                    "locationCode": "06",
                    "memoItemId": "402890555a7e9791015a87b082980068",
                    "name": "STATE TAX",
                    "sourceTaxItemId": "402890555a7d4022015a7db254e200c2",
                    "taxAmount": 0.01,
                    "taxCode": "ServiceTaxCode",
                    "taxCodeDescription": "This is tax code description!",
                    "taxDate": "2016-06-05",
                    "taxRate": 0.0625,
                    "taxRateDescription": "This is tax rate description!",
                    "taxRateType": "Percentage",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 10:27:20"
                  },
                  {
                    "createdById": "402881e522cf4f9b0122cf5d82860002",
                    "createdDate": "2017-03-01 10:27:20",
                    "exemptAmount": 0,
                    "financeInformation": {
                      "salesTaxPayableAccountingCode": "Check",
                      "salesTaxPayableAccountingCodeType": "Cash"
                    },
                    "id": "402890555a7e9791015a87b17cf10077",
                    "jurisdiction": "CALIFORNIA",
                    "locationCode": "06",
                    "memoItemId": "402890555a7e9791015a87b082d5006a",
                    "name": "STATE TAX",
                    "taxAmount": 0.02,
                    "taxCode": "ServiceTaxCode",
                    "taxCodeDescription": "This is tax code description!",
                    "taxDate": "2016-06-05",
                    "taxRate": 0.0625,
                    "taxRateDescription": "This is tax rate description!",
                    "taxRateType": "Percentage",
                    "updatedById": "402881e522cf4f9b0122cf5d82860002",
                    "updatedDate": "2017-03-01 10:27:20"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/GETTaxationItemListType"
            }
          }
        },
        "summary": "Create taxation items for debit memo",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"taxationItems\": [\n        {\n            \"exemptAmount\": 0.0, \n            \"financeInformation\": {\n                \"salesTaxPayableAccountingCode\": \"Check\"\n            }, \n            \"jurisdiction\": \"CALIFORNIA\", \n            \"locationCode\": \"06\", \n            \"memoItemId\": \"402890555a7e9791015a87b082980068\", \n            \"name\": \"STATE TAX\", \n            \"sourceTaxItemId\": \"402890555a7d4022015a7db254e200c2\", \n            \"taxAmount\": 0.01, \n            \"taxCode\": \"ServiceTaxCode\", \n            \"taxCodeDescription\": \"This is tax code description!\", \n            \"taxDate\": \"2016-06-05\", \n            \"taxRate\": 0.0625, \n            \"taxRateDescription\": \"This is tax rate description!\", \n            \"taxRateType\": \"Percentage\"\n        }, \n        {\n            \"exemptAmount\": 0.0, \n            \"financeInformation\": {\n                \"salesTaxPayableAccountingCode\": \"Check\"\n            }, \n            \"jurisdiction\": \"CALIFORNIA\", \n            \"locationCode\": \"06\", \n            \"memoItemId\": \"402890555a7e9791015a87b082d5006a\", \n            \"name\": \"STATE TAX\", \n            \"sourceTaxItemId\": \"402890555a7d4022015a7db254e200c3\", \n            \"taxAmount\": 0.02, \n            \"taxCode\": \"ServiceTaxCode\", \n            \"taxCodeDescription\": \"This is tax code description!\", \n            \"taxDate\": \"2016-06-05\", \n            \"taxRate\": 0.0625, \n            \"taxRateDescription\": \"This is tax rate description!\", \n            \"taxRateType\": \"Percentage\"\n        }\n    ]\n}' \"https://rest.zuora.com//v1/taxationitems/debitmemo/{memoId}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/taxationitems/debitmemo/{memoId}');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"taxationItems\": [\n        {\n            \"exemptAmount\": 0.0, \n            \"financeInformation\": {\n                \"salesTaxPayableAccountingCode\": \"Check\"\n            }, \n            \"jurisdiction\": \"CALIFORNIA\", \n            \"locationCode\": \"06\", \n            \"memoItemId\": \"402890555a7e9791015a87b082980068\", \n            \"name\": \"STATE TAX\", \n            \"sourceTaxItemId\": \"402890555a7d4022015a7db254e200c2\", \n            \"taxAmount\": 0.01, \n            \"taxCode\": \"ServiceTaxCode\", \n            \"taxCodeDescription\": \"This is tax code description!\", \n            \"taxDate\": \"2016-06-05\", \n            \"taxRate\": 0.0625, \n            \"taxRateDescription\": \"This is tax rate description!\", \n            \"taxRateType\": \"Percentage\"\n        }, \n        {\n            \"exemptAmount\": 0.0, \n            \"financeInformation\": {\n                \"salesTaxPayableAccountingCode\": \"Check\"\n            }, \n            \"jurisdiction\": \"CALIFORNIA\", \n            \"locationCode\": \"06\", \n            \"memoItemId\": \"402890555a7e9791015a87b082d5006a\", \n            \"name\": \"STATE TAX\", \n            \"sourceTaxItemId\": \"402890555a7d4022015a7db254e200c3\", \n            \"taxAmount\": 0.02, \n            \"taxCode\": \"ServiceTaxCode\", \n            \"taxCodeDescription\": \"This is tax code description!\", \n            \"taxDate\": \"2016-06-05\", \n            \"taxRate\": 0.0625, \n            \"taxRateDescription\": \"This is tax rate description!\", \n            \"taxRateType\": \"Percentage\"\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"taxationItems\\\": [\\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a87b082980068\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c2\\\", \\n            \\\"taxAmount\\\": 0.01, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-06-05\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }, \\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a87b082d5006a\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c3\\\", \\n            \\\"taxAmount\\\": 0.02, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-06-05\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/taxationitems/debitmemo/{memoId}\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"taxationItems\\\": [\\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a87b082980068\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c2\\\", \\n            \\\"taxAmount\\\": 0.01, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-06-05\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }, \\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a87b082d5006a\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c3\\\", \\n            \\\"taxAmount\\\": 0.02, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-06-05\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/taxationitems/debitmemo/{memoId}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/taxationitems/debitmemo/{memoId}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"taxationItems\\\": [\\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a87b082980068\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c2\\\", \\n            \\\"taxAmount\\\": 0.01, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-06-05\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }, \\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a87b082d5006a\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c3\\\", \\n            \\\"taxAmount\\\": 0.02, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-06-05\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/taxationitems/debitmemo/{memoId}\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"taxationItems\\\": [\\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a87b082980068\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c2\\\", \\n            \\\"taxAmount\\\": 0.01, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-06-05\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }, \\n        {\\n            \\\"exemptAmount\\\": 0.0, \\n            \\\"financeInformation\\\": {\\n                \\\"salesTaxPayableAccountingCode\\\": \\\"Check\\\"\\n            }, \\n            \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n            \\\"locationCode\\\": \\\"06\\\", \\n            \\\"memoItemId\\\": \\\"402890555a7e9791015a87b082d5006a\\\", \\n            \\\"name\\\": \\\"STATE TAX\\\", \\n            \\\"sourceTaxItemId\\\": \\\"402890555a7d4022015a7db254e200c3\\\", \\n            \\\"taxAmount\\\": 0.02, \\n            \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n            \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n            \\\"taxDate\\\": \\\"2016-06-05\\\", \\n            \\\"taxRate\\\": 0.0625, \\n            \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n            \\\"taxRateType\\\": \\\"Percentage\\\"\\n        }\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/taxationitems/{id}": {
      "delete": {
        "description": "Deletes a specific taxation item by ID.\n",
        "operationId": "DELETE_TaxationItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a taxation item.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/CommonResponseType"
            }
          }
        },
        "summary": "Delete taxation item",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X DELETE -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/taxationitems/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/taxationitems/{id}');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/taxationitems/{id}\")\n  .delete()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"DELETE\", \"/v1/taxationitems/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/taxationitems/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/taxationitems/{id}\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "get": {
        "description": "Retrieves the information about a specific taxation item by ID.\n",
        "operationId": "GET_TaxationItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "The unique ID of a taxation item.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-02-27 11:52:03",
                "exemptAmount": 0,
                "financeInformation": {},
                "id": "402890555a7d4022015a7db254e200c8",
                "memoItemId": "402890555a7d4022015a7db254d800c7",
                "name": "my tax",
                "sourceTaxItemId": "402890555a7d4022015a7db254e200c1",
                "success": true,
                "taxAmount": 1,
                "taxCode": "ZtaxCode",
                "taxCodeDescription": "",
                "taxDate": "2017-02-27",
                "taxRate": 5,
                "taxRateType": "FlatFee",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-02-27 11:52:03"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETTaxationItemType"
            }
          }
        },
        "summary": "Get taxation item\n",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/taxationitems/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/taxationitems/{id}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/taxationitems/{id}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/taxationitems/{id}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/taxationitems/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/taxationitems/{id}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      },
      "put": {
        "description": "Updates a specific taxation item by ID.\n",
        "operationId": "PUT_TaxationItem",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTTaxationItemType"
            }
          },
          {
            "description": "The unique ID of a taxation item.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "createdById": "402881e522cf4f9b0122cf5d82860002",
                "createdDate": "2017-02-27 18:16:24",
                "exemptAmount": 0,
                "financeInformation": {
                  "onAccountAccountingCode": "Check",
                  "onAccountAccountingCodeType": "Cash"
                },
                "id": "402890555a7e9791015a7f12364e0004",
                "jurisdiction": "CALIFORNIA",
                "locationCode": "06",
                "memoItemId": "402890555a7e9791015a7f1235f50003",
                "name": "STATE TAX",
                "sourceTaxItemId": "402890555a7d4022015a7db254e200c1",
                "success": true,
                "taxAmount": 1,
                "taxCode": "ServiceTaxCode",
                "taxCodeDescription": "This is tax code description!",
                "taxDate": "2016-06-05",
                "taxRate": 0.0625,
                "taxRateDescription": "This is tax rate description!",
                "taxRateType": "Percentage",
                "updatedById": "402881e522cf4f9b0122cf5d82860002",
                "updatedDate": "2017-02-28 17:53:11"
              }
            },
            "schema": {
              "$ref": "#/definitions/GETTaxationItemType"
            }
          }
        },
        "summary": "Update taxation item",
        "tags": [
          "Taxation Items"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"exemptAmount\": 0.0, \n    \"financeInformation\": {\n        \"onAccountAccountingCode\": \"Check\", \n        \"salesTaxPayableAccountingCode\": \"\"\n    }, \n    \"jurisdiction\": \"CALIFORNIA\", \n    \"locationCode\": \"06\", \n    \"name\": \"STATE TAX\", \n    \"taxAmount\": 1.0, \n    \"taxCode\": \"ServiceTaxCode\", \n    \"taxCodeDescription\": \"This is tax code description!\", \n    \"taxDate\": \"2016-06-05\", \n    \"taxRate\": 0.0625, \n    \"taxRateDescription\": \"This is tax rate description!\", \n    \"taxRateType\": \"Percentage\"\n}' \"https://rest.zuora.com//v1/taxationitems/{id}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/taxationitems/{id}');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"exemptAmount\": 0.0, \n    \"financeInformation\": {\n        \"onAccountAccountingCode\": \"Check\", \n        \"salesTaxPayableAccountingCode\": \"\"\n    }, \n    \"jurisdiction\": \"CALIFORNIA\", \n    \"locationCode\": \"06\", \n    \"name\": \"STATE TAX\", \n    \"taxAmount\": 1.0, \n    \"taxCode\": \"ServiceTaxCode\", \n    \"taxCodeDescription\": \"This is tax code description!\", \n    \"taxDate\": \"2016-06-05\", \n    \"taxRate\": 0.0625, \n    \"taxRateDescription\": \"This is tax rate description!\", \n    \"taxRateType\": \"Percentage\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"exemptAmount\\\": 0.0, \\n    \\\"financeInformation\\\": {\\n        \\\"onAccountAccountingCode\\\": \\\"Check\\\", \\n        \\\"salesTaxPayableAccountingCode\\\": \\\"\\\"\\n    }, \\n    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n    \\\"locationCode\\\": \\\"06\\\", \\n    \\\"name\\\": \\\"STATE TAX\\\", \\n    \\\"taxAmount\\\": 1.0, \\n    \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n    \\\"taxDate\\\": \\\"2016-06-05\\\", \\n    \\\"taxRate\\\": 0.0625, \\n    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n    \\\"taxRateType\\\": \\\"Percentage\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/taxationitems/{id}\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"exemptAmount\\\": 0.0, \\n    \\\"financeInformation\\\": {\\n        \\\"onAccountAccountingCode\\\": \\\"Check\\\", \\n        \\\"salesTaxPayableAccountingCode\\\": \\\"\\\"\\n    }, \\n    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n    \\\"locationCode\\\": \\\"06\\\", \\n    \\\"name\\\": \\\"STATE TAX\\\", \\n    \\\"taxAmount\\\": 1.0, \\n    \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n    \\\"taxDate\\\": \\\"2016-06-05\\\", \\n    \\\"taxRate\\\": 0.0625, \\n    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n    \\\"taxRateType\\\": \\\"Percentage\\\"\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/taxationitems/{id}\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/taxationitems/{id}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"exemptAmount\\\": 0.0, \\n    \\\"financeInformation\\\": {\\n        \\\"onAccountAccountingCode\\\": \\\"Check\\\", \\n        \\\"salesTaxPayableAccountingCode\\\": \\\"\\\"\\n    }, \\n    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n    \\\"locationCode\\\": \\\"06\\\", \\n    \\\"name\\\": \\\"STATE TAX\\\", \\n    \\\"taxAmount\\\": 1.0, \\n    \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n    \\\"taxDate\\\": \\\"2016-06-05\\\", \\n    \\\"taxRate\\\": 0.0625, \\n    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n    \\\"taxRateType\\\": \\\"Percentage\\\"\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/taxationitems/{id}\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"exemptAmount\\\": 0.0, \\n    \\\"financeInformation\\\": {\\n        \\\"onAccountAccountingCode\\\": \\\"Check\\\", \\n        \\\"salesTaxPayableAccountingCode\\\": \\\"\\\"\\n    }, \\n    \\\"jurisdiction\\\": \\\"CALIFORNIA\\\", \\n    \\\"locationCode\\\": \\\"06\\\", \\n    \\\"name\\\": \\\"STATE TAX\\\", \\n    \\\"taxAmount\\\": 1.0, \\n    \\\"taxCode\\\": \\\"ServiceTaxCode\\\", \\n    \\\"taxCodeDescription\\\": \\\"This is tax code description!\\\", \\n    \\\"taxDate\\\": \\\"2016-06-05\\\", \\n    \\\"taxRate\\\": 0.0625, \\n    \\\"taxRateDescription\\\": \\\"This is tax rate description!\\\", \\n    \\\"taxRateType\\\": \\\"Percentage\\\"\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/transactions/invoices/accounts/{account-key}": {
      "get": {
        "description": "Retrieves invoices for a specified account. \nInvoices are returned in reverse chronological order by **updatedDate**.\n",
        "operationId": "GET_TransactionInvoice",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "Account number or account ID.\n",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "invoices": [
                  {
                    "accountId": "2c92c0f8511f4b9d01512680ab282370",
                    "accountName": "XYZ, Inc",
                    "accountNumber": "A00000002",
                    "amount": 21.1,
                    "balance": 21.1,
                    "createdBy": "2c92c0f84fbac224014fc55639fe11d4",
                    "dueDate": "2015-12-20",
                    "id": "2c92c095511f5b4401512682dcfd7987",
                    "invoiceDate": "2015-11-20",
                    "invoiceFiles": [],
                    "invoiceItems": [
                      {
                        "chargeAmount": 21.1,
                        "chargeDescription": "",
                        "chargeId": "2c92c0f9511f56b2015126814af832d2",
                        "chargeName": "Annual Fee",
                        "id": "2c92c095511f5b4401512682dd017989",
                        "productName": "TeamCollab Enterprise",
                        "quantity": 1,
                        "serviceEndDate": "2015-11-30",
                        "serviceStartDate": "2015-11-20",
                        "subscriptionId": "2c92c0f9511f56b2015126814ad532cc",
                        "subscriptionName": "A-S00000004",
                        "taxAmount": 0,
                        "unitOfMeasure": ""
                      }
                    ],
                    "invoiceNumber": "INV00000002",
                    "invoiceTargetDate": "2015-11-20",
                    "status": "Draft"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETInvoiceFileWrapper"
            }
          }
        },
        "summary": "Get invoices",
        "tags": [
          "Transactions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/transactions/invoices/accounts/{account-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/transactions/invoices/accounts/{account-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/transactions/invoices/accounts/{account-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/transactions/invoices/accounts/{account-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/transactions/invoices/accounts/{account-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/transactions/invoices/accounts/{account-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/transactions/payments/accounts/{account-key}": {
      "get": {
        "description": "Retrieves payments for a specified account. Payments are returned in\nreverse chronological order by **updatedDate**.\n",
        "operationId": "GET_TransactionPayment",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "Account number or account ID.",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "payments": [
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "amount": 150248.1,
                    "effectiveDate": "2013-03-27",
                    "id": "2c92c8f83dabf9cf013daf3bfa0305a6",
                    "paidInvoices": [
                      {
                        "appliedPaymentAmount": 5,
                        "invoiceId": "2c92a09539190dbe0139190f42780012",
                        "invoiceNumber": "INV00000159"
                      },
                      {
                        "appliedPaymentAmount": 139722.1,
                        "invoiceId": "2c92a0953a3fa95d013a407c10a60100",
                        "invoiceNumber": "INV00000323"
                      },
                      {
                        "appliedPaymentAmount": 10521,
                        "invoiceId": "2c92a09739190dc60139194bcf1b0098",
                        "invoiceNumber": "INV00000160"
                      }
                    ],
                    "paymentMethodId": "2c92c8f83dabf9cf013daef12dd303b0",
                    "paymentNumber": "P-00000075",
                    "status": "Processed",
                    "type": "Electronic"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "amount": 5,
                    "effectiveDate": "2012-08-11",
                    "id": "2c92a0f9391832b101391922ad5f049d",
                    "paidInvoices": [
                      {
                        "appliedPaymentAmount": 5,
                        "invoiceId": "2c92a09539190dbe0139190f42780012",
                        "invoiceNumber": "INV00000159"
                      }
                    ],
                    "paymentMethodId": "2c92a0f9391832b10139183e279e0044",
                    "paymentNumber": "P-00000056",
                    "status": "Processed",
                    "type": "Electronic"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETPaymentsType"
            }
          }
        },
        "summary": "Get payments",
        "tags": [
          "Transactions"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/transactions/payments/accounts/{account-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/transactions/payments/accounts/{account-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/transactions/payments/accounts/{account-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/transactions/payments/accounts/{account-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/transactions/payments/accounts/{account-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/transactions/payments/accounts/{account-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/usage": {
      "post": {
        "description": "\nThis REST API reference describes how to post or import usage data for one or more accounts in the CSV  format. There are no path or query parameters. The data is uploade using the HTTP multipart/form-data POST method and applied to the user's tenant. \n\n## How this REST API Call Works\nThe content of the upload file must follow the format used by the UI import tool. It must be a comma-separated (CSV) file with a corresponding .csv extension. The file size must not exceed 4MB. Click [here](https://knowledgecenter.zuora.com/@api/deki/files/4105/UsageFileFormat.csv) to download the usage file template.\n\nAt the completion of the upload, before actually processing the file contents, theAPI returns a response containing the byte count of the received file and a URL for checking the status of the import process.  Of the five possible results displayed at that URL Pending, Processing, Completed, Canceled, and Failed) only a Completed status indicates that the import was successful.  The operation is atomic; if any record fails, the file is rejected.  In that case, the entire import is rolled back and all stored data is returned to its original state.\n\nTo view the actual import status, enter the resulting status URL from the checkImportStatus response using a tool such as POSTMAN.This additional step provides more information about why the import may have failed.\n\nTo manage the information after a successful upload, use the web-based UI.\n\n## Upload File Format\nThe upload file uses the following headings:\n\n| Heading         | Description   | Required |\n|-----------------|--------|----------|\n| ACCOUNT_ID      | Enter the account number, e.g., the default account number, such as A00000001, or your custom account number.,Although this field is labeled as Account_Id, it is not the actual Account ID nor Account Name.  | Yes      |\n| UOM             | Enter the unit of measure. This must match the UOM for the usage. | Yes      |\n| QTY             | Enter the quantity.  | Yes      |\n| STARTDATE       | Enter the start date of the usage.,This date determines the invoice item service period the associated usage is billed to. Date format is based on locale of the current user. Default date format: `MM/DD/YYYY` | Yes      |\n| ENDDATE         | Enter the end date of the usage.,This is not used in calculations for usage billing and is optional. Date format is based on locale of the current user. Default date format: `MM/DD/YYYY`    | Yes      |\n| SUBSCRIPTION_ID | Enter the subscription number or subscription name. If you created the subscription in the Zuora application, Zuora created a number automatically in a format similar to A-S00000001. If you do not provide a value for this field, the associated usage will be added to all subscriptions for the specified Account that use this Unit Of Measure. If your Accounts can have multiple subscriptions and you do not want double or triple counting of usage, you must specify the Subscription or Charge ID in each usage record.  | Yes      |\n| CHARGE_ID       | Enter the charge number (not the charge name). You can see the charge ID, e.g., C-00000001, when you add your rate plan to your subscription and view your individual charges. If your Accounts can have multiple subscriptions and you do not want double or triple counting of usage, you must specify the specific Subscription or Charge ID in each usage record. This field is related to the Charge Number on the subscription rate plan.                       | Yes      |\n| DESCRIPTION     | Enter a description for the charge. | No       |\n",
        "operationId": "POST_Usage",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Must be set to \"multipart/form-data\".\n",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "checkImportStatus": "https://rest.zuora.com/v1/usage/2c92c8f83dcbd8b1013dcce1159900cc/status",
                "size": 316,
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/POSTUsageResponseType"
            }
          }
        },
        "summary": "Post usage",
        "tags": [
          "Usage"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/usage\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/usage');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/usage\")\n  .post(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"POST\", \"/v1/usage\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/usage\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/usage\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/usage/accounts/{account-key}": {
      "get": {
        "description": "This REST API reference describes how to retrieve usage details for an account. Usage data is returned in reverse chronological order.\n",
        "operationId": "GET_Usage",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "$ref": "#/parameters/GLOBAL_REQUEST_pageSize"
          },
          {
            "description": "Account number or account ID.",
            "in": "path",
            "name": "account-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "nextPage": "https://rest.zuora.com/v1/usage/accounts/A00001115?page=2&pageSize=10",
                "success": true,
                "usage": [
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8953dac2b1c013dae0a263f35dd",
                    "quantity": 4,
                    "sourceName": "Import",
                    "startDateTime": "2012-02-05 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-03-27 15:48:53",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8943db2ae51013dcce116b00f4b",
                    "quantity": 4,
                    "sourceName": "Import",
                    "startDateTime": "2012-02-05 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-04-02 15:32:16",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8953dac2b1c013dae0a263f35dc",
                    "quantity": 3,
                    "sourceName": "Import",
                    "startDateTime": "2012-02-04 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-03-27 15:48:53",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8943db2ae51013dcce116b00f4a",
                    "quantity": 3,
                    "sourceName": "Import",
                    "startDateTime": "2012-02-04 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-04-02 15:32:16",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8953dac2b1c013dae0a263e35db",
                    "quantity": 2,
                    "sourceName": "Import",
                    "startDateTime": "2012-02-03 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-03-27 15:48:53",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8943db2ae51013dcce116af0f49",
                    "quantity": 2,
                    "sourceName": "Import",
                    "startDateTime": "2012-02-03 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-04-02 15:32:16",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8953dac2b1c013dae0a263e35da",
                    "quantity": 1,
                    "sourceName": "Import",
                    "startDateTime": "2012-02-02 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-03-27 15:48:53",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8943db2ae51013dcce116af0f48",
                    "quantity": 1,
                    "sourceName": "Import",
                    "startDateTime": "2012-02-02 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-04-02 15:32:16",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8953dac2b1c013dae0a263e35d9",
                    "quantity": 4,
                    "sourceName": "Import",
                    "startDateTime": "2012-01-05 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-03-27 15:48:53",
                    "unitOfMeasure": "UOM"
                  },
                  {
                    "accountId": "2c92a0f9391832b10139183e277a0042",
                    "accountName": "subscribeCallYan_1",
                    "accountNumber": "A00001115",
                    "id": "2c92c8943db2ae51013dcce116af0f47",
                    "quantity": 4,
                    "sourceName": "Import",
                    "startDateTime": "2012-01-05 00:00:00",
                    "status": "Pending",
                    "submissionDateTime": "2013-04-02 15:32:16",
                    "unitOfMeasure": "UOM"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/GETUsageWrapper"
            }
          }
        },
        "summary": "Get usage",
        "tags": [
          "Usage"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/usage/accounts/{account-key}\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/usage/accounts/{account-key}');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/usage/accounts/{account-key}\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/usage/accounts/{account-key}\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/usage/accounts/{account-key}\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/usage/accounts/{account-key}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/users/{username}/accept-access": {
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nAccepts user access to an entity.\n\n## User Access Permission\nYou must make the calls as an administrator of the entity that you want to accept the user access to. \n",
        "operationId": "PUT_AcceptUserAccess",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Specify the login name of the user that you want to accept the access request for.\n",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTAcceptUserAccessResponseType"
            }
          }
        },
        "summary": "Multi-entity: Accept user access",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/users/{username}/accept-access\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/users/{username}/accept-access');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/users/{username}/accept-access\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/users/{username}/accept-access\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/users/{username}/accept-access\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/users/{username}/accept-access\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/users/{username}/accessible-entities": {
      "get": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nRetrieves detailed information about all the entities that a user has permission to access.\n\n## User Access Permission\nYou can make the call as any entity user.\n",
        "operationId": "GET_EntitiesUserAccessible",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Specify the login user name that you want to retrieve.\n",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "entities": [
                  {
                    "displayName": "Acme Corporation",
                    "id": "8a808255557baba1015580e12fa5083a",
                    "locale": "en_US",
                    "name": "Acme Corporation",
                    "status": "Provisioned",
                    "tenantId": "6398",
                    "timezone": "GMT"
                  },
                  {
                    "displayName": "Acme-Americas",
                    "id": "8a80825555a3c7a10155b460f53858e6",
                    "locale": "en_US",
                    "name": "Acme-Americas",
                    "parentId": "8a808255557baba1015580e12fa5083a",
                    "status": "Provisioned",
                    "tenantId": "6398",
                    "timezone": "America/Los_Angeles"
                  },
                  {
                    "displayName": "Acme-US",
                    "id": "8a80825555a3c7a10155b46120d058e7",
                    "locale": "en_US",
                    "name": "Acme-US",
                    "parentId": "8a80825555a3c7a10155b460f53858e6",
                    "status": "Provisioned",
                    "tenantId": "6398",
                    "timezone": "America/Los_Angeles"
                  },
                  {
                    "displayName": "Acme-Canada",
                    "id": "8a80825556ff28a4015708b93df82ba7",
                    "locale": "en_US",
                    "name": "Acme-Canada",
                    "parentId": "8a80825555a3c7a10155b460f53858e6",
                    "status": "Provisioned",
                    "tenantId": "6398",
                    "timezone": "America/Toronto"
                  }
                ],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/GETEntitiesUserAccessibleResponseType"
            }
          }
        },
        "summary": "Multi-entity: Get entities that a user can access",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X GET -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" \"https://rest.zuora.com//v1/users/{username}/accessible-entities\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/users/{username}/accessible-entities');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/users/{username}/accessible-entities\")\n  .get()\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    }\n\nconn.request(\"GET\", \"/v1/users/{username}/accessible-entities\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/users/{username}/accessible-entities\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/users/{username}/accessible-entities\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/users/{username}/deny-access": {
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nDenies a user access to an entity. \n\n## User Access Permission\nYou must make the calls as an administrator of the entity that you want to deny the user access to.\n",
        "operationId": "PUT_DenyUserAccess",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Specify the login name of the user that you want to deny the access.\n",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTDenyUserAccessResponseType"
            }
          }
        },
        "summary": "Multi-entity: Deny user access",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{}' \"https://rest.zuora.com//v1/users/{username}/deny-access\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/users/{username}/deny-access');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/users/{username}/deny-access\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/users/{username}/deny-access\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/users/{username}/deny-access\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/users/{username}/deny-access\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    },
    "/v1/users/{username}/request-access": {
      "put": {
        "description": "**Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n\nSends access requests to the entities that a user wants to access.\n\n## User Access Permission\nYou must make the call as an administrator of the entity, in which the request user is created. Also, this administrator must have the permission to access the entities that the request user wants to access.\n",
        "operationId": "PUT_SendUserAccessRequests",
        "parameters": [
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityId"
          },
          {
            "$ref": "#/parameters/GLOBAL_HEADER_entityName"
          },
          {
            "description": "Specify the login name of the user who wants to access other entities.\n",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PUTSendUserAccessRequestType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/PUTSendUserAccessRequestResponseType"
            }
          }
        },
        "summary": "Multi-entity: Send user access requests",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey: dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"targetEntityIds\": [\n        \"8a80825555a3c7a10155b46120d058e7\", \n        \"8a80825556ff28a4015708b93df82ba7\"\n    ]\n}' \"https://rest.zuora.com//v1/users/{username}/request-access\""
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com//v1/users/{username}/request-access');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n  'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"targetEntityIds\": [\n        \"8a80825555a3c7a10155b46120d058e7\", \n        \"8a80825556ff28a4015708b93df82ba7\"\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"targetEntityIds\\\": [\\n        \\\"8a80825555a3c7a10155b46120d058e7\\\", \\n        \\\"8a80825556ff28a4015708b93df82ba7\\\"\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.zuora.com//v1/users/{username}/request-access\")\n  .put(body)\n  .addHeader(\"apiaccesskeyid\", \"dummyUser\")\n  .addHeader(\"apisecretaccesskey\", \"dummyPassword\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"cache-control\", \"no-cache\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"https://rest.zuora.com/\")\n\npayload = \"{\\n    \\\"targetEntityIds\\\": [\\n        \\\"8a80825555a3c7a10155b46120d058e7\\\", \\n        \\\"8a80825556ff28a4015708b93df82ba7\\\"\\n    ]\\n}\"\n\nheaders = {\n    'apiaccesskeyid': \"dummyUser\",\n    'apisecretaccesskey': \"dummyPassword\",\n    'content-type': \"application/json\",\n    }\n\nconn.request(\"PUT\", \"/v1/users/{username}/request-access\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://rest.zuora.com//v1/users/{username}/request-access\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"apiaccesskeyid\"] = 'dummyUser'\nrequest[\"apisecretaccesskey\"] = 'dummyPassword'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\n    \\\"targetEntityIds\\\": [\\n        \\\"8a80825555a3c7a10155b46120d058e7\\\", \\n        \\\"8a80825556ff28a4015708b93df82ba7\\\"\\n    ]\\n}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://rest.zuora.com//v1/users/{username}/request-access\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"apisecretaccesskey\", \"dummyPassword\");\nrequest.AddHeader(\"apiaccesskeyid\", \"dummyUser\");\nrequest.AddParameter(\"application/json\", \"{\\n    \\\"targetEntityIds\\\": [\\n        \\\"8a80825555a3c7a10155b46120d058e7\\\", \\n        \\\"8a80825556ff28a4015708b93df82ba7\\\"\\n    ]\\n}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          }
        ]
      }
    }
  },
  "definitions": {
    "AmendRequest": {
      "properties": {
        "AmendOptions": {
          "description": "Use the `AmendOptions` container to specify billing options, such as invoice generation and when to process payments.\n",
          "properties": {
            "ApplyCreditBalance": {
              "description": "",
              "type": "boolean"
            },
            "ElectronicPaymentOptions": {
              "$ref": "#/definitions/ElectronicPaymentOptions"
            },
            "ExternalPaymentOptions": {
              "$ref": "#/definitions/ExternalPaymentOptions"
            },
            "GenerateInvoice": {
              "description": "",
              "type": "boolean"
            },
            "InvoiceProcessingOptions": {
              "$ref": "#/definitions/InvoiceProcessingOptions"
            },
            "ProcessPayments": {
              "description": "",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "Amendments": {
          "description": "The `Amendment` object holds the changes that you want to make to the Subscription specified by the `SubscriptionId`, \nincluding its `RatePlan`, `RatePlanCharge`, and `RatePlanChargeTier`.\n",
          "items": {
            "$ref": "#/definitions/Amendment"
          },
          "type": "array"
        },
        "PreviewOptions": {
          "description": "Use the `PreviewOptions` container to preview an amendment before committing its changes to a subscription. \nYou can use a preview to provide a quote of the new charges to a customer before the customer commits to the amended subscription. \nFor example, make an Amend call with an Amendment object that removes an existing rate plan, \nanother Amendment object that adds a new rate plan, and turn on the preview options.\n",
          "properties": {
            "EnablePreviewMode": {
              "description": " Determines whether to create an amendment or display a preview of the change.",
              "type": "boolean"
            },
            "IncludeExistingDraftInvoiceItems": {
              "description": " Specifies whether to include draft invoice items in amendment previews.",
              "type": "boolean"
            },
            "NumberOfPeriods": {
              "description": " Indicates the number of invoice periods to show in a preview.",
              "format": "int32",
              "type": "integer"
            },
            "PreviewThroughTermEnd": {
              "description": " Request to preview the charge through the end of the subscription term.",
              "type": "boolean"
            },
            "PreviewType": {
              "description": " The type of preview you will receive from a preview request.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "Amendments"
      ],
      "type": "object"
    },
    "AmendResult": {
      "properties": {
        "AmendmentIds": {
          "description": " The IDs of the associated Amendment object. There can be as many as three AmendmentId values.",
          "type": "string"
        },
        "ChargeMetricsData": {
          "$ref": "#/definitions/ChargeMetricsData"
        },
        "Errors": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "GatewayResponse": {
          "description": "",
          "type": "string"
        },
        "GatewayResponseCode": {
          "description": "",
          "type": "string"
        },
        "InvoiceDatas": {
          "description": "",
          "items": {
            "$ref": "#/definitions/InvoiceData"
          },
          "type": "array"
        },
        "InvoiceId": {
          "description": "",
          "type": "string"
        },
        "PaymentId": {
          "description": "",
          "type": "string"
        },
        "PaymentTransactionNumber": {
          "description": "",
          "type": "string"
        },
        "SubscriptionId": {
          "description": "",
          "type": "string"
        },
        "Success": {
          "description": "",
          "type": "boolean"
        },
        "TotalDeltaMrr": {
          "description": "",
          "format": "double",
          "type": "number"
        },
        "TotalDeltaTcv": {
          "description": "",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "Amendment": {
      "properties": {
        "AutoRenew": {
          "description": " Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed. For amendment of type `TermsAndConditions`, this field is only required if you change the automatic renewal status of a subscription.\n\n\n**Values**: true, false ",
          "type": "boolean"
        },
        "Code": {
          "description": " A unique alphanumeric string that identifies the amendment.\n\n\n**Character limit**: 50\n\n**Values**: one of the following:\n\n- `null` generates a value automatically\n- A string\n",
          "type": "string"
        },
        "ContractEffectiveDate": {
          "description": " The date when the amendment's changes become effective for billing purposes.\n",
          "format": "date",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the amendment.\n\n\n**Character limit**: 32\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the amendment was created.\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CurrentTerm": {
          "description": " The length of the period for the current subscription term. This field can be updated when Status is `Draft`.\n\nThis field is only required if the `Type` field is set to `TermsAndConditions` and `TermType` is set to `TERMED`. This field is not required if `TermType` is set to `EVERGREEN`.\n\n\n**Values**: a valid number ",
          "format": "int64",
          "type": "integer"
        },
        "CurrentTermPeriodType": {
          "description": " The period type for the current subscription term. This field is only required if the `Type` field is set to `TermsAndConditions` and `TermType` is set to `TERMED`. This field is not required if `TermType` is set to `EVERGREEN`.\n\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n\n\n**Note**:\n\n- This field can be updated when Status is `Draft`.\n- This field is used with the CurrentTerm field to specify the current subscription term.\n",
          "type": "string"
        },
        "CustomerAcceptanceDate": {
          "description": " The date when the customer accepts the amendment's changes to the subscription. Use this field if [Zuora is configured to require customer acceptance in Z-Billing](https://knowledgecenter.zuora.com/CB_Billing/W_Billing_and_Payments_Settings/Define_Default_Subscription_Settings). This field is only required if the `Status` field is set to `PendingAcceptance`.\n\n",
          "format": "date",
          "type": "string"
        },
        "Description": {
          "description": " A description of the amendment.\n\n\n**Character limit**: 500\n\n**Values**: maximum 500 characters ",
          "type": "string"
        },
        "DestinationAccountId": {
          "description": " The ID of the account that the subscription is being transferred to.\n\n\n**Character limit**: 32\n\n**Values**: a valid account ID ",
          "type": "string"
        },
        "DestinationInvoiceOwnerId": {
          "description": " The ID of the invoice that the subscription is being transferred to.\n\n\n**Character limit**: 32\n\n**Values**: a valid invoice ID ",
          "type": "string"
        },
        "EffectiveDate": {
          "description": " The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.\nThis field is only required if the `Type` field is set to `Cancellation`.\n\n",
          "format": "date",
          "type": "string"
        },
        "Name": {
          "description": " The name of the amendment. This field is only required if the `Type` field is set to `NewProduct`, `RemoveProduct`, `UpdateProduct`, or `TermsAndConditions`.\n\n\n**Character limit**: 100\n\n**Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "RatePlanData": {
          "description": "A container for one `RatePlanData`. This field is only required if the `Type` field is set to `NewProduct`, `RemoveProduct`, or `UpdateProduct`.\n",
          "properties": {
            "RatePlan": {
              "$ref": "#/definitions/RatePlan"
            },
            "RatePlanChargeData": {
              "description": "",
              "items": {
                "$ref": "#/definitions/RatePlanChargeDataInRatePlanData"
              },
              "type": "array"
            },
            "SubscriptionProductFeatureList": {
              "$ref": "#/definitions/SubscriptionProductFeatureList"
            }
          },
          "required": [
            "RatePlan"
          ],
          "type": "object"
        },
        "RenewalSetting": {
          "description": " Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\n\nThis field is only required if the `TermType` field is set to `Termed`.\n\n\n**Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN ",
          "type": "string"
        },
        "RenewalTerm": {
          "description": " The term of renewal for the amended subscription. This field can be updated when Status is `Draft`.\nThis field is only required if the `Type` field is set to `TermsAndConditions`.\n\n\n**Values:** a valid number ",
          "format": "int64",
          "type": "integer"
        },
        "RenewalTermPeriodType": {
          "description": " The period type for the subscription renewal term. This field can be updated when Status is `Draft`.\n**Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.\n\n\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n",
          "type": "string"
        },
        "ServiceActivationDate": {
          "description": " The date when service is activated. Use this field if [Zuora is configured to require service activation in Z-Billing](https://knowledgecenter.zuora.com/CB_Billing/W_Billing_and_Payments_Settings/Define_Default_Subscription_Settings).\n\nThis field is only required if the `Status` field is set to `PendingActivation`.\n",
          "format": "date",
          "type": "string"
        },
        "SpecificUpdateDate": {
          "description": "The date when the UpdateProduct amendment takes effect. This field is only applicable if there is already a future-dated UpdateProduct amendment on the subscription.\n\n\nFor the UpdateProduct amendments, this field is only required if there is already a future-dated UpdateProduct amendment on the subscription.\n",
          "format": "date",
          "type": "string"
        },
        "Status": {
          "description": " The status of the amendment. Type: string (enum)\n\n\n\n**Values**: one of the following:\n\n- Draft (default, if left null)\n- Pending Activation\n- Pending Acceptance\n- Completed\n",
          "type": "string"
        },
        "SubscriptionId": {
          "description": " The ID of the subscription that the amendment changes.\n\n\n**Character limit**: 32\n\n**Values**: a valid subscription ID ",
          "type": "string"
        },
        "TermStartDate": {
          "description": " The date when the new terms and conditions take effect.\nThis field is only required if the `Type` field is set to `TermsAndConditions`.\n",
          "format": "date",
          "type": "string"
        },
        "TermType": {
          "description": " Indicates if the subscription isTERMED or EVERGREEN.\n\n- A TERMED subscription has an expiration date, and must be manually renewed.\n- An EVERGREEN subscription doesn't have an expiration date, and must be manually ended.\n\nWhen as part of an amendment of type `TermsAndConditions`, this field is required to change the term type of a subscription.\n\n\n**Character limit**: 9\n\n**Values**: TERMED, EVERGREEN ",
          "type": "string"
        },
        "Type": {
          "description": " The type of amendment.\n\n\n**Character limit**: 18\n\n\n\n**Values**: one of the following:\n\n- Cancellation\n- NewProduct\n- OwnerTransfer\n- RemoveProduct\n- Renewal\n- UpdateProduct\n- TermsAndConditions\n- SuspendSubscription (This value is in **Limited Availability**.)\n- ResumeSubscription (This value is in **Limited Availability**.)\n",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the amendment.\n\n\n**Character limit**: 32\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the amendment was last updated.\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "SubscriptionId",
        "Type",
        "ContractEffectiveDate"
      ],
      "type": "object"
    },
    "AmendmentRatePlanChargeData": {
      "properties": {
        "RatePlanCharge": {
          "description": "",
          "properties": {
            "BillCycleType": {
              "description": " Specifies how to determine the billing day for the charge.\n\n\n**Character limit**: 20\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "type": "string"
            },
            "BillingPeriod": {
              "description": " Allows billing period to be overridden on rate plan charge.\n\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "type": "string"
            },
            "BillingTiming": {
              "description": " The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.\n\n\n**Character limit**:\n\n\n**Values**: one of the following:\n\n- I`n Advance`\n- `In Arrears`\n**Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n",
              "type": "string"
            },
            "ChargeNumber": {
              "description": " A unique number that identifies the charge. This number is returned as a string.\n\n\n**Character limit**: 50\n\n\n**Values**: one of the following:\n\n- automatically generated if left null\n- a unique number of 50 characters or fewer\n",
              "type": "string"
            },
            "DiscountAmount": {
              "description": " Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:\n\n- Price\n- IncludedUnits\n- DiscountPercentage\n- OveragePrice\n\n\n**Character limit**: 16\n\n\n**Values**: a valid currency amount ",
              "format": "decimal",
              "type": "string"
            },
            "DiscountPercentage": {
              "description": " Query Filter ",
              "format": "decimal",
              "type": "string"
            },
            "EndDateCondition": {
              "description": " Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.\n\n\n\n**Values**: one of the following:\n\n- `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value.\n- `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields.\n- `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.\n\n\n\n**Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date. ",
              "type": "string"
            },
            "ListPriceBase": {
              "description": "The list price base for the product rate plan charge.\n\n\n**Values**: one of the following:\n\n- `Per Month`\n- `Per Billing Period`\n- `Per Week`\n",
              "type": "string"
            },
            "Price": {
              "description": " Query Filter ",
              "format": "decimal",
              "type": "string"
            },
            "PriceChangeOption": {
              "description": " Applies an automatic price change when a termed subscription is renewed.\n\n\n**Character limit**:\n\n\n**Values**: one of the following:\n\n- `NoChange` (default)\n- `SpecificPercentageValue`\n- `UseLatestProductCatalogPricing`\n",
              "type": "string"
            },
            "PriceIncreasePercentage": {
              "description": " Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.\n\n\n**Character limit**: 16\n\n\n**Values**: a decimal value between -100 and 100 ",
              "format": "decimal",
              "type": "string"
            },
            "ProductRatePlanChargeId": {
              "description": "",
              "type": "string"
            },
            "Quantity": {
              "description": " The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.\n\n\n**Character limit**: 16\n\n\n**Values**: a valid quantity value ",
              "format": "double",
              "type": "number"
            },
            "RatingGroup": {
              "description": "Specifies a rating group based on which usage records are rated. **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nValues:\n\n* `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.       \n* `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. \n* `ByUsageRecord`: The rating is based on each usage record.\n* `ByUsageUpload`: The rating is based on all the usages in a uploaded usage file (.xls or .csv).\n\n**Note:**\n\nThe `ByBillingPeriod` value can be applied for all charge models.\nThe `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.\nUse this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.\n",
              "type": "string"
            },
            "RevRecCode": {
              "description": " Associates this product rate plan charge with a specific revenue recognition code.\n\n\n**Character limit**: 70\n\n\n**Values**: a valid revenue recognition code ",
              "type": "string"
            },
            "RevRecTriggerCondition": {
              "description": " Specifies when revenue recognition begins.\n\n\n**Character limit**: 22\n\n\n**Values**: one of the following:\n\n-  `ContractEffectiveDate`\n\n-  `ServiceActivationDate`\n\n-  `CustomerAcceptanceDate`\n\n",
              "type": "string"
            },
            "RevenueRecognitionRuleName": {
              "description": " Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend\ncalls, you can use this field only for NewProduct amendments. For Update\ncalls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.\n\n\n\n**Character limit**: n/a\n\n\n**Values**: name of an active Revenue Recognition Rule ",
              "type": "string"
            },
            "SpecificBillingPeriod": {
              "description": " Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.\n\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "format": "int64",
              "type": "integer"
            },
            "SpecificEndDate": {
              "description": " The specific date on which the charge ends, in `yyyy-mm-dd` format.\n\n\n**Character limit**: 29\n\n\n\n**Note**:\n\n- This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.\n- If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.\n",
              "format": "date",
              "type": "string"
            },
            "TriggerDate": {
              "description": " The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.\n\n\n**Character limit**: 29\n\n",
              "format": "date",
              "type": "string"
            },
            "TriggerEvent": {
              "description": " Specifies when to start billing the customer for the charge.\n**Note: **This field can be passed through the subscribe\nand amend\ncalls and will override the default value set on the Product Rate Plan Charge.\n\n\n**Character limit**: 18\n\n\n**Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:\n\n- `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed.\n- `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access.\n- `CustomerAcceptance `is when the customer accepts the services or products for a subscription.\n- SpecificDate is valid only on the RatePlanCharge.\n",
              "type": "string"
            },
            "UpToPeriods": {
              "description": " Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.\n\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.UpToPeriods`\n\n**Note**:\n\n- You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n- You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.\n- Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.\n- If you override the value in this field, enter a whole number between 0 and 65535, exclusive.\n- If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.\n",
              "format": "int64",
              "type": "integer"
            },
            "UpToPeriodsType": {
              "description": " The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.\n\n\n**Values**: one of the following:\n\n- `Billing Periods` (default)\n- `Days`\n- `Weeks`\n- `Months`\n- `Years`\n\n\n**Note**:\n\n- You must use this field together with the `UpToPeriods` field to specify the time period.\n- This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n",
              "type": "string"
            },
            "WeeklyBillCycleDay": {
              "description": " Specifies which day of the week as the bill cycle day (BCD) for the charge.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n\n\n\n**Values**: one of the following:\n\n- `Sunday`\n- `Monday`\n- `Tuesday`\n- `Wednesday`\n- `Thursday`\n- `Friday`\n- `Saturday`\n",
              "type": "string"
            }
          },
          "required": [
            "ProductRatePlanChargeId"
          ],
          "type": "object"
        },
        "RatePlanChargeTier": {
          "description": "",
          "items": {
            "$ref": "#/definitions/AmendmentRatePlanChargeTier"
          },
          "type": "array"
        }
      },
      "required": [
        "RatePlanCharge"
      ],
      "type": "object"
    },
    "AmendmentRatePlanChargeTier": {
      "properties": {
        "PriceFormat": {
          "description": " Indicates if the price is a flat fee or is per unit.\n\n\n**Character limit**: 8\n\n\n**Values**: `Flat Fee`, `Per Unit` ",
          "type": "string"
        },
        "RatePlanChargeId": {
          "description": " The ID of the subscription or amendment rate plan charge associated with this tier. You can't create an unassociated tier.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `RatePlanCharge`.`Id` ",
          "type": "string"
        }
      },
      "required": [
        "RatePlanChargeId"
      ],
      "type": "object"
    },
    "ApplyCreditMemoType": {
      "example": {
        "effectiveDate": "2017-03-02",
        "invoices": [
          {
            "amount": 1,
            "invoiceId": "4028905f5a87c0ff015a87d3f8f10043",
            "items": [
              {
                "amount": 0.9,
                "creditMemoItemId": "4028905f5a890526015a8d73f74b0016",
                "invoiceItemId": "4028905f5a87c0ff015a87d3f90c0045"
              },
              {
                "amount": 0.1,
                "creditTaxItemId": "4028905f5a890526015a8d73f90c0018",
                "taxItemId": "4028905f5a87c0ff015a87d3f884003f"
              }
            ]
          }
        ]
      },
      "properties": {
        "debitMemos": {
          "description": "Container for debit memos that the credit memo is applied to.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoApplyDebitMemoRequestType"
          },
          "type": "array"
        },
        "effectiveDate": {
          "description": "The date when the credit memo is applied.\n",
          "format": "date",
          "type": "string"
        },
        "invoices": {
          "description": "Container for invoices that the credit memo is applied to.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoApplyInvoiceRequestType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ApplyPaymentType": {
      "example": {
        "debitMemos": [
          {
            "amount": 1.02,
            "debitMemoId": "4028905f5a87c0ff015a87e49e6b0062",
            "items": [
              {
                "amount": 1,
                "debitMemoItemId": "4028905f5a87c0ff015a87e49e7a0063"
              },
              {
                "amount": 0.02,
                "taxItemId": "4028905f5a87c0ff015a87e49f5e0065"
              }
            ]
          }
        ],
        "effectiveDate": "2017-03-01",
        "invoices": [
          {
            "amount": 10.1,
            "invoiceId": "4028905f5a87c0ff015a87d3f8f10043",
            "items": [
              {
                "amount": 10,
                "invoiceItemId": "4028905f5a87c0ff015a87d3f90c0045"
              },
              {
                "amount": 0.1,
                "taxItemId": "4028905f5a87c0ff015a87d3f884003f"
              }
            ]
          }
        ]
      },
      "properties": {
        "debitMemos": {
          "description": "Container for debit memos.\n",
          "items": {
            "$ref": "#/definitions/PaymentDebitMemoApplicationApplyRequestType"
          },
          "type": "array"
        },
        "effectiveDate": {
          "description": "The date when the payment application takes effect, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "invoices": {
          "description": "Container for invoices.\n",
          "items": {
            "$ref": "#/definitions/PaymentInvoiceApplicationApplyRequestType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BillingOverride": {
      "properties": {
        "billCycleDay": {
          "description": "Specify only when the billCycleType is 'SpecificDayofMonth'.",
          "maximum": 31,
          "minimum": 1,
          "type": "integer"
        },
        "billCycleType": {
          "description": "Specifies how the charge's bill cycle date is determined.",
          "enum": [
            "DefaultFromCustomer",
            "SpecificDayofMonth",
            "SubscriptionStartDay",
            "ChargeTriggerDay",
            "SpecificDayofWeek"
          ],
          "type": "string"
        },
        "billingPeriod": {
          "description": "Specify the billing frequency of the charge.",
          "enum": [
            "Month",
            "Quarter",
            "Semi_Annual",
            "Annual",
            "Eighteen_Months",
            "Two_Years",
            "Three_Years",
            "Five_Years",
            "Specific_Months",
            "Subscription_Term",
            "Week",
            "Specific_Weeks"
          ],
          "type": "string"
        },
        "billingPeriodAlignment": {
          "enum": [
            "AlignToCharge",
            "AlignToSubscriptionStart",
            "AlignToTermStart"
          ],
          "type": "string"
        },
        "billingTiming": {
          "enum": [
            "IN_ADVANCE",
            "IN_ARREARS"
          ],
          "type": "string"
        },
        "specificBillingPeriod": {
          "description": "Specify only when the billingPeriod is 'Specific_Months' or 'Specific_Weeks'.",
          "type": "integer"
        },
        "weeklyBillCycleDay": {
          "description": "Specify only when the billCycleType is 'SpecificDayofWeek'.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BillingPreviewResult": {
      "properties": {
        "accountId": {
          "description": "ID of the customer account to which the billing preview applies.\n",
          "type": "string"
        },
        "creditMemoItems": {
          "description": "An array of credit memo items returned as the result of the billing preivew request.\n\n**Note:** The credit memo items are only available if you have Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/POSTBillingPreviewCreditMemoItem"
          },
          "type": "array"
        },
        "invoiceItems": {
          "description": "An array of invoice items returned as the result of the billing preview request.\n",
          "items": {
            "$ref": "#/definitions/POSTBillingPreviewInvoiceItem"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "BillingUpdate": {
      "properties": {
        "billingPeriodAlignment": {
          "enum": [
            "AlignToCharge",
            "AlignToSubscriptionStart",
            "AlignToTermStart"
          ],
          "type": "string"
        }
      },
      "required": [
        "billingPeriodAlignment"
      ],
      "type": "object"
    },
    "BreakdownDetail": {
      "properties": {
        "amount": {
          "format": "BigDecimal",
          "type": "number"
        },
        "orderNumber": {
          "type": "string"
        },
        "termNumber": {
          "format": "long",
          "type": "number"
        }
      },
      "type": "object"
    },
    "CancelSubscription": {
      "description": "The JSON object containing the information related to the 'CancelSubscription' type of request.",
      "properties": {
        "cancellationEffectiveDate": {
          "format": "date",
          "type": "string"
        },
        "cancellationPolicy": {
          "enum": [
            "EndOfCurrentTerm",
            "EndOfLastInvoicePeriod",
            "SpecificDate"
          ],
          "type": "string"
        }
      },
      "required": [
        "cancellationPolicy"
      ],
      "type": "object"
    },
    "ChargeMetricsData": {
      "properties": {
        "ChargeMetrics": {
          "description": "",
          "items": {
            "$ref": "#/definitions/NewChargeMetrics"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChargeOverride": {
      "description": "The JSON object containing the information for a charge override in the 'AddProduct' type order action.",
      "properties": {
        "billing": {
          "$ref": "#/definitions/BillingOverride"
        },
        "chargeNumber": {
          "maxLength": 50,
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/CustomFields"
        },
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/EndConditions"
        },
        "pricing": {
          "$ref": "#/definitions/PricingOverride"
        },
        "productRatePlanChargeId": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/TriggerParams"
        },
        "uniqueToken": {
          "description": "A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.",
          "maxLength": 50,
          "type": "string"
        }
      },
      "required": [
        "productRatePlanChargeId"
      ],
      "type": "object"
    },
    "ChargeRatedResult": {
      "properties": {
        "appliedToChargeNumber": {
          "description": "The regular charge number that this discount charge is applied to.",
          "type": "string"
        },
        "chargeNumber": {
          "type": "string"
        },
        "ratedItems": {
          "description": "The amount changes per date duration.",
          "items": {
            "$ref": "#/definitions/RatedItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChargeTier": {
      "properties": {
        "endingUnit": {
          "format": "BigDecimal",
          "type": "number"
        },
        "price": {
          "format": "BigDecimal",
          "type": "number"
        },
        "priceFormat": {
          "enum": [
            "FlatFee",
            "PerUnit"
          ],
          "type": "string"
        },
        "startingUnit": {
          "format": "BigDecimal",
          "type": "number"
        },
        "tier": {
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "tier",
        "startingUnit",
        "price"
      ],
      "type": "object"
    },
    "ChargeUpdate": {
      "description": "The JSON object containing the information for a charge update in the 'UpdateProduct' type order action.",
      "properties": {
        "billing": {
          "$ref": "#/definitions/BillingUpdate"
        },
        "chargeNumber": {
          "description": "Read only. Identifies the charge to be updated.\n",
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/CustomFields"
        },
        "description": {
          "type": "string"
        },
        "effectiveDate": {
          "$ref": "#/definitions/TriggerParams"
        },
        "pricing": {
          "$ref": "#/definitions/PricingUpdate"
        },
        "uniqueToken": {
          "description": "description: |\n  A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommonResponse": {
      "properties": {
        "success": {
          "description": "Indicates if the order creation has succeeded.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CommonResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CreateEntityResponseType": {
      "properties": {
        "displayName": {
          "description": "The display name of the entity that is shown in the Zuora UI and APIs.",
          "type": "string"
        },
        "id": {
          "description": "The entity Id.",
          "type": "string"
        },
        "locale": {
          "description": "The locale that is used in this entity.",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity.",
          "type": "string"
        },
        "parentId": {
          "description": "The Id of the parent entity.",
          "type": "string"
        },
        "status": {
          "description": "The status of the entity.",
          "enum": [
            "Provisioned",
            "Unprovisioned"
          ],
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request is successful.",
          "type": "boolean"
        },
        "tenantId": {
          "description": "The Id of the tenant that the entity belongs to.",
          "type": "string"
        },
        "timezone": {
          "description": "The time zone that is used in this entity.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateEntityType": {
      "example": {
        "displayName": "Acme-Asia",
        "locale": "zh_CN",
        "name": "Acme-Asia",
        "parentId": "8a808255557baba1015580e12fa5083a",
        "timezone": "Asia/Harbin"
      },
      "properties": {
        "displayName": {
          "description": "The display name of the entity that is shown in the Zuora UI and APIs\n\n**Note:** If you do not specify the display name in the request, the entity name is used as the display name.",
          "maxLength": 255,
          "type": "string"
        },
        "locale": {
          "description": "The locale that is used in this entity.",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity that is the entity identifier and is unique across all entities in a multi-entity hierarchy.\n\n**Note:** Only alphanumeric characters (letters A–Z and a–z, and digits 0–9), space, period, and hyphen are allowed to be used in entity names. ",
          "maxLength": 255,
          "type": "string"
        },
        "parentId": {
          "description": "The Id of the entity under which you want to create an entity.\nYou can get the parent entity Id by using the GET Entities call. ",
          "type": "string"
        },
        "timezone": {
          "description": "The time zone that is used in this entity.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "parentId",
        "locale",
        "timezone"
      ],
      "type": "object"
    },
    "CreatePaymentType": {
      "example": {
        "accountId": "4028905f5a87c0ff015a87d25ae90025",
        "amount": 44.1,
        "comment": "normal payment",
        "currency": "USD",
        "custom_field_picklist__c": "option1",
        "debitMemos": [
          {
            "amount": 4.1,
            "debitMemoId": "4028905f5a87c0ff015a87e49e6b0062",
            "items": [
              {
                "amount": 4,
                "debitMemoItemId": "4028905f5a87c0ff015a87e49e7a0063"
              },
              {
                "amount": 0.1,
                "taxItemId": "4028905f5a87c0ff015a87e49f5e0065"
              }
            ]
          }
        ],
        "effectiveDate": "2017-03-01",
        "invoices": [
          {
            "amount": 40,
            "invoiceId": "4028905f5a87c0ff015a87d3f8f10043",
            "items": [
              {
                "amount": 39,
                "invoiceItemId": "4028905f5a87c0ff015a87d3f90c0045"
              },
              {
                "amount": 1,
                "taxItemId": "4028905f5a87c0ff015a87d3f884003f"
              }
            ]
          }
        ],
        "paymentMethodId": "402881e522cf4f9b0122cf5dc4020045",
        "type": "External"
      },
      "properties": {
        "accountId": {
          "description": "The ID of the customer account that the payment is created for.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the payment.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Additional information related to the payment.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "currency": {
          "description": "A currency defined in the web-based UI administrative settings.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "debitMemos": {
          "description": "Container for debit memos.\n",
          "items": {
            "$ref": "#/definitions/PaymentDebitMemoApplicationCreateRequestType"
          },
          "type": "array"
        },
        "effectiveDate": {
          "description": "The date when the payment takes effect, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the payment.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "gatewayId": {
          "description": "The ID of the gateway instance that processes the payment. When creating a payment, the ID must be a valid gateway instance name and this gateway must support the specific payment method. If not specified, the default gateway on the Account will be used.\n",
          "type": "string"
        },
        "invoices": {
          "description": "Container for invoices.\n",
          "items": {
            "$ref": "#/definitions/PaymentInvoiceApplicationCreateRequestType"
          },
          "type": "array"
        },
        "paymentMethodId": {
          "description": "The unique ID of the payment method that the customer used to make the payment.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "type": {
          "description": "The type of the payment.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        }
      },
      "required": [
        "amount",
        "paymentMethodId",
        "currency",
        "type"
      ],
      "type": "object"
    },
    "CreateSubscription": {
      "description": "The JSON object containing the information related to the 'CreateSubscription' type of request.",
      "properties": {
        "invoiceSeparately": {
          "type": "boolean"
        },
        "notes": {
          "maxLength": 500,
          "type": "string"
        },
        "subscribeToRatePlans": {
          "items": {
            "$ref": "#/definitions/RatePlanOverride"
          },
          "type": "array"
        },
        "subscriptionNumber": {
          "description": "The subscription number for the new subscription.",
          "maxLength": 100,
          "type": "string"
        },
        "subscriptionOwnerAccountNumber": {
          "type": "string"
        },
        "terms": {
          "$ref": "#/definitions/Terms"
        }
      },
      "type": "object"
    },
    "CreditMemoApplyDebitMemoItemRequestType": {
      "properties": {
        "amount": {
          "description": "The amount that is applied to the specific item. \n",
          "format": "double",
          "type": "number"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item.\n",
          "type": "string"
        },
        "debitMemoItemId": {
          "description": "The ID of the debit memo item that the credit memo item is applied to.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the debit memo taxation item that the credit memo taxation item is applied to.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "CreditMemoApplyDebitMemoRequestType": {
      "properties": {
        "amount": {
          "description": "The credit memo amount to be applied to the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "debitMemoId": {
          "description": "The unique ID of the debit memo that the credit memo is applied to.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for items.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoApplyDebitMemoItemRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount",
        "debitMemoId"
      ],
      "title": "debitMemos",
      "type": "object"
    },
    "CreditMemoApplyInvoiceItemRequestType": {
      "properties": {
        "amount": {
          "description": "The amount that is applied to the specific item. \n",
          "format": "double",
          "type": "number"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item.\n",
          "type": "string"
        },
        "invoiceItemId": {
          "description": "The ID of the invoice item that the credit memo item is applied to.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the invoice taxation item that the credit memo taxation item is applied to.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "CreditMemoApplyInvoiceRequestType": {
      "properties": {
        "amount": {
          "description": "The credit memo amount to be applied to the invoice.\n",
          "format": "double",
          "type": "number"
        },
        "invoiceId": {
          "description": "The unique ID of the invoice that the credit memo is applied to.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for items.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoApplyInvoiceItemRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount",
        "invoiceId"
      ],
      "title": "invoices",
      "type": "object"
    },
    "CreditMemoFromChargeDetailType": {
      "properties": {
        "chargeId": {
          "description": "The ID of the product rate plan charge that the credit memo is created from.\n",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the product rate plan charge.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the product rate plan charge associated with the credit memo.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "memoItemAmount": {
          "description": "The amount of the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "serviceEndDate": {
          "description": "The service end date of the credit memo item. If not specified, the effective end date of the corresponding product rate plan will be used.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The service start date of the credit memo item. If not specified, the effective start date of the corresponding product rate plan will be used.\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "chargeId"
      ],
      "title": "charges",
      "type": "object"
    },
    "CreditMemoFromChargeType": {
      "example": {
        "accountId": "402890555a7e9791015a7f15fe44001c",
        "charges": [
          {
            "chargeId": "402890555a87d7f5015a88c613c5001e",
            "comment": "this is comment1",
            "serviceEndDate": "2018-10-17",
            "serviceStartDate": "2017-10-17"
          },
          {
            "chargeId": "402890555a7d4022015a7d90906b0067",
            "comment": "this is comment2",
            "memoItemAmount": 20,
            "serviceEndDate": "2018-10-17",
            "serviceStartDate": "2017-10-17"
          }
        ],
        "comment": "the comment",
        "effectiveDate": "2017-10-17",
        "reasonCode": "Correcting invoice error"
      },
      "properties": {
        "accountId": {
          "description": "The ID of the account associated with the credit memo.\n",
          "type": "string"
        },
        "charges": {
          "description": "Container for product rate plan charges.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoFromChargeDetailType"
          },
          "type": "array"
        },
        "comment": {
          "description": "Comments about the credit memo.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date when the credit memo takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n",
          "type": "string"
        }
      },
      "required": [
        "accountId"
      ],
      "type": "object"
    },
    "CreditMemoFromInvoiceType": {
      "example": {
        "autoApplyToInvoiceUponPosting": false,
        "comment": "the comment",
        "effectiveDate": "2016-11-30",
        "excludeFromAutoApplyRules": false,
        "items": [
          {
            "amount": 0,
            "comment": "This is comment!",
            "invoiceItemId": "4028905558b483220158b48983dd0015",
            "serviceEndDate": "2016-11-30",
            "serviceStartDate": "2016-11-01",
            "skuName": "SKU-30",
            "taxItems": [
              {
                "amount": 0.01,
                "jurisdiction": "CALIFORNIA",
                "locationCode": "06",
                "sourceTaxItemId": "4028905558b483220158b48983150010",
                "taxCodeDescription": "This is tax code description!",
                "taxDate": "2016-11-30",
                "taxExemptAmount": 0,
                "taxName": "STATE TAX",
                "taxRate": 0.0625,
                "taxRateDescription": "This is tax rate description!",
                "taxRateType": "Percentage"
              }
            ],
            "unitOfMeasure": "Test_UOM"
          }
        ],
        "reasonCode": "Write-off"
      },
      "properties": {
        "autoApplyToInvoiceUponPosting": {
          "description": "Whether the credit memo automatically applies to the invoice upon posting.\n",
          "type": "boolean"
        },
        "comment": {
          "description": "Comments about the credit memo.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date when the credit memo takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "excludeFromAutoApplyRules": {
          "description": "Whether the credit memo is excluded from the rule of automatically applying credit memos to invoices.\n",
          "type": "boolean"
        },
        "invoiceId": {
          "description": "The ID of the invoice that the credit memo is created from.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for items.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoItemFromInvoiceItemType"
          },
          "type": "array"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreditMemoItemBreakdown": {
      "properties": {
        "amount": {
          "format": "BigDecimal",
          "type": "number"
        },
        "applyToChargeNumber": {
          "description": "Available only when the credit memo item represents a discount invoice item.",
          "type": "string"
        },
        "breakdownDetails": {
          "items": {
            "$ref": "#/definitions/BreakdownDetail"
          },
          "type": "array"
        },
        "chargeNumber": {
          "type": "string"
        },
        "creditMemoItemId": {
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "subscriptionNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreditMemoItemFromInvoiceItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the invoice item.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Comments about the invoice item.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the invoice item.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "invoiceItemId": {
          "description": "The ID of the invoice item.\n",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "The service end date of the invoice item. \n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The service start date of the invoice item. \n",
          "format": "date",
          "type": "string"
        },
        "skuName": {
          "description": "The name of the SKU.\n",
          "type": "string"
        },
        "taxItems": {
          "description": "Container for taxation items.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoTaxItemFromInvoiceTaxItemType"
          },
          "type": "array"
        },
        "unitOfMeasure": {
          "description": "The definable unit that you measure when determining charges.\n",
          "type": "string"
        }
      },
      "required": [
        "skuName",
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "CreditMemoQueryType": {
      "example": {
        "accountId": "4028905f5a87c0ff015a87d25ae90025"
      },
      "properties": {
        "accountId": {
          "description": "The ID of the account associated with the credit memo.\n",
          "type": "string"
        }
      },
      "required": [
        "accountId"
      ],
      "type": "object"
    },
    "CreditMemoResponseType": {
      "properties": {
        "id": {
          "description": "The ID of the generated credit memo.\n",
          "type": "string"
        }
      },
      "title": "creditMemos",
      "type": "object"
    },
    "CreditMemoTaxItemFromInvoiceTaxItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the credit memo taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the source taxation item.\n",
          "properties": {
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city. \n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "sourceTaxItemId": {
          "description": "The ID of the source taxation item.\n",
          "type": "string"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific credit memo. \n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "taxExemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "taxName": {
          "description": "The name of taxation.\n",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate. \n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the credit memo. \n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        }
      },
      "title": "taxItems",
      "type": "object"
    },
    "CreditMemoUnapplyDebitMemoItemRequestType": {
      "properties": {
        "amount": {
          "description": "The amount that is unapplied from the specific item. \n",
          "format": "double",
          "type": "number"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item.\n",
          "type": "string"
        },
        "debitMemoItemId": {
          "description": "The ID of the debit memo item that the credit memo item is unapplied from.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the debit memo taxation item that the credit memo taxation item is unapplied from.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "CreditMemoUnapplyDebitMemoRequestType": {
      "properties": {
        "amount": {
          "description": "The credit memo amount to be unapplied from the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "debitMemoId": {
          "description": "The unique ID of the debit memo that the credit memo is unapplied from.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for items.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoUnapplyDebitMemoItemRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount",
        "debitMemoId"
      ],
      "title": "debitMemos",
      "type": "object"
    },
    "CreditMemoUnapplyInvoiceItemRequestType": {
      "properties": {
        "amount": {
          "description": "The amount that is unapplied from the specific item. \n",
          "format": "double",
          "type": "number"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item.\n",
          "type": "string"
        },
        "invoiceItemId": {
          "description": "The ID of the invoice item that the credit memo item is unapplied from.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the invoice taxation item that the credit memo taxation item is unapplied from.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "CreditMemoUnapplyInvoiceRequestType": {
      "properties": {
        "amount": {
          "description": "The credit memo amount to be unapplied from the invoice.\n",
          "format": "double",
          "type": "number"
        },
        "invoiceId": {
          "description": "The unique ID of the invoice that the credit memo is unapplied from.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for items.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoUnapplyInvoiceItemRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount",
        "invoiceId"
      ],
      "title": "invoices",
      "type": "object"
    },
    "CustomFields": {
      "description": "The custom fields. The properties are *dynamic* based on which object it belongs to.",
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DELETEntityResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request is successful.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DebitMemoFromChargeDetailType": {
      "properties": {
        "chargeId": {
          "description": "The ID of the product rate plan charge that the debit memo is created from.\n",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the product rate plan charge.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the product rate plan charge associated with the debit memo.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "memoItemAmount": {
          "description": "The amount of the debit memo item.\n",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "chargeId"
      ],
      "title": "charges",
      "type": "object"
    },
    "DebitMemoFromChargeType": {
      "example": {
        "accountId": "402890555a7e9791015a7f15fe44001c",
        "charges": [
          {
            "chargeId": "402890555a87d7f5015a892cae910050",
            "comment": "this is comment1",
            "memoItemAmount": 30
          },
          {
            "chargeId": "402890555a87d7f5015a892dff7f0053",
            "comment": "this is comment2",
            "memoItemAmount": 20
          }
        ],
        "comment": "the comment",
        "effectiveDate": "2017-10-17",
        "reasonCode": "Correcting invoice error"
      },
      "properties": {
        "accountId": {
          "description": "The ID of the account associated with the debit memo.\n",
          "type": "string"
        },
        "charges": {
          "description": "Container for product rate plan charges.\n",
          "items": {
            "$ref": "#/definitions/DebitMemoFromChargeDetailType"
          },
          "type": "array"
        },
        "comment": {
          "description": "Comments about the debit memo.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date when the debit memo takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n",
          "type": "string"
        }
      },
      "required": [
        "accountId"
      ],
      "title": "charges",
      "type": "object"
    },
    "DebitMemoFromInvoiceType": {
      "example": {
        "comment": "the comment",
        "effectiveDate": "2017-11-30",
        "items": [
          {
            "amount": 0,
            "comment": "This is comment!",
            "invoiceItemId": "402890555a7d4022015a7dadb3b700a6",
            "serviceEndDate": "2017-11-30",
            "serviceStartDate": "2017-11-01",
            "skuName": "SKU-30",
            "taxItems": [
              {
                "amount": 0.01,
                "jurisdiction": "CALIFORNIA",
                "locationCode": "06",
                "sourceTaxItemId": "402890555a7d4022015a7dadb39b00a1",
                "taxDate": "2017-11-30",
                "taxExemptAmount": 0,
                "taxName": "STATE TAX",
                "taxRate": 0.0625,
                "taxRateDescription": "This is tax rate description!",
                "taxRateType": "Percentage"
              }
            ],
            "unitOfMeasure": "Test_UOM"
          }
        ],
        "reasonCode": "Charge Dispute"
      },
      "properties": {
        "comment": {
          "description": "Comments about the debit memo. \n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date when the debit memo takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "invoiceId": {
          "description": "The ID of the invoice that the debit memo is created from.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for items.\n",
          "items": {
            "$ref": "#/definitions/DebitMemoItemFromInvoiceItemType"
          },
          "type": "array"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DebitMemoItemFromInvoiceItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the invoice item.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Comments about the invoice item.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the invoice item.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "invoiceItemId": {
          "description": "The ID of the invoice item.\n",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "The service end date of the debit memo item.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The service start date of the debit memo item. \n",
          "format": "date",
          "type": "string"
        },
        "skuName": {
          "description": "The name of the SKU.\n",
          "type": "string"
        },
        "taxItems": {
          "description": "Container for taxation items.\n",
          "items": {
            "$ref": "#/definitions/DebitMemoTaxItemFromInvoiceTaxItemType"
          },
          "type": "array"
        },
        "unitOfMeasure": {
          "description": "The definable unit that you measure when determining charges.\n",
          "type": "string"
        }
      },
      "required": [
        "skuName",
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "DebitMemoTaxItemFromInvoiceTaxItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the debit memo taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the source taxation item.\n",
          "properties": {
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "sourceTaxItemId": {
          "description": "The ID of the source taxation item.\n",
          "type": "string"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific debit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date that the tax is applied to the debit memo, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "taxExemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "taxName": {
          "description": "The name of taxation.\n",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate.\n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the debit memo.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        }
      },
      "title": "taxItems",
      "type": "object"
    },
    "DeleteResult": {
      "properties": {
        "errors": {
          "description": "If the delete failed, this contains an array of Error objects.\n",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "id": {
          "description": "ID of the deleted object.\n",
          "type": "string"
        },
        "success": {
          "description": "A boolean field indicating the success of the delete operation. If the delete was successful, it is `true`. Otherwise, `false`.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DiscountPricingOverride": {
      "properties": {
        "applyDiscountTo": {
          "enum": [
            "ONETIME",
            "RECURRING",
            "USAGE",
            "ONETIMERECURRING",
            "ONETIMEUSAGE",
            "RECURRINGUSAGE",
            "ONETIMERECURRINGUSAGE"
          ],
          "type": "string"
        },
        "discountAmount": {
          "format": "BigDecimal",
          "type": "number"
        },
        "discountLevel": {
          "enum": [
            "rateplan",
            "subscription",
            "account"
          ],
          "type": "string"
        },
        "discountPercentage": {
          "format": "BigDecimal",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ElectronicPaymentOptions": {
      "properties": {
        "PaymentMethodId": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EndConditions": {
      "properties": {
        "endDateCondition": {
          "description": "Specify how the charge is terminated.",
          "enum": [
            "Subscription_End",
            "Fixed_Period",
            "Specific_End_Date"
          ],
          "type": "string"
        },
        "specificEndDate": {
          "description": "Specify only when the endDateCondition is 'Specific_End_Date'.",
          "format": "date",
          "type": "string"
        },
        "upToPeriods": {
          "description": "Specify only when the endDateCondition is 'Fixed_Period'.",
          "type": "integer"
        },
        "upToPeriodsType": {
          "description": "Specify only when the endDateCondition is 'Fixed_Period'.",
          "enum": [
            "Billing_Periods",
            "Days",
            "Weeks",
            "Months",
            "Years"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Error": {
      "properties": {
        "Code": {
          "description": "",
          "type": "string"
        },
        "Field": {
          "description": "",
          "type": "string"
        },
        "Message": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventRevenueItemType": {
      "properties": {
        "accountingPeriodName": {
          "description": "Name of the accounting period. The open-ended accounting period is named `Open-Ended`.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        }
      },
      "required": [
        "accountingPeriodName"
      ],
      "title": "revenueItems",
      "type": "object"
    },
    "ExecuteResult": {
      "properties": {
        "Errors": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "Id": {
          "description": "The ID of the object in the call. The value is the same as the value you provide in the `ids` field for the request.\n",
          "type": "string"
        },
        "Success": {
          "description": "Returns `true` if the call was processed successfully, otherwise `false`.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ExternalPaymentOptions": {
      "properties": {
        "Amount": {
          "description": "",
          "format": "double",
          "type": "number"
        },
        "EffectiveDate": {
          "description": "",
          "format": "date",
          "type": "string"
        },
        "GatewayOrderId": {
          "description": "",
          "type": "string"
        },
        "PaymentMethodId": {
          "description": "",
          "type": "string"
        },
        "ReferenceId": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETAPaymentGatwayResponse": {
      "properties": {
        "id": {
          "description": "The ID of the payment gateway.",
          "type": "string"
        },
        "isActive": {
          "description": "Specifies if this payment gateway is in active status.",
          "type": "boolean"
        },
        "isDefault": {
          "description": "Specifies if this is the default payment gateway to process payments for your customer accounts.",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the payment gateway.",
          "type": "string"
        },
        "type": {
          "description": "The type of the payment gateway",
          "type": "string"
        }
      },
      "title": "paymentgateways",
      "type": "object"
    },
    "GETARPaymentType": {
      "properties": {
        "accountId": {
          "description": "The ID of the customer account that the payment is for.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the payment.\n",
          "format": "double",
          "type": "number"
        },
        "appliedAmount": {
          "description": "The applied amount of the payment.\n",
          "format": "double",
          "type": "number"
        },
        "authTransactionId": {
          "description": "The authorization transaction ID from the payment gateway.\n",
          "type": "string"
        },
        "bankIdentificationNumber": {
          "description": "The first six digits of the credit card or debit card used for the payment, when applicable.\n",
          "type": "string"
        },
        "cancelledOn": {
          "description": "The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the payment.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the payment.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the payment was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditBalanceAmount": {
          "description": "The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Advanced AR Settlement feature.\n",
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "A currency defined in the web-based UI administrative settings.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the payment.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "bankAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCodeType": {
              "description": "The type of the accounting code for the unapplied payment.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "gatewayId": {
          "description": "The ID of the gateway instance that processes the payment.\n",
          "type": "string"
        },
        "gatewayOrderId": {
          "description": "A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created.  If not specified, the payment number will be passed in instead.\n",
          "type": "string"
        },
        "gatewayResponse": {
          "description": "The message returned from the payment gateway for the payment. This message is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayResponseCode": {
          "description": "The code returned from the payment gateway for the payment. This code is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayState": {
          "description": "The status of the payment in the gateway; use for reconciliation.\n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the created payment. For example, 4028905f5a87c0ff015a87eb6b75007f.\n",
          "type": "string"
        },
        "markedForSubmissionOn": {
          "description": "The date and time when a payment was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the payment. For example, P-00000001.\n",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The unique ID of the payment method that the customer used to make the payment.\n",
          "type": "string"
        },
        "paymentMethodSnapshotId": {
          "description": "The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "refundAmount": {
          "description": "The amount of the payment that is refunded.\n",
          "format": "double",
          "type": "number"
        },
        "secondPaymentReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "settledOn": {
          "description": "The date and time when the payment was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.\n",
          "format": "date-time",
          "type": "string"
        },
        "softDescriptor": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "softDescriptorPhone": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the payment.\n",
          "enum": [
            "Draft",
            "Processing",
            "Processed",
            "Error",
            "Canceled",
            "Posted"
          ],
          "type": "string"
        },
        "submittedOn": {
          "description": "The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "type": {
          "description": "The type of the payment.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        },
        "unappliedAmount": {
          "description": "The unapplied amount of the payment.\n",
          "format": "double",
          "type": "number"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the payment.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETARPaymentTypewithSuccess": {
      "properties": {
        "accountId": {
          "description": "The ID of the customer account that the payment is for.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the payment.\n",
          "format": "double",
          "type": "number"
        },
        "appliedAmount": {
          "description": "The applied amount of the payment.\n",
          "format": "double",
          "type": "number"
        },
        "authTransactionId": {
          "description": "The authorization transaction ID from the payment gateway.\n",
          "type": "string"
        },
        "bankIdentificationNumber": {
          "description": "The first six digits of the credit card or debit card used for the payment, when applicable.\n",
          "type": "string"
        },
        "cancelledOn": {
          "description": "The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the payment.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the payment part.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the payment was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditBalanceAmount": {
          "description": "The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Advanced AR Settlement feature.\n",
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "A currency defined in the web-based UI administrative settings.\n\nFor more information about the supported currencies and , see [ISO Currency Codes] (https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/D_Currencies_and_Their_3-Letter_Codes).\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the payment.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "bankAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCodeType": {
              "description": "The type of the accounting code for the unapplied payment.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "gatewayId": {
          "description": "The ID of the gateway instance that processes the payment.\n",
          "type": "string"
        },
        "gatewayOrderId": {
          "description": "A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created.\n",
          "type": "string"
        },
        "gatewayResponse": {
          "description": "The message returned from the payment gateway for the payment. This message is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayResponseCode": {
          "description": "The code returned from the payment gateway for the payment. This code is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayState": {
          "description": "The status of the payment in the gateway; use for reconciliation. \n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the payment. For example, 4028905f5a87c0ff015a87eb6b75007f.\n",
          "type": "string"
        },
        "markedForSubmissionOn": {
          "description": "The date and time when a payment was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the payment. For example, P-00000001.\n",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The unique ID of the payment method that the customer used to make the payment.\n",
          "type": "string"
        },
        "paymentMethodSnapshotId": {
          "description": "The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "refundAmount": {
          "description": "The amount of the payment that is refunded.\n",
          "format": "double",
          "type": "number"
        },
        "secondPaymentReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "settledOn": {
          "description": "The date and time when the payment was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.\n",
          "format": "date-time",
          "type": "string"
        },
        "softDescriptor": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "softDescriptorPhone": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the payment.\n",
          "enum": [
            "Draft",
            "Processing",
            "Processed",
            "Error",
            "Canceled",
            "Posted"
          ],
          "type": "string"
        },
        "submittedOn": {
          "description": "The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "description": "The type of the payment.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        },
        "unappliedAmount": {
          "description": "The unapplied amount of the payment.\n",
          "format": "double",
          "type": "number"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the payment.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "payments",
      "type": "object"
    },
    "GETAccountSummaryInvoiceType": {
      "properties": {
        "amount": {
          "description": "Invoice amount before adjustments, discounts, and similar items.\n",
          "format": "decimal",
          "type": "string"
        },
        "balance": {
          "description": "Balance due on the invoice.\n",
          "format": "decimal",
          "type": "string"
        },
        "dueDate": {
          "description": "Due date as `yyyy-mm-dd`.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "Invoice ID.\n",
          "type": "string"
        },
        "invoiceDate": {
          "description": "Invoice date as `yyyy-mm-dd`.\n",
          "format": "date",
          "type": "string"
        },
        "invoiceNumber": {
          "description": "Invoice number.\n",
          "type": "string"
        },
        "status": {
          "description": "Invoice status - not the payment status of the invoice, just the status of the invoice itself. Possible values are: `Posted`, `Draft`, `Canceled`, `Error`.\n",
          "type": "string"
        }
      },
      "title": "invoices",
      "type": "object"
    },
    "GETAccountSummaryPaymentInvoiceType": {
      "properties": {
        "appliedPaymentAmount": {
          "description": "Amount of payment applied to the invoice.\n",
          "format": "decimal",
          "type": "string"
        },
        "invoiceId": {
          "description": "Invoice ID.\n",
          "type": "string"
        },
        "invoiceNumber": {
          "description": "Invoice number.\n",
          "type": "string"
        }
      },
      "title": "paidInvoices",
      "type": "object"
    },
    "GETAccountSummaryPaymentType": {
      "properties": {
        "effectiveDate": {
          "description": "Effective date as `yyyy-mm-dd`.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "Payment ID.\n",
          "type": "string"
        },
        "paidInvoices": {
          "description": "Container for paid invoices for this subscription.\n",
          "items": {
            "$ref": "#/definitions/GETAccountSummaryPaymentInvoiceType"
          },
          "type": "array"
        },
        "paymentNumber": {
          "description": "Payment number.\n",
          "type": "string"
        },
        "paymentType": {
          "description": "Payment type; possible values are: `External`, `Electronic`.\n",
          "type": "string"
        },
        "status": {
          "description": "Payment status. Possible values are: `Draft`, `Processing`, `Processed`, `Error`, `Voided`, `Canceled`, `Posted`.\n",
          "type": "string"
        }
      },
      "title": "payments",
      "type": "object"
    },
    "GETAccountSummarySubscriptionRatePlanType": {
      "properties": {
        "productId": {
          "description": "Product ID.\n",
          "type": "string"
        },
        "productName": {
          "description": "Product name.\n",
          "type": "string"
        },
        "productRatePlanId": {
          "description": "Product Rate Plan ID.\n",
          "type": "string"
        },
        "productSku": {
          "description": "",
          "type": "string"
        },
        "ratePlanName": {
          "description": "Rate plan name.\n",
          "type": "string"
        }
      },
      "title": "ratePlans",
      "type": "object"
    },
    "GETAccountSummarySubscriptionType": {
      "properties": {
        "CpqBundleJsonId__QT": {
          "description": "",
          "type": "string"
        },
        "OpportunityCloseDate__QT": {
          "description": "",
          "type": "string"
        },
        "OpportunityName__QT": {
          "description": "",
          "type": "string"
        },
        "QuoteBusinessType__QT": {
          "description": "",
          "type": "string"
        },
        "QuoteNumber__QT": {
          "description": "",
          "type": "string"
        },
        "QuoteType__QT": {
          "description": "",
          "type": "string"
        },
        "autoRenew": {
          "description": "If `true`, auto-renew is enabled. If `false`, auto-renew is disabled.\n",
          "type": "boolean"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "id": {
          "description": "Subscription ID.\n",
          "type": "string"
        },
        "initialTerm": {
          "description": "Duration of the initial subscription term in whole months. \n",
          "type": "string"
        },
        "ratePlans": {
          "description": "Container for rate plans for this subscription.\n",
          "items": {
            "$ref": "#/definitions/GETAccountSummarySubscriptionRatePlanType"
          },
          "type": "array"
        },
        "renewalTerm": {
          "description": "Duration of the renewal term in whole months.\n",
          "type": "string"
        },
        "status": {
          "description": "Subscription status; possible values are: `Draft`, `PendingActivation`, `PendingAcceptance`, `Active`, `Cancelled`, `Expired`.\n",
          "type": "string"
        },
        "subscriptionNumber": {
          "description": "Subscription Number.\n",
          "type": "string"
        },
        "subscriptionStartDate": {
          "description": "Subscription start date.\n",
          "format": "date",
          "type": "string"
        },
        "termEndDate": {
          "description": "End date of the subscription term. If the subscription is evergreen, this is either null or equal to the cancellation date, as appropriate.\n",
          "format": "date",
          "type": "string"
        },
        "termStartDate": {
          "description": "Start date of the subscription term. If this is a renewal subscription, this date is different than the subscription start date.\n",
          "format": "date",
          "type": "string"
        },
        "termType": {
          "description": "Possible values are: `TERMED`, `EVERGREEN`.\n",
          "type": "string"
        }
      },
      "title": "subscriptions",
      "type": "object"
    },
    "GETAccountSummaryType": {
      "properties": {
        "basicInfo": {
          "description": "Container for basic information about the account.\n",
          "properties": {
            "accountNumber": {
              "description": "Account number.\n",
              "type": "string"
            },
            "additionalEmailAddresses": {
              "description": "A list of additional email addresses to receive emailed invoices.\n",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "balance": {
              "description": "Current outstanding balance.\n",
              "format": "decimal",
              "type": "string"
            },
            "batch": {
              "description": "The alias name given to a batch. A string of 50 characters or less.\n",
              "type": "string"
            },
            "billCycleDay": {
              "description": "Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.\n",
              "type": "string"
            },
            "currency": {
              "description": "A currency value.\n",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "defaultPaymentMethod": {
              "description": "",
              "properties": {
                "creditCardExpirationMonth": {
                  "description": "Two-digit numeric card expiration month as `mm`.\n",
                  "type": "string"
                },
                "creditCardExpirationYear": {
                  "description": "Four-digit card expiration year as `yyyy`.\n",
                  "type": "string"
                },
                "creditCardNumber": {
                  "description": "Credit card number, 16 characters or less, displayed in masked format (e.g., ************1234).\n",
                  "type": "string"
                },
                "creditCardType": {
                  "description": "Possible values are: `Visa`, `MasterCard`, `AmericanExpress`, `Discover`.\n",
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the credit card payment method associated with this account.\n",
                  "type": "string"
                },
                "paymentMethodType": {
                  "description": "",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "id": {
              "description": "Account ID.\n",
              "type": "string"
            },
            "invoiceDeliveryPrefsEmail": {
              "description": "Whether the customer wants to receive invoices through email. \n",
              "type": "boolean"
            },
            "invoiceDeliveryPrefsPrint": {
              "description": "Whether the customer wants to receive printed invoices, such as through postal mail.\n",
              "type": "boolean"
            },
            "lastInvoiceDate": {
              "description": "Date of the most recent invoice for the account; null if no invoice has ever been generated.\n",
              "format": "date",
              "type": "string"
            },
            "lastPaymentAmount": {
              "description": "Amount of the most recent payment collected for the account; null if no payment has ever been collected.\n",
              "format": "decimal",
              "type": "string"
            },
            "lastPaymentDate": {
              "description": "Date of the most recent payment collected for the account. Null if no payment has ever been collected.\n",
              "format": "date",
              "type": "string"
            },
            "name": {
              "description": "Account name.\n",
              "type": "string"
            },
            "status": {
              "description": "Account status; possible values are: `Active`, `Draft`, `Canceled`.\n",
              "type": "string"
            },
            "tags": {
              "description": "",
              "type": "string"
            }
          },
          "type": "object"
        },
        "billToContact": {
          "description": "Container for bill-to contact information.",
          "properties": {
            "address1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "address2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "A valid country name or abbreviation.\n",
              "type": "string"
            },
            "county": {
              "description": "County; 32 characters or less. Zuora Tax uses this information to calculate county taxation.          ",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "fax": {
              "description": "Fax phone number, 40 characters or less.\n",
              "type": "string"
            },
            "firstName": {
              "description": "First name, 100 characters or less.\n",
              "type": "string"
            },
            "id": {
              "description": "Contact ID.\n",
              "type": "string"
            },
            "lastName": {
              "description": "Last name, 100 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State name or 2-character abbreviation.\n",
              "type": "string"
            },
            "taxRegion": {
              "description": "A region string, defined in your Zuora tax rules.\n",
              "type": "string"
            },
            "workEmail": {
              "description": "Work email address, 80 characters or less.\n",
              "type": "string"
            },
            "workPhone": {
              "description": "Work phone number, 40 characters or less.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "invoices": {
          "description": "Container for invoices. Only returns the last 6 invoices.\n",
          "items": {
            "$ref": "#/definitions/GETAccountSummaryInvoiceType"
          },
          "type": "array"
        },
        "payments": {
          "description": "Container for payments. Only returns the last 6 payments.\n",
          "items": {
            "$ref": "#/definitions/GETAccountSummaryPaymentType"
          },
          "type": "array"
        },
        "soldToContact": {
          "description": "Container for sold-to contact information; uses the same structure as `billToContact`.\n",
          "properties": {
            "address1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "address2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "A valid country name or abbreviation\n",
              "type": "string"
            },
            "county": {
              "description": "County; 32 characters or less. Zuora Tax uses this information to calculate county taxation.          ",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "fax": {
              "description": "Fax phone number, 40 characters or less.\n",
              "type": "string"
            },
            "firstName": {
              "description": "First name, 100 characters or less.\n",
              "type": "string"
            },
            "id": {
              "description": "Contact ID.\n",
              "type": "string"
            },
            "lastName": {
              "description": "Last name, 100 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State name or 2-character abbreviation.\n",
              "type": "string"
            },
            "taxRegion": {
              "description": "A region string, defined in your Zuora tax rules.\n",
              "type": "string"
            },
            "workEmail": {
              "description": "Work email address, 80 characters or less.\n",
              "type": "string"
            },
            "workPhone": {
              "description": "Work phone number, 40 characters or less.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "subscriptions": {
          "description": "Container for subscriptions.\n",
          "items": {
            "$ref": "#/definitions/GETAccountSummarySubscriptionType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "taxInfo": {
          "description": "Container for tax exempt information, used to establish the tax exempt status of a customer account.\n",
          "properties": {
            "VATId": {
              "description": "EU Value Added Tax ID.\n",
              "type": "string"
            },
            "companyCode": {
              "description": "Unique code that identifies a company account in Avalara.\n",
              "type": "string"
            },
            "exemptCertificateId": {
              "description": "ID of the customer tax exemption certificate.\n",
              "type": "string"
            },
            "exemptCertificateType": {
              "description": "Type of tax exemption certificate that the customer holds.\n",
              "type": "string"
            },
            "exemptDescription": {
              "description": "Description of the tax exemption certificate that the customer holds.\n",
              "type": "string"
            },
            "exemptEffectiveDate": {
              "description": "Date when the customer tax exemption starts.\n",
              "format": "date",
              "type": "string"
            },
            "exemptExpirationDate": {
              "description": "Date when the customer tax exemption expires.\n",
              "format": "date",
              "type": "string"
            },
            "exemptIssuingJurisdiction": {
              "description": "Jurisdiction in which the customer tax exemption certificate was issued.\n",
              "type": "string"
            },
            "exemptStatus": {
              "description": "Status of the account tax exemption.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "usage": {
          "description": "Container for usage data. Only returns the last 6 months of usage.\n",
          "items": {
            "$ref": "#/definitions/GETAccountSummaryUsageType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GETAccountSummaryUsageType": {
      "properties": {
        "quantity": {
          "description": "Number of units used.\n",
          "format": "decimal",
          "type": "string"
        },
        "startDate": {
          "description": "The start date of a usage period as `yyyy-mm`. Zuora uses this field value to determine the usage date.\n",
          "format": "date",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Unit by which consumption is measured, as configured in the Billing Settings section of the web-based UI.\n",
          "type": "string"
        }
      },
      "title": "usage",
      "type": "object"
    },
    "GETAccountType": {
      "properties": {
        "basicInfo": {
          "description": "Container for basic information about the account.\n",
          "properties": {
            "accountNumber": {
              "description": "Account number.\n",
              "type": "string"
            },
            "batch": {
              "description": "The alias name given to a batch. A string of 50 characters or less.\n",
              "type": "string"
            },
            "communicationProfileId": {
              "description": "ID of a communication profile.\n",
              "type": "string"
            },
            "crmId": {
              "description": "CRM account ID for the account, 100 characters or less.\n",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "id": {
              "description": "Account ID.\n",
              "type": "string"
            },
            "invoiceTemplateId": {
              "description": "Invoice template ID, configured in Billing Settings in the Zuora UI.\n",
              "type": "string"
            },
            "name": {
              "description": "Account name.\n",
              "type": "string"
            },
            "notes": {
              "description": "Notes associated with the account, up to 65,535 characters.\n",
              "type": "string"
            },
            "status": {
              "description": "Account status; possible values are: `Active`, `Draft`, `Canceled`.\n",
              "type": "string"
            },
            "tags": {
              "description": "",
              "type": "string"
            }
          },
          "type": "object"
        },
        "billToContact": {
          "description": "Container for bill-to contact information.\n",
          "properties": {
            "address1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "address2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country name or abbreviation.\n",
              "type": "string"
            },
            "county": {
              "description": "County; 32 characters or less. Zuora Tax uses this information to calculate county taxation.          ",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "fax": {
              "description": "Fax phone number, 40 characters or less.\n",
              "type": "string"
            },
            "firstName": {
              "description": "First name, 100 characters or less.\n",
              "type": "string"
            },
            "homePhone": {
              "description": "Home phone number, 40 characters or less.\n",
              "type": "string"
            },
            "lastName": {
              "description": "Last name, 100 characters or less.\n",
              "type": "string"
            },
            "mobilePhone": {
              "description": "Mobile phone number, 40 characters or less.\n",
              "type": "string"
            },
            "nickname": {
              "description": "Nickname for this contact.\n",
              "type": "string"
            },
            "otherPhone": {
              "description": "Other phone number, 40 characters or less.\n",
              "type": "string"
            },
            "otherPhoneType": {
              "description": "Possible values are: `Work`, `Mobile`, `Home`, `Other`.\n",
              "type": "string"
            },
            "personalEmail": {
              "description": "Personal email address, 80 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State name or 2-character abbreviation.\n",
              "type": "string"
            },
            "taxRegion": {
              "description": "A region string, defined in your Zuora tax rules.\n",
              "type": "string"
            },
            "workEmail": {
              "description": "Work email address, 80 characters or less.\n",
              "type": "string"
            },
            "workPhone": {
              "description": "Work phone number, 40 characters or less.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "billingAndPayment": {
          "description": "Container for billing and payment information for the account.\n",
          "properties": {
            "additionalEmailAddresses": {
              "description": "A list of additional email addresses to receive emailed invoices.\n",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "billCycleDay": {
              "description": "Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.\n",
              "type": "string"
            },
            "currency": {
              "description": "A currency defined in the web-based UI administrative settings.\n",
              "type": "string"
            },
            "invoiceDeliveryPrefsEmail": {
              "description": "Whether the customer wants to receive invoices through email. \n",
              "type": "boolean"
            },
            "invoiceDeliveryPrefsPrint": {
              "description": "Whether the customer wants to receive printed invoices, such as through postal mail.\n",
              "type": "boolean"
            },
            "paymentGateway": {
              "description": "The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.\n",
              "type": "string"
            },
            "paymentTerm": {
              "description": "A payment-terms indicator defined in the web-based UI administrative settings, e.g., \"Net 30\".\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "metrics": {
          "description": "Container for account metrics.\n",
          "properties": {
            "balance": {
              "description": "The customer's total invoice balance minus credit balance.\n",
              "format": "decimal",
              "type": "string"
            },
            "contractedMrr": {
              "description": "Future expected MRR that accounts for future upgrades, downgrades, upsells and cancellations.\n",
              "format": "decimal",
              "type": "string"
            },
            "creditBalance": {
              "description": "Current credit balance.\n",
              "format": "decimal",
              "type": "string"
            },
            "totalInvoiceBalance": {
              "description": "Total of all open invoices.\n",
              "format": "decimal",
              "type": "string"
            }
          },
          "type": "object"
        },
        "soldToContact": {
          "description": "Container for sold-to contact information. Uses the same field structure as billToContact.\n",
          "properties": {
            "address1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "address2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country name or abbreviation.\n",
              "type": "string"
            },
            "county": {
              "description": "County; 32 characters or less. Zuora tax uses this information to calculate county taxation.          ",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "fax": {
              "description": "Fax phone number, 40 characters or less.\n",
              "type": "string"
            },
            "firstName": {
              "description": "First name, 100 characters or less.\n",
              "type": "string"
            },
            "homePhone": {
              "description": "Home phone number, 40 characters or less.\n",
              "type": "string"
            },
            "lastName": {
              "description": "Last name, 100 characters or less.\n",
              "type": "string"
            },
            "mobilePhone": {
              "description": "Mobile phone number, 40 characters or less.\n",
              "type": "string"
            },
            "nickname": {
              "description": "Nickname for this contact.\n",
              "type": "string"
            },
            "otherPhone": {
              "description": "Other phone number, 40 characters or less.\n",
              "type": "string"
            },
            "otherPhoneType": {
              "description": "Possible values are: `Work`, `Mobile`, `Home`, `Other`.\n",
              "type": "string"
            },
            "personalEmail": {
              "description": "Personal email address, 80 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State name or 2-character abbreviation.\n",
              "type": "string"
            },
            "taxRegion": {
              "description": "A region string, defined in your Zuora tax rules.\n",
              "type": "string"
            },
            "workEmail": {
              "description": "Work email address, 80 characters or less.\n",
              "type": "string"
            },
            "workPhone": {
              "description": "Work phone number, 40 characters or less.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "taxInfo": {
          "description": "Container for tax exempt information, used to establish the tax exempt status of a customer account.\n",
          "properties": {
            "VATId": {
              "description": "EU Value Added Tax ID.\n",
              "type": "string"
            },
            "companyCode": {
              "description": "Unique code that identifies a company account in Avalara.\n",
              "type": "string"
            },
            "exemptCertificateId": {
              "description": "ID of the customer tax exemption certificate.\n",
              "type": "string"
            },
            "exemptCertificateType": {
              "description": "Type of tax exemption certificate that the customer holds.\n",
              "type": "string"
            },
            "exemptDescription": {
              "description": "Description of the tax exemption certificate that the customer holds.\n",
              "type": "string"
            },
            "exemptEffectiveDate": {
              "description": "Date when the customer tax exemption starts.\n",
              "format": "date",
              "type": "string"
            },
            "exemptExpirationDate": {
              "description": "Date when the customer tax exemption expires.\n",
              "format": "date",
              "type": "string"
            },
            "exemptIssuingJurisdiction": {
              "description": "Jurisdiction in which the customer tax exemption certificate was issued.\n",
              "type": "string"
            },
            "exemptStatus": {
              "description": "Status of the account tax exemption.\n",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "GETAccountingCodeItemType": {
      "properties": {
        "category": {
          "description": "The category associated with the accounting code.\n",
          "enum": [
            "Assets",
            "Liabilities",
            "Equity",
            "Revenue",
            "Expenses"
          ],
          "type": "string"
        },
        "createdBy": {
          "description": "The ID of the user who created the accounting code.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "Date and time when the accounting code was created.\n",
          "format": "date-time",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "glAccountName": {
          "description": "Name of the account in your general ledger.\n\nField only available if you have Zuora Finance enabled.\n",
          "type": "string"
        },
        "glAccountNumber": {
          "description": "Account number in your general ledger.\n\nField only available if you have Zuora Finance enabled.\n",
          "type": "string"
        },
        "id": {
          "description": "ID of the accounting code.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the accounting code.\n",
          "type": "string"
        },
        "notes": {
          "description": "Any optional notes for the accounting code.\n",
          "type": "string"
        },
        "status": {
          "description": "The accounting code status.\n",
          "enum": [
            "Active",
            "Inactive"
          ],
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "type": {
          "description": "Accounting code type. \n\nNote that `On-Account Receivable` is only available if you enable the Advanced AR Settlement feature. \n",
          "enum": [
            "AccountsReceivable",
            "On-Account Receivable",
            "Cash",
            "OtherAssets",
            "CustomerCashOnAccount",
            "DeferredRevenue",
            "SalesTaxPayable",
            "OtherLiabilities",
            "SalesRevenue",
            "SalesDiscounts",
            "OtherRevenue",
            "OtherEquity",
            "BadDebt",
            "OtherExpenses"
          ],
          "type": "string"
        },
        "updatedBy": {
          "description": "The ID of the user who last updated the accounting code.\n",
          "type": "string"
        },
        "updatedOn": {
          "description": "Date and time when the accounting code was last updated.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETAccountingCodeItemWithoutSuccessType": {
      "properties": {
        "category": {
          "description": "The category associated with the accounting code.\n",
          "enum": [
            "Assets",
            "Liabilities",
            "Equity",
            "Revenue",
            "Expenses"
          ],
          "type": "string"
        },
        "createdBy": {
          "description": "The ID of the user who created the accounting code.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "Date and time when the accounting code was created.\n",
          "format": "date-time",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "glAccountName": {
          "description": "Name of the account in your general ledger.\n\nField only available if you have Zuora Finance enabled.\n",
          "type": "string"
        },
        "glAccountNumber": {
          "description": "Account number in your general ledger.\n\nField only available if you have Zuora Finance enabled.\n",
          "type": "string"
        },
        "id": {
          "description": "ID of the accounting code.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the accounting code.\n",
          "type": "string"
        },
        "notes": {
          "description": "Any optional notes for the accounting code.\n",
          "type": "string"
        },
        "status": {
          "description": "The accounting code status.\n",
          "enum": [
            "Active",
            "Inactive"
          ],
          "type": "string"
        },
        "type": {
          "description": "Accounting code type. \n\nNote that `On-Account Receivable` is only available if you enable the Advanced AR Settlement feature. \n",
          "enum": [
            "AccountsReceivable",
            "On-Account Receivable",
            "Cash",
            "OtherAssets",
            "CustomerCashOnAccount",
            "DeferredRevenue",
            "SalesTaxPayable",
            "OtherLiabilities",
            "SalesRevenue",
            "SalesDiscounts",
            "OtherRevenue",
            "OtherEquity",
            "BadDebt",
            "OtherExpenses"
          ],
          "type": "string"
        },
        "updatedBy": {
          "description": "The ID of the user who last updated the accounting code.\n",
          "type": "string"
        },
        "updatedOn": {
          "description": "Date and time when the accounting code was last updated.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "accountingCodes",
      "type": "object"
    },
    "GETAccountingCodesType": {
      "properties": {
        "accountingCodes": {
          "description": "An array of all the accounting codes in your chart of accounts. Each accounting code has the following fields.\n",
          "items": {
            "$ref": "#/definitions/GETAccountingCodeItemWithoutSuccessType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETAccountingPeriodType": {
      "properties": {
        "createdBy": {
          "description": "ID of the user who created the accounting period.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "Date and time when the accounting period was created.\n",
          "format": "date-time",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "endDate": {
          "description": "The end date of the accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "fileIds": {
          "description": "File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://knowledgecenter.zuora.com/DC_Developers/REST_API/B_REST_API_reference/Get_Files) REST API call.\n",
          "properties": {
            "accountsReceivableAccountAgingDetailExportFileId": {
              "description": "File ID of the Accounts Receivable Aging Account Detail report.\n",
              "type": "string"
            },
            "accountsReceivableInvoiceAgingDetailExportFileId": {
              "description": "File ID of the Accounts Receivable Aging Invoice Detail report.\n",
              "type": "string"
            },
            "arRollForwardDetailExportFileId": {
              "description": "File ID of the Accounts Receivable Detail report.\n",
              "type": "string"
            },
            "fxRealizedGainAndLossDetailExportFileId": {
              "description": "File ID of the Realized Gain and Loss Detail report.\n\nReturned only if you have Foreign Currency Conversion enabled.\n",
              "type": "string"
            },
            "fxUnrealizedGainAndLossDetailExportFileId": {
              "description": "File ID of the Unrealized Gain and Loss Detail report.\n\nReturned only if you have Foreign Currency Conversion enabled\n",
              "type": "string"
            },
            "revenueDetailCsvFileId": {
              "description": "File ID of the Revenue Detail report in CSV format.\n",
              "type": "string"
            },
            "revenueDetailExcelFileId": {
              "description": "File ID of the Revenue Detail report in XLSX format.\n",
              "type": "string"
            },
            "unprocessedChargesFileId": {
              "description": "File ID of a report containing all unprocessed charges for the accounting period.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "fiscalYear": {
          "description": "Fiscal year of the accounting period.\n",
          "type": "string"
        },
        "fiscal_quarter": {
          "description": "",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "ID of the accounting period.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the accounting period.\n",
          "type": "string"
        },
        "notes": {
          "description": "Any optional notes about the accounting period.\n",
          "type": "string"
        },
        "runTrialBalanceEnd": {
          "description": "Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`.\n",
          "format": "date-time",
          "type": "string"
        },
        "runTrialBalanceErrorMessage": {
          "description": "If trial balance status is Error, an error message is returned in this field.\n",
          "type": "string"
        },
        "runTrialBalanceStart": {
          "description": "Date and time that the trial balance was run. If the trial balance status is Pending, this field is null.\n",
          "format": "date-time",
          "type": "string"
        },
        "runTrialBalanceStatus": {
          "description": "Status of the trial balance for the accounting period. Possible values:\n\n* `Pending`\n* `Processing`\n* `Completed`\n* `Error`\n",
          "type": "string"
        },
        "startDate": {
          "description": "The start date of the accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "status": {
          "description": "Status of the accounting period. Possible values:\n* `Open`\n* `PendingClose`\n* `Closed`\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "updatedBy": {
          "description": "ID of the user who last updated the accounting period.\n",
          "type": "string"
        },
        "updatedOn": {
          "description": "Date and time when the accounting period was last updated.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETAccountingPeriodWithoutSuccessType": {
      "properties": {
        "createdBy": {
          "description": "ID of the user who created the accounting period.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "Date and time when the accounting period was created.\n",
          "format": "date-time",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "endDate": {
          "description": "The end date of the accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "fileIds": {
          "description": "File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://knowledgecenter.zuora.com/DC_Developers/REST_API/B_REST_API_reference/Get_Files) REST API call.\n",
          "properties": {
            "accountsReceivableAccountAgingDetailExportFileId": {
              "description": "File ID of the Accounts Receivable Aging Account Detail report.\n",
              "type": "string"
            },
            "accountsReceivableInvoiceAgingDetailExportFileId": {
              "description": "File ID of the Accounts Receivable Aging Invoice Detail report.\n",
              "type": "string"
            },
            "arRollForwardDetailExportFileId": {
              "description": "File ID of the Accounts Receivable Detail report.\n",
              "type": "string"
            },
            "fxRealizedGainAndLossDetailExportFileId": {
              "description": "File ID of the Realized Gain and Loss Detail report.\n\nReturned only if you have Foreign Currency Conversion enabled.\n",
              "type": "string"
            },
            "fxUnrealizedGainAndLossDetailExportFileId": {
              "description": "File ID of the Unrealized Gain and Loss Detail report.\n\nReturned only if you have Foreign Currency Conversion enabled\n",
              "type": "string"
            },
            "revenueDetailCsvFileId": {
              "description": "File ID of the Revenue Detail report in CSV format.\n",
              "type": "string"
            },
            "revenueDetailExcelFileId": {
              "description": "File ID of the Revenue Detail report in XLSX format.\n",
              "type": "string"
            },
            "unprocessedChargesFileId": {
              "description": "File ID of a report containing all unprocessed charges for the accounting period.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "fiscalYear": {
          "description": "Fiscal year of the accounting period.\n",
          "type": "string"
        },
        "fiscal_quarter": {
          "description": "",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "ID of the accounting period.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the accounting period.\n",
          "type": "string"
        },
        "notes": {
          "description": "Any optional notes about the accounting period.\n",
          "type": "string"
        },
        "runTrialBalanceEnd": {
          "description": "Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`.\n",
          "format": "date-time",
          "type": "string"
        },
        "runTrialBalanceErrorMessage": {
          "description": "If trial balance status is Error, an error message is returned in this field.\n",
          "type": "string"
        },
        "runTrialBalanceStart": {
          "description": "Date and time that the trial balance was run. If the trial balance status is `Pending`, this field is `null`.\n",
          "format": "date-time",
          "type": "string"
        },
        "runTrialBalanceStatus": {
          "description": "Status of the trial balance for the accounting period. Possible values:\n\n* `Pending`\n* `Processing`\n* `Completed`\n* `Error`\n",
          "type": "string"
        },
        "startDate": {
          "description": "The start date of the accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "status": {
          "description": "Status of the accounting period. Possible values:\n\n* `Open`\n* `PendingClose`\n* `Closed`\n",
          "type": "string"
        },
        "updatedBy": {
          "description": "D of the user who last updated the accounting period.\n",
          "type": "string"
        },
        "updatedOn": {
          "description": "Date and time when the accounting period was last updated.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "accountingPeriods",
      "type": "object"
    },
    "GETAccountingPeriodsType": {
      "properties": {
        "accountingPeriods": {
          "description": "An array of all accounting periods on your tenant. The accounting periods are returned in ascending order of start date; that is, the latest period is returned first.\n",
          "items": {
            "$ref": "#/definitions/GETAccountingPeriodWithoutSuccessType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETAmendmentType": {
      "properties": {
        "autoRenew": {
          "description": "Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed. \n",
          "type": "boolean"
        },
        "baseRatePlanId": {
          "description": "The rate plan ID on which changes are made. Only the Update or Remove amendment returns a base rate plan ID.\n",
          "type": "string"
        },
        "baseSubscriptionId": {
          "description": "The ID of the subscription based on which the amendment is created.\n",
          "type": "string"
        },
        "code": {
          "description": "The amendment code.\n",
          "type": "string"
        },
        "contractEffectiveDate": {
          "description": "The date when the amendment becomes effective for billing purposes, as `yyyy-mm-dd`.\n",
          "format": "date",
          "type": "string"
        },
        "currentTerm": {
          "description": "The length of the period for the current subscription term. \n",
          "format": "int64",
          "type": "integer"
        },
        "currentTermPeriodType": {
          "description": "The period type for the current subscription term.\nPossible values are:\n\n- Month\n- Year\n- Day\n- Week\n",
          "type": "string"
        },
        "customerAcceptanceDate": {
          "description": "The date when the customer accepts the amendment changes to the subscription, as `yyyy-mm-dd`.\n",
          "format": "date",
          "type": "string"
        },
        "description": {
          "description": "Description of the amendment.\n",
          "type": "string"
        },
        "destinationAccountId": {
          "description": "The ID of the account that the subscription is being transferred to.\n",
          "type": "string"
        },
        "destinationInvoiceOwnerId": {
          "description": "The ID of the invoice that the subscription is being transferred to.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date when the amendment changes take effective. \n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "The amendment ID.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the amendment.\n",
          "type": "string"
        },
        "newRatePlanId": {
          "description": "The ID of the rate plan charge on which amendment is made. Only the Add or Update amendment returns a new rate plan ID.\n",
          "type": "string"
        },
        "newSubscriptionId": {
          "description": "The ID of the subscription that the amendment changes.\n",
          "type": "string"
        },
        "renewalSetting": {
          "description": "Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\nPossible values are:\n\n- RENEW_WITH_SPECIFIC_TERM\n- RENEW_TO_EVERGREEN\n",
          "type": "string"
        },
        "renewalTerm": {
          "description": "The term of renewal for the amended subscription.\n",
          "format": "int64",
          "type": "integer"
        },
        "renewalTermPeriodType": {
          "description": "The period type for the subscription renewal term.\nPossible values are:\n\n- Month\n- Year\n- Day\n- Week\n",
          "type": "string"
        },
        "resumeDate": {
          "description": "The date when the subscription resumption takes effect, as `yyyy-mm-dd`.\n\n**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "format": "date",
          "type": "string"
        },
        "serviceActivationDate": {
          "description": "The date when service is activated, as `yyyy-mm-dd`.\n",
          "format": "date",
          "type": "string"
        },
        "specificUpdateDate": {
          "description": "The date when the Update Product amendment takes effect. \nOnly for the Update Product amendments if there is already a future-dated Update Product amendment on\nthe subscription.\n",
          "format": "date",
          "type": "string"
        },
        "status": {
          "description": "The status of the amendment.\nPossible values are:\n\n- Draft \n- Pending Activation\n- Pending Acceptance\n- Completed\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "suspendDate": {
          "description": "The date when the subscription suspension takes effect, as `yyyy-mm-dd`.\n\n**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "format": "date",
          "type": "string"
        },
        "termStartDate": {
          "description": "The date when the new terms and conditions take effect.\n",
          "format": "date",
          "type": "string"
        },
        "termType": {
          "description": "Indicates if the subscription is `TERMED` or `EVERGREEN`.\n",
          "type": "string"
        },
        "type": {
          "description": "Type of the amendment.\nPossible values are:\n\n- Cancellation\n- NewProduct\n- OwnerTransfer\n- RemoveProduct\n- Renewal\n- UpdateProduct\n- TermsAndConditions\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETAttachmentResponseType": {
      "properties": {
        "createdBy": {
          "description": "Zuora user id who added this attachment to the object.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "Date and time when the attachment was added to the object.\n",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "Description of the attachment.\n",
          "type": "string"
        },
        "fileContentType": {
          "description": "File type.\n",
          "type": "string"
        },
        "fileId": {
          "description": "File ID of the attached file. Use this file ID with [Get files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) to download the file.\n",
          "type": "string"
        },
        "fileName": {
          "description": "Attachment file name.\n",
          "type": "string"
        },
        "id": {
          "description": "Id of this attachment.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "updatedBy": {
          "description": "Zuora user id who last updated the attachment.\n",
          "type": "string"
        },
        "updatedOn": {
          "description": "Date and time when the attachment was last updated.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETAttachmentResponseWithoutSuccessType": {
      "properties": {
        "createdBy": {
          "description": "Zuora user id of who added this attachment to the object.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "Date and time when the attachment was added to the object.\n",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "Description of the attachment.\n",
          "type": "string"
        },
        "fileContentType": {
          "description": "Attachment file type.\n",
          "type": "string"
        },
        "fileId": {
          "description": "File ID of the attached file. Use this file ID with [Get files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) to download the file.\n",
          "type": "string"
        },
        "fileName": {
          "description": "Attachment file name.\n",
          "type": "string"
        },
        "id": {
          "description": "Zuora id of this attachement.\n",
          "type": "string"
        },
        "updatedBy": {
          "description": "Zuora user id who last updated the attachment.\n",
          "type": "string"
        },
        "updatedOn": {
          "description": "Date and time when the attachment was last updated.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "attachments",
      "type": "object"
    },
    "GETAttachmentsResponseType": {
      "properties": {
        "attachments": {
          "description": "Container for one or more attachments.\n",
          "items": {
            "$ref": "#/definitions/GETAttachmentResponseWithoutSuccessType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETCMTaxItemType": {
      "properties": {
        "appliedAmount": {
          "description": "The applied amount of the credit memo taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "exemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the credit memo taxation item.\n",
          "properties": {
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "onAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "type": "string"
            },
            "salesTaxPayableAccountingCodeType": {
              "description": "The type of the accounting code for the sales taxes payable.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the credit memo taxation item.\n",
          "type": "string"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the credit memo taxation item.\n",
          "type": "string"
        },
        "refundAmount": {
          "description": "The amount of the refund on the credit memo taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "sourceTaxItemId": {
          "description": "The ID of the source taxation item.\n",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of taxation.\n",
          "format": "double",
          "type": "number"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific credit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate.\n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        },
        "unappliedAmount": {
          "description": "The unapplied amount of the credit memo taxation item.\n",
          "format": "double",
          "type": "number"
        }
      },
      "title": "creditTaxItems",
      "type": "object"
    },
    "GETCalloutHistoryVOType": {
      "properties": {
        "attemptedNum": {
          "description": "The number of times the callout was retried.\n",
          "type": "string"
        },
        "createTime": {
          "description": "The time that the calloutHistory record was made.\n",
          "type": "string"
        },
        "eventCategory": {
          "description": "The event category for the callout.\n",
          "type": "string"
        },
        "eventContext": {
          "description": "The context of the callout event.\n",
          "type": "string"
        },
        "notification": {
          "description": "The name of the notification.\n",
          "type": "string"
        },
        "requestMethod": {
          "description": "The request method set in notifications settings.\n",
          "type": "string"
        },
        "requestUrl": {
          "description": "The base url set in notifications settings.\n",
          "type": "string"
        },
        "responseCode": {
          "description": "The responseCode of the request.\n",
          "type": "string"
        },
        "responseContent": {
          "description": "",
          "type": "string"
        }
      },
      "title": "calloutHistories",
      "type": "object"
    },
    "GETCalloutHistoryVOsType": {
      "properties": {
        "calloutHistories": {
          "description": "A container for callout histories.\n",
          "items": {
            "$ref": "#/definitions/GETCalloutHistoryVOType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETCatalogType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "products": {
          "description": "Container for one or more products:\n",
          "items": {
            "$ref": "#/definitions/GETProductType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETChargeRSDetailType": {
      "properties": {
        "accountId": {
          "description": "An account ID.\n",
          "type": "string"
        },
        "amount": {
          "description": "The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as *JPY 30* or USD *30.15*. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned:  *\"Allocation amount with wrong decimal places.\"*\n",
          "format": "decimal",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used. \n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "number": {
          "description": "The charge revenue summary number.\n",
          "type": "string"
        },
        "recognitionRuleName": {
          "description": "The name of the recognition rule.\n",
          "type": "string"
        },
        "recognizedRevenue": {
          "description": "The revenue that was distributed in a closed accounting period.\n",
          "format": "decimal",
          "type": "string"
        },
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n",
          "items": {
            "$ref": "#/definitions/GETRevenueItemType"
          },
          "type": "array"
        },
        "subscriptionChargeId": {
          "description": "The original subscription charge ID.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The original subscription ID.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "undistributedUnrecognizedRevenue": {
          "description": "Revenue in the open-ended accounting period.\n",
          "format": "decimal",
          "type": "string"
        },
        "unrecognizedRevenue": {
          "description": "Revenue distributed in all open accounting periods, which includes the open-ended accounting period.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETCreditMemoCollectionType": {
      "properties": {
        "creditmemos": {
          "description": "Container for credit memos.\n",
          "items": {
            "$ref": "#/definitions/GETCreditMemoTypewithSuccess"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETCreditMemoItemPartType": {
      "properties": {
        "amount": {
          "description": "The amount of the credit memo part item. \n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the credit memo part item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the credit memo part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item associated with the credit memo part item.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item.\n",
          "type": "string"
        },
        "debitMemoItemId": {
          "description": "The ID of the debit memo item associated with the credit memo part item.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the credit memo part item.\n",
          "type": "string"
        },
        "invoiceItemId": {
          "description": "The ID of the invoice item associated with the credit memo part item.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "taxItemId": {
          "description": "The ID of the invoice or debit memo taxation item associated with the credit memo taxation item.\n",
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the credit memo part item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the credit memo part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETCreditMemoItemPartTypewithSuccess": {
      "properties": {
        "amount": {
          "description": "The amount of the credit memo part item.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the credit memo part item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the credit memo part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item associated with the credit memo part item.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item.\n",
          "type": "string"
        },
        "debitMemoItemId": {
          "description": "The ID of the debit memo item associated with the credit memo part item.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the credit memo part item.\n",
          "type": "string"
        },
        "invoiceItemId": {
          "description": "The ID of the invoice item associated with the credit memo part item.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the invoice or debit memo taxation item associated with the credit memo taxation item.\n",
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the credit memo part item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the credit memo part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "itemparts",
      "type": "object"
    },
    "GETCreditMemoItemPartsCollectionType": {
      "properties": {
        "itemParts": {
          "description": "Container for credit memo part items.\n",
          "items": {
            "$ref": "#/definitions/GETCreditMemoItemPartTypewithSuccess"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETCreditMemoItemType": {
      "properties": {
        "amount": {
          "description": "The total amount of the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "appliedAmount": {
          "description": "The applied amount of the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Comments about the credit memo item.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the credit memo item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the credit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditTaxItems": {
          "description": "Container for credit memo taxation items.\n",
          "items": {
            "$ref": "#/definitions/GETCMTaxItemType"
          },
          "type": "array"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the credit memo item.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "type": "string"
            },
            "deferredRevenueAccountingCodeType": {
              "description": "The type of the deferred revenue accounting code, such as Deferred Revenue.'\n",
              "type": "string"
            },
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "onAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "type": "string"
            },
            "recognizedRevenueAccountingCodeType": {
              "description": "The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount.\n",
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "type": "string"
            },
            "revenueScheduleNumber": {
              "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, RS-00000001.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the credit memo item.\n",
          "type": "string"
        },
        "refundAmount": {
          "description": "The amount of the refund on the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "serviceEndDate": {
          "description": "The service end date of the credit memo item.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The service start date of the credit memo item. If the associated charge is a one-time fee, this date is the date of that charge.\n",
          "format": "date",
          "type": "string"
        },
        "sku": {
          "description": "The SKU for the product associated with the credit memo item.\n",
          "type": "string"
        },
        "skuName": {
          "description": "The name of the SKU.\n",
          "type": "string"
        },
        "sourceItemId": {
          "description": "The ID of the source item.\n",
          "type": "string"
        },
        "sourceItemType": {
          "description": "The type of the source item.\n",
          "enum": [
            "SubscriptionComponent",
            "InvoiceDetail",
            "ProductRatePlanCharge"
          ],
          "type": "string"
        },
        "subscriptionId": {
          "description": "The ID of the subscription associated with the credit memo item.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "unappliedAmount": {
          "description": "The unapplied amount of the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the credit memo item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the credit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETCreditMemoItemTypewithSuccess": {
      "properties": {
        "amount": {
          "description": "The total amount of the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "appliedAmount": {
          "description": "The applied amount of the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Comments about the credit memo item.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the credit memo item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the credit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditTaxItems": {
          "description": "Container for credit memo taxation items.\n",
          "items": {
            "$ref": "#/definitions/GETCMTaxItemType"
          },
          "type": "array"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the credit memo item.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "type": "string"
            },
            "deferredRevenueAccountingCodeType": {
              "description": "The type of the deferred revenue accounting code, such as Deferred Revenue. \n",
              "type": "string"
            },
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "onAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "type": "string"
            },
            "recognizedRevenueAccountingCodeType": {
              "description": "The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. \n",
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "type": "string"
            },
            "revenueScheduleNumber": {
              "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, RS-00000001.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the credit memo item.\n",
          "type": "string"
        },
        "refundAmount": {
          "description": "The amount of the refund on the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "serviceEndDate": {
          "description": "The service end date of the credit memo item. \n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The service start date of the credit memo item.\n",
          "format": "date",
          "type": "string"
        },
        "sku": {
          "description": "The SKU for the product associated with the credit memo item.\n",
          "type": "string"
        },
        "skuName": {
          "description": "The name of the SKU.\n",
          "type": "string"
        },
        "sourceItemId": {
          "description": "The ID of the source item.\n",
          "type": "string"
        },
        "sourceItemType": {
          "description": "The type of the source item.\n",
          "enum": [
            "SubscriptionComponent",
            "InvoiceDetail",
            "ProductRatePlanCharge"
          ],
          "type": "string"
        },
        "subscriptionId": {
          "description": "The ID of the subscription associated with the credit memo item.\n",
          "type": "string"
        },
        "unappliedAmount": {
          "description": "The unapplied amount of the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the credit memo item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the credit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "items",
      "type": "object"
    },
    "GETCreditMemoItemsListType": {
      "properties": {
        "items": {
          "description": "Container for credit memo items.\n",
          "items": {
            "$ref": "#/definitions/GETCreditMemoItemTypewithSuccess"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETCreditMemoPartType": {
      "properties": {
        "amount": {
          "description": "The amount of the credit memo part.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the credit memo part.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the credit memo part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "debitMemoId": {
          "description": "The ID of the debit memo associated with the credit memo part.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the credit memo part.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "The ID of the invoice associated with the credit memo part.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the credit memo part.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the credit memo part was last upated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETCreditMemoPartTypewithSuccess": {
      "properties": {
        "amount": {
          "description": "The amount of the credit memo part.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the credit memo part.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the credit memo part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "debitMemoId": {
          "description": "The ID of the debit memo associated with the credit memo part.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the credit memo part.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "The ID of the invoice associated with the credit memo part.\n",
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the credit memo part.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the credit memo part was last upated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "parts",
      "type": "object"
    },
    "GETCreditMemoPartsCollectionType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "parts": {
          "description": "Container for credit memo parts.\n",
          "items": {
            "$ref": "#/definitions/GETCreditMemoPartTypewithSuccess"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETCreditMemoType": {
      "properties": {
        "accountId": {
          "description": "The ID of the customer account associated with the credit memo.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "appliedAmount": {
          "description": "The applied amount of the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "autoApplyUponPosting": {
          "description": "Whether the credit memo automatically applies to the invoice upon posting.\n",
          "type": "boolean"
        },
        "cancelledById": {
          "description": "The ID of the Zuora user who cancelled the credit memo.\n",
          "type": "string"
        },
        "cancelledOn": {
          "description": "The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the credit memo.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the credit memo.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoDate": {
          "description": "The date when the credit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.\n",
          "format": "date",
          "type": "string"
        },
        "currency": {
          "description": "A currency defined in the web-based UI administrative settings.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "excludeFromAutoApplyRules": {
          "description": "Whether the credit memo is excluded from the rule of automatically applying credit memos to invoices.\n",
          "type": "boolean"
        },
        "id": {
          "description": "The unique ID of the credit memo.\n",
          "type": "string"
        },
        "latestPDFFileId": {
          "description": "The ID of the latest PDF file generated for the credit memo.\n",
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the credit memo.\n",
          "type": "string"
        },
        "postedById": {
          "description": "The ID of the Zuora user who posted the credit memo.\n",
          "type": "string"
        },
        "postedOn": {
          "description": "The date and time when the credit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty.\n",
          "type": "string"
        },
        "referredInvoiceId": {
          "description": "The ID of a referred invoice.\n",
          "type": "string"
        },
        "refundAmount": {
          "description": "The amount of the refund on the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "source": {
          "description": "The source of the credit memo.\n",
          "enum": [
            "API",
            "BillRun",
            "AdhocFromPrpc",
            "AdhocFromInvoice"
          ],
          "type": "string"
        },
        "sourceId": {
          "description": "The ID of the credit memo source.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the credit memo.\n",
          "enum": [
            "Draft",
            "Posted",
            "Canceled",
            "Error",
            "PendingForTax",
            "Generating",
            "CancelInProgress"
          ],
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "targetDate": {
          "description": "The target date for the credit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.\n",
          "format": "date",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of taxation.\n",
          "format": "double",
          "type": "number"
        },
        "totalTaxExemptAmount": {
          "description": "The total amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "transferredToAccounting": {
          "description": "Whether the credit memo was transferred to an external accounting system. \n",
          "enum": [
            "Processing",
            "Yes",
            "Error",
            "Ignore"
          ],
          "type": "string"
        },
        "unappliedAmount": {
          "description": "The unapplied amount of the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the credit memo.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETCreditMemoTypewithSuccess": {
      "properties": {
        "accountId": {
          "description": "The ID of the customer account associated with the credit memo.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "appliedAmount": {
          "description": "The applied amount of the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "autoApplyUponPosting": {
          "description": "Whether the credit memo automatically applies to the invoice upon posting.\n",
          "type": "boolean"
        },
        "cancelledById": {
          "description": "The ID of the Zuora user who cancelled the credit memo.\n",
          "type": "string"
        },
        "cancelledOn": {
          "description": "The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the credit memo.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the credit memo.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoDate": {
          "description": "The date when the credit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.\n",
          "format": "date",
          "type": "string"
        },
        "currency": {
          "description": "A currency defined in the web-based UI administrative settings.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "excludeFromAutoApplyRules": {
          "description": "Whether the credit memo is excluded from the rule of automatically applying credit memos to invoices.\n",
          "type": "boolean"
        },
        "id": {
          "description": "The unique ID of the credit memo.\n",
          "type": "string"
        },
        "latestPDFFileId": {
          "description": "The ID of the latest PDF file generated for the credit memo.\n",
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the credit memo.\n",
          "type": "string"
        },
        "postedById": {
          "description": "The ID of the Zuora user who posted the credit memo.\n",
          "type": "string"
        },
        "postedOn": {
          "description": "The date and time when the credit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty.\n",
          "type": "string"
        },
        "referredInvoiceId": {
          "description": "The ID of a referred invoice.\n",
          "type": "string"
        },
        "refundAmount": {
          "description": "The amount of the refund on the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "source": {
          "description": "The source of the credit memo.\n",
          "enum": [
            "API",
            "BillRun",
            "AdhocFromPrpc",
            "AdhocFromInvoice"
          ],
          "type": "string"
        },
        "sourceId": {
          "description": "The ID of the credit memo source.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the credit memo. \n",
          "enum": [
            "Draft",
            "Posted",
            "Canceled",
            "Error",
            "PendingForTax",
            "Generating",
            "CancelInProgress"
          ],
          "type": "string"
        },
        "targetDate": {
          "description": "The target date for the credit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.\n",
          "format": "date",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of taxation.\n",
          "format": "double",
          "type": "number"
        },
        "totalTaxExemptAmount": {
          "description": "The total amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "transferredToAccounting": {
          "description": "Whether the credit memo was transferred to an external accounting system. \n",
          "enum": [
            "Processing",
            "Yes",
            "Error",
            "Ignore"
          ],
          "type": "string"
        },
        "unappliedAmount": {
          "description": "The unapplied amount of the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the credit memo.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "creditmemos",
      "type": "object"
    },
    "GETCustomExchangeRatesDataType": {
      "properties": {
        "DATE": {
          "description": "Container for exchange rate information on a given date. The field name is the date in `yyyy-mm-dd` format, for example, 2016-01-15.\n",
          "properties": {
            "CURRENCY": {
              "description": "The exchange rate on the **providerExchangeRateDate**. The field name is the ISO currency code of the currency, for example, `EUR`.\n\nThere may be more than one currency returned for a given **providerExchangeRateDate**. If the rate for a certain currency is not available on the **providerExchangeRateDate**, the currency is not returned in the response.\n",
              "type": "string"
            },
            "providerExchangeRateDate": {
              "description": "The date of the exchange rate used. The date is in `yyyy-mm-dd` format.\n\nCorresponds to the value specified in the Provider Exchange Rate Date column in the Import Foreign Exchange Rates template when you uploaded the rates through the Mass Updater.\n",
              "format": "date",
              "type": "string"
            }
          },
          "title": "List of exchange rates",
          "type": "object"
        }
      },
      "title": "rates",
      "type": "object"
    },
    "GETCustomExchangeRatesType": {
      "properties": {
        "inverse": {
          "description": "- If `true`, the exchange rate in the response is an inverse exchange rate.\n- If `false`, the exchange rate in the response is not an inverse exchange rate.\nThe value is determined by the **Use inverse rate** checkbox in your Zuora Finance Manage Currency Conversion settings.\n",
          "type": "boolean"
        },
        "rates": {
          "description": "Container for exchange rate data. Contains a set of fields that provide exchange rate data for each day between the specified `startDate` and `endDate` (inclusive). \n",
          "items": {
            "$ref": "#/definitions/GETCustomExchangeRatesDataType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETDMTaxItemType": {
      "properties": {
        "appliedAmount": {
          "description": "The applied amount of the debit memo taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "creditAmount": {
          "description": "The amount of credit memos applied to the debit memo. \n",
          "format": "double",
          "type": "number"
        },
        "exemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the debit memo taxation item.\n",
          "properties": {
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "type": "string"
            },
            "salesTaxPayableAccountingCodeType": {
              "description": "The type of the accounting code for the sales taxes payable.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the debit memo taxation item.\n",
          "type": "string"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the debit memo taxation item.\n",
          "type": "string"
        },
        "paymentAmount": {
          "description": "The amount of payments applied to the debit memo. \n",
          "format": "double",
          "type": "number"
        },
        "refundAmount": {
          "description": "The amount of the refund on the debit memo taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "sourceTaxItemId": {
          "description": "The ID of the source taxation item.\n",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of taxation.\n",
          "format": "double",
          "type": "number"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific debit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date that the tax is applied to the debit memo, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate.\n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        },
        "unappliedAmount": {
          "description": "The unapplied amount of the debit memo taxation item.\n",
          "format": "double",
          "type": "number"
        }
      },
      "title": "taxItems",
      "type": "object"
    },
    "GETDebitMemoCollectionType": {
      "properties": {
        "debitmemos": {
          "description": "Container for debit memos.\n",
          "items": {
            "$ref": "#/definitions/GETDebitMemoTypewithSuccess"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETDebitMemoItemCollectionType": {
      "properties": {
        "items": {
          "description": "Container for debit memo items.\n",
          "items": {
            "$ref": "#/definitions/GETDebitMemoItemTypewithSuccess"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETDebitMemoItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the debit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "balance": {
          "description": "The balance of the debit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "beAppliedAmount": {
          "description": "The applied amount of the debit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Comments about the debit memo item.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the debit memo item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the debit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the debit memo item.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "type": "string"
            },
            "deferredRevenueAccountingCodeType": {
              "description": "The type of the deferred revenue accounting code, such as Deferred Revenue.\n",
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "type": "string"
            },
            "recognizedRevenueAccountingCodeType": {
              "description": "The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount.\n",
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "type": "string"
            },
            "revenueScheduleNumber": {
              "description": "The revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, RS-00000001.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the debit memo item.\n",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge.\n",
          "format": "date",
          "type": "string"
        },
        "sku": {
          "description": "The SKU for the product associated with the debit memo item.\n",
          "type": "string"
        },
        "skuName": {
          "description": "The name of the SKU.\n",
          "type": "string"
        },
        "sourceItemId": {
          "description": "The ID of the source item.\n",
          "type": "string"
        },
        "sourceItemType": {
          "description": "The type of the source item. \n",
          "enum": [
            "SubscriptionComponent",
            "InvoiceDetail",
            "ProductRatePlanCharge"
          ],
          "type": "string"
        },
        "subscriptionId": {
          "description": "The ID of the subscription associated with the debit memo item.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "taxItems": {
          "description": "Container for debit memo taxation items.\n",
          "items": {
            "$ref": "#/definitions/GETDMTaxItemType"
          },
          "type": "array"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the debit memo item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the debit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETDebitMemoItemTypewithSuccess": {
      "properties": {
        "amount": {
          "description": "The amount of the debit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "balance": {
          "description": "The balance of the debit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "beAppliedAmount": {
          "description": "The applied amount of the debit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Comments about the debit memo item.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the debit memo item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the debit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the debit memo item.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "type": "string"
            },
            "deferredRevenueAccountingCodeType": {
              "description": "The type of the deferred revenue accounting code, such as Deferred Revenue.\n",
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "type": "string"
            },
            "recognizedRevenueAccountingCodeType": {
              "description": "The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount.\n",
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "type": "string"
            },
            "revenueScheduleNumber": {
              "description": "The revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, RS-00000001.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the debit memo item.\n",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge.\n",
          "format": "date",
          "type": "string"
        },
        "sku": {
          "description": "The SKU for the product associated with the debit memo item.\n",
          "type": "string"
        },
        "skuName": {
          "description": "The name of the SKU.\n",
          "type": "string"
        },
        "sourceItemId": {
          "description": "The ID of the source item.\n",
          "type": "string"
        },
        "sourceItemType": {
          "description": "The type of the source item.\n",
          "enum": [
            "SubscriptionComponent",
            "InvoiceDetail",
            "ProductRatePlanCharge"
          ],
          "type": "string"
        },
        "subscriptionId": {
          "description": "The ID of the subscription associated with the debit memo item.\n",
          "type": "string"
        },
        "taxItems": {
          "description": "Container for debit memo taxation items.\n",
          "items": {
            "$ref": "#/definitions/GETDMTaxItemType"
          },
          "type": "array"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the debit memo item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the debit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "items",
      "type": "object"
    },
    "GETDebitMemoType": {
      "properties": {
        "accountId": {
          "description": "The ID of the customer account associated with the debit memo.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "balance": {
          "description": "The balance of the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "beAppliedAmount": {
          "description": "The amount that is applied to the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "cancelledById": {
          "description": "The ID of the Zuora user who cancelled the debit memo.\n",
          "type": "string"
        },
        "cancelledOn": {
          "description": "The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the debit memo.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the debit memo.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "debitMemoDate": {
          "description": "The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.\n",
          "format": "date",
          "type": "string"
        },
        "dueDate": {
          "description": "The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the debit memo.\n",
          "type": "string"
        },
        "latestPDFFileId": {
          "description": "The ID of the latest PDF file generated for the debit memo.\n",
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the debit memo.\n",
          "type": "string"
        },
        "postedById": {
          "description": "The ID of the Zuora user who posted the debit memo. \n",
          "type": "string"
        },
        "postedOn": {
          "description": "The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty.\n",
          "type": "string"
        },
        "referredInvoiceId": {
          "description": "The ID of a referred invoice.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the debit memo.\n",
          "enum": [
            "Draft",
            "Posted",
            "Canceled",
            "Error",
            "PendingForTax",
            "Generating",
            "CancelInProgress"
          ],
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "targetDate": {
          "description": "The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.\n",
          "format": "date",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of taxation.\n",
          "format": "double",
          "type": "number"
        },
        "totalTaxExemptAmount": {
          "description": "The total amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "transferredToAccounting": {
          "description": "Whether the debit memo was transferred to an external accounting system.\n",
          "enum": [
            "Processing",
            "Yes",
            "Error",
            "Ignore"
          ],
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the debit memo.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETDebitMemoTypewithSuccess": {
      "properties": {
        "accountId": {
          "description": "The ID of the customer account associated with the debit memo.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "balance": {
          "description": "The balance of the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "beAppliedAmount": {
          "description": "The applied amount of the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "cancelledById": {
          "description": "The ID of the Zuora user who cancelled the debit memo.\n",
          "type": "string"
        },
        "cancelledOn": {
          "description": "The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the debit memo.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the debit memo.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "debitMemoDate": {
          "description": "The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.\n",
          "format": "date",
          "type": "string"
        },
        "dueDate": {
          "description": "The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the debit memo.\n",
          "type": "string"
        },
        "latestPDFFileId": {
          "description": "The ID of the latest PDF file generated for the debit memo.\n",
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the debit memo.\n",
          "type": "string"
        },
        "postedById": {
          "description": "The ID of the Zuora user who posted the debit memo.\n",
          "type": "string"
        },
        "postedOn": {
          "description": "The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty.\n",
          "type": "string"
        },
        "referredInvoiceId": {
          "description": "The ID of a referred invoice.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the debit memo. \n",
          "enum": [
            "Draft",
            "Posted",
            "Canceled",
            "Error",
            "PendingForTax",
            "Generating",
            "CancelInProgress"
          ],
          "type": "string"
        },
        "targetDate": {
          "description": "The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.\n",
          "format": "date",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of taxation.\n",
          "format": "double",
          "type": "number"
        },
        "totalTaxExemptAmount": {
          "description": "The total amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "transferredToAccounting": {
          "description": "Whether the debit memo was transferred to an external accounting system. \n",
          "enum": [
            "Processing",
            "Yes",
            "Error",
            "Ignore"
          ],
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the debit memo.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "debitmemos",
      "type": "object"
    },
    "GETDiscountApplyDetailsType": {
      "properties": {
        "appliedProductRatePlanChargeId": {
          "description": "The ID of the product rate plan charge that the discount rate plan charge applies to.\n",
          "type": "string"
        },
        "appliedProductRatePlanId": {
          "description": "The ID of the product rate plan that the discount rate plan charge applies to.\n",
          "type": "string"
        }
      },
      "title": "discountApplyDetails",
      "type": "object"
    },
    "GETEmailHistoryVOType": {
      "properties": {
        "bcc": {
          "description": "Blind carbon copy recipients of the email.\n",
          "type": "string"
        },
        "cc": {
          "description": "Carbon Copy recipients of the email.\n",
          "type": "string"
        },
        "errorMessage": {
          "description": "null if the content of result is \"OK\". A description of the error if the content of result is not \"OK\".\n",
          "type": "string"
        },
        "eventCategory": {
          "description": "The event category of the email.\n",
          "type": "string"
        },
        "fromEmail": {
          "description": "The sender of the email.\n",
          "type": "string"
        },
        "notification": {
          "description": "The name of the notification.\n",
          "type": "string"
        },
        "replyTo": {
          "description": "The reply-to address as configured in the email template.\n",
          "type": "string"
        },
        "result": {
          "description": "The result from the mail server of sending the email.\n",
          "type": "string"
        },
        "sendTime": {
          "description": "The date and time the email was sent.\n",
          "type": "string"
        },
        "subject": {
          "description": "The subject of the email.\n",
          "type": "string"
        },
        "toEmail": {
          "description": "The intended recipient of the email.\n",
          "type": "string"
        }
      },
      "title": "emailHistories",
      "type": "object"
    },
    "GETEmailHistoryVOsType": {
      "properties": {
        "emailHistories": {
          "description": "A container for email histories.\n",
          "items": {
            "$ref": "#/definitions/GETEmailHistoryVOType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETEntitiesResponseType": {
      "properties": {
        "entities": {
          "description": "Container for one or more entities in a multi-entity hierarchy.",
          "items": {
            "$ref": "#/definitions/GETEntitiesType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request is successful.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETEntitiesResponseTypeWithId": {
      "properties": {
        "displayName": {
          "description": "The display name of the entity that is shown in the Zuora UI and APIs.",
          "type": "string"
        },
        "id": {
          "description": "The entity Id.",
          "type": "string"
        },
        "locale": {
          "description": "The locale that is used in this entity.",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity.",
          "type": "string"
        },
        "parentId": {
          "description": "The Id of the parent entity.",
          "type": "string"
        },
        "status": {
          "description": "The status of the entity.",
          "enum": [
            "Provisioned",
            "Unprovisioned"
          ],
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request is successful.",
          "type": "boolean"
        },
        "tenantId": {
          "description": "The Id of the tenant that the entity belongs to.",
          "type": "string"
        },
        "timezone": {
          "description": "The time zone that is used in this entity.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETEntitiesType": {
      "properties": {
        "displayName": {
          "description": "The display name of the entity that is shown in the Zuora UI and APIs.\n",
          "type": "string"
        },
        "id": {
          "description": "The entity Id.\n",
          "type": "string"
        },
        "locale": {
          "description": "The locale that is used in this entity.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity.\n",
          "type": "string"
        },
        "parentId": {
          "description": "The Id of the parent entity.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the entity.\n",
          "enum": [
            "Provisioned",
            "Unprovisioned"
          ],
          "type": "string"
        },
        "tenantId": {
          "description": "The Id of the tenant that the entity belongs to.\n",
          "type": "string"
        },
        "timezone": {
          "description": "The time zone that is used in this entity.\n",
          "type": "string"
        }
      },
      "title": "entities",
      "type": "object"
    },
    "GETEntitiesUserAccessibleResponseType": {
      "properties": {
        "entities": {
          "description": "Container for one or more entities in a multi-entity hierarchy.\n",
          "items": {
            "$ref": "#/definitions/GETEntitiesType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request is successful.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETEntityConnectionsArrayItemsType": {
      "properties": {
        "id": {
          "description": "The ID of the connection.\n",
          "type": "string"
        },
        "sourceEntityId": {
          "description": "The ID of the source entity in the connection.\n",
          "type": "string"
        },
        "status": {
          "description": "Status of the connection. \n\nPossible values:\n - `Connected`\n - `Pending`\n - `Disconnected`\n",
          "type": "string"
        },
        "targetEntityId": {
          "description": "The ID of the target entity in the connection.\n",
          "type": "string"
        }
      },
      "title": "entityConnections",
      "type": "object"
    },
    "GETEntityConnectionsResponseType": {
      "properties": {
        "entityConnections": {
          "description": "Container for one or more connections that are related to the entity.\n",
          "items": {
            "$ref": "#/definitions/GETEntityConnectionsArrayItemsType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETInvoiceFileType": {
      "properties": {
        "id": {
          "description": "ID of the invoice PDF file.\nThis is the ID for the file object and different from the file handle id in the pdfFileUrl field. To open a file, you need to use the file handle ID.\n",
          "type": "string"
        },
        "pdfFileUrl": {
          "description": "REST URL for the invoice PDF file. Click the URL to open the invoice PDF file.\n",
          "type": "string"
        },
        "versionNumber": {
          "description": "Version number of the invoice PDF file\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "invoiceFiles",
      "type": "object"
    },
    "GETInvoiceFileWrapper": {
      "properties": {
        "invoices": {
          "description": "Contains information about one or more invoices:\n",
          "items": {
            "$ref": "#/definitions/GETInvoiceType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETInvoiceType": {
      "properties": {
        "accountId": {
          "description": "Customer account ID.\n",
          "type": "string"
        },
        "accountName": {
          "description": "Customer account name.\n",
          "type": "string"
        },
        "accountNumber": {
          "description": "Customer account number.\n",
          "type": "string"
        },
        "amount": {
          "description": "Amount of the invoice before adjustments, discounts, and similar items.\n",
          "format": "decimal",
          "type": "string"
        },
        "balance": {
          "description": "Balance remaining due on the invoice (after adjustments, discounts, etc.)\n",
          "format": "decimal",
          "type": "string"
        },
        "body": {
          "description": "The REST URL of the invoice PDF file.\n",
          "type": "string"
        },
        "createdBy": {
          "description": "User ID of the person who created the invoice. If a bill run generated the invoice, then this is the user ID of person who created the bill run.\n",
          "type": "string"
        },
        "creditBalanceAdjustmentAmount": {
          "description": "",
          "format": "decimal",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "dueDate": {
          "description": "Payment due date as _yyyy-mm-dd_.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "Invoice ID.\n",
          "type": "string"
        },
        "invoiceDate": {
          "description": "Invoice date as _yyyy-mm-dd_\n",
          "format": "date",
          "type": "string"
        },
        "invoiceFiles": {
          "description": "Information about the invoice PDF file:\n",
          "items": {
            "$ref": "#/definitions/GETInvoiceFileType"
          },
          "type": "array"
        },
        "invoiceItems": {
          "description": "Information on one or more items on this invoice:\n",
          "items": {
            "$ref": "#/definitions/GETInvoicesInvoiceItemType"
          },
          "type": "array"
        },
        "invoiceNumber": {
          "description": "Unique invoice ID, returned as a string.\n",
          "type": "string"
        },
        "invoiceTargetDate": {
          "description": "Date through which charges on this invoice are calculated, as _yyyy-mm-dd_.\n",
          "format": "date",
          "type": "string"
        },
        "status": {
          "description": "Status of the invoice in the system - not the payment status, but the status of the invoice itself. Possible values are: `Posted`, `Draft`, `Canceled`, `Error`.\n",
          "type": "string"
        }
      },
      "title": "invoices",
      "type": "object"
    },
    "GETInvoicesInvoiceItemType": {
      "properties": {
        "chargeAmount": {
          "description": "The amount of the charge. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.\n",
          "format": "decimal",
          "type": "string"
        },
        "chargeDescription": {
          "description": "Description of the charge.\n",
          "type": "string"
        },
        "chargeId": {
          "description": "ID of the charge.\n",
          "type": "string"
        },
        "chargeName": {
          "description": "Name of the charge.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "id": {
          "description": "Item ID.\n",
          "type": "string"
        },
        "productName": {
          "description": "Name of the product associated with this item.\n",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of this item, in the configured unit of measure for the charge.\n",
          "format": "decimal",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "End date of the service period for this item, i.e., the last day of the service period, as _yyyy-mm-dd_.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "Start date of the service period for this item, as _yyyy-mm-dd_. For a one-time fee item, the date of the charge.\n",
          "format": "date",
          "type": "string"
        },
        "subscriptionId": {
          "description": "ID of the subscription for this item.\n",
          "type": "string"
        },
        "subscriptionName": {
          "description": "Name of the subscription for this item.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "taxAmount": {
          "description": "Tax applied to the charge.\n",
          "format": "decimal",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Unit used to measure consumption.\n",
          "type": "string"
        }
      },
      "title": "invoiceItems",
      "type": "object"
    },
    "GETJournalEntriesInJournalRunType": {
      "properties": {
        "journalEntries": {
          "description": "Key name that represents the list of journal entries.\n",
          "items": {
            "$ref": "#/definitions/GETJournalEntryDetailTypeWithoutSuccess"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETJournalEntryDetailType": {
      "properties": {
        "accountingPeriodName": {
          "description": "Name of the accounting period that the journal entry belongs to.\n",
          "type": "string"
        },
        "aggregateCurrency": {
          "description": "Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a Journal Run` setting was configured to `Yes`. Otherwise, returns `false`.\n",
          "type": "boolean"
        },
        "currency": {
          "description": "Currency used.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "homeCurrency": {
          "description": "Home currency used.\n",
          "type": "string"
        },
        "journalEntryDate": {
          "description": "Date of the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "journalEntryItems": {
          "description": "Key name that represents the list of journal entry items.\n",
          "items": {
            "$ref": "#/definitions/GETJournalEntryItemType"
          },
          "type": "array"
        },
        "notes": {
          "description": "\nAdditional information about this record.\nCharacter limit: 2,000\n",
          "type": "string"
        },
        "number": {
          "description": "Journal entry number in the format JE-00000001.\n",
          "type": "string"
        },
        "segments": {
          "description": "List of segments that apply to the summary journal entry.\n",
          "items": {
            "$ref": "#/definitions/GETJournalEntrySegmentType"
          },
          "type": "array"
        },
        "status": {
          "description": "Status of journal entry.\n",
          "enum": [
            "Created",
            "Cancelled"
          ],
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "timePeriodEnd": {
          "description": "End date of time period included in the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "timePeriodStart": {
          "description": "Start date of time period included in the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "transactionType": {
          "description": "Transaction type of the transactions included in the summary journal entry.\n",
          "type": "string"
        },
        "transferDateTime": {
          "description": "Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.\n",
          "format": "date-time",
          "type": "string"
        },
        "transferredBy": {
          "description": "User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.\n",
          "type": "string"
        },
        "transferredToAccounting": {
          "description": "Status shows whether the journal entry has been transferred to an accounting system. ",
          "enum": [
            "No",
            "Processing",
            "Yes",
            "Error",
            "Ignore"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETJournalEntryDetailTypeWithoutSuccess": {
      "properties": {
        "accountingPeriodName": {
          "description": "Name of the accounting period that the journal entry belongs to.\n",
          "type": "string"
        },
        "aggregateCurrency": {
          "description": "Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a JournalRun` setting was configured to \"Yes\". Otherwise, returns `false`.\n",
          "type": "boolean"
        },
        "currency": {
          "description": "Currency used.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "homeCurrency": {
          "description": "Home currency used.\n",
          "type": "string"
        },
        "journalEntryDate": {
          "description": "Date of the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "journalEntryItems": {
          "description": "Key name that represents the list of journal entry items.\n",
          "items": {
            "$ref": "#/definitions/GETJournalEntryItemType"
          },
          "type": "array"
        },
        "notes": {
          "description": "Additional information about this record.\nCharacter limit: 2,000\n",
          "type": "string"
        },
        "number": {
          "description": "Journal entry number in the format JE-00000001.\n",
          "type": "string"
        },
        "segments": {
          "description": "List of segments that apply to the summary journal entry.\n",
          "items": {
            "$ref": "#/definitions/GETJournalEntrySegmentType"
          },
          "type": "array"
        },
        "status": {
          "description": "Status of journal entry. ",
          "enum": [
            "Created",
            "Cancelled"
          ],
          "type": "string"
        },
        "timePeriodEnd": {
          "description": "End date of time period included in the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "timePeriodStart": {
          "description": "Start date of time period included in the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "transactionType": {
          "description": "Transaction type of the transactions included in the summary journal entry.\n",
          "type": "string"
        },
        "transferDateTime": {
          "description": "Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.\n",
          "format": "date-time",
          "type": "string"
        },
        "transferredBy": {
          "description": "User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.\n",
          "type": "string"
        },
        "transferredToAccounting": {
          "description": "Status shows whether the journal entry has been transferred to an accounting system. ",
          "enum": [
            "No",
            "Processing",
            "Yes",
            "Error",
            "Ignore"
          ],
          "type": "string"
        }
      },
      "title": "journalEntries",
      "type": "object"
    },
    "GETJournalEntryItemType": {
      "properties": {
        "accountingCodeName": {
          "description": "Name of the accounting code.\n",
          "type": "string"
        },
        "accountingCodeType": {
          "description": "Accounting code type.\n\nNote that `On-Account Receivable` is only available if you enable the Advanced AR Settlement feature. \n",
          "enum": [
            "AccountsReceivable",
            "On-Account Receivable",
            "Cash",
            "OtherAssets",
            "CustomerCashOnAccount",
            "DeferredRevenue",
            "SalesTaxPayable",
            "OtherLiabilities",
            "SalesRevenue",
            "SalesDiscounts",
            "OtherRevenue",
            "OtherEquity",
            "BadDebt",
            "OtherExpenses"
          ],
          "type": "string"
        },
        "amount": {
          "description": "Journal entry item amount in transaction currency.\n",
          "format": "decimal",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "glAccountName": {
          "description": "The account number in the general ledger (GL) that corresponds to the accounting code.\n",
          "type": "string"
        },
        "glAccountNumber": {
          "description": "The account name in the general ledger (GL) that corresponds to the accounting code.\n",
          "type": "string"
        },
        "homeCurrencyAmount": {
          "description": "Journal entry item amount in home currency.\n",
          "format": "decimal",
          "type": "string"
        },
        "type": {
          "description": "Type of journal entry item. ",
          "enum": [
            "Credit",
            "Debit"
          ],
          "type": "string"
        }
      },
      "title": "journalEntryItems",
      "type": "object"
    },
    "GETJournalEntrySegmentType": {
      "properties": {
        "segmentName": {
          "description": "Name of segment.\n",
          "type": "string"
        },
        "segmentValue": {
          "description": "Value of segment in this summary journal entry.\n",
          "type": "string"
        }
      },
      "title": "segments",
      "type": "object"
    },
    "GETJournalRunTransactionType": {
      "properties": {
        "type": {
          "description": "Transaction type. Invoice Adjustment is deprecated on Production. Zuora recommends that you use the Invoice Item Adjustment instead.\n\nIf you enable the Advanced AR Settlement feature, Debit Memo Item, Credit Memo Item, and Credit Memo Application Item are available, Payment and Refund will be replaced by Payment Application and Refund Application. \n\nIf you enable both the Advanced AR Settlement feature and the Invoice Item Settlement feature, Payment and Refund will be replaced by Payment Application Item and Refund Application Item. \n",
          "enum": [
            "Invoice Item",
            "Taxation Item",
            "Invoice Item Adjustment (Invoice)",
            "Invoice Item Adjustment (tax)",
            "Invoice Adjustment",
            "Electronic Payment",
            "External Payment",
            "Electronic Refund",
            "External Refund",
            "Electronic Credit Balance Payment",
            "External Credit Balance Payment",
            "Electronic Credit Balance Refund",
            "External Credit Balance Refund",
            "Credit Balance Adjustment (Applied from Credit Balance)",
            "Credit Balance Adjustment (Transferred to Credit Balance)",
            "Revenue Event Item",
            "Debit Memo Item (Charge)",
            "Debit Memo Item (tax)",
            "Credit Memo Item (Charge)",
            "Credit Memo Item (tax)",
            "Credit Memo Application Item",
            "Electronic Payment Application",
            "External Payment Application",
            "Electronic Refund Application",
            "External Refund Application",
            "Electronic Payment Application Item",
            "External Payment Application Item",
            "Electronic Refund Application Item",
            "External Refund Application Item"
          ],
          "type": "string"
        }
      },
      "title": "transactionTypes",
      "type": "object"
    },
    "GETJournalRunType": {
      "properties": {
        "aggregateCurrency": {
          "description": "",
          "type": "boolean"
        },
        "executedOn": {
          "description": "Date and time the journal run was executed.\n",
          "format": "date-time",
          "type": "string"
        },
        "journalEntryDate": {
          "description": "Date of the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "number": {
          "description": "Journal run number.\n",
          "type": "string"
        },
        "segmentationRuleName": {
          "description": "Name of GL segmentation rule used in the journal run.\n",
          "type": "string"
        },
        "status": {
          "description": "Status of the journal run. \n",
          "enum": [
            "Pending",
            "Processing",
            "Completed",
            "Error",
            "CancelInprogress",
            "Cancelled",
            "DeleteInprogress"
          ],
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "targetEndDate": {
          "description": "The target end date of the journal run.\n",
          "format": "date",
          "type": "string"
        },
        "targetStartDate": {
          "description": "The target start date of the journal run.\n",
          "format": "date",
          "type": "string"
        },
        "totalJournalEntryCount": {
          "description": "Total number of journal entries in the journal run.\n",
          "format": "int64",
          "type": "integer"
        },
        "transactionTypes": {
          "description": "Transaction types included in the journal run.\n",
          "items": {
            "$ref": "#/definitions/GETJournalRunTransactionType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GETMassUpdateType": {
      "properties": {
        "actionType": {
          "description": "Type of mass action.\n",
          "type": "string"
        },
        "endedOn": {
          "description": "Date and time that the mass action was completed. The format is `yyyy-MM-dd hh:mm:ss`.\n",
          "format": "date-time",
          "type": "string"
        },
        "errorCount": {
          "description": "Total number of failed records.\n\nThis field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have failed so far. When the mass action **status** is Pending, this field is null.\n",
          "type": "string"
        },
        "inputSize": {
          "description": "Size of the input file in bytes.\n",
          "format": "int64",
          "type": "integer"
        },
        "outputSize": {
          "description": "Size of the response file in bytes.\n",
          "format": "int64",
          "type": "integer"
        },
        "outputType": {
          "description": "Type of output for the response file. The following table describes the output type.\n\n| Output Type    | Description                         |\n|----------------|-------------------------------------|\n| (url:.csv.zip) | URL pointing to a zipped .csv file. |\n",
          "type": "string"
        },
        "outputURL": {
          "description": "URL to download the response file. The response file is a zipped .csv file. \nThe response file is identical to the file you uploaded to perform the mass action, with additional columns providing information about the outcome of each record. \nThis field only returns a value when the mass action **status** is Completed or Stopped. Otherwise, this field is null.\n",
          "type": "string"
        },
        "processedCount": {
          "description": "Total number of processed records. This field is equal to the sum of `errorCount` and `successCount`.\n\nThis field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have been processed so far. When the mass action **status** is Pending, this field is null.\n",
          "type": "string"
        },
        "startedOn": {
          "description": "Date and time that Zuora started processing the mass action. The format is `yyyy-MM-dd hh:mm:ss`.\n",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Status of the mass action. The following table describes the mass action statuses.\n\n| Status     | Description                                                                |\n|------------|----------------------------------------------------------------------------|\n| Pending    | Mass action has not yet started being processed.                           |\n| Processing | Mass action is in progress.                                                |\n| Stopping   | Mass action is in the process of stopping, but has not yet stopped.        |\n| Stopped    | Mass action has stopped.                                                   |\n| Completed  | Mass action was successfully completed. There may still be failed records. |\n| Failed     | Mass action failed. No records are processed. No response file is created. |\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "successCount": {
          "description": "Total number of successful records.\nThis field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have succeeded so far. When the mass action **status** is Pending, this field is null.\n",
          "type": "string"
        },
        "totalCount": {
          "description": "Total number of records in the uploaded mass action file.\nWhen the mass action **status** is Pending, this field is null.\n",
          "type": "string"
        },
        "uploadedBy": {
          "description": "Email of the person who uploaded the mass action file.\n",
          "type": "string"
        },
        "uploadedOn": {
          "description": "Date and time that the mass action file was uploaded. The format is `yyyy-MM-dd hh:mm:ss`.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETPaidInvoicesType": {
      "properties": {
        "appliedPaymentAmount": {
          "description": "Amount of the payment applied to this invoice.\n",
          "format": "decimal",
          "type": "string"
        },
        "invoiceId": {
          "description": "Invoice ID.\n",
          "type": "string"
        },
        "invoiceNumber": {
          "description": "Invoice number.\n",
          "type": "string"
        }
      },
      "title": "paidInvoices",
      "type": "object"
    },
    "GETPaymentGatwaysResponse": {
      "properties": {
        "paymentgateways": {
          "description": "",
          "items": {
            "$ref": "#/definitions/GETAPaymentGatwayResponse"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETPaymentItemPartCollectionType": {
      "properties": {
        "itemParts": {
          "description": "Container for payment part items.\n",
          "items": {
            "$ref": "#/definitions/GETPaymentItemPartTypewithSuccess"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETPaymentItemPartType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment part item.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the payment part item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the payment part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "debitMemoItemId": {
          "description": "The ID of the debit memo item associated with the payment part item.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the payment part item.\n",
          "type": "string"
        },
        "invoiceItemId": {
          "description": "The ID of the invoice item associated with the payment part item.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "taxItemId": {
          "description": "The ID of the taxation item associated with the payment part item.\n",
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the payment part item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the payment part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETPaymentItemPartTypewithSuccess": {
      "properties": {
        "amount": {
          "description": "The amount of the payment part item.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the payment part item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the payment part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "debitMemoItemId": {
          "description": "The ID of the debit memo item associated with the payment part item.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the payment part item.\n",
          "type": "string"
        },
        "invoiceItemId": {
          "description": "The ID of the invoice item associated with the payment part item.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the taxation item associated with the payment part item.\n",
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the payment part item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the payment part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "itemParts",
      "type": "object"
    },
    "GETPaymentMethodType": {
      "properties": {
        "cardHolderInfo": {
          "description": "Container for the name and billing address for the card holder.\n",
          "properties": {
            "addressLine1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "addressLine2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "cardHolderName": {
              "description": "The full name as it appears on the card, e.g., \"John J Smith\", 50 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country, must be a valid country name or abbreviation.\n",
              "type": "string"
            },
            "email": {
              "description": "Card holder's email address, 80 characters or less.\n",
              "type": "string"
            },
            "phone": {
              "description": "Phone number, 40 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State, must be a valid state name or 2-character abbreviation.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "cardNumber": {
          "description": "Credit or debit card number, 16 characters or less, masked for security purposes.\n",
          "type": "string"
        },
        "cardType": {
          "description": "The type of credit card or debit card being billed.  Possible values are: `Visa`, `MasterCard`, `AmericanExpress`, `Discover`.\n",
          "type": "string"
        },
        "defaultPaymentMethod": {
          "description": "Contains true if this is the default payment method for this customer, otherwise false.\n",
          "type": "boolean"
        },
        "expirationMonth": {
          "description": "Two-digit expiration month (01 - 12).\n",
          "type": "string"
        },
        "expirationYear": {
          "description": "Four-digit expiration year.\n",
          "type": "string"
        },
        "id": {
          "description": "Unique ID generated by Zuora when this payment method was created.\n",
          "type": "string"
        }
      },
      "title": "creditCards",
      "type": "object"
    },
    "GETPaymentMethodsType": {
      "properties": {
        "creditCards": {
          "description": "Container for one or more credit or debit card records:\n",
          "items": {
            "$ref": "#/definitions/GETPaymentMethodType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETPaymentPartType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment part.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the payment part.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the payment part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "debitMemoId": {
          "description": "The ID of the debit memo associated with the payment part.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the payment part.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "The ID of the invoice associated with the payment part.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the payment part.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the payment part was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETPaymentPartTypewithSuccess": {
      "properties": {
        "amount": {
          "description": "The amount of the payment part.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the payment part.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the payment part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "debitMemoId": {
          "description": "The ID of the debit memo associated with the payment part.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the payment part.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "The ID of the invoice associated with the payment part.\n",
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the payment part.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the payment part was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "parts",
      "type": "object"
    },
    "GETPaymentPartsCollectionType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "parts": {
          "description": "Container for payment parts.\n",
          "items": {
            "$ref": "#/definitions/GETPaymentPartTypewithSuccess"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETPaymentType": {
      "properties": {
        "accountID": {
          "description": "Customer account ID.\n",
          "type": "string"
        },
        "accountName": {
          "description": "Customer account name.\n",
          "type": "string"
        },
        "accountNumber": {
          "description": "Customer account number.\n",
          "type": "string"
        },
        "amount": {
          "description": "Payment amount.\n",
          "format": "decimal",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "Effective payment date as _yyyy-mm-dd_.\n",
          "format": "date",
          "type": "string"
        },
        "gatewayTransactionNumber": {
          "description": "Transaction ID from payment gateway.\n",
          "type": "string"
        },
        "id": {
          "description": "PaymentID.\n",
          "type": "string"
        },
        "paidInvoices": {
          "description": "Information about one or more invoices to which this payment was applied:\n",
          "items": {
            "$ref": "#/definitions/GETPaidInvoicesType"
          },
          "type": "array"
        },
        "paymentMethodID": {
          "description": "Payment method.\n",
          "type": "string"
        },
        "paymentNumber": {
          "description": "Unique payment number.\n",
          "type": "string"
        },
        "status": {
          "description": "Possible values are: `Draft`, `Processing`, `Processed`, `Error`, `Voided`, `Canceled`, `Posted.\n",
          "type": "string"
        },
        "type": {
          "description": "Possible values are: `External`, `Electronic`.\n",
          "type": "string"
        }
      },
      "title": "payments",
      "type": "object"
    },
    "GETPaymentsType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "payments": {
          "description": "Information about one or more payments:\n",
          "items": {
            "$ref": "#/definitions/GETPaymentType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETProductDiscountApplyDetailsType": {
      "properties": {
        "appliedProductRatePlanChargeId": {
          "description": "The ID of the product rate plan charge that the discount product rate plan charge applies to.\n",
          "type": "string"
        },
        "appliedProductRatePlanId": {
          "description": "The ID of the product rate plan that the discount product rate plan charge applies to.\n",
          "type": "string"
        }
      },
      "title": "productDiscountApplyDetails",
      "type": "object"
    },
    "GETProductRatePlanChargePricingTierType": {
      "properties": {
        "endingUnit": {
          "description": "Decimal defining end of tier range.\n",
          "format": "decimal",
          "type": "string"
        },
        "price": {
          "description": "The decimal value of the tiered charge model. If the charge model is not a tiered type then this price field will be null and the price field directly under the productRatePlanCharges applies.\n",
          "format": "decimal",
          "type": "string"
        },
        "priceFormat": {
          "description": "Tier price format.\n\nAllowed values:\n- flat fee \n- per unit\n",
          "type": "string"
        },
        "startingUnit": {
          "description": "Decimal defining start of tier range.\n",
          "format": "decimal",
          "type": "string"
        },
        "tier": {
          "description": "Unique number of the tier.\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "tiers",
      "type": "object"
    },
    "GETProductRatePlanChargePricingType": {
      "properties": {
        "currency": {
          "description": "Currency used by the charge model. For example: USD or EUR\n",
          "type": "string"
        },
        "discountAmount": {
          "description": "Value subtracted from price in currency specified. Used only when the charge model is DiscountFixedAmount.\n",
          "format": "decimal",
          "type": "string"
        },
        "discountPercentage": {
          "description": "Percent discount applied to the price. Used only when the charge model is DiscountPercentage.\n",
          "format": "decimal",
          "type": "string"
        },
        "includedUnits": {
          "description": "Specifies the number of units in the base set of units when the charge model is Overage.\n",
          "format": "decimal",
          "type": "string"
        },
        "overagePrice": {
          "description": "Price per unit when base set of units is exceeded. Used only when charge model is Overage or Tiered with Overage.\n",
          "format": "decimal",
          "type": "string"
        },
        "price": {
          "description": "The decimal value that applies when the charge model is not tiered\n",
          "format": "decimal",
          "type": "string"
        },
        "tiers": {
          "description": "Container for one or many defined tier ranges with distinct pricing.  Applies when model is `Tiered`, `TieredWithOverage`, or `Volume`\n",
          "items": {
            "$ref": "#/definitions/GETProductRatePlanChargePricingTierType"
          },
          "type": "array"
        }
      },
      "title": "pricing",
      "type": "object"
    },
    "GETProductRatePlanChargeType": {
      "properties": {
        "applyDiscountTo": {
          "description": "Specifies where (to what charge type) the discount will be applied. These field values are case-sensitive.\n\nPermissible values:\n- RECURRING\n- USAGE\n- ONETIMERECURRING\n- ONETIMEUSAGE\n- RECURRINGUSAGE\n- ONETIMERECURRINGUSAGE\n",
          "type": "string"
        },
        "billingDay": {
          "description": "The bill cycle day (BCD) for the charge. The BCD determines which day of the month or week the customer is billed. The BCD value in the account can override the BCD in this object.\n",
          "type": "string"
        },
        "billingPeriod": {
          "description": "The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).\n\nValues:\n- Month\n- Quarter\n- Annual\n- Semi-Annual\n- Specific Months\n- Week\n- Specific_Weeks\n",
          "type": "string"
        },
        "billingPeriodAlignment": {
          "description": "Aligns charges within the same subscription if multiple charges begin on different dates.\n\nPossible values:\n- AlignToCharge\n- AlignToSubscriptionStart\n- AlignToTermStart\n",
          "type": "string"
        },
        "billingTiming": {
          "description": "The billing timing for the charge. You can choose to bill for charges in advance or in arrears.\n\nValues:\n- In Advance\n- In Arrears\n\n**Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). \n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "defaultQuantity": {
          "description": "The default quantity of units.  This field is required if you use a per-unit charge model.\n",
          "format": "decimal",
          "type": "string"
        },
        "description": {
          "description": "Usually a brief line item summary of the Rate Plan Charge.\n",
          "type": "string"
        },
        "discountClass": {
          "description": "The class that the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.\n\nFor more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).\n",
          "type": "string"
        },
        "discountLevel": {
          "description": "The level of the discount. \n\nValues:\n- RatePlan\n- Subscription\n- Account\n",
          "type": "string"
        },
        "endDateCondition": {
          "description": "Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.\n\nValues:\n- Subscription_End\n- Fixed_Period\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for finance information of a rate plan charge.\n",
          "properties": {
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for deferred revenue, such as Monthly Recurring Liability. \n",
              "type": "string"
            },
            "deferredRevenueAccountingCodeType": {
              "description": "The type associated with the deferred revenue accounting code, such as Deferred Revenue. \n",
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. \n",
              "type": "string"
            },
            "recognizedRevenueAccountingCodeType": {
              "description": "The type associated with the recognized revenue accounting code, such as Sales Revenue or Sales Discount. \n",
              "type": "string"
            }
          },
          "title": "financeInformation",
          "type": "object"
        },
        "id": {
          "description": "Unique product rate-plan charge ID.\n",
          "type": "string"
        },
        "includedUnits": {
          "description": "Specifies the number of units in the base set of units when the charge model is Overage.\n",
          "format": "decimal",
          "type": "string"
        },
        "listPriceBase": {
          "description": "The list price base for the product rate plan charge.\n\nValues:\n- Month\n- Billing Period\n- Per_Week\n",
          "type": "string"
        },
        "maxQuantity": {
          "description": "Specifies the maximum number of units for this charge. Use this field and the `minQuantity` field to create a range of units allowed in a product rate plan charge.\n",
          "format": "decimal",
          "type": "string"
        },
        "minQuantity": {
          "description": "Specifies the minimum number of units for this charge. Use this field and the `maxQuantity` field to create a range of units allowed in a product rate plan charge.\n",
          "format": "decimal",
          "type": "string"
        },
        "model": {
          "description": "Charge model which determines how charges are calculated.  Charge models must be individually activated in Zuora Billing administration. \n\nPossible values are:\n- FlatFee\n- PerUnit\n- Overage\n- Volume\n- Tiered\n- TieredWithOverage\n- DiscountFixedAmount\n- DiscountPercentage\nThe Pricing Summaries section below details these charge models and their associated pricingSummary values.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the product rate-plan charge. (Not required to be unique.)\n",
          "type": "string"
        },
        "numberOfPeriods": {
          "description": "Value specifies the number of periods used in the smoothing model calculations Used when overage smoothing model is `RollingWindow` or `Rollover`.\n",
          "format": "int64",
          "type": "integer"
        },
        "overageCalculationOption": {
          "description": "Value specifies when to calculate overage charges.\n\nValues:\n- EndOfSmoothingPeriod\n- PerBillingPeriod\n",
          "type": "string"
        },
        "overageUnusedUnitsCreditOption": {
          "description": "Determines whether to credit the customer with unused units of usage.\n\nValues:\n- NoCredit\n- CreditBySpecificRate\n",
          "type": "string"
        },
        "prepayPeriods": {
          "description": "The number of periods to which prepayment is set. \n\n**Note:** This field is only available if you already have the prepayment feature enabled. The prepayment feature is deprecated and available only for backward compatibility. Zuora does not support enabling this feature anymore.\n",
          "format": "int64",
          "type": "integer"
        },
        "priceChangeOption": {
          "description": "Applies an automatic price change when a termed subscription is renewed and the following applies:\n\n1. AutomatedPriceChange setting is on\n2. Charge type is not one-time\n3. Charge model is not discount fixed amount\n\nValues:\n- NoChange (default)\n- SpecificPercentageValue\n- UseLatestProductCatalogPricing\n",
          "type": "string"
        },
        "priceIncreasePercentage": {
          "description": "Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `PriceChangeOption` value to `SpecificPercentageValue`.\n\n1. AutomatedPriceChange setting is on\n2. Charge type is not one-time\n3. Charge model is not discount fixed amount\n\nValues: a decimal between -100 and 100\n",
          "format": "decimal",
          "type": "string"
        },
        "pricing": {
          "description": "One or more price charge models with attributes that further describe the model. \nSome attributes show as null values when not applicable.\n",
          "items": {
            "$ref": "#/definitions/GETProductRatePlanChargePricingType"
          },
          "type": "array"
        },
        "pricingSummary": {
          "description": "A concise description of the charge model and pricing that is suitable to show to your customers. When the rate plan charge model is `Tiered` and multi-currency is enabled, this field includes an array of string of each currency, and each string of currency includes tier price description separated by comma.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "productDiscountApplyDetails": {
          "description": "Container for the application details about a discount product rate plan charge. \n\nOnly discount product rate plan charges have values in this field.\n",
          "items": {
            "$ref": "#/definitions/GETProductDiscountApplyDetailsType"
          },
          "type": "array"
        },
        "ratingGroup": {
          "description": "Specifies a rating group based on which usage records are rated. \n\n**Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n",
          "type": "string"
        },
        "revenueRecognitionRuleName": {
          "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
          "type": "string"
        },
        "smoothingModel": {
          "description": "Specifies the smoothing model for an overage smoothing charge model or an tiered with overage model, which is an advanced type of a usage model that avoids spikes in usage charges. If a customer's usage spikes in a single period, then an overage smoothing model eases overage charges by considering usage and multiple periods.\n\nOne of the following values shows which smoothing model will be applied to the charge when `Overage` or `Tiered with Overage` is used:\n\n- `RollingWindow` considers a number of periods to smooth usage. The rolling window starts and increments forward based on billing frequency. When allowed usage is met, then period resets and a new window begins.\n- `Rollover` considers a fixed number of periods before calculating usage. The net balance at the end of a period is unused usage, which is carried over to the next period's balance.\n",
          "type": "string"
        },
        "specificBillingPeriod": {
          "description": "When the billing period is set to `Specific` Months then this positive integer reflects the number of months for billing period charges.\n",
          "format": "int64",
          "type": "integer"
        },
        "taxCode": {
          "description": "Specifies the tax code for taxation rules; used by Zuora Tax.\n",
          "type": "string"
        },
        "taxMode": {
          "description": "Specifies how to define taxation for the charge; used by Zuora Tax. Possible values are: `TaxExclusive`, `TaxInclusive`.\n",
          "type": "string"
        },
        "taxable": {
          "description": "Specifies whether the charge is taxable; used by Zuora Tax. Possible values are:`true`, `false`.\n",
          "type": "boolean"
        },
        "triggerEvent": {
          "description": "Specifies when to start billing the customer for the charge.\n\nValues: one of the following:\n- `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.\n- `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.\n- `CustomerAcceptance` is when the customer accepts the services or products for a subscription. \n- `SpecificDate` is the date specified.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of charge. Possible values are: `OneTime`, `Recurring`, `Usage`.\n",
          "type": "string"
        },
        "uom": {
          "description": "Describes the Units of Measure (uom) configured in **Settings > Billing** for the productRatePlanCharges.\n\nValues: `Each`, `License`, `Seat`, or `null`\n",
          "type": "string"
        },
        "upToPeriods": {
          "description": "Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.\nIf the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.\n",
          "format": "int64",
          "type": "integer"
        },
        "upToPeriodsType": {
          "description": "The period type used to define when the charge ends.\n\nValues:\n- Billing_Periods\n- Days\n- Weeks\n- Months\n- Years\n  \n",
          "type": "string"
        },
        "usageRecordRatingOption": {
          "description": "Determines how Zuora processes usage records for per-unit usage charges. \n",
          "type": "string"
        },
        "useDiscountSpecificAccountingCode": {
          "description": "Determines whether to define a new accounting code for the new discount charge.\nValues: `true`, `false`\n",
          "type": "boolean"
        },
        "useTenantDefaultForPriceChange": {
          "description": "Shows the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. You set the tenant uplift value in the web-based UI: **Settings > Billing > Define Default Subscription Settings**.\n\nValues: `true`, `false`\n",
          "type": "boolean"
        }
      },
      "title": "productRatePlanCharges",
      "type": "object"
    },
    "GETProductRatePlanType": {
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "description": {
          "description": "Rate plan description.\n",
          "type": "string"
        },
        "effectiveEndDate": {
          "description": "Final date the rate plan is active, as `yyyy-mm-dd`. After this date, the rate plan status is `Expired`.\n",
          "format": "date",
          "type": "string"
        },
        "effectiveStartDate": {
          "description": "First date the rate plan is active (i.e., available to be subscribed to), as `yyyy-mm-dd`.  Before this date, the status is `NotStarted`.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "Unique product rate-plan charge ID.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the product rate-plan charge. (Not required to be unique.)\n",
          "type": "string"
        },
        "productRatePlanCharges": {
          "description": "Field attributes describing the product rate plan charges:\n",
          "items": {
            "$ref": "#/definitions/GETProductRatePlanChargeType"
          },
          "type": "array"
        },
        "status": {
          "description": "Possible vales are: `Active`, `Expired`, `NotStarted`.\n",
          "type": "string"
        }
      },
      "title": "productRatePlans",
      "type": "object"
    },
    "GETProductType": {
      "properties": {
        "category": {
          "description": "Category of the product. Used by Zuora Quotes Guided Product Selector.\n\nPossible values are:\n  - Base Products\n  - Add On Services\n  - Miscellaneous Products\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "description": {
          "description": "Optional product description.\n",
          "type": "string"
        },
        "effectiveEndDate": {
          "description": "The date when the product expires and cannot be subscribed to anymore, as `yyyy-mm-dd`.\n",
          "format": "date",
          "type": "string"
        },
        "effectiveStartDate": {
          "description": "The date when the product becomes available and can be subscribed to, as `yyyy-mm-dd`.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "Product ID.\n",
          "type": "string"
        },
        "name": {
          "description": "Product name, up to 100 characters.\n",
          "type": "string"
        },
        "productFeatures": {
          "description": "Container for one or more product features. Only available when the following settings are enabled:\n- The Entitlements feature in your tenant\n- The Enable Feature Specification in Product and Subscriptions setting in Settings > Billing\n",
          "items": {
            "$ref": "#/definitions/GetProductFeatureType"
          },
          "type": "array"
        },
        "productRatePlans": {
          "description": "Container for one or more product rate plans:\n",
          "items": {
            "$ref": "#/definitions/GETProductRatePlanType"
          },
          "type": "array"
        },
        "sku": {
          "description": "Unique product SKU, up to 50 characters.\n",
          "type": "string"
        },
        "tags": {
          "description": "",
          "type": "string"
        }
      },
      "title": "products",
      "type": "object"
    },
    "GETRSDetailForProductChargeType": {
      "properties": {
        "accountId": {
          "description": "The ID of a customer account.\n",
          "type": "string"
        },
        "amount": {
          "description": "The revenue schedule amount, which is the sum of all revenue items. \n\nThis field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting; otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places`.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "The date and time when the record was created, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used.\n",
          "type": "string"
        },
        "customFieldsValues": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "linkedTransactionId": {
          "description": "The linked transaction ID for billing transactions. This field is used for all rules except for the custom unlimited or manual recognition rule models. If using the custom unlimited rule model, then the field value must be null. If the field is not null, then the referenceId field must be null.\n",
          "type": "string"
        },
        "linkedTransactionNumber": {
          "description": "The number for the linked invoice item, invoice item adjustment, or debit memo item transaction. This field is used for all rules except for the custom unlimited or manual recognition rule models. If using the custom unlimited or manual recognition rule models, then the field value is null.\n",
          "type": "string"
        },
        "linkedTransactionType": {
          "description": "The type of linked transaction for billing transactions, which can be invoice item, invoice item adjustment, or debit memo item. This field is used for all rules except for the custom unlimited or manual recognition rule models.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "number": {
          "description": "The revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
          "type": "string"
        },
        "productChargeId": {
          "description": "The ID of a product rate plan charge.\n",
          "type": "string"
        },
        "recognitionRuleName": {
          "description": "The name of the recognition rule.\n",
          "type": "string"
        },
        "recognizedRevenue": {
          "description": "The revenue that was distributed in a closed accounting period.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to a credit memo item.\n",
          "type": "string"
        },
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n",
          "items": {
            "$ref": "#/definitions/GETRsRevenueItemType"
          },
          "type": "array"
        },
        "revenueScheduleDate": {
          "description": "The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.\n\nThe date cannot be in a closed accounting period. The date must be in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "undistributedUnrecognizedRevenue": {
          "description": "The revenue in the open-ended accounting period.\n",
          "type": "string"
        },
        "unrecognizedRevenue": {
          "description": "The revenue distributed in all open accounting periods, which includes the open-ended accounting period.\n",
          "type": "string"
        },
        "updatedOn": {
          "description": "The date and time when the revenue automation start date was set, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETRSDetailType": {
      "properties": {
        "accountId": {
          "description": "An account ID.\n",
          "type": "string"
        },
        "amount": {
          "description": "The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`\n",
          "format": "decimal",
          "type": "string"
        },
        "createdOn": {
          "description": "The date and time when the record was created, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "linkedTransactionId": {
          "description": "The linked transaction ID for billing transactions. This field is used for all rules except for the custom unlimited or manual recognition rule models. If using the custom unlimited rule model, then the field value must be null. If the field is not null, then the referenceId field must be null.\n",
          "type": "string"
        },
        "linkedTransactionNumber": {
          "description": "The number for the linked invoice item or invoice item adjustment transaction. This field is used for all rules except for the custom unlimited or manual recognition rule models. If using the custom unlimited or manual recognition rule models, then the field value is null.\n",
          "type": "string"
        },
        "linkedTransactionType": {
          "description": "The type of linked transaction for billing transactions, which can be invoice item or invoice item adjustment. This field is used for all rules except for the custom unlimited or manual recognition rule models.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "number": {
          "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
          "type": "string"
        },
        "recognitionRuleName": {
          "description": "The name of the recognition rule.\n",
          "type": "string"
        },
        "recognizedRevenue": {
          "description": "The revenue that was distributed in a closed accounting period.\n",
          "format": "decimal",
          "type": "string"
        },
        "referenceId": {
          "description": "Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.\n",
          "type": "string"
        },
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n",
          "items": {
            "$ref": "#/definitions/GETRsRevenueItemType"
          },
          "type": "array"
        },
        "revenueScheduleDate": {
          "description": "The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.\n\nThe date cannot be in a closed accounting period. The date must be in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "subscriptionChargeId": {
          "description": "The original subscription charge ID.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The original subscription ID.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "undistributedUnrecognizedRevenue": {
          "description": "Revenue in the open-ended accounting period.\n",
          "format": "decimal",
          "type": "string"
        },
        "unrecognizedRevenue": {
          "description": "Revenue distributed in all open accounting periods, which includes the open-ended accounting period.\n",
          "format": "decimal",
          "type": "string"
        },
        "updatedOn": {
          "description": "The date and time when the revenue automation start date was set, in `yyyy-mm-dd hh:mm:ss` formst.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETRSDetailWithoutSuccessType": {
      "properties": {
        "accountId": {
          "description": "An account ID.\n",
          "type": "string"
        },
        "amount": {
          "description": "The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`\n",
          "format": "decimal",
          "type": "string"
        },
        "createdOn": {
          "description": "The date and time when the record was created, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "linkedTransactionId": {
          "description": "The linked transaction ID for billing transactions. This field is used for all rules except for the custom unlimited or manual recognition rule models. If using the custom unlimited rule model, then the field value must be null. If the field is not null, then the referenceId field must be null.\n",
          "type": "string"
        },
        "linkedTransactionNumber": {
          "description": "The number for the linked invoice item or invoice item adjustment transaction. This field is used for all rules except for the custom unlimited or manual recognition rule models. If using the custom unlimited or manual recognition rule models, then the field value is null.\n",
          "type": "string"
        },
        "linkedTransactionType": {
          "description": "The type of linked transaction for billing transactions, which can be invoice item or invoice item adjustment. This field is used for all rules except for the custom unlimited or manual recognition rule models.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "number": {
          "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
          "type": "string"
        },
        "recognitionRuleName": {
          "description": "The name of the recognition rule.\n",
          "type": "string"
        },
        "recognizedRevenue": {
          "description": "The revenue that was distributed in a closed accounting period.\n",
          "format": "decimal",
          "type": "string"
        },
        "referenceId": {
          "description": "Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.\n",
          "type": "string"
        },
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n",
          "items": {
            "$ref": "#/definitions/GETRsRevenueItemType"
          },
          "type": "array"
        },
        "revenueScheduleDate": {
          "description": "The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.\n\nThe date cannot be in a closed accounting period. The date must be in the `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "subscriptionChargeId": {
          "description": "The original subscription charge ID.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The original subscription ID.\n",
          "type": "string"
        },
        "undistributedUnrecognizedRevenue": {
          "description": "Revenue in the open-ended accounting period.\n",
          "format": "decimal",
          "type": "string"
        },
        "unrecognizedRevenue": {
          "description": "Revenue distributed in all open accounting periods, which includes the open-ended accounting period.\n",
          "format": "decimal",
          "type": "string"
        },
        "updatedOn": {
          "description": "The date when the revenue automation start date was set, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "revenueSchedules",
      "type": "object"
    },
    "GETRSDetailsByChargeType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "revenueSchedules": {
          "description": "Represents how revenue will be recognized over time.\n\nThis contains the details of a revenue schedule. If you do not specify the `pageSize` variable, the default number of revenue schedules returned per invocation is 8, and if there are more than 8 revenue schedules to be returned, the `nextPage` field will provide a hyperlink to view the next page(s) of revenue events. The order of revenue schedules is descending by the `updatedOn` field.\n",
          "items": {
            "$ref": "#/definitions/GETRSDetailWithoutSuccessType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRSDetailsByProductChargeType": {
      "example": "",
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "revenueSchedules": {
          "description": "How revenue will be recognized over time.\n",
          "items": {
            "$ref": "#/definitions/GETRSDetailForProductChargeType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRefundCollectionType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "refunds": {
          "description": "Container for refunds.\n",
          "items": {
            "$ref": "#/definitions/GETRefundTypewithSuccess"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRefundCreditMemoType": {
      "properties": {
        "accountId": {
          "description": "The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the refund.\n",
          "format": "double",
          "type": "number"
        },
        "cancelledOn": {
          "description": "The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the refund.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the refund.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-06 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The ID of the credit memo that is refunded.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the refund.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "bankAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCodeType": {
              "description": "The type of the accounting code for the unapplied payment.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "gatewayId": {
          "description": "The ID of the gateway instance that processes the refund.\n",
          "type": "string"
        },
        "gatewayResponse": {
          "description": "The message returned from the payment gateway for the refund. This message is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayResponseCode": {
          "description": "The response code returned from the payment gateway for the refund. This code is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayState": {
          "description": "The status of the refund in the gateway.\n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "id": {
          "description": "The ID of the created refund.\n",
          "type": "string"
        },
        "markedForSubmissionOn": {
          "description": "The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "methodType": {
          "description": "How an external refund was issued to a customer.\n",
          "enum": [
            "ACH",
            "Cash",
            "Check",
            "CreditCard",
            "PayPal",
            "WireTransfer",
            "DebitCard",
            "CreditCardReferenceTransaction",
            "BankTransfer",
            "Other"
          ],
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the refund.\n",
          "type": "string"
        },
        "paymentId": {
          "description": "The ID of the payment associated with the refund.\n",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The unique ID of the payment method that the customer used to make the refund.\n",
          "type": "string"
        },
        "paymentMethodSnapshotId": {
          "description": "The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.\n",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "refundDate": {
          "description": "The date when the refund takes effect, in yyyy-mm-dd format.\n",
          "format": "date",
          "type": "string"
        },
        "refundTransactionTime": {
          "description": "The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "secondRefundReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "settledOn": {
          "description": "The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.\n",
          "format": "date-time",
          "type": "string"
        },
        "softDescriptor": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "softDescriptorPhone": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the refund.\n",
          "enum": [
            "Processed",
            "Canceled",
            "Error",
            "Processing"
          ],
          "type": "string"
        },
        "submittedOn": {
          "description": "The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "type": {
          "description": "The type of the refund.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the refund.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-07 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETRefundItemPartCollectionType": {
      "properties": {
        "itemParts": {
          "description": "Container for refund part items.\n",
          "items": {
            "$ref": "#/definitions/GETRefundItemPartTypewithSuccess"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRefundItemPartType": {
      "properties": {
        "amount": {
          "description": "The amount of the refund part item.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the refund part item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the refund part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item associated with the refund part item.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item associated with the refund part item.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the refund part item.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the refund part item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the refund part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETRefundItemPartTypewithSuccess": {
      "properties": {
        "amount": {
          "description": "The amount of the refund part item.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the refund part item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the refund part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item associated with the refund part item.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item associated with the refund part item.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the refund part item.\n",
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the refund part item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the refund part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "itemParts",
      "type": "object"
    },
    "GETRefundPartCollectionType": {
      "properties": {
        "parts": {
          "description": "Container for refund parts.\n",
          "items": {
            "$ref": "#/definitions/RefundPartResponseTypewithSuccess"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRefundPaymentType": {
      "properties": {
        "accountId": {
          "description": "The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the refund.\n",
          "format": "double",
          "type": "number"
        },
        "cancelledOn": {
          "description": "The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format. \n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the refund.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the refund.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10. \n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The ID of the credit memo associated with the refund.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the refund.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "bankAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCodeType": {
              "description": "The type of the accounting code for the unapplied payment.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "gatewayId": {
          "description": "The ID of the gateway instance that processes the refund.\n",
          "type": "string"
        },
        "gatewayResponse": {
          "description": "The message returned from the payment gateway for the refund. This message is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayResponseCode": {
          "description": "The code returned from the payment gateway for the refund. This code is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayState": {
          "description": "The status of the refund in the gateway.\n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "id": {
          "description": "The ID of the created refund.\n",
          "type": "string"
        },
        "markedForSubmissionOn": {
          "description": "The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "methodType": {
          "description": "How an external refund was issued to a customer.\n",
          "enum": [
            "ACH",
            "Cash",
            "Check",
            "CreditCard",
            "PayPal",
            "WireTransfer",
            "DebitCard",
            "CreditCardReferenceTransaction",
            "BankTransfer",
            "Other"
          ],
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the refund.\n",
          "type": "string"
        },
        "paymentId": {
          "description": "The ID of the payment that is refunded.\n",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The unique ID of the payment method that the customer used to make the refund. \n",
          "type": "string"
        },
        "paymentMethodSnapshotId": {
          "description": "The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.\n",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. \n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "refundDate": {
          "description": "The date when the refund takes effect, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "refundTransactionTime": {
          "description": "The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "secondRefundReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "settledOn": {
          "description": "The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.\n",
          "format": "date-time",
          "type": "string"
        },
        "softDescriptor": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "softDescriptorPhone": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the refund.\n",
          "enum": [
            "Processed",
            "Canceled",
            "Error",
            "Processing"
          ],
          "type": "string"
        },
        "submittedOn": {
          "description": "The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "type": {
          "description": "The type of the refund.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the the Zuora user who last updated the refund.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETRefundType": {
      "properties": {
        "accountId": {
          "description": "The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment or credit memo.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the refund.\n",
          "format": "double",
          "type": "number"
        },
        "cancelledOn": {
          "description": "The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the refund.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the refund.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The ID of the credit memo that is refunded.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the refund.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "bankAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCodeType": {
              "description": "The type of the accounting code for the unapplied payment.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "gatewayId": {
          "description": "The ID of the gateway instance that processes the refund.\n",
          "type": "string"
        },
        "gatewayResponse": {
          "description": "The message returned from the payment gateway for the refund. This message is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayResponseCode": {
          "description": "The code returned from the payment gateway for the refund. This code is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayState": {
          "description": "The status of the refund in the gateway.\n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "id": {
          "description": "The ID of the refund.\n",
          "type": "string"
        },
        "markedForSubmissionOn": {
          "description": "The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format. \n",
          "format": "date-time",
          "type": "string"
        },
        "methodType": {
          "description": "How an external refund was issued to a customer. \n",
          "enum": [
            "ACH",
            "Cash",
            "Check",
            "CreditCard",
            "PayPal",
            "WireTransfer",
            "DebitCard",
            "CreditCardReferenceTransaction",
            "BankTransfer",
            "Other"
          ],
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the refund.\n",
          "type": "string"
        },
        "paymentId": {
          "description": "The ID of the payment that is refunded.\n",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The unique ID of the payment method that the customer used to make the refund.\n",
          "type": "string"
        },
        "paymentMethodSnapshotId": {
          "description": "The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.\n",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "refundDate": {
          "description": "The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01.\n",
          "format": "date",
          "type": "string"
        },
        "refundTransactionTime": {
          "description": "The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "secondRefundReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "settledOn": {
          "description": "The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.\n",
          "format": "date-time",
          "type": "string"
        },
        "softDescriptor": {
          "description": "A payment gateway-specific field that maps Zuora to other gateways.\n",
          "type": "string"
        },
        "softDescriptorPhone": {
          "description": "A payment gateway-specific field that maps Zuora to other gateways.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the refund. \n",
          "enum": [
            "Processed",
            "Canceled",
            "Error",
            "Processing"
          ],
          "type": "string"
        },
        "submittedOn": {
          "description": "The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "type": {
          "description": "The type of the refund. \n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the refund.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETRefundTypewithSuccess": {
      "properties": {
        "accountId": {
          "description": "The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment or credit memo.\n",
          "type": "string"
        },
        "amount": {
          "description": "The total amount of the refund.\n",
          "format": "double",
          "type": "number"
        },
        "cancelledOn": {
          "description": "The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "comment": {
          "description": "Comments about the refund.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the refund.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The ID of the credit memo that is refunded.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the refund.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "bankAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to a bank account in your accounting system.\n",
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCodeType": {
              "description": "The type of the accounting code for the unapplied payment.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "gatewayId": {
          "description": "The ID of the gateway instance that processes the refund.\n",
          "type": "string"
        },
        "gatewayResponse": {
          "description": "The message returned from the payment gateway for the refund. This message is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayResponseCode": {
          "description": "The code returned from the payment gateway for the refund. This code is gateway-dependent.\n",
          "type": "string"
        },
        "gatewayState": {
          "description": "The status of the refund in the gateway. \n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "id": {
          "description": "The ID of the refund.\n",
          "type": "string"
        },
        "markedForSubmissionOn": {
          "description": "The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "methodType": {
          "description": "How an external refund was issued to a customer. \n",
          "enum": [
            "ACH",
            "Cash",
            "Check",
            "CreditCard",
            "PayPal",
            "WireTransfer",
            "DebitCard",
            "CreditCardReferenceTransaction",
            "BankTransfer",
            "Other"
          ],
          "type": "string"
        },
        "number": {
          "description": "The unique identification number of the refund.\n",
          "type": "string"
        },
        "paymentId": {
          "description": "The ID of the payment that is refunded.\n",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The unique ID of the payment method that the customer used to make the refund.\n",
          "type": "string"
        },
        "paymentMethodSnapshotId": {
          "description": "The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.\n",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "refundDate": {
          "description": "The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01.\n",
          "format": "date",
          "type": "string"
        },
        "refundTransactionTime": {
          "description": "The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "secondRefundReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "settledOn": {
          "description": "The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.\n",
          "format": "date-time",
          "type": "string"
        },
        "softDescriptor": {
          "description": "A payment gateway-specific field that maps Zuora to other gateways.\n",
          "type": "string"
        },
        "softDescriptorPhone": {
          "description": "A payment gateway-specific field that maps Zuora to other gateways.\n",
          "type": "string"
        },
        "status": {
          "description": "The status of the refund. \n",
          "enum": [
            "Processed",
            "Canceled",
            "Error",
            "Processing"
          ],
          "type": "string"
        },
        "submittedOn": {
          "description": "The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "description": "The type of the refund. \n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the refund.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "refunds",
      "type": "object"
    },
    "GETRevenueEventDetailType": {
      "properties": {
        "accountId": {
          "description": "An account ID.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "The date when the record was created in YYYY-MM-DD HH:MM:SS format.\n",
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "eventType": {
          "description": "Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
          "enum": [
            "Invoice Posted",
            "Invoice Item Adjustment Created",
            "Invoice Canceled",
            "Invoice Item Adjustment Canceled",
            "Revenue Distributed",
            "Credit Memo Posted",
            "Debit Memo Posted"
          ],
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "number": {
          "description": "The revenue event number created when a revenue event occurs.\n",
          "type": "string"
        },
        "recognitionEnd": {
          "description": "The end date of a recognition period in YYYY-MM-DD format. \n\nThe maximum difference of the recognitionStart and recognitionEnd date fields is equal to 250 multiplied by the length of an accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "recognitionStart": {
          "description": "The start date of a recognition period in YYYY-MM-DD format.\n",
          "format": "date",
          "type": "string"
        },
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n",
          "items": {
            "$ref": "#/definitions/GETRevenueItemType"
          },
          "type": "array"
        },
        "subscriptionChargeId": {
          "description": "The original subscription charge ID.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The original subscription ID.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRevenueEventDetailWithoutSuccessType": {
      "properties": {
        "accountId": {
          "description": "An account ID.\n",
          "type": "string"
        },
        "createdOn": {
          "description": "The date when the record was created in YYYY-MM-DD HH:MM:SS format.\n",
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used.",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "eventType": {
          "description": "Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
          "enum": [
            "Invoice Posted",
            "Invoice Item Adjustment Created",
            "Invoice Canceled",
            "Invoice Item Adjustment Canceled",
            "Revenue Distributed",
            "Credit Memo Posted",
            "Debit Memo Posted"
          ],
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "number": {
          "description": "The revenue event number created when a revenue event occurs.\n",
          "type": "string"
        },
        "recognitionEnd": {
          "description": "The end date of a recognition period in YYYY-MM-DD format. \n\nThe maximum difference of the recognitionStart and recognitionEnd date fields is equal to 250 multiplied by the length of an accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "recognitionStart": {
          "description": "The start date of a recognition period in YYYY-MM-DD format.\n",
          "format": "date",
          "type": "string"
        },
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n",
          "items": {
            "$ref": "#/definitions/GETRevenueItemType"
          },
          "type": "array"
        },
        "subscriptionChargeId": {
          "description": "The original subscription charge ID.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The original subscription ID.\n",
          "type": "string"
        }
      },
      "title": "revenueEventDetails",
      "type": "object"
    },
    "GETRevenueEventDetailsType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "revenueEventDetails": {
          "description": "Represents a change to a revenue schedule, such as posting an invoice or distributing revenue.\n",
          "items": {
            "$ref": "#/definitions/GETRevenueEventDetailWithoutSuccessType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRevenueItemType": {
      "properties": {
        "accountingPeriodEndDate": {
          "description": "The accounting period end date. The accounting period end date of the open-ended accounting period is null. \n",
          "format": "date",
          "type": "string"
        },
        "accountingPeriodName": {
          "description": "Name of the accounting period. The open-ended accounting period is named `Open-Ended`. \n",
          "type": "string"
        },
        "accountingPeriodStartDate": {
          "description": "The accounting period start date.\n",
          "format": "date",
          "type": "string"
        },
        "amount": {
          "description": "The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as *JPY 30* or *USD 30.15*. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned:  `Allocation amount with wrong decimal places.`\n",
          "format": "decimal",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used. \n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "isAccountingPeriodClosed": {
          "description": "Indicates if the accounting period is closed or open. \n",
          "type": "boolean"
        }
      },
      "title": "revenueItems",
      "type": "object"
    },
    "GETRevenueItemsType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n",
          "items": {
            "$ref": "#/definitions/GETRevenueItemType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRevenueRecognitionRuleAssociationType": {
      "properties": {
        "revenueRecognitionRuleName": {
          "description": "The name of the revenue recognition rule governing the revenue\nschedule.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETRevenueStartDateSettingType": {
      "properties": {
        "startDate": {
          "description": "The date on which revenue automation starts. This is the first day of an accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "updatedBy": {
          "description": "The user who made the change.\n",
          "type": "string"
        },
        "updatedOn": {
          "description": "The date when the revenue automation start date was set.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETRsRevenueItemType": {
      "properties": {
        "accountingPeriodEndDate": {
          "description": "The accounting period end date. The accounting period end date of the open-ended accounting period is null.\n",
          "format": "date",
          "type": "string"
        },
        "accountingPeriodName": {
          "description": "The name of the accounting period. The open-ended accounting period is named `Open-Ended`.\n",
          "type": "string"
        },
        "accountingPeriodStartDate": {
          "description": "The accounting period start date.\n",
          "format": "date",
          "type": "string"
        },
        "amount": {
          "description": "The amount of the revenue item.\n",
          "format": "decimal",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "deferredRevenueAccountingCode": {
          "description": "The accounting code for deferred revenue, such as Monthly Recurring Liability. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.\n",
          "type": "string"
        },
        "deferredRevenueAccountingCodeType": {
          "description": "The type of the deferred revenue accounting code, such as Deferred Revenue. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.\n",
          "type": "string"
        },
        "isAccountingPeriodClosed": {
          "description": "Indicates if the accounting period is closed or open.\n",
          "type": "boolean"
        },
        "recognizedRevenueAccountingCode": {
          "description": "The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, the value is ignored.\n",
          "type": "string"
        },
        "recognizedRevenueAccountingCodeType": {
          "description": "The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.\n",
          "type": "string"
        }
      },
      "title": "revenueItems",
      "type": "object"
    },
    "GETRsRevenueItemsType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n",
          "items": {
            "$ref": "#/definitions/GETRsRevenueItemType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETSubscriptionProductFeatureType": {
      "properties": {
        "description": {
          "description": "Feature description.\n",
          "type": "string"
        },
        "featureCode": {
          "description": "Feature code, up to 255 characters long.\n",
          "type": "string"
        },
        "id": {
          "description": "SubscriptionProductFeature ID.\n",
          "type": "string"
        },
        "name": {
          "description": "Feature name, up to 255 characters long.\n",
          "type": "string"
        }
      },
      "title": "subscriptionProductFeatures",
      "type": "object"
    },
    "GETSubscriptionRatePlanChargesType": {
      "properties": {
        "applyDiscountTo": {
          "description": "Specifies the type of charges a specific discount applies to. \n\nThis field is only used when applied to a discount charge model. If you are not using a discount charge model, the value is null.\n\nPossible values:\n\n* `RECURRING`\n* `USAGE`\n* `ONETIMERECURRING`\n* `ONETIMEUSAGE`\n* `RECURRINGUSAGE`\n* `ONETIMERECURRINGUSAGE`\n",
          "type": "string"
        },
        "billingDay": {
          "description": "Billing cycle day (BCD), which is when bill runs generate invoices\nfor charges associated with the product rate plan charge or the account.  \n\nValues:\n\n* `DefaultFromCustomer`\n* `SpecificDayofMonth(#)`\n* `SubscriptionStartDay`\n* `ChargeTriggerDay`\n* `SpecificDayOfWeek/dayofweek`: in which dayofweek is the day in the week you define your billing periods to start.\n\nIn the response data, a day-of-the-month value (`1`-`31`) appears in place of the hash sign above (\"#\"). If this value exceeds the number of days in a particular month, the last day of the month is used as the BCD.\n",
          "type": "string"
        },
        "billingPeriod": {
          "description": "Allows billing period to be overridden on the rate plan charge.\n",
          "type": "string"
        },
        "billingPeriodAlignment": {
          "description": "Possible values:\n\n* `AlignToCharge`\n* `AlignToSubscriptionStart`\n* `AlignToTermStart`\n",
          "type": "string"
        },
        "billingTiming": {
          "description": "The billing timing for the charge. This field is only used if the `ratePlanChargeType` value is `Recurring`.\n\nPossible values are:\n\n* `In Advance`\n* `In Arrears`\n\n**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "type": "string"
        },
        "chargedThroughDate": {
          "description": "The date through which a customer has been billed for the charge.\n",
          "format": "date",
          "type": "string"
        },
        "currency": {
          "description": "Currency used by the account. For example, `USD` or `EUR`.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "description": {
          "description": "Description of the rate plan charge.\n",
          "type": "string"
        },
        "discountAmount": {
          "description": "The amount of the discount.\n",
          "format": "decimal",
          "type": "string"
        },
        "discountApplyDetails": {
          "description": "Container for the application details about a discount rate plan charge. \n\nOnly discount rate plan charges have values in this field.\n",
          "items": {
            "$ref": "#/definitions/GETDiscountApplyDetailsType"
          },
          "type": "array"
        },
        "discountClass": {
          "description": "The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.\n\nFor more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).\n",
          "type": "string"
        },
        "discountLevel": {
          "description": "The level of the discount. Values: `RatePlan`, `Subscription`, `Account`.\n",
          "type": "string"
        },
        "discountPercentage": {
          "description": "The amount of the discount as a percentage.\n",
          "format": "decimal",
          "type": "string"
        },
        "dmrc": {
          "description": "The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.\n",
          "type": "string"
        },
        "done": {
          "description": "A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not bee completed for the charge segment.\n",
          "type": "boolean"
        },
        "dtcv": {
          "description": "After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.\n",
          "type": "string"
        },
        "effectiveEndDate": {
          "description": "The effective end date of the rate plan charge.\n",
          "format": "date",
          "type": "string"
        },
        "effectiveStartDate": {
          "description": "The effective start date of the rate plan charge.\n",
          "format": "date",
          "type": "string"
        },
        "endDateCondition": {
          "description": "Defines when the charge ends after the charge trigger date.\n\nIf the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.\n\nValues:\n\n* `Subscription_End`\n* `Fixed_Period`\n* `Specific_End_Date`\n",
          "type": "string"
        },
        "id": {
          "description": "Rate plan charge ID.\n",
          "type": "string"
        },
        "includedUnits": {
          "description": "Specifies the number of units in the base set of units.\n",
          "format": "decimal",
          "type": "string"
        },
        "listPriceBase": {
          "description": "List price base; possible values are:\n\n* `Per_Billing_Period`\n* `Per_Month`\n* `Per_Week`\n",
          "type": "string"
        },
        "model": {
          "description": "Charge model; possible values are:\n\n* `FlatFee`\n* `PerUnit`\n* `Overage`\n* `Volume`\n* `Tiered`\n* `TieredWithOverage`\n* `DiscountFixedAmount`\n* `DiscountPercentage`\n",
          "type": "string"
        },
        "mrr": {
          "description": "Monthly recurring revenue of the rate plan charge.\n",
          "type": "string"
        },
        "name": {
          "description": "Charge name.\n",
          "type": "string"
        },
        "number": {
          "description": "Charge number.\n",
          "type": "string"
        },
        "numberOfPeriods": {
          "description": "Specifies the number of periods to use when calculating charges in an overage smoothing charge model.\n",
          "format": "int64",
          "type": "integer"
        },
        "originalChargeId": {
          "description": "The original ID of the rate plan charge.\n",
          "type": "string"
        },
        "overageCalculationOption": {
          "description": "Determines when to calculate overage charges.\n",
          "type": "string"
        },
        "overagePrice": {
          "description": "The price for units over the allowed amount.\n",
          "format": "decimal",
          "type": "string"
        },
        "overageUnusedUnitsCreditOption": {
          "description": "Determines whether to credit the customer with unused units of usage.\n",
          "type": "string"
        },
        "price": {
          "description": "The price associated with the rate plan charge expressed as a decimal.\n",
          "format": "decimal",
          "type": "string"
        },
        "priceChangeOption": {
          "description": "When the following is true:\n\n1. AutomatedPriceChange setting is on\n\n2. Charge type is not one-time\n\n3. Charge model is not discount percentage\n\nThen an automatic price change can have a value for when a termed subscription is renewed. \n\nValues (one of the following):\n\n* `NoChange` (default)\n* `SpecificPercentageValue`\n* `UseLatestProductCatalogPricing`\n",
          "type": "string"
        },
        "priceIncreasePercentage": {
          "description": "A planned future price increase amount as a percentage.\n",
          "format": "decimal",
          "type": "string"
        },
        "pricingSummary": {
          "description": "Concise description of rate plan charge model.\n",
          "type": "string"
        },
        "processedThroughDate": {
          "description": "The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.\n",
          "format": "date",
          "type": "string"
        },
        "productRatePlanChargeId": {
          "description": "",
          "type": "string"
        },
        "quantity": {
          "description": "The quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing.\n",
          "format": "decimal",
          "type": "string"
        },
        "ratingGroup": {
          "description": "Specifies a rating group based on which usage records are rated. \n\nPossible values are:\n\n* `ByBillingPeriod` (default)\n* `ByUsageStartDate`\n* `ByUsageRecord`\n* `ByUsageUpload`\n\n**Note:** This field is only used for per unit, volume pricing, and tiered pricing charge models. Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.\n\n**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "type": "string"
        },
        "segment": {
          "description": "The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.\n",
          "format": "int64",
          "type": "integer"
        },
        "smoothingModel": {
          "description": "Specifies when revenue recognition begins. When charge model is `Overage` or `TieredWithOverage`, `smoothingModel` will be one of the following values:\n\n* `ContractEffectiveDate`\n* `ServiceActivationDate`\n* `CustomerAcceptanceDate`\n",
          "type": "string"
        },
        "specificBillingPeriod": {
          "description": "Customizes the number of month or week for the charges billing period. This field is required if you set the value of the `BillingPeriod` field to `Specific_Months` or `Specific_Weeks`.\n",
          "format": "int64",
          "type": "integer"
        },
        "specificEndDate": {
          "description": "The specific date on which the charge ends. If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.\n",
          "format": "date",
          "type": "string"
        },
        "tcv": {
          "description": "The total contract value.\n",
          "type": "string"
        },
        "tiers": {
          "description": "One or many defined ranges with distinct pricing.\n",
          "items": {
            "$ref": "#/definitions/GETTierType"
          },
          "type": "array"
        },
        "triggerDate": {
          "description": "The date that the rate plan charge will be triggered.\n",
          "format": "date",
          "type": "string"
        },
        "triggerEvent": {
          "description": "The event that will cause the rate plan charge to be triggered.\n\nPossible values: \n\n* `ContractEffective`\n* `ServiceActivation`\n* `CustomerAcceptance`\n* `SpecificDate`\n",
          "type": "string"
        },
        "type": {
          "description": "Charge type. Possible values are: `OneTime`, `Recurring`, `Usage`.\n",
          "type": "string"
        },
        "unusedUnitsCreditRates": {
          "description": "Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the \n`OverageUnusedUnitsCreditOption` field value is `CreditBySpecificRate`.\n",
          "format": "decimal",
          "type": "string"
        },
        "uom": {
          "description": "Specifies the units to measure usage. \n",
          "type": "string"
        },
        "upToPeriods": {
          "description": "Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.\n\nIf the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.\n",
          "type": "string"
        },
        "upToPeriodsType": {
          "description": "The period type used to define when the charge ends. \n\nValues:\n\n* `Billing_Periods`\n* `Days`\n* `Weeks`\n* `Months`\n* `Years`\n",
          "type": "string"
        },
        "usageRecordRatingOption": {
          "description": "Determines how Zuora processes usage records for per-unit usage charges. \n",
          "type": "string"
        },
        "version": {
          "description": "Rate plan charge revision number.\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "ratePlanCharges",
      "type": "object"
    },
    "GETSubscriptionRatePlanType": {
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "id": {
          "description": "Rate plan ID.\n",
          "type": "string"
        },
        "lastChangeType": {
          "description": "The last amendment on the rate plan.\n\nPossible Values:\n\n* `Add`\n* `Update`\n* `Remove`\n",
          "type": "string"
        },
        "productId": {
          "description": "",
          "type": "string"
        },
        "productName": {
          "description": "",
          "type": "string"
        },
        "productRatePlanId": {
          "description": "",
          "type": "string"
        },
        "productSku": {
          "description": "The unique SKU for the product.\n",
          "type": "string"
        },
        "ratePlanCharges": {
          "description": "Container for one or more charges.\n",
          "items": {
            "$ref": "#/definitions/GETSubscriptionRatePlanChargesType"
          },
          "type": "array"
        },
        "ratePlanName": {
          "description": "Name of the rate plan.\n",
          "type": "string"
        },
        "subscriptionProductFeatures": {
          "description": "Container for one or more features. \n\nOnly available when the following settings are enabled:\n\n* The Entitlements feature in your tenant.\n\n* The Enable Feature Specification in Product and Subscriptions setting in Zuora Billing Settings",
          "items": {
            "$ref": "#/definitions/GETSubscriptionProductFeatureType"
          },
          "type": "array"
        }
      },
      "title": "ratePlans",
      "type": "object"
    },
    "GETSubscriptionType": {
      "properties": {
        "CpqBundleJsonId__QT": {
          "description": "",
          "type": "string"
        },
        "OpportunityCloseDate__QT": {
          "description": "The closing date of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "OpportunityName__QT": {
          "description": "The unique identifier of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteBusinessType__QT": {
          "description": "The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal, or Churn. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteNumber__QT": {
          "description": "The unique identifier of the Quote. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics.\n\n\n",
          "type": "string"
        },
        "QuoteType__QT": {
          "description": "The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "accountId": {
          "description": "",
          "type": "string"
        },
        "accountName": {
          "description": "",
          "type": "string"
        },
        "accountNumber": {
          "description": "",
          "type": "string"
        },
        "autoRenew": {
          "description": "If `true`, the subscription automatically renews at the end of the term. Default is `false`.\n",
          "type": "boolean"
        },
        "contractEffectiveDate": {
          "description": "Effective contract date for this subscription, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "contractedMrr": {
          "description": "Monthly recurring revenue of the subscription.\n",
          "format": "decimal",
          "type": "string"
        },
        "currentTerm": {
          "description": "The length of the period for the current subscription term.\n",
          "format": "int64",
          "type": "integer"
        },
        "currentTermPeriodType": {
          "description": "The period type for the current subscription term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "customerAcceptanceDate": {
          "description": "The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "Subscription ID.\n",
          "type": "string"
        },
        "initialTerm": {
          "description": "The length of the period for the first subscription term.\n",
          "format": "int64",
          "type": "integer"
        },
        "initialTermPeriodType": {
          "description": "The period type for the first subscription term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "invoiceOwnerAccountId": {
          "description": "",
          "type": "string"
        },
        "invoiceOwnerAccountName": {
          "description": "",
          "type": "string"
        },
        "invoiceOwnerAccountNumber": {
          "description": "",
          "type": "string"
        },
        "invoiceSeparately": {
          "description": "Separates a single subscription from other subscriptions and creates an invoice for the subscription. \n\nIf the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.\n",
          "type": "string"
        },
        "notes": {
          "description": "A string of up to 65,535 characters.\n",
          "type": "string"
        },
        "orderNumber": {
          "description": "The order number of the order in which the changes on the subscription are made. \n\n**Note:** This field is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n",
          "type": "string"
        },
        "ratePlans": {
          "description": "Container for rate plans.\n",
          "items": {
            "$ref": "#/definitions/GETSubscriptionRatePlanType"
          },
          "type": "array"
        },
        "renewalSetting": {
          "description": "Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed. \n\nValues are:\n\n* `RENEW_WITH_SPECIFIC_TERM` (default)\n* `RENEW_TO_EVERGREEN`\n",
          "type": "string"
        },
        "renewalTerm": {
          "description": "The length of the period for the subscription renewal term.\n",
          "format": "int64",
          "type": "integer"
        },
        "renewalTermPeriodType": {
          "description": "The period type for the subscription renewal term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "serviceActivationDate": {
          "description": "The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd\n",
          "format": "date",
          "type": "string"
        },
        "status": {
          "description": "Subscription status; possible values are:\n\n* `Draft`\n* `PendingActivation`\n* `PendingAcceptance`\n* `Active`\n* `Cancelled`\n* `Suspended` (This value is in Limited Availability.)\n",
          "type": "string"
        },
        "subscriptionNumber": {
          "description": "",
          "type": "string"
        },
        "subscriptionStartDate": {
          "description": "Date the subscription becomes effective.\n",
          "format": "date",
          "type": "string"
        },
        "termEndDate": {
          "description": "Date the subscription term ends. If the subscription is evergreen, this is null or is the cancellation date (if one has been set).\n",
          "format": "date",
          "type": "string"
        },
        "termStartDate": {
          "description": "Date the subscription term begins. If this is a renewal subscription, this date is different from the subscription start date.\n",
          "format": "date",
          "type": "string"
        },
        "termType": {
          "description": "Possible values are: `TERMED`, `EVERGREEN`.\n",
          "type": "string"
        },
        "totalContractedValue": {
          "description": "Total contracted value of the subscription.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "title": "subscriptions",
      "type": "object"
    },
    "GETSubscriptionTypeWithSuccess": {
      "properties": {
        "CpqBundleJsonId__QT": {
          "description": "",
          "type": "string"
        },
        "OpportunityCloseDate__QT": {
          "description": "The closing date of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "OpportunityName__QT": {
          "description": "The unique identifier of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteBusinessType__QT": {
          "description": "The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal, or Churn. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteNumber__QT": {
          "description": "The unique identifier of the Quote. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics.\n\nSee [Subscription Data Source](https://knowledgecenter.zuora.com/CD_Reporting/Data_Exports/Z_Data_Source_Reference/Subscription_Data_Source) for more information.\n",
          "type": "string"
        },
        "QuoteType__QT": {
          "description": "The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "accountId": {
          "description": "The ID of the account associated with this subscription.",
          "type": "string"
        },
        "accountName": {
          "description": "The name of the account associated with this subscription.",
          "type": "string"
        },
        "accountNumber": {
          "description": "The number of the account associated with this subscription.",
          "type": "string"
        },
        "autoRenew": {
          "description": "If `true`, the subscription automatically renews at the end of the term. Default is `false`.\n",
          "type": "boolean"
        },
        "contractEffectiveDate": {
          "description": "Effective contract date for this subscription, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "contractedMrr": {
          "description": "Monthly recurring revenue of the subscription.\n",
          "format": "decimal",
          "type": "string"
        },
        "currentTerm": {
          "description": "The length of the period for the current subscription term.\n",
          "format": "int64",
          "type": "integer"
        },
        "currentTermPeriodType": {
          "description": "The period type for the current subscription term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "customerAcceptanceDate": {
          "description": "The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "Subscription ID.\n",
          "type": "string"
        },
        "initialTerm": {
          "description": "The length of the period for the first subscription term.\n",
          "format": "int64",
          "type": "integer"
        },
        "initialTermPeriodType": {
          "description": "The period type for the first subscription term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "invoiceOwnerAccountId": {
          "description": "",
          "type": "string"
        },
        "invoiceOwnerAccountName": {
          "description": "",
          "type": "string"
        },
        "invoiceOwnerAccountNumber": {
          "description": "",
          "type": "string"
        },
        "invoiceSeparately": {
          "description": "Separates a single subscription from other subscriptions and creates an invoice for the subscription. \n\nIf the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.\n",
          "type": "string"
        },
        "notes": {
          "description": "A string of up to 65,535 characters.\n",
          "type": "string"
        },
        "orderNumber": {
          "description": "The order number of the order in which the changes on the subscription are made. \n\n**Note:** This field is only available if you have the [Revenue Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Orders_Generation_for_Subscriptions_and_Amendments) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.\n",
          "type": "string"
        },
        "ratePlans": {
          "description": "Container for rate plans.\n",
          "items": {
            "$ref": "#/definitions/GETSubscriptionRatePlanType"
          },
          "type": "array"
        },
        "renewalSetting": {
          "description": "Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed. \n\nValues are:\n\n* `RENEW_WITH_SPECIFIC_TERM` (default)\n* `RENEW_TO_EVERGREEN`\n",
          "type": "string"
        },
        "renewalTerm": {
          "description": "The length of the period for the subscription renewal term.\n",
          "format": "int64",
          "type": "integer"
        },
        "renewalTermPeriodType": {
          "description": "The period type for the subscription renewal term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "serviceActivationDate": {
          "description": "The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd\n",
          "format": "date",
          "type": "string"
        },
        "status": {
          "description": "Subscription status; possible values are:\n\n* `Draft`\n* `PendingActivation`\n* `PendingAcceptance`\n* `Active`\n* `Cancelled`\n* `Suspended` (This value is in Limited Availability.)\n",
          "type": "string"
        },
        "subscriptionNumber": {
          "description": "Subscription number.",
          "type": "string"
        },
        "subscriptionStartDate": {
          "description": "Date the subscription becomes effective.\n",
          "format": "date",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "termEndDate": {
          "description": "Date the subscription term ends. If the subscription is evergreen, this is null or is the cancellation date (if one has been set).\n",
          "format": "date",
          "type": "string"
        },
        "termStartDate": {
          "description": "Date the subscription term begins. If this is a renewal subscription, this date is different from the subscription start date.\n",
          "format": "date",
          "type": "string"
        },
        "termType": {
          "description": "Possible values are: `TERMED`, `EVERGREEN`.\n",
          "type": "string"
        },
        "totalContractedValue": {
          "description": "Total contracted value of the subscription.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETSubscriptionWrapper": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "subscriptions": {
          "description": "Array of subscriptions.\n",
          "items": {
            "$ref": "#/definitions/GETSubscriptionType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GETTaxationItemListType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "taxationItems": {
          "description": "Container for taxation items.\n",
          "items": {
            "$ref": "#/definitions/GETTaxationItemTypewithSuccess"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GETTaxationItemType": {
      "properties": {
        "createdById": {
          "description": "The ID of the Zuora user who created the taxation item. \n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the taxation item was created in the Zuora system, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "exemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the taxation item.\n",
          "properties": {
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "onAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "type": "string"
            },
            "salesTaxPayableAccountingCodeType": {
              "description": "The type of the accounting code for the sales taxes payable.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the taxation item.\n",
          "type": "string"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field. \n",
          "type": "string"
        },
        "memoItemId": {
          "description": "The ID of the credit or debit memo associated with the taxation item.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the taxation item.\n",
          "type": "string"
        },
        "sourceTaxItemId": {
          "description": "The ID of the taxation item of the invoice, which the credit or debit memo is created from.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "taxAmount": {
          "description": "The amount of the tax applied to the credit or debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific credit or debit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date when the tax is applied to the credit or debit memo.\n",
          "format": "date",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the credit or debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate.\n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the credit or debit memo.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the taxation item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the taxation item was last updated, in `yyyy-mm-dd hh:mm:ss` format. \n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GETTaxationItemTypewithSuccess": {
      "properties": {
        "createdById": {
          "description": "The ID of the Zuora user who created the taxation item.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the taxation item was created in the Zuora system, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        },
        "exemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the taxation item.\n",
          "properties": {
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "onAccountAccountingCodeType": {
              "description": "The type of the accounting code that maps to an on account in your accounting system.\n",
              "type": "string"
            },
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "type": "string"
            },
            "salesTaxPayableAccountingCodeType": {
              "description": "The type of the accounting code for the sales taxes payable.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the taxation item.\n",
          "type": "string"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "memoItemId": {
          "description": "The ID of the credit or debit memo associated with the taxation item.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the taxation item.\n",
          "type": "string"
        },
        "sourceTaxItemId": {
          "description": "The ID of the taxation item of the invoice, which the credit or debit memo is created from.\n",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of the tax applied to the credit or debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific credit or debit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date when the tax is applied to the credit or debit memo.\n",
          "format": "date",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the credit or debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate.\n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the credit or debit memo.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the taxation item.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the taxation item was last updated, in `yyyy-mm-dd hh:mm:ss` format.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "taxationItems",
      "type": "object"
    },
    "GETTierType": {
      "properties": {
        "endingUnit": {
          "description": "Decimal defining end of tier range.\n",
          "format": "decimal",
          "type": "string"
        },
        "price": {
          "description": "The decimal value of the tiered charge model. If the charge model is not a tiered type then this price field will be null and the `price` field directly under the `productRatePlanCharges` applies.\n",
          "format": "decimal",
          "type": "string"
        },
        "priceFormat": {
          "description": "Tier price format. Allowed values: `flat fee`, `per unit`.\n",
          "type": "string"
        },
        "startingUnit": {
          "description": "Decimal defining start of tier range.\n",
          "format": "decimal",
          "type": "string"
        },
        "tier": {
          "description": "Unique number of the tier.\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "tiers",
      "type": "object"
    },
    "GETUsageType": {
      "properties": {
        "accountId": {
          "description": "Customer account ID.\n",
          "type": "string"
        },
        "accountName": {
          "description": "Customer account name.\n",
          "type": "string"
        },
        "accountNumber": {
          "description": "Customer account number.\n",
          "type": "string"
        },
        "chargeNumber": {
          "description": "Number of the rate-plan charge that pays for this usage.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "id": {
          "description": "Unique ID for the usage item.\n",
          "type": "string"
        },
        "quantity": {
          "description": "Number of units used.\n",
          "format": "decimal",
          "type": "string"
        },
        "sourceName": {
          "description": "Source of the usage data. Possible values are: `Import`, `API`.\n",
          "type": "string"
        },
        "startDateTime": {
          "description": "Start date of the time period in which usage is tracked. Zuora uses this field value to determine the usage date.\n",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Possible values are: `Importing`, `Pending`, `Processed`.\n",
          "type": "string"
        },
        "submissionDateTime": {
          "description": "Date when usage was submitted.\n",
          "format": "date-time",
          "type": "string"
        },
        "subscriptionNumber": {
          "description": "Number of the subscription covering this usage.\n",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Unit used to measure consumption.\n",
          "type": "string"
        }
      },
      "title": "usage",
      "type": "object"
    },
    "GETUsageWrapper": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "usage": {
          "description": "Contains one or more usage items.\n",
          "items": {
            "$ref": "#/definitions/GETUsageType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GatewayOption": {
      "properties": {
        "name": {
          "description": "The name of a gateway-specific parameter. This field is optional, but you must pass value for this field when using the `GatewayOptionData` field. Otherwise, the additional payment gateway parameter will not be mapped.\n",
          "type": "string"
        },
        "value": {
          "description": "The value of the gateway-specific parameter. This field is optional, but you must pass value for this field when using the `GatewayOptionData` field. Otherwise, the additional payment gateway parameter will not be mapped.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GenerateBillingDocumentResponseType": {
      "properties": {
        "creditMemos": {
          "description": "Container for generated credit memos.\n\n**Note:** This container is only available if you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/CreditMemoResponseType"
          },
          "type": "array"
        },
        "invoices": {
          "description": "Container for generated invoics.\n",
          "items": {
            "$ref": "#/definitions/InvoiceResponseType"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetAllOrdersResponseType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "orders": {
          "items": {
            "$ref": "#/definitions/Order"
          },
          "type": "array"
        },
        "success": {
          "description": "Indicates if the order creation has succeeded.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetBillingPreviewRunResponse": {
      "description": "get billingPreviewRun response",
      "properties": {
        "assumeRenewal": {
          "description": "",
          "type": "string"
        },
        "batch": {
          "description": "The customer batch included in the billing preview run. \n",
          "type": "string"
        },
        "chargeTypeToExclude": {
          "description": "The charge types excluded from the forecast run.\n",
          "type": "string"
        },
        "createdById": {
          "description": "The ID of the user who created the billing preview run.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the billing preview run was created.\n",
          "format": "datetime",
          "type": "string"
        },
        "endDate": {
          "description": "The date and time when the billing preview run completes.\n",
          "format": "datetime",
          "type": "string"
        },
        "errorMessage": {
          "description": "The error message generated by a failed billing preview run.\n",
          "type": "string"
        },
        "includingEvergreenSubscription": {
          "description": "Indicates if evergreen subscriptions are included in the billing preview run.\n",
          "type": "boolean"
        },
        "resultFileUrl": {
          "description": "The URL of the zipped CSV result file generated by the billing preview run. This file contains the preview invoice item data and credit memo item data for the specified customers.\n\n**Note:** The credit memo item data is only available if you have Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "type": "string"
        },
        "runNumber": {
          "description": "The run number of the billing preview run.\n",
          "type": "string"
        },
        "startDate": {
          "description": "The date and time when the billing preview run starts.\n",
          "format": "datetime",
          "type": "string"
        },
        "status": {
          "description": "The status of the >billing preview run.\n\n**Possible values:** \n\n* 0: Pending\n* 1: Processing\n* 2: Completed\n* 3: Error\n* 4: Canceled\n",
          "type": "string"
        },
        "succeededAccounts": {
          "description": "The number of accounts for which preview invoice item data and credit memo item data was successfully generated during the billing preview run.\n\n**Note:** The credit memo item data is only available if you have Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "type": "integer"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "targetDate": {
          "description": "The target date for the billing preview run.          \n",
          "format": "date",
          "type": "string"
        },
        "totalAccounts": {
          "description": "The total number of accounts in the billing preview run.\n",
          "format": "int32",
          "type": "integer"
        },
        "updatedById": {
          "description": "The ID of the user who last updated the billing preview run.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the billing preview run was last updated.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetCreditMemoAmountBreakdownByOrderResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonResponseType"
        },
        {
          "properties": {
            "breakdowns": {
              "description": "Invoice breakdown details.",
              "items": {
                "$ref": "#/definitions/CreditMemoItemBreakdown"
              },
              "type": "array"
            },
            "currency": {
              "description": "Currency code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "GetHostedPageType": {
      "properties": {
        "pageId": {
          "description": "Page ID of the Payment Page that Zuora assigns when it is created.\n",
          "type": "string"
        },
        "pageName": {
          "description": "Name of the Payment Page that specified during the page configuration.\n",
          "type": "string"
        },
        "pageType": {
          "description": "Payment method type of this Payment Page, e.g. 'Credit Card', 'ACH', or 'Bank Transfer'.\n",
          "type": "string"
        },
        "pageVersion": {
          "description": "Version of the Payment Page. 1 for Payment Pages 1.0 or 2 for Payment Pages 2.0.\n",
          "type": "string"
        }
      },
      "title": "hostedpages",
      "type": "object"
    },
    "GetHostedPagesType": {
      "properties": {
        "hostedpages": {
          "description": "Container for the hosted page information.\n",
          "items": {
            "$ref": "#/definitions/GetHostedPageType"
          },
          "type": "array"
        },
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetInvoiceAmountBreakdownByOrderResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonResponseType"
        },
        {
          "properties": {
            "breakdowns": {
              "description": "Invoice breakdown details.",
              "items": {
                "$ref": "#/definitions/InvoiceItemBreakdown"
              },
              "type": "array"
            },
            "currency": {
              "description": "Currency code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "GetOrderBillingInfoResponseType": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonResponse"
        },
        {
          "properties": {
            "billingInfo": {
              "properties": {
                "billedAmount": {
                  "format": "BigDecimal",
                  "type": "number"
                },
                "currency": {
                  "description": "Currency code.",
                  "type": "string"
                },
                "tcb": {
                  "description": "Total contracted billing of this order.",
                  "format": "BigDecimal",
                  "type": "number"
                },
                "unbilledAmount": {
                  "format": "BigDecimal",
                  "type": "number"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      ]
    },
    "GetOrderRatedResultResponseType": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonResponse"
        },
        {
          "properties": {
            "orderRatedResult": {
              "$ref": "#/definitions/OrderRatedResult"
            }
          },
          "type": "object"
        }
      ]
    },
    "GetOrderResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonResponse"
        },
        {
          "properties": {
            "order": {
              "$ref": "#/definitions/Order"
            }
          },
          "type": "object"
        }
      ]
    },
    "GetOrdersResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonResponse"
        },
        {
          "properties": {
            "nextPage": {
              "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
              "format": "URL",
              "type": "string"
            },
            "orders": {
              "items": {
                "$ref": "#/definitions/Order"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "GetProductFeatureType": {
      "properties": {
        "code": {
          "description": "Feature code, up to 255 characters long.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "description": {
          "description": "Feature description.\n",
          "type": "string"
        },
        "id": {
          "description": "Feature ID.\n",
          "type": "string"
        },
        "name": {
          "description": "Feature name, up to 255 characters long.\n",
          "type": "string"
        },
        "status": {
          "description": "",
          "type": "string"
        }
      },
      "title": "productFeatures",
      "type": "object"
    },
    "InitialTerm": {
      "description": "The first term of the subscription.",
      "properties": {
        "period": {
          "description": "Specify only when the termType is 'TERMED'. The limit is 10 years from the Start Date.",
          "type": "integer"
        },
        "periodType": {
          "description": "Specify only when the termType is 'TERMED'.",
          "enum": [
            "Month",
            "Year",
            "Day",
            "Week"
          ],
          "type": "string"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "termType": {
          "enum": [
            "TERMED",
            "EVERGREEN"
          ],
          "type": "string"
        }
      },
      "required": [
        "termType"
      ],
      "type": "object"
    },
    "Invoice": {
      "properties": {
        "AccountId": {
          "description": "",
          "type": "string"
        },
        "AdjustmentAmount": {
          "description": " The amount of the invoice adjustments associated with the invoice. **Character limi**t: 16\n\n\n**Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "Amount": {
          "description": " The sum of all charges and taxes associated with the invoice.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "AmountWithoutTax": {
          "description": " The sum of all charges associated with the invoice. Taxes are excluded from this value.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "Balance": {
          "description": " The remaining balance of the invoice after all payments, adjustments, and refunds are applied.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "BillRunId": {
          "description": " The ID of a Bill Run.\n\n\n**Character limit**: 32\n\n\n**Values**: a BillRun ID ",
          "type": "string"
        },
        "Body": {
          "description": " Required ",
          "type": "string"
        },
        "Comments": {
          "description": " Additional information related to the invoice that a Zuora user added to the invoice.\n\n\n**Character limit**: 255 **Values:** a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the invoice was generated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CreditBalanceAdjustmentAmount": {
          "description": " The currency amount of the adjustment applied to the customer's credit balance.\n\n\n**Character limit**: 16\n\n\n**Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.\n\n\n",
          "format": "double",
          "type": "number"
        },
        "DueDate": {
          "description": " The date by which the payment for this invoice is due.\n\n\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "IncludesOneTime": {
          "description": " Specifies whether the invoice includes one-time charges. You can use this field only with the `generate\n` call for the Invoice object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically generated from one of the following: `True` (default), `False` ",
          "type": "boolean"
        },
        "IncludesRecurring": {
          "description": " Specifies whether the invoice includes recurring charges. You can use this field only with the `generate\n`call for the Invoice object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically generated from one of the following: `True` (default), `False` ",
          "type": "boolean"
        },
        "IncludesUsage": {
          "description": " Specifies whether the invoice includes usage charges. You can use this field only with the `generate\n`call for the Invoice object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically generated from one of the following: `True `(default), `False` ",
          "type": "boolean"
        },
        "InvoiceDate": {
          "description": " Specifies the date on which to generate the invoice.\n\n\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "InvoiceNumber": {
          "description": " The unique identification number for the invoice. This number is returned as a string.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "LastEmailSentDate": {
          "description": " The date when the invoice was last emailed.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "PaymentAmount": {
          "description": " The amount of payments applied to the invoice.\n\n\n**Character limit**: 16 **Value**s: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "PostedBy": {
          "description": " The user ID of the person who moved the invoice to Posted status.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "PostedDate": {
          "description": " The date when the invoice was posted.\n**Character limit:** 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "RefundAmount": {
          "description": " Specifies the amount of a refund that was applied against an earlier payment on the invoice.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "RegenerateInvoicePDF": {
          "description": " Regenerates a PDF of an invoice that was already generated. Add this field to an `update\n` call to regenerate an invoice PDF. Note that when you set the `RegenerateInvoicePDF` field to `true`, you cannot update any other fields in the same `update\n` call. Otherwise, you will receive the following `INVALID_VALUE` error: &quot;When field RegenerateInvoicePDF is set to true to regenerate the invoice PDF file, changes on other fields of the invoice are not allowed.&quot;\n\n**Character limit**: 5\n\n\n**Values**: `True`, `False` ",
          "type": "boolean"
        },
        "Status": {
          "description": " The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.\n\n\n**Character limit**: 8\n\n\n**Values**: one of the following:\n\n-  Draft (default, automatically set upon invoice creation)\n\n-  Posted\n\n-  Canceled\n\n",
          "type": "string"
        },
        "TargetDate": {
          "description": " This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.\n\n\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "TaxAmount": {
          "description": " The total amount of the taxes applied to the invoice.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "TaxExemptAmount": {
          "description": " The total amount of the invoice that is exempt from taxation.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "TransferredToAccounting": {
          "description": " Specifies whether or not the invoice was transferred to an external accounting system, such as NetSuite.\n\n\n**Character limit**: 10\n\n\n**Values**: Processing, Yes, Error, Ignore ",
          "type": "string"
        },
        "UpdatedById": {
          "description": "",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the invoice was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceData": {
      "properties": {
        "Invoice": {
          "description": "",
          "properties": {
            "AccountId": {
              "description": "",
              "type": "string"
            },
            "AdjustmentAmount": {
              "description": " The amount of the invoice adjustments associated with the invoice. **Character limi**t: 16\n\n\n**Values**: a valid currency amount ",
              "format": "double",
              "type": "number"
            },
            "Amount": {
              "description": " The sum of all charges and taxes associated with the invoice.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "AmountWithoutTax": {
              "description": " The sum of all charges associated with the invoice. Taxes are excluded from this value.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "Balance": {
              "description": " The remaining balance of the invoice after all payments, adjustments, and refunds are applied.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "BillRunId": {
              "description": " The ID of a Bill Run.\n\n\n**Character limit**: 32\n\n\n**Values**: a BillRun ID ",
              "type": "string"
            },
            "Body": {
              "description": " Required ",
              "type": "string"
            },
            "Comments": {
              "description": " Additional information related to the invoice that a Zuora user added to the invoice.\n\n\n**Character limit**: 255 **Values:** a string of 255 characters or fewer ",
              "type": "string"
            },
            "CreatedById": {
              "description": " The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreatedDate": {
              "description": " The date when the invoice was generated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "CreditBalanceAdjustmentAmount": {
              "description": " The currency amount of the adjustment applied to the customer's credit balance.\n\n\n**Character limit**: 16\n\n\n**Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.\n\n\n",
              "format": "double",
              "type": "number"
            },
            "DueDate": {
              "description": " The date by which the payment for this invoice is due.\n\n\n**Character limit**: 29 ",
              "format": "date",
              "type": "string"
            },
            "IncludesOneTime": {
              "description": " Specifies whether the invoice includes one-time charges. You can use this field only with the `generate\n` call for the Invoice object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically generated from one of the following: `True` (default), `False` ",
              "type": "boolean"
            },
            "IncludesRecurring": {
              "description": " Specifies whether the invoice includes recurring charges. You can use this field only with the `generate\n`call for the Invoice object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically generated from one of the following: `True` (default), `False` ",
              "type": "boolean"
            },
            "IncludesUsage": {
              "description": " Specifies whether the invoice includes usage charges. You can use this field only with the `generate\n`call for the Invoice object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically generated from one of the following: `True `(default), `False` ",
              "type": "boolean"
            },
            "InvoiceDate": {
              "description": " Specifies the date on which to generate the invoice.\n\n\n**Character limit**: 29 ",
              "format": "date",
              "type": "string"
            },
            "InvoiceNumber": {
              "description": " The unique identification number for the invoice. This number is returned as a string.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "LastEmailSentDate": {
              "description": " The date when the invoice was last emailed.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "PaymentAmount": {
              "description": " The amount of payments applied to the invoice.\n\n\n**Character limit**: 16 **Value**s: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "PostedBy": {
              "description": " The user ID of the person who moved the invoice to Posted status.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "PostedDate": {
              "description": " The date when the invoice was posted.\n**Character limit:** 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "RefundAmount": {
              "description": " Specifies the amount of a refund that was applied against an earlier payment on the invoice.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "RegenerateInvoicePDF": {
              "description": " Regenerates a PDF of an invoice that was already generated. Add this field to an `update\n` call to regenerate an invoice PDF. Note that when you set the `RegenerateInvoicePDF` field to `true`, you cannot update any other fields in the same `update\n` call. Otherwise, you will receive the following `INVALID_VALUE` error: &quot;When field RegenerateInvoicePDF is set to true to regenerate the invoice PDF file, changes on other fields of the invoice are not allowed.&quot;\n\n**Character limit**: 5\n\n\n**Values**: `True`, `False` ",
              "type": "boolean"
            },
            "Status": {
              "description": " The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.\n\n\n**Character limit**: 8\n\n\n**Values**: one of the following:\n\n-  Draft (default, automatically set upon invoice creation)\n\n-  Posted\n\n-  Canceled\n\n",
              "type": "string"
            },
            "TargetDate": {
              "description": " This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.\n\n\n**Character limit**: 29 ",
              "format": "date",
              "type": "string"
            },
            "TaxAmount": {
              "description": " The total amount of the taxes applied to the invoice.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "TaxExemptAmount": {
              "description": " The total amount of the invoice that is exempt from taxation.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "TransferredToAccounting": {
              "description": " Specifies whether or not the invoice was transferred to an external accounting system, such as NetSuite.\n\n\n**Character limit**: 10\n\n\n**Values**: Processing, Yes, Error, Ignore ",
              "type": "string"
            },
            "UpdatedById": {
              "description": "",
              "type": "string"
            },
            "UpdatedDate": {
              "description": " The date when the invoice was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "InvoiceItem": {
          "description": "",
          "items": {
            "$ref": "#/definitions/InvoiceItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "InvoiceItem": {
      "properties": {
        "AccountingCode": {
          "description": " The accounting code for the item's charge. Accounting codes group transactions that contain similar accounting attributes.\n\n\n**Character limit**: 100\n\n\n**Values**: inherited from `RatePlanCharge.AccountingCode` ",
          "type": "string"
        },
        "AppliedToChargeNumber": {
          "description": " The charge number that the discount charge is applied to. This field is only for the invoice items that are discount charges. This field is only returned in subscription previews.\nThis field will be returned in the response if you specify the charge number in the rate plan charges in the request.\n\n**Character limit**: 32\n\n**Values**: inherited from `RatePlanCharge.ChargeNumber` for the charge associated with the invoice item that the discount charge is applied to ",
          "type": "string"
        },
        "AppliedToInvoiceItemId": {
          "description": " Associates a discount invoice item to a specific invoice item.\n\n**Character limit**: 32\n\n**Values**: inherited from the ID of the charge that a discount applies to ",
          "type": "string"
        },
        "ChargeAmount": {
          "description": " The amount being charged for the invoice item. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.\n\n\n**Character limit**:\n\n\n**Values**: automatically calculated from multiple fields in multiple objects ",
          "format": "double",
          "type": "number"
        },
        "ChargeDate": {
          "description": " The date when the Invoice Item is created .\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "ChargeDescription": {
          "description": " A description of the invoice item's charge.\n\n\n**Character limit**: 500\n\n\n**Values**: inherited from `RatePlanCharge.Description` ",
          "type": "string"
        },
        "ChargeId": {
          "description": " The ID of the rate plan charge that is associated with this invoice item upon object creation.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `RatePlanCharge.Id` ",
          "type": "string"
        },
        "ChargeName": {
          "description": " The name of the invoice item's charge.\n**Character limi**t: 50 **Values: **inherited from `RatePlanCharge.Name` ",
          "type": "string"
        },
        "ChargeNumber": {
          "description": " The unique identifier of the invoice item's charge.\n**Character limit:** 50 **Values:** inherited from `RatePlanCharge.ChargeNumber` ",
          "type": "string"
        },
        "ChargeType": {
          "description": " Specifies the type of charge.\n\n\n**Character limit**: 9\n\n\n**Values**: one of the following:\n\n- `OneTime`\n- `Recurring`\n- `Usage`\n",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the invoice item.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date the invoice item was created.\n**Character limit:** 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "InvoiceId": {
          "description": " The ID of the invoice that's associated with this invoice item.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `Invoice.Id` ",
          "type": "string"
        },
        "ProcessingType": {
          "description": " Identifies the kind of charge where 0 is a charge, 1 is a discount, 2 is a prepayment, and 3 is a tax. The returned value is text not decimal on data sources.\n\n\n**Character limit**: **Values: **\n\n- 0: charge\n- 1: discount\n- 2: prepayment\n- 3: tax\n",
          "format": "double",
          "type": "number"
        },
        "ProductDescription": {
          "description": " A description of the product associated with this invoice item.\n\n\n**Character limit**: 500\n\n\n**Values**: inherited from `Product.Description` ",
          "type": "string"
        },
        "ProductId": {
          "description": " The ID of the product associated with this invoice item.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `Product.Id` ",
          "type": "string"
        },
        "ProductName": {
          "description": " The name of the product associated with this invoice item.\n\n\n**Character limit**: 255 **Values: **inherited from `Product.Name` ",
          "type": "string"
        },
        "ProductRatePlanChargeId": {
          "description": " The ID of the rate plan charge that's associated with this invoice item.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `ProductRatePlanCharge.Id` You cannot `query\n` for this field. Only the s`ubscribe\n` preview and the `amend\n` preview calls will return the value of this field in the response.",
          "type": "string"
        },
        "Quantity": {
          "description": " The number of units for this invoice item.\n\n\n\n**Values**: inherited from `RatePlanCharge.Quantity` ",
          "format": "double",
          "type": "number"
        },
        "RatePlanChargeId": {
          "description": " The ID of the rate plan charge that's associated with this invoice item.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `RatePlanCharge.Id` ",
          "type": "string"
        },
        "RevRecCode": {
          "description": " Associates this invoice item with a specific revenue recognition code.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `ProductRatePlanCharge.RevRecCode` ",
          "type": "string"
        },
        "RevRecStartDate": {
          "description": " The date when revenue recognition is triggered.\n\n\n**Character limit**: 29\n\n\n**Values**: generated from `InvoiceItem.RevRecTriggerCondition` ",
          "format": "date",
          "type": "string"
        },
        "RevRecTriggerCondition": {
          "description": " Specifies when revenue recognition begins based on a triggering event.\n\n\n**Character limit**:\n\n\n**Values**: inherited from `ProductRatePlanCharge`.`RevRecTriggerCondition` ",
          "type": "string"
        },
        "SKU": {
          "description": " The unique SKU for the product associated with this invoice item.\n\n\n**Character limit**: 255\n\n\n**Values**: inherited from `Product.SKU` ",
          "type": "string"
        },
        "ServiceEndDate": {
          "description": " The end date of the service period associated with this invoice item. Service ends one second before the date in this value.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "ServiceStartDate": {
          "description": " The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.\n**Character limit:** 29\n\n\n**Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "SubscriptionId": {
          "description": " The ID of the subscription associated with the invoice item.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `Subscription.Id` ",
          "type": "string"
        },
        "SubscriptionNumber": {
          "description": " The number of the subscription associated with the invoice item.\n\n\n**Character limit**:\n\n\n**Values**: ",
          "type": "string"
        },
        "TaxAmount": {
          "description": " The amount of tax applied to the invoice item's charge.\n\n\n**Character limit**:\n\n\n**Values**: calculated from multiple fields in the ProductRatePlanCharge object ",
          "format": "double",
          "type": "number"
        },
        "TaxCode": {
          "description": " Specifies the tax code for taxation rules.\n\n\n**Character limit**: 6\n\n\n**Values**: inherited from `ProductRatePlanCharge.TaxCode` ",
          "type": "string"
        },
        "TaxExemptAmount": {
          "description": " The amount of the invoice item's charge that's tax exempt.\n\n\n**Character limit**:\n\n\n**Values**: calculated from multiple fields in the ProductRatePlanCharge object ",
          "format": "double",
          "type": "number"
        },
        "TaxMode": {
          "description": " The tax mode of the invoice item.\n\n\n**Character limit**: 12\n\n\n**Values**: `TaxExclusive`, `TaxInclusive` ",
          "type": "string"
        },
        "UOM": {
          "description": " Specifies the units to measure usage. Units of measure are configured in the web-based UI: **Z-Billing > Settings**\n\n**Character limit**:\n\n\n**Values**: inherited from `ProductRatePlanCharge.UOM` ",
          "type": "string"
        },
        "UnitPrice": {
          "description": " The per-unit price of the invoice item.\n\n\n**Character limit**:\n\n\n**Values**: calculated from multiple fields in ProductRatePlanCharge and ProductRatePlanChargeTier objets ",
          "format": "double",
          "type": "number"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the invoice item.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the invoice item was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceItemBreakdown": {
      "properties": {
        "amount": {
          "format": "BigDecimal",
          "type": "number"
        },
        "applyToChargeNumber": {
          "description": "Available only when the invoice item represents a discount invoice item.",
          "type": "string"
        },
        "breakdownDetails": {
          "items": {
            "$ref": "#/definitions/BreakdownDetail"
          },
          "type": "array"
        },
        "chargeNumber": {
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "invoiceItemId": {
          "type": "string"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "subscriptionNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoicePayment": {
      "properties": {
        "Amount": {
          "description": "The amount of the payment to apply to an invoice.\n",
          "format": "decimal",
          "type": "string"
        },
        "InvoiceId": {
          "description": "The ID of the invoice that the payment is applied to.\n",
          "type": "string"
        },
        "PaymentId": {
          "description": "The ID of the payment.\n",
          "type": "string"
        }
      },
      "required": [
        "Amount",
        "InvoiceId"
      ],
      "type": "object"
    },
    "InvoiceProcessingOptions": {
      "properties": {
        "InvoiceDate": {
          "description": " The invoice date.",
          "format": "date",
          "type": "string"
        },
        "InvoiceTargetDate": {
          "description": " The date that determines which charges to bill. Charges prior to this date or on this date are billed on the resulting invoices. ",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "InvoiceTargetDate"
      ],
      "type": "object"
    },
    "InvoiceResponseType": {
      "properties": {
        "id": {
          "description": "The ID of the generated invoice.\n",
          "type": "string"
        }
      },
      "title": "invoices",
      "type": "object"
    },
    "LastTerm": {
      "description": "The length of the period for the current subscription term.",
      "properties": {
        "period": {
          "description": "Specify only when the termType is 'TERMED'.",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "periodType": {
          "description": "Specify only when the termType is 'TERMED'.",
          "enum": [
            "Month",
            "Year",
            "Day",
            "Week"
          ],
          "type": "string"
        },
        "startDate": {
          "description": "The start date of the last term. You are not allowed to change the term start date after you have made the 'RenewSubscription' order action.\n",
          "format": "date",
          "type": "string"
        },
        "termType": {
          "enum": [
            "TERMED",
            "EVERGREEN"
          ],
          "type": "string"
        }
      },
      "required": [
        "termType"
      ],
      "type": "object"
    },
    "NewChargeMetrics": {
      "properties": {
        "ChargeNumber": {
          "description": "",
          "type": "string"
        },
        "DMRR": {
          "description": "",
          "format": "double",
          "type": "number"
        },
        "DTCV": {
          "description": "",
          "format": "double",
          "type": "number"
        },
        "MRR": {
          "description": "",
          "format": "double",
          "type": "number"
        },
        "OriginalId": {
          "description": "",
          "type": "string"
        },
        "OriginalRatePlanId": {
          "description": "",
          "type": "string"
        },
        "ProductRatePlanChargeId": {
          "description": "",
          "type": "string"
        },
        "ProductRatePlanId": {
          "description": "",
          "type": "string"
        },
        "TCV": {
          "description": "",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "OneTimeFlatFeePricingOverride": {
      "properties": {
        "listPrice": {
          "format": "BigDecimal",
          "type": "number"
        }
      },
      "required": [
        "listPrice"
      ],
      "type": "object"
    },
    "OneTimePerUnitPricingOverride": {
      "properties": {
        "listPrice": {
          "format": "BigDecimal",
          "type": "number"
        },
        "quantity": {
          "format": "BigDecimal",
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "OneTimeTieredPricingOverride": {
      "properties": {
        "quantity": {
          "format": "BigDecimal",
          "minimum": 0,
          "type": "number"
        },
        "tiers": {
          "items": {
            "$ref": "#/definitions/ChargeTier"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OneTimeVolumePricingOverride": {
      "properties": {
        "quantity": {
          "format": "BigDecimal",
          "minimum": 0,
          "type": "number"
        },
        "tiers": {
          "items": {
            "$ref": "#/definitions/ChargeTier"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Order": {
      "description": "Represents the order information that will be returned in the GET call.",
      "properties": {
        "currency": {
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/CustomFields"
        },
        "existingAccountNumber": {
          "type": "string"
        },
        "orderDate": {
          "format": "date",
          "type": "string"
        },
        "orderNumber": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "subscriptions": {
          "description": "Represents a processed subscription, including the origin request (order actions) that create this version of subscription and the processing result (order metrics). The reference part in the request will be overridden with the info in the new subscription version.",
          "items": {
            "properties": {
              "baseVersion": {
                "type": "integer"
              },
              "newVersion": {
                "type": "integer"
              },
              "orderActions": {
                "items": {
                  "$ref": "#/definitions/OrderAction"
                },
                "type": "array"
              },
              "sequence": {
                "type": "integer"
              },
              "subscriptionNumber": {
                "description": "The new subscription number for a new subscription created, or the existing subscription number. Unlike the order request, the subscription number here always has a value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrderAction": {
      "description": "Represents the processed order action.",
      "properties": {
        "addProduct": {
          "allOf": [
            {
              "$ref": "#/definitions/RatePlanOverride"
            },
            {
              "properties": {
                "originRatePlanId": {
                  "description": "The original rate plan id.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "cancelSubscription": {
          "$ref": "#/definitions/CancelSubscription"
        },
        "createSubscription": {
          "$ref": "#/definitions/CreateSubscription"
        },
        "customFields": {
          "$ref": "#/definitions/CustomFields"
        },
        "orderMetrics": {
          "$ref": "#/definitions/OrderMetrics"
        },
        "ownerTransfer": {
          "$ref": "#/definitions/OwnerTransfer"
        },
        "removeProduct": {
          "allOf": [
            {
              "$ref": "#/definitions/RemoveProduct"
            },
            {
              "properties": {
                "originRatePlanId": {
                  "description": "The original rate plan id.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "sequence": {
          "description": "The sequence of the order actions processed in the order.",
          "type": "integer"
        },
        "termsAndConditions": {
          "$ref": "#/definitions/TermsAndConditions"
        },
        "triggerDates": {
          "$ref": "#/definitions/TriggerDates"
        },
        "type": {
          "description": "Type of the order action.",
          "enum": [
            "CreateSubscription",
            "TermsAndConditions",
            "AddProduct",
            "UpdateProduct",
            "RemoveProduct",
            "RenewSubscription",
            "CancelSubscription",
            "OwnerTransfer"
          ],
          "type": "string"
        },
        "updateProduct": {
          "allOf": [
            {
              "$ref": "#/definitions/RatePlanUpdate"
            },
            {
              "properties": {
                "originRatePlanId": {
                  "description": "The original rate plan id.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        }
      },
      "type": "object"
    },
    "OrderMetrics": {
      "items": {
        "description": "Shows the delta metrics caused by a specific order action on a specific charge.",
        "properties": {
          "chargeNumber": {
            "type": "string"
          },
          "mrr": {
            "items": {
              "$ref": "#/definitions/TimeSlicedNetMetrics"
            },
            "type": "array"
          },
          "originRatePlanId": {
            "type": "string"
          },
          "productRatePlanChargeId": {
            "type": "string"
          },
          "productRatePlanId": {
            "type": "string"
          },
          "quantity": {
            "items": {
              "$ref": "#/definitions/TimeSlicedMetrics"
            },
            "type": "array"
          },
          "tcb": {
            "description": "Total contracted billing which is the forecast value for the total invoice amount.",
            "items": {
              "$ref": "#/definitions/TimeSlicedTcbNetMetrics"
            },
            "type": "array"
          },
          "tcv": {
            "description": "Total contracted value.",
            "items": {
              "$ref": "#/definitions/TimeSlicedNetMetrics"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "OrderRatedResult": {
      "properties": {
        "orderNumber": {
          "type": "string"
        },
        "subscriptionRatedResults": {
          "description": "An array of subscription changes included in this order.",
          "items": {
            "$ref": "#/definitions/SubscriptionRatedResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OwnerTransfer": {
      "description": "Container for transferring a subscription owner.\n\n\n**Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n",
      "properties": {
        "destinationAccountNumber": {
          "description": "The account number of the account that the subscription is being transferred to.\n",
          "type": "string"
        },
        "destinationInvoiceAccountNumber": {
          "description": "The account number of the invoice owner account that the subscription is being transferred to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "POSTAccountResponseType": {
      "properties": {
        "accountId": {
          "description": "Auto-generated account ID.\n",
          "type": "string"
        },
        "accountNumber": {
          "description": "Account number.\n",
          "type": "string"
        },
        "contractedMrr": {
          "description": "Contracted monthly recurring revenue of the subscription.\n",
          "format": "decimal",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The credit memo ID, if a credit memo is generated during the subscription process.\n\n**Note:** This field is only available if you have the Advanced AR Settlements feature enabled.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "ID of the invoice generated at account creation, if applicable.\n",
          "type": "string"
        },
        "paidAmount": {
          "description": "Amount collected on the invoice generated at account creation, if applicable.\n",
          "format": "decimal",
          "type": "string"
        },
        "paymentId": {
          "description": "ID of the payment collected on the invoice generated at account creation, if applicable.\n",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "ID of the payment method that was set up at account creation, which automatically becomes the default payment method for this account.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "ID of the subscription that was set up at account creation, if applicable.\n",
          "type": "string"
        },
        "subscriptionNumber": {
          "description": "Number of the subscription that was set up at account creation, if applicable.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "totalContractedValue": {
          "description": "Total contracted value of the subscription.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "POSTAccountType": {
      "example": {
        "additionalEmailAddresses": [
          "test1@test.com",
          "test2@test.com"
        ],
        "autoPay": false,
        "billCycleDay": 0,
        "billToContact": {
          "address1": "1051 E Hillsdale Blvd",
          "city": "Foster City",
          "country": "United States",
          "firstName": "John",
          "lastName": "Smith",
          "state": "CA",
          "workEmail": "john.smith@test.com",
          "zipCode": "94404"
        },
        "currency": "USD",
        "hpmCreditCardPaymentMethodId": "2c92c0f93cf64d94013cfe2d20db61a7",
        "invoiceDeliveryPrefsEmail": true,
        "invoiceDeliveryPrefsPrint": false,
        "name": "Zuora Test Account",
        "notes": "This account is for demo purposes.",
        "paymentTerm": "Due Upon Receipt",
        "subscription": {
          "autoRenew": true,
          "contractEffectiveDate": "2016-01-01",
          "initialTerm": 12,
          "notes": "This is a trial subscription for POST account demo.",
          "renewalTerm": 12,
          "subscribeToRatePlans": [
            {
              "chargeOverrides": [
                {
                  "price": 1000,
                  "productRatePlanChargeId": "2c92c0f94ac8307f014ae5d4a5156b28"
                },
                {
                  "price": 1000,
                  "productRatePlanChargeId": "2c92c0f94ac8307f014ae5dbe2947851"
                }
              ],
              "productRatePlanId": "2c92c0f94ac8307f014ae5d3d1d469e2"
            },
            {
              "chargeOverrides": [
                {
                  "price": 1000,
                  "productRatePlanChargeId": "2c92c0f83cf64298013d027725a67b7b"
                }
              ],
              "productRatePlanId": "2c92c0f93cf64d94013d027681560341"
            }
          ],
          "termType": "TERMED"
        }
      },
      "properties": {
        "accountNumber": {
          "description": "A unique account number, up to 50 characters that do not begin with the default account number prefix.  If no account number is specified, one is generated.\n",
          "type": "string"
        },
        "additionalEmailAddresses": {
          "description": "A list of additional email addresses to receive emailed invoices. Use a comma to separate each email address.\n\n**Note:** Invoices are emailed to the email addresses specified in this field only when the `invoiceDeliveryPrefsEmail` field is `true`.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "applyCreditBalance": {
          "description": "Applies a credit balance to an invoice.\n\nIf the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.\n\nPrerequisite: `invoice` must be `true`.\n\nTo view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.\n\n\n**Note:** \n  - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.\n  - This field is deprecated if you have the Advanced AR Settlement feature enabled. \n",
          "type": "boolean"
        },
        "autoPay": {
          "description": "Specifies whether future payments are to be automatically billed when they are due. Possible values are: `true`, `false`.\n",
          "type": "boolean"
        },
        "batch": {
          "description": "The alias name given to a batch. A string of 50 characters or less.\n",
          "type": "string"
        },
        "billCycleDay": {
          "description": "The account's bill cycle day (BCD), when bill runs generate invoices for the account.  Specify any day of the month (1-31, where 31 = end-of-month), or 0 for auto-set.\n\nRequired if no subscription will be created. \n\nOptional if a subscription is created and defaults to the day-of-the-month of the subscription's `contractEffectiveDate`.\n",
          "format": "int64",
          "type": "integer"
        },
        "billToContact": {
          "description": "Container for bill-to contact information for this account. If you do not provide a sold-to contact, the bill-to contact is copied to sold-to contact. Once the sold-to contact is created, changes to billToContact will not affect soldToContact and vice versa.\n",
          "properties": {
            "address1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "address2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.\n",
              "type": "string"
            },
            "county": {
              "description": "County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.\n",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "fax": {
              "description": "Fax phone number, 40 characters or less.\n",
              "type": "string"
            },
            "firstName": {
              "description": "First name, 100 characters or less.\n",
              "type": "string"
            },
            "homePhone": {
              "description": "Home phone number, 40 characters or less.\n",
              "type": "string"
            },
            "lastName": {
              "description": "Last name, 100 characters or less.\n",
              "type": "string"
            },
            "mobilePhone": {
              "description": "Mobile phone number, 40 characters or less.\n",
              "type": "string"
            },
            "nickname": {
              "description": "Nickname for this contact\n",
              "type": "string"
            },
            "otherPhone": {
              "description": "Other phone number, 40 characters or less.\n",
              "type": "string"
            },
            "otherPhoneType": {
              "description": "Possible values are: `Work`, `Mobile`, `Home`, `Other`.\n",
              "type": "string"
            },
            "personalEmail": {
              "description": "Personal email address, 80 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora tax requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.\n",
              "type": "string"
            },
            "taxRegion": {
              "description": "If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.\n",
              "type": "string"
            },
            "workEmail": {
              "description": "Work email address, 80 characters or less.\n",
              "type": "string"
            },
            "workPhone": {
              "description": "Work phone number, 40 characters or less.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "required": [
            "firstName",
            "lastName"
          ],
          "type": "object"
        },
        "collect": {
          "description": "Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.\n\nIf the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.\n\nThe default value is `true`.\n\nPrerequisite: invoice must be `true`. \n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header. ",
          "type": "string"
        },
        "communicationProfileId": {
          "description": "The ID of a communication profile.          ",
          "type": "string"
        },
        "creditCard": {
          "description": "Container for information on a credit card to associate with this account. You must provide either this structure or the `hpmCreditCardPaymentMethodId` field, but not both.\n",
          "properties": {
            "cardHolderInfo": {
              "description": "ontainer for cardholder information. If provided, Zuora will only use this information for this card.  If not provided, Zuora will use the account's existing bill-to contact information for this card.\n",
              "properties": {
                "addressLine1": {
                  "description": "First address line, 255 characters or less.\n",
                  "type": "string"
                },
                "addressLine2": {
                  "description": "Second address line, 255 characters or less.\n",
                  "type": "string"
                },
                "cardHolderName": {
                  "description": "The card holder's full name as it appears on the card, e.g., \"John J Smith\", 50 characters or less.\n",
                  "type": "string"
                },
                "city": {
                  "description": "City, 40 characters or less.\n",
                  "type": "string"
                },
                "country": {
                  "description": "Country; must be a valid country name or abbreviation.\n",
                  "type": "string"
                },
                "email": {
                  "description": "Card holder's email address, 80 characters or less.\n",
                  "type": "string"
                },
                "phone": {
                  "description": "Phone number, 40 characters or less.\n",
                  "type": "string"
                },
                "state": {
                  "description": "State; must be a valid state name or 2-character abbreviation.\n",
                  "type": "string"
                },
                "zipCode": {
                  "description": "Zip code, 20 characters or less.\n",
                  "type": "string"
                }
              },
              "required": [
                "addressLine1",
                "cardHolderName",
                "city",
                "country",
                "state",
                "zipCode"
              ],
              "type": "object"
            },
            "cardNumber": {
              "description": "Card number, up to 16 characters. Once created, this field can't be updated or queried, and is only available in masked format (e.g., XXXX-XXXX-XXXX-1234).\n",
              "type": "string"
            },
            "cardType": {
              "description": "Possible values are: `Visa`, `MasterCard`, `AmericanExpress`, `Discover`.\n",
              "type": "string"
            },
            "expirationMonth": {
              "description": "Two-digit expiration month (01-12).\n",
              "type": "string"
            },
            "expirationYear": {
              "description": "Four-digit expiration year.\n",
              "type": "string"
            },
            "securityCode": {
              "description": "The CVV or CVV2 security code of the card. To ensure PCI compliance, this value isn't stored and can't be queried.\n",
              "type": "string"
            }
          },
          "required": [
            "cardHolderInfo",
            "cardNumber",
            "cardType",
            "expirationMonth",
            "expirationYear"
          ],
          "type": "object"
        },
        "crmId": {
          "description": "CRM account ID for the account, up to 100 characters.\n",
          "type": "string"
        },
        "currency": {
          "description": "A currency as defined in Billing Settings in the Zuora UI.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "hpmCreditCardPaymentMethodId": {
          "description": "The ID of the HPM credit card payment method associated with this account. You must provide either this field or the `creditCard` structure, but not both.\n\n**Note:** Non-credit card payment methods are not supported.\n",
          "type": "string"
        },
        "invoice": {
          "description": "**Note:** This field has been replaced by the `runBilling` field. The\n`invoice` field is only available for backward compatibility. \n\n\nCreates an invoice for a subscription. The invoice generated in this\noperation is only for this subscription, not for the entire customer\naccount.\n\n\nIf the value is `true`, an invoice is created. If the value is\n`false`, no action is taken.\n\n\nThe default value is `true`. \n\n\nThis field is in REST API minor version control. To use this field in\nthe method, you can set the `zuora-version` parameter to the minor\nversion number in the request header. Supported minor versions are\n`196.0` and `207.0`.\n",
          "type": "boolean"
        },
        "invoiceCollect": {
          "description": "**Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.\n\nIf `true` (default), and a subscription is created, an invoice is generated at account creation time and payment is immediately collected using the account's default payment method.\n\nThis field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0.\n",
          "type": "boolean"
        },
        "invoiceDeliveryPrefsEmail": {
          "description": "Whether the customer wants to receive invoices through email. \n\nThe default value is `false`.\n",
          "type": "boolean"
        },
        "invoiceDeliveryPrefsPrint": {
          "description": "Whether the customer wants to receive printed invoices, such as through postal mail.\n\nThe default value is `false`.\n",
          "type": "boolean"
        },
        "invoiceTargetDate": {
          "description": "**Note:** This field has been replaced by the `targetDate` field. The\n`invoiceTargetDate` field is only available for backward\ncompatibility.  \n\n\nDate through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.\n\n\nThis field is in REST API minor version control. To use this field in\nthe method, you can set the `zuora-version` parameter to the minor\nversion number in the request header. Supported minor versions are\n`207.0` and earlier. \n",
          "format": "date",
          "type": "string"
        },
        "invoiceTemplateId": {
          "description": "Invoice template ID, configured in Billing Settings in the Zuora UI.\n",
          "type": "string"
        },
        "name": {
          "description": "Account name, up to 255 characters.\n",
          "type": "string"
        },
        "notes": {
          "description": "A string of up to 65,535 characters.\n",
          "type": "string"
        },
        "paymentGateway": {
          "description": "The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.\n",
          "type": "string"
        },
        "paymentTerm": {
          "description": "Payment terms for this account. Possible values are: `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.\n",
          "type": "string"
        },
        "runBilling": {
          "default": true,
          "description": "Creates an invoice for a subscription. If you have the Advanced AR Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule.](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos). \n\n\nThe billing documents generated\nin this operation is only for this subscription, not for the entire\ncustomer account.\n\n\nPossible values:\n\n- `true`: An invoice is created. If you have the Advanced AR\nSettlement feature enabled, a credit memo might also be created.\n\n\n- `false`: No invoice is created.\n\n\n**Note:** This field is in Zuora REST API version control. Supported\nminor versions are `211.0` or later. To use this field in the method,\nyou must set the `zuora-version` parameter to the minor version number\nin the request header.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "soldToContact": {
          "description": "Container for optional sold-to contact; uses the same field structure as the bill-to contact (above). If a sold-to contact is not specified, one is created from the bill-to contact. Once created, these are two separate data entities, and future changes to one do not affect the other.\n",
          "properties": {
            "address1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "address2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.\n",
              "type": "string"
            },
            "county": {
              "description": "County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.\n",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "fax": {
              "description": "Fax phone number, 40 characters or less.\n",
              "type": "string"
            },
            "firstName": {
              "description": "First name, 100 characters or less.\n",
              "type": "string"
            },
            "homePhone": {
              "description": "Home phone number, 40 characters or less.\n",
              "type": "string"
            },
            "lastName": {
              "description": "Last name, 100 characters or less.\n",
              "type": "string"
            },
            "mobilePhone": {
              "description": "Mobile phone number, 40 characters or less.\n",
              "type": "string"
            },
            "nickname": {
              "description": "Nickname for this contact\n",
              "type": "string"
            },
            "otherPhone": {
              "description": "Other phone number, 40 characters or less.\n",
              "type": "string"
            },
            "otherPhoneType": {
              "description": "Possible values are: `Work`, `Mobile`, `Home`, `Other`.\n",
              "type": "string"
            },
            "personalEmail": {
              "description": "Personal email address, 80 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora Tax requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.\n",
              "type": "string"
            },
            "taxRegion": {
              "description": "If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.\n",
              "type": "string"
            },
            "workEmail": {
              "description": "Work email address, 80 characters or less.\n",
              "type": "string"
            },
            "workPhone": {
              "description": "Work phone number, 40 characters or less.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "required": [
            "firstName",
            "lastName"
          ],
          "type": "object"
        },
        "subscription": {
          "description": "Container for subscription information, used if creating a subscription for the new account at the time of account creation.\n",
          "properties": {
            "CpqBundleJsonId__QT": {
              "description": "",
              "type": "string"
            },
            "OpportunityCloseDate__QT": {
              "description": "",
              "type": "string"
            },
            "OpportunityName__QT": {
              "description": "",
              "type": "string"
            },
            "QuoteBusinessType__QT": {
              "description": "",
              "type": "string"
            },
            "QuoteNumber__QT": {
              "description": "",
              "type": "string"
            },
            "QuoteType__QT": {
              "description": "",
              "type": "string"
            },
            "autoRenew": {
              "description": "If `true`, auto-renew is enabled. Default is `false`.\n",
              "type": "boolean"
            },
            "contractEffectiveDate": {
              "description": "Effective contract date for this subscription, as `yyyy-mm-dd`.\n",
              "format": "date",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "customerAcceptanceDate": {
              "description": "The date on which the services or products within a subscription have been accepted by the customer, as `yyyy-mm-dd`.\n\nDefault value is dependent on the value of other fields. See Notes section for more details.\n",
              "format": "date",
              "type": "string"
            },
            "initialTerm": {
              "description": "Duration of the initial subscription term in whole months.  Default is 0. \n",
              "format": "int64",
              "type": "integer"
            },
            "invoiceOwnerAccountKey": {
              "description": "Invoice owner account number or ID.\n\n**Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). \n",
              "type": "string"
            },
            "invoiceSeparately": {
              "description": "Separates a single subscription from other subscriptions and invoices the charge independently. \n\nIf the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.\nThe default value is `false`.\n\nPrerequisite: The default subscription setting `Enable Subscriptions to be Invoiced Separately` must be set to `Yes`.\n",
              "type": "boolean"
            },
            "notes": {
              "description": "",
              "type": "string"
            },
            "renewalTerm": {
              "description": "Duration of the renewal term in whole months. Default is 0.\n",
              "format": "int64",
              "type": "integer"
            },
            "serviceActivationDate": {
              "description": "The date on which the services or products within a subscription have been activated and access has been provided to the customer, as `yyyy-mm-dd`.\n\nDefault value is dependent on the value of other fields. See Notes section for more details.\n",
              "format": "date",
              "type": "string"
            },
            "subscribeToRatePlans": {
              "description": "Container for one or more rate plans for this subscription.\n",
              "items": {
                "$ref": "#/definitions/POSTSrpCreateType"
              },
              "type": "array"
            },
            "subscriptionNumber": {
              "description": "Subscription Number. The value can be up to 1000 characters.\n\nIf you do not specify a subscription number when creating a subscription for the new account, Zuora will generate a subscription number automatically.\n\nIf the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.\n",
              "type": "string"
            },
            "termStartDate": {
              "description": "The date on which the subscription term begins, as `yyyy-mm-dd`. If this is a renewal subscription, this date is different from the subscription start date.\n",
              "format": "date",
              "type": "string"
            },
            "termType": {
              "description": "Possible values are: `TERMED`, `EVERGREEN`.\n",
              "type": "string"
            }
          },
          "required": [
            "contractEffectiveDate",
            "termType"
          ],
          "type": "object"
        },
        "tagging": {
          "description": "",
          "type": "string"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.\n\n**Note:** The credit memo is only available only if you have the Avdanced AR Settlement feature enabled.\n\nThis field is in Zuora REST API version control. Supported minor versions are `211.0` and later. To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.\n",
          "format": "date",
          "type": "string"
        },
        "taxInfo": {
          "description": "Container for tax exempt information, used to establish the tax exempt status of a customer account.\n",
          "properties": {
            "VATId": {
              "description": "EU Value Added Tax ID. \n\n**Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).\n",
              "type": "string"
            },
            "companyCode": {
              "description": "Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.\n\n**Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). \n",
              "type": "string"
            },
            "exemptCertificateId": {
              "description": "ID of the customer tax exemption certificate. Requires Zuora Tax.\n",
              "type": "string"
            },
            "exemptCertificateType": {
              "description": "Type of tax exemption certificate that the customer holds. Requires Zuora Tax.\n",
              "type": "string"
            },
            "exemptDescription": {
              "description": "Description of the tax exemption certificate that the customer holds. Requires Zuora Tax.\n",
              "type": "string"
            },
            "exemptEffectiveDate": {
              "description": "Date when the customer tax exemption starts. Requires Zuora Tax.\n\nFormat: `yyyy-mm-dd`. Defaults to the current date.\n",
              "format": "date",
              "type": "string"
            },
            "exemptExpirationDate": {
              "description": "Date when the customer tax exemption expires. Requires Zuora Tax.\n\nFormat: `yyyy-mm-dd`. Defaults to the current date.\n",
              "format": "date",
              "type": "string"
            },
            "exemptIssuingJurisdiction": {
              "description": "Jurisdiction in which the customer tax exemption certificate was issued.\n",
              "type": "string"
            },
            "exemptStatus": {
              "description": "Status of the account tax exemption. Requires Zuora Tax.\n\nRequired if you use Zuora Tax. This field is unavailable if Zuora Tax is not used.\n\nValues: `Yes`, `No`, `pendingVerification`.\n",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "name",
        "currency",
        "billToContact"
      ],
      "type": "object"
    },
    "POSTAccountingCodeResponseType": {
      "properties": {
        "id": {
          "description": "ID of the newly created accounting code.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTAccountingCodeType": {
      "example": {
        "name": "CASH",
        "type": "Cash"
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "glAccountName": {
          "description": "Name of the account in your general ledger.\n\nField only available if you have Zuora Finance enabled. Maximum of 255 characters.\n",
          "type": "string"
        },
        "glAccountNumber": {
          "description": "Account number in your general ledger.\n\nField only available if you have Zuora Finance enabled. Maximum of 255 characters.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the accounting code.\n\nAccounting code name must be unique. Maximum of 100 characters.\n",
          "type": "string"
        },
        "notes": {
          "description": "Maximum of 2,000 characters.\n",
          "type": "string"
        },
        "type": {
          "description": "Accounting code type. You cannot create new accounting codes of type `AccountsReceivable`. \n\nNote that `On-Account Receivable` is only available if you enable the Advanced AR Settlement feature. \n",
          "enum": [
            "AccountsReceivable",
            "On-Account Receivable",
            "Cash",
            "OtherAssets",
            "CustomerCashOnAccount",
            "DeferredRevenue",
            "SalesTaxPayable",
            "OtherLiabilities",
            "SalesRevenue",
            "SalesDiscounts",
            "OtherRevenue",
            "OtherEquity",
            "BadDebt",
            "OtherExpenses"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "POSTAccountingPeriodResponseType": {
      "properties": {
        "id": {
          "description": "ID of the newly-created accounting period.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTAccountingPeriodType": {
      "example": {
        "endDate": "2016-06-30",
        "fiscalYear": 2016,
        "name": "Jun 2016",
        "notes": "optional notes here",
        "startDate": "2016-06-01"
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "endDate": {
          "description": "The end date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\".\n",
          "format": "date",
          "type": "string"
        },
        "fiscalYear": {
          "description": "Fiscal year of the accounting period in yyyy format, for example, \"2016\".\n",
          "type": "string"
        },
        "fiscal_quarter": {
          "description": "",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Name of the accounting period.\n\nAccounting period name must be unique. Maximum of 100 characters.\n",
          "type": "string"
        },
        "notes": {
          "description": "Notes about the accounting period.\n\nMaximum of 255 characters.\n",
          "type": "string"
        },
        "startDate": {
          "description": "The start date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\".\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "name",
        "startDate",
        "endDate",
        "fiscalYear"
      ],
      "type": "object"
    },
    "POSTAttachmentResponseType": {
      "properties": {
        "fileId": {
          "description": "ID to identify the attached file. Use this file ID with [Get files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) to download the file.\n",
          "type": "string"
        },
        "id": {
          "description": "Attachment id.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTAttachmentType": {
      "example": "curl\n--form \"file=@PODocument.pdf\" \\\n-X POST https://rest.zuora.com/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714",
      "properties": {
        "file": {
          "description": "The file to be attached. Must be multipart/form-data.\nThe maximum file size is 4 MB.\n\nFiles with the following extensions are supported: .pdf, .csv, .png, .xlsx, .xls, .doc, .docx, .msg, .jpg, .txt, .htm, .html, .eml, .pptx, .gif, .rtf, .xml, .jpeg, .log, .cls\n",
          "type": "string"
        }
      },
      "required": [
        "file"
      ],
      "type": "object"
    },
    "POSTBillingPreviewCreditMemoItem": {
      "properties": {
        "amount": {
          "description": "The amount of the charge. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.\n",
          "format": "decimal",
          "type": "string"
        },
        "chargeDate": {
          "description": "The date when the credit memo item is created.\n",
          "format": "date-time",
          "type": "string"
        },
        "chargeNumber": {
          "description": "Number of the charge.\n",
          "type": "string"
        },
        "chargeType": {
          "description": "The type of charge. \n\nPossible values are `OneTime`, `Recurring`, and `Usage`.\n",
          "type": "string"
        },
        "comment": {
          "description": "Comment of the credit memo item.\n",
          "type": "string"
        },
        "id": {
          "description": "Credit memo item id.\n",
          "type": "string"
        },
        "processingType": {
          "description": "Identifies the kind of charge. \n\nPossible values:\n* charge\n* discount\n* prepayment\n* tax\n",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of this item, in the configured unit of measure for the charge.\n",
          "format": "decimal",
          "type": "string"
        },
        "ratePlanChargeId": {
          "description": "Id of the rate plan charge associated with this item.\n",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "End date of the service period for this item, i.e., the last day of the service period, in yyyy-mm-dd format.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "Start date of the service period for this item, in yyyy-mm-dd format. If the charge is a one-time fee, this is the date of that charge.\n",
          "format": "date",
          "type": "string"
        },
        "sku": {
          "description": "Unique SKU for the product associated with this item.\n",
          "type": "string"
        },
        "skuName": {
          "description": "Name of the unique SKU for the product associated with this item.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "ID of the subscription associated with this item.\n",
          "type": "string"
        },
        "subscriptionNumber": {
          "description": "Name of the subscription associated with this item.\n",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Unit used to measure consumption.\n",
          "type": "string"
        }
      },
      "title": "creditMemoItems",
      "type": "object"
    },
    "POSTBillingPreviewInvoiceItem": {
      "properties": {
        "chargeAmount": {
          "description": "The amount of the charge. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.\n",
          "format": "decimal",
          "type": "string"
        },
        "chargeDate": {
          "description": "The date when the invoice item was created.\n",
          "format": "date-time",
          "type": "string"
        },
        "chargeDescription": {
          "description": "Description of the charge.\n",
          "type": "string"
        },
        "chargeId": {
          "description": "Id of the charge.\n",
          "type": "string"
        },
        "chargeName": {
          "description": "Name of the charge.\n",
          "type": "string"
        },
        "chargeNumber": {
          "description": "Number of the charge.\n",
          "type": "string"
        },
        "chargeType": {
          "description": "The type of charge. \n\nPossible values are `OneTime`, `Recurring`, and `Usage`.\n",
          "type": "string"
        },
        "id": {
          "description": "Invoice item ID.\n",
          "type": "string"
        },
        "processingType": {
          "description": "Identifies the kind of charge. \n\nPossible values:\n* charge\n* discount\n* prepayment\n* tax",
          "type": "string"
        },
        "productName": {
          "description": "Name of the product associated with this item.\n",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of this item, in the configured unit of measure for the charge.\n",
          "format": "decimal",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "End date of the service period for this item, i.e., the last day of the service period, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "Start date of the service period for this item, in `yyyy-mm-dd` format. If the charge is a one-time fee, this is the date of that charge.\n",
          "format": "date",
          "type": "string"
        },
        "subscriptionId": {
          "description": "ID of the subscription associated with this item.\n",
          "type": "string"
        },
        "subscriptionName": {
          "description": "Name of the subscription associated with this item.\n",
          "type": "string"
        },
        "subscriptionNumber": {
          "description": "Number of the subscription associated with this item.\n",
          "type": "string"
        },
        "taxAmount": {
          "description": "Tax applied to the charge.\n",
          "format": "decimal",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Unit used to measure consumption.\n",
          "type": "string"
        }
      },
      "title": "invoiceItems",
      "type": "object"
    },
    "POSTDecryptResponseType": {
      "properties": {
        "decryptedSignature": {
          "description": "The string of a list of the following items: Payment Pages 2.0 URL, tenant ID, timestamp,the Payment Page ID\n\nThe items are separated by '#', e.g., \"/apps/publichostedpagelite.do#12271#rvBp1AxBJwk6FrT7aqFuABIINiRbwJCc\n#1418848373103#2c92c0f948f899\"\n",
          "type": "string"
        },
        "publicKey": {
          "description": "The public key passed in as a request parameter.\n",
          "type": "string"
        },
        "signature": {
          "description": "The signature passed in as a request parameter.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTDecryptionType": {
      "example": {
        "method": "POST",
        "publicKey": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB",
        "signature": "BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA=="
      },
      "properties": {
        "method": {
          "description": "The type of the request. Set it to POST.\n",
          "type": "string"
        },
        "publicKey": {
          "description": "The public key generated by Zuora.\n",
          "type": "string"
        },
        "signature": {
          "description": "The signature generated by Zuora.\n",
          "type": "string"
        }
      },
      "required": [
        "method",
        "publicKey",
        "signature"
      ],
      "type": "object"
    },
    "POSTDistributionItemType": {
      "properties": {
        "accountingPeriodName": {
          "description": "Name of the accounting period. The open-ended accounting period is named `Open-Ended`. \n\nThe accounting period must be open.\n",
          "type": "string"
        },
        "newAmount": {
          "description": "Amount of revenue you want to distribute into the accounting period.\n\nThe value must be formatted based on the currency, for example, `JPY 30` or `USD 30.15`. If the value is formatted incorrectly, the following error message is returned: `Allocation amount with wrong decimal places.`\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "required": [
        "accountingPeriodName",
        "newAmount"
      ],
      "title": "revenueDistributions",
      "type": "object"
    },
    "POSTEmailBillingDocfromBillRunType": {
      "example": {
        "resend": "true"
      },
      "properties": {
        "resend": {
          "default": false,
          "description": "Whether to send out emails for all the billing documents that are associated with the bill run. If the value is `false`, emails are sent out only for the billing documents that never have emails sent out.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTEntityConnectionsResponseType": {
      "properties": {
        "id": {
          "description": "The ID of the connection that you just initiated.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTEntityConnectionsType": {
      "example": {
        "targetEntityId": "8a80825556ff28a4015708ba29312ecc"
      },
      "properties": {
        "targetEntityId": {
          "description": "The ID of the target entity that you want to connect with. You can get the entity Id using the Multi-entity: Get entities call.\n",
          "maxLength": 32,
          "type": "string"
        }
      },
      "required": [
        "targetEntityId"
      ],
      "type": "object"
    },
    "POSTHMACSignatureResponseType": {
      "properties": {
        "signature": {
          "description": "Contains a keyed-hash message authentication code (HMAC)\ne.g. `ZmI0ZjE2ZTMxMWY1YjA0ZTc4MTg1ZDhlYWRkMTEwNDE3M2RiMzNiNQ==<`\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "token": {
          "description": "Contains a token code. e.g. `gCH6gYqQffQCsFKSLuxyagXsuXcIK0uf`\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "POSTHMACSignatureType": {
      "example": {
        "accountKey": "A00000001",
        "method": "POST",
        "uri": "https://rest.zuora.com/v1/payment-methods/credit-cards"
      },
      "properties": {
        "accountKey": {
          "description": "Customer account number or ID.\n\nSpecifies this field only when creating signatures for Create payment method.\n",
          "type": "string"
        },
        "method": {
          "description": "Possible values are: 'GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'.\n",
          "type": "string"
        },
        "name": {
          "description": "Account name.\n\nSpecifies this field only when creating signatures for Create account.\n",
          "type": "string"
        },
        "pageId": {
          "description": "The page id of your Payment Pages 2.0 form. Click **Show Page Id** next to the Payment Page name in the Hosted Page List to retrieve the page id.\n\nSpecifies this field only when creating signatures for RSA Signatures.\n",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the API object the customer will make a CORS enabled call to.\ne.g. \"https://rest.zuora.com/v1/payment-methods/credit-cards\"\n",
          "type": "string"
        }
      },
      "required": [
        "uri",
        "method"
      ],
      "type": "object"
    },
    "POSTInvoiceCollectCreditMemosType": {
      "properties": {
        "id": {
          "description": "The ID of the credit memo.\n",
          "type": "string"
        },
        "memoAmount": {
          "description": "The amount of the credit memo.\n",
          "format": "decimal",
          "type": "string"
        },
        "memoNumber": {
          "description": "The unique identification number of the credit memo.\n",
          "type": "string"
        }
      },
      "title": "creditMemos",
      "type": "object"
    },
    "POSTInvoiceCollectInvoicesType": {
      "properties": {
        "invoiceAmount": {
          "description": "The amount of the invoice.\n",
          "format": "decimal",
          "type": "string"
        },
        "invoiceId": {
          "description": "The ID of the invoice.\n",
          "type": "string"
        },
        "invoiceNumber": {
          "description": "The unique identification number of the invoice.\n",
          "type": "string"
        }
      },
      "title": "invoices",
      "type": "object"
    },
    "POSTInvoiceCollectResponseType": {
      "properties": {
        "amountCollected": {
          "description": "Payment amount applied.\n",
          "format": "decimal",
          "type": "string"
        },
        "creditMemos": {
          "description": "Information on one or more credit memos associated with this operation.\n",
          "items": {
            "$ref": "#/definitions/POSTInvoiceCollectCreditMemosType"
          },
          "type": "array"
        },
        "invoices": {
          "description": "Information on one or more invoices associated with this operation.\n",
          "items": {
            "$ref": "#/definitions/POSTInvoiceCollectInvoicesType"
          },
          "type": "array"
        },
        "paymentId": {
          "description": "Payment ID.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTInvoiceCollectType": {
      "example": {
        "accountKey": "4028925a4cb74ec9014cb7520fc00005",
        "invoiceId": "4028925a4cb74ec9014cb7540988002e",
        "paymentGateway": "TestGateway"
      },
      "properties": {
        "accountKey": {
          "description": "Customer account ID or account number.\n",
          "type": "string"
        },
        "documentDate": {
          "description": "The date that should appear on the invoice and credit memo being generated,\nin `yyyy-mm-dd` format. If this field is omitted\nand `invoiceId` is not specified, the current date is used by default. \n\n\n**Note:** The credit memo is only available if you have the Advanced\nAR Settlement feature enabled.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `215.0` and later. To use this field in the method, you\nmust set the  `zuora-version` parameter to the minor version number in\nthe request header.\n",
          "format": "date",
          "type": "string"
        },
        "invoiceDate": {
          "description": "**Note:** This field has been replaced by the `documentDate` field in Zuora REST API version `215.0` and later. The\n`invoiceDate` field is only available for backward\ncompatibility.\n\nThe date that should appear on the invoice being generated,\nin `yyyy-mm-dd` format. If this field is omitted\nand `invoiceId` is not specified, the current date is used by default. \n\nThis field is in Zuora REST API version control. Supported minor\nversions are `214.0` and earlier.\n",
          "format": "date",
          "type": "string"
        },
        "invoiceId": {
          "description": "The ID of an existing invoice for which to collect payment using\nthe account's default payment method. If this value is specified, no new\ninvoice is generated, and the following fields are ignored:\n  - `invoiceDate` and `invoiceTargetDate` (if the Zuora REST API version is 214.0 or earlier)\n  - `documentDate` and `targetDate` (if the Zuora REST API version is 215.0 or later)\n",
          "type": "string"
        },
        "invoiceTargetDate": {
          "description": "**Note:** This field has been replaced by the `targetDate` field in Zuora REST API version `215.0` and later. The\n`invoiceTargetDate` field is only available for backward\ncompatibility.\n\n\nThe date through which to calculate charges on this account if an invoice is generated, in `yyyy-mm-dd` format. If this field is omitted\nand `invoiceId` is not specified, the current date is used by default. \n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `214.0` and earlier.  \n",
          "format": "date",
          "type": "string"
        },
        "paymentGateway": {
          "description": "The name of the gateway that will be used for the payment. Must be a valid gateway name and the gateway must support the specific payment method. If a value is not specified, the default gateway on the Account will be used.\n",
          "type": "string"
        },
        "targetDate": {
          "description": "The date through which to calculate charges on this account if an invoice or a credit memo is generated, \nin `yyyy-mm-dd` format. If this field is omitted\nand `invoiceId` is not specified, the current date is used by default. \n\n\n**Note:** The credit memo is only available if you have the Advanced\nAR Settlement feature enabled.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `215.0` and later. To use this field in the method, you\nmust set the  `zuora-version` parameter to the minor version number in\nthe request header.\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "accountKey"
      ],
      "type": "object"
    },
    "POSTJournalEntryItemType": {
      "properties": {
        "accountingCodeName": {
          "description": "Name of the accounting code.\n",
          "type": "string"
        },
        "accountingCodeType": {
          "description": "Accounting code type. This field is required if `accountingCodeName` is not unique.\n\nNote that `On-Account Receivable` is only available if you enable the Advanced AR Settlement feature. \n",
          "enum": [
            "AccountsReceivable",
            "On-Account Receivable",
            "Cash",
            "OtherAssets",
            "CustomerCashOnAccount",
            "DeferredRevenue",
            "SalesTaxPayable",
            "OtherLiabilities",
            "SalesRevenue",
            "SalesDiscounts",
            "OtherRevenue",
            "OtherEquity",
            "BadDebt",
            "OtherExpenses"
          ],
          "type": "string"
        },
        "amount": {
          "description": "Journal entry item amount in transaction currency.\n",
          "format": "decimal",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "homeCurrencyAmount": {
          "description": "Journal entry item amount in home currency.\n\nThis field is required if you have set your home currency for foreign currency conversion. Otherwise, do not pass this field.\n",
          "format": "decimal",
          "type": "string"
        },
        "type": {
          "description": "Type of journal entry item. ",
          "enum": [
            "Credit",
            "Debit"
          ],
          "type": "string"
        }
      },
      "required": [
        "accountingCodeName",
        "type",
        "amount"
      ],
      "title": "journalEntryItems",
      "type": "object"
    },
    "POSTJournalEntryResponseType": {
      "properties": {
        "journalEntryNumber": {
          "description": "Journal entry number in the format JE-00000001.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTJournalEntrySegmentType": {
      "properties": {
        "segmentName": {
          "description": "Name of segment.\n",
          "type": "string"
        },
        "segmentValue": {
          "description": "Value of segment in this summary journal entry.\n",
          "type": "string"
        }
      },
      "required": [
        "segmentName",
        "segmentValue"
      ],
      "title": "segments",
      "type": "object"
    },
    "POSTJournalEntryType": {
      "example": {
        "accountingPeriodName": "Nov-2014",
        "cf_pk1__c": "CreditCard",
        "cf_pk2__c": "John Smith",
        "cf_txt1__c": "1000001",
        "cf_txt2__c": "2014-11-01",
        "currency": "USD",
        "journalEntryDate": "2014-09-09",
        "journalEntryItems": [
          {
            "accountingCodeName": "Accounts Receivable",
            "accountingCodeType": "Deferred Revenue",
            "amount": "400.9",
            "homeCurrencyAmount": "801.8",
            "type": "Credit"
          },
          {
            "accountingCodeName": "Subscription Revenue",
            "accountingCodeType": "Sales Revenue",
            "amount": "400.9",
            "homeCurrencyAmount": "801.8",
            "type": "Debit"
          }
        ],
        "notes": "my account",
        "segments": [
          {
            "segmentName": "billToCountry",
            "segmentValue": "United States"
          },
          {
            "segmentName": "billToState",
            "segmentValue": "California"
          }
        ],
        "transferredToAccounting": "No"
      },
      "properties": {
        "accountingPeriodName": {
          "description": "Name of the accounting period. The open-ended accounting period is named `Open-Ended`.\n",
          "type": "string"
        },
        "currency": {
          "description": "The type of currency used. Currency must be active.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "journalEntryDate": {
          "description": "Date of the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "journalEntryItems": {
          "description": "Key name that represents the list of journal entry items.\n",
          "items": {
            "$ref": "#/definitions/POSTJournalEntryItemType"
          },
          "type": "array"
        },
        "notes": {
          "description": "The number associated with the revenue event.\n\nCharacter limit: 2,000\n",
          "type": "string"
        },
        "segments": {
          "description": "List of segments that apply to the summary journal entry.\n",
          "items": {
            "$ref": "#/definitions/POSTJournalEntrySegmentType"
          },
          "type": "array"
        },
        "transferredToAccounting": {
          "description": "Status shows whether the journal entry has been transferred to an accounting system.\n",
          "enum": [
            "No",
            "Processing",
            "Yes",
            "Error",
            "Ignore"
          ],
          "type": "string"
        }
      },
      "required": [
        "journalEntryDate",
        "accountingPeriodName",
        "currency",
        "journalEntryItems"
      ],
      "type": "object"
    },
    "POSTJournalRunResponseType": {
      "properties": {
        "journalRunNumber": {
          "description": "Journal run number.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTJournalRunTransactionType": {
      "properties": {
        "type": {
          "description": "Transaction type. Invoice Adjustment is deprecated on Production. Zuora recommends that you use the Invoice Item Adjustment instead.\n\nIf you enable the Advanced AR Settlement feature, Debit Memo Item, Credit Memo Item, and Credit Memo Application Item are available, Payment and Refund will be replaced by Payment Application and Refund Application. \n\nIf you enable both the Advanced AR Settlement feature and the Invoice Item Settlement feature, Payment and Refund will be replaced by Payment Application Item and Refund Application Item. \n",
          "enum": [
            "Invoice Item",
            "Taxation Item",
            "Invoice Item Adjustment (Invoice)",
            "Invoice Item Adjustment (tax)",
            "Invoice Adjustment",
            "Electronic Payment",
            "External Payment",
            "Electronic Refund",
            "External Refund",
            "Electronic Credit Balance Payment",
            "External Credit Balance Payment",
            "Electronic Credit Balance Refund",
            "External Credit Balance Refund",
            "Credit Balance Adjustment (Applied from Credit Balance)",
            "Credit Balance Adjustment (Transferred to Credit Balance)",
            "Revenue Event Item",
            "Debit Memo Item (Charge)",
            "Debit Memo Item (tax)",
            "Credit Memo Item (Charge)",
            "Credit Memo Item (tax)",
            "Credit Memo Application Item",
            "Electronic Payment Application",
            "External Payment Application",
            "Electronic Refund Application",
            "External Refund Application",
            "Electronic Payment Application Item",
            "External Payment Application Item",
            "Electronic Refund Application Item",
            "External Refund Application Item"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "transactionTypes",
      "type": "object"
    },
    "POSTJournalRunType": {
      "example": {
        "accountingPeriodName": "Nov-2014",
        "journalEntryDate": "2014-11-04",
        "transactionTypes": [
          {
            "type": "Invoice Item"
          },
          {
            "type": "Revenue Event Item"
          }
        ]
      },
      "properties": {
        "accountingPeriodName": {
          "description": "Name of the accounting period.\n\nThis field determines the target start and end dates of the journal run.\n\nRequired if you do not include `targetStartDate` and `targetEndDate`.\n",
          "type": "string"
        },
        "journalEntryDate": {
          "description": "Date of the journal entry.\n",
          "format": "date",
          "type": "string"
        },
        "targetEndDate": {
          "description": "The target end date of the journal run.\n\nIf you include `accountingPeriodName`, the `targetEndDate` must be empty or the same as the end date of the accounting period specified in `accountingPeriodName`.\n",
          "format": "date",
          "type": "string"
        },
        "targetStartDate": {
          "description": "The target start date of the journal run.\n\nRequired if you include targetEndDate.\n\nIf you include `accountingPeriodName`, the `targetStartDate` must be empty or the same as the start date of the accounting period specified in `accountingPeriodName`.\n",
          "format": "date",
          "type": "string"
        },
        "transactionTypes": {
          "description": "Transaction types included in the journal run.\n\nYou can include one or more transaction types.\n",
          "items": {
            "$ref": "#/definitions/POSTJournalRunTransactionType"
          },
          "type": "array"
        }
      },
      "required": [
        "transactionTypes",
        "journalEntryDate"
      ],
      "type": "object"
    },
    "POSTMassUpdateResponseType": {
      "properties": {
        "bulkKey": {
          "description": "String of 32 characters that identifies the mass action. The bulkKey is generated before the mass action is processed. You can use the bulkKey to Get the Mass Action Result.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTMassUpdateType": {
      "example": "curl\n-H \"apiAccessKeyId:Username\"\n-H \"apiSecretAccessKey:Password\"\n-H \"Accept:application/json\"\n--form \"file=@CreateRevenueSchedules.csv\"\n--form \"params={actionType:CreateRevenueSchedule}\"\n-X POST https://rest.zuora.com/v1/bulk",
      "properties": {
        "file": {
          "description": "File containing data about the mass action you want to perform. The file requirements are the same as when uploading a file through the Mass Updater on the Zuora UI.\n\nThe file must be a .csv file or a zipped .csv file. \n\nThe maximum file size is 4 MB.\n\nThe data in the file must be formatted according to the mass action type you want to perform. Refer to the articles listed in the `actionType` field below for the requirements of each mass action type.\n",
          "type": "string"
        },
        "params": {
          "description": "Container for the following fields. You must format the `params` field as a JSON object.\n",
          "properties": {
            "actionType": {
              "description": "Type of mass action you want to perform. The following mass actions are supported:\n- UpdateAccountingCode\n- CreateRevenueSchedule\n- UpdateRevenueSchedule\n- DeleteRevenueSchedule\n- ImportFXRate\n",
              "type": "string"
            },
            "checksum": {
              "description": "An MD5 checksum that is used to validate the integrity of the uploaded file. The checksum is a 32-character string.\n",
              "type": "string"
            }
          },
          "required": [
            "actionType"
          ],
          "type": "object"
        }
      },
      "required": [
        "file",
        "params"
      ],
      "type": "object"
    },
    "POSTMemoPdfResponse": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTPaymentMethodDecryption": {
      "example": {
        "accountID": "402891a25a02e11c015a02f3c6100003",
        "integrationType": "ApplePay",
        "merchantID": "merchant.CN.com.zuora.services416",
        "paymentToken": {
          "data": "xGc......JDxuYz1gug0KZRrGXJQ=",
          "header": {
            "ephemeralPublicKey": "MFkwEw......TMbLoojKBA==",
            "publicKeyHash": "HuLvfqvLon......9jEyX0w=",
            "transactionId": "abbadd18818baea1f37b40844c9e09afa9733b0eccb373905b811da43cf1753b"
          },
          "signature": "MIAGCSqGSIb......AEtrLSv7hE9gAAAAAAAA==",
          "version": "EC_v1"
        },
        "processPayment": false
      },
      "properties": {
        "accountID": {
          "description": "ID of the billing account on which the payment method will be created.\n",
          "type": "string"
        },
        "cardHolderInfo": {
          "description": "Container for cardholder information. If provided, Zuora will only use this information for this card.  If not provided, Zuora will use the account's existing bill-to contact information for this card.\n\n",
          "properties": {
            "addressLine1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "addressLine2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "cardHolderName": {
              "description": "The card holder's full name as it appears on the card, e.g., \"John J Smith\", 50 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country, must be a valid country name or abbreviation.\n",
              "type": "string"
            },
            "email": {
              "description": "Card holder's email address, 80 characters or less.\n",
              "type": "string"
            },
            "phone": {
              "description": "Phone number, 40 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State; must be a valid state name or 2-character abbreviation.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "integrationType": {
          "description": "Field to identify the token decryption type.\n\n**Note:** The only value at this time is ‘ApplePay’.\n\n",
          "type": "string"
        },
        "invoiceID": {
          "description": "The id of invoice this payment will apply to.\n\n**Note:** When processPayment is true, this field is required.\nOnly one invoice can be paid; for scenarios where you want to pay for multiple invoices, set processPayment to false and call payment API separately.\n",
          "type": "string"
        },
        "merchantID": {
          "description": "The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center.\n",
          "type": "string"
        },
        "paymentGateway": {
          "description": "The label name of the gateway instance configured in Zuora that should process the payment. When creating a Payment, this must be a valid gateway instance ID and this gateway must support the specific payment method. If not specified, the default gateway on the Account will be used.\n\n**Note:** When processPayment is true, this field is required.\n",
          "type": "string"
        },
        "paymentToken": {
          "description": "The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.\n\n",
          "type": "object"
        },
        "processPayment": {
          "description": "A boolean flag to control whether a payment should be processed after creating payment method. The payment amount will be equivalent to the amount the merchant supplied in the ApplePay session. Default is false.\nWhen processPayment is false, it must be followed by a separate subscribe or payment API call to transaction.\n",
          "type": "boolean"
        }
      },
      "required": [
        "accountID",
        "integrationType",
        "merchantID",
        "paymentToken"
      ],
      "type": "object"
    },
    "POSTPaymentMethodResponseDecryption": {
      "properties": {
        "amount": {
          "description": "The payment amount contained within the encrypted token.\n",
          "type": "string"
        },
        "paymentId": {
          "description": "The ID of newly processed payment,\n",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "ID of the newly-created payment method.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTPaymentMethodResponseType": {
      "properties": {
        "paymentMethodId": {
          "description": "ID of the newly-created payment method.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTPaymentMethodType": {
      "example": {
        "accountKey": "A00001115",
        "cardHolderInfo": {
          "addressLine1": "77 Fallon Glen",
          "addressLine2": "",
          "cardHolderName": "Bill Thiebault",
          "city": "Fremont",
          "country": "USA",
          "email": "bill@testaddress.com",
          "phone": "4155551234",
          "state": "California",
          "zipCode": "94020"
        },
        "creditCardNumber": "1111222233334444",
        "creditCardType": "Discover",
        "defaultPaymentMethod": false,
        "expirationMonth": "10",
        "expirationYear": "2015",
        "numConsecutiveFailures": 3,
        "securityCode": "123"
      },
      "properties": {
        "accountKey": {
          "description": "ID of the customer account to update.\n",
          "type": "string"
        },
        "cardHolderInfo": {
          "description": "Container for cardholder information. If provided, Zuora will only use this information for this card.  If not provided, Zuora will use the account's existing bill-to contact information for this card.\n",
          "properties": {
            "addressLine1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "addressLine2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "cardHolderName": {
              "description": "The card holder's full name as it appears on the card, e.g., \"John J Smith\", 50 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country, must be a valid country name or abbreviation.\n",
              "type": "string"
            },
            "email": {
              "description": "Card holder's email address, 80 characters or less.\n",
              "type": "string"
            },
            "phone": {
              "description": "Phone number, 40 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State; must be a valid state name or 2-character abbreviation.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "required": [
            "cardHolderName",
            "city",
            "state",
            "zipCode",
            "country"
          ],
          "type": "object"
        },
        "creditCardNumber": {
          "description": "Credit card number, a string of up to 16 characters. This field can only be set when creating a new payment method; it cannot be queried or updated.\n",
          "type": "string"
        },
        "creditCardType": {
          "description": "Possible values are: `Visa`, `MasterCard`, `AmericanExpress`, `Discover`.\n",
          "type": "string"
        },
        "defaultPaymentMethod": {
          "description": "Specify true to make this card the default payment method; otherwise, omit this parameter to keep the current default payment method.\n",
          "type": "boolean"
        },
        "expirationMonth": {
          "description": "Two-digit expiration month (01-12).\n",
          "type": "string"
        },
        "expirationYear": {
          "description": "Four-digit expiration year.\n",
          "type": "string"
        },
        "numConsecutiveFailures": {
          "description": "The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. \n",
          "format": "int32",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "securityCode": {
          "description": "The CVV or CVV2 security code for the credit card or debit card. Only required if changing expirationMonth, expirationYear, or cardHolderName. To ensure PCI compliance, this value isn't stored and can't be queried.\n\n",
          "type": "string"
        }
      },
      "required": [
        "accountKey",
        "creditCardType",
        "creditCardNumber",
        "expirationMonth",
        "expirationYear"
      ],
      "type": "object"
    },
    "POSTQuoteDocResponseType": {
      "properties": {
        "file": {
          "description": "URL of the generated quote document if the file was successfully generated.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTQuoteDocType": {
      "example": {
        "apiuser": "superadmin@zuora.com",
        "documentType": "pdf",
        "locale": "en_US",
        "quoteId": "a0Bi000000A71rp",
        "serverUrl": "https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX",
        "sessionId": "we764buuM03bkE0fmmc5zGMYp",
        "templateId": "4028925648fdb7830148fdc1246c0003",
        "useSFDCLocale": "1",
        "zquotesMajorVersion": "7",
        "zquotesMinorVersion": "0"
      },
      "properties": {
        "apiuser": {
          "description": "If not using Salesforce locale, this API Zuora user will be used to retrieve the locale from Zuora.\n",
          "type": "string"
        },
        "documentType": {
          "description": "Type of the document to generate: `PDF` or `DOC`.\n",
          "type": "string"
        },
        "locale": {
          "description": "Salesforce locale value to use.\n",
          "type": "string"
        },
        "password": {
          "description": "",
          "type": "string"
        },
        "quoteId": {
          "description": "｜ Id of the quote。",
          "type": "string"
        },
        "sandbox": {
          "description": "",
          "type": "string"
        },
        "serverUrl": {
          "description": "SOAP URL used to login to Salesforce to get data. You can get the value with the following code in a Visualforce page: `{!$Api.Partner_Server_URL_100}`\n",
          "type": "string"
        },
        "sessionId": {
          "description": "Salesforce session id used to log in to Salesforce to get data. You can get the value with the following code in a Visualforce page: *{!$Api.Session_ID}*\n",
          "type": "string"
        },
        "templateId": {
          "description": "Id of the quote template in Zuora.\n",
          "type": "string"
        },
        "token": {
          "description": "",
          "type": "string"
        },
        "useSFDCLocale": {
          "description": "If using Salesforce org locale, set this to a value that is not null.\n",
          "type": "string"
        },
        "username": {
          "description": "",
          "type": "string"
        },
        "zquotesMajorVersion": {
          "description": "The major version number of Zuora Quotes you are generating the quote document in.\nYou can use a quote template with hierarchy sizes bigger than 3 if this is set to 7 or higher.\n",
          "type": "string"
        },
        "zquotesMinorVersion": {
          "description": "The minor version number of Zuora Quotes you are generating the quote document in.\n",
          "type": "string"
        }
      },
      "required": [
        "documentType",
        "quoteId",
        "serverUrl",
        "templateId",
        "sessionId"
      ],
      "type": "object"
    },
    "POSTRSASignatureResponseType": {
      "properties": {
        "key": {
          "description": "Public key generated for this Payment Page.\n",
          "type": "string"
        },
        "signature": {
          "description": "Digital signature generated for this Payment Page.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "tenantId": {
          "description": "ID of the Zuora tenant.\n",
          "type": "string"
        },
        "token": {
          "description": "Token generated for this Payment Page.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "POSTRSASignatureType": {
      "example": {
        "method": "POST",
        "pageId": "2c92c0f855e2b4630155ec9e6a1b6eec",
        "uri": "https://apisandbox.zuora.com/apps/PublicHostedPageLite.do"
      },
      "properties": {
        "method": {
          "description": "The type of the request. Set it to POST.\n",
          "type": "string"
        },
        "pageId": {
          "description": "The page id of your Payment Pages 2.0 form. Click **Show Page Id** next to the Payment Page name in the Hosted Page List to retrieve the page id.\n",
          "type": "string"
        },
        "uri": {
          "description": "The URL that the Payment Page will be served from. Set it to:\n\n* https://www.zuora.com/apps/PublicHostedPageLite.do if you are on the production environment.\n* https://apisandbox.zuora.com/apps/PublicHostedPageLite.do if you are on the API Sandbox environmentdbox.zuora.com/apps/PublicHostedPageLite.do if you are on the API Sandbox environment.\n",
          "type": "string"
        }
      },
      "required": [
        "method",
        "pageId",
        "uri"
      ],
      "type": "object"
    },
    "POSTRevenueScheduleByChargeResponseType": {
      "properties": {
        "revenueScheduleNumber": {
          "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTRevenueScheduleByChargeType": {
      "example": {
        "amount": "300",
        "cf_phases__c": "Phase 1",
        "cf_project__c": "project A",
        "deferredRevenueAccountingCode": "Deferred Revenue",
        "deferredRevenueAccountingCodeType": "Deferred Revenue",
        "overrideChargeAccountingCodes": "true",
        "recognizedRevenueAccountingCode": "Subscription Revenue",
        "recognizedRevenueAccountingCodeType": "Sales Revenue",
        "referenceId": "rs transaction ref",
        "revenueDistributions": [
          {
            "accountingPeriodName": "Jan'2013",
            "newAmount": "100"
          },
          {
            "accountingPeriodName": "Feb'2013",
            "newAmount": "200"
          }
        ],
        "revenueEvent": {
          "cf_phases__c": "Phase 1",
          "cf_project__c": "project A",
          "eventType": "Revenue Distributed",
          "eventTypeSystemId": "1111111",
          "notes": "Manually distribute revenue by usage"
        },
        "revenueScheduleDate": "2013-01-01"
      },
      "properties": {
        "amount": {
          "description": "The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`\n",
          "format": "decimal",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "deferredRevenueAccountingCode": {
          "description": "The accounting code for deferred revenue, such as Monthly Recurring Liability. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.\n",
          "type": "string"
        },
        "deferredRevenueAccountingCodeType": {
          "description": "The type of the deferred revenue accounting code, such as Deferred Revenue. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n\nCharacter Limit: 2,000\n",
          "type": "string"
        },
        "overrideChargeAccountingCodes": {
          "default": false,
          "description": "When overriding accounting codes from a charge, `recognizedRevenueAccountingCode` and `deferredRevenue AccountingCode` must be in the request body and can have the empty value.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "recognizedRevenueAccountingCode": {
          "description": "The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, the value is ignored.\n",
          "type": "string"
        },
        "recognizedRevenueAccountingCodeType": {
          "description": "The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.\n\nCharacter Limit: 60\n",
          "type": "string"
        },
        "revenueDistributions": {
          "description": "An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.\n\nThe sum of the newAmount fields must be equal to the amount field.\n",
          "items": {
            "$ref": "#/definitions/POSTDistributionItemType"
          },
          "type": "array"
        },
        "revenueEvent": {
          "description": "Represents a change to a revenue schedule, such as posting an invoice or distributing revenue.\n",
          "properties": {
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "eventType": {
              "description": "Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
              "enum": [
                "Invoice Posted",
                "Invoice Item Adjustment Created",
                "Invoice Canceled",
                "Invoice Item Adjustment Canceled",
                "Revenue Distributed",
                "Credit Memo Posted",
                "Debit Memo Posted"
              ],
              "type": "string"
            },
            "eventTypeSystemId": {
              "description": "System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n",
              "type": "string"
            },
            "notes": {
              "description": "Additional information about this record.\n",
              "type": "string"
            }
          },
          "required": [
            "eventTypeSystemId",
            "eventType"
          ],
          "type": "object"
        },
        "revenueScheduleDate": {
          "description": "The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.\n\nThe date cannot be in a closed accounting period. The date must be in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "revenueScheduleDate"
      ],
      "type": "object"
    },
    "POSTRevenueScheduleByDateRangeType": {
      "example": {
        "distributionType": "Daily distribution",
        "notes": "Manually distribute revenue by usage",
        "recognitionEnd": "2016-12-31",
        "recognitionStart": "2016-12-1",
        "revenueEvent": {
          "eventType": "Revenue Distributed",
          "eventTypeSystemId": "RevenueDistributed__z",
          "notes": ""
        }
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "distributionType": {
          "description": "How you want to distribute the revenue. \n\n\n* Daily Distribution: Distributes revenue evenly across each day between the recognitionStart and recognitionEnd dates.\n* Monthly Distribution (Back Load): Back loads the revenue so you distribute the monthly amount in the partial month in the end only.\n* Monthly Distribution (Front Load): Front loads the revenue so you distribute the monthly amount in the partial month in the beginning only.\n* Monthly Distribution (Proration by Days): Splits the revenue amount between the two partial months.\n\n**Note:** To use any of the Monthly Distribution options, you must have the \"Monthly recognition over time\" model enabled in **Settings > Finance > Manage Revenue Recognition Models** in the Zuora UI.\n",
          "enum": [
            "Daily Distribution",
            "Monthly Distribution (Back Load)",
            "Monthly Distribution (Front Load)",
            "Monthly Distribution (Proration by Days)"
          ],
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "recognitionEnd": {
          "description": "The end date of a recognition period in `yyyy-mm-dd` format. \n\nThe maximum difference between the `recognitionStart` and `recognitionEnd` date fields is equal to 250 multiplied by the length of an accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "recognitionStart": {
          "description": "The start date of a recognition period in `yyyy-mm-dd` format.\n\nIf there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "revenueEvent": {
          "description": "Must specify at least one of `eventType` or `eventTypeSystemId`.\n",
          "properties": {
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "eventType": {
              "description": "Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
              "enum": [
                "Invoice Posted",
                "Invoice Item Adjustment Created",
                "Invoice Canceled",
                "Invoice Item Adjustment Canceled",
                "Revenue Distributed",
                "Credit Memo Posted",
                "Debit Memo Posted"
              ],
              "type": "string"
            },
            "eventTypeSystemId": {
              "description": "System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nRequired only if there is more than one revenue event type with the same label.\n",
              "type": "string"
            },
            "notes": {
              "description": "",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "recognitionEnd",
        "recognitionStart",
        "revenueEvent"
      ],
      "type": "object"
    },
    "POSTRevenueScheduleByTransactionRatablyType": {
      "example": {
        "application/json": {
          "distributionType": "daily distribution",
          "notes": "notes",
          "recognitionEnd": "2016-12-31",
          "recognitionStart": "2016-01-01",
          "revenueEvent": {
            "eventType": "Credit Memo Posted | Debit Memo Posted",
            "eventTypeSystemId": "CreditMemoPosted__z | DebitMemoPosted__z",
            "notes": "some notes"
          }
        }
      },
      "properties": {
        "customFieldsValues": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "distributionType": {
          "description": "How you want to distribute the revenue.\n\n* Daily Distribution: Distributes revenue evenly across each day between the recognitionStart and recognitionEnd dates.\n* Monthly Distribution (Back Load): Back loads the revenue so you distribute the monthly amount in the partial month in the end only.\n* Monthly Distribution (Front Load): Front loads the revenue so you distribute the monthly amount in the partial month in the beginning only.\n* Monthly Distribution (Proration by Days): Splits the revenue amount between the two partial months.\n\n**Note:** To use any of the Monthly Distribution options, you must have the \"Monthly recognition over time\" model enabled in **Settings > Finance > Manage Revenue Recognition Models** in the Zuora UI.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "recognitionEnd": {
          "description": "The end date of a recognition period in `yyyy-mm-dd` format.\n\nThe maximum difference between the `recognitionStart` and `recognitionEnd` date fields is equal to 250 multiplied by the length of an accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "recognitionStart": {
          "description": "The start date of a recognition period in `yyyy-mm-dd` format.\n\nIf there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "revenueEvent": {
          "description": "Must specify at least one of `eventType` or `eventTypeSystemId`.\n",
          "properties": {
            "customFieldsValues": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "eventType": {
              "description": "The label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "eventTypeSystemId": {
              "description": "System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nRequired only if there is more than one revenue event type with the same label.\n",
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "notes": {
              "description": "Additional information about the revenue event.\n",
              "maxLength": 2000,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "recognitionEnd",
        "recognitionStart"
      ],
      "type": "object"
    },
    "POSTRevenueScheduleByTransactionResponseType": {
      "properties": {
        "revenueScheduleNumber": {
          "description": "Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "POSTRevenueScheduleByTransactionType": {
      "example": {
        "revenueDistributions": [
          {
            "accountingPeriodName": "Jan '16",
            "newAmount": "20"
          },
          {
            "accountingPeriodName": "Open-Ended",
            "newAmount": "30"
          }
        ],
        "revenueEvent": {
          "eventType": "Revenue Distributed",
          "eventTypeSystemId": "RevenueDistributed__z",
          "notes": "My notes"
        }
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n\nCharacter Limit: 2,000\n",
          "type": "string"
        },
        "revenueDistributions": {
          "description": "An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.\n\nThe sum of new Amounts must equal the the Charge Amount of the specified Invoice Item.\n",
          "items": {
            "$ref": "#/definitions/POSTDistributionItemType"
          },
          "type": "array"
        },
        "revenueEvent": {
          "description": "Represents a change to a revenue schedule, such as posting an invoice or distributing revenue.\n\nYou must specify the `eventType` or the `eventTypeSystemID`, or both. If you have configured more than one revenue event type with the same label, you must specify the `eventTypeSystemId`.\n",
          "properties": {
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "eventType": {
              "description": "Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
              "enum": [
                "Invoice Posted",
                "Invoice Item Adjustment Created",
                "Invoice Canceled",
                "Invoice Item Adjustment Canceled",
                "Revenue Distributed",
                "Credit Memo Posted",
                "Debit Memo Posted"
              ],
              "type": "string"
            },
            "eventTypeSystemId": {
              "description": "System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nRequired only if there is more than one revenue event type with the same label.\n",
              "type": "string"
            },
            "notes": {
              "description": "Additional information about this record.\n",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "POSTScCreateType": {
      "properties": {
        "applyDiscountTo": {
          "description": "Specifies the type of charges that you want a specific discount to apply to.\n\nValues:\n\n* `ONETIME`\n* `RECURRING`\n* `USAGE`\n* `ONETIMERECURRING`\n* `ONETIMEUSAGE`\n* `RECURRINGUSAGE`\n* `ONETIMERECURRINGUSAGE`\n",
          "type": "string"
        },
        "billCycleDay": {
          "description": "Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month the customer is billed.\n\nValues: `1`-`31`\n",
          "type": "string"
        },
        "billCycleType": {
          "description": "Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayOfMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayOfWeek`, set the `weeklyBillCycleDay` field.\n\nValues:\n\n* `DefaultFromCustomer`\n* `SpecificDayOfMonth`\n* `SubscriptionStartDay`\n* `ChargeTriggerDay`\n* `SpecificDayOfWeek`\n",
          "type": "string"
        },
        "billingPeriod": {
          "description": "Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).\n\nValues:\n\n* `Month`\n* `Quarter`\n* `Semi_Annual`\n* `Annual`\n* `Eighteen_Months`\n* `Two_Years`\n* `Three_Years`\n* `Five_Years`\n* `Specific_Months`\n* `Subscription_Term`\n* `Week`\n* `Specific_Weeks`\n",
          "type": "string"
        },
        "billingPeriodAlignment": {
          "description": "Aligns charges within the same subscription if multiple charges begin on different dates.\n\nValues:\n\n* `AlignToCharge`\n* `AlignToSubscriptionStart`\n* `AlignToTermStart`\n",
          "type": "string"
        },
        "billingTiming": {
          "description": "Billing timing for the charge for recurring charge types. Not avaliable for one time, usage, and discount charges.\n\nValues:\n\n* `IN_ADVANCE` (default)\n* `IN_ARREARS`\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "description": {
          "description": "Description of the charge.\n",
          "type": "string"
        },
        "discountAmount": {
          "description": "Specifies the amount of fixed-amount discount.\n",
          "format": "decimal",
          "type": "string"
        },
        "discountLevel": {
          "description": "Specifies if the discount applies to the product rate plan only, the entire subscription, or to any activity in the account.\n\nValues:\n\n* `rateplan`\n* `subscription`\n* `account`\n",
          "type": "string"
        },
        "discountPercentage": {
          "description": "Percentage of discount for a percentage discount. \n",
          "format": "decimal",
          "type": "string"
        },
        "endDateCondition": {
          "description": "Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.\n\nValues:\n\n* `Subscription_End`\n* `Fixed_Period`\n* `Specific_End_Date`\n",
          "type": "string"
        },
        "includedUnits": {
          "description": "Specifies the number of units in the base set of units for this charge. Must be >=`0`.\n",
          "format": "decimal",
          "type": "string"
        },
        "listPriceBase": {
          "description": "The list price base for the product rate plan charge.\n\nValues:\n\n* `Per_Billing_Period`\n* `Per_Month`\n* `Per_Week`\n",
          "type": "string"
        },
        "number": {
          "description": "Unique number that identifies the charge. Max 50 characters. System-generated if not provided.\n",
          "type": "string"
        },
        "numberOfPeriods": {
          "description": "Specifies the number of periods to use when calculating charges in an overage smoothing charge model.\n",
          "format": "int64",
          "type": "integer"
        },
        "overagePrice": {
          "description": "Price for units over the allowed amount.\n",
          "format": "decimal",
          "type": "string"
        },
        "overageUnusedUnitsCreditOption": {
          "description": "Determines whether to credit the customer with unused units of usage.\n\nValues:\n\n* `NoCredit`\n* `CreditBySpecificRate`\n",
          "type": "string"
        },
        "price": {
          "description": "Price for units in the subscription rate plan.\n",
          "format": "decimal",
          "type": "string"
        },
        "priceChangeOption": {
          "description": "Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field.\nValues:\n\n* `NoChange` (default)\n* `SpecificPercentageValue`\n* `UseLatestProductCatalogPricing`\n",
          "type": "string"
        },
        "priceIncreasePercentage": {
          "description": "Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`. \n\nValue must be a decimal between `-100` and `100`.\n",
          "format": "decimal",
          "type": "string"
        },
        "productRatePlanChargeId": {
          "description": "ID of a product rate-plan charge for this subscription.\n",
          "type": "string"
        },
        "quantity": {
          "description": "Number of units. Must be a decimal >=`0`.\n",
          "format": "decimal",
          "type": "string"
        },
        "ratingGroup": {
          "description": "Specifies a rating group based on which usage records are rated. **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nValues:\n\n* `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.       \n* `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. \n* `ByUsageRecord`: The rating is based on each usage record.\n* `ByUsageUpload`: The rating is based on all the usages in a uploaded usage file (.xls or .csv).\n\n**Note:**\n\nThe `ByBillingPeriod` value can be applied for all charge models.\nThe `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.\nUse this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.\n",
          "type": "string"
        },
        "specificBillingPeriod": {
          "description": "Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`.\n",
          "format": "int64",
          "type": "integer"
        },
        "specificEndDate": {
          "description": "Defines when the charge ends after the charge trigger date.\n\n**note:**\n\n* This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.\n\n* If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.\n",
          "format": "date",
          "type": "string"
        },
        "tiers": {
          "description": "Container for Volume, Tiered, or Tiered with Overage charge models. Supports the following charge types:\n\n* One-time\n* Recurring\n* Usage-based\n",
          "items": {
            "$ref": "#/definitions/POSTTierType"
          },
          "type": "array"
        },
        "triggerDate": {
          "description": "Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to `USD`.\n",
          "format": "date",
          "type": "string"
        },
        "triggerEvent": {
          "description": "Specifies when to start billing the customer for the charge.\n\nValues:\n\n* `UCE`\n* `USA`\n* `UCA`\n* `USD`\n",
          "type": "string"
        },
        "unusedUnitsCreditRates": {
          "description": "Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`.\n",
          "format": "decimal",
          "type": "string"
        },
        "upToPeriods": {
          "description": "Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.\n\n**Note:** You must use this field together with the `upToPeriodsType` field to specify the time period.\n\n* This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. \n* If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.\n",
          "format": "int64",
          "type": "integer"
        },
        "upToPeriodsType": {
          "description": "\nThe period type used to define when the charge ends. \n\nValues:\n\n* `Billing_Periods`\n* `Days`\n* `Weeks`\n* `Months`\n* `Years`\n\nYou must use this field together with the `upToPeriods` field to specify the time period.\n\nThis field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. \n",
          "type": "string"
        },
        "weeklyBillCycleDay": {
          "description": "Specifies which day of the week is the bill cycle day (BCD) for the charge. \n\nValues:\n\n* `Sunday`\n* `Monday`\n* `Tuesday`\n* `Wednesday`\n* `Thursday`\n* `Friday`\n* `Saturday`\n",
          "type": "string"
        }
      },
      "required": [
        "productRatePlanChargeId",
        "quantity"
      ],
      "title": "chargeOverrides",
      "type": "object"
    },
    "POSTSrpCreateType": {
      "properties": {
        "chargeOverrides": {
          "description": "This optional container is used to override the quantity of one or more product rate plan charges for this subscription.\n",
          "items": {
            "$ref": "#/definitions/POSTScCreateType"
          },
          "type": "array"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "productRatePlanId": {
          "description": "ID of a product rate plan for this subscription.\n",
          "type": "string"
        }
      },
      "required": [
        "productRatePlanId"
      ],
      "title": "subscribeToRatePlans",
      "type": "object"
    },
    "POSTSubscriptionCancellationResponseType": {
      "properties": {
        "cancelledDate": {
          "description": "The date that the subscription was canceled.\n",
          "format": "date",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The credit memo ID, if a credit memo is generated during the subscription process.\n\n**Note:** This field is only available if you have the Advanced AR Settlements feature enabled.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "ID of the invoice, if one is generated.\n",
          "type": "string"
        },
        "paidAmount": {
          "description": "Amount paid.\n",
          "format": "decimal",
          "type": "string"
        },
        "paymentId": {
          "description": "ID of the payment, if a payment is collected.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The subscription ID.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "totalDeltaMrr": {
          "description": "Change in the subscription monthly recurring revenue as a result of the update.\n",
          "format": "decimal",
          "type": "string"
        },
        "totalDeltaTcv": {
          "description": "Change in the total contracted value of the subscription as a result of the update.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "POSTSubscriptionCancellationType": {
      "example": {
        "cancellationEffectiveDate": "2019-05-31",
        "cancellationPolicy": "SpecificDate",
        "collect": false,
        "runBilling": true
      },
      "properties": {
        "OpportunityCloseDate_QT": {
          "description": "The closing date of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "OpportunityName_QT": {
          "description": "The unique identifier of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteBusinessType_QT": {
          "description": "The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal, or Churn. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteNumber_QT": {
          "description": "The unique identifier of the Quote. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteType_QT": {
          "description": "The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is populated when the subscription originates from Zuora Quotes.\n\n",
          "type": "string"
        },
        "applyCreditBalance": {
          "description": "Applies a credit balance to an invoice.\n\nIf the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.\n\n\nTo view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.\n\nPrerequisite: `invoice` must be `true`. \n\n**Note:** \n  - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.\n  - This field is deprecated if you have the Advanced AR Settlement feature enabled.\n",
          "type": "boolean"
        },
        "cancellationEffectiveDate": {
          "description": "Date the cancellation takes effect, in the format yyyy-mm-dd.  Use only if `cancellationPolicy` is `SpecificDate`. Should not be earlier than the subscription contract-effective date, later than the subscription term-end date, or within a period for which the customer has been invoiced.\n",
          "format": "date",
          "type": "string"
        },
        "cancellationPolicy": {
          "description": "Cancellation method. Possible values are: `EndOfCurrentTerm`, `EndOfLastInvoicePeriod`, `SpecificDate`. If using `SpecificDate`, the `cancellationEffectiveDate` field is required.\n",
          "type": "string"
        },
        "collect": {
          "description": "Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.\n\nIf the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.\n\nThe default value is `false`.\n\nThis field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header. \n\nPrerequisite: `invoice` must be `true`. \n",
          "type": "boolean"
        },
        "invoice": {
          "description": "**Note:** This field has been replaced by the `runBilling` field. The\n`invoice` field is only available for backward compatibility.\n\n\nCreates an invoice for a subscription. The invoice generated in this\noperation is only for this subscription, not for the entire customer\naccount.\n\n\nIf the value is `true`, an invoice is created. If the value is\n`false`, no action is taken. The default value is `false`. \n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `196.0` and `207.0`. To use this field in the method, you\nmust set the zuora-version parameter to the minor version number in\nthe request header. \n",
          "type": "boolean"
        },
        "invoiceCollect": {
          "description": "This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.\n\nIf `true`, an invoice is generated and payment automatically collected. Default is `false`.\n\nThis field is in Zuora REST API version control. Supported minor versions are `186.0`, `187.0`, `188.0`, `189.0`, and `196.0`.\n",
          "type": "boolean"
        },
        "invoiceTargetDate": {
          "description": "**Note:** This field has been replaced by the `targetDate` field. The\n`invoiceTargetDate` field is only available for backward\ncompatibility.\n\n\nDate through which to calculate charges if an invoice is generated, as\nyyyy-mm-dd. Default is current date.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `207.0` and earlier.  \n",
          "format": "date",
          "type": "string"
        },
        "runBilling": {
          "default": false,
          "description": "Creates an invoice for a subscription. If you have the Advanced AR Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  \n\n\nThe billing documents generated\nin this operation is only for this subscription, not for the entire\ncustomer account.\n\n\nPossible values:\n\n- `true`: An invoice is created. If you have the Advanced AR\nSettlement feature enabled, a credit memo might also be created.\n\n\n- `false`: No invoice is created.\n\n\n**Note:** This field is in Zuora REST API version control. Supported\nminor versions are `211.0` or later. To use this field in the method,\nyou must set the `zuora-version` parameter to the minor version number\nin the request header.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice or a credit memo is generated, as\nyyyy-mm-dd. Default is current date.\n\n\n**Note:** The credit memo is only available if you have the Avdanced\nAR Settlement feature enabled.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `211.0` and later. To use this field in the method, you\nmust set the  `zuora-version` parameter to the minor version number in\nthe request header.\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "cancellationPolicy",
        "invoiceCollect"
      ],
      "type": "object"
    },
    "POSTSubscriptionPreviewCreditMemoItemsType": {
      "properties": {
        "chargeAmount": {
          "description": "The amount of this credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "chargeDescription": {
          "description": "Description of this credit memo item.\n",
          "type": "string"
        },
        "chargeName": {
          "description": "Name of this credit memo item.\n",
          "type": "string"
        },
        "productName": {
          "description": "Name of the product associated with this credit memo item.\n",
          "type": "string"
        },
        "productRatePlanChargeId": {
          "description": "ID of the product rate plan charge associated with this credit memo item.\n",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of the charge associated with this credit memo item.\n",
          "type": "integer"
        },
        "serviceEndDate": {
          "description": "End date of the service period for this credit memo item, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "Service start date of this credit memo item, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Unit used to measure consumption.",
          "type": "string"
        }
      },
      "title": "creditMemoItems",
      "type": "object"
    },
    "POSTSubscriptionPreviewInvoiceItemsType": {
      "properties": {
        "chargeAmount": {
          "description": "The amount of the charge. This amount doesn't include taxes unless the charge's tax mode is inclusive.\n",
          "format": "decimal",
          "type": "string"
        },
        "chargeDescription": {
          "description": "Description of the charge.\n",
          "type": "string"
        },
        "chargeName": {
          "description": "Name of the charge.\n",
          "type": "string"
        },
        "productName": {
          "description": "Name of the product associated with this item.\n",
          "type": "string"
        },
        "productRatePlanChargeId": {
          "description": "ID of the product rate plan charge.\n",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of this item.\n",
          "format": "decimal",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "End date of the service period for this item, i.e., the last day of the period, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "Service start date as yyyy-mm-dd. If the charge is a one-time fee, this is the date of that charge.\n",
          "format": "date",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "",
          "type": "string"
        }
      },
      "title": "invoiceItems",
      "type": "object"
    },
    "POSTSubscriptionPreviewResponseType": {
      "properties": {
        "amount": {
          "description": "Invoice amount.\n",
          "format": "decimal",
          "type": "string"
        },
        "amountWithoutTax": {
          "description": "Invoice amount minus tax.\n",
          "format": "decimal",
          "type": "string"
        },
        "chargeMetrics": {
          "description": "Container for charge metrics.\n",
          "properties": {
            "dmrr": {
              "description": "Change in monthly recurring revenue.\n",
              "type": "string"
            },
            "dtcv": {
              "description": "Change in total contract value.\n",
              "type": "string"
            },
            "mrr": {
              "description": "Monthly recurring revenue.\n",
              "type": "string"
            },
            "number": {
              "description": "The charge number of the subscription. Only available for update subscription.\n",
              "type": "string"
            },
            "originRatePlanId": {
              "description": "The origin rate plan ID. Only available for update subscription.\n",
              "type": "string"
            },
            "originalId": {
              "description": "The original rate plan charge ID. Only available for update subscription.\n",
              "type": "string"
            },
            "productRatePlanChargeId": {
              "description": "The product rate plan charge ID.\n",
              "type": "string"
            },
            "productRatePlanId": {
              "description": "The product rate plan ID.\n",
              "type": "string"
            },
            "tcv": {
              "description": "Total contract value.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "contractedMrr": {
          "description": "Monthly recurring revenue of the subscription.\n",
          "format": "decimal",
          "type": "string"
        },
        "creditMemo": {
          "description": "\nContainer for credit memos.\n\n**Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n",
          "properties": {
            "amount": {
              "description": "Credit memo amount.",
              "format": "double",
              "type": "number"
            },
            "amountWithoutTax": {
              "description": "Credit memo amount minus tax.",
              "format": "double",
              "type": "number"
            },
            "creditMemoItems": {
              "description": "",
              "items": {
                "$ref": "#/definitions/POSTSubscriptionPreviewCreditMemoItemsType"
              },
              "type": "array"
            },
            "taxAmount": {
              "description": "Tax amount on the credit memo.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "invoice": {
          "description": "Container for invoices.\n\n\n **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. Also, the response structure is changed and the following invoice related response fields are moved to this **invoice** container:\n  \n   * amount\n   * amountWithoutTax\n   * taxAmount\n   * invoiceItems\n   * targetDate\n   * chargeMetrics\n   \n",
          "type": "object"
        },
        "invoiceItems": {
          "description": "Container for invoice items.\n",
          "items": {
            "$ref": "#/definitions/POSTSubscriptionPreviewInvoiceItemsType"
          },
          "type": "array"
        },
        "invoiceTargetDate": {
          "description": "Date through which charges are calculated on the invoice, as yyyy-mm-dd.\n\n**Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "format": "date",
          "type": "string"
        },
        "previewChargeMetricsResponse": {
          "description": "",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.\n\n**Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "format": "date",
          "type": "string"
        },
        "taxAmount": {
          "description": "Tax amount on the invoice.\n",
          "format": "decimal",
          "type": "string"
        },
        "totalContractedValue": {
          "description": "Total contracted value of the subscription.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "POSTSubscriptionPreviewType": {
      "example": {
        "contractEffectiveDate": "2013-1-15",
        "initialTerm": 12,
        "initialTermPeriodType": "Week",
        "invoiceTargetDate": "2013-12-31",
        "previewAccountInfo": {
          "billCycleDay": 31,
          "billToContact": {
            "city": "Walnut Creek",
            "country": "United States",
            "county": "Contra Consta",
            "state": "California",
            "zipCode": "94549"
          },
          "currency": "USD"
        },
        "subscribeToRatePlans": [
          {
            "chargeOverrides": [
              {
                "productRatePlanChargeId": "ff8080811ca15d19011cddad8c953b53",
                "quantity": 100
              }
            ],
            "productRatePlanId": "ff8080811ca15d19011cdda9b0ad3b51"
          }
        ],
        "termType": "TERMED"
      },
      "properties": {
        "OpportunityCloseDate_QT": {
          "description": "The closing date of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "OpportunityName_QT": {
          "description": "The unique identifier of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteBusinessType_QT": {
          "description": "The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal, or Churn. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteNumber_QT": {
          "description": "The unique identifier of the Quote. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteType_QT": {
          "description": "The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "accountKey": {
          "description": "\nCustomer account number or ID.\n\nYou must specify the account information either in this field or in the `previewAccountInfo` field with the following conditions:\n         \n* If you already have a customer account, specify the account number or ID in this field.\n* If you do not have a customer account, provide account information in the `previewAccountInfo` field.\n",
          "type": "string"
        },
        "contractEffectiveDate": {
          "description": "Effective contract date for this subscription, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "customerAcceptanceDate": {
          "description": "The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.\n\nDefault value is dependent on the value of other fields. See **Notes** section for more details.\n",
          "format": "date",
          "type": "string"
        },
        "includeExistingDraftDocItems": {
          "description": "Specifies whether to include draft invoice items in subscription previews.\nValues are:\n\n* `true` (default). Includes draft invoice items in the preview result.\n* `false`. Excludes draft invoice items in the preview result.\n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "type": "boolean"
        },
        "includeExistingDraftInvoiceItems": {
          "description": "Specifies whether to include draft invoice items in previews.\nValues are:\n\n* `true` (default). Includes draft invoice items in the preview result.\n* `false`. Excludes draft invoice items in the preview result.\n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "type": "boolean"
        },
        "initialTerm": {
          "description": "Duration of the first term of the subscription, in whole months. Default is `0`. If `termType` is `TERMED`, then this field is required, and the value must be greater than `0`. If `termType` is `EVERGREEN`, this field is ignored.\n",
          "format": "int64",
          "type": "integer"
        },
        "initialTermPeriodType": {
          "description": "The period type of the initial term. \n\nSupported values are:\n\n* `Month`\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "invoiceOwnerAccountKey": {
          "description": "Invoice owner account number or ID.\n\n**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "type": "string"
        },
        "invoiceTargetDate": {
          "description": "Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.\n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "format": "date",
          "type": "string"
        },
        "notes": {
          "description": "String of up to 500 characters.",
          "type": "string"
        },
        "previewAccountInfo": {
          "description": "A container for providing a customer account information if you do not have an existing customer account. This customer account information is only used for subscription preview.\n\nYou must specify the account information either in this field or in the `accountKey` field with the following conditions:\n\n* If you already have a customer account, specify the account number or ID in the accountKey field.\n* If you do not have a customer account, provide account information in this field.\n",
          "properties": {
            "billCycleDay": {
              "description": "The account's bill cycle day (BCD), when bill runs generate invoices for the account. Specify any day of the month (`1`-`31`, where `31` = end-of-month), or `0` for auto-set.\n",
              "format": "int64",
              "type": "integer"
            },
            "billToContact": {
              "description": "Container for bill-to contact information of this account.\n",
              "properties": {
                "city": {
                  "description": "The city of the bill-to address. The value should be 40 characters or less.\n",
                  "type": "string"
                },
                "country": {
                  "description": "The country of the bill-to address. The value must be a valid country name or abbreviation.\n\n**Note:** You must specify this field if you are using Zuora Tax for this account.\n",
                  "type": "string"
                },
                "county": {
                  "description": "The county of the bill-to address. The value should be 32 characters or less.\n",
                  "type": "string"
                },
                "state": {
                  "description": "The state of the bill-to address. The value must be a valid state or province name or 2-character abbreviation.\n\n**Note:** You must specify this field if you are using Zuora Tax for this account and the country is `USA` or `Canada`.\n",
                  "type": "string"
                },
                "taxRegion": {
                  "description": "If using Zuora Tax, a region string as optionally defined in your tax rules.\n",
                  "type": "string"
                },
                "zipCode": {
                  "description": "The zip code of the bill-to address. The value should be 20 characters or less.\n",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "currency": {
              "description": "A currency as defined in Billing Settings.\n",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            }
          },
          "required": [
            "billCycleDay",
            "billToContact",
            "currency"
          ],
          "type": "object"
        },
        "previewType": {
          "description": "The type of preview you will receive. \n\nThis field is in Zuora REST API version control. The supported values of this field depend on the REST API minor version you specified in the request header.\n\n\n* If you do not specify the REST API minor version or specify the minor version number to one of following values in the request header:\n \n  * 186.0\n  * 187.0\n  * 188.0\n  * 189.0\n  * 196.0 \n  \n  The following values are supported in the **previewType** field:\n\n  * InvoiceItem\n  * ChargeMetrics\n  * InvoiceItemChargeMetrics\n  \n  The default value is InvoiceItem.\n\n* If you specify the REST API minor version to 207.0 or later in the request header, the following values are supported in the **previewType** field:\n\n  - LegalDoc\n  - ChargeMetrics\n  - LegalDocChargeMetrics\n\n  The default value is LegalDoc.\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "type": "string"
        },
        "serviceActivationDate": {
          "description": "The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.\n\nDefault value is dependent on the value of other fields. See **Notes** section for more details.\n",
          "format": "date",
          "type": "string"
        },
        "subscribeToRatePlans": {
          "description": "Container for one or more rate plans for this subscription.\n",
          "items": {
            "$ref": "#/definitions/POSTSrpCreateType"
          },
          "type": "array"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.\n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "format": "date",
          "type": "string"
        },
        "termStartDate": {
          "description": "The date on which the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date.\n",
          "format": "date",
          "type": "string"
        },
        "termType": {
          "description": "Possible values are: `TERMED`, `EVERGREEN`.\n",
          "type": "string"
        }
      },
      "required": [
        "termType",
        "contractEffectiveDate",
        "subscribeToRatePlans"
      ],
      "type": "object"
    },
    "POSTSubscriptionResponseType": {
      "properties": {
        "contractedMrr": {
          "description": "Monthly recurring revenue of the subscription.\n",
          "format": "decimal",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The credit memo ID, if a credit memo is generated during the subscription process.\n\n**Note:** This field is only available if you have the Advanced AR Settlements feature enabled.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "Invoice ID, if an invoice is generated during the subscription process.\n",
          "type": "string"
        },
        "paidAmount": {
          "description": "Payment amount, if a payment is collected.\n",
          "format": "decimal",
          "type": "string"
        },
        "paymentId": {
          "description": "Payment ID, if a payment is collected.\n",
          "type": "string"
        },
        "subscriptionId": {
          "description": "",
          "type": "string"
        },
        "subscriptionNumber": {
          "description": "",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "totalContractedValue": {
          "description": "Total contracted value of the subscription.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "POSTSubscriptionType": {
      "example": {
        "accountKey": "A00001115",
        "autoRenew": true,
        "collect": false,
        "contractEffectiveDate": "2015-02-1",
        "initialTerm": "12",
        "initialTermPeriodType": "Week",
        "myCustomField__c": "test",
        "notes": "Test POST subscription from z-ruby-sdk",
        "renewalTerm": "3",
        "renewalTermPeriodType": "Week",
        "runBilling": true,
        "subscribeToRatePlans": [
          {
            "chargeOverrides": [
              {
                "billCycleDay": "5",
                "billCycleType": "SpecificDayofMonth",
                "billingPeriodAlignment": "AlignToCharge",
                "billingTiming": "IN_ARREARS",
                "description": "This is rate plan charge description",
                "myCustomField__c": "test",
                "number": "TestCharge",
                "price": 12.01,
                "productRatePlanChargeId": "ff8080811ca15d19011cddad8c953b53",
                "triggerDate": "2015-09-01",
                "triggerEvent": "SpecificDate"
              }
            ],
            "productRatePlanId": "ff8080811ca15d19011cdda9b0ad3b51"
          }
        ],
        "targetDate": "2015-12-31",
        "termType": "TERMED"
      },
      "properties": {
        "CpqBundleJsonId__QT": {
          "description": "",
          "type": "string"
        },
        "OpportunityCloseDate__QT": {
          "description": "",
          "type": "string"
        },
        "OpportunityName__QT": {
          "description": "",
          "type": "string"
        },
        "QuoteBusinessType__QT": {
          "description": "",
          "type": "string"
        },
        "QuoteNumber__QT": {
          "description": "",
          "type": "string"
        },
        "QuoteType__QT": {
          "description": "",
          "type": "string"
        },
        "accountKey": {
          "description": "Customer account number or ID\n",
          "type": "string"
        },
        "applyCreditBalance": {
          "description": "Applies a credit balance to an invoice.\n\nIf the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.\n\n\nTo view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.\n\nPrerequisite: `invoice` must be `true`. \n\n**Note:** \n  - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.\n  - This field is deprecated if you have the Advanced AR Settlement feature enabled.\n",
          "type": "boolean"
        },
        "autoRenew": {
          "default": false,
          "description": "If true, this subscription automatically renews at the end of the subscription term.\n\nThis field is only required if the `termType` field is set to `TERMED`.\n",
          "type": "boolean"
        },
        "collect": {
          "description": "Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.\nIf the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.\n\nThe default value is `true`.\n\n**Prerequisite:** The invoice field must be `true`. \n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` field to the minor version number in the request header.\n",
          "type": "boolean"
        },
        "contractEffectiveDate": {
          "description": "Effective contract date for this subscription, as yyyy-mm-dd\n",
          "format": "date",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "customerAcceptanceDate": {
          "description": "The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.\n\nDefault value is dependent on the value of other fields. See **Notes** section for more details.\n",
          "format": "date",
          "type": "string"
        },
        "initialTerm": {
          "description": "The length of the period for the first subscription term. Default is `0`. If `termType` is `TERMED`, then this field is required, and the value must be greater than `0`. If `termType` is `EVERGREEN`, this field is ignored.\n",
          "format": "int64",
          "type": "integer"
        },
        "initialTermPeriodType": {
          "description": "The period type for the first subscription term.\n\nThis field is used with the `InitialTerm` field to specify the initial subscription term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "invoice": {
          "description": "**Note:** This field has been replaced by the `runBilling` field. The\n`invoice` field is only available for backward compatibility.\n\n\nCreates an invoice for a subscription. The invoice generated in this\noperation is only for this subscription, not for the entire customer\naccount.\n\n\nIf the value is `true`, an invoice is created. If the value is\n`false`, no action is taken. The default value is `true`. \n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `196.0` and `207.0`. To use this field in the method, you\nmust set the zuora-version parameter to the minor version number in\nthe request header. \n",
          "type": "boolean"
        },
        "invoiceCollect": {
          "description": "**Note:** This field has been replaced by the invoice field and the collect field. invoiceCollect is available only for backward compatibility.\n\nIf `true` (default), an invoice is generated and payment collected automatically during the subscription process. If `false`, no invoicing or payment takes place. The invoice generated in this operation is only for this subscription, not for the entire customer account.\n\nThis field is in Zuora REST API version control. Supported minor versions are `186.0`, `187.0`, `188.0`, `189.0`, and `196.0`.\n",
          "type": "boolean"
        },
        "invoiceOwnerAccountKey": {
          "description": "Invoice owner account number or ID.\n\n**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "type": "string"
        },
        "invoiceSeparately": {
          "description": "Separates a single subscription from other subscriptions and invoices the charge independently. \n\nIf the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.\n\nThe default value is `false`.\n\nPrerequisite: The default subscription setting Enable Subscriptions to be Invoiced Separately must be set to Yes.\n",
          "type": "boolean"
        },
        "invoiceTargetDate": {
          "description": "**Note:** This field has been replaced by the `targetDate` field. The\n`invoiceTargetDate` field is only available for backward\ncompatibility.\n\n\nDate through which to calculate charges if an invoice is generated, as\nyyyy-mm-dd. Default is current date.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `207.0` and earlier.  \n",
          "format": "date",
          "type": "string"
        },
        "notes": {
          "description": "String of up to 500 characters.\n",
          "type": "string"
        },
        "renewalSetting": {
          "description": "Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\n\nValues:\n\n* `RENEW_WITH_SPECIFIC_TERM` (default)\n* `RENEW_TO_EVERGREEN`\n",
          "type": "string"
        },
        "renewalTerm": {
          "description": "The length of the period for the subscription renewal term. Default is `0`.\n",
          "format": "int64",
          "type": "integer"
        },
        "renewalTermPeriodType": {
          "description": "The period type for the subscription renewal term.\n\nThis field is used with the `renewalTerm` field to specify the subscription renewal term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "runBilling": {
          "default": true,
          "description": "Creates an invoice for a subscription. If you have the Advanced AR Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  \n\n\nThe billing documents generated\nin this operation is only for this subscription, not for the entire\ncustomer account.\n\n\nPossible values:\n\n- `true`: An invoice is created. If you have the Advanced AR\nSettlement feature enabled, a credit memo might also be created.\n\n\n- `false`: No invoice is created.\n\n\n**Note:** This field is in Zuora REST API version control. Supported\nminor versions are `211.0` or later. To use this field in the method,\nyou must set the `zuora-version` parameter to the minor version number\nin the request header.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "serviceActivationDate": {
          "description": "The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.\n\nDefault value is dependent on the value of other fields. See **Notes** section for more details.\n",
          "format": "date",
          "type": "string"
        },
        "subscribeToRatePlans": {
          "description": "Container for one or more rate plans for this subscription.\n",
          "items": {
            "$ref": "#/definitions/POSTSrpCreateType"
          },
          "type": "array"
        },
        "subscriptionNumber": {
          "description": "Subscription Number. The value can be up to 1000 characters.\n\nIf you do not specify a subscription number when creating a subscription, Zuora will generate a subscription number automatically.\n\nIf the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.\n",
          "type": "string"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice or a credit memo is generated, as\nyyyy-mm-dd. Default is current date.\n\n\n**Note:** The credit memo is only available if you have the Avdanced\nAR Settlement feature enabled.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `211.0` and later. To use this field in the method, you\nmust set the  `zuora-version` parameter to the minor version number in\nthe request header.\n",
          "format": "date",
          "type": "string"
        },
        "termStartDate": {
          "description": "The date on which the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date.\n",
          "format": "date",
          "type": "string"
        },
        "termType": {
          "description": "Possible values are: `TERMED`, `EVERGREEN`.\n",
          "type": "string"
        }
      },
      "required": [
        "accountKey",
        "contractEffectiveDate",
        "subscribeToRatePlans",
        "termType",
        "renewalTerm"
      ],
      "type": "object"
    },
    "POSTTaxationItemForCMType": {
      "properties": {
        "exemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the taxation item.\n",
          "properties": {
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "memoItemId": {
          "description": "The ID of the credit memo that the taxation item is created for.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the taxation item.\n",
          "type": "string"
        },
        "sourceTaxItemId": {
          "description": "The ID of the taxation item of the invoice, which the credit memo is created from. \n\nIf you want to use this REST API to create taxation items for a credit memo created from an invoice, the taxation items of the invoice must be created or imported through the SOAP API call.\n\n**Note:** \n  - This field is only used if the credit memo is created from an invoice. \n  - If you do not contain this field in the request body, Zuora will automatically set a value for the `sourceTaxItemId` field based on the tax location code, tax jurisdiction, and tax rate.\n",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of the tax applied to the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific credit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date when the tax is applied to the credit memo.\n",
          "format": "date",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate.\n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the credit memo.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        }
      },
      "required": [
        "taxRate",
        "jurisdiction",
        "name",
        "taxRateType",
        "taxAmount"
      ],
      "title": "taxationItems",
      "type": "object"
    },
    "POSTTaxationItemForDMType": {
      "properties": {
        "exemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the taxation item.\n",
          "properties": {
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "memoItemId": {
          "description": "The ID of the debit memo that the taxation item is created for.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the taxation item.\n",
          "type": "string"
        },
        "sourceTaxItemId": {
          "description": "The ID of the taxation item of the invoice, which the debit memo is created from. \n\nIf you want to use this REST API to create taxation items for a debit memo created from an invoice, the taxation items of the invoice must be created or imported through the SOAP API call.\n\n**Note:** \n  - This field is only used if the debit memo is created from an invoice. \n  - If you do not contain this field in the request body, Zuora will automatically set a value for the `sourceTaxItemId` field based on the tax location code, tax jurisdiction, and tax rate.\n",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of the tax applied to the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific debit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date when the tax is applied to the debit memo.\n",
          "format": "date",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate.\n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the debit memo.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        }
      },
      "required": [
        "taxRate",
        "jurisdiction",
        "name",
        "taxRateType",
        "taxAmount"
      ],
      "title": "taxationItems",
      "type": "object"
    },
    "POSTTaxationItemListForCMType": {
      "example": {
        "taxationItems": [
          {
            "exemptAmount": 0,
            "financeInformation": {
              "onAccountAccountingCode": "Check",
              "salesTaxPayableAccountingCode": "Check"
            },
            "jurisdiction": "CALIFORNIA",
            "locationCode": "06",
            "memoItemId": "402890555a7e9791015a879f064d0055",
            "name": "STATE TAX",
            "sourceTaxItemId": "402890555a7d4022015a7db254e200c1",
            "taxAmount": 0.1,
            "taxCode": "ServiceTaxCode",
            "taxCodeDescription": "This is tax code description!",
            "taxDate": "2016-09-30",
            "taxRate": 0.0625,
            "taxRateDescription": "This is tax rate description!",
            "taxRateType": "Percentage"
          }
        ]
      },
      "properties": {
        "taxationItems": {
          "description": "Container for taxation items.\n",
          "items": {
            "$ref": "#/definitions/POSTTaxationItemForCMType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "POSTTaxationItemListForDMType": {
      "example": {
        "taxationItems": [
          {
            "exemptAmount": 0,
            "financeInformation": {
              "salesTaxPayableAccountingCode": "Check"
            },
            "jurisdiction": "CALIFORNIA",
            "locationCode": "06",
            "memoItemId": "402890555a7e9791015a87b082980068",
            "name": "STATE TAX",
            "sourceTaxItemId": "402890555a7d4022015a7db254e200c2",
            "taxAmount": 0.01,
            "taxCode": "ServiceTaxCode",
            "taxCodeDescription": "This is tax code description!",
            "taxDate": "2016-06-05",
            "taxRate": 0.0625,
            "taxRateDescription": "This is tax rate description!",
            "taxRateType": "Percentage"
          },
          {
            "exemptAmount": 0,
            "financeInformation": {
              "salesTaxPayableAccountingCode": "Check"
            },
            "jurisdiction": "CALIFORNIA",
            "locationCode": "06",
            "memoItemId": "402890555a7e9791015a87b082d5006a",
            "name": "STATE TAX",
            "sourceTaxItemId": "402890555a7d4022015a7db254e200c3",
            "taxAmount": 0.02,
            "taxCode": "ServiceTaxCode",
            "taxCodeDescription": "This is tax code description!",
            "taxDate": "2016-06-05",
            "taxRate": 0.0625,
            "taxRateDescription": "This is tax rate description!",
            "taxRateType": "Percentage"
          }
        ]
      },
      "properties": {
        "taxationItems": {
          "description": "Container for taxation items.\n",
          "items": {
            "$ref": "#/definitions/POSTTaxationItemForDMType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "POSTTierType": {
      "properties": {
        "endingUnit": {
          "description": "End number of a range of units for the tier.\n",
          "format": "decimal",
          "type": "string"
        },
        "price": {
          "description": "Price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.\n",
          "format": "decimal",
          "type": "string"
        },
        "priceFormat": {
          "description": "Indicates if pricing is a flat fee or is per unit.\n\nValues:\n\n* `FlatFee`\n* `PerUnit`\n",
          "type": "string"
        },
        "startingUnit": {
          "description": "Starting number of a range of units for the tier.\n",
          "format": "decimal",
          "type": "string"
        },
        "tier": {
          "description": "Unique number that identifies the tier that the price applies to.\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "tier",
        "price"
      ],
      "title": "tiers",
      "type": "object"
    },
    "POSTUsageResponseType": {
      "properties": {
        "checkImportStatus": {
          "description": "URL for checking the status of the import operation.  Possible status values at this URL are:`Pending`, `Processing`, `Completed`, `Canceled`, `Failed`.  Only a status of Completed indicates that the file contents were imported successfully.\n",
          "type": "string"
        },
        "size": {
          "description": "The size of the uploaded file in bytes.\n",
          "format": "int64",
          "type": "integer"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTAcceptUserAccessResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request is successful.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTAccountType": {
      "example": {
        "additionalEmailAddresses": [
          "test3@test.com",
          "test4@test.com"
        ],
        "paymentGateway": "TestGateway"
      },
      "properties": {
        "additionalEmailAddresses": {
          "description": "A list of additional email addresses to receive emailed invoices. Use a comma to separate each email address.\n\n**Note:** Invoices are emailed to the email addresses specified in this field only when the `invoiceDeliveryPrefsEmail` field is `true`.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "autoPay": {
          "description": "Specifies whether future payments are to be automatically billed when they are due. Possible values are: `true`, `false`.\n",
          "type": "boolean"
        },
        "batch": {
          "description": "The alias name given to a batch. A string of 50 characters or less.\n",
          "type": "string"
        },
        "billToContact": {
          "description": "Container for bill-to contact information for this account.\n",
          "properties": {
            "address1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "address2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.\n",
              "type": "string"
            },
            "county": {
              "description": "County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.\n",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "fax": {
              "description": "Fax phone number, 40 characters or less.\n",
              "type": "string"
            },
            "firstName": {
              "description": "First name, 100 characters or less.\n",
              "type": "string"
            },
            "homePhone": {
              "description": "Home phone number, 40 characters or less.\n",
              "type": "string"
            },
            "lastName": {
              "description": "Last name, 100 characters or less.\n",
              "type": "string"
            },
            "mobilePhone": {
              "description": "Mobile phone number, 40 characters or less.\n",
              "type": "string"
            },
            "nickname": {
              "description": "Nickname for this contact\n",
              "type": "string"
            },
            "otherPhone": {
              "description": "Other phone number, 40 characters or less.\n",
              "type": "string"
            },
            "otherPhoneType": {
              "description": "Possible values are: `Work`, `Mobile`, `Home`, `Other`.\n",
              "type": "string"
            },
            "personalEmail": {
              "description": "Personal email address, 80 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora Tax requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.\n",
              "type": "string"
            },
            "taxRegion": {
              "description": "If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.\n",
              "type": "string"
            },
            "workEmail": {
              "description": "Work email address, 80 characters or less.\n",
              "type": "string"
            },
            "workPhone": {
              "description": "Work phone number, 40 characters or less.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "required": [
            "firstName",
            "lastName"
          ],
          "type": "object"
        },
        "communicationProfileId": {
          "description": "The ID of a communication profile.\n",
          "type": "string"
        },
        "crmId": {
          "description": "CRM account ID for the account, up to 100 characters.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "invoiceDeliveryPrefsEmail": {
          "description": "Whether the customer wants to receive invoices through email. \n\nThe default value is `false`.\n",
          "type": "boolean"
        },
        "invoiceDeliveryPrefsPrint": {
          "description": "Whether the customer wants to receive printed invoices, such as through postal mail.\n\nThe default value is `false`.\n",
          "type": "boolean"
        },
        "invoiceTemplateId": {
          "description": "Invoice template ID, configured in Billing Settings in the Zuora UI.\n",
          "type": "string"
        },
        "name": {
          "description": "Account name, up to 255 characters.\n",
          "type": "string"
        },
        "notes": {
          "description": "A string of up to 65,535 characters.\n",
          "type": "string"
        },
        "paymentGateway": {
          "description": "The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.\n",
          "type": "string"
        },
        "soldToContact": {
          "description": "Container for optional sold-to contact.\n",
          "properties": {
            "address1": {
              "description": "First address line, 255 characters or less.\n",
              "type": "string"
            },
            "address2": {
              "description": "Second address line, 255 characters or less.\n",
              "type": "string"
            },
            "city": {
              "description": "City, 40 characters or less.\n",
              "type": "string"
            },
            "country": {
              "description": "Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.\n",
              "type": "string"
            },
            "county": {
              "description": "County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.\n",
              "type": "string"
            },
            "customField__c": {
              "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
              "type": "string"
            },
            "fax": {
              "description": "Fax phone number, 40 characters or less.\n",
              "type": "string"
            },
            "firstName": {
              "description": "First name, 100 characters or less.\n",
              "type": "string"
            },
            "homePhone": {
              "description": "Home phone number, 40 characters or less.\n",
              "type": "string"
            },
            "lastName": {
              "description": "Last name, 100 characters or less.\n",
              "type": "string"
            },
            "mobilePhone": {
              "description": "Mobile phone number, 40 characters or less.\n",
              "type": "string"
            },
            "nickname": {
              "description": "Nickname for this contact\n",
              "type": "string"
            },
            "otherPhone": {
              "description": "Other phone number, 40 characters or less.\n",
              "type": "string"
            },
            "otherPhoneType": {
              "description": "Possible values are: `Work`, `Mobile`, `Home`, `Other`.\n",
              "type": "string"
            },
            "personalEmail": {
              "description": "Personal email address, 80 characters or less.\n",
              "type": "string"
            },
            "state": {
              "description": "State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora Tax  requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.\n",
              "type": "string"
            },
            "taxRegion": {
              "description": "If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.\n",
              "type": "string"
            },
            "workEmail": {
              "description": "Work email address, 80 characters or less.\n",
              "type": "string"
            },
            "workPhone": {
              "description": "Work phone number, 40 characters or less.\n",
              "type": "string"
            },
            "zipCode": {
              "description": "Zip code, 20 characters or less.\n",
              "type": "string"
            }
          },
          "required": [
            "firstName",
            "lastName"
          ],
          "type": "object"
        },
        "tagging": {
          "description": "",
          "type": "string"
        },
        "taxInfo": {
          "description": "Container for tax exempt information, used to establish the tax exempt status of a customer account.\n",
          "properties": {
            "VATId": {
              "description": "EU Value Added Tax ID. \n\n**Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).\n",
              "type": "string"
            },
            "companyCode": {
              "description": "Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.\n\n**Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). \n",
              "type": "string"
            },
            "exemptCertificateId": {
              "description": "ID of the customer tax exemption certificate. Requires Zuora Tax.\n",
              "type": "string"
            },
            "exemptCertificateType": {
              "description": "Type of tax exemption certificate that the customer holds. Requires Zuora Tax.\n",
              "type": "string"
            },
            "exemptDescription": {
              "description": "Description of the tax exemption certificate that the customer holds. Requires Zuora Tax.\n",
              "type": "string"
            },
            "exemptEffectiveDate": {
              "description": "Date when the customer tax exemption starts. Requires Zuora Tax.\n\nFormat: `yyyy-mm-dd`. Defaults to the current date.\n",
              "format": "date",
              "type": "string"
            },
            "exemptExpirationDate": {
              "description": "Date when the customer tax exemption expires. Requires Zuora Tax.\n\nFormat: `yyyy-mm-dd`. Defaults to the current date.\n",
              "format": "date",
              "type": "string"
            },
            "exemptIssuingJurisdiction": {
              "description": "Jurisdiction in which the customer tax exemption certificate was issued.\n",
              "type": "string"
            },
            "exemptStatus": {
              "description": "Status of the account tax exemption. Requires Zuora Tax.\n\nRequired if you use Zuora Tax. This field is unavailable if Zuora Tax is not used.\n\nValues: `Yes`, `No`, `pendingVerification`.\n",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "PUTAccountingCodeType": {
      "example": {
        "name": "CASH",
        "type": "Cash"
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "glAccountName": {
          "description": "Name of the account in your general ledger.\n\nField only available if you have Zuora Finance enabled. Maximum of 255 characters.\n",
          "type": "string"
        },
        "glAccountNumber": {
          "description": "Account number in your general ledger.\n\nField only available if you have Zuora Finance enabled. Maximum of 255 characters.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the accounting code.\n\nAccounting code name must be unique. Maximum of 100 characters.\n",
          "type": "string"
        },
        "notes": {
          "description": "Maximum of 2,000 characters.\n",
          "type": "string"
        },
        "type": {
          "description": "Accounting code type. You cannot change the type of an accounting code from `AccountsReceivable` to a different type. \n\nNote that `On-Account Receivable` is only available if you enable the Advanced AR Settlement feature. \n",
          "enum": [
            "AccountsReceivable",
            "On-Account Receivable",
            "Cash",
            "OtherAssets",
            "CustomerCashOnAccount",
            "DeferredRevenue",
            "SalesTaxPayable",
            "OtherLiabilities",
            "SalesRevenue",
            "SalesDiscounts",
            "OtherRevenue",
            "OtherEquity",
            "BadDebt",
            "OtherExpenses"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTAccountingPeriodType": {
      "example": {
        "endDate": "2016-01-31",
        "fiscalYear": 2016,
        "name": "Jan 2016",
        "startDate": "2016-01-01"
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "endDate": {
          "description": "The end date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\".\n",
          "format": "date",
          "type": "string"
        },
        "fiscalYear": {
          "description": "Fiscal year of the accounting period in yyyy format, for example, \"2016\".\n",
          "type": "string"
        },
        "fiscal_quarter": {
          "description": "",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Name of the accounting period.\n\nAccounting period name must be unique. Maximum of 100 characters.\n",
          "type": "string"
        },
        "notes": {
          "description": "Notes about the accounting period.\n\nMaximum of 255 characters.\n",
          "type": "string"
        },
        "startDate": {
          "description": "The start date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\".\n",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTAllocateManuallyType": {
      "example": {
        "cf_phases__c": "Phase 1",
        "cf_project__c": "project A",
        "eventType": "Revenue Distributed",
        "eventTypeSystemId": "RevenueDistributed__z",
        "notes": "Manually distribute revenue for Phase 1",
        "revenueDistributions": [
          {
            "accountingPeriodName": "Jan'2013",
            "newAmount": "500"
          },
          {
            "accountingPeriodName": "Feb'2013",
            "newAmount": "600"
          }
        ]
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "eventType": {
          "description": "Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
          "enum": [
            "Invoice Posted",
            "Invoice Item Adjustment Created",
            "Invoice Canceled",
            "Invoice Item Adjustment Canceled",
            "Revenue Distributed",
            "Credit Memo Posted",
            "Debit Memo Posted"
          ],
          "type": "string"
        },
        "eventTypeSystemId": {
          "description": "System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nCannot be duplicated.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "revenueDistributions": {
          "description": "An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.\n",
          "items": {
            "$ref": "#/definitions/POSTDistributionItemType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PUTAttachmentType": {
      "example": "curl\n-H \"filename\":\"Image123.png\" \\\n-H \"description\":\"Updated Image\" \\\n-H \"Accept:application:json\" \\\n-X PUT https://rest.zuora.com/v1/attachments/8a8083e1545b706a015473153e4743f",
      "properties": {
        "description": {
          "description": "Description of the attachment.\n",
          "type": "string"
        },
        "fileName": {
          "description": "File name of the attachment. The value should not contain the file extension. Only the file name without the extension can be edited.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTCatalogType": {
      "example": {
        "targetEntityIds": [
          "8a80825555a3c7a10155b460f53858e6"
        ]
      },
      "properties": {
        "toEntityIds": {
          "description": "The entity that you want to share the product with.\n",
          "items": {
            "title": "Entity IDs",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "toEntityIds"
      ],
      "type": "object"
    },
    "PUTCreditMemoItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Comments about the credit memo item.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the credit memo item.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the credit memo item.\n",
          "maxLength": 32,
          "minLength": 32,
          "type": "string"
        },
        "serviceEndDate": {
          "description": "The service end date of the credit memo item.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The service start date of the credit memo item.\n",
          "format": "date",
          "type": "string"
        },
        "skuName": {
          "description": "The name of the SKU.\n",
          "type": "string"
        },
        "taxItems": {
          "description": "Container for credit memo taxation items.\n",
          "items": {
            "$ref": "#/definitions/PutCreditMemoTaxItemType"
          },
          "type": "array"
        },
        "unitOfMeasure": {
          "description": "The definable unit that you measure when determining charges.\n",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "items",
      "type": "object"
    },
    "PUTCreditMemoType": {
      "example": {
        "CustomField1__c": "custom field value",
        "IndexedCustomFiled1__c": "custom field value",
        "autoApplyUponPosting": false,
        "comment": "new comment",
        "effectiveDate": "2017-04-17",
        "excludeFromAutoApplyRules": false,
        "items": [
          {
            "amount": 1,
            "comment": "This is comment!",
            "id": "402890555b797b57015b7986fc1a001c",
            "serviceEndDate": "2016-11-30",
            "serviceStartDate": "2016-11-01",
            "skuName": "SKU-1",
            "taxItems": [
              {
                "amount": 0.03,
                "id": "402890555b797b57015b7986fc3c001d",
                "jurisdiction": "CALIFORNIA",
                "locationCode": "06",
                "taxCodeDescription": "This is tax code description!",
                "taxDate": "2016-11-30",
                "taxExemptAmount": 0,
                "taxName": "STATE TAX1",
                "taxRate": 0.0625,
                "taxRateDescription": "This is tax rate description!",
                "taxRateType": "Percentage"
              }
            ],
            "unitOfMeasure": "Test_UOM"
          },
          {
            "amount": 2,
            "comment": "This is comment!",
            "id": "402890555b797b57015b7986fc41001e",
            "serviceEndDate": "2016-11-30",
            "serviceStartDate": "2016-11-01",
            "skuName": "SKU-2",
            "taxItems": [
              {
                "amount": 0.06,
                "id": "402890555b797b57015b7986fc4c001f",
                "jurisdiction": "CALIFORNIA",
                "locationCode": "06",
                "taxCodeDescription": "This is tax code description!",
                "taxDate": "2016-11-30",
                "taxExemptAmount": 0,
                "taxName": "STATE TAX2",
                "taxRate": 0.0625,
                "taxRateDescription": "This is tax rate description!",
                "taxRateType": "Percentage"
              }
            ],
            "unitOfMeasure": "Test_UOM"
          }
        ],
        "reasonCode": "Correcting invoice error"
      },
      "properties": {
        "autoApplyUponPosting": {
          "description": "Whether the credit memo automatically applies to the invoice upon posting.\n",
          "type": "boolean"
        },
        "comment": {
          "description": "Comments about the credit memo.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date when the credit memo takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "excludeFromAutoApplyRules": {
          "description": "Whether the credit memo is excluded from the rule of automatically applying credit memos to invoices.\n",
          "type": "boolean"
        },
        "items": {
          "description": "Container for credit memo items.\n",
          "items": {
            "$ref": "#/definitions/PUTCreditMemoItemType"
          },
          "type": "array"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n",
          "type": "string"
        },
        "transferredToAccounting": {
          "description": "Whether the credit memo is transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTDebitMemoItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the debit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "comment": {
          "description": "Comments about the debit memo item.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the debit memo item.\n",
          "properties": {
            "deferredRevenueAccountingCode": {
              "description": "The accounting code for the deferred revenue, such as Monthly Recurring Liability.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "recognizedRevenueAccountingCode": {
              "description": "The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "revenueRecognitionRuleName": {
              "description": "The name of the revenue recognition rule governing the revenue schedule.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the debit memo item.\n",
          "maxLength": 32,
          "minLength": 32,
          "type": "string"
        },
        "serviceEndDate": {
          "description": "The service end date of the debit memo item.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "The service start date of the debit memo item. \n",
          "format": "date",
          "type": "string"
        },
        "skuName": {
          "description": "The name of the SKU.\n",
          "type": "string"
        },
        "taxItems": {
          "description": "Container for debit memo taxation items.\n",
          "items": {
            "$ref": "#/definitions/PutDebitMemoTaxItemType"
          },
          "type": "array"
        },
        "unitOfMeasure": {
          "description": "The definable unit that you measure when determining charges.\n",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "items",
      "type": "object"
    },
    "PUTDebitMemoType": {
      "example": {
        "CustomField1__c": "cf111",
        "IndexedCustomFiled1__c": "cf222",
        "comment": "new comment",
        "effectiveDate": "2017-04-17",
        "items": [
          {
            "amount": 1,
            "comment": "This is comment!",
            "id": "402890555b797b57015b7986fc1a001c",
            "serviceEndDate": "2016-11-30",
            "serviceStartDate": "2016-11-01",
            "skuName": "SKU-1",
            "taxItems": [
              {
                "amount": 0.03,
                "id": "402890555b797b57015b7986fc3c001d",
                "jurisdiction": "CALIFORNIA",
                "locationCode": "06",
                "taxCodeDescription": "This is tax code description!",
                "taxDate": "2016-11-30",
                "taxExemptAmount": 0,
                "taxName": "STATE TAX1",
                "taxRate": 0.0625,
                "taxRateDescription": "This is tax rate description!",
                "taxRateType": "Percentage"
              }
            ],
            "unitOfMeasure": "Test_UOM"
          },
          {
            "amount": 2,
            "comment": "This is comment!",
            "id": "402890555b797b57015b7986fc41001e",
            "serviceEndDate": "2016-11-30",
            "serviceStartDate": "2016-11-01",
            "skuName": "SKU-2",
            "taxItems": [
              {
                "amount": 0.06,
                "id": "402890555b797b57015b7986fc4c001f",
                "jurisdiction": "CALIFORNIA",
                "locationCode": "06",
                "taxCodeDescription": "This is tax code description!",
                "taxDate": "2016-11-30",
                "taxExemptAmount": 0,
                "taxName": "STATE TAX2",
                "taxRate": 0.0625,
                "taxRateDescription": "This is tax rate description!",
                "taxRateType": "Percentage"
              }
            ],
            "unitOfMeasure": "Test_UOM"
          }
        ],
        "reasonCode": "Correcting invoice error"
      },
      "properties": {
        "comment": {
          "description": "Comments about the debit memo.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The date when the debit memo takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "items": {
          "description": "Container for debit memo items.\n",
          "items": {
            "$ref": "#/definitions/PUTDebitMemoItemType"
          },
          "type": "array"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code\n",
          "type": "string"
        },
        "transferredToAccounting": {
          "description": "Whether the debit memo is transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTDenyUserAccessResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request is successful.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTEntityConnectionsAcceptResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTEntityConnectionsDenyResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTEntityConnectionsDisconnectResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTEventRIDetailType": {
      "example": {
        "revenueItems": [
          {
            "accountingPeriodName": "Oct'2014",
            "cf_phases__c": "Scoping Phase",
            "cf_project__c": "Security"
          },
          {
            "accountingPeriodName": "Nov'2014",
            "cf_phases__c": "Design Phase",
            "cf_project__c": "Security"
          }
        ]
      },
      "properties": {
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n\nInclude at least one custom field.\n",
          "items": {
            "$ref": "#/definitions/EventRevenueItemType"
          },
          "type": "array"
        }
      },
      "required": [
        "revenueItems"
      ],
      "type": "object"
    },
    "PUTJournalEntryItemType": {
      "properties": {
        "accountingCodeName": {
          "description": "Name of the accounting code.\n\nIf the Journal Entry Item has a blank accounting code, enter the empty string.\n",
          "type": "string"
        },
        "accountingCodeType": {
          "description": "Accounting code type.\n\nNote that `On-Account Receivable` is only available if you enable the Advanced AR Settlement feature. \n",
          "enum": [
            "AccountsReceivable",
            "On-Account Receivable",
            "Cash",
            "OtherAssets",
            "CustomerCashOnAccount",
            "DeferredRevenue",
            "SalesTaxPayable",
            "OtherLiabilities",
            "SalesRevenue",
            "SalesDiscounts",
            "OtherRevenue",
            "OtherEquity",
            "BadDebt",
            "OtherExpenses"
          ],
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "type": {
          "description": "Type of journal entry item. ",
          "enum": [
            "Credit",
            "Debit"
          ],
          "type": "string"
        }
      },
      "required": [
        "accountingCodeName",
        "type"
      ],
      "title": "journalEntryItems",
      "type": "object"
    },
    "PUTPaymentMethodResponseType": {
      "properties": {
        "paymentMethodId": {
          "description": "ID of the updated payment method.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTPaymentMethodType": {
      "example": {
        "cardHolderName": "Leo",
        "expirationMonth": 8,
        "expirationYear": 2015,
        "numConsecutiveFailures": 5,
        "securityCode": "111"
      },
      "properties": {
        "addressLine1": {
          "description": "First address line, 255 characters or less.\n",
          "type": "string"
        },
        "addressLine2": {
          "description": "Second address line, 255 characters or less.\n",
          "type": "string"
        },
        "cardHolderName": {
          "description": "The full name as it appears on the card, e.g., \"John J Smith\", 50 characters or less.\n",
          "type": "string"
        },
        "city": {
          "description": "City, 40 characters or less.\n",
          "type": "string"
        },
        "country": {
          "description": "Country; must be a valid country name or abbreviation.\n",
          "type": "string"
        },
        "defaultPaymentMethod": {
          "description": "Specify \"true\" to make this card the default payment method; otherwise, omit this parameter to keep the current default payment method.\n",
          "type": "boolean"
        },
        "email": {
          "description": "Card holder's email address, 80 characters or less.\n",
          "type": "string"
        },
        "expirationMonth": {
          "description": "Two-digit expiration month (01-12).\n",
          "type": "string"
        },
        "expirationYear": {
          "description": "Four-digit expiration year.\n",
          "type": "string"
        },
        "numConsecutiveFailures": {
          "description": "The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. \n",
          "format": "int32",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "phone": {
          "description": "Phone number, 40 characters or less.\n",
          "type": "string"
        },
        "securityCode": {
          "description": "The CVV or CVV2 security code for the credit card or debit card. Only required if changing expirationMonth, expirationYear, or cardHolderName. To ensure PCI compliance, this value isn't stored and can't be queried.\n\n",
          "type": "string"
        },
        "state": {
          "description": "State; must be a valid state name or 2-character abbreviation.\n",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code, 20 characters or less.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTRSBasicInfoType": {
      "example": {
        "cf_phases__c": "Phase 1",
        "notes": "change recognition term",
        "referenceId": "Reference ID"
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.\n\nUse this field only when the revenue schedule is not linked to an invoice item or invoice item adjustment, such as for revenue schedules based on the Custom - Unlimited recognition model.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTRSTermType": {
      "example": {
        "cf_phases__c": "Phase 2",
        "distributionType": "Daily distribution",
        "eventType": "Revenue Distributed",
        "eventTypeSystemId": "RevenueDistributed__z",
        "notes": "manual distribute revenue by usage",
        "recognitionEnd": "2015-12-31",
        "recognitionStart": "2015-12-1"
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "distributionType": {
          "description": "How you want to distribute the revenue. \n\n\n* Daily Distribution: Distributes revenue evenly across each day between the recognitionStart and recognitionEnd dates.\n* Monthly Distribution (Back Load): Back loads the revenue so you distribute the monthly amount in the partial month in the end only.\n* Monthly Distribution (Front Load): Front loads the revenue so you distribute the monthly amount in the partial month in the beginning only.\n* Monthly Distribution (Proration by Days): Splits the revenue amount between the two partial months.\n\n**Note:** To use any of the Monthly Distribution options, you must have the \"Monthly recognition over time\" model enabled in **Settings > Finance > Manage Revenue Recognition Models** in the Zuora UI.\n",
          "enum": [
            "Daily Distribution",
            "Monthly Distribution (Back Load)",
            "Monthly Distribution (Front Load)",
            "Monthly Distribution (Proration by Days)"
          ],
          "type": "string"
        },
        "eventType": {
          "description": "Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
          "enum": [
            "Invoice Posted",
            "Invoice Item Adjustment Created",
            "Invoice Canceled",
            "Invoice Item Adjustment Canceled",
            "Revenue Distributed",
            "Credit Memo Posted",
            "Debit Memo Posted"
          ],
          "type": "string"
        },
        "eventTypeSystemId": {
          "description": "System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "recognitionEnd": {
          "description": "The end date of a recognition period in `yyyy-mm-dd` format. \n\nThe maximum difference between the `recognitionStart` and `recognitionEnd` date fields is equal to 250 multiplied by the length of an accounting period.\n",
          "format": "date",
          "type": "string"
        },
        "recognitionStart": {
          "description": "The start date of a recognition period in `yyyy-mm-dd` format.\n\nIf there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "recognitionEnd",
        "recognitionStart"
      ],
      "type": "object"
    },
    "PUTRefundType": {
      "example": {
        "comment": "update comment",
        "financeInformation": {
          "transferredToAccounting": "No"
        }
      },
      "properties": {
        "comment": {
          "description": "Comments about the refund.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the refund.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTRenewSubscriptionResponseType": {
      "properties": {
        "creditMemoId": {
          "description": "The credit memo ID, if a credit memo is generated during the subscription process.\n\n**Note:** This field is only available if you have the Advanced AR Settlements feature enabled.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "Invoice ID, if one is generated.\n",
          "type": "string"
        },
        "paidAmount": {
          "description": "Payment amount, if payment is collected.\n",
          "format": "decimal",
          "type": "string"
        },
        "paymentId": {
          "description": "Payment ID, if payment is collected.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "termEndDate": {
          "description": "Date the new subscription term ends, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "termStartDate": {
          "description": "Date the new subscription term begins, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "totalDeltaMrr": {
          "description": "Change in the subscription monthly recurring revenue as a result of the update. For a renewal, this is the MRR of the subscription in the new term.\n",
          "format": "decimal",
          "type": "string"
        },
        "totalDeltaTcv": {
          "description": "Change in the total contracted value of the subscription as a result of the update. For a renewal, this is the TCV of the subscription in the new term.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTRenewSubscriptionType": {
      "example": {
        "collect": false,
        "runBilling": true
      },
      "properties": {
        "OpportunityCloseDate_QT": {
          "description": "The closing date of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "OpportunityName_QT": {
          "description": "The unique identifier of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n          \nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteBusinessType_QT": {
          "description": "The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal, or Churn. This field is populated when the subscription originates from Zuora Quotes.\n          \nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteNumber_QT": {
          "description": "The unique identifier of the Quote. This field is populated when the subscription originates from Zuora Quotes.\n          \nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteType_QT": {
          "description": "The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is populated when the subscription originates from Zuora Quotes.\n          \nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "applyCreditBalance": {
          "description": "Applies a credit balance to an invoice.\n\nIf the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.\n\n\nTo view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.\n\nPrerequisite: `invoice` must be `true`. \n\n**Note:** \n  - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.\n  - This field is deprecated if you have the Advanced AR Settlement feature enabled.\n",
          "type": "boolean"
        },
        "collect": {
          "description": "Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.\n\nIf the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.\n\nThe default value is `false`.\n\n**Prerequisite:** `invoice` must be `true`. \n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` field to the minor version number in the request header. \n",
          "type": "string"
        },
        "invoice": {
          "description": "**Note:** This field has been replaced by the `runBilling` field. The\n`invoice` field is only available for backward compatibility.\n\n\nCreates an invoice for a subscription. The invoice generated in this\noperation is only for this subscription, not for the entire customer\naccount.\n\n\nIf the value is `true`, an invoice is created. If the value is\n`false`, no action is taken. The default value is `false`. \n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `196.0` and `207.0`. To use this field in the method, you\nmust set the zuora-version parameter to the minor version number in\nthe request header. \n",
          "type": "boolean"
        },
        "invoiceCollect": {
          "description": "**Note:** This field has been replaced by the invoice field and the collect field. invoiceCollect is available only for backward compatibility.\n\nIf `true` (default), an invoice is generated and payment collected automatically during the subscription process. If `false`, no invoicing or payment takes place. The invoice generated in this operation is only for this subscription, not for the entire customer account.\n\nThis field is in Zuora REST API version control. Supported minor versions are `186.0`, `187.0`, `188.0`, `189.0`, and `196.0`.\n",
          "type": "boolean"
        },
        "invoiceTargetDate": {
          "description": "**Note:** This field has been replaced by the `targetDate` field. The\n`invoiceTargetDate` field is only available for backward\ncompatibility.\n\n\nDate through which to calculate charges if an invoice is generated, as\nyyyy-mm-dd. Default is current date.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `207.0` and earlier.  \n",
          "format": "date",
          "type": "string"
        },
        "runBilling": {
          "default": false,
          "description": "Creates an invoice for a subscription. If you have the Advanced AR Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  \n\n\nThe billing documents generated\nin this operation is only for this subscription, not for the entire\ncustomer account.\n\n\nPossible values:\n\n- `true`: An invoice is created. If you have the Advanced AR\nSettlement feature enabled, a credit memo might also be created.\n\n\n- `false`: No invoice is created.\n\n\n**Note:** This field is in Zuora REST API version control. Supported\nminor versions are `211.0` or later. To use this field in the method,\nyou must set the `zuora-version` parameter to the minor version number\nin the request header.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice or a credit memo is generated, as\nyyyy-mm-dd. Default is current date.\n\n\n**Note:** The credit memo is only available if you have the Avdanced\nAR Settlement feature enabled.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `211.0` and later. To use this field in the method, you\nmust set the  `zuora-version` parameter to the minor version number in\nthe request header.\n",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTRevenueScheduleResponseType": {
      "properties": {
        "revenueEventNumber": {
          "description": "The revenue event number created when a revenue event occurs.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTScAddType": {
      "properties": {
        "applyDiscountTo": {
          "description": "Specifies the type of charges that you want a specific discount to apply to.\n\nValues:\n\n* `ONETIME`\n* `RECURRING`\n* `USAGE`\n* `ONETIMERECURRING`\n* `ONETIMEUSAGE`\n* `RECURRINGUSAGE`\n* `ONETIMERECURRINGUSAGE`\n\nAvailable for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:\n\n* Recurring\n",
          "type": "string"
        },
        "billCycleDay": {
          "description": "Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed.\n\nValues: `1`-`31`\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n",
          "type": "string"
        },
        "billCycleType": {
          "description": "Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayOfMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayOfWeek`, set the `weeklyBillCycleDay` field.\n\nValues:\n\n* `DefaultFromCustomer`\n* `SpecificDayOfMonth`\n* `SubscriptionStartDay`\n* `ChargeTriggerDay`\n* `SpecificDayOfWeek`\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n",
          "type": "string"
        },
        "billingPeriod": {
          "description": "Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).\n\nValues:\n\n* `Month`\n* `Quarter`\n* `Semi_Annual`\n* `Annual`\n* `Eighteen_Months`\n* `Two_Years`\n* `Three_Years`\n* `Five_Years`\n* `Specific_Months`\n* `Subscription_Term`\n* `Week`\n* `Specific_Weeks`\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n",
          "type": "string"
        },
        "billingPeriodAlignment": {
          "description": "Aligns charges within the same subscription if multiple charges begin on different dates.\n\nValues:\n\n* `AlignToCharge`\n* `AlignToSubscriptionStart`\n* `AlignToTermStart`\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n",
          "type": "string"
        },
        "billingTiming": {
          "description": "Billing timing for the charge for recurring charge types. Not avaliable for one time, usage and discount charges.\n\nValues:\n\n* `IN_ADVANCE` (default)\n* `IN_ARREARS`\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "description": {
          "description": "Description of the charge.\n",
          "type": "string"
        },
        "discountAmount": {
          "description": "Specifies the amount of fixed-amount discount.\n\nAvailable for the following charge type for the Discount-Fixed Amount charge model:\n\n* Recurring\n",
          "format": "decimal",
          "type": "string"
        },
        "discountLevel": {
          "description": "Specifies if the discount applies to the product rate plan only , the entire subscription, or to any activity in the account.\n\nValues:\n\n* `rateplan`\n* `subscription`\n* `account`\n\nAvailable for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:\n\n* Recurring\n",
          "type": "string"
        },
        "discountPercentage": {
          "description": "Specifies the percentage of a percentage discount. \n\nAvailable for the following charge type for the Discount-Percentage charge model:\n\n* Recurring\n",
          "format": "decimal",
          "type": "string"
        },
        "endDateCondition": {
          "description": "Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.\n\nValues:\n\n* `Subscription_End`\n* `Fixed_Period`\n* `Specific_End_Date`\n",
          "type": "string"
        },
        "includedUnits": {
          "description": "Specifies the number of units in the base set of units for this charge. Must be >=`0`.\n\nAvailable for the following charge types for the Overage charge model:\n\n* Recurring\n* Usage-based\n",
          "format": "decimal",
          "type": "string"
        },
        "listPriceBase": {
          "description": "The list price base for the product rate plan charge.\n\nValues:\n\n* `Per_Billing_Period`\n* `Per_Month`\n* `Per_Week`\n\nAvailable for the following charge type for the Flat Fee, Per Unit, Volume Pricing, and Tiered Pricing charge models:\n\n* Recurring\n",
          "type": "string"
        },
        "number": {
          "description": "Unique number that identifies the charge. System-generated if not provided.\n",
          "type": "string"
        },
        "numberOfPeriods": {
          "description": "Specifies the number of periods to use when calculating charges in an overage smoothing charge model.\n\nAvailable for the following charge type for the Overage and Tiered with Overage charge models:\n\n* Usage-based\n",
          "format": "int64",
          "type": "integer"
        },
        "overagePrice": {
          "description": "Price for units over the allowed amount. \n\nAvailable for the following charge type for the Overage and Tiered with Overage charge models:\n\n* Usage-based\n",
          "format": "decimal",
          "type": "string"
        },
        "overageUnusedUnitsCreditOption": {
          "description": "Determines whether to credit the customer with unused units of usage.\n\nValues:\n\n* `NoCredit`\n* `CreditBySpecificRate`\n\nAvailable for the following charge type for the Overage and Tiered with Overage charge models:\n\n* Usage-based\n",
          "type": "string"
        },
        "price": {
          "description": "Price for units in the subscription rate plan.\n\nSupports all charge types for the Flat Fee and Per Unit charge models\n",
          "format": "decimal",
          "type": "string"
        },
        "priceChangeOption": {
          "description": "Applies an automatic price change when a termed subscription is renewed. The Zuora Billing Admin setting Enable Automatic Price Change When Subscriptions are Renewed?  must be set to Yes to use this field.  See Define Default Subscription Settings for more information on setting this option.\n\nValues:\n\n* `NoChange` (default)\n* `SpecificPercentageValue`\n* `UseLatestProductCatalogPricing`\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n* Not available for the Fixed-Amount Discount charge model.\n",
          "type": "string"
        },
        "priceIncreasePercentage": {
          "description": "Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.\n\nDecimal between -100 and 100.\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n\nNot available for the Fixed-Amount Discount charge model.\n",
          "format": "decimal",
          "type": "string"
        },
        "productRatePlanChargeId": {
          "description": "",
          "type": "string"
        },
        "quantity": {
          "description": "Number of units. Must be >=`0`.\n\nAvailable for the following charge types for the Per Unit, Volume Pricing, and Tiered Pricing charge models:\n\n* One-time\n* Recurring\n",
          "format": "decimal",
          "type": "string"
        },
        "ratingGroup": {
          "description": "Specifies a rating group based on which usage records are rated.\n\n**Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\nValues:\n\n* `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.       \n* `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. \n* `ByUsageRecord`: The rating is based on each usage record.\n* `ByUsageUpload`: The rating is based on all the usages in a uploaded usage file (.xls or .csv).\n\nThe `ByBillingPeriod` value can be applied for all charge models.\nThe `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.\nUse this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.\n",
          "type": "string"
        },
        "specificBillingPeriod": {
          "description": "Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`.\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n",
          "format": "int64",
          "type": "integer"
        },
        "specificEndDate": {
          "description": "Defines when the charge ends after the charge trigger date.\n\nThis field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.\n\nIf the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.\n",
          "format": "date",
          "type": "string"
        },
        "tiers": {
          "description": "Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:\n\n* One-time\n* Recurring\n* Usage-based\n",
          "items": {
            "$ref": "#/definitions/POSTTierType"
          },
          "type": "array"
        },
        "triggerDate": {
          "description": "Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to `USD`.\n",
          "format": "date",
          "type": "string"
        },
        "triggerEvent": {
          "description": "Specifies when to start billing the customer for the charge.\n\nValues:\n\n* `UCE`\n* `USA`\n* `UCA`\n* `USD`\n",
          "type": "string"
        },
        "unusedUnitsCreditRates": {
          "description": "Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`.\n\nAvailable for the following charge type for the Overage and Tiered with Overage charge models:\n\n* Usage-based\n",
          "format": "decimal",
          "type": "string"
        },
        "upToPeriods": {
          "description": "The period type used to define when the charge ends. \n\nValues:\n\n* `Billing_Periods`\n* `Days`\n* `Weeks`\n* `Months`\n* `Years`\n\nYou must use this field together with the `upToPeriods` field to specify the time period.\n\nThis field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. \n",
          "format": "int64",
          "type": "integer"
        },
        "upToPeriodsType": {
          "description": "The period type used to define when the charge ends. \n\nValues:\n\n* `Billing_Periods`\n* `Days`\n* `Weeks`\n* `Months`\n* `Years`\n\nYou must use this field together with the `upToPeriods` field to specify the time period.\n\nThis field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. \n",
          "type": "string"
        }
      },
      "required": [
        "productRatePlanChargeId"
      ],
      "title": "chargeOverrides",
      "type": "object"
    },
    "PUTScUpdateType": {
      "properties": {
        "billingPeriodAlignment": {
          "description": "Aligns charges within the same subscription if multiple charges begin on different dates.\n\nValues:\n\n* `AlignToCharge`\n* `AlignToSubscriptionStart`\n* `AlignToTermStart`\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "description": {
          "description": "Description of the charge.\n",
          "type": "string"
        },
        "includedUnits": {
          "description": "Specifies the number of units in the base set of units for this charge. Must be >=0.\n\nAvailable for the following charge types for the Overage charge model:\n\n* `Recurring`\n* `Usage-based`\n",
          "format": "decimal",
          "type": "string"
        },
        "overagePrice": {
          "description": "Price for units over the allowed amount. \n\nAvailable for the following charge type for the Overage and Tiered with Overage charge models:\n\n* Usage-based\n",
          "format": "decimal",
          "type": "string"
        },
        "price": {
          "description": "Price for units in the subscription rate plan.\n\nSupports all charge types for the Flat Fee and Per Unit charge models\n",
          "format": "decimal",
          "type": "string"
        },
        "priceChangeOption": {
          "description": "Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field.\n\nValues:\n\n* `NoChange` (default)\n* `SpecificPercentageValue`\n* `UseLatestProductCatalogPricing`\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n\nNot available for the Fixed-Amount Discount charge model.\n",
          "type": "string"
        },
        "priceIncreasePercentage": {
          "description": "Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.\n\nDecimal between `-100` and `100`.\n\nAvailable for the following charge types:\n\n* Recurring\n* Usage-based\n\nNot available for the Fixed-Amount Discount charge model.\n",
          "format": "decimal",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of units; must be greater than zero.\n",
          "format": "decimal",
          "type": "string"
        },
        "ratePlanChargeId": {
          "description": "ID of a rate-plan charge for this subscription.\n",
          "type": "string"
        },
        "tiers": {
          "description": "Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:\n\n* One-time\n* Recurring\n* Usage-based\n",
          "items": {
            "$ref": "#/definitions/POSTTierType"
          },
          "type": "array"
        },
        "triggerDate": {
          "description": "Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to USD.\n\n`triggerDate` cannot be updated for the following using the REST update subscription call:\n\n* One-time charge type\n* Discount-Fixed Amount charge model\n* Discount-Percentage charge model\n",
          "format": "date",
          "type": "string"
        },
        "triggerEvent": {
          "description": "Specifies when to start billing the customer for the charge.\n\nValues:\n\n* `UCE`\n* `USA`\n* `UCA`\n* `USD`\n\nThis is the date when charge changes in the REST request become effective.\n\n`triggerEvent` cannot be updated for the following using the REST update subscription call:\n\n* One-time charge type\n* Discount-Fixed Amount charge model\n* Discount-Percentage charge model\n",
          "type": "string"
        }
      },
      "required": [
        "ratePlanChargeId"
      ],
      "title": "chargeUpdateDetails",
      "type": "object"
    },
    "PUTScheduleRIDetailType": {
      "example": {
        "revenueItems": [
          {
            "accountingPeriodName": "Oct'2014",
            "cf_phases__c": "Scoping Phase",
            "cf_project__c": "Security"
          },
          {
            "accountingPeriodName": "Nov'2014",
            "cf_phases__c": "Design Phase",
            "cf_project__c": "Security"
          }
        ]
      },
      "properties": {
        "revenueItems": {
          "description": "Revenue items are listed in ascending order by the accounting period start date.\n\nInclude at least one custom field.\n",
          "items": {
            "$ref": "#/definitions/RevenueScheduleItemType"
          },
          "type": "array"
        }
      },
      "required": [
        "revenueItems"
      ],
      "type": "object"
    },
    "PUTSendUserAccessRequestResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request is successful.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PUTSendUserAccessRequestType": {
      "example": {
        "targetEntityIds": [
          "8a80825555a3c7a10155b46120d058e7",
          "8a80825556ff28a4015708b93df82ba7"
        ]
      },
      "properties": {
        "targetEntityIds": {
          "description": "The ID of the entities that the user wants to access.\n",
          "items": {
            "title": "Entity IDs",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "targetEntityIds"
      ],
      "type": "object"
    },
    "PUTSpecificDateAllocationType": {
      "example": {
        "amount": "1000.00",
        "distributeOn": "2016-02-03",
        "distributionType": "specific date (delta fixed amount)",
        "eventNumber__c": "phase 2",
        "eventType": "Revenue Distributed",
        "eventTypeSystemId": "RevenueDistributed__z",
        "notes": "service delivered and accepted by customer"
      },
      "properties": {
        "amount": {
          "description": "The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`\n",
          "format": "decimal",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "distributeOn": {
          "description": "The recognition date on which to distribute revenue for milestone-based recognition.\n\nType: date in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "distributionType": {
          "description": "How to distribute the revenue for milestone-based recognition. ",
          "enum": [
            "specific date (delta fixed amount)",
            "specific date (delta percent total)",
            "specific date (delta percent undistributed)"
          ],
          "type": "string"
        },
        "eventType": {
          "description": "Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n\nNote that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Advanced AR Settlement feature.\n",
          "enum": [
            "Invoice Posted",
            "Invoice Item Adjustment Created",
            "Invoice Canceled",
            "Invoice Item Adjustment Canceled",
            "Revenue Distributed",
            "Credit Memo Posted",
            "Debit Memo Posted"
          ],
          "type": "string"
        },
        "eventTypeSystemId": {
          "description": "System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.\n",
          "type": "string"
        },
        "notes": {
          "description": "Additional information about this record.\n",
          "type": "string"
        },
        "percentage": {
          "description": "Percentage of the total recognition amount or total undistributed to distribute.\n\nRequired if distributionType is either:\n* specific date (delta percent total)\n* specific date (delta percent undistributed)\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "required": [
        "distributionType",
        "distributeOn"
      ],
      "type": "object"
    },
    "PUTSrpAddType": {
      "properties": {
        "chargeOverrides": {
          "description": "This optional container is used to override the quantity of one or more product rate plan charges for this subscription.\n",
          "items": {
            "$ref": "#/definitions/PUTScAddType"
          },
          "type": "array"
        },
        "contractEffectiveDate": {
          "description": "The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.\n\nIf there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "customerAcceptanceDate": {
          "description": "The date when the customer accepts the contract in yyyy-mm-dd format.\n\nIf this field is not set:\n\n* If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.\n* If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.\n\nThe billing trigger dates must follow this rule:\n\ncontractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate\n",
          "format": "date",
          "type": "string"
        },
        "productRatePlanId": {
          "description": "ID of a product rate plan for this subscription\n",
          "type": "string"
        },
        "serviceActivationDate": {
          "description": "The date when the new product in the subscription is activated in yyyy-mm-dd format.\n\nYou must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.\n\nThe billing trigger dates must follow this rule:\n\ncontractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "productRatePlanId",
        "contractEffectiveDate"
      ],
      "title": "add",
      "type": "object"
    },
    "PUTSrpRemoveType": {
      "properties": {
        "contractEffectiveDate": {
          "description": "Effective date of the new subscription, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "customerAcceptanceDate": {
          "description": "The date when the customer accepts the contract in yyyy-mm-dd format.\n\nIf this field is not set:\n\n* If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.\n* If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.\n\nThe billing trigger dates must follow this rule:\n\ncontractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate\n",
          "format": "date",
          "type": "string"
        },
        "ratePlanId": {
          "description": "ID of a rate plan for this subscription.\n",
          "type": "string"
        },
        "serviceActivationDate": {
          "description": "The date when the remove amendment is activated in yyyy-mm-dd format.\n\nYou must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.\n\nThe billing trigger dates must follow this rule:\n\ncontractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "contractEffectiveDate",
        "ratePlanId"
      ],
      "title": "remove",
      "type": "object"
    },
    "PUTSrpUpdateType": {
      "properties": {
        "chargeUpdateDetails": {
          "description": "Container for one or more product rate plan charges. \n",
          "items": {
            "$ref": "#/definitions/PUTScUpdateType"
          },
          "type": "array"
        },
        "contractEffectiveDate": {
          "description": "The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.\n\nIf there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "customerAcceptanceDate": {
          "description": "The date when the customer accepts the contract in yyyy-mm-dd format.\n\nIf this field is not set:\n\n* If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.\n* If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.\n\nThe billing trigger dates must follow this rule:\n\ncontractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate\n",
          "format": "date",
          "type": "string"
        },
        "ratePlanId": {
          "description": "ID of a rate plan for this subscription.\n",
          "type": "string"
        },
        "serviceActivationDate": {
          "description": "The date when the update amendment is activated in yyyy-mm-dd format.\n\nYou must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.\n\nThe billing trigger dates must follow this rule:\n\ncontractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate\n",
          "format": "date",
          "type": "string"
        },
        "specificUpdateDate": {
          "description": "The date when the Update Product amendment takes effect. This field is only applicable if there is already a future-dated Update Product amendment on the subscription. The format of the date is yyyy-mm-dd.\n\nRequired only for Update Product amendments if there is already a future-dated Update Product amendment on the subscription.\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "ratePlanId",
        "contractEffectiveDate"
      ],
      "title": "update",
      "type": "object"
    },
    "PUTSubscriptionPreviewInvoiceItemsType": {
      "properties": {
        "chargeAmount": {
          "description": "The amount of the charge. This amount doesn't include taxes unless the charge's tax mode is inclusive.\n",
          "format": "decimal",
          "type": "string"
        },
        "chargeDescription": {
          "description": "Description of the charge.\n",
          "type": "string"
        },
        "chargeName": {
          "description": "Name of the charge\n",
          "type": "string"
        },
        "productName": {
          "description": "Name of the product associated with this item.\n",
          "type": "string"
        },
        "productRatePlanChargeId": {
          "description": "",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of this item.\n",
          "format": "decimal",
          "type": "string"
        },
        "serviceEndDate": {
          "description": "End date of the service period for this item, i.e., the last day of the period, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "description": "Service start date as yyyy-mm-dd. If the charge is a one-time fee, this is the date of that charge.\n",
          "format": "date",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "",
          "type": "string"
        }
      },
      "title": "invoiceItems",
      "type": "object"
    },
    "PUTSubscriptionResponseType": {
      "properties": {
        "amount": {
          "description": "Invoice amount. Preview mode only.\n",
          "format": "decimal",
          "type": "string"
        },
        "amountWithoutTax": {
          "description": "Invoice amount minus tax. Preview mode only.\n",
          "format": "decimal",
          "type": "string"
        },
        "chargeMetrics": {
          "description": "Container for charge metrics.\n",
          "properties": {
            "dmrr": {
              "description": "Change in total contract value.\n",
              "type": "string"
            },
            "dtcv": {
              "description": "Change in monthly recurring revenue.\n",
              "type": "string"
            },
            "mrr": {
              "description": "Monthly recurring revenue.\n",
              "type": "string"
            },
            "number": {
              "description": "The charge number of the subscription. Only available for update subscription.\n",
              "type": "string"
            },
            "originRatePlanId": {
              "description": "The origin rate plan ID. Only available for update subscription.\n",
              "type": "string"
            },
            "originalId": {
              "description": "The original rate plan charge ID. Only available for update subscription.\n",
              "type": "string"
            },
            "productRatePlanChargeId": {
              "description": "",
              "type": "string"
            },
            "productRatePlanId": {
              "description": "",
              "type": "string"
            },
            "tcv": {
              "description": "Total contract value.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "creditMemo": {
          "description": "Container for credit memos.\n\n**Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have the Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n",
          "properties": {
            "amount": {
              "description": "Credit memo amount.",
              "format": "double",
              "type": "number"
            },
            "amountWithoutTax": {
              "description": "Credit memo amount minus tax.",
              "format": "double",
              "type": "number"
            },
            "creditMemoItems": {
              "description": "",
              "items": {
                "$ref": "#/definitions/POSTSubscriptionPreviewCreditMemoItemsType"
              },
              "type": "array"
            },
            "taxAmount": {
              "description": "Tax amount on the credit memo.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "creditMemoId": {
          "description": "The credit memo ID, if a credit memo is generated during the subscription process.\n\n**Note:** This field is only available if you have the Advanced AR Settlements feature enabled.\n",
          "type": "string"
        },
        "invoice": {
          "description": "Container for invoices.\n\n\n **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. Also, the response structure is changed and the following invoice related response fields are moved to this **invoice** container:\n  \n   * amount\n   * amountWithoutTax\n   * taxAmount\n   * invoiceItems\n   * targetDate\n   * chargeMetrics\n",
          "type": "object"
        },
        "invoiceId": {
          "description": "Invoice ID, if an invoice is generated during the update.\n",
          "type": "string"
        },
        "invoiceItems": {
          "description": "Container for invoice items.\n",
          "items": {
            "$ref": "#/definitions/PUTSubscriptionPreviewInvoiceItemsType"
          },
          "type": "array"
        },
        "invoiceTargetDate": {
          "description": "Date through which charges are calculated on the invoice, as yyyy-mm-dd. Preview mode only.\n\n**Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "format": "date",
          "type": "string"
        },
        "paidAmount": {
          "description": "Payment amount, if a payment is collected\n",
          "format": "decimal",
          "type": "string"
        },
        "paymentId": {
          "description": "Payment ID, if a payment is collected.\n",
          "type": "string"
        },
        "previewChargeMetricsResponse": {
          "description": "",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The ID of the resulting new subscription.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.\n\n**Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "format": "date",
          "type": "string"
        },
        "taxAmount": {
          "description": "Tax amount on the invoice.\n",
          "format": "decimal",
          "type": "string"
        },
        "totalDeltaMrr": {
          "description": "Change in the subscription monthly recurring revenue as a result of the update.\n",
          "format": "decimal",
          "type": "string"
        },
        "totalDeltaTcv": {
          "description": "Change in the total contracted value of the subscription as a result of the update.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTSubscriptionResumeResponseType": {
      "properties": {
        "creditMemoId": {
          "description": "The credit memo ID, if a credit memo is generated during the subscription process.\n\n**Note:** This field is only available if you have the Advanced AR Settlements feature enabled.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "Invoice ID, if an invoice is generated during the subscription process.\n",
          "type": "string"
        },
        "paidAmount": {
          "description": "Payment amount, if a payment is collected.\n",
          "format": "decimal",
          "type": "string"
        },
        "paymentId": {
          "description": "Payment ID, if a payment is collected.\n",
          "type": "string"
        },
        "resumeDate": {
          "description": "The date when subscription resumption takes effect, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The subscription ID.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "termEndDate": {
          "description": "The date when the new subscription term ends, as yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "totalDeltaTcv": {
          "description": "Change in the total contracted value of the subscription as a result of the update.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTSubscriptionResumeType": {
      "example": {
        "collect": false,
        "contractEffectiveDate": "2019-02-01",
        "extendsTerm": true,
        "resumePolicy": "SpecificDate",
        "resumeSpecificDate": "2019-10-01",
        "runBilling": true
      },
      "properties": {
        "applyCreditBalance": {
          "description": "Applies a credit balance to an invoice.\n\nIf the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.\n\n\nTo view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.\n\nPrerequisite: `invoice` must be `true`. \n\n**Note:** \n  - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.\n  - This field is deprecated if you have the Advanced AR Settlement feature enabled.\n",
          "type": "boolean"
        },
        "collect": {
          "description": "Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.\n\nIf the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.\n\nThe default value is false.\n\nThis field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.\n\nPrerequisite: `invoice` must be `true`.\n",
          "type": "boolean"
        },
        "contractEffectiveDate": {
          "description": "The date when the customer notifies you that they want to resume their subscription.\n",
          "format": "date",
          "type": "string"
        },
        "extendsTerm": {
          "description": "Whether to extend the subscription term by the length of time the suspension is in effect.\n\nValues: `true`, `false`.\n",
          "type": "boolean"
        },
        "invoice": {
          "description": "**Note:** This field has been replaced by the `runBilling` field. The\n`invoice` field is only available for backward compatibility.\n\n\nCreates an invoice for a subscription. The invoice generated in this\noperation is only for this subscription, not for the entire customer\naccount.\n\n\nIf the value is `true`, an invoice is created. If the value is\n`false`, no action is taken. The default value is `false`.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `196.0` and `207.0`. To use this field in the method, you\nmust set the `zuora-version` parameter to the minor version number in\nthe request header. \n",
          "type": "boolean"
        },
        "invoiceCollect": {
          "description": "**Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.\n\nIf `true`, an invoice is generated and payment collected automatically during the subscription process. If `false` (default), no invoicing or payment takes place.  The invoice generated in this operation is only for this subscription, not for the entire customer account.\n\nThis field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0. ",
          "type": "boolean"
        },
        "invoiceTargetDate": {
          "description": "**Note:** This field has been replaced by the `targetDate` field. The\n`invoiceTargetDate` field is only available for backward\ncompatibility.\n\n\nDate through which to calculate charges if an invoice is generated, as\nyyyy-mm-dd. Default is current date.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `207.0` and earlier.  \n",
          "format": "date",
          "type": "string"
        },
        "resumePeriods": {
          "description": "The length of the period used to specify when the subscription is resumed. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriodsType` field to specify the period.\n\n**Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.\n",
          "type": "string"
        },
        "resumePeriodsType": {
          "description": "The period type used to define when the subscription resumption takes effect. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriods` field to specify the period.\n\nValues: `Day`, `Week`, `Month`, `Year`\n\n**Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.\n",
          "type": "string"
        },
        "resumePolicy": {
          "description": "Resume methods. Specify a way to resume a subscription.\n\nValues:\n\n* `Today`: The subscription resumption takes effect on today's date.\n\n* `FixedPeriodsFromSuspendDate`: The subscription resumption takes effect after a specified period based on the suspend date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.\n\n* `SpecificDate`: The subscription resumption takes effect on a specific date. You must define the specific date in the `resumeSpecificDate` field.\n\n* `FixedPeriodsFromToday`: The subscription resumption takes effect after a specified period based on the today's date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.\n",
          "type": "string"
        },
        "resumeSpecificDate": {
          "description": "A specific date when the subscription resumption takes effect, in the format yyyy-mm-dd.\n\n**Note:** This field is only applicable only when the `resumePolicy` field is set to `SpecificDate`.\n\nThe value should not be earlier than the subscription suspension date.\n",
          "format": "date",
          "type": "string"
        },
        "runBilling": {
          "default": false,
          "description": "Creates an invoice for a subscription. If you have the Advanced AR Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  \n\n\nThe billing documents generated\nin this operation is only for this subscription, not for the entire\ncustomer account.\n\n\nPossible values:\n\n- `true`: An invoice is created. If you have the Advanced AR\nSettlement feature enabled, a credit memo might also be created.\n\n\n- `false`: No invoice is created.\n\n\n**Note:** This field is in Zuora REST API version control. Supported\nminor versions are `211.0` or later. To use this field in the method,\nyou must set the `zuora-version` parameter to the minor version number\nin the request header.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice or a credit memo is generated, as\nyyyy-mm-dd. Default is current date.\n\n\n**Note:** The credit memo is only available if you have the Avdanced\nAR Settlement feature enabled.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `211.0` and later. To use this field in the method, you\nmust set the  `zuora-version` parameter to the minor version number in\nthe request header.\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "resumePolicy"
      ],
      "type": "object"
    },
    "PUTSubscriptionSuspendResponseType": {
      "properties": {
        "creditMemoId": {
          "description": "The credit memo ID, if a credit memo is generated during the subscription process.\n\n**Note:** This field is only available if you have the Advanced AR Settlements feature enabled.\n",
          "type": "string"
        },
        "invoiceId": {
          "description": "Invoice ID, if an invoice is generated during the subscription process.\n",
          "type": "string"
        },
        "paidAmount": {
          "description": "Payment amount, if a payment is collected.\n",
          "format": "decimal",
          "type": "string"
        },
        "paymentId": {
          "description": "Payment ID, if a payment is collected.\n",
          "type": "string"
        },
        "resumeDate": {
          "description": "The date when subscription resumption takes effect, in the format yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The subscription ID.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        },
        "suspendDate": {
          "description": "The date when subscription suspension takes effect, in the format yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "termEndDate": {
          "description": "The date when the new subscription term ends, in the format yyyy-mm-dd.\n",
          "format": "date",
          "type": "string"
        },
        "totalDeltaTcv": {
          "description": "Change in the total contracted value of the subscription as a result of the update.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUTSubscriptionSuspendType": {
      "example": {
        "collect": false,
        "contractEffectiveDate": "2019-02-01",
        "extendsTerm": true,
        "resume": true,
        "resumePolicy": "SpecificDate",
        "resumeSpecificDate": "2019-06-01",
        "runBilling": true,
        "suspendPeriods": 10,
        "suspendPeriodsType": "Day",
        "suspendPolicy": "FixedPeriodsFromToday"
      },
      "properties": {
        "applyCreditBalance": {
          "description": "Applies a credit balance to an invoice.\n\nIf the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.\n\n\nTo view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.\n\nPrerequisite: `invoice` must be `true`. \n\n**Note:** \n  - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.\n  - This field is deprecated if you have the Advanced AR Settlement feature enabled.\n",
          "type": "boolean"
        },
        "collect": {
          "description": "Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.\n\nIf the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.\n\nThe default value is `false`.\n\nPrerequisite: `invoice` must be `true`. \n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` field to the minor version number in the request \n",
          "type": "boolean"
        },
        "contractEffectiveDate": {
          "description": "The date when the customer notifies you that they want to amend their subscription.\n",
          "format": "date",
          "type": "string"
        },
        "extendsTerm": {
          "description": "Whether to extend the subscription term by the length of time the suspension is in effect. Values: `true`, `false`.\n",
          "type": "boolean"
        },
        "invoice": {
          "description": "**Note:** This field has been replaced by the `runBilling` field. The\n`invoice` field is only available for backward compatibility.\n\n\nCreates an invoice for a subscription. The invoice generated in this\noperation is only for this subscription, not for the entire customer\naccount.\n\n\nIf the value is `true`, an invoice is created. If the value is\n`false`, no action is taken. The default value is `false`. \n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `196.0` and `207.0`. To use this field in the method, you\nmust set the zuora-version parameter to the minor version number in\nthe request header. \n",
          "type": "boolean"
        },
        "invoiceCollect": {
          "description": "**Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.\n\nThis field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0.\n",
          "type": "boolean"
        },
        "invoiceTargetDate": {
          "description": "**Note:** This field has been replaced by the `targetDate` field. The\n`invoiceTargetDate` field is only available for backward\ncompatibility.\n\n\nDate through which to calculate charges if an invoice is generated, as\nyyyy-mm-dd. Default is current date.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `207.0` and earlier.  \n",
          "format": "date",
          "type": "string"
        },
        "resume": {
          "description": "Whether to set when to resume a subscription when creating a suspend amendment. Values: `true`, `false`.\n",
          "type": "boolean"
        },
        "resumePeriods": {
          "description": "The length of the period used to specify when the subscription is resumed. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriodsType` field to specify the period.\n\n**Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.\n",
          "type": "string"
        },
        "resumePeriodsType": {
          "description": "The period type used to define when the subscription resumption takes effect. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the resumePeriods field to specify the period.\n\nValues: `Day`, `Week`, `Month`, `Year`\n\n**Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.\n",
          "type": "string"
        },
        "resumePolicy": {
          "description": "Resume methods. Specify a way to resume a subscription. Values:\n\n* `Today`: The subscription resumption takes effect on today's date.\n\n* `FixedPeriodsFromSuspendDate`: The subscription resumption takes effect after a specified period based on the suspend date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.\n\n* `SpecificDate`: The subscription resumption takes effect on a specific date. You must define the specific date in the `resumeSpecificDate` field.\n\n* `FixedPeriodsFromToday`: The subscription resumption takes effect after a specified period based on the today's date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.\n",
          "type": "string"
        },
        "resumeSpecificDate": {
          "description": "A specific date when the subscription resumption takes effect, in the format yyyy-mm-dd.\n\n**Note:** This field is only applicable only when the `resumePolicy` field is set to `SpecificDate`.\n\nThe value should not be earlier than the subscription suspension date.\n",
          "format": "date",
          "type": "string"
        },
        "runBilling": {
          "default": false,
          "description": "Creates an invoice for a subscription. If you have the Advanced AR Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  \n\n\nThe billing documents generated\nin this operation is only for this subscription, not for the entire\ncustomer account.\n\n\nPossible values:\n\n- `true`: An invoice is created. If you have the Advanced AR\nSettlement feature enabled, a credit memo might also be created.\n\n\n- `false`: No invoice is created.\n\n\n**Note:** This field is in Zuora REST API version control. Supported\nminor versions are `211.0` or later. To use this field in the method,\nyou must set the `zuora-version` parameter to the minor version number\nin the request header.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "suspendPeriods": {
          "description": "The length of the period used to specify when the subscription suspension takes effect. The subscription suspension takes effect after a specified period based on today's date. You must use this field together with the `suspendPeriodsType` field to specify the period.\n\n**Note:** This field is only applicable only when the suspendPolicy field is set to FixedPeriodsFromToday.\n",
          "type": "string"
        },
        "suspendPeriodsType": {
          "description": "The period type used to define when the subscription suspension takes effect. The subscription suspension takes effect after a specified period based on today's date. You must use this field together with the suspendPeriods field to specify the period.\n\nType: string (enum)\n\nValues: `Day`, `Week`, `Month`, `Year`\n\n**Note:** This field is only applicable only when the suspendPolicy field is set to FixedPeriodsFromToday.\n",
          "type": "string"
        },
        "suspendPolicy": {
          "description": "Suspend methods. Specify a way to suspend a subscription. \n\nValue:\n\n* `Today`: The subscription suspension takes effect on today's date.\n* `EndOfLastInvoicePeriod`: The subscription suspension takes effect at the end of the last invoice period. The suspend date defaults to a date that is one day after the last invoiced period. You can choose this option to avoid any negative invoices (credits) issued back to the customer after the subscription suspension. \n* `SpecificDate`: The subscription suspension takes effect on a specific date. You must define the specific date in the `suspendSpecificDate` field.\n* `FixedPeriodsFromToday`: The subscription suspension takes effect after a specified period based on today's date. You must specify the `suspendPeriods` and `suspendPeriodsType` fields to define the period.\n",
          "type": "string"
        },
        "suspendSpecificDate": {
          "description": "A specific date when the subscription suspension takes effect, in the format yyyy-mm-dd.\n\n**Note:** This field is only applicable only when the suspendPolicy field is set to SpecificDate.\n\nThe value should not be earlier than the subscription contract effective date, later than the subscription term end date, or within a period for which the customer has been invoiced.\n",
          "format": "date",
          "type": "string"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice or a credit memo is generated, as\nyyyy-mm-dd. Default is current date.\n\n\n**Note:** The credit memo is only available if you have the Avdanced\nAR Settlement feature enabled.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `211.0` and later. To use this field in the method, you\nmust set the  `zuora-version` parameter to the minor version number in\nthe request header.\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "suspendPolicy"
      ],
      "type": "object"
    },
    "PUTSubscriptionType": {
      "example": {
        "autoRenew": false,
        "collect": false,
        "currentTerm": "10",
        "currentTermPeriodType": "Month",
        "myCustomField__c": "test",
        "notes": "Test UPDATE subscription from z-ruby-sdk",
        "renewalSetting": "RENEW_WITH_SPECIFIC_TERM",
        "renewalTerm": "4",
        "renewalTermPeriodType": "Month",
        "runBilling": true,
        "termType": "TERMED",
        "update": [
          {
            "chargeUpdateDetails": [
              {
                "quantity": 12,
                "ratePlanChargeId": "2c92c8f83dcbd8b1013dcce0eb510075"
              }
            ],
            "contractEffectiveDate": "2013-04-28",
            "ratePlanId": "2c92c8f83dcbd8b1013dcce0ea7e006f"
          }
        ]
      },
      "properties": {
        "CpqBundleJsonId__QT": {
          "description": "",
          "type": "string"
        },
        "OpportunityCloseDate__QT": {
          "description": "The closing date of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "OpportunityName__QT": {
          "description": "The unique identifier of the Opportunity. This field is populated when the subscription originates from Zuora Quotes.\n\nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteBusinessType__QT": {
          "description": "The specific identifier for the type of business transaction the Quote represents such as `New`, `Upsell`, `Downsell`, `Renewal`, or `Churn`. This field is populated when the subscription originates from Zuora Quotes.\n          \nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteNumber__QT": {
          "description": "The unique identifier of the Quote. This field is populated when the subscription originates from Zuora Quotes.\n          \nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "QuoteType__QT": {
          "description": "The Quote type that represents the subscription lifecycle stage such as `New`, `Amendment`, `Renew`, or `Cancel`. This field is populated when the subscription originates from Zuora Quotes.\n          \nThis field is used only for reporting subscription metrics. \n\n",
          "type": "string"
        },
        "add": {
          "description": "Container for adding one or more rate plans.\n",
          "items": {
            "$ref": "#/definitions/PUTSrpAddType"
          },
          "type": "array"
        },
        "applyCreditBalance": {
          "description": "Applies a credit balance to an invoice.\n\nIf the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.\n\n\nTo view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.\n\nPrerequisite: `invoice` must be `true`. \n\n**Note:** \n  - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.\n  - This field is deprecated if you have the Advanced AR Settlement feature enabled.\n",
          "type": "boolean"
        },
        "autoRenew": {
          "description": "If `true`, this subscription automatically renews at the end of the subscription term. Default is `false`.\n",
          "type": "boolean"
        },
        "collect": {
          "description": "Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account. If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.\n\nThe default value is false.\n\n**Prerequisite:** `invoice` must be `true`.\n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.\n\n",
          "type": "boolean"
        },
        "currentTerm": {
          "description": "The length of the period for the current subscription term. If `termType` is `TERMED`, this field is required and must be greater than `0`. If `termType` is `EVERGREEN`, this value is ignored. Default is `0`.\n",
          "format": "int64",
          "type": "integer"
        },
        "currentTermPeriodType": {
          "description": "The period type for the current subscription term.\n\nThis field is used with the `CurrentTerm` field to specify the current subscription term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "includeExistingDraftDocItems": {
          "description": "Specifies whether to include draft invoice items in subscription previews.\nValues are:\n\n* `true` (default). Includes draft invoice items in the preview result.\n* `false`. Excludes draft invoice items in the preview result.\n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "type": "boolean"
        },
        "includeExistingDraftInvoiceItems": {
          "description": "Specifies whether to include draft invoice items in subscription previews.\nValues are:\n\n* `true` (default). Includes draft invoice items in the preview result.\n* `false`. Excludes draft invoice items in the preview result.\n\n**Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "type": "boolean"
        },
        "invoice": {
          "description": "**Note:** This field has been replaced by the `runBilling` field. The\n`invoice` field is only available for backward compatibility.\n\n\nCreates an invoice for a subscription. The invoice generated in this\noperation is only for this subscription, not for the entire customer\naccount.\n\n\nIf the value is `true`, an invoice is created. If the value is\n`false`, no action is taken. The default value is `false`. \n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `196.0` and `207.0`. To use this field in the method, you\nmust set the zuora-version parameter to the minor version number in\nthe request header. \n",
          "type": "boolean"
        },
        "invoiceCollect": {
          "description": "**Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.\n\nIf `true`, an invoice is generated and payment collected automatically during the subscription process. If `false` (default), no invoicing or payment takes place.  The invoice generated in this operation is only for this subscription, not for the entire customer account.\n\nThis field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0. ",
          "type": "boolean"
        },
        "invoiceSeparately": {
          "description": "Separates a single subscription from other subscriptions and invoices the charge independently. \n\nIf the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.\n\nThe default value is `false`.\nPrerequisite: The default subscription setting Enable Subscriptions to be Invoiced Separately must be set to Yes.\n",
          "type": "boolean"
        },
        "invoiceTargetDate": {
          "description": "**Note:** This field has been replaced by the `targetDate` field. The\n`invoiceTargetDate` field is only available for backward\ncompatibility.\n\n\nDate through which to calculate charges if an invoice is generated, as\nyyyy-mm-dd. Default is current date.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `207.0` and earlier.  \n",
          "format": "date",
          "type": "string"
        },
        "notes": {
          "description": "String of up to 500 characters.\n",
          "type": "string"
        },
        "preview": {
          "description": "If `true` the update is made in preview mode. The default setting is `false`.\n",
          "type": "boolean"
        },
        "previewType": {
          "description": "The type of preview you will receive. \n\nThis field is in Zuora REST API version control. The supported values of this field depend on the REST API minor version you specified in the request header.\n\n\n* If you do not specify the REST API minor version or specify the minor version number to one of following values in the request header:\n \n  * 186.0\n  * 187.0\n  * 188.0\n  * 189.0\n  * 196.0 \n  \n  The following values are supported in the **previewType** field:\n\n  * InvoiceItem\n  * ChargeMetrics\n  * InvoiceItemChargeMetrics\n  \n  The default value is InvoiceItem.\n\n* If you specify the REST API minor version to 207.0 or later in the request header, the following values are supported in the **previewType** field:\n\n  - LegalDoc\n  - ChargeMetrics\n  - LegalDocChargeMetrics\n\n  The default value is LegalDoc.\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.\n",
          "type": "string"
        },
        "remove": {
          "description": "Container for removing one or more rate plans.\n",
          "items": {
            "$ref": "#/definitions/PUTSrpRemoveType"
          },
          "type": "array"
        },
        "renewalSetting": {
          "description": "Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed. \n\nValues are:\n\n* `RENEW_WITH_SPECIFIC_TERM` (default)\n* `RENEW_TO_EVERGREEN`\n",
          "type": "string"
        },
        "renewalTerm": {
          "description": "The length of the period for the subscription renewal term. Default is `0`.\n",
          "format": "int64",
          "type": "integer"
        },
        "renewalTermPeriodType": {
          "description": "\nThe period type for the subscription renewal term.\n\nThis field is used with the `renewalTerm` field to specify the subscription renewal term.\n\nValues are:\n\n* `Month` (default)\n* `Year`\n* `Day`\n* `Week`\n",
          "type": "string"
        },
        "runBilling": {
          "default": false,
          "description": "Creates an invoice for a subscription. If you have the Advanced AR Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Advanced_AR_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  \n\n\nThe billing documents generated\nin this operation is only for this subscription, not for the entire\ncustomer account.\n\n\nPossible values:\n\n- `true`: An invoice is created. If you have the Advanced AR\nSettlement feature enabled, a credit memo might also be created.\n\n\n- `false`: No invoice is created.\n\n\n**Note:** This field is in Zuora REST API version control. Supported\nminor versions are `211.0` or later. To use this field in the method,\nyou must set the `zuora-version` parameter to the minor version number\nin the request header.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "targetDate": {
          "description": "Date through which to calculate charges if an invoice or a credit memo is generated, as\nyyyy-mm-dd. Default is current date.\n\n\n**Note:** The credit memo is only available if you have the Avdanced\nAR Settlement feature enabled.\n\n\nThis field is in Zuora REST API version control. Supported minor\nversions are `211.0` and later. To use this field in the method, you\nmust set the  `zuora-version` parameter to the minor version number in\nthe request header.\n",
          "format": "date",
          "type": "string"
        },
        "termStartDate": {
          "description": "Date the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date. \n",
          "format": "date",
          "type": "string"
        },
        "termType": {
          "description": "Possible values are: `TERMED`, `EVERGREEN`.\n",
          "type": "string"
        },
        "update": {
          "description": "Container for updating one or more rate plans.\n",
          "items": {
            "$ref": "#/definitions/PUTSrpUpdateType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PUTTaxationItemType": {
      "example": {
        "exemptAmount": 0,
        "financeInformation": {
          "onAccountAccountingCode": "Check",
          "salesTaxPayableAccountingCode": ""
        },
        "jurisdiction": "CALIFORNIA",
        "locationCode": "06",
        "name": "STATE TAX",
        "taxAmount": 1,
        "taxCode": "ServiceTaxCode",
        "taxCodeDescription": "This is tax code description!",
        "taxDate": "2016-06-05",
        "taxRate": 0.0625,
        "taxRateDescription": "This is tax rate description!",
        "taxRateType": "Percentage"
      },
      "properties": {
        "exemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the taxation item.\n",
          "properties": {
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field. \n",
          "type": "string"
        },
        "name": {
          "description": "The name of the taxation item to be updated.\n",
          "type": "string"
        },
        "taxAmount": {
          "description": "The amount of the tax applied to the credit or debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific credit or debit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date when the tax is applied to the credit or debit memo.\n",
          "format": "date",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the credit or debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate. \n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the credit or debit memo.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        }
      },
      "required": [
        "taxRate",
        "jurisdiction",
        "name",
        "taxRateType",
        "taxAmount"
      ],
      "type": "object"
    },
    "PUTVerifyPaymentMethodResponseType": {
      "properties": {
        "paymentMethodId": {
          "description": "The ID of the verified payment method.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      }
    },
    "PUTVerifyPaymentMethodType": {
      "example": {
        "gatewayOptions": {
          "Comments": "test",
          "IPAddress": "192.168.1.1"
        },
        "paymentGatewayName": "Adyen",
        "securityCode": "737"
      },
      "properties": {
        "gatewayOptions": {
          "description": "The field used to pass gateway-specific parameters and parameter values.\n",
          "properties": {
            "key": {
              "description": "The name of a gateway-specific parameter.\n",
              "type": "string"
            },
            "value": {
              "description": "The value of the gateway-specific parameter.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "paymentGatewayName": {
          "description": "The name of the payment gateway instance. If no value is specified for this field, the default payment gateway of the customer account will be used.\n",
          "type": "string"
        },
        "securityCode": {
          "description": "The CVV or CVV2 security code for the credit card or debit card. To ensure PCI compliance, the value of this field is not stored and cannot be queried.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PUT_BasicSummaryJournalEntryType": {
      "example": {
        "cf_issueNumberc": "1000001",
        "journalEntryItems": [
          {
            "accountingCodeName": "Accounts Receivable",
            "cf_phasesc": "Phase 1",
            "type": "Credit"
          },
          {
            "accountingCodeName": "",
            "cf_phases__c": "Phase 1",
            "type": "Debit"
          }
        ],
        "notes": "Transfer to accounting system",
        "transferredToAccounting": "Yes"
      },
      "properties": {
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "journalEntryItems": {
          "description": "Key name that represents the list of journal entry items.\n",
          "items": {
            "$ref": "#/definitions/PUTJournalEntryItemType"
          },
          "type": "array"
        },
        "notes": {
          "description": "Additional information about this record.\n\n***Character limit:*** 2,000\n",
          "type": "string"
        },
        "transferredToAccounting": {
          "description": "Status shows whether the journal entry has been transferred to an accounting system. \n\nThis field cannot be changed after the summary journal entry has been canceled.\n\n**Note:** The Zuora Finance ***Override Transferred to Accounting*** permission is required to change `transferredToAccounting` from `Yes` to any other value.\n",
          "enum": [
            "No",
            "Processing",
            "Yes",
            "Error",
            "Ignore"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentCollectionResponseType": {
      "properties": {
        "nextPage": {
          "description": "URL to retrieve the next page of the response if it exists; otherwise absent.\n",
          "format": "URL",
          "type": "string"
        },
        "payments": {
          "description": "Container for payments.\n",
          "items": {
            "$ref": "#/definitions/GETARPaymentTypewithSuccess"
          },
          "type": "array"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PaymentDebitMemoApplicationApplyRequestType": {
      "properties": {
        "amount": {
          "description": "The amount that is applied from the payment to the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "debitMemoId": {
          "description": "The unique ID of the debit memo that the payment is applied to.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for debit memo items.\n\n**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/PaymentDebitMemoApplicationItemApplyRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount"
      ],
      "title": "debitMemos",
      "type": "object"
    },
    "PaymentDebitMemoApplicationCreateRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment associated with the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "debitMemoId": {
          "description": "The unique ID of the debit memo that the payment is created on.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for debit memo items.\n\n**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/PaymentDebitMemoApplicationItemCreateRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount"
      ],
      "title": "debitMemos",
      "type": "object"
    },
    "PaymentDebitMemoApplicationItemApplyRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment that is applied to the specific debit memo or taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "debitMemoItemId": {
          "description": "The ID of the specific debit memo item.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the specific taxation item.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "PaymentDebitMemoApplicationItemCreateRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment associated with the specific debit memo or taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "debitMemoItemId": {
          "description": "The ID of the specific debit memo item.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the specific taxation item.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "PaymentDebitMemoApplicationItemUnapplyRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment that is unapplied from the specific debit mem or taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "debitMemoItemId": {
          "description": "The ID of the specific debit memo item.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the specific taxation item.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "PaymentDebitMemoApplicationUnapplyRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment that is unapplied from the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "debitMemoId": {
          "description": "The unique ID of the debit memo that the payment is unapplied from.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for debit memo items.\n\n**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/PaymentDebitMemoApplicationItemUnapplyRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount"
      ],
      "title": "debitMemos",
      "type": "object"
    },
    "PaymentInvoiceApplicationApplyRequestType": {
      "properties": {
        "amount": {
          "description": "The amount that is applied from the payment to the invoice.\n",
          "format": "double",
          "type": "number"
        },
        "invoiceId": {
          "description": "The unique ID of the invoice that the payment is applied to.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for invoice items.\n\n**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/PaymentInvoiceApplicationItemApplyRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount"
      ],
      "title": "invoices",
      "type": "object"
    },
    "PaymentInvoiceApplicationCreateRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment associated with the invoice.\n",
          "format": "double",
          "type": "number"
        },
        "invoiceId": {
          "description": "The unique ID of the invoice that the payment is created on.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for invoice items.\n\n**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/PaymentInvoiceApplicationItemCreateRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount"
      ],
      "title": "invoices",
      "type": "object"
    },
    "PaymentInvoiceApplicationItemApplyRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment that is applied to the specific invoice or taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "invoiceItemId": {
          "description": "The ID of the specific invoice item.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the specific taxation item.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "PaymentInvoiceApplicationItemCreateRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment associated with the specific invoice or taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "invoiceItemId": {
          "description": "The ID of the specific invoice item.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the specific taxation item.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "PaymentInvoiceApplicationItemUnapplyRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment that is unapplied from the specific invoice or taxation item.\n",
          "format": "double",
          "type": "number"
        },
        "invoiceItemId": {
          "description": "The ID of the specific invoice item.\n",
          "type": "string"
        },
        "taxItemId": {
          "description": "The ID of the specific taxation item.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "PaymentInvoiceApplicationUnapplyRequestType": {
      "properties": {
        "amount": {
          "description": "The amount of the payment that is unapplied from the invoice.\n",
          "format": "double",
          "type": "number"
        },
        "invoiceId": {
          "description": "The unique ID of the invoice that the payment is unapplied from.\n",
          "type": "string"
        },
        "items": {
          "description": "Container for invoice items.\n\n**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/PaymentInvoiceApplicationItemUnapplyRequestType"
          },
          "type": "array"
        }
      },
      "required": [
        "amount"
      ],
      "title": "invoices",
      "type": "object"
    },
    "PostBillingPreviewParam": {
      "example": {
        "accountId": "402890b75972406c0159724cd4d00011",
        "assumeRenewal": "None",
        "chargeTypeToExclude": "",
        "includingEvergreenSubscription": "true",
        "targetDate": "2017-05-10"
      },
      "properties": {
        "accountId": {
          "description": "ID of the customer account to which the billing preview applies.\n",
          "maxLength": 255,
          "type": "string"
        },
        "assumeRenewal": {
          "description": "Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed.\n\nSet one of the following values in this field to decide how the assumption is applied in the billing preview.\n\n  * **All:** The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.\n  \n  * **None:** (Default) The assumption is not applied to the subscriptions. Zuora generates preview invoice item data and credit memo item data based on the current term end date and the target date.\n  \n    * If the target date is later than the current term end date, Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the current term end date.\n\n    * If the target date is earlier than the current term end date, Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.\n\n  * **Autorenew:** The assumption is applied to the subscriptions that have auto-renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.\n\n**Note:** \n  - This field can only be used if the subscription renewal term is not set to 0.  \n  \n  \n  - The credit memo item data is only available if you have Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "type": "string"
        },
        "chargeTypeToExclude": {
          "description": "The charge types to exclude from the billing preview.\n\n**Possible values:** OneTime, Recurring, Usage, and any combination of these values.\n",
          "type": "string"
        },
        "includingEvergreenSubscription": {
          "description": "Indicates if evergreen subscriptions are included in the billingPreview call.\n",
          "type": "boolean"
        },
        "targetDate": {
          "description": "The target date for the billingPreview call. The billingPreview call generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the TargetDate. \n\nIf the TargetDate is later than the subscription current term end date, the preview invoice item data and credit memo item data is generated from the first day of the customer's next billing period to the current term end date. If you want to generate preview invoice item data and credit memo item data past the end of the subscription current term, specify the `AssumeRenewal` field in the request.\n\n\n**Note:** The credit memo item data is only available if you have Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "accountId",
        "targetDate"
      ],
      "type": "object"
    },
    "PostBillingPreviewRunParam": {
      "example": {
        "assumeRenewal": "None",
        "batch": "",
        "chargeTypeToExclude": "",
        "includingEvergreenSubscription": "true",
        "targetDate": "2017-01-10"
      },
      "properties": {
        "assumeRenewal": {
          "description": "Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed.\n\nSet one of the following values in this field to decide how the assumption is applied in the billing preview.\n\n  * **All:** The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.\n  \n  * **None:** (Default) The assumption is not applied to the subscriptions. Zuora generates preview invoice item data and credit memo item data based on the current term end date and the target date.\n  \n    * If the target date is later than the current term end date, Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the current term end date.\n\n    * If the target date is earlier than the current term end date, Zuora generates preview invoice item data and credit memeo item data from the first day of the customer's next billing period to the target date.\n\n  * **Autorenew:** The assumption is applied to the subscriptions that have auto-renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.\n  \n**Note:** \n  - This field can only be used if the subscription renewal term is not set to 0.  \n  \n  \n  - The credit memo item data is only available if you have Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). \n  \n",
          "type": "string"
        },
        "batch": {
          "description": "The customer batch to include in the billing preview run. If not specified, all customer batches are included.\n",
          "maxLength": 255,
          "type": "string"
        },
        "chargeTypeToExclude": {
          "description": "The charge types to exclude from the forecast run.\n\n**Possible values:** OneTime, Recurring, Usage, and any comma-separated combination of these values.\n",
          "type": "string"
        },
        "includingEvergreenSubscription": {
          "description": "Indicates if evergreen subscriptions are included in the billing preview run. By default, evergreen subscriptions are not included.\n",
          "type": "boolean"
        },
        "targetDate": {
          "description": "The target date for the billing preview run. The billing preview run generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the TargetDate. \n\nIf the TargetDate is later than the subscription current term end date, the preview invoice item data and credit memo item data is generated from the first day of the customer's next billing period to the current term end date. If you want to generate preview invoice item data and credit memo item data past the end of the subscription current term, specify the AssumeRenewal field in the request.\n\n**Note:** The credit memo item data is only available if you have Advanced AR Settlement feature enabled. The Advanced AR Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "targetDate"
      ],
      "type": "object"
    },
    "PostCreditMemoEmailRequestType": {
      "example": {
        "emailAddresses": "test1@test.com,test2@test.com",
        "includeAdditionalEmailAddresses": false,
        "useEmailTemplateSetting": false
      },
      "properties": {
        "emailAddresses": {
          "description": "The valid email addresses you want to email a credit memo to. Use commas to separate email addresses.\n\n**Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.\n",
          "type": "string"
        },
        "includeAdditionalEmailAddresses": {
          "default": false,
          "description": "Indicates whether to send a credit memo to the additional email addresses of the memo account. \n\n\nYou can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "useEmailTemplateSetting": {
          "default": false,
          "description": "Indicates whether to email a credit memo based on the email template setting. \n\nIf you set this field to `true`, the credit memo is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PostDebitMemoEmailType": {
      "example": {
        "emailAddresses": "test1@test.com,test2@test.com",
        "includeAdditionalEmailAddresses": false,
        "useEmailTemplateSetting": false
      },
      "properties": {
        "emailAddresses": {
          "description": "The valid email addresses you want to email a debit memo to. Use commas to separate email addresses.\n\n**Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.\n",
          "type": "string"
        },
        "includeAdditionalEmailAddresses": {
          "default": false,
          "description": "Indicates whether to send a debit memo to the additional email addresses of the memo account. \n\n\nYou can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "useEmailTemplateSetting": {
          "default": false,
          "description": "Indicates whether to email a debit memo based on the email template setting. \n\nIf you set this field to `true`, the debit memo is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PostGenerateBillingDocumentType": {
      "example": {
        "autoPost": false,
        "effectiveDate": "2017-05-23",
        "subscriptionIds": [
          "4028905558b483220158b48983dd0015",
          "6028905558b483220158b68983dd0016"
        ],
        "targetDate": "2017-08-23"
      },
      "properties": {
        "autoPost": {
          "default": false,
          "description": "Determines whether to auto post the billing documents once the draft billing documents are generated. \n\nIf an error occurred during posting billing documents, the draft billing documents are not generated too.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "effectiveDate": {
          "description": "The date on which to generate the billing documents, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "subscriptionIds": {
          "description": "The IDs of the subscriptions that you want to create the billing documents for. \n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "targetDate": {
          "description": "The date used to determine which charges are to be billed, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostInvoiceEmailRequestType": {
      "example": {
        "emailAddresses": "test1@test.com,test2@test.com",
        "includeAdditionalEmailAddresses": false,
        "useEmailTemplateSetting": false
      },
      "properties": {
        "emailAddresses": {
          "description": "The valid email addresses you want to email an invoice to. Use commas to separate email addresses.\n\n**Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.\n",
          "type": "string"
        },
        "includeAdditionalEmailAddresses": {
          "default": false,
          "description": "Indicates whether to send an invoice to the additional email addresses of the invoice account. \n\n\nYou can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        },
        "useEmailTemplateSetting": {
          "default": false,
          "description": "Indicates whether to email an invoice based on the email template setting. \n\nIf you set this field to `true`, the invoice is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.\n",
          "enum": [
            true,
            false
          ],
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PostNonRefRefundType": {
      "example": {
        "items": [
          {
            "amount": 7,
            "creditMemoItemId": "4028905f5a890526015a8d73f74b0016"
          },
          {
            "amount": 0.1,
            "creditTaxItemId": "4028905f5a890526015a8d73f90c0018"
          }
        ],
        "methodType": "CreditCard",
        "refundDate": "2017-03-02",
        "totalAmount": 7.1,
        "type": "External"
      },
      "properties": {
        "comment": {
          "description": "Comments about the refund.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field\nname is case-sensitive.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the refund.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "items": {
          "description": "Container for credit memo items.\n\n**Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n",
          "items": {
            "$ref": "#/definitions/RefundCreditMemoItemType"
          },
          "type": "array"
        },
        "methodType": {
          "description": "How an external refund was issued to a customer. This field is required for an external refund and must be left empty for an electronic refund. You can issue an external refund on a credit memo.\n",
          "enum": [
            "ACH",
            "Cash",
            "Check",
            "CreditCard",
            "PayPal",
            "WireTransfer",
            "DebitCard",
            "CreditCardReferenceTransaction",
            "BankTransfer",
            "Other"
          ],
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The ID of the payment method used for the refund. This field is required for an electronic refund, and the value must be an electronic payment method ID. This field must be left empty for an external refund. \n",
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.\n",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "refundDate": {
          "description": "The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the credit memo date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.\n",
          "format": "date",
          "type": "string"
        },
        "secondRefundReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "totalAmount": {
          "description": "The total amount of the refund. The amount cannot exceed the unapplied amount of the associated credit memo. If the original credit memo was applied to one or more invoices or debit memos, you have to unapply a full or partial credit memo from the invoices or debit memos, and then refund the full or partial unapplied credit memo to your customers.\n",
          "format": "double",
          "type": "number"
        },
        "type": {
          "description": "The type of the refund.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        }
      },
      "required": [
        "totalAmount",
        "type"
      ],
      "type": "object"
    },
    "PostRefundType": {
      "example": {
        "comment": "Create a refund for unapplied payment.",
        "methodType": "CreditCard",
        "reasonCode": "Standard Refund",
        "refundDate": "2017-03-01",
        "totalAmount": 4,
        "type": "External"
      },
      "properties": {
        "comment": {
          "description": "Comments about the refund.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the refund.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "methodType": {
          "description": "How an external refund was issued to a customer. This field is required for an external refund and must be left empty for an electronic refund. You can issue an external refund on an electronic payment.\n",
          "enum": [
            "ACH",
            "Cash",
            "Check",
            "CreditCard",
            "PayPal",
            "WireTransfer",
            "DebitCard",
            "CreditCardReferenceTransaction",
            "BankTransfer",
            "Other"
          ],
          "type": "string"
        },
        "reasonCode": {
          "description": "A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n",
          "type": "string"
        },
        "referenceId": {
          "description": "The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.\n",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "refundDate": {
          "description": "The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.\n",
          "format": "date",
          "type": "string"
        },
        "secondRefundReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "totalAmount": {
          "description": "The total amount of the refund. The amount cannot exceed the unapplied amount of the associated payment. If the original payment was applied to one or more invoices or debit memos, you have to unapply a full or partial payment from the invoices or debit memos, and then refund the full or partial unapplied payment to your customers. \n",
          "format": "double",
          "type": "number"
        },
        "type": {
          "description": "The type of the refund.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        }
      },
      "required": [
        "totalAmount",
        "type"
      ],
      "type": "object"
    },
    "PriceChangeParams": {
      "description": "The group fields of the price change related function.",
      "properties": {
        "priceChangeOption": {
          "description": "The options about how the charge price changes when renewed.",
          "enum": [
            "NoChange",
            "SpecificPercentageValue",
            "UseLatestProductCatalogPricing"
          ],
          "type": "string"
        },
        "priceIncreasePercentage": {
          "format": "BigDecimal",
          "minimum": -100,
          "type": "number"
        }
      },
      "type": "object"
    },
    "PricingOverride": {
      "description": "A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.",
      "properties": {
        "discount": {
          "$ref": "#/definitions/DiscountPricingOverride"
        },
        "oneTimeFlatFee": {
          "$ref": "#/definitions/OneTimeFlatFeePricingOverride"
        },
        "oneTimePerUnit": {
          "$ref": "#/definitions/OneTimePerUnitPricingOverride"
        },
        "oneTimeTiered": {
          "$ref": "#/definitions/OneTimeTieredPricingOverride"
        },
        "oneTimeVolume": {
          "$ref": "#/definitions/OneTimeVolumePricingOverride"
        },
        "recurringFlatFee": {
          "$ref": "#/definitions/RecurringFlatFeePricingOverride"
        },
        "recurringPerUnit": {
          "$ref": "#/definitions/RecurringPerUnitPricingOverride"
        },
        "recurringTiered": {
          "$ref": "#/definitions/RecurringTieredPricingOverride"
        },
        "recurringVolume": {
          "$ref": "#/definitions/RecurringVolumePricingOverride"
        },
        "usageFlatFee": {
          "$ref": "#/definitions/UsageFlatFeePricingOverride"
        },
        "usageOverage": {
          "$ref": "#/definitions/UsageOveragePricingOverride"
        },
        "usagePerUnit": {
          "$ref": "#/definitions/UsagePerUnitPricingOverride"
        },
        "usageTiered": {
          "$ref": "#/definitions/UsageTieredPricingOverride"
        },
        "usageTieredWithOverage": {
          "$ref": "#/definitions/UsageTieredWithOveragePricingOverride"
        },
        "usageVolume": {
          "$ref": "#/definitions/UsageVolumePricingOverride"
        }
      },
      "type": "object"
    },
    "PricingUpdate": {
      "properties": {
        "recurringFlatFee": {
          "$ref": "#/definitions/RecurringFlatFeePricingUpdate"
        },
        "recurringPerUnit": {
          "$ref": "#/definitions/RecurringPerUnitPricingUpdate"
        },
        "recurringTiered": {
          "$ref": "#/definitions/RecurringTieredPricingUpdate"
        },
        "recurringVolume": {
          "$ref": "#/definitions/RecurringVolumePricingUpdate"
        },
        "usageFlatFee": {
          "$ref": "#/definitions/UsageFlatFeePricingUpdate"
        },
        "usageOverage": {
          "$ref": "#/definitions/UsageOveragePricingUpdate"
        },
        "usagePerUnit": {
          "$ref": "#/definitions/UsagePerUnitPricingUpdate"
        },
        "usageTiered": {
          "$ref": "#/definitions/UsageTieredPricingUpdate"
        },
        "usageTieredWithOverage": {
          "$ref": "#/definitions/UsageTieredWithOveragePricingUpdate"
        },
        "usageVolume": {
          "$ref": "#/definitions/UsageVolumePricingUpdate"
        }
      },
      "type": "object"
    },
    "ProvisionEntityResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request is successful.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyActionamendRequest": {
      "example": {
        "requests": [
          {
            "AmendOptions": {
              "GenerateInvoice": false,
              "InvoiceProcessingOptions": {},
              "ProcessPayments": false
            },
            "Amendments": [
              {
                "ContractEffectiveDate": "2016-10-20",
                "CurrentTerm": 3,
                "CurrentTermPeriodType": "Day",
                "CustomerAcceptanceDate": "2016-10-20",
                "Description": "AM7j4i2rsxb9",
                "EffectiveDate": "2016-10-20",
                "Name": "AM7j4i2rsxb9",
                "RatePlanData": {
                  "RatePlan": {
                    "ProductRatePlanId": "2c93808457d787030157e02e250e1e9a"
                  },
                  "RatePlanChargeData": [
                    {
                      "RatePlanCharge": {
                        "ProductRatePlanChargeId": "2c93808457d787030157e02e26701e9d"
                      }
                    }
                  ]
                },
                "RenewalSetting": "RENEW_TO_EVERGREEN",
                "RenewalTerm": 2,
                "RenewalTermPeriodType": "Day",
                "ServiceActivationDate": "2016-10-20",
                "Status": "Completed",
                "SubscriptionId": "2c93808457d787030157e02e23911e8d",
                "TermStartDate": "2016-10-20",
                "TermType": "TERMED",
                "Type": "NewProduct"
              }
            ],
            "PreviewOptions": {
              "EnablePreviewMode": false
            }
          }
        ]
      },
      "properties": {
        "requests": {
          "description": "",
          "items": {
            "$ref": "#/definitions/AmendRequest"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProxyActionamendResponse": {
      "properties": {
        "results": {
          "description": "",
          "items": {
            "$ref": "#/definitions/AmendResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProxyActioncreateRequest": {
      "example": {
        "objects": [
          {
            "AccountingCode": "Accounts Receivable",
            "AdjustmentDate": "2016-10-20",
            "Amount": 1.2,
            "Comment": "this is comments",
            "InvoiceId": "2c93808457d787030157e03248c75142",
            "InvoiceNumber": "INV00000001",
            "ReferenceId": "refid-1476935174845",
            "SourceId": "2c93808457d787030157e03248c95144",
            "SourceType": "InvoiceDetail",
            "Type": "Credit"
          }
        ],
        "type": "InvoiceItemAdjustment"
      },
      "properties": {
        "objects": {
          "description": "",
          "items": {
            "$ref": "#/definitions/zObject"
          },
          "type": "array"
        },
        "type": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "objects",
        "type"
      ],
      "type": "object"
    },
    "ProxyActioncreateResponse": {
      "properties": {
        "result": {
          "description": "",
          "items": {
            "$ref": "#/definitions/SaveResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProxyActiondeleteRequest": {
      "example": {
        "ids": [
          "2c93808457d787030157e031fcd34e19"
        ],
        "type": "ProductRatePlanCharge"
      },
      "properties": {
        "ids": {
          "description": "A list of one or more IDs for the objects you want to delete.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of object that you are deleting.\n",
          "type": "string"
        }
      },
      "required": [
        "type",
        "ids"
      ],
      "type": "object"
    },
    "ProxyActiondeleteResponse": {
      "properties": {
        "result": {
          "description": "",
          "items": {
            "$ref": "#/definitions/DeleteResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProxyActionexecuteRequest": {
      "example": {
        "ids": [
          "2c93808457d787030157e031d5844c53"
        ],
        "synchronous": false,
        "type": "InvoiceSplit"
      },
      "properties": {
        "ids": {
          "description": "The ID of the object. **Values:** a valid InvoiceSplit object ID.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "synchronous": {
          "description": "Indicates if the call is synchronous or asynchronous. **Values:** `false`\n",
          "type": "boolean"
        },
        "type": {
          "description": "Specifies the type of executed item. \n",
          "enum": [
            "InvoiceSplit"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "ids",
        "synchronous"
      ],
      "type": "object"
    },
    "ProxyActionexecuteResponse": {
      "properties": {
        "result": {
          "description": "",
          "items": {
            "$ref": "#/definitions/ExecuteResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProxyActiongenerateRequest": {
      "example": {
        "objects": [
          {
            "AccountId": "2c93808457d787030157e0306be53a75",
            "InvoiceDate": "2016-10-20",
            "TargetDate": "2016-10-20"
          }
        ],
        "type": "Invoice"
      },
      "properties": {
        "objects": {
          "description": "",
          "items": {
            "$ref": "#/definitions/zObject"
          },
          "type": "array"
        },
        "type": {
          "description": "",
          "enum": [
            "Invoice"
          ],
          "type": "string"
        }
      },
      "required": [
        "objects",
        "type"
      ],
      "type": "object"
    },
    "ProxyActiongenerateResponse": {
      "properties": {
        "result": {
          "description": "",
          "items": {
            "$ref": "#/definitions/SaveResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProxyActionqueryMoreRequest": {
      "properties": {
        "queryLocator": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "queryLocator"
      ],
      "type": "object"
    },
    "ProxyActionqueryMoreResponse": {
      "properties": {
        "done": {
          "description": "",
          "type": "boolean"
        },
        "queryLocator": {
          "description": "",
          "type": "string"
        },
        "records": {
          "description": "",
          "items": {
            "$ref": "#/definitions/zObject"
          },
          "type": "array"
        },
        "size": {
          "description": "",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProxyActionqueryRequest": {
      "example": {
        "queryString": "select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'"
      },
      "properties": {
        "queryString": {
          "description": "ZOQL expression that specifies the object to query, the fields to retrieve, and any filters.\n",
          "type": "string"
        }
      },
      "required": [
        "queryString"
      ],
      "type": "object"
    },
    "ProxyActionqueryResponse": {
      "properties": {
        "done": {
          "description": "",
          "type": "boolean"
        },
        "queryLocator": {
          "description": "",
          "type": "string"
        },
        "records": {
          "description": "",
          "items": {
            "$ref": "#/definitions/zObject"
          },
          "type": "array"
        },
        "size": {
          "description": "",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProxyActionsubscribeRequest": {
      "example": {
        "subscribes": [
          {
            "Account": {
              "AccountNumber": "AN_1476935174239",
              "AutoPay": false,
              "Batch": "Batch1",
              "BillCycleDay": 1,
              "Currency": "USD",
              "Name": "AC_1476935174239",
              "PaymentTerm": "Due Upon Receipt",
              "Status": "Draft"
            },
            "BillToContact": {
              "Address1": "312 2nd Ave W",
              "City": "Seattle",
              "Country": "United States",
              "FirstName": "FN1476935174239",
              "LastName": "LN1476935174239",
              "PersonalEmail": "person@test.com",
              "PostalCode": "98119",
              "State": "Washington",
              "WorkEmail": "work@test.com"
            },
            "PaymentMethod": {
              "CreditCardAddress1": "312 2nd Ave W",
              "CreditCardCity": "Seattle",
              "CreditCardCountry": "United States",
              "CreditCardExpirationMonth": 12,
              "CreditCardExpirationYear": 2020,
              "CreditCardHolderName": "Somebody",
              "CreditCardNumber": "4111111111111111",
              "CreditCardPostalCode": "98119",
              "CreditCardState": "Washington",
              "CreditCardType": "Visa",
              "Type": "CreditCard"
            },
            "PreviewOptions": {
              "EnablePreviewMode": false,
              "NumberOfPeriods": 3
            },
            "SubscribeOptions": {
              "GenerateInvoice": true,
              "ProcessPayments": false,
              "SubscribeInvoiceProcessingOptions": {}
            },
            "SubscriptionData": {
              "RatePlanData": [
                {
                  "RatePlan": {
                    "ProductRatePlanId": "2c93808457d787030157e0324735512b"
                  },
                  "RatePlanChargeData": [
                    {
                      "RatePlanCharge": {
                        "ProductRatePlanChargeId": "2c93808457d787030157e03247c2512d"
                      }
                    }
                  ]
                }
              ],
              "Subscription": {
                "AutoRenew": false,
                "ContractAcceptanceDate": "2016-10-20",
                "ContractEffectiveDate": "2016-10-20",
                "InitialTerm": 12,
                "Name": "S_1476935174239",
                "Notes": "this is notes",
                "RenewalTerm": 12,
                "ServiceActivationDate": "2016-10-20",
                "TermStartDate": "2016-10-20",
                "TermType": "TERMED"
              }
            }
          }
        ]
      },
      "properties": {
        "subscribes": {
          "description": "",
          "items": {
            "$ref": "#/definitions/SubscribeRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "subscribes"
      ],
      "type": "object"
    },
    "ProxyActionsubscribeResponse": {
      "properties": {
        "result": {
          "description": "",
          "items": {
            "$ref": "#/definitions/SubscribeResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProxyActionupdateRequest": {
      "example": {
        "objects": [
          {
            "AccountNumber": "AN_1476935163869",
            "AutoPay": true,
            "Batch": "Batch1",
            "BillCycleDay": 1,
            "BillToId": "2c93808457d787030157e03220684fac",
            "CrmId": "crmid",
            "Currency": "USD",
            "DefaultPaymentMethodId": "2c93808457d787030157e03220ec4fad",
            "Id": "2c93808457d787030157e0321fdf4fab",
            "InvoiceTemplateId": "2c93808457d787030157e03208864f97",
            "Name": "AC_1476935163869",
            "Notes": "this is notes",
            "PaymentTerm": "Due Upon Receipt",
            "SoldToId": "2c93808457d787030157e03220684fac",
            "Status": "Active"
          }
        ],
        "type": "Account"
      },
      "properties": {
        "objects": {
          "description": "",
          "items": {
            "$ref": "#/definitions/zObject_update"
          },
          "type": "array"
        },
        "type": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "objects",
        "type"
      ],
      "type": "object"
    },
    "ProxyActionupdateResponse": {
      "properties": {
        "result": {
          "description": "",
          "items": {
            "$ref": "#/definitions/SaveResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProxyBadRequestResponse": {
      "properties": {
        "Errors": {
          "items": {
            "properties": {
              "Code": {
                "description": "",
                "type": "string"
              },
              "Message": {
                "description": "",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "Success": {
          "description": "",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyCreateAccount": {
      "example": {
        "AccountNumber": "AN_1476935163869",
        "AutoPay": false,
        "Batch": "Batch1",
        "BillCycleDay": 1,
        "CrmId": "crmid",
        "Currency": "USD",
        "InvoiceTemplateId": "2c93808457d787030157e03208864f97",
        "Name": "AC_1476935163869",
        "Notes": "this is notes",
        "PaymentTerm": "Due Upon Receipt",
        "Status": "Draft"
      },
      "properties": {
        "AccountNumber": {
          "description": "Unique account number assigned to the account. **Character limit**: 50 **Values**: one of the following:\n\n- null to auto-generate\n- a string of 50 characters or fewer that doesn't begin with the default account number prefix\n",
          "type": "string"
        },
        "AdditionalEmailAddresses": {
          "description": "List of additional email addresses to receive emailed invoices. **Character limit**: 120 **Values**: comma-separated list of email addresses ",
          "type": "string"
        },
        "AllowInvoiceEdit": {
          "description": " Indicates if associated invoices can be edited.\n**Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "AutoPay": {
          "description": " Indicates if future payments are automatically collected when they're due during a Payment Run.\n**Character limit**: 5 **Values**: `true`, `false` (default) ",
          "type": "boolean"
        },
        "Batch": {
          "description": " Organizes your customer accounts into groups to optimize your billing and payment operations. Required if use the Subscribe call.\n**Character limit**: 20 **Values**:any system-defined batch (`Batch1` - `Batch50 `or by name). ",
          "type": "string"
        },
        "BcdSettingOption": {
          "description": "Billing cycle day setting option. **Character limit**: 9 **Values**: `AutoSet`, `ManualSet` ",
          "type": "string"
        },
        "BillCycleDay": {
          "description": "Billing cycle day (BCD) on which bill runs generate invoices for the account. **Character limit**: 2 **Values**: any activated system-defined bill cycle day (`1` - `31`) ",
          "format": "int32",
          "type": "integer"
        },
        "BillToId": {
          "description": "ID of the person to bill for the account. This field is only required if the `Status` field is set to `Active`. **Character limit**: 32 **Values**: a valid contact ID for the account ",
          "type": "string"
        },
        "CommunicationProfileId": {
          "description": "Associates the account with a specified communication profile. **Character limit**: 32 **Values**: a valid communication profile ID ",
          "type": "string"
        },
        "CrmId": {
          "description": "CRM account ID for the account. A CRM is a customer relationship management system, such as Salesforce.com. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "Currency": {
          "description": " Currency that the customer is billed in. ",
          "type": "string"
        },
        "CustomerServiceRepName": {
          "description": "Name of the account's customer service representative, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "DefaultPaymentMethodId": {
          "description": "ID of the default payment method for the account. This field is only required if the `AutoPay` field is set to `true`. **Character limit**: 32 **Values**: a valid ID for an existing payment method ",
          "type": "string"
        },
        "InvoiceDeliveryPrefsEmail": {
          "description": "Indicates if the customer wants to receive invoices through email.  **Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "InvoiceDeliveryPrefsPrint": {
          "description": "Indicates if the customer wants to receive printed invoices, such as through postal mail. **Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "InvoiceTemplateId": {
          "description": "The ID of the invoice template. Each customer account can use a specific invoice template for invoice generation. **Character limit**: 32 **Values**: a valid template ID configured in Zuora Billing Settings ",
          "type": "string"
        },
        "Name": {
          "description": "Name of the account as displayed in the Zuora UI. **Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "Notes": {
          "description": " Comments about the account. **Character limit**: 65,535 **Values**: a string of 65,535 characters ",
          "type": "string"
        },
        "ParentId": {
          "description": "Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled. **Character limit**: 32 **Values**: a valid account ID ",
          "type": "string"
        },
        "PaymentGateway": {
          "description": "Gateway used for processing electronic payments and refunds. This field is only required if there is no default payment gateway is defined in the tenant. **Character limit**: 40 **Values**: one of the following:\n\n- a valid configured gateway name\n- Null to inherit the default value set in Zuora Payment Settings\n",
          "type": "string"
        },
        "PaymentTerm": {
          "description": "Indicates when the customer pays for subscriptions. **Character limit**: 100 **Values**: a valid, active payment term defined in the web-based UI administrative settings ",
          "type": "string"
        },
        "PurchaseOrderNumber": {
          "description": "The number of the purchase order associated with this account. Purchase order information generally comes from customers. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "SalesRepName": {
          "description": "The name of the sales representative associated with this account, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "SoldToId": {
          "description": "ID of the person who bought the subscription associated with the account. This field is only required if the `Status` field is set to `Active`. **Character limit**: 32 **Values**: a valid contact ID for the account ",
          "type": "string"
        },
        "Status": {
          "description": "Status of the account in the system. **Character limit**: 8 **Values**: one of the following:\n\n- leave null if you're using The Subscribe call\n- if you're using Create:\n- `Draft`\n- `Active`\n- `Canceled`\n",
          "type": "string"
        },
        "TaxCompanyCode": {
          "description": " Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Character limit**: 50 **Values**: a valid company code ",
          "type": "string"
        },
        "TaxExemptCertificateID": {
          "description": "ID of your customer's tax exemption certificate. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptCertificateType": {
          "description": "Type of the tax exemption certificate that your customer holds.  **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptDescription": {
          "description": "Description of the tax exemption certificate that your customer holds. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "TaxExemptEffectiveDate": {
          "description": "Date when the the customer's tax exemption starts. **Character limit**: 29 **Version notes**: requires Zuora Tax ",
          "format": "date",
          "type": "string"
        },
        "TaxExemptExpirationDate": {
          "description": "Date when the customer's tax exemption certificate expires  **Character limit**: 29 **Version notes**: requires Zuora Tax ",
          "format": "date",
          "type": "string"
        },
        "TaxExemptIssuingJurisdiction": {
          "description": "Indicates the jurisdiction in which the customer's tax exemption certificate was issued. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptStatus": {
          "description": " Status of the account's tax exemption. This field is only required if you use Zuora Tax. This field is not available if you do not use Zuora Tax.\n**Character limit**: 19 **Values**: one of the following:\n\n- `Yes`\n- `No`\n- `PendingVerification`\n",
          "type": "string"
        },
        "VATId": {
          "description": " EU Value Added Tax ID.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Character limit**: 25 **Values**: a valid Value Added Tax ID ",
          "type": "string"
        }
      },
      "required": [
        "BillCycleDay",
        "Currency",
        "Name",
        "Status"
      ],
      "type": "object"
    },
    "ProxyCreateAmendment": {
      "example": {
        "ContractEffectiveDate": "2016-10-20",
        "CustomerAcceptanceDate": "2016-10-20",
        "Description": "AMpqvyqhhzpg",
        "EffectiveDate": "2016-10-20",
        "Name": "AMpqvyqhhzpg",
        "RatePlanData": {
          "RatePlan": {
            "ProductRatePlanId": "2c93808457d787030157e02ec2202584"
          },
          "RatePlanChargeData": [
            {
              "RatePlanCharge": {
                "ProductRatePlanChargeId": "2c93808457d787030157e02ec34d2587"
              }
            }
          ]
        },
        "ServiceActivationDate": "2016-10-20",
        "SubscriptionId": "2c93808457d787030157e02ec3f9258e",
        "Type": "NewProduct"
      },
      "properties": {
        "AutoRenew": {
          "description": " Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed. For amendment of type `TermsAndConditions`, this field is only required if you change the automatic renewal status of a subscription.\n**Values**: true, false ",
          "type": "boolean"
        },
        "ContractEffectiveDate": {
          "description": " The date when the amendment's changes become effective for billing purposes. This field is only required if you change the status from `Draft` to `PendingActivation`.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "CurrentTerm": {
          "description": " The length of the period for the current subscription term. This field can be updated when Status is `Draft`.\nThis field is only required if the `Type` field is set to `TermsAndConditions` and `TermType` is set to `TERMED`. This field is not required if `TermType` is set to `EVERGREEN`.\n**Character limit**: **Values**: a valid number\n",
          "format": "int64",
          "type": "integer"
        },
        "CurrentTermPeriodType": {
          "description": " The period type for the current subscription term. This field is only required if the `Type` field is set to `TermsAndConditions` and `TermType` is set to `TERMED`. This field is not required if `TermType` is set to `EVERGREEN`. **Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n**Note**:\n\n- This field can be updated when Status is `Draft`.\n- This field is used with the CurrentTerm field to specify the current subscription term.\n",
          "type": "string"
        },
        "CustomerAcceptanceDate": {
          "description": " The date when the customer accepts the amendment's changes to the subscription. This field is only required if the `Status` field is set to `PendingAcceptance`.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "Description": {
          "description": " A description of the amendment.\n**Character limit**: 500 **Values**: maximum 500 characters ",
          "type": "string"
        },
        "EffectiveDate": {
          "description": " The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.\nThis field is only required if the `Type` field is set to `Cancellation`.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "Name": {
          "description": " The name of the amendment. This field is only required if the `Type` field is set to `NewProduct`, `RemoveProduct`, `UpdateProduct`, or `TermsAndConditions`.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "RatePlanData": {
          "description": "Container for rate plan data. This field is only required if the `Type` field is set to `NewProduct`, `RemoveProduct`, or `UpdateProduct`.\n",
          "properties": {
            "RatePlan": {
              "description": "",
              "properties": {
                "AmendmentSubscriptionRatePlanId": {
                  "description": "The ID of the subscription rate plan modified by the amendment. This field only applies to amendment rate plans.\n**Character limit**: 32 **Values**: a valid rate plan ID ",
                  "type": "string"
                },
                "ProductRatePlanId": {
                  "description": "",
                  "type": "string"
                }
              },
              "required": [
                "ProductRatePlanId"
              ],
              "type": "object"
            },
            "RatePlanChargeData": {
              "description": "",
              "items": {
                "$ref": "#/definitions/AmendmentRatePlanChargeData"
              },
              "type": "array"
            }
          },
          "required": [
            "RatePlan"
          ],
          "type": "object"
        },
        "RenewalSetting": {
          "description": " Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\nThis field is only required if the `TermType` field is set to `Termed`. **Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN ",
          "type": "string"
        },
        "RenewalTerm": {
          "description": " The term of renewal for the amended subscription. This field can be updated when Status is `Draft`.\nThis field is only required if the `Type` field is set to `TermsAndConditions`.\n**Character limit**: **Values:** a valid number ",
          "format": "int64",
          "type": "integer"
        },
        "RenewalTermPeriodType": {
          "description": " The period type for the subscription renewal term. This field can be updated when Status is `Draft`.\n**Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n",
          "type": "string"
        },
        "ServiceActivationDate": {
          "description": " The date when service is activated.\nThis field is only required if the `Status` field is set to `PendingActivation`.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "SpecificUpdateDate": {
          "description": " The date when the UpdateProduct amendment takes effect. This field is only applicable if there is already a future-dated UpdateProduct amendment on the subscription.\nFor the UpdateProduct amendments, this field is only required if there is already a future-dated UpdateProduct amendment on the subscription.\n",
          "format": "date",
          "type": "string"
        },
        "Status": {
          "description": " The status of the amendment. Type: string (enum) **Character limit**: 17 **Values**: one of the following:\n\n- Draft (default, if left null)\n- Pending Activation\n- Pending Acceptance\n- Completed\n",
          "type": "string"
        },
        "SubscriptionId": {
          "description": " The ID of the subscription that the amendment changes.\n**Character limit**: 32 **Values**: a valid subscription ID ",
          "type": "string"
        },
        "TermStartDate": {
          "description": " The date when the new terms and conditions take effect.\nThis field is only required if the `Type` field is set to `TermsAndConditions`.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "TermType": {
          "description": " Indicates if the subscription is TERMED or EVERGREEN.\n\n- A TERMED subscription has an expiration date, and must be manually renewed.\n- An EVERGREEN subscription doesn't have an expiration date, and must be manually ended.\n\nWhen as part of an amendment of type `TermsAndConditions`, this field is only required if you change the term type of a subscription.\n**Character limit**: 9 **Values**: TERMED, EVERGREEN ",
          "type": "string"
        },
        "Type": {
          "description": " The type of amendment.\n**Character limit**: 18 **Values**: one of the following:\n\n- Cancellation\n- NewProduct\n- OwnerTransfer\n- RemoveProduct\n- Renewal\n- UpdateProduct\n- TermsAndConditions\n- SuspendSubscription (This value is in **Limited Availability**.)\n- ResumeSubscription (This value is in **Limited Availability**.)\n",
          "type": "string"
        }
      },
      "required": [
        "SubscriptionId",
        "Type"
      ],
      "type": "object"
    },
    "ProxyCreateBillRun": {
      "example": {
        "AutoEmail": "false",
        "AutoPost": "false",
        "AutoRenewal": "false",
        "Batch": "Batch1",
        "BillCycleDay": "2",
        "ChargeTypeToExclued": "OneTime, Usage",
        "InvoiceDate": "2017-02-04",
        "NoEmailForZeroAmountInvoice": "false",
        "TargetDate": "2017-02-04"
      },
      "properties": {
        "AccountId": {
          "description": "ID of the account used for single account bill run.\n\nThis field is only required if you create ad hoc bill run for a single customer account.\n\n**Character limit:** 32\n",
          "type": "string"
        },
        "AutoEmail": {
          "default": false,
          "description": "Determines whether to auto send email or not by this bill run once the bill run completes.\n\n**Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.\n",
          "type": "boolean"
        },
        "AutoPost": {
          "default": false,
          "description": "Determines whether to auto post bill run or not once the bill run completes.\n\n**Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.\n",
          "type": "boolean"
        },
        "AutoRenewal": {
          "default": false,
          "description": "Determines whether to auto renew subscription or not by this bill run once the bill run completes.\n",
          "type": "boolean"
        },
        "Batch": {
          "description": "Batch of accounts for this bill run. \n\nWhen creating ad hoc bill run for multiple customer accounts, this field is only required if the `BillCycleDay`\n field is not specified.\n\n**Character limit:** 20\n\n**Values:** AllBatches or Batchn where n is a number between 1 and 50.\n",
          "type": "string"
        },
        "BillCycleDay": {
          "description": "The day of the bill cycle.\n\nWhen creating ad hoc bill run for multiple customer accounts, this field is only required if the `Batch` field is not specified.\n\n**Character limit:** 32\n\n**Values:** `AllBillCycleDays` or 01 - 31.\n",
          "type": "string"
        },
        "ChargeTypeToExclude": {
          "description": "Charge type or types to be excluded, separated with comma.\n\n**Possible Values:** `OneTime`, `Recurring`, `Usage`, or a combination of these values. \n\n**Character limit:** 50\n",
          "type": "string"
        },
        "InvoiceDate": {
          "description": "Invoice date for this bill run.\n\n**Character limit:** 29\n",
          "format": "date",
          "type": "string"
        },
        "NoEmailForZeroAmountInvoice": {
          "default": false,
          "description": "Determines whether to suppress email for invoices with zero total or not for this bill run once the bill run completes. (Do not email invoices with 0 Invoice Total).\n",
          "type": "boolean"
        },
        "TargetDate": {
          "description": "Target date for this bill run. See [Create Bill Run](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs) for more information.\n\n**Character limit:** 29\n",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "InvoiceDate",
        "TargetDate"
      ],
      "type": "object"
    },
    "ProxyCreateContact": {
      "example": {
        "AccountId": "2c93808457d787030157e0321fdf4fab",
        "Address1": "312 2nd Ave W",
        "City": "Seattle",
        "Country": "United States",
        "Description": "desc",
        "Fax": "123456",
        "FirstName": "FN1476935164020",
        "HomePhone": "86123456789",
        "LastName": "LN1476935164020",
        "MobilePhone": "8613312345678",
        "NickName": "this is nick name",
        "OtherPhone": "11111111111111111",
        "OtherPhoneType": "Work",
        "PersonalEmail": "person@test.com",
        "PostalCode": "98119",
        "State": "Washington",
        "TaxRegion": "CA",
        "WorkEmail": "work@test.com"
      },
      "properties": {
        "AccountId": {
          "description": " The Zuora account ID associated with this contact. This field is not required when you use the Subscribe call. This field is required for all other calls.\n**Character limit: **32 **Values: **a valid account ID ",
          "type": "string"
        },
        "Address1": {
          "description": " The first line of the contact's address, which is often a street address or business name.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "Address2": {
          "description": " The second line of the contact's address.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "City": {
          "description": " The city of the contact's address.\n**Character limit**: 40 **Values: **a string of 40 characters or fewer ",
          "type": "string"
        },
        "Country": {
          "description": " The country of the contact's address. ",
          "type": "string"
        },
        "County": {
          "description": " The country. May optionally be used by Zuora Tax to calculate county tax.\n**Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "Description": {
          "description": " A description for the contact.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "Fax": {
          "description": " The contact's fax number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "FirstName": {
          "description": " The contact's first name.\n**Character limit**: 100 **Values**: a string of the contact's first name ",
          "type": "string"
        },
        "HomePhone": {
          "description": " The contact's home phone number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "LastName": {
          "description": " The contact's last name.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "MobilePhone": {
          "description": " The contact's mobile phone number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "NickName": {
          "description": " A nickname for the contact.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "OtherPhone": {
          "description": " An additional phone number for the contact.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "OtherPhoneType": {
          "description": "The type of the `OtherPhone`. **Character limit**: 20 **Values**: `Work`, `Mobile`, `Home`, `Other` ",
          "type": "string"
        },
        "PersonalEmail": {
          "description": " The contact's personal email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "PostalCode": {
          "description": " The zip code for the contact's address.\n**Character limit:** 20 **Values: **a string of 20 characters or fewer ",
          "type": "string"
        },
        "State": {
          "description": " The state or province of the contact's address. ",
          "type": "string"
        },
        "TaxRegion": {
          "description": "If using Zuora Tax rules ",
          "type": "string"
        },
        "WorkEmail": {
          "description": " The contact's business email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "WorkPhone": {
          "description": " The contact's business phone number.\n**Character limit**: 40 **notes**: -- **Values**: a string of 40 characters or fewer ",
          "type": "string"
        }
      },
      "required": [
        "AccountId",
        "FirstName",
        "LastName"
      ],
      "type": "object"
    },
    "ProxyCreateExport": {
      "example": {
        "Format": "csv",
        "Name": "test_Export_1476935164445",
        "Query": "select * from account",
        "Status": "Processing",
        "Zip": true
      },
      "properties": {
        "ConvertToCurrencies": {
          "description": " The currencies that you want to convert transaction amounts into. You can specify any number of currencies. Specify the currencies using their Foreign Currency Conversion enabled to use this field.\n**Character limit**: **Values**: a list of valid currency codes ",
          "type": "string"
        },
        "Encrypted": {
          "description": " Exports a secure version of encrypted data source fields. such as the AchAccountNumber field of the PaymentMethod object and the DefaultPaymentMethod data souce objects.\n**Character limit**: 5 **Values:** true, false ",
          "type": "boolean"
        },
        "FileId": {
          "description": " The ID of the file generated by an export query. This file is automatically generated when an Export object is created. Use this file ID with [Get files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) to download the export file.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "Format": {
          "description": " The format that you want the export file to use.\n**Character limit**: 5 ",
          "enum": [
            "csv",
            "html",
            "Excel"
          ],
          "type": "string"
        },
        "Name": {
          "description": " The name of the export.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "Query": {
          "description": "[Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL) query.",
          "type": "string"
        },
        "Size": {
          "description": " The number of records or rows exported. This field value is null until the export status is Completed.\n**Character limit**: **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "description": " The status of the export. Type: string (enum) **Character limit**: 10 **Values**: automatically generated to be one of the following values:\n\n- Pending\n- Processing\n- Completed\n- Canceled\n- Failed\n",
          "type": "string"
        },
        "StatusReason": {
          "description": " The reason for the given status. Use this information to help ascertain why an export failed.\n**Character limi**t: 255 **Values**: automatically generated ",
          "type": "string"
        },
        "Zip": {
          "description": " Indicates if you want the resulting export file to be compressed into a zip file.\n**Character limit**: **Values**: true, false (default) ",
          "type": "boolean"
        }
      },
      "required": [
        "Format",
        "Query"
      ],
      "type": "object"
    },
    "ProxyCreateInvoiceAdjustment": {
      "example": {
        "AccountingCode": "Accounts Receivable",
        "AdjustmentDate": "2016-10-20",
        "Amount": 1.2,
        "Comments": "this is comments",
        "InvoiceId": "2c93808457d787030157e030d10f3f64",
        "InvoiceNumber": "INV00000001",
        "ReferenceId": "refid-1476935078657",
        "Type": "Credit"
      },
      "properties": {
        "AccountId": {
          "description": " The ID of the account that owns the invoice.\n**Character limit**: 32 **Values**: inherited from Account.ID for the invoice owner ",
          "type": "string"
        },
        "AccountingCode": {
          "description": "The accounting code for the invoice adjustment. ",
          "type": "string"
        },
        "AdjustmentDate": {
          "description": " The date when the invoice adjustment is applied. This date must be the same as the invoice's date or later.\n**Character limit**: 29 **Values**: Leave null to automatically generate the current date ",
          "format": "date",
          "type": "string"
        },
        "AdjustmentNumber": {
          "description": " A unique string to identify an individual invoice adjustment.\n**Character limit**: 255 **Values**: automatically generated ",
          "type": "string"
        },
        "Amount": {
          "description": " The amount of the invoice adjustment.\n**Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "Comments": {
          "description": " Use this field to record comments about the invoice adjustment.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CustomerName": {
          "description": " The name of the account that owns the associated invoice.\n**Character limit**: 50 **Values**: inherited from Account.Name ",
          "type": "string"
        },
        "CustomerNumber": {
          "description": " The unique account number of the customer's account.\n**Character limit**: 70 **Values**: inherited from Account.AccountNumber ",
          "type": "string"
        },
        "ImpactAmount": {
          "description": " The amount that changes the balance of the associated invoice.\n**Character limit**: 16 **Values**: automatically calculated ",
          "format": "double",
          "type": "number"
        },
        "InvoiceId": {
          "description": " The ID of the invoice associated with the adjustment. This field is only required if you don't specify a value for the `InvoiceNumber` field.\n**Character limit**: 32 **Values**: a valid invoice ID ",
          "type": "string"
        },
        "InvoiceNumber": {
          "description": " The unique identification number for the associated invoice. This field is only required if you don't specify a value for the `InvoiceId` field.\n**Character limit**: 32 **Values**: a valid invoice number ",
          "type": "string"
        },
        "ReasonCode": {
          "description": " A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n**Character limit**: 32 **V****alues**: a valid reason code ",
          "type": "string"
        },
        "ReferenceId": {
          "description": " A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system.\n**Character limit**: 60 **Values**: a string of 60 characters or fewer ",
          "type": "string"
        },
        "Status": {
          "description": " The status of the invoice adjustment. This field is only required in the Query call, but is automatically generated in other calls.\n**Character limit**: 9 **Values**: `Canceled`, `Processed` ",
          "type": "string"
        },
        "Type": {
          "description": " Indicates whether the adjustment credits or debits the invoice amount.\n**Character limit**: 6 **Values**: `Credit`, `Charge` ",
          "type": "string"
        }
      },
      "required": [
        "Amount",
        "Type"
      ],
      "type": "object"
    },
    "ProxyCreateInvoicePayment": {
      "example": {
        "Amount": 10,
        "InvoiceId": "2c93808457d787030157e02deadb1b6d",
        "PaymentId": "2c93808457d787030157e02de5fc1b57"
      },
      "properties": {
        "Amount": {
          "description": " The amount of the payment.\n**Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "InvoiceId": {
          "description": " The unique ID of the invoice associated with this invoice payment.\n**Character limit**: 32 **Values**: a valid invoice ID ",
          "type": "string"
        },
        "PaymentId": {
          "description": " The unique ID of the payment associated with this invoice payment.\n**Character limit**: 32 **V****alues**: a valid payment ID ",
          "type": "string"
        }
      },
      "required": [
        "Amount",
        "InvoiceId",
        "PaymentId"
      ],
      "type": "object"
    },
    "ProxyCreateOrModifyResponse": {
      "properties": {
        "Id": {
          "description": "",
          "type": "string"
        },
        "Success": {
          "description": "",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyCreatePayment": {
      "example": {
        "AccountId": "2c93808457d787030157e03190e748ea",
        "Amount": 2,
        "AppliedCreditBalanceAmount": 0,
        "AppliedInvoiceAmount": 2,
        "EffectiveDate": "2016-10-20",
        "InvoiceId": "2c93808457d787030157e03195604902",
        "PaymentMethodId": "2c93808457d787030157e03196d1490e",
        "Status": "Processed",
        "Type": "Electronic"
      },
      "properties": {
        "AccountId": {
          "description": "The unique account ID for the customer that the payment is for.\n",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "AccountingCode": {
          "description": "The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.\n",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "Amount": {
          "description": "The amount of the payment.\n",
          "format": "double",
          "maxLength": 16,
          "minLength": 0,
          "type": "number"
        },
        "AppliedCreditBalanceAmount": {
          "description": "The amount of the payment to apply to a credit balance. This field is only required if the `AppliedInvoiceAmount` field value is null.\n",
          "format": "double",
          "maxLength": 16,
          "minLength": 0,
          "type": "number"
        },
        "AppliedInvoiceAmount": {
          "description": "The amount of the payment to apply to an invoice. This field is only required if either the `InvoiceId` or `InvoiceNumber` field is not null.\n",
          "format": "decimal",
          "maxLength": 16,
          "minLength": 0,
          "type": "number"
        },
        "AuthTransactionId": {
          "description": "The authorization transaction ID from the payment gateway. Use this field for electronic payments, such as credit cards.\n",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Comment": {
          "description": "Additional information related to the payment.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "EffectiveDate": {
          "description": "The date when the payment takes effect.\n",
          "format": "date",
          "maxLength": 29,
          "minLength": 0,
          "type": "string"
        },
        "Gateway": {
          "description": "The name of the gateway instance that processes the payment. When creating a payment, the value of this field must be a valid gateway instance name, and this gateway must support the specific payment method. If no value is specified, the default gateway on the Account will be used.\n",
          "type": "string"
        },
        "GatewayOptionData": {
          "description": "A field used to pass gateway options. Zuora allows you to pass in special gateway-specific parameters for payments that go through the Adyen, Autorize.et, CyberSource, Merchant eSolutions, Orbital (Chase Paymentech), QValent, Vantiv, and Verifi gateways.\n\nFor each of these special parameters, you supply the name-value pair and Zuora passes it to the gateway. This allows you to add functionality that's supported by a specific gateway but currently not supported by Zuora.\n",
          "properties": {
            "GatewayOption": {
              "description": "",
              "items": {
                "$ref": "#/definitions/GatewayOption"
              },
              "maxItems": 200,
              "minItems": 0,
              "type": "array"
            }
          },
          "required": [
            "GatewayOption"
          ],
          "type": "object"
        },
        "GatewayOrderId": {
          "description": "A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.\n\nGateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems.\n",
          "maxLength": 70,
          "minLength": 0,
          "type": "string"
        },
        "GatewayResponse": {
          "description": "The message returned from the payment gateway for the payment. This message is gateway-dependent.\n",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "GatewayResponseCode": {
          "description": "The code returned from the payment gateway for the payment. This code is gateway-dependent.\n",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "GatewayState": {
          "description": "The status of the payment in the gateway; use for reconciliation.\n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "InvoiceId": {
          "description": "The ID of the invoice that the payment is applied to. When applying a payment to a single invoice, this field is only required if the `InvoiceNumber` field is null.\n",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "InvoiceNumber": {
          "description": "The unique identification number for the invoice that the payment is applied to. When applying a payment to a single invoice, this field is only required if the `InvoiceId` field is null.\n",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "InvoicePaymentData": {
          "description": "Container for the invoice payment data. This field is only required if you apply a payment to multiple invoices.\n",
          "properties": {
            "InvoicePayment": {
              "description": "",
              "items": {
                "$ref": "#/definitions/InvoicePayment"
              },
              "maxItems": 200,
              "minItems": 0,
              "type": "array"
            }
          },
          "required": [
            "InvoicePayment"
          ],
          "title": "InvoicePaymentData",
          "type": "object"
        },
        "PaymentMethodId": {
          "description": "The ID of the payment method used for the payment. \n",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "PaymentNumber": {
          "description": "The unique identification number of the payment. For example, P-00000028.\n",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "ReferenceId": {
          "description": "The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "SoftDescriptor": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi. \n\nZuora passes this field to Verifi directly without verification. In general, this field will be defaulted by the gateway. For Orbital, this field contains two fields separated by an asterisk, `SDMerchantName` and `SDProductionInfo`. For more information, contact your payment gateway.\n",
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "SoftDescriptorPhone": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n\nVerifi and Orbital determine how to format this string. For more information, contact your payment gateway.\n",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "Status": {
          "description": "The status of the payment in Zuora. The value depends on the type of payment.\n  \nFor electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.\n",
          "enum": [
            "Processed",
            "Error",
            "Voided",
            "Canceled"
          ],
          "maxLength": 11,
          "minLength": 0,
          "type": "string"
        },
        "Type": {
          "description": "The type of the payment, whether the payment is external or electronic.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "maxLength": 10,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "AccountId",
        "EffectiveDate",
        "PaymentMethodId",
        "Status",
        "Type"
      ],
      "type": "object"
    },
    "ProxyCreatePaymentMethod": {
      "example": {
        "AccountId": "2c93808457d787030157e0321fdf4fab",
        "CreditCardAddress1": "312 2nd Ave W",
        "CreditCardCity": "Seattle",
        "CreditCardCountry": "United States",
        "CreditCardExpirationMonth": 12,
        "CreditCardExpirationYear": 2020,
        "CreditCardHolderName": "Somebody",
        "CreditCardNumber": "4111111111111111",
        "CreditCardPostalCode": "98119",
        "CreditCardState": "Washington",
        "CreditCardType": "Visa",
        "MaxConsecutivePaymentFailures": 10,
        "NumConsecutiveFailures": 3,
        "PaymentRetryWindow": 3,
        "Type": "CreditCard"
      },
      "properties": {
        "AccountId": {
          "description": " The ID of the customer account associated with this payment method. This field is not required for the subscribe call, but it is required for all other calls including the create call. ",
          "type": "string"
        },
        "AchAbaCode": {
          "description": " The nine-digit routing number or ABA number used by banks. This field is only required if the `Type` field is set to `ACH`.\n**Character limit**: 9 **Values**: a string of 9 characters or fewer ",
          "type": "string"
        },
        "AchAccountName": {
          "description": " The name of the account holder, which can be either a person or a company. This field is only required if the `Type` field is set to `ACH`.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "AchAccountType": {
          "description": " The type of bank account associated with the ACH payment. This field is only required if the `Type` field is set to `ACH`.\n**Character limit**: 16 **Values**:\n\n- `BusinessChecking`\n- `Checking`\n- `Saving`\n",
          "type": "string"
        },
        "AchAddress1": {
          "description": " Line 1 for the ACH address. **Character limit:** **Values:** an address ",
          "type": "string"
        },
        "AchAddress2": {
          "description": " Line 2 for the ACH address. **Character limit:** **Values:** an address ",
          "type": "string"
        },
        "AchBankName": {
          "description": " The name of the bank where the ACH payment account is held. This field is only required if the `Type` field is set to `ACH`.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "BankBranchCode": {
          "description": " The branch code of the bank used for direct debit. Use this field for direct debit payment methods.\n**Character limit**: 10 **Values**:  string of 10 characters or fewer ",
          "type": "string"
        },
        "BankCheckDigit": {
          "description": "The check digit in the international bank account number, which confirms the validity of the account. Use this field for direct debit payment methods. **Character limit**: 4 **Values**:  string of 4 characters or fewer ",
          "type": "string"
        },
        "BankCity": {
          "description": " The city of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:70 **Values**:  string of 70 characters or fewer ",
          "type": "string"
        },
        "BankCode": {
          "description": " The sort code or number that identifies the bank. This is also known as the sort code.\n**Character limit**: 18 **Values**:  string of 18 characters or fewer ",
          "type": "string"
        },
        "BankName": {
          "description": " The name of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:80 **Values**:  string of 80 characters or fewer ",
          "type": "string"
        },
        "BankPostalCode": {
          "description": " The zip code or postal code of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:20 **Values**:  string of 20 characters or fewer ",
          "type": "string"
        },
        "BankStreetName": {
          "description": " The name of the street of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:60 **Values**:  string of 60 characters or fewer ",
          "type": "string"
        },
        "BankStreetNumber": {
          "description": " The number of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:10 **Values**:  string of 10 characters or fewer ",
          "type": "string"
        },
        "BankTransferAccountName": {
          "description": " The name on the direct debit bank account. Use this field for direct debit payment methods.\n**Character limit**: 60 **Values**:  string of 60 characters or fewer ",
          "type": "string"
        },
        "BankTransferAccountType": {
          "description": " The type of the customer's bank account. Use this field for direct debit payment methods.\n**Character limit**: 11 **Values**: `DirectDebit` ",
          "type": "string"
        },
        "BankTransferType": {
          "description": " Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user. This field is only required if the `Type` field is set to `BankTransfer`.\n**Character limit**: 20 **Values**:\n\n- `AutomatischIncasso` (NL)\n- `LastschriftDE` (Germany)\n- `LastschriftAT` (Austria)\n- `DemandeDePrelevement` (FR)\n- `DirectDebitUK` (UK)\n- `Domicil` (Belgium)\n- `LastschriftCH` (CH)\n- `RID` (Italy)\n- `OrdenDeDomiciliacion` (Spain)\n",
          "type": "string"
        },
        "BusinessIdentificationCode": {
          "description": " The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Use this field only for direct debit payments in Switzerland with Global Collect.\n**Character limit**: 11 **Values**: string of 11 characters or fewer ",
          "type": "string"
        },
        "City": {
          "description": " The city of the customer's address. Use this field for direct debit payment methods.\n**Character limit**:80 **Values**:  string of 80 characters or fewer ",
          "type": "string"
        },
        "Country": {
          "description": " The two-letter country code of the customer's address. This field is only required if the `Type` field is set to `BankTransfer`, and the `BankTransferType` field is set to either `DirectDebitUK`, `DirectEntryAU`, or `DirectDebitNZ`.\n**Character limit**: 2 **Values**: a valid country code ",
          "type": "string"
        },
        "CreditCardAddress1": {
          "description": " The first line of the card holder's address, which is often a street address or business name. Use this field for credit card and direct debit payment methods.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreditCardAddress2": {
          "description": " The second line of the card holder's address. Use this field for credit card and direct debit payment methods.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreditCardCity": {
          "description": " The city of the card holder's address. Use this field for credit card and direct debit payment methods **Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "CreditCardCountry": {
          "description": " The country of the card holder's address. ",
          "type": "string"
        },
        "CreditCardExpirationMonth": {
          "description": " The expiration month of the credit card or debit card. This field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n**Character limit**: 2 **Values**: a two-digit number, 01 - 12 ",
          "format": "int32",
          "type": "integer"
        },
        "CreditCardExpirationYear": {
          "description": " The expiration month of the credit card or debit card. This field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n**Character limit**: 4 **Values**: a four-digit number ",
          "format": "int32",
          "type": "integer"
        },
        "CreditCardHolderName": {
          "description": " The full name of the card holder. This field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n\n**Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "CreditCardPostalCode": {
          "description": " The billing address's zip code. **Character limit**: 20 **Values**: a string of 20 characters or fewer ",
          "type": "string"
        },
        "CreditCardState": {
          "description": " The billing address's state. Use this field if the `CreditCardCountry` value is either Canada or the US. State names must be spelled in full. ",
          "type": "string"
        },
        "CreditCardType": {
          "description": " The type of credit card or debit card. This field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n**Character limit**: 32 **Values**: `AmericanExpress`, `Discover`, `MasterCard`, `Visa` ",
          "type": "string"
        },
        "DeviceSessionId": {
          "description": " The session ID of the user when the `PaymentMethod` was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently only Verifi supports this field.\n**Character limit**: 255 **Values**: ",
          "type": "string"
        },
        "Email": {
          "description": " An email address for the payment method in addition to the bill to contact email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "ExistingMandate": {
          "description": " Indicates if the customer has an existing mandate or a new mandate. A mandate is a signed authorization for UK and NL customers. When you are migrating mandates from another system, be sure to set this field correctly. If you indicate that a new mandate is an existing mandate or vice-versa, then transactions fail. This field is used only for the direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`, `No` ",
          "type": "string"
        },
        "FirstName": {
          "description": " The customer's first name. This field is used only for the direct debit payment method.\n**Character limit**: 30 **Values**: a string of 30 characters or fewer ",
          "type": "string"
        },
        "GatewayOptionData": {
          "description": "A field used to pass gateway options. Zuora allows you to pass in special gateway-specific parameters for payments that go through the Adyen, Autorize.et, CyberSource, Merchant eSolutions, Orbital (Chase Paymentech), QValent, Vantiv, and Verifi gateways.\n\nFor each of these special parameters, you supply the name-value pair and Zuora passes it to the gateway. This allows you to add functionality that's supported by a specific gateway but currently not supported by Zuora.\n",
          "properties": {
            "GatewayOption": {
              "description": "",
              "items": {
                "$ref": "#/definitions/GatewayOption"
              },
              "maxItems": 200,
              "minItems": 0,
              "type": "array"
            }
          },
          "required": [
            "GatewayOption"
          ],
          "type": "object"
        },
        "IBAN": {
          "description": " The International Bank Account Number. This field is used only for the direct debit payment method.\n**Character limit**: 42 **Values**: a string of 42 characters or fewer ",
          "type": "string"
        },
        "IPAddress": {
          "description": " The IP address of the user when the payment method was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently PayPal, CyberSource, Authorize.Net, and Verifi support this field.\n**Character limit**: 15 **Values**: a string of 15 characters or fewer ",
          "type": "string"
        },
        "LastName": {
          "description": " The customer's last name. This field is used only for the direct debit payment method.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "LastTransactionDateTime": {
          "description": " The date of the most recent transaction.\n**Character limit**: 29 **Values**: a valid date and time value ",
          "format": "date-time",
          "type": "string"
        },
        "LastTransactionStatus": {
          "description": " The status of the most recent transaction.\n**Character limit**: 39 **Values**: automatically generated ",
          "type": "string"
        },
        "MandateCreationDate": {
          "description": " The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "MandateID": {
          "description": " The ID of the mandate. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 36 **Values**: a string of 36 characters or fewer ",
          "type": "string"
        },
        "MandateReceived": {
          "description": " Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`, `No `(case-sensitive) ",
          "type": "string"
        },
        "MandateUpdateDate": {
          "description": " The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "MaxConsecutivePaymentFailures": {
          "description": " Specifies the number of allowable consecutive failures Zuora attempts with the payment method before stopping. When the `UseDefaultRetryRule` field is set to `false`, this field is only required if the `PaymentRetryWindow` field is not defined.\n**Values**: a valid number ",
          "type": "integer"
        },
        "NumConsecutiveFailures": {
          "description": "The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. \n",
          "format": "int32",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "PaymentRetryWindow": {
          "description": " The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. When the `UseDefaultRetryRule` field is set to `false`, this field is only required if the `MaxConsecutivePaymentFailures` field is not defined.\n**Character limit**: 4 **Values**: a whole number between 1 and 1000, exclusive ",
          "type": "integer"
        },
        "PaypalBaid": {
          "description": " The PayPal billing agreement ID, which is a contract between two PayPal accounts. Typically, the selling party initiates a request to create a BAID, and sends it to buying party for acceptance. The seller can keep track of the BAID and use it for future charges against the buyer. This field is only required if the `Type` field is set to `PayPal`.\n**Character limit**: 64 **Values**: a string of 64 characters or fewer ",
          "type": "string"
        },
        "PaypalEmail": {
          "description": " The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service. This field is only required if the `Type` field is set to `PayPal`.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "PaypalPreapprovalKey": {
          "description": " PayPal's Adaptive Payments API key. Zuora does not create this key, nor does it call PayPal to generate it. You must use PayPal's Adaptive Payments' API to generate this key, and then pass it to Zuora. Zuora uses this key to authorize future payments to PayPal's Adaptive Payments API. This field is only required if you use PayPal Adaptive Payments gateway.\n**Character limit**: 32 **Values**: a valid PayPal Adaptive Payment pre-approval key ",
          "type": "string"
        },
        "PaypalType": {
          "description": " Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments. This field is only required if you use PayPal Adaptive Payments or Payflow Pro (Express Checkout) gateways.\n**Character limit**: 32 **Values**: `ExpressCheckout`, `AdaptivePayments` ",
          "type": "string"
        },
        "Phone": {
          "description": " The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "PostalCode": {
          "description": " The zip code of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 20 **Values**: a string of 20 characters or fewer ",
          "type": "string"
        },
        "SecondTokenId": {
          "description": " A gateway unique identifier that replaces sensitive payment method data. SecondTokenId is conditionally required only when TokenID is being used to represent a gateway customer profile. SecondTokenId is used in the CC Reference Transaction payment method. **Character limit**: 64 **Values**: a string of 64 characters or fewer ",
          "type": "string"
        },
        "State": {
          "description": " The state of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "StreetName": {
          "description": " The street name of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "StreetNumber": {
          "description": " The street number of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 30 **Values**: a string of 30 characters or fewer ",
          "type": "string"
        },
        "TokenId": {
          "description": " A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. When TokenId is used to represent a customer profile, then SecondTokenId is conditionally required for representing the underlying tokenized payment method. When the `Type` field is set to `CreditCardReferenceTransaction`,  this field is only required if the `CreditCardNumber` field is not specified.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "TotalNumberOfErrorPayments": {
          "description": " The number of error payments that used this payment method.\n**Character limit**: **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "TotalNumberOfProcessedPayments": {
          "description": " The number of successful payments that used this payment method.\n**Character limit**: **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "Type": {
          "description": "The type of payment method.",
          "enum": [
            "ACH",
            "ApplePay",
            "BankTransfer",
            "Cash",
            "Check",
            "CreditCard",
            "CreditCardReferenceTransaction",
            "DebitCard",
            "Other",
            "PayPal",
            "WireTransfer"
          ],
          "type": "string"
        },
        "UseDefaultRetryRule": {
          "description": " Determines whether to use the default retry rules configured in the Zuora Payments settings. Set this to `true` to use the default retry rules. Set this to `false` to set the specific rules for this payment method. If you set this value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`, are required.\n**Character limit**: 5 **Values**: `t``rue`, `false` ",
          "type": "boolean"
        }
      },
      "required": [
        "AccountId",
        "Type"
      ],
      "type": "object"
    },
    "ProxyCreateProduct": {
      "example": {
        "Description": "Create product via API",
        "EffectiveEndDate": "2066-10-20",
        "EffectiveStartDate": "1966-10-20",
        "Name": "P_1476935173677",
        "SKU": "API-SKU1476935173677"
      },
      "properties": {
        "AllowFeatureChanges": {
          "description": " Controls whether to allow your users to add or remove features while creating or amending a subscription.\n**Character** **limit**: n/a\n**Values**: true, false (default) ",
          "type": "boolean"
        },
        "Category": {
          "description": " Category of the product. Used by Zuora Quotes Guided Product Selector.\n**Character** **limit**: 100\n**Values**: One of the following:\n\n- Base Products\n- Add On Services\n- Miscellaneous Products\n",
          "type": "string"
        },
        "Description": {
          "description": " A descriptionof the product. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "EffectiveEndDate": {
          "description": "The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format. **Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "EffectiveStartDate": {
          "description": "The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format. **Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "Name": {
          "description": "The name of the product. This information is displayed in the product catalog pages in the web-based UI. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "SKU": {
          "description": "The unique SKU for the product. **Character limit**: 50 **Values**: one of the following:\n\n- leave null for automatic generated\n- an alphanumeric string of 50 characters or fewer\n",
          "type": "string"
        }
      },
      "required": [
        "EffectiveEndDate",
        "EffectiveStartDate",
        "Name"
      ],
      "type": "object"
    },
    "ProxyCreateProductRatePlan": {
      "example": {
        "Description": "Test create product rateplan via API",
        "EffectiveEndDate": "2066-10-20",
        "EffectiveStartDate": "1966-10-20",
        "Name": "ProductRatePlan1476935173957",
        "ProductId": "2c93808457d787030157e03246ae5129"
      },
      "properties": {
        "Description": {
          "description": "A description of the product rate plan. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "EffectiveEndDate": {
          "description": " The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "EffectiveStartDate": {
          "description": " The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "Name": {
          "description": "The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "ProductId": {
          "description": "The ID of the product that contains the product rate plan. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        }
      },
      "required": [
        "Name",
        "ProductId"
      ],
      "type": "object"
    },
    "ProxyCreateRefund": {
      "example": {
        "AccountId": "2c93808457d787030157e03190e748ea",
        "Amount": 1.1,
        "Comment": "this is comments",
        "PaymentId": "2c93808457d787030157e03197714910",
        "ReasonCode": "Standard Refund",
        "RefundInvoicePaymentData": {
          "RefundInvoicePayment": [
            {
              "InvoiceId": "2c93808457d787030157e03195604902",
              "RefundAmount": 1.1
            }
          ]
        },
        "SoftDescriptor": "thisSD",
        "SoftDescriptorPhone": "a@a.com",
        "SourceType": "Payment",
        "Type": "Electronic"
      },
      "properties": {
        "AccountId": {
          "description": " The ID of the account associated with this refund. This field is only required if you create a non-referenced refund. Don't specify a value for any other type of refund; Zuora associates the refund automatically with the account from the associated payment.\n**Character limit**: 32 **Values**: a valid account ID ",
          "type": "string"
        },
        "Amount": {
          "description": " The amount of the refund. The amount can't exceed the amount of the associated payment. If the original payment was applied to a single invoice, then you can create a partial refund. However, if the payment was applies to multiple invoices, then you can only make a partial refund through the web-based UI, not through the API.\n**Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "Comment": {
          "description": " Use this field to record comments about the refund.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "GatewayOptionData": {
          "description": "A field used to pass gateway options. Zuora allows you to pass in special gateway-specific parameters for payments that go through the Adyen, Autorize.et, CyberSource, Merchant eSolutions, Orbital (Chase Paymentech), QValent, Vantiv, and Verifi gateways.\n\nFor each of these special parameters, you supply the name-value pair and Zuora passes it to the gateway. This allows you to add functionality that's supported by a specific gateway but currently not supported by Zuora.\n",
          "properties": {
            "GatewayOption": {
              "description": "",
              "items": {
                "$ref": "#/definitions/GatewayOption"
              },
              "maxItems": 200,
              "minItems": 0,
              "type": "array"
            }
          },
          "required": [
            "GatewayOption"
          ],
          "type": "object"
        },
        "GatewayState": {
          "description": " The status of the payment in the gateway.\n**Character limit**: 19 **Values**: automatically generated ",
          "type": "string"
        },
        "MethodType": {
          "description": " Indicates how an external refund was issued to a customer. This field is only required if the `Type` field is set to ` External`. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:\n\n- `ACH`\n- `Cash`\n- `Check`\n- `CreditCard`\n- `Other`\n- `PayPal`\n- `WireTransfer`\n- `DebitCard`\n- `CreditCardReferenceTransaction`\n",
          "type": "string"
        },
        "PaymentMethodId": {
          "description": " The unique ID of the payment method that the customer used to make the payment. This field is only required if you create a non-referenced refund.\n**Character limit**: 32 **V****alues**: a valid payment method ID ",
          "type": "string"
        },
        "ReasonCode": {
          "description": " A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n**Character limit**: 32 **V****alues**: a valid reason code ",
          "type": "string"
        },
        "RefundDate": {
          "description": " The date of the refund, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. This field is only required if the `Type` field is set to ` External`. Zuora automatically generates this field for electronic refunds.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "RefundInvoicePaymentData": {
          "description": "Container for the refund invoice payment data. This field is only required if you apply a full or partical refund against a payment attached to muliple invoices.\n",
          "properties": {
            "RefundInvoicePayment": {
              "description": "",
              "items": {
                "$ref": "#/definitions/RefundInvoicePayment"
              },
              "maxItems": 200,
              "minItems": 0,
              "type": "array"
            }
          },
          "required": [
            "RefundInvoicePayment"
          ],
          "type": "object"
        },
        "SoftDescriptor": {
          "description": " A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:\n\n- 3-byte company identifier &quot;*&quot; 18-byte descriptor\n- 7-byte company identifier &quot;*&quot; 14-byte descriptor\n- 12-byte company identifier &quot;*&quot; 9-byte descriptor\n",
          "type": "string"
        },
        "SoftDescriptorPhone": {
          "description": " A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:\n\n- Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA`\n- URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate\n- Email address\n",
          "type": "string"
        },
        "SourceType": {
          "description": " Specifies whether the refund is a refund payment or a credit balance. This field is only required if you create a non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`.\n**Character limit**: 13 **Values**:\n\n- `Payment`\n- `CreditBalance`\n",
          "type": "string"
        },
        "Type": {
          "description": " Specifies if the refund is electronic or external.\n**Character limit**: 10 **Values**:\n\n- `Electronic`\n- External\n",
          "type": "string"
        }
      },
      "required": [
        "Amount",
        "Type"
      ],
      "type": "object"
    },
    "ProxyCreateTaxationItem": {
      "example": {
        "AccountingCode": "Usage Revenue",
        "ExemptAmount": 50,
        "InvoiceItemId": "2c93808457d787030157e0306cd43a88",
        "Jurisdiction": "test",
        "LocationCode": "code - 001",
        "Name": "test",
        "TaxAmount": 3,
        "TaxCode": "taxcode",
        "TaxCodeDescription": "description",
        "TaxDate": "2016-10-20",
        "TaxMode": "TaxExclusive",
        "TaxRate": 3,
        "TaxRateDescription": "test",
        "TaxRateType": "FlatFee"
      },
      "properties": {
        "AccountingCode": {
          "description": " The Chart of Accounts ",
          "type": "string"
        },
        "ExemptAmount": {
          "description": " The amount of taxes or VAT for which the customer has an exemption.\n**Character limit**: 16 **Values**: a decimal value ",
          "format": "double",
          "type": "number"
        },
        "InvoiceItemId": {
          "description": " The ID of the specific invoice item that the taxation information applies to.\n**Character limit**: 32 **Values**: a valid invoice item ID ",
          "type": "string"
        },
        "Jurisdiction": {
          "description": " The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n**Character limit**: 32 **Values**: a string of 32 characterrs or fewer ",
          "type": "string"
        },
        "LocationCode": {
          "description": " The identifier for the location based on the value of the `TaxCode` field.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "Name": {
          "description": " The name of the tax rate, such as sales tax or GST. This name is displayed on invoices.\n**Character limit**: 128 **Values**: a string of 128 characters or fewer ",
          "type": "string"
        },
        "TaxAmount": {
          "description": " The amount of the tax applied to the charge.\n**Character limit**: 16 **Values**: a decimal value ",
          "format": "double",
          "type": "number"
        },
        "TaxCode": {
          "description": " The tax code identifies which tax rules and tax rates to apply to a specific charge.\n**Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxCodeDescription": {
          "description": " The description for the tax code.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "TaxDate": {
          "description": " The date that the tax is applied to the charge, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "TaxRate": {
          "description": " The tax rate applied to the charge.\n**Character limit**: 16 **Values**: a valid decimal value ",
          "format": "double",
          "type": "number"
        },
        "TaxRateDescription": {
          "description": " The description of the tax rate.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "TaxRateType": {
          "description": " The type of the tax rate applied to the charge.\n**Character limit**: 10 **Values**: `Percentage`, `FlatFee` ",
          "type": "string"
        }
      },
      "required": [
        "InvoiceItemId",
        "Jurisdiction",
        "Name",
        "TaxAmount",
        "TaxRate",
        "TaxDate",
        "TaxRateType"
      ],
      "type": "object"
    },
    "ProxyCreateUnitOfMeasure": {
      "example": {
        "Active": true,
        "DecimalPlaces": 9,
        "DisplayedAs": "name_display_name_1476935033519",
        "RoundingMode": "UP",
        "UomName": "name_1476935033519"
      },
      "properties": {
        "Active": {
          "description": " Indicates if the UOM is available for new product rate plans. The default value is `true`.\n**Character limit**: 5 **Values**: `true`, `false ` ",
          "type": "boolean"
        },
        "DecimalPlaces": {
          "description": "The number of digits to the right of the decimal point that you want to measure for the unit. To use whole numbers only, set this value to 0. You can't change this value after this `UOM` is used in any product, subscription, or usage. **Character limit**: 1 **Values**: an integer between 0 and 9, exclusive ",
          "format": "int64",
          "type": "integer"
        },
        "DisplayedAs": {
          "description": "The name of the UOM that you want displayed on invoices. The default value is the `UomName` field value. **Character limit**: 50 **Values**: A string of 50 characters or fewer ",
          "type": "string"
        },
        "RoundingMode": {
          "description": " Specifies whether to round the UOM value up or down when the value exceeds the `DecimalPlaces` field value. The default value is `Up`.\n**Character limit**: 4 **Values**: `Up`, `Down` ",
          "type": "string"
        },
        "UomName": {
          "description": " The name of the UOM, such as license or GB. This name is displayed in query results and in the web-based UI labels. If you want a different name to be displayed on invoices, then use the `DisplayedAs` field to provide the invoice label.\n**Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        }
      },
      "required": [
        "DecimalPlaces",
        "UomName"
      ],
      "type": "object"
    },
    "ProxyCreateUsage": {
      "example": {
        "AccountId": "2c93808457d787030157e02e07991cfc",
        "AccountNumber": "AN_1476934895501",
        "ChargeId": "2c93808457d787030157e02e07cc1d04",
        "ChargeNumber": "C-00000001",
        "Description": "this is desc",
        "EndDateTime": "2016-11-20T04:41:36.000+01:00",
        "Quantity": 9.9,
        "StartDateTime": "2016-10-20T05:41:36.000+02:00",
        "SubscriptionId": "2c93808457d787030157e02e07b11cff",
        "SubscriptionNumber": "S_1476934895501",
        "UOM": "Each"
      },
      "properties": {
        "AccountId": {
          "description": " The ID of the account associated with the usage data. This field is only required if no value is specified for the `AccountNumber` field.\n**Character limit**: 32 **Values**: a valid account ID. ",
          "type": "string"
        },
        "AccountNumber": {
          "description": " The number of the account associated with the usage data. This field is only required if no value is specified for the `AccountId` field.\n**Character limit**: 50 **Values**: a valid account number. ",
          "type": "string"
        },
        "ChargeId": {
          "description": " The OrginalId of the rate plan charge related to the usage record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32 **Values**: a valid rate plan charge OriginalID. ",
          "type": "string"
        },
        "EndDateTime": {
          "description": " The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation.\n**Character limit**: 29 **Values**: a valid date and time value. ",
          "format": "date-time",
          "type": "string"
        },
        "Quantity": {
          "description": " Indicates the number of units used.\n**Character limit**: 16 **Values**: a valid decimal amount equal to or greater than 0 ",
          "format": "double",
          "type": "number"
        },
        "RbeStatus": {
          "description": " Indicates if the rating and billing engine (RBE) processed usage data for an invoice.\n**Character limit**: 9 **Values**: automatically generated to be one of the following values: `Importing`, `Pending`, `Processed` ",
          "type": "string"
        },
        "StartDateTime": {
          "description": " The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation.\n**Character limit**: 29 **Values**: a valid date and time value ",
          "format": "date-time",
          "type": "string"
        },
        "SubmissionDateTime": {
          "description": " The date when usage was submitted.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "SubscriptionId": {
          "description": " The ID of the subscription that contains the fees related to the usage data.\n**Character limit**: 32 **Values**: a valid subscription ID ",
          "type": "string"
        },
        "UOM": {
          "description": " Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.\n**Character limit**: **Values**: a valid unit of measure ",
          "type": "string"
        }
      },
      "required": [
        "Quantity",
        "StartDateTime",
        "UOM"
      ],
      "type": "object"
    },
    "ProxyDeleteResponse": {
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "success": {
          "description": "",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyGetAccount": {
      "properties": {
        "AccountNumber": {
          "description": "Unique account number assigned to the account. **Character limit**: 50 **Values**: one of the following:\n\n- null to auto-generate\n- a string of 50 characters or fewer that doesn't begin with the default account number prefix\n",
          "type": "string"
        },
        "AdditionalEmailAddresses": {
          "description": "List of additional email addresses to receive emailed invoices. **Character limit**: 120 **Values**: comma-separated list of email addresses ",
          "type": "string"
        },
        "AllowInvoiceEdit": {
          "description": " Indicates if associated invoices can be edited.\n**Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "AutoPay": {
          "description": " Indicates if future payments are automatically collected when they're due during a Payment Run.\n**Character limit**: 5 **Values**: `true`, `false` (default) ",
          "type": "boolean"
        },
        "Balance": {
          "description": "Current outstanding balance for the account. **Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "Batch": {
          "description": " Organizes your customer accounts into groups to optimize your billing and payment operations. Required if you use the Subscribe call\n**Character limit**: 20 **Values**:any system-defined batch (`Batch1` - `Batch50 `or by name). ",
          "type": "string"
        },
        "BcdSettingOption": {
          "description": "Billing cycle day setting option. **Character limit**: 9 **Values**: `AutoSet`, `ManualSet` ",
          "type": "string"
        },
        "BillCycleDay": {
          "description": "Billing cycle day (BCD) on which bill runs generate invoices for the account. **Character limit**: 2 **Values**: any activated system-defined bill cycle day (`1` - `31`) ",
          "format": "int32",
          "type": "integer"
        },
        "BillToId": {
          "description": "ID of the person to bill for the account. **Character limit**: 32 **Values**: a valid contact ID for the account ",
          "type": "string"
        },
        "CommunicationProfileId": {
          "description": "Associates the account with a specified communication profile. **Character limit**: 32 **Values**: a valid communication profile ID ",
          "type": "string"
        },
        "CreatedById": {
          "description": "ID of the Zuora user who created the Account object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": "Date when the Account object was created. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CreditBalance": {
          "description": "Total credit balance for the account. **Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "CrmId": {
          "description": "CRM account ID for the account. A CRM is a customer relationship management system, such as Salesforce.com. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "Currency": {
          "description": " Currency that the customer is billed in. ",
          "type": "string"
        },
        "CustomerServiceRepName": {
          "description": "Name of the account's customer service representative, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "DefaultPaymentMethodId": {
          "description": "ID of the default payment method for the account. This field is required if the AutoPay field is set to `true`. **Character limit**: 32 **Values**: a valid ID for an existing payment method ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InvoiceDeliveryPrefsEmail": {
          "description": "Indicates if the customer wants to receive invoices through email.  **Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "InvoiceDeliveryPrefsPrint": {
          "description": "Indicates if the customer wants to receive printed invoices, such as through postal mail. **Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "InvoiceTemplateId": {
          "description": "The ID of the invoice template. Each customer account can use a specific invoice template for invoice generation. **Character limit**: 32 **Values**: a valid template ID configured in Zuora Billing Settings ",
          "type": "string"
        },
        "LastInvoiceDate": {
          "description": " The date when the previous invoice was generated for the account. The field value is null if no invoice has ever been generated for the account.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "Name": {
          "description": "Name of the account as displayed in the Zuora UI. **Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "Notes": {
          "description": " Comments about the account. **Character limit**: 65,535 **Values**: a string of 65,535 characters ",
          "type": "string"
        },
        "ParentId": {
          "description": "Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled. **Character limit**: 32 **Values**: a valid account ID ",
          "type": "string"
        },
        "PaymentGateway": {
          "description": "Gateway used for processing electronic payments and refunds. **Character limit**: 40 **Values**: one of the following:\n\n- a valid configured gateway name\n- Null to inherit the default value set in Payment Settings\n",
          "type": "string"
        },
        "PaymentTerm": {
          "description": "Indicates when the customer pays for subscriptions. **Character limit**: 100 **Values**: a valid, active payment term defined in the web-based UI administrative settings ",
          "type": "string"
        },
        "PurchaseOrderNumber": {
          "description": "The number of the purchase order associated with this account. Purchase order information generally comes from customers. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "SalesRepName": {
          "description": "The name of the sales representative associated with this account, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "SoldToId": {
          "description": "ID of the person who bought the subscription associated with the account. **Character limit**: 32 **Values**: a valid contact ID for the account ",
          "type": "string"
        },
        "Status": {
          "description": "Status of the account in the system. **Character limit**: 8 **Values**: one of the following:\n\n- leave null if you're using the Subscribe call\n- if you're using `create()`:\n- `Draft`\n- `Active`\n- `Canceled`\n",
          "type": "string"
        },
        "TaxCompanyCode": {
          "description": " Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Character limit**: 50 **Values**: a valid company code ",
          "type": "string"
        },
        "TaxExemptCertificateID": {
          "description": "ID of your customer's tax exemption certificate. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptCertificateType": {
          "description": "Type of the tax exemption certificate that your customer holds.  **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptDescription": {
          "description": "Description of the tax exemption certificate that your customer holds. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "TaxExemptEffectiveDate": {
          "description": "Date when the the customer's tax exemption starts. **Character limit**: 29 **Version notes**: requires Zuora Tax ",
          "format": "date",
          "type": "string"
        },
        "TaxExemptExpirationDate": {
          "description": "Date when the customer's tax exemption certificate expires  **Character limit**: 29 **Version notes**: requires Zuora Tax ",
          "format": "date",
          "type": "string"
        },
        "TaxExemptIssuingJurisdiction": {
          "description": "Indicates the jurisdiction in which the customer's tax exemption certificate was issued. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptStatus": {
          "description": " Status of the account's tax exemption. Required if you use Zuora Tax.\n**Character limit**: 19 **Values**: one of the following:\n\n- `Yes`\n- `No`\n- `PendingVerification`\n",
          "type": "string"
        },
        "TotalInvoiceBalance": {
          "description": "Total balance of the account's invoices. **Character limit**: 16 **Values**: a valid currency value ",
          "format": "double",
          "type": "number"
        },
        "UpdatedById": {
          "description": "ID of the user who last updated the account. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "Date when the account was last updated. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "VATId": {
          "description": " EU Value Added Tax ID.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Character limit**: 25 **Values**: a valid Value Added Tax ID ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetAmendment": {
      "properties": {
        "AutoRenew": {
          "description": " Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed. **Required:** For amendment of type TermsAndConditions when changing the automatic renewal status of a subscription.\n**Values**: true, false ",
          "type": "boolean"
        },
        "Code": {
          "description": " A unique alphanumeric string that identifies the amendment.\n**Character limit**: 50 **Values**: one of the following:\n\n- `null` generates a value automatically\n- A string\n",
          "type": "string"
        },
        "ContractEffectiveDate": {
          "description": " The date when the amendment's changes become effective for billing purposes.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the amendment.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the amendment was created.\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CurrentTerm": {
          "description": " The length of the period for the current subscription term. This field can be updated when Status is `Draft`.\n**Required**: Only if the value of the Type field is set to `TermsAndConditions` and TermType is set to `TERMED`. This field is not required if TermType is set to `EVERGREEN`.\n**Character limit**: **Values**: a valid number ",
          "format": "int64",
          "type": "integer"
        },
        "CurrentTermPeriodType": {
          "description": " The period type for the current subscription term. **Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n**Note**:\n\n- This field can be updated when Status is `Draft`.\n- This field is used with the CurrentTerm field to specify the current subscription term.\n",
          "type": "string"
        },
        "CustomerAcceptanceDate": {
          "description": " The date when the customer accepts the amendment's changes to the subscription. **Required**: Only if the value of the Status field is set to PendingAcceptance.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "Description": {
          "description": " A description of the amendment.\n**Character limit**: 500 **Values**: maximum 500 characters ",
          "type": "string"
        },
        "EffectiveDate": {
          "description": " The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.\n**Required**: For the cancellation amendments. Optional for other types of amendments.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Name": {
          "description": " The name of the amendment.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "RenewalSetting": {
          "description": " Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\n**Required**: If TermType is Termed **Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN ",
          "type": "string"
        },
        "RenewalTerm": {
          "description": " The term of renewal for the amended subscription. This field can be updated when Status is `Draft`.\n**Required**: Only if the value of the Type field is set to `TermsAndConditions`.\n**Character limit**: **Values:** a valid number ",
          "format": "int64",
          "type": "integer"
        },
        "RenewalTermPeriodType": {
          "description": " The period type for the subscription renewal term. This field can be updated when Status is `Draft`.\n**Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n",
          "type": "string"
        },
        "ServiceActivationDate": {
          "description": " The date when service is activated.\n**Required**: Only if the value of the Status field is set to PendingActivation.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "SpecificUpdateDate": {
          "description": " The date when the UpdateProduct amendment takes effect. This field is only applicable if there is already a future-dated UpdateProduct amendment on the subscription.\n**Required**: Only for the UpdateProduct amendments if there is already a future-dated UpdateProduct amendment on the subscription.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "Status": {
          "description": " The status of the amendment. Type: string (enum) **Character limit**: 17 **Values**: one of the following:\n\n- Draft (default, if left null)\n- Pending Activation\n- Pending Acceptance\n- Completed\n",
          "type": "string"
        },
        "SubscriptionId": {
          "description": " The ID of the subscription that the amendment changes.\n**Character limit**: 32 **Values**: a valid subscription ID ",
          "type": "string"
        },
        "TermStartDate": {
          "description": " The date when the new terms and conditions take effect.\n\n\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "TermType": {
          "description": " Indicates if the subscription isTERMED or EVERGREEN.\n\n- A TERMED subscription has an expiration date, and must be manually renewed.\n- An EVERGREEN subscription doesn't have an expiration date, and must be manually ended.\n\n**Required**: Only when as part of an amendment of type TermsAndConditions &#65279;to change the term type of a subscription. Type: string **Character limit**: 9 **Values**: TERMED, EVERGREEN ",
          "type": "string"
        },
        "Type": {
          "description": " The type of amendment.\n**Character limit**: 18 **Values**: one of the following:\n\n- Cancellation\n- NewProduct\n- OwnerTransfer\n- RemoveProduct\n- Renewal\n- UpdateProduct\n- TermsAndConditions\n- SuspendSubscription (This value is in **Limited Availability**.)\n- ResumeSubscription (This value is in **Limited Availability**.)\n",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the amendment.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the amendment was last updated.\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetBillRun": {
      "properties": {
        "AccountId": {
          "description": "ID of the account used for single account bill run.\n\n**Character limit:** 32\n",
          "type": "string"
        },
        "AutoEmail": {
          "description": "Determines whether to auto send email or not once the bill run completes.\n\n**Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.\n",
          "type": "boolean"
        },
        "AutoPost": {
          "description": "Determines whether to auto post bill run or not once the bill run completes.\n\n**Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.\n",
          "type": "boolean"
        },
        "AutoRenewal": {
          "description": "Determines whether to auto renew subscription or not by this bill run once the bill run completes.\n",
          "type": "boolean"
        },
        "Batch": {
          "description": "Batch of accounts for this bill run. \n\n**Character limit:** 20\n\n**Values:** AllBatches or Batchn where n is a number between 1 and 50.\n",
          "type": "string"
        },
        "BillCycleDay": {
          "description": "The day of the bill cycle.\n\n**Character limit:** 32\n\n**Values:** `AllBillCycleDays` or 01 - 31.\n",
          "type": "string"
        },
        "BillRunNumber": {
          "description": "Number of the bill run.\n\n**Character limit:** 50\n\n**Values:** automatically generated\n",
          "type": "string"
        },
        "CreatedById": {
          "description": "The user ID of the person who created the bill run.\n\n**Character limit:** 32\n\n**Values:** automatically generated         \n",
          "type": "string"
        },
        "CreatedDate": {
          "description": "The date and time when the bill run was created.\n\n**Character limit:** 29\n\n**Values:** automatically generated           \n",
          "format": "date-time",
          "type": "string"
        },
        "ExecutedDate": {
          "description": "The date and time when the bill run was executed.\n",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "ID of the object.\n\n**Character limit:** 32\n\n**Values:** automatically generated\n",
          "type": "string"
        },
        "InvoiceDate": {
          "description": "Invoice date for this bill run.\n\n**Character limit:** 29\n",
          "format": "date",
          "type": "string"
        },
        "InvoicesEmailed": {
          "description": "Indicates whether the invoice has been sent or not. \n\n**Values:** automatically generated           \n",
          "type": "boolean"
        },
        "LastEmailSentTime": {
          "description": "The last time emails were sent for this bill run.\n\n**Character limit:** 29\n\n**Values:** automatically generated\n",
          "format": "date-time",
          "type": "string"
        },
        "NoEmailForZeroAmountInvoice": {
          "description": "Determines whether to suppress email for invoices with zero total or not for this bill run once the bill run completes. (Do not email invoices with 0 Invoice Total).\n",
          "type": "boolean"
        },
        "NumberOfAccounts": {
          "description": "The number of accounts processed by this bill run.\n\n**Values:** automatically generated\n",
          "format": "int64",
          "type": "integer"
        },
        "NumberOfInvoices": {
          "description": "The number of invoices generated by this  run.\n\n**Values:** automatically generated\n",
          "format": "int64",
          "type": "integer"
        },
        "Status": {
          "description": "The status  for this bill run. See [Status Types](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs#Status_Types) for more information.\n\n**Character limit:** 20\n\n**Values:** \n\n  * `Pending`\n  * `Processing`\n  * `Completed`\n  * `Error`\n  * `Canceled`\n  * `Posted`\n",
          "type": "string"
        },
        "TargetDate": {
          "description": "Target date for this bill run. See [Create Bill Run](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs) for more information.\n\n**Character limit:** 29\n",
          "format": "date",
          "type": "string"
        },
        "UpdatedById": {
          "description": "The user ID of the person who last updated the bill run.\n\n**Character limit:** 32\n\n**Values:** automatically generated         \n",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "The date and time when the bill run was last updated.\n\n**Character limit:** 29\n\n**Values:** automatically generated \n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetCommunicationProfile": {
      "properties": {
        "CreatedById": {
          "description": "",
          "type": "string"
        },
        "CreatedDate": {
          "description": "",
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "ProfileName": {
          "description": "",
          "type": "string"
        },
        "UpdatedById": {
          "description": "",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetContact": {
      "properties": {
        "AccountId": {
          "description": " The Zuora account ID associated with this contact. This field is not required when you use the Subscribe call. This field is required for all other calls.\n**Character limit: **32 **Values: **a valid account ID ",
          "type": "string"
        },
        "Address1": {
          "description": " The first line of the contact's address, which is often a street address or business name.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "Address2": {
          "description": " The second line of the contact's address.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "City": {
          "description": " The city of the contact's address.\n**Character limit**: 40 **Values: **a string of 40 characters or fewer ",
          "type": "string"
        },
        "Country": {
          "description": " The country of the contact's address. ",
          "type": "string"
        },
        "County": {
          "description": " The country. May optionally be used by Zuora Tax to calculate county tax.\n**Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "CreatedById": {
          "description": "The ID of the Zuora user who created the contact. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": "The date when the contact was created. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "description": " A description for the contact.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "Fax": {
          "description": " The contact's fax number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "FirstName": {
          "description": " The contact's first name.\n**Character limit**: 100 **Values**: a string of the contact's first name ",
          "type": "string"
        },
        "HomePhone": {
          "description": " The contact's home phone number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "LastName": {
          "description": " The contact's last name.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "MobilePhone": {
          "description": " The contact's mobile phone number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "NickName": {
          "description": " A nickname for the contact.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "OtherPhone": {
          "description": " An additional phone number for the contact.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "OtherPhoneType": {
          "description": "The type of the `OtherPhone`. **Character limit**: 20 **Values**: `Work`, `Mobile`, `Home`, `Other` ",
          "type": "string"
        },
        "PersonalEmail": {
          "description": " The contact's personal email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "PostalCode": {
          "description": " The zip code for the contact's address.\n**Character limit:** 20 **Values: **a string of 20 characters or fewer ",
          "type": "string"
        },
        "State": {
          "description": " The state or province of the contact's address. ",
          "type": "string"
        },
        "TaxRegion": {
          "description": "If using Zuora Tax rules ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who lasted updated the contact.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the contact was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "WorkEmail": {
          "description": " The contact's business email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "WorkPhone": {
          "description": " The contact's business phone number.\n**Character limit**: 40 **notes**: -- **Values**: a string of 40 characters or fewer ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetCreditBalanceAdjustment": {
      "properties": {
        "AccountId": {
          "description": " The account ID of the credit balance's account. Zuora generates this value from the source transaction.\n**Character limit**: 32 **V****alues**: automatically generated from:\n\n- CreditBalanceAdjustment.SourceTransactionId or\n- CreditBalanceAdjustment.SourceTransactionNumber\n",
          "type": "string"
        },
        "AccountingCode": {
          "description": " The Chart of Accounts ",
          "type": "string"
        },
        "AdjustmentDate": {
          "description": " The date when the credit balance adjustment is applied.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "Amount": {
          "description": " The amount of the adjustment.\n**Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "CancelledOn": {
          "description": " The date when the credit balance adjustment was canceled.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Comment": {
          "description": " Use this field to record comments about the credit balance adjustment.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the credit balance adjustment.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the credit balance adjustmentwas generated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "IntegrationId__NS": {
          "description": "",
          "type": "string"
        },
        "IntegrationStatus__NS": {
          "description": "",
          "type": "string"
        },
        "Number": {
          "description": " A unique identifier for the credit balance adjustment. Zuora generates this number in the format, <em>CBA-xxxxxxxx</em>, such as CBA-00375919.\n**Character limit**: 255 **Values**: automatically generated ",
          "type": "string"
        },
        "ReasonCode": {
          "description": " A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n**Character limit**: 32 **V****alues**: a valid reason code ",
          "type": "string"
        },
        "ReferenceId": {
          "description": " The ID of the payment that the credit balance adjustment is for.\n**Character limit**: 32 **Values**: a string of 60 characters or fewer ",
          "type": "string"
        },
        "SourceTransactionId": {
          "description": " The ID of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field.\n**Character limit**: 32 **Values**: one of the following:\n\n- InvoiceId\n- PaymentId\n- RefundId\n",
          "type": "string"
        },
        "SourceTransactionNumber": {
          "description": " The number of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field.\n**Character limit**: 50 **Values**: one of the following:\n\n- InvoiceNumber\n- PaymentNumber\n- RefundNumber\n",
          "type": "string"
        },
        "SourceTransactionType": {
          "description": " The source of the credit balance adjustment.\n**Character limit**: **Values**: automatically generated; one of the following:\n\n- Invoice\n- Payment\n- Refund\n",
          "type": "string"
        },
        "Status": {
          "description": " The status of the credit balance adjustment.\n**Character limit**: 9 **Values**: automatically generated; one of the following:\n\n- Processed\n- Canceled\n",
          "type": "string"
        },
        "SyncDate__NS": {
          "description": "",
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": " Indicates the status of the credit balance adjustment's transfer to an external accounting system, such as NetSuite.\n**Character limit**: **Values**: one of the following:\n\n- Processing\n- Yes\n- Error\n- Ignore\n",
          "type": "string"
        },
        "Type": {
          "description": "Create Query Filter",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the credit balance adjustment.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the credit balance adjustment was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetExport": {
      "properties": {
        "ConvertToCurrencies": {
          "description": " The currencies that you want to convert transaction amounts into. You can specify any number of currencies. Specify the currencies using their Foreign Currency Conversion enabled to use this field.\n**Character limit**: **Values**: a list of valid currency codes ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the export.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the import was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Encrypted": {
          "description": " Exports a secure version of encrypted data source fields. such as the AchAccountNumber field of the PaymentMethod object and the DefaultPaymentMethod data souce objects.\n**Character limit**: 5 **Values:** true, false ",
          "type": "boolean"
        },
        "FileId": {
          "description": " The ID of the file generated by an export query. This file is automatically generated when an Export object is created. Use this file ID with [Get files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) to download the export file.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "Format": {
          "description": " The format that you want the export file to use.\n**Character limit**: 5 ",
          "enum": [
            "csv",
            "html",
            "Excel"
          ],
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Name": {
          "description": " The name of the export.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "Query": {
          "description": "[Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL) query.",
          "type": "string"
        },
        "Size": {
          "description": " The number of records or rows exported. This field value is null until the export status is Completed.\n**Character limit**: **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "description": " The status of the export. Type: string (enum) **Character limit**: 10 **Values**: automatically generated to be one of the following values:\n\n- Pending\n- Processing\n- Completed\n- Canceled\n- Failed\n",
          "type": "string"
        },
        "StatusReason": {
          "description": " The reason for the given status. Use this information to help ascertain why an export failed.\n**Character limi**t: 255 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the export.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the expotr was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Zip": {
          "description": " Indicates if you want the resulting export file to be compressed into a zip file.\n**Character limit**: **Values**: true, false (default) ",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyGetFeature": {
      "properties": {
        "CreatedById": {
          "description": " Internal Zuora ID of the user who created the feature **Character limit**: 32 ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " Date and time when the feature was created **Character limit**: 29 ",
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "description": " Description of the feature **Character limit**: 1000 ",
          "type": "string"
        },
        "FeatureCode": {
          "description": " Unique code of the feature **Character limit**: 255 ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Name": {
          "description": " Name of the feature **Character limit**: 255 ",
          "type": "string"
        },
        "Status": {
          "description": " Status of the feature, Active or Inactive **Character limit**: 8 ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " Internal Zuora ID of the user who last updated the feature **Character limit**: 32 ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " Date and time when the feature was last updated **Character limit**: 29 ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetImport": {
      "properties": {
        "CreatedById": {
          "description": " The user ID of the person who created the import.\n\n**Character limit**: 32\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the import was created.\n\n**Character limit**: 29\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "ImportType": {
          "description": " The type of item imported.\n\n**Character limit**: 7\n\n**Values**: Usage ",
          "type": "string"
        },
        "ImportedCount": {
          "description": "The number of records successfully imported.\n\n**Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "Md5": {
          "description": " A check to validate the import file's integrity.\n\n**Character limit:** 32\n\n**System-generated:** no\n\n**Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "Name": {
          "description": " A descriptive name for the import.\n\n**Character limit:** 100\n\n**Values:** one of the following:\n\n- a string of 100 characters or fewer\n- if NULL default is: `import <ImportType_value>`\n",
          "type": "string"
        },
        "OriginalResourceUrl": {
          "description": " The URL for your import file, which contains your records for upload. When you upload the file, Zuora assigns it to this address.\n\n**Values:** automatic dynamically-generated URL ",
          "type": "string"
        },
        "ResultResourceUrl": {
          "description": " The URL for the import result file, which is a zipped CSV file.\n\n**Values**: automatic dynamically-generated URL ",
          "type": "string"
        },
        "Status": {
          "description": "The status of the import process.\n\n**Values**: automatically generated using one of the following values:\n\n- Pending\n- Processing\n- Completed\n- Failed\n",
          "type": "string"
        },
        "StatusReason": {
          "description": " The reason for the system-generated status. Use this information if the import fails.\n\n**Character limit**: 2000\n\n**Values**: automatically generated error message ",
          "type": "string"
        },
        "TotalCount": {
          "description": " The number of records in the import file.\n\n**Character limit**:\n\n**Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the import.\n\n**Character limit**: 32\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the import was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetInvoice": {
      "properties": {
        "AccountId": {
          "description": "",
          "type": "string"
        },
        "AdjustmentAmount": {
          "description": " The amount of the invoice adjustments associated with the invoice. **Character limi**t: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "Amount": {
          "description": " The sum of all charges and taxes associated with the invoice.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "AmountWithoutTax": {
          "description": " The sum of all charges associated with the invoice. Taxes are excluded from this value.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "Balance": {
          "description": " The remaining balance of the invoice after all payments, adjustments, and refunds are applied.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "Body": {
          "description": " Required ",
          "type": "string"
        },
        "Comments": {
          "description": " Additional information related to the invoice that a Zuora user added to the invoice.\n**Character limit**: 255 **Values:** a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the invoice was generated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CreditBalanceAdjustmentAmount": {
          "description": " The currency amount of the adjustment applied to the customer's credit balance.\n**Character limit**: 16 **Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.\n\n\n",
          "format": "double",
          "type": "number"
        },
        "DueDate": {
          "description": " The date by which the payment for this invoice is due.\n**Character limit**: 29 **Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "IncludesOneTime": {
          "description": " Specifies whether the invoice includes one-time charges. You can use this field only with the Generate call for the Invoice object.\n**Character limit**: 5 **Values**: automatically generated from one of the following: `True` (default), `False` ",
          "type": "boolean"
        },
        "IncludesRecurring": {
          "description": " Specifies whether the invoice includes recurring charges. You can use this field only with the Generate call for the Invoice object.\n**Character limit**: 5 **Values**: automatically generated from one of the following: `True` (default), `False` ",
          "type": "boolean"
        },
        "IncludesUsage": {
          "description": " Specifies whether the invoice includes usage charges. You can use this field only with the Generate call for the Invoice object.\n**Character limit**: 5 **Values**: automatically generated from one of the following: `True `(default), `False` ",
          "type": "boolean"
        },
        "InvoiceDate": {
          "description": " Specifies the date on which to generate the invoice.\n**Character limit**: 29 **Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "InvoiceNumber": {
          "description": " The unique identification number for the invoice. This number is returned as a string.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "LastEmailSentDate": {
          "description": " The date when the invoice was last emailed.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "PaymentAmount": {
          "description": " The amount of payments applied to the invoice.\n**Character limit**: 16 **Value**s: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "PostedBy": {
          "description": " The user ID of the person who moved the invoice to Posted status.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "PostedDate": {
          "description": " The date when the invoice was posted.\n**Character limit:** 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "RefundAmount": {
          "description": " Specifies the amount of a refund that was applied against an earlier payment on the invoice.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "Status": {
          "description": " The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.\n**Character limit**: 8 **Values**: one of the following:\n\n-  Draft (default, automatically set upon invoice creation)\n\n-  Posted\n\n-  Canceled\n\n",
          "type": "string"
        },
        "TargetDate": {
          "description": " This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.\n**Character limit**: 29 **Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "TaxAmount": {
          "description": " The total amount of the taxes applied to the invoice.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "TaxExemptAmount": {
          "description": " The total amount of the invoice that is exempt from taxation.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "TransferredToAccounting": {
          "description": " Specifies whether or not the invoice was transferred to an external accounting system, such as NetSuite.\n**Character limit**: 10 **Values**: Processing, Yes, Error, Ignore ",
          "type": "string"
        },
        "UpdatedById": {
          "description": "",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the invoice was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetInvoiceAdjustment": {
      "properties": {
        "AccountId": {
          "description": " The ID of the account that owns the invoice.\n**Character limit**: 32 **Values**: inherited from Account.ID for the invoice owner ",
          "type": "string"
        },
        "AccountingCode": {
          "description": "The accounting code for the invoice adjustment. ",
          "type": "string"
        },
        "AdjustmentDate": {
          "description": " The date when the invoice adjustment is applied. This date must be the same as the invoice's date or later.\n**Character limit**: 29 **Values**: Leave null to automatically generate the current date ",
          "format": "date",
          "type": "string"
        },
        "AdjustmentNumber": {
          "description": " A unique string to identify an individual invoice adjustment.\n**Character limit**: 255 **Values**: automatically generated ",
          "type": "string"
        },
        "Amount": {
          "description": " The amount of the invoice adjustment.\n**Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "CancelledById": {
          "description": " The ID of the Zuora user who canceled the invoice adjustment. Zuora generates this read-only field only if the adjustment is canceled.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CancelledOn": {
          "description": " The date when the invoice adjustment is canceled. Zuora generates this read-only field if this adjustment is canceled.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Comments": {
          "description": " Use this field to record comments about the invoice adjustment.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the invoice adjustment.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date the invoice adjustment was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CustomerName": {
          "description": " The name of the account that owns the associated invoice.\n\n**Character limit**: 50\n\n**Values**: inherited from `Account.Name`\n\n**Note**: This value changes if `Account.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceAdjustment` do not change when `Account.Name` is updated. ",
          "type": "string"
        },
        "CustomerNumber": {
          "description": " The unique account number of the customer's account.\n\n**Character limit**: 70\n\n**Values**: inherited from `Account.AccountNumber`\n\n**Note**: This value changes if `Account.AccountNumber` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceAdjustment` do not change when `Account.AccountNumber` is updated. ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "ImpactAmount": {
          "description": " The amount that changes the balance of the associated invoice.\n**Character limit**: 16 **Values**: automatically calculated ",
          "format": "double",
          "type": "number"
        },
        "InvoiceId": {
          "description": " The ID of the invoice associated with the adjustment. This field is required if you don't specify a value for the `InvoiceNumber` field.\n**Character limit**: 32 **Values**: a valid invoice ID ",
          "type": "string"
        },
        "InvoiceNumber": {
          "description": " The unique identification number for the associated invoice. This field is required if you don't specify a value for the `InvoiceId` field.\n**Character limit**: 32 **Values**: a valid invoice number ",
          "type": "string"
        },
        "ReasonCode": {
          "description": " A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n**Character limit**: 32 **V****alues**: a valid reason code ",
          "type": "string"
        },
        "ReferenceId": {
          "description": " A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system.\n**Character limit**: 60 **Values**: a string of 60 characters or fewer ",
          "type": "string"
        },
        "Status": {
          "description": " The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls.\n**Character limit**: 9 **Values**: `Canceled`, `Processed` ",
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": " Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.\n**Character limit**: 10 **Values**: `Processing`, `Yes`, `Error`, `Ignore` ",
          "type": "string"
        },
        "Type": {
          "description": " Indicates whether the adjustment credits or debits the invoice amount.\n**Character limit**: 6 **Values**: `Credit`, `Charge` ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the invoice.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the invoice was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetInvoiceItem": {
      "properties": {
        "AccountingCode": {
          "description": " The accounting code for the item's charge. Accounting codes group transactions that contain similar accounting attributes.\n**Character limit**: 100 **Values**: inherited from `RatePlanCharge.AccountingCode` ",
          "type": "string"
        },
        "AppliedToInvoiceItemId": {
          "description": " Associates a discount invoice item to a specific invoice item.\n\n**Character limit**: 32\n\n**Values**: inherited from `InvoiceItem.Id` for the invoice item that the discount charge is applied to ",
          "type": "string"
        },
        "ChargeAmount": {
          "description": " The amount being charged for the invoice item. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.\n**Character limit**: **Values**: automatically calculated from multiple fields in multiple objects ",
          "format": "double",
          "type": "number"
        },
        "ChargeDate": {
          "description": " The date when the Invoice Item is created .\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "ChargeName": {
          "description": " The name of the invoice item's charge.\n**Character limi**t: 50 **Values: **inherited from `RatePlanCharge.Name` ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the invoice item.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date the invoice item was created.\n**Character limit:** 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InvoiceId": {
          "description": " The ID of the invoice that's associated with this invoice item.\n**Character limit**: 32 **Values**: inherited from `Invoice.Id` ",
          "type": "string"
        },
        "ProcessingType": {
          "description": " Identifies the kind of charge where 0 is a charge, 1 is a discount, 2 is a prepayment, and 3 is a tax. The returned value is text not decimal on data sources.\n**Character limit**: **Values: **\n\n- 0: charge\n- 1: discount\n- 2: prepayment\n- 3: tax\n",
          "format": "double",
          "type": "number"
        },
        "ProductDescription": {
          "description": " A description of the product associated with this invoice item.\n\n**Character limit**: 500\n\n**Values**: inherited from `Product.Description`\n\n**Note**: This value changes if `Product.Description` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change when `Product.Description` is updated. ",
          "type": "string"
        },
        "ProductName": {
          "description": " The name of the product associated with this invoice item.\n\n**Character limit**: 255\n\n**Values**: inherited from `Product.Name`\n\n**Note**: This value changes if `Product.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change when `Product.Name` is updated. ",
          "type": "string"
        },
        "Quantity": {
          "description": " The number of units for this invoice item.\n**Values**: inherited from `RatePlanCharge.Quantity` ",
          "format": "double",
          "type": "number"
        },
        "RatePlanChargeId": {
          "description": " The ID of the rate plan charge that's associated with this invoice item.\n**Character limit**: 32 **Values**: inherited from `RatePlanCharge.Id` ",
          "type": "string"
        },
        "RevRecStartDate": {
          "description": " The date when revenue recognition is triggered.\n**Character limit**: 29 **Values**: generated from `InvoiceItem.RevRecTriggerCondition` ",
          "format": "date",
          "type": "string"
        },
        "SKU": {
          "description": " The unique SKU for the product associated with this invoice item.\n**Character limit**: 255 **Values**: inherited from `Product.SKU` ",
          "type": "string"
        },
        "ServiceEndDate": {
          "description": " The end date of the service period associated with this invoice item. Service ends one second before the date in this value.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "ServiceStartDate": {
          "description": " The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.\n**Character limit:** 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "SubscriptionId": {
          "description": " The ID of the subscription associated with the invoice item.\n**Character limit**: 32 **Values**: inherited from `Subscription.Id` ",
          "type": "string"
        },
        "TaxAmount": {
          "description": " The amount of tax applied to the invoice item's charge.\n**Character limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge object ",
          "format": "double",
          "type": "number"
        },
        "TaxCode": {
          "description": " Specifies the tax code for taxation rules.\n**Character limit**: 6 **Values**: inherited from `ProductRatePlanCharge.TaxCode` ",
          "type": "string"
        },
        "TaxExemptAmount": {
          "description": " The amount of the invoice item's charge that's tax exempt.\n**Character limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge object ",
          "format": "double",
          "type": "number"
        },
        "TaxMode": {
          "description": " The tax mode of the invoice item.\n**Character limit**: 12 **Values**: `TaxExclusive`, `TaxInclusive` ",
          "type": "string"
        },
        "UOM": {
          "description": " Specifies the units to measure usage. **Character limit**: **Values**: inherited from `ProductRatePlanCharge.UOM` ",
          "type": "string"
        },
        "UnitPrice": {
          "description": " The per-unit price of the invoice item.\n**Character limit**: **Values**: calculated from multiple fields in ProductRatePlanCharge and ProductRatePlanChargeTier objets ",
          "format": "double",
          "type": "number"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the invoice item.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the invoice item was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetInvoiceItemAdjustment": {
      "properties": {
        "AccountId": {
          "description": " The ID of the account that owns the invoice.\n**Values**: inherited from `Account.ID` for the invoice owner ",
          "type": "string"
        },
        "AccountingCode": {
          "description": " The accounting code for the invoice item. Accounting codes group transactions that contain similar accounting attributes.\n**Character limit**: 100 **Values**: inherited from `InvoiceItem.AccountingCode` ",
          "type": "string"
        },
        "AdjustmentDate": {
          "description": " The date when the invoice item adjustment is applied, in `yyyy-mm-dd` format. This date must be the same as the invoice's date or later.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "AdjustmentNumber": {
          "description": " A unique string to identify an individual invoice item adjustment.\n**Character limit**: 255 **Values**: automatically generated ",
          "type": "string"
        },
        "Amount": {
          "description": " The amount of the invoice item adjustment. The value of Amount must be positive. Use the required parameter Type to either credit or charge (debit) this amount on the invoice. **Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "CancelledById": {
          "description": " The ID of the Zuora user who canceled the invoice item adjustment. Zuora generates this read-only field only if the adjustment is canceled.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CancelledDate": {
          "description": " The date when the invoice item adjustment is canceled. Zuora generates this read-only field if this adjustment is canceled.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Comment": {
          "description": " Use this field to record comments about the invoice item adjustment.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the invoice item.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date the invoice item was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CustomerName": {
          "description": " The name of the account that owns the associated invoice.\n\n**Character limit**: 50\n\n**Values**: inherited from `Account.Name`\n\n**Note**: This value changes if `Account.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do not change when `Account.Name` is updated. ",
          "type": "string"
        },
        "CustomerNumber": {
          "description": " The unique account number of the customer's account.\n\n**Character limit**: 50\n\n**Values**: inherited from `Account.AccountNumber`\n\n**Note**: This value changes if `Account.AccountNumber` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do not change when `Account.AccountNumber` is updated. ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InvoiceId": {
          "description": " The ID of the invoice associated with the adjustment. The adjustment invoice item is in this invoice. This field is optional if you specify a value for the `InvoiceNumber` field.\n**Character limit**: 3 **Values**: a valid invoice ID ",
          "type": "string"
        },
        "InvoiceItemName": {
          "description": " The name of the invoice item's charge. This field is required in the Query call, but is inherited in other calls.\n**Character limit**: 255 **Values**: inherited from `InvoiceItem.ChargeName` ",
          "type": "string"
        },
        "InvoiceNumber": {
          "description": " The unique identification number for the invoice that contains the invoice item. This field is optional if you specify a value for the `InvoiceId` field.\n**Character limit**: 32 **Values**: a valid invoice number ",
          "type": "string"
        },
        "ReasonCode": {
          "description": " A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n**Character limit**: 32 **V****alues**: a valid reason code ",
          "type": "string"
        },
        "ReferenceId": {
          "description": " A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system.\n**Character limit**: 60 **Values**: a string of 60 characters or fewer ",
          "type": "string"
        },
        "ServiceEndDate": {
          "description": " The end date of the service period associated with the invoice item. Service ends one second before the date in this value.\n\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "ServiceStartDate": {
          "description": " The start date of the service period associated with the invoice item. Service ends one second before the date in this value.\n\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "SourceId": {
          "description": " The ID of the item specified in the SourceType field.\n**Character limit**: 32 **Values**: a valid invoice item ID or taxation item ID ",
          "type": "string"
        },
        "SourceType": {
          "description": " The type of adjustment.\n**Character limit**: 13 **Values**: InvoiceDetail, Tax ",
          "type": "string"
        },
        "Status": {
          "description": " The status of the invoice item adjustment. This field is required in the Query call, but is automatically generated in other calls.\n**Character limit**: 9 **Values**: Canceled, Processed ",
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": " Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.\n**Character limit**: 10 **Values**: Processing, Yes, Error, Ignore ",
          "type": "string"
        },
        "Type": {
          "description": " Query Filter ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the invoice item.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the invoice item was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetInvoicePayment": {
      "properties": {
        "Amount": {
          "description": " The amount of the payment.\n**Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the invoice payment.\n**Character limit**: 32 **V****alues**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the invoice payment was generated.\n**Character limit**: 29 **V****alues**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InvoiceId": {
          "description": " The unique ID of the invoice associated with this invoice payment.\n**Character limit**: 32 **Values**: a valid invoice ID ",
          "type": "string"
        },
        "PaymentId": {
          "description": " The unique ID of the payment associated with this invoice payment.\n**Character limit**: 32 **V****alues**: a valid payment ID ",
          "type": "string"
        },
        "RefundAmount": {
          "description": "Specifies the amount of a refund applied against this InvoicePayment. **Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the invoice payment.\n**Character limit**: 32 **V****alues**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the invoice payment was last updated.\n**Character limit**: 29 **V****alues**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetInvoiceSplit": {
      "properties": {
        "CreatedById": {
          "description": "The ID of the Zuora user who created the InvoiceSplit object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": "The date when the InvoiceSplit object was created. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InvoiceId": {
          "description": " The ID of the original invoice that the InvoiceSplit object splits. This field becomes read-only after the InvoiceSplit object is created.\n**Character limit**: 32 **Values**: a valid invoice ID ",
          "type": "string"
        },
        "UpdatedById": {
          "description": "The ID of the Zuora user who last updated the invoice split. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "The date when the invoice split was last updated. **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetInvoiceSplitItem": {
      "properties": {
        "CreatedById": {
          "description": " The ID of the Zuora user who created the InvoiceSplitItem object.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the InvoiceSplitItem was created.\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InvoiceDate": {
          "description": " The generation date of the new split invoice, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "InvoiceId": {
          "description": " The new invoice after the split.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "InvoiceSplitId": {
          "description": " The ID of the invoice split associated with the individual invoice split item.\n**Character limit**: 32 **Values**: a valid invoice split ID ",
          "type": "string"
        },
        "PaymentTerm": {
          "description": " Indicates when the customer pays the split invoice.\n**Values**: a valid, active payment term ",
          "type": "string"
        },
        "SplitPercentage": {
          "description": " Specifies the percentage of the original invoice that you want to be the balance of the split invoice. The total of the SplitPercentage field values for all of the InvoiceSplitItem objects in an InvoiceSplit object must equal 100.\n**Values**:\n",
          "format": "double",
          "type": "number"
        },
        "UpdatedById": {
          "description": " The ID of the Zuora user who last updated the invoice split.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the invoice split was last updated.\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetPayment": {
      "properties": {
        "AccountId": {
          "description": "The unique account ID for the customer that the payment is for.\n",
          "type": "string"
        },
        "AccountingCode": {
          "description": "The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.\n",
          "type": "string"
        },
        "Amount": {
          "description": "The amount of the payment.\n",
          "format": "double",
          "type": "number"
        },
        "AppliedCreditBalanceAmount": {
          "description": "The amount of the payment to apply to a credit balance.\n",
          "format": "double",
          "type": "number"
        },
        "AuthTransactionId": {
          "description": "The authorization transaction ID from the payment gateway. \n",
          "type": "string"
        },
        "BankIdentificationNumber": {
          "description": "The first six digits of the credit card or debit card used for the payment, when applicable. \n",
          "type": "string"
        },
        "CancelledOn": {
          "description": "The date and time when the payment was canceled.\n",
          "format": "date-time",
          "type": "string"
        },
        "Comment": {
          "description": "Additional information related to the payment.\n",
          "type": "string"
        },
        "CreatedById": {
          "description": "The ID of the Zuora user who created the payment.\n",
          "type": "string"
        },
        "CreatedDate": {
          "description": "The date and time when the payment was created.\n",
          "format": "date-time",
          "type": "string"
        },
        "EffectiveDate": {
          "description": "The date when the payment takes effect.\n",
          "format": "date",
          "type": "string"
        },
        "Gateway": {
          "description": "The name of the gateway instance that processes the payment. \n",
          "type": "string"
        },
        "GatewayOrderId": {
          "description": "A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.\n",
          "type": "string"
        },
        "GatewayResponse": {
          "description": "The message returned from the payment gateway for the payment. This message is gateway-dependent.\n",
          "type": "string"
        },
        "GatewayResponseCode": {
          "description": "The code returned from the payment gateway for the payment. This code is gateway-dependent.\n",
          "type": "string"
        },
        "GatewayState": {
          "description": "The status of the payment in the gateway; use for reconciliation.\n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "Id": {
          "description": "The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352.\n",
          "type": "string"
        },
        "MarkedForSubmissionOn": {
          "description": "The date and time when a payment was marked and waiting for batch submission to the payment process. \n",
          "format": "date-time",
          "type": "string"
        },
        "PaymentMethodId": {
          "description": "The ID of the payment method used for the payment. \n",
          "type": "string"
        },
        "PaymentMethodSnapshotId": {
          "description": "The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction.\n",
          "type": "string"
        },
        "PaymentNumber": {
          "description": "The unique identification number of the payment. For example, P-00000028.\n",
          "type": "string"
        },
        "ReferenceId": {
          "description": "The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "RefundAmount": {
          "description": "The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.\n",
          "format": "double",
          "type": "number"
        },
        "SecondPaymentReferenceId": {
          "description": "The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "type": "string"
        },
        "SettledOn": {
          "description": "The date and time when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways.\n",
          "format": "date-time",
          "type": "string"
        },
        "SoftDescriptor": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi. \n",
          "type": "string"
        },
        "SoftDescriptorPhone": {
          "description": "A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.\n",
          "type": "string"
        },
        "Source": {
          "description": "How the payment was created, whether through the API, manually, import, or payment run.\n",
          "enum": [
            "PaymentRun",
            "Import",
            "Manually",
            "API"
          ],
          "type": "string"
        },
        "SourceName": {
          "description": "The name of the source. The value is a Payment Run number or a file name.\n",
          "type": "string"
        },
        "Status": {
          "description": "The status of the payment in Zuora. The value depends on the type of payment.\n\nFor electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.\n",
          "enum": [
            "Processed",
            "Error",
            "Voided",
            "Canceled"
          ],
          "type": "string"
        },
        "SubmittedOn": {
          "description": "The date and time when the payment was submitted.\n",
          "format": "date-time",
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": "Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
          "enum": [
            "Processing",
            true,
            "Error",
            "Ignore"
          ],
          "type": "string"
        },
        "Type": {
          "description": "The type of the payment, whether the payment is external or electronic.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "type": "string"
        },
        "UpdatedById": {
          "description": "The ID of the Zuora user who last updated the payment.\n",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "The date and time when the payment was last updated.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetPaymentMethod": {
      "properties": {
        "AccountId": {
          "description": " The ID of the customer account associated with this payment method. This field is not required for the account ID. ",
          "type": "string"
        },
        "AchAbaCode": {
          "description": " The nine-digit routing number or ABA number used by banks. Use this field for ACH payment methods.\n**Character limit**: 9 **Values**: a string of 9 characters or fewer ",
          "type": "string"
        },
        "AchAccountName": {
          "description": " The name of the account holder, which can be either a person or a company. Use this field for ACH payment methods.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "AchAccountNumberMask": {
          "description": " This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`. Use this field for ACH payment methods.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "AchAccountType": {
          "description": " The type of bank account associated with the ACH payment. Use this field for ACH payment methods.\n**Character limit**: 16 **Values**:\n\n- `BusinessChecking`\n- `Checking`\n- `Saving`\n",
          "type": "string"
        },
        "AchAddress1": {
          "description": " Line 1 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.\n**Character limit:** **Values:** an address ",
          "type": "string"
        },
        "AchAddress2": {
          "description": " Line 2 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.\n**Character limit:** **Values:** an address ",
          "type": "string"
        },
        "AchBankName": {
          "description": " The name of the bank where the ACH payment account is held. Use this field for ACH payment methods.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "Active": {
          "description": " Specifies whether a payment method is available in Zuora. The default value is `false`.\n**Character limit**: 5 **Values**: `true`, `false` ",
          "type": "boolean"
        },
        "BankBranchCode": {
          "description": " The branch code of the bank used for direct debit. Use this field for direct debit payment methods.\n**Character limit**: 10 **Values**:  string of 10 characters or fewer ",
          "type": "string"
        },
        "BankCheckDigit": {
          "description": "The check digit in the international bank account number, which confirms the validity of the account. Use this field for direct debit payment methods. **Character limit**: 4 **Values**:  string of 4 characters or fewer ",
          "type": "string"
        },
        "BankCity": {
          "description": " The city of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:70 **Values**:  string of 70 characters or fewer ",
          "type": "string"
        },
        "BankCode": {
          "description": " The sort code or number that identifies the bank. This is also known as the sort code. This field is required for direct debit payment methods.\n**Character limit**: 18 **Values**:  string of 18 characters or fewer ",
          "type": "string"
        },
        "BankIdentificationNumber": {
          "description": " The first six digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.\n**Character limit**: 6 **Values**:  string of 6 characters or fewer ",
          "type": "string"
        },
        "BankName": {
          "description": " The name of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:80 **Values**:  string of 80 characters or fewer ",
          "type": "string"
        },
        "BankPostalCode": {
          "description": " The zip code or postal code of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:20 **Values**:  string of 20 characters or fewer ",
          "type": "string"
        },
        "BankStreetName": {
          "description": " The name of the street of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:60 **Values**:  string of 60 characters or fewer ",
          "type": "string"
        },
        "BankStreetNumber": {
          "description": " The number of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:10 **Values**:  string of 10 characters or fewer ",
          "type": "string"
        },
        "BankTransferAccountName": {
          "description": " The name on the direct debit bank account. Use this field for direct debit payment methods.\n**Character limit**: 60 **Values**:  string of 60 characters or fewer ",
          "type": "string"
        },
        "BankTransferAccountNumberMask": {
          "description": " This is a masked displayable version of the bank account number, used for security purposes. For example: `XXXXXXXXX54321`.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "BankTransferAccountType": {
          "description": " The type of the customer's bank account. Use this field for direct debit payment methods.\n**Character limit**: 11 **Values**: `DirectDebit` ",
          "type": "string"
        },
        "BankTransferType": {
          "description": " Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user. Use this field is used for direct debit payment methods.\n**Character limit**: 20 **Values**:\n\n- `AutomatischIncasso` (NL)\n- `LastschriftDE` (Germany)\n- `LastschriftAT` (Austria)\n- `DemandeDePrelevement` (FR)\n- `DirectDebitUK` (UK)\n- `Domicil` (Belgium)\n- `LastschriftCH` (CH)\n- `RID` (Italy)\n- `OrdenDeDomiciliacion` (Spain)\n",
          "type": "string"
        },
        "BusinessIdentificationCode": {
          "description": " The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Use this field only for direct debit payments in Switzerland with Global Collect.\n**Character limit**: 11 **Values**: string of 11 characters or fewer ",
          "type": "string"
        },
        "City": {
          "description": " The city of the customer's address. Use this field for direct debit payment methods.\n**Character limit**:80 **Values**:  string of 80 characters or fewer ",
          "type": "string"
        },
        "Country": {
          "description": " The two-letter country code of the customer's address. Use this field for direct debit payment methods.\n**Character limit**: 2 **Values**: a valid country code ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who created the `PaymentMethod` object when there is a login user in the user session. In Hosted Payment Method and Zuora Checkout pages, this field is set to 3 as there is no login user to initiate a user session.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the `PaymentMethod` object was created in the Zuora system.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CreditCardAddress1": {
          "description": " The first line of the card holder's address, which is often a street address or business name. Use this field for credit card and direct debit payment methods.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreditCardAddress2": {
          "description": " The second line of the card holder's address. Use this field for credit card and direct debit payment methods.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreditCardCity": {
          "description": " The city of the card holder's address. Use this field for credit card and direct debit payment methods **Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "CreditCardCountry": {
          "description": " The country of the card holder's address. ",
          "type": "string"
        },
        "CreditCardExpirationMonth": {
          "description": " The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.\n**Character limit**: 2 **Values**: a two-digit number, 01 - 12 ",
          "format": "int32",
          "type": "integer"
        },
        "CreditCardExpirationYear": {
          "description": " The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.\n**Character limit**: 4 **Values**: a four-digit number ",
          "format": "int32",
          "type": "integer"
        },
        "CreditCardHolderName": {
          "description": " The full name of the card holder. Use this field for credit card and direct debit payment methods.\n**Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "CreditCardMaskNumber": {
          "description": " A masked version of the credit or debit card number.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreditCardPostalCode": {
          "description": " The billing address's zip code. This field is required only when you define a debit card or credit card payment.\n**Character limit**: 20 **Values**: a string of 20 characters or fewer ",
          "type": "string"
        },
        "CreditCardState": {
          "description": " The billing address's state. Use this field is if the `CreditCardCountry` value is either Canada or the US. State names must be spelled in full. ",
          "type": "string"
        },
        "CreditCardType": {
          "description": " The type of credit card or debit card. This field is required only when you define a debit card or credit card payment.\n**Character limit**: 32 **Values**: `AmericanExpress`, `Discover`, `MasterCard`, `Visa` ",
          "type": "string"
        },
        "DeviceSessionId": {
          "description": " The session ID of the user when the `PaymentMethod` was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently only Verifi supports this field.\n**Character limit**: 255 **Values**: ",
          "type": "string"
        },
        "Email": {
          "description": " An email address for the payment method in addition to the bill to contact email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "ExistingMandate": {
          "description": " Indicates if the customer has an existing mandate or a new mandate. A mandate is a signed authorization for UK and NL customers. When you are migrating mandates from another system, be sure to set this field correctly. If you indicate that a new mandate is an existing mandate or vice-versa, then transactions fail. This field is used only for the direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`, `No` ",
          "type": "string"
        },
        "FirstName": {
          "description": " The customer's first name. This field is used only for the direct debit payment method.\n**Character limit**: 30 **Values**: a string of 30 characters or fewer ",
          "type": "string"
        },
        "IBAN": {
          "description": " The International Bank Account Number. This field is used only for the direct debit payment method.\n**Character limit**: 42 **Values**: a string of 42 characters or fewer ",
          "type": "string"
        },
        "IPAddress": {
          "description": " The IP address of the user when the payment method was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently PayPal, CyberSource, Authorize.Net, and Verifi support this field.\n**Character limit**: 15 **Values**: a string of 15 characters or fewer ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "LastFailedSaleTransactionDate": {
          "description": " The date of the last failed attempt to collect payment with this payment method.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "LastName": {
          "description": " The customer's last name. This field is used only for the direct debit payment method.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "LastTransactionDateTime": {
          "description": " The date of the most recent transaction.\n**Character limit**: 29 **Values**: a valid date and time value ",
          "format": "date-time",
          "type": "string"
        },
        "LastTransactionStatus": {
          "description": " The status of the most recent transaction.\n**Character limit**: 39 **Values**: automatically generated ",
          "type": "string"
        },
        "MandateCreationDate": {
          "description": " The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "MandateID": {
          "description": " The ID of the mandate. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 36 **Values**: a string of 36 characters or fewer ",
          "type": "string"
        },
        "MandateReceived": {
          "description": " Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`, `No `(case-sensitive) ",
          "type": "string"
        },
        "MandateUpdateDate": {
          "description": " The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "MaxConsecutivePaymentFailures": {
          "description": " Specifies the number of allowable consecutive failures Zuora attempts with the payment method before stopping.\n**Values**: a valid number ",
          "type": "integer"
        },
        "Name": {
          "description": "The name of the payment method.",
          "type": "string"
        },
        "NumConsecutiveFailures": {
          "description": "The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. \n",
          "format": "int32",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "PaymentMethodStatus": {
          "description": " Specifies the status of the payment method. It is set to Active on creation.\n**Character limit**: 6 **Values**: `Active` or `Closed`\n",
          "type": "string"
        },
        "PaymentRetryWindow": {
          "description": " The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. This field is required if the `UseDefaultRetryRule` field value is set to `false`.\n**Character limit**: 4 **Values**: a whole number between 1 and 1000, exclusive ",
          "type": "integer"
        },
        "PaypalBaid": {
          "description": " The PayPal billing agreement ID, which is a contract between two PayPal accounts. Typically, the selling party initiates a request to create a BAID, and sends it to buying party for acceptance. The seller can keep track of the BAID and use it for future charges against the buyer. This field is required when defining a PayPal payment method.\n**Character limit**: 64 **Values**: a string of 64 characters or fewer ",
          "type": "string"
        },
        "PaypalEmail": {
          "description": " The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service. This field is required only when you define a PayPal payment method.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "PaypalPreapprovalKey": {
          "description": " PayPal's Adaptive Payments API key. Zuora does not create this key, nor does it call PayPal to generate it. You must use PayPal's Adaptive Payments' API to generate this key, and then pass it to Zuora. Zuora uses this key to authorize future payments to PayPal's Adaptive Payments API. This field is required when you use PayPal Adaptive Payments gateway.\n**Character limit**: 32 **Values**: a valid PayPal Adaptive Payment pre-approval key ",
          "type": "string"
        },
        "PaypalType": {
          "description": " Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments. This field is required when you use PayPal Adaptive Payments or Payflow Pro (Express Checkout) gateways.\n**Character limit**: 32 **Values**: `ExpressCheckout`, `AdaptivePayments` ",
          "type": "string"
        },
        "Phone": {
          "description": " The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "PostalCode": {
          "description": " The zip code of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 20 **Values**: a string of 20 characters or fewer ",
          "type": "string"
        },
        "SecondTokenId": {
          "description": " A gateway unique identifier that replaces sensitive payment method data. SecondTokenId is conditionally required only when TokenID is being used to represent a gateway customer profile. SecondTokenId is used in the CC Reference Transaction payment method. **Character limit**: 64 **Values**: a string of 64 characters or fewer ",
          "type": "string"
        },
        "State": {
          "description": " The state of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "StreetName": {
          "description": " The street name of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "StreetNumber": {
          "description": " The street number of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 30 **Values**: a string of 30 characters or fewer ",
          "type": "string"
        },
        "TokenId": {
          "description": " A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. When TokenId is used to represent a customer profile, then SecondTokenId is conditionally required for representing the underlying tokenized payment method. TokenId is required for the CC Reference Transaction payment method.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "TotalNumberOfErrorPayments": {
          "description": " The number of error payments that used this payment method.\n**Character limit**: **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "TotalNumberOfProcessedPayments": {
          "description": " The number of successful payments that used this payment method.\n**Character limit**: **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "Type": {
          "description": "The type of payment method.",
          "enum": [
            "ACH",
            "ApplePay",
            "BankTransfer",
            "Cash",
            "Check",
            "CreditCard",
            "CreditCardReferenceTransaction",
            "DebitCard",
            "Other",
            "PayPal",
            "WireTransfer"
          ],
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the payment method.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the payment method was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "UseDefaultRetryRule": {
          "description": " Determines whether to use the default retry rules configured in the Zuora Payments settings. Set this to `true` to use the default retry rules. Set this to `false` to set the specific rules for this payment method. If you set this value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`, are required.\n**Character limit**: 5 **Values**: `t``rue`, `false` ",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyGetPaymentMethodSnapshot": {
      "properties": {
        "AccountId": {
          "description": "The ID of the customer account associated with this payment method.",
          "type": "string"
        },
        "AchAbaCode": {
          "description": "The nine-digit routing number or ABA number used by banks. Applicable to ACH payment methods.",
          "type": "string"
        },
        "AchAccountName": {
          "description": "The name of the account holder, which can be either a person or a company. Applicable to ACH payment methods.",
          "type": "string"
        },
        "AchAccountNumberMask": {
          "description": "This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`.",
          "type": "string"
        },
        "AchAccountType": {
          "description": "The type of bank account associated with the ACH payment.",
          "enum": [
            "BusinessChecking",
            "Checking",
            "Saving"
          ],
          "type": "string"
        },
        "AchBankName": {
          "description": "The name of the bank where the ACH payment account is held.",
          "type": "string"
        },
        "BankBranchCode": {
          "description": "The branch code of the bank used for direct debit.",
          "type": "string"
        },
        "BankCheckDigit": {
          "description": "The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods.",
          "type": "string"
        },
        "BankCity": {
          "description": "The city of the direct debit bank.",
          "type": "string"
        },
        "BankCode": {
          "description": "The sort code or number that identifies the bank. This is also known as the sort code.",
          "type": "string"
        },
        "BankIdentificationNumber": {
          "description": "The first six digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.",
          "type": "string"
        },
        "BankName": {
          "description": "The name of the direct debit bank.",
          "type": "string"
        },
        "BankPostalCode": {
          "description": "The zip code or postal code of the direct debit bank.",
          "type": "string"
        },
        "BankStreetName": {
          "description": "The name of the street of the direct debit bank.",
          "type": "string"
        },
        "BankStreetNumber": {
          "description": "The number of the direct debit bank.",
          "type": "string"
        },
        "BankTransferAccountName": {
          "description": "The name on the direct debit bank account.",
          "type": "string"
        },
        "BankTransferAccountNumberMask": {
          "description": "This is a masked displayable version of the bank account number, used for security purposes. For example: `XXXXXXXXX54321`.",
          "type": "string"
        },
        "BankTransferAccountType": {
          "description": "The type of the customer's bank account. Applicable to direct debit payment methods.",
          "type": "string"
        },
        "BankTransferType": {
          "description": "Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.\n\nPossible Values: \n\n\n* `AutomatischIncasso` (NL)\n\n* `LastschriftDE` (Germany)\n\n* `LastschriftAT` (Austria)\n\n* `DemandeDePrelevement` (FR)\n\n* `DirectDebitUK` (UK)\n\n* `Domicil` (Belgium)\n\n* `LastschriftCH` (CH)\n\n* `RID` (Italy)\n\n* `OrdenDeDomiciliacion` (Spain)\n",
          "enum": [
            "AutomatischIncasso",
            "LastschriftDE",
            "LastschriftAT",
            "DemandeDePrelevement",
            "DirectDebitUK",
            "Domicil",
            "LastschriftCH",
            "RID",
            "OrdenDeDomiciliacion"
          ],
          "type": "string"
        },
        "BusinessIdentificationCode": {
          "description": "The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Only applicable to direct debit payments in Switzerland with Global Collect.",
          "type": "string"
        },
        "City": {
          "description": "The city of the customer's address. Applicable to debit payment methods.",
          "type": "string"
        },
        "Country": {
          "description": "The two-letter country code of the customer's address. Applicable to direct debit payment methods.",
          "type": "string"
        },
        "CreditCardAddress1": {
          "description": "The first line of the card holder's address, which is often a street address or business name. Applicable to credit card and direct debit payment methods.",
          "type": "string"
        },
        "CreditCardAddress2": {
          "description": "The second line of the card holder's address. Applicable to credit card and direct debit payment methods.",
          "type": "string"
        },
        "CreditCardCity": {
          "description": "The city of the card holder's address. Applicable to credit card and direct debit payment methods.",
          "type": "string"
        },
        "CreditCardCountry": {
          "description": "The country of the card holder's address.",
          "type": "string"
        },
        "CreditCardExpirationMonth": {
          "description": "The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.",
          "format": "int32",
          "type": "integer"
        },
        "CreditCardExpirationYear": {
          "description": "The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.",
          "format": "int32",
          "type": "integer"
        },
        "CreditCardHolderName": {
          "description": "The full name of the card holder. Applicable to credit card and direct debit payment methods.",
          "type": "string"
        },
        "CreditCardMaskNumber": {
          "description": "A masked version of the credit or debit card number.",
          "type": "string"
        },
        "CreditCardPostalCode": {
          "description": "The billing address's zip code.",
          "type": "string"
        },
        "CreditCardState": {
          "description": "The billing address's state. Applicable if `CreditCardCountry` is either Canada or the US.",
          "type": "string"
        },
        "CreditCardType": {
          "description": "The type of credit card or debit card.",
          "enum": [
            "AmericanExpress",
            "Discover",
            "MasterCard",
            "Visa"
          ],
          "type": "string"
        },
        "DeviceSessionId": {
          "description": "The session ID of the user when the `PaymentMethod` was created or updated.",
          "type": "string"
        },
        "Email": {
          "description": "An email address for the payment method in addition to the bill to contact email address.",
          "type": "string"
        },
        "ExistingMandate": {
          "description": "Indicates if the customer has an existing mandate or a new mandate. Only applicable to direct debit payment methods.",
          "enum": [
            true,
            false
          ],
          "type": "string"
        },
        "FirstName": {
          "description": "The customer's first name. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "IBAN": {
          "description": "The International Bank Account Number. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "IPAddress": {
          "description": "The IP address of the user when the payment method was created or updated.",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "LastFailedSaleTransactionDate": {
          "description": "The date of the last failed attempt to collect payment with this payment method.",
          "format": "date-time",
          "type": "string"
        },
        "LastName": {
          "description": "The customer's last name. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "LastTransactionDateTime": {
          "description": "The date of the most recent transaction.",
          "format": "date-time",
          "type": "string"
        },
        "LastTransactionStatus": {
          "description": "The status of the most recent transaction.",
          "type": "string"
        },
        "MandateCreationDate": {
          "description": "The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.",
          "format": "date",
          "type": "string"
        },
        "MandateID": {
          "description": "The ID of the mandate. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "MandateReceived": {
          "description": "Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "MandateUpdateDate": {
          "description": "The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.",
          "format": "date",
          "type": "string"
        },
        "MaxConsecutivePaymentFailures": {
          "description": "The number of allowable consecutive failures Zuora attempts with the payment method before stopping.",
          "type": "integer"
        },
        "Name": {
          "description": "The name of the payment method.",
          "type": "string"
        },
        "NumConsecutiveFailures": {
          "description": "The number of consecutive failed payment for the payment method.",
          "format": "int32",
          "type": "integer"
        },
        "PaymentMethodId": {
          "description": "Object identifier of the payment method.",
          "type": "string"
        },
        "PaymentMethodStatus": {
          "description": "Specifies the status of the payment method.",
          "enum": [
            "Active",
            "Closed"
          ],
          "type": "string"
        },
        "PaymentRetryWindow": {
          "description": "The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.",
          "type": "integer"
        },
        "PaypalBaid": {
          "description": "The PayPal billing agreement ID, which is a contract between two PayPal accounts.",
          "type": "string"
        },
        "PaypalEmail": {
          "description": "The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service.",
          "type": "string"
        },
        "PaypalPreapprovalKey": {
          "description": "PayPal's Adaptive Payments API key.",
          "type": "string"
        },
        "PaypalType": {
          "description": "Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments.",
          "enum": [
            "ExpressCheckout",
            "AdaptivePayments"
          ],
          "type": "string"
        },
        "Phone": {
          "description": "The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.",
          "type": "string"
        },
        "PostalCode": {
          "description": "The zip code of the customer's address. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "SecondTokenId": {
          "description": "A gateway unique identifier that replaces sensitive payment method data. Applicable to CC Reference Transaction payment methods.",
          "type": "string"
        },
        "State": {
          "description": "The state of the customer's address. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "StreetName": {
          "description": "The street name of the customer's address. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "StreetNumber": {
          "description": "The street number of the customer's address. Only applicable to direct debit payment methods.",
          "type": "string"
        },
        "TokenId": {
          "description": "A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. Applicable to CC Reference Transaction payment methods.",
          "type": "string"
        },
        "TotalNumberOfErrorPayments": {
          "description": "The number of error payments that used this payment method.",
          "format": "int32",
          "type": "integer"
        },
        "TotalNumberOfProcessedPayments": {
          "description": "The number of successful payments that used this payment method.",
          "format": "int32",
          "type": "integer"
        },
        "Type": {
          "description": "The type of payment method.",
          "enum": [
            "ACH",
            "ApplePay",
            "BankTransfer",
            "Cash",
            "Check",
            "CreditCard",
            "CreditCardReferenceTransaction",
            "DebitCard",
            "Other",
            "PayPal",
            "WireTransfer"
          ],
          "type": "string"
        },
        "UseDefaultRetryRule": {
          "description": "Determines whether to use the default retry rules configured in the Zuora Payments settings.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyGetPaymentMethodTransactionLog": {
      "properties": {
        "Gateway": {
          "description": "",
          "type": "string"
        },
        "GatewayReasonCode": {
          "description": "",
          "type": "string"
        },
        "GatewayReasonCodeDescription": {
          "description": "",
          "type": "string"
        },
        "GatewayTransactionType": {
          "description": "",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "PaymentMethodId": {
          "description": "",
          "type": "string"
        },
        "PaymentMethodType": {
          "description": "",
          "type": "string"
        },
        "RequestString": {
          "description": "",
          "type": "string"
        },
        "ResponseString": {
          "description": "",
          "type": "string"
        },
        "TransactionDate": {
          "description": "",
          "format": "date-time",
          "type": "string"
        },
        "TransactionId": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetPaymentTransactionLog": {
      "properties": {
        "AVSResponseCode": {
          "description": "The response code returned by the payment gateway referring to the AVS international response of the payment transaction.\n",
          "type": "string"
        },
        "BatchId": {
          "description": "The ID of the batch used to send the transaction if the request was sent in a batch.\n",
          "type": "string"
        },
        "CVVResponseCode": {
          "description": "The response code returned by the payment gateway referring to the CVV international response of the payment transaction.\n",
          "type": "string"
        },
        "Gateway": {
          "description": "The name of the payment gateway used to transact the current payment transaction log.\n",
          "type": "string"
        },
        "GatewayReasonCode": {
          "description": "The code returned by the payment gateway for the payment. This code is gateway-dependent.\n",
          "type": "string"
        },
        "GatewayReasonCodeDescription": {
          "description": "The message returned by the payment gateway for the payment. This message is gateway-dependent. \n",
          "type": "string"
        },
        "GatewayState": {
          "description": "The state of the transaction at the payment gateway.\n",
          "enum": [
            "MarkedForSubmission",
            "Submitted",
            "Settled",
            "NotSubmitted",
            "FailedToSettle"
          ],
          "type": "string"
        },
        "GatewayTransactionType": {
          "description": "The type of the transaction, either making a payment, or canceling a payment. \n",
          "enum": [
            "Authorization",
            "Sale",
            "Void",
            "Inquiry",
            "VoidAuth"
          ],
          "type": "string"
        },
        "Id": {
          "description": "The ID of the payment transaction log.\n",
          "type": "string"
        },
        "PaymentId": {
          "description": "The ID of the payment wherein the payment transaction log was recorded. \n",
          "type": "string"
        },
        "RequestString": {
          "description": "The payment transaction request string sent to the payment gateway. \n",
          "type": "string"
        },
        "ResponseString": {
          "description": "The payment transaction response string returned by the payment gateway. \n",
          "type": "string"
        },
        "TransactionDate": {
          "description": "The transaction date when the payment was performed. \n",
          "format": "date-time",
          "type": "string"
        },
        "TransactionId": {
          "description": "The transaction ID returned by the payment gateway. This field is used to reconcile payment transactions between the payment gateway and records in Zuora.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetProduct": {
      "properties": {
        "AllowFeatureChanges": {
          "description": " Controls whether to allow your users to add or remove features while creating or amending a subscription.\n**Character** **limit**: n/a\n**Values**: true, false (default) ",
          "type": "boolean"
        },
        "Category": {
          "description": " Category of the product. Used by Zuora Quotes Guided Product Selector.\n**Character** **limit**: 100\n**Values**: One of the following:\n\n- Base Products\n- Add On Services\n- Miscellaneous Products\n",
          "type": "string"
        },
        "CreatedById": {
          "description": "The ID of the Zuora user who created the `Product` object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the `Product` object was created.\n**Character limit**: n/a **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "description": " A descriptionof the product. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "EffectiveEndDate": {
          "description": "The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format. **Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "EffectiveStartDate": {
          "description": "The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format. **Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Name": {
          "description": "The name of the product. This information is displayed in the product catalog pages in the web-based UI. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "SKU": {
          "description": "The unique SKU for the product. **Character limit**: 50 **Values**: one of the following:\n\n- leave null for automatic generated\n- an alphanumeric string of 50 characters or fewer\n",
          "type": "string"
        },
        "UpdatedById": {
          "description": "The ID of the last user to update the object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "The date when the object was last updated. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetProductFeature": {
      "properties": {
        "CreatedById": {
          "description": "The ID of the Zuora user who created the Account object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": "The date when the Account object was created. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "FeatureId": {
          "description": " Internal Zuora ID of the product feature. This field is not editable.\n**Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "ProductId": {
          "description": " Id of the product to which the feature belongs. This field is not editable.\n**Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "UpdatedById": {
          "description": "The ID of the user who last updated the account. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "The date when the account was last updated. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetProductRatePlan": {
      "properties": {
        "CreatedById": {
          "description": "The ID of the Zuora user who created the `ProductRatePlan` object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the `ProductRatePlan` object was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "description": "A description of the product rate plan. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "EffectiveEndDate": {
          "description": " The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "EffectiveStartDate": {
          "description": " The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Name": {
          "description": "The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "ProductId": {
          "description": "The ID of the product that contains the product rate plan. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "UpdatedById": {
          "description": "The ID of the last user to update the object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "The date when the object was last updated. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetProductRatePlanCharge": {
      "properties": {
        "AccountingCode": {
          "description": "The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts ",
          "type": "string"
        },
        "ApplyDiscountTo": {
          "description": "Specifies the type of charges that you want a specific discount to apply to. All field values are case sensitive: note that these values are in all-caps. **Character limit**: 21 **Values**: one of the following:\n\n- `ONETIME (1)`\n- `RECURRING (2)`\n- `USAGE (4)`\n- `ONETIMERECURRING (3)`\n- `ONETIMEUSAGE (5)`\n- `RECURRINGUSAGE (6)`\n- `ONETIMERECURRINGUSAGE (7)`\n",
          "type": "string"
        },
        "BillCycleDay": {
          "description": " Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed. The BCD value in the account can override the BCD in this object.\n**Character limit**: 2 **Values**: a valid BCD integer, 1 - 31 ",
          "format": "int32",
          "type": "integer"
        },
        "BillCycleType": {
          "description": " Specifies how to determine the billing day for the charge. **Character limit**: 20 **Values**: one of the following:\n\n- `DefaultFromCustomer`\n- `SpecificDayofMonth:`\n- `SubscriptionStartDay`\n- `ChargeTriggerDay`\n- `SpecificDayofWeek`\n**Note**:\n\n- If you set this field to `SpecificDayofMonth`, you must specify which day of the month as the billing day for the charge in the BillCycleDay field.\n- If you set this field to `SpecificDayofWeek`, you must specify which day of the week as the billing day for the charge in the WeeklyBillCycleDay field.\n",
          "type": "string"
        },
        "BillingPeriod": {
          "description": " The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).\n**Character limit**: 15 **Values**: one of the following\n\n- `Month`\n- `Quarter`\n- `Annual`\n- `Semi-Annual`\n- `Specific Months`\n- `Subscription Term` (This value is in **Limited Availability**.)\n- `Week`\n- `Specific Weeks`\n**Note**: Specify the number of months or weeks in the SpecificBillingPeriod field if you set this field to `Specific Months` or `Specific Weeks`. ",
          "type": "string"
        },
        "BillingPeriodAlignment": {
          "description": " Aligns charges within the same subscription if multiple charges begin on different dates.\n**Character limit**: 24 **Values**: one of the following:\n\n- `AlignToCharge`\n- `AlignToSubscriptionStart`\n- `AlignToTermStart`\n",
          "type": "string"
        },
        "BillingTiming": {
          "description": " The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.\n**Character limit**: **Values**: one of the following:\n\n- `In Advance`\n- `In Arrears`\n\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n",
          "type": "string"
        },
        "ChargeModel": {
          "description": " Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.\n**Character limit**: 27 **Values**: one of the following:\n\n- `Discount-Fixed Amount`\n- `Discount-Percentage`\n- `Flat Fee Pricing`\n- `Per Unit Pricing`\n- `Overage Pricing`\n- `Tiered Pricing`\n- `Tiered with Overage Pricing`\n- `Volume Pricing`\n",
          "type": "string"
        },
        "ChargeType": {
          "description": " Specifies the type of charge.\n**Character limit**: 9 **Values**: one of the following:\n\n- `OneTime`\n- `Recurring`\n- `Usage`\n",
          "type": "string"
        },
        "CreatedById": {
          "description": "The ID of the Zuora user who created the `ProductRatePlanCharge` object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the  `ProductRatePlanCharge` object was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "DefaultQuantity": {
          "description": " The default quantity of units, such as the number of authors in a hosted wiki service. This field is required if you use a per-unit pricing model.\n**Character limit**: 16 **Values**: a valid quantity value ",
          "format": "double",
          "type": "number"
        },
        "DeferredRevenueAccount": {
          "description": " The name of the deferred revenue account for this charge.\n**Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n",
          "type": "string"
        },
        "Description": {
          "description": "A description of the charge. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "DiscountLevel": {
          "description": " Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account.\n**Character limit**: 12 **Values**: one of the following:\n\n- `rateplan`\n- `subscription`, `account`\n",
          "type": "string"
        },
        "EndDateCondition": {
          "description": " Defines when the charge ends after the charge trigger date.\n**Values**: one of the following:\n\n- `SubscriptionEnd`: The charge ends on the subscription end date after a specified period based on the trigger date of the charge. This is the default value.\n- `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields.\n**Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date. ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "IncludedUnits": {
          "description": "Specifies the number of units in the base set of units. **Character limit**: 16 **Values**: a positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "LegacyRevenueReporting": {
          "description": "",
          "type": "boolean"
        },
        "ListPriceBase": {
          "description": "The list price base for the product rate plan charge. **Values**: one of the following:\n\n- `Per Month`\n- `Per Billing Period`\n- `Per Week`\n",
          "type": "string"
        },
        "MaxQuantity": {
          "description": " Specifies the maximum number of units for this charge. Use this field and the `MinQuantity` field to create a range of units allowed in a product rate plan charge.\n**Character limit**: 16 **Values**: a positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "MinQuantity": {
          "description": "Specifies the minimum number of units for this charge. Use this field and the `MaxQuantity` field to create a range of units allowed in a product rate plan charge. **Character limit**: 16 **Values**: a positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "Name": {
          "description": "The name of the product rate plan charge. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "NumberOfPeriod": {
          "description": "Specifies the number of periods to use when calculating charges in an overage smoothing charge model. **Character limit**: **Values**: a positive whole number ",
          "format": "int64",
          "type": "integer"
        },
        "OverageCalculationOption": {
          "description": "Determines when to calculate overage charges. If the value of the SmoothingMode field is not specified, the value of this field is ignored. **Character limit**: 20 **Values**: one of the following:\n\n- `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period.\n- `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.\n",
          "type": "string"
        },
        "OverageUnusedUnitsCreditOption": {
          "description": " Determines whether to credit the customer with unused units of usage.\n**Character limit**: 20 **Values**: one of the following:\n\n- `NoCredit`\n- `CreditBySpecificRate`\n",
          "type": "string"
        },
        "PriceChangeOption": {
          "description": " Applies an automatic price change when a termed subscription is renewed.\n**Character limit**: **Values**: one of the following:\n\n- `NoChange` (default)\n- `SpecificPercentageValue`\n- `UseLatestProductCatalogPricing`\n",
          "type": "string"
        },
        "PriceIncreasePercentage": {
          "description": " Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the value to `SpecificPercentageValue`.\n**Character limit**: 16 **Values**: a decimal value between -100 and 100 ",
          "format": "double",
          "type": "number"
        },
        "ProductRatePlanId": {
          "description": " The ID of the product rate plan associated with this product rate plan charge.\n**Character limit**: 32 **Values**: a valid product rate plan ID ",
          "type": "string"
        },
        "RecognizedRevenueAccount": {
          "description": " The name of the recognized revenue account for this charge.\n\n- Required when the Allow Blank Accounting Code setting is No.\n- Optional when the Allow Blank Accounting Code setting is Yes.\n\n**Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n",
          "type": "string"
        },
        "RevRecCode": {
          "description": "Associates this product rate plan charge with a specific revenue recognition code. **Character limit**: 70 **Values**: a valid revenue recognition code ",
          "type": "string"
        },
        "RevRecTriggerCondition": {
          "description": " Specifies when revenue recognition begins.\n**Character limit**: 22 **Values**: one of the following:\n\n- `ContractEffectiveDate`\n- `ServiceActivationDate`\n- `CustomerAcceptanceDate`\n",
          "type": "string"
        },
        "RevenueRecognitionRuleName": {
          "description": "Determines when to recognize the revenue for this charge. **Character limit**: 25 **Values**: one of the following:\n\n- `Recognize upon invoicing`\n- `Recognize daily over time`\n",
          "type": "string"
        },
        "SmoothingModel": {
          "description": " Specifies the smoothing model for an overage smoothing charge model.\n**Character limit**: 22 **Values**: one of the following:\n\n- `RollingWindow`\n- `Rollover`\n",
          "type": "string"
        },
        "SpecificBillingPeriod": {
          "description": " Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`.\n**Values**: a positive integer ",
          "format": "int64",
          "type": "integer"
        },
        "TaxCode": {
          "description": " Specifies the tax code for taxation rules. Required when the Taxable field is set to `True`.\n\n**Character limit**: 64\n\n**Values**: a valid tax code\n\n**Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`. ",
          "type": "string"
        },
        "TaxMode": {
          "description": " Determines how to define taxation for the charge. Required when the Taxable field is set to `True`.\n\n**Character limit**: 12\n\n**Values**: one of the following:\n\n- `TaxExclusive`\n- `TaxInclusive`\n\n**Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`. ",
          "type": "string"
        },
        "Taxable": {
          "description": " Determines whether the charge is taxable. When set to `True`, the TaxMode and TaxCode fields are required when creating or updating th ProductRatePlanCharge object.\n\n**Character limit**: 5\n\n**Values**: `True`, `False`\n\n**Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`. ",
          "type": "boolean"
        },
        "TriggerEvent": {
          "description": " Specifies when to start billing the customer for the charge.\n**Character limit**: 18 **Values**: one of the following:\n\n- `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.\n- `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.\n- `CustomerAcceptance` is when the customer accepts the services or products for a subscription.\n",
          "type": "string"
        },
        "UOM": {
          "description": " Specifies the units to measure usage.\n**Character limit**: 25 **Values**: a configured unit of measure **Note**: You must specify this field when creating the following charge models:\n\n- Per Unit Pricing\n- Volume Pricing\n- Overage Pricing\n- Tiered Pricing\n- Tiered with Overage Pricing\n",
          "type": "string"
        },
        "UpToPeriods": {
          "description": " Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.\n**Character limit**: 5 **Values**: a whole number between 0 and 65535, exclusive **Note**:\n\n- You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n- If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.\n",
          "format": "int64",
          "type": "integer"
        },
        "UpToPeriodsType": {
          "description": " The period type used to define when the charge ends.\n**Character limit**: -- **Values**: one of the following:\n\n- `Billing Periods` (default)\n- `Days`\n- `Weeks`\n- `Months`\n- Years\n**Note**:\n\n- You must use this field together with the `UpToPeriods` field to specify the time period.\n- This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n",
          "type": "string"
        },
        "UpdatedById": {
          "description": "The ID of the last user to update the object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "The date when the object was last updated. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "UseDiscountSpecificAccountingCode": {
          "description": "Determines whether to define a new accounting code for the new discount charge. **Character limit**: 5 **Values**: `True`, `False` ",
          "type": "boolean"
        },
        "UseTenantDefaultForPriceChange": {
          "description": " Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. **Character limit**: 5 **Values**: `true`, `false` ",
          "type": "boolean"
        },
        "WeeklyBillCycleDay": {
          "description": " Specifies which day of the week as the bill cycle day (BCD) for the charge.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Values**: one of the following:\n\n- `Sunday`\n- `Monday`\n- `Tuesday`\n- `Wednesday`\n- `Thursday`\n- `Friday`\n- `Saturday`\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetProductRatePlanChargeTier": {
      "properties": {
        "CreatedById": {
          "description": "The ID of the Zuora user who created the ProductRatePlanChargeTier object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": "The date when the ProductRatePlanChargeTier object was created. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Currency": {
          "description": "The code corresponding to the currency for the tier's price. **Character limit**: 3 **Values**: a valid currency code ",
          "type": "string"
        },
        "EndingUnit": {
          "description": "The end number of a range of units for the tier. **Character limit**: 16 **Values**: any positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Price": {
          "description": " The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.\n**Character limit**: 16 **Values**: a valid currency value ",
          "format": "double",
          "type": "number"
        },
        "PriceFormat": {
          "description": "Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only. **Character limit**: 8 **Values**: `FlatFee`, `PerUnit` **Note:** The values `Flat Fee` and `Per Unit` (with spaces) is valid for create or update calls. ",
          "type": "string"
        },
        "StartingUnit": {
          "description": " The starting number of a range of units for the tier.\n**Character limit**: 16 **Values**: any positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "Tier": {
          "description": " A unique number that identifies the tier that the price applies to.\n**Character limit**: 20 **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the product rate plan charge tier.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the product rate plan charge tier was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetRatePlan": {
      "properties": {
        "AmendmentId": {
          "description": " The ID of the amendment associated with the rate plan. This field only applies to amendment rate plans.\n**Character limit**: 32 **Values**: a valid amendment ID ",
          "type": "string"
        },
        "AmendmentType": {
          "description": "The type of amendment associated with the rate plan. This field only applies to amendment rate plans. ",
          "type": "string"
        },
        "CreatedById": {
          "description": "The ID of the Zuora user who created the RatePlan object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": "The date when the `RatePlan` object was last updated. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Name": {
          "description": "The name of the rate plan.\n\n**Values**: inherited from `ProductRatePlan.Name` ",
          "type": "string"
        },
        "SubscriptionId": {
          "description": "The ID of the subscription that the rate plan belongs to. **Character limit**: 32 **Values**: a valid subscription ID ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the rate plan.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the rate plan was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetRatePlanCharge": {
      "properties": {
        "AccountingCode": {
          "description": "The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.\n\n**Character limit**: 100\n\n**Values**: inherited from `ProductRatePlanCharge.AccountingCode`\n\n**Note**: This value changes if `ProductRatePlanCharge.AccountingCode` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.AccountingCode` is updated. ",
          "type": "string"
        },
        "ApplyDiscountTo": {
          "description": " Specifies the type of charges a specific discount applies to. **Character limit**: 21 **Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo` ",
          "type": "string"
        },
        "BillCycleDay": {
          "description": " Indicates the charge's billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.\n**Character limit**: 2 **Values**: inherited from `ProductRatePlanCharge.BillCycleDay` ",
          "format": "int32",
          "type": "integer"
        },
        "BillCycleType": {
          "description": " Specifies how to determine the billing day for the charge.\n**Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
          "type": "string"
        },
        "BillingPeriod": {
          "description": " Allows billing period to be overridden on rate plan charge.\n****Values**: **inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
          "type": "string"
        },
        "BillingPeriodAlignment": {
          "description": " Aligns charges within the same subscription if multiple charges begin on different dates.\n**Character limit**: 24 **Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment` ",
          "type": "string"
        },
        "BillingTiming": {
          "description": " The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.\n**Character limit**: **Values**: one of the following:\n\n- `In Advance`\n- `In Arrears`\n**Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n",
          "type": "string"
        },
        "ChargeModel": {
          "description": " Determines how to evaluate charges. Charge models must be individually activated in the web-based UI.\n**Character limit**: 29 **Values**: inherited from `ProductRatePlanCharge.ChargeModel` ",
          "type": "string"
        },
        "ChargeNumber": {
          "description": " A unique number that identifies the charge. This number is returned as a string.\n**Character limit**: 50 **Values**: one of the following:\n\n- automatically generated if left null\n- a unique number of 50 characters or fewer\n",
          "type": "string"
        },
        "ChargeType": {
          "description": " Specifies the type of charge.\n**Character limit**: 9 **Values**: inherited from `ProductRatePlanCharge.ChargeType` ",
          "type": "string"
        },
        "ChargedThroughDate": {
          "description": " The date through which a customer has been billed for the charge.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "CreatedById": {
          "description": "The ID of the Zuora user who created the `RatePlanCharge` object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the `RatePlanCharge` object was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "DMRC": {
          "description": "A delta monthly recurring charge is the change in monthly recurring revenue caused by an amendment or a new subscription. **Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "DTCV": {
          "description": " After an Amendment, the change in the total contract value (TCV) amount for this charge, compared with its previous value.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "Description": {
          "description": " A description of the charge.\n**Character limit**: 500 **Values**: inherited from `ProductRatePlanCharge.Description` ",
          "type": "string"
        },
        "DiscountLevel": {
          "description": "Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. **Character limit**: 12 **Values**: inherited from `ProductRatePlanCharge.DiscountLevel` ",
          "type": "string"
        },
        "EffectiveEndDate": {
          "description": " The date when the segmented charge ends or ended.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "EffectiveStartDate": {
          "description": " The date when the segmented charge starts or started.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "EndDateCondition": {
          "description": " Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.\n**Values**: one of the following:\n\n- `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value.\n- `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields.\n- `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.\n\n**Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date. ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "IsLastSegment": {
          "description": "Indicates if the segment of the rate plan charge is the most recent segment. **Character limit**: 5 **Values**: automatically generated: `true`, `false` ",
          "type": "boolean"
        },
        "ListPriceBase": {
          "description": "The list price base for the product rate plan charge. **Values**: one of the following:\n\n- `Per Month`\n- `Per Billing Period`\n- `Per Week`\n",
          "type": "string"
        },
        "MRR": {
          "description": "Monthly recurring revenue (MRR) is the amount of recurring charges in a given month. The MRR calculation doesn't include one-time charges nor usage charges. **Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "Name": {
          "description": "The name of the rate plan charge. **Character limit**: 100 **Values**: automatically generated ",
          "type": "string"
        },
        "NumberOfPeriods": {
          "description": "Specifies the number of periods to use when calculating charges in an overage smoothing charge model. **Character limit**: 5 **Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod` ",
          "format": "int64",
          "type": "integer"
        },
        "OriginalId": {
          "description": "The original ID of the rate plan charge. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "OverageCalculationOption": {
          "description": "Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored. **Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption` ",
          "type": "string"
        },
        "OverageUnusedUnitsCreditOption": {
          "description": " Determines whether to credit the customer with unused units of usage.\n**Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption` ",
          "type": "string"
        },
        "PriceChangeOption": {
          "description": " Applies an automatic price change when a termed subscription is renewed.\n**Character limit**: **Values**: one of the following:\n\n- `NoChange` (default)\n- `SpecificPercentageValue`\n- `UseLatestProductCatalogPricing`\n",
          "type": "string"
        },
        "PriceIncreasePercentage": {
          "description": " Specifies the percentage to increase or decrease the price of renewed subscriptions.\n**Character limit**: 16 **Values**: a decimal value between -100 and 100 ",
          "format": "double",
          "type": "number"
        },
        "ProcessedThroughDate": {
          "description": " The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "Quantity": {
          "description": " The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing.\n**Character limit**: 16 **Values**: a valid quantity value ",
          "format": "double",
          "type": "number"
        },
        "RatePlanId": {
          "description": " The ID of the rate plan associated with the rate plan charge.\n**Character limit**: 32 **Values**: inherited from `RatePlan.Id` ",
          "type": "string"
        },
        "RevRecCode": {
          "description": " Associates this product rate plan charge with a specific revenue recognition code.\n\n**Character limit**: 70\n\n**Values**: inherited from `ProductRatePlanCharge.RevRecCode` or a valid revenue recognition code\n\n**Note**: Unless overridden, this value changes if `ProductRatePlanCharge.RevRecCode` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevRecCode` is updated. ",
          "type": "string"
        },
        "RevRecTriggerCondition": {
          "description": " Specifies when revenue recognition begins.\n\n**Character limit**: 22\n\n**Values**: inherited from `ProductRatePlanCharge.RevRecTriggerCondition` or one of the following:\n\n-  `ContractEffectiveDate`\n\n-  `ServiceActivationDate`\n\n-  `CustomerAcceptanceDate`\n\nNote: Unless overridden, this value changes if `ProductRatePlanCharge.RevRecTriggerCondition` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevRecTriggerCondition` is updated. ",
          "type": "string"
        },
        "RevenueRecognitionRuleName": {
          "description": " Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend calls, you can use this field only for NewProduct amendments. For Update calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge.\n\n**Character limit**: n/a\n\n**Values**: inherited from `ProductRatePlanCharge.RevenueRecognitionRuleName` or the name of an active Revenue Recognition Rule\n\n**Note**: Unless overridden, this value changes if `ProductRatePlanCharge.RevenueRecognitionRuleName` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevenueRecognitionRuleName` is updated. ",
          "type": "string"
        },
        "Segment": {
          "description": " The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.\n**Character limit**: 2 **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "SpecificBillingPeriod": {
          "description": " Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`.\n**Character limit**: 5 **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
          "format": "int64",
          "type": "integer"
        },
        "SpecificEndDate": {
          "description": " The specific date on which the charge ends, in `yyyy-mm-dd` format.\n**Character limit**: 29 **Note**:\n\n- This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.\n- If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.\n",
          "format": "date",
          "type": "string"
        },
        "TCV": {
          "description": " The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.\n**Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "TriggerDate": {
          "description": " The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is required if the `TriggerEvent` field value is `SpecificDate`.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "TriggerEvent": {
          "description": " Specifies when to start billing the customer for the charge.\n**Note: **This field can be passed through the Subscribe and Amend calls and will override the default value set on the Product Rate Plan Charge.\n**Character limit**: 18 **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:\n\n- `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed.\n- `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access.\n- `CustomerAcceptance `is when the customer accepts the services or products for a subscription.\n- SpecificDate is valid only on the RatePlanCharge.\n",
          "type": "string"
        },
        "UOM": {
          "description": " Specifies the units to measure usage.\n**Character limit**: 25 **Values**: inherited from `ProductRatePlanCharge.UOM` ",
          "type": "string"
        },
        "UpToPeriods": {
          "description": " Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.\n**Character limit**: 5 **Values**: inherited from `ProductRatePlanCharge.UpToPeriods` **Note**:\n\n- You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n- You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.\n- Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.\n- If you override the value in this field, enter a whole number between 0 and 65535, exclusive.\n- If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.\n",
          "format": "int64",
          "type": "integer"
        },
        "UpToPeriodsType": {
          "description": " The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`. **Values**: one of the following:\n\n- `Billing Periods` (default)\n- `Days`\n- `Weeks`\n- `Months`\n- `Years`\n**Note**:\n\n- You must use this field together with the `UpToPeriods` field to specify the time period.\n- This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n",
          "type": "string"
        },
        "UpdatedById": {
          "description": "The ID of the last user to update the object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the object was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Version": {
          "description": " The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge. **Character limit**: 5 **Values**: automatically generated ",
          "format": "int64",
          "type": "integer"
        },
        "WeeklyBillCycleDay": {
          "description": " Specifies which day of the week as the bill cycle day (BCD) for the charge.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Values**: one of the following:\n\n- `Sunday`\n- `Monday`\n- `Tuesday`\n- `Wednesday`\n- `Thursday`\n- `Friday`\n- `Saturday`\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetRatePlanChargeTier": {
      "properties": {
        "CreatedById": {
          "description": "The ID of the Zuora user who created the RatePlanChargeTier object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the RatePlanChargeTier object was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "EndingUnit": {
          "description": " The end number of a range of units for the tier.\n**Character limit**: 16 **Values**: any positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Price": {
          "description": " The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the change model is tiered pricing.\n**Character limit**: 16 **Values**: any positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "PriceFormat": {
          "description": " Indicates if the price is a flat fee or is per unit.\n**Character limit**: 8 **Values**: `Flat Fee`, `Per Unit` ",
          "type": "string"
        },
        "RatePlanChargeId": {
          "description": " The ID of the subscription or amendment rate plan charge associated with this tier. You can't create an unassociated tier.\n**Character limit**: 32 **Values**: inherited from `RatePlanCharge.Id`. ",
          "type": "string"
        },
        "StartingUnit": {
          "description": " The start number of a range of units for the tier.\n**Character limit**: 16 **Values**: any positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "Tier": {
          "description": " A unique number that identifies the tier that the price applies to.\n**Character limit**: 20 **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "UpdatedById": {
          "description": "The ID of the last user to update the object. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the object was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetRefund": {
      "properties": {
        "AccountId": {
          "description": " The ID of the account associated with this refund. Specify a value for this field only if you're creating an electronic non-referenced refund. Don't specify a value for any other type of refund; Zuora associates the refund automatically with the account from the associated payment.\n**Character limit**: 32 **Values**: a valid account ID ",
          "type": "string"
        },
        "AccountingCode": {
          "description": " The accounting code for the payment or invoice line item that the refund applies to. If there is no accounting code, then this value is null. Accounting codes group transactions that contain similar accounting attributes.\n**Character limit**: 50 **Values**: automatically generated ",
          "type": "string"
        },
        "Amount": {
          "description": " The amount of the refund. The amount can't exceed the amount of the associated payment. If the original payment was applied to a single invoice, then you can create a partial refund. However, if the payment was applies to multiple invoices, then you can only make a partial refund through the web-based UI, not through the API.\n**Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        },
        "CancelledOn": {
          "description": " The date the refund was cancelled.\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Comment": {
          "description": " Use this field to record comments about the refund.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The ID of the Zuora user who created the `Refund` object.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the `Refund` object was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Gateway": {
          "description": " The gateway that processed the original payment. Zuora uses this same gateway for the corresponding refund. If this payment gateway is no longer active, then the electronic refund fails. A gateway is an online service provider that connects an online shopping cart to a payment processor.\n**Values**: automatically inherited from the `Payment` object ",
          "type": "string"
        },
        "GatewayResponse": {
          "description": " The message returned from the payment gateway for the refund. This message is gateway-dependent.\n**Character limit**: 500 **Values**: automatically generated ",
          "type": "string"
        },
        "GatewayResponseCode": {
          "description": " The code returned from the payment gateway for the payment. This code is gateway-dependent.\n**Character limit**: 20 **System****Values**: automatically generated ",
          "type": "string"
        },
        "GatewayState": {
          "description": " The status of the payment in the gateway.\n**Character limit**: 19 **Values**: automatically generated ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "MarkedForSubmissionOn": {
          "description": " The date when a payment was marked and waiting for batch submission to the payment process. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "MethodType": {
          "description": " Indicates how an external refund was issued to a customer. This field is required for an external refund. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:\n\n- `ACH`\n- `Cash`\n- `Check`\n- `CreditCard`\n- `Other`\n- `PayPal`\n- `WireTransfer`\n- `DebitCard`\n- `CreditCardReferenceTransaction`\n",
          "type": "string"
        },
        "PaymentMethodId": {
          "description": " The unique ID of the payment method that the customer used to make the payment. Specify a value for this field only if you're creating an electronic non-referenced refund.\n**Character limit**: 32 **V****alues**: a valid payment method ID ",
          "type": "string"
        },
        "PaymentMethodSnapshotId": {
          "description": " The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.\n**Character limit**: 32 **V****alues**: a valid payment method snapshot ID ",
          "type": "string"
        },
        "ReasonCode": {
          "description": " A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n**Character limit**: 32 **V****alues**: a valid reason code ",
          "type": "string"
        },
        "ReferenceID": {
          "description": " The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.\n**Character limit**: 60 **Values**: a string of 60 characters or fewer ",
          "type": "string"
        },
        "RefundDate": {
          "description": " The date of the refund, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "RefundNumber": {
          "description": " The unique identifier of the refund.\n**Character limit**: 50 **Values**: automatically generated ",
          "type": "string"
        },
        "RefundTransactionTime": {
          "description": " The date and time when the refund was issued.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "SecondRefundReferenceId": {
          "description": " The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.\n**Character limit**: 60 **Values**: a string of 60 characters or fewer ",
          "type": "string"
        },
        "SettledOn": {
          "description": " The date when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "SoftDescriptor": {
          "description": " A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:\n\n- 3-byte company identifier &quot;*&quot; 18-byte descriptor\n- 7-byte company identifier &quot;*&quot; 14-byte descriptor\n- 12-byte company identifier &quot;*&quot; 9-byte descriptor\n",
          "type": "string"
        },
        "SoftDescriptorPhone": {
          "description": " A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:\n\n- Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA`\n- URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate\n- Email address\n",
          "type": "string"
        },
        "SourceType": {
          "description": " Specifies whether the refund is a refund payment or a credit balance. This field is required when creating an non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`.\n**Character limit**: 13 **Values**:\n\n- `Payment`\n- `CreditBalance`\n",
          "type": "string"
        },
        "Status": {
          "description": " The status of the refund.\n**Character limit**: 10 **Values**: automatically generated:\n\n- `Canceled`\n- `Error`\n- `Processed`\n- `Processing`\n",
          "type": "string"
        },
        "SubmittedOn": {
          "description": " The date when the payment was submitted.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": " Specifies whether or not the object has been transferred to an external accounting system. Use this field for integrations with accounting systems such as NetSuite.\n**Character limit**: 10 **Values**: automatically generated:\n\n- `Processing`\n- `Yes`\n- `Error`\n- `Ignore`\n",
          "type": "string"
        },
        "Type": {
          "description": " Specifies if the refund is electronic or external.\n**Character limit**: 10 **Values**:\n\n- `Electronic`\n- External\n",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the last user to update the object.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the object was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetRefundInvoicePayment": {
      "properties": {
        "CreatedById": {
          "description": " The ID of the Zuora user who created the RefundInvoicePayment object.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the RefundInvoicePayment object was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InvoiceId": {
          "description": " The unique ID of the invoice associated with this refund invoice payment.\n**Character limit**: 32 **Values**: a valid invoice ID ",
          "type": "string"
        },
        "InvoicePaymentId": {
          "description": " The ID of the `InvoicePayment.Id` ",
          "type": "string"
        },
        "RefundAmount": {
          "description": "Specifies the amount of a refund applied against a payment. **Character limit**: 16 **Values**: automatically generated ",
          "format": "double",
          "type": "number"
        },
        "RefundId": {
          "description": " The ID of the Refund object\n**Character limit**: 32 **Values**: inherited from `Refund.Id` ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the last user to update the object.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the object was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetRefundTransactionLog": {
      "properties": {
        "BatchId": {
          "description": "",
          "type": "string"
        },
        "Gateway": {
          "description": "",
          "type": "string"
        },
        "GatewayReasonCode": {
          "description": "",
          "type": "string"
        },
        "GatewayReasonCodeDescription": {
          "description": "",
          "type": "string"
        },
        "GatewayState": {
          "description": "",
          "type": "string"
        },
        "GatewayTransactionType": {
          "description": "",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "RefundId": {
          "description": "",
          "type": "string"
        },
        "RequestString": {
          "description": "",
          "type": "string"
        },
        "ResponseString": {
          "description": "",
          "type": "string"
        },
        "TransactionDate": {
          "description": "",
          "format": "date-time",
          "type": "string"
        },
        "TransactionId": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetSubscription": {
      "properties": {
        "AccountId": {
          "description": " This field can be updated when **Status** is `Draft`. The ID of a valid account ID. ",
          "type": "string"
        },
        "AutoRenew": {
          "description": " This field can be updated when **Status** is `Draft`. Indicates if the subscription automatically renews at the end of the term.\n**Values**: `true`, `false` ",
          "type": "boolean"
        },
        "CancelledDate": {
          "description": " The date on which the subscription was canceled. ",
          "format": "date",
          "type": "string"
        },
        "ContractAcceptanceDate": {
          "description": " The date when the customer accepts the contract. This field can be updated when **Status** is `Draft`. ",
          "format": "date",
          "type": "string"
        },
        "ContractEffectiveDate": {
          "description": " The date when the contract takes effect. This field can be updated when **Status** is `Draft`.\n**Note**: This field is required in the subscribe call. If you set the value of this field to null and both the ServiceActivationDate and ContractAcceptanceDate fields are not required, the subscribe call still returns success, but the new subscription is in `DRAFT` status. To activate the subscription, you must set a valid date to this field. ",
          "format": "date",
          "type": "string"
        },
        "CpqBundleJsonId__QT": {
          "description": " The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.\n**Character limit**: 32 **Values**: N/A ",
          "type": "string"
        },
        "CreatedById": {
          "description": "The user ID of the person who created the subscription. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date the subscription was created. This value is the same as the OriginalCreatedDate value until the subscription is amended.\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "CreatorAccountId": {
          "description": " The account ID that created the subscription or the amended subscription.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatorInvoiceOwnerId": {
          "description": " The account ID that owns the invoices associated with the subscription or the amended subscription.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CurrentTerm": {
          "description": " The length of the period for the current subscription term. If TermType is set to `TERMED`, this field is required and must be greater than `0`. If TermType is set to `EVERGREEN`, this value is ignored. Default is `0`.\n**Character limit**: 20 **Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "CurrentTermPeriodType": {
          "description": " The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InitialTerm": {
          "description": " The length of the period for the first subscription term. This field can be updated when Status is `Draft`.\n**Required**: If TermType is Termed **Character limit**: 20 **Values**: any valid number. The default value is 0. ",
          "format": "int32",
          "type": "integer"
        },
        "InitialTermPeriodType": {
          "description": " The period type for the first subscription term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n**Note**:\n\n- This field can be updated when Status is `Draft`.\n- This field is used with the InitialTerm field to specify the initial subscription term.\n",
          "type": "string"
        },
        "InvoiceOwnerId": {
          "description": " This field can be updated when **Status** is `Draft`. A valid account ID. ",
          "type": "string"
        },
        "IsInvoiceSeparate": {
          "description": " Determines if the subscription is invoiced separately. If `TRUE`, then all charges for this subscription are collected into the subscription's own invoice.\n**V****alues**: `TRUE`, `FALSE `(default) ",
          "type": "boolean"
        },
        "Name": {
          "description": " The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur.\n**Character limit**: 100 **Values**: one of the following:\n\n- leave null to automatically generate\n- a string of 100 characters or fewer\n",
          "type": "string"
        },
        "Notes": {
          "description": " Use this field to record comments about the subscription.\n**Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "OpportunityCloseDate__QT": {
          "description": " The closing date of the Opportunity. This field is used in Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: **Values**: populated by Zuora Quotes ",
          "format": "date",
          "type": "string"
        },
        "OpportunityName__QT": {
          "description": " The unique identifier of the Opportunity. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: 100 **Values**: populated by Zuora Quotes ",
          "type": "string"
        },
        "OriginalCreatedDate": {
          "description": " The date when the subscription was originally created. This value is the same as the CreatedDate value until the subscription is amended.\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "OriginalId": {
          "description": " The original ID of this subscription.\n**Values**: automatically generated ",
          "type": "string"
        },
        "PreviousSubscriptionId": {
          "description": " The subscription ID immediately prior to the current subscription.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "QuoteBusinessType__QT": {
          "description": " The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: 32 **Values**: populated by Zuora Quotes ",
          "type": "string"
        },
        "QuoteNumber__QT": {
          "description": " The unique identifier of the Quote. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: 32 **Values**: populated by Zuora Quotes ",
          "type": "string"
        },
        "QuoteType__QT": {
          "description": " The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: 32 **Values**: populated by Zuora Quotes ",
          "type": "string"
        },
        "RenewalSetting": {
          "description": " This field can be updated when **Status** is `Draft`. Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\n**Required**: If TermType is Termed **Values**: `RENEW_WITH_SPECIFIC_TERM `(default), `RENEW_TO_EVERGREEN` ",
          "type": "string"
        },
        "RenewalTerm": {
          "description": " The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`.\n**Required**: If TermType is Termed.\n**Character limit**: 20 **Values**: one of the following:\n\n- leave null to default to `0`\n- any number\n",
          "format": "int32",
          "type": "integer"
        },
        "RenewalTermPeriodType": {
          "description": " The period type for the subscription renewal term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n**Note**:\n\n- This field is used with the RenewalTerm field to specify the subscription renewal term.\n- This field can be updated when Status is `Draft`.\n",
          "type": "string"
        },
        "ServiceActivationDate": {
          "description": " The date when the subscription is activated. This field can be updated when **Status** is `Draft`. ",
          "format": "date",
          "type": "string"
        },
        "Status": {
          "description": " The status of the subscription.\n**Character limit**: 17 **Values**: automatically generated **Possible values**: one of the following:\n\n- `Draft`\n- `PendingActivation`\n- `PendingAcceptance`\n- `Active`\n- `Cancelled`\n- `Expired`\n- `Suspended` (This value is in **Limited Availability**.)\n",
          "type": "string"
        },
        "SubscriptionEndDate": {
          "description": " The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "SubscriptionStartDate": {
          "description": " The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "TermEndDate": {
          "description": " This field can be updated when **Status** is `Draft`. The date when the subscription term ends. If the subscription is evergreen, the TermEndDate value is null or is the cancelation date, as appropriate. **Character limit**: 29 **Values**: automatically generated ",
          "format": "date",
          "type": "string"
        },
        "TermStartDate": {
          "description": " This field can be updated when **Status** is `Draft`. The date when the subscription term begins. If this is a renewal subscription, then this date is different from the subscription start date.\n**Character limit**: 29 **Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "TermType": {
          "description": " This field can be updated when **Status** is `Draft`. Indicates if a subscription is termed or evergreen.\n**Character limit**: 9 **Values**: `TERMED`, `EVERGREEN` ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the subscription.\n**Character limit:** 32 **Values: **automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the subscription was last updated.\n**Character limit:** 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Version": {
          "description": " The version number of the subscription.\n**Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProxyGetSubscriptionProductFeature": {
      "properties": {
        "CreatedById": {
          "description": "",
          "type": "string"
        },
        "CreatedDate": {
          "description": " Date and time when the product feature was added to the subscription.\n**Character limit**: 29 **Values**: ",
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "description": " Description of the subscription product feature.\n**Character limit**: 500 **Values**: ",
          "type": "string"
        },
        "FeatureCode": {
          "description": " Unique code of the feature.\n**Character limit**: 255 **Values**: ",
          "type": "string"
        },
        "FeatureId": {
          "description": " Internal Zuora ID of the feature.\n**Character limit**: 32 **Values**: ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Name": {
          "description": " Name of the feature.\n**Character limit**: 255 **Values**: ",
          "type": "string"
        },
        "RatePlanId": {
          "description": " Id of the product rate plan to which the feature belongs.\n**Character limit**: 32 **Values**: ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " Internal Zuora ID of the user who last updated the subscription product feature.\n**Character limit**: 32 **Values**: ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " Date and time when the subscription product feature was last updated.\n**Character limit**: 29 **Values**: ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetTaxationItem": {
      "properties": {
        "AccountingCode": {
          "description": " The Chart of Accounts ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The ID of the user who created the taxation item.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the payment was created in the Zuora system.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "ExemptAmount": {
          "description": " The amount of taxes or VAT for which the customer has an exemption.\n**Character limit**: 16 **Values**: a decimal value ",
          "format": "double",
          "type": "number"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "InvoiceItemId": {
          "description": " The ID of the specific invoice item that the taxation information applies to.\n**Character limit**: 32 **Values**: a valid invoice item ID ",
          "type": "string"
        },
        "Jurisdiction": {
          "description": " The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n**Character limit**: 32 **Values**: a string of 32 characterrs or fewer ",
          "type": "string"
        },
        "LocationCode": {
          "description": " The identifier for the location based on the value of the `TaxCode` field.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "Name": {
          "description": " The name of the tax rate, such as sales tax or GST. This name is displayed on invoices.\n**Character limit**: 128 **Values**: a string of 128 characters or fewer ",
          "type": "string"
        },
        "TaxAmount": {
          "description": " The amount of the tax applied to the charge.\n**Character limit**: 16 **Values**: a decimal value ",
          "format": "double",
          "type": "number"
        },
        "TaxCode": {
          "description": " The tax code identifies which tax rules and tax rates to apply to a specific charge.\n**Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxCodeDescription": {
          "description": " The description for the tax code.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "TaxDate": {
          "description": " The date that the tax is applied to the charge, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "TaxRate": {
          "description": " The tax rate applied to the charge.\n**Character limit**: 16 **Values**: a valid decimal value ",
          "format": "double",
          "type": "number"
        },
        "TaxRateDescription": {
          "description": " The description of the tax rate.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "TaxRateType": {
          "description": " The type of the tax rate applied to the charge.\n**Character limit**: 10 **Values**: `Percentage`, `FlatFee` ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the taxation item.\n**Character limit**: **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": "The date when the taxation item was last updated. **Character limit**: **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetUnitOfMeasure": {
      "properties": {
        "Active": {
          "description": " Indicates if the UOM is available for new product rate plans. The default value is `true`.\n**Character limit**: 5 **Values**: `true`, `false ` ",
          "type": "boolean"
        },
        "CreatedById": {
          "description": " The ID of the Zuora user who created the UOM.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the UOM was created.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "DecimalPlaces": {
          "description": "The number of digits to the right of the decimal point that you want to measure for the unit. To use whole numbers only, set this value to 0. You can't change this value after this `UOM` is used in any product, subscription, or usage. **Character limit**: 1 **Values**: an integer between 0 and 9, exclusive ",
          "format": "int64",
          "type": "integer"
        },
        "DisplayedAs": {
          "description": "The name of the UOM that you want displayed on invoices. The default value is the `UomName` field value. **Character limit**: 50 **Values**: A string of 50 characters or fewer ",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "RoundingMode": {
          "description": " Specifies whether to round the UOM value up or down when the value exceeds the `DecimalPlaces` field value. The default value is `Up`.\n**Character limit**: 4 **Values**: `Up`, `Down` ",
          "type": "string"
        },
        "UomName": {
          "description": " The name of the UOM, such as license or GB. This name is displayed in query results and in the web-based UI labels. If you want a different name to be displayed on invoices, then use the `DisplayedAs` field to provide the invoice label.\n**Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "UpdatedById": {
          "description": "The ID of the user who lasted updated the UOM. **Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the UOM was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyGetUsage": {
      "properties": {
        "AccountId": {
          "description": " The ID of the account associated with the usage data. This field is required if no value is specified for the `AccountNumber` field.\n**Character limit**: 32 **Values**: a valid account ID ",
          "type": "string"
        },
        "AccountNumber": {
          "description": " The number of the account associated with the usage data. This field is required if no value is specified for the `AccountId` field.\n**Character limit**: 50 **Values**: a valid account number ",
          "type": "string"
        },
        "ChargeId": {
          "description": " The OrginalId of the rate plan charge related to the usage record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32 **Values**: a valid rate plan charge OriginalID ",
          "type": "string"
        },
        "CreatedById": {
          "description": " The user ID of the person who uploaded the usage records.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the invoice was generated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "EndDateTime": {
          "description": " The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation.\n**Character limit**: 29 **Values**: a valid date and time value ",
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "description": "Object identifier.",
          "type": "string"
        },
        "Quantity": {
          "description": " Indicates the number of units used.\n**Character limit**: 16 **Values**: a valid decimal amount equal to or greater than 0 ",
          "format": "double",
          "type": "number"
        },
        "RbeStatus": {
          "description": " Indicates if the rating and billing engine (RBE) processed usage data for an invoice.\n**Character limit**: 9 **Values**: automatically generated to be one of the following values: `Importing`, `Pending`, `Processed` ",
          "type": "string"
        },
        "SourceType": {
          "description": " Indicates if the usage records were imported from the web-based UI or the API.\n**Character limit**: 6 **Values**: automatically generated to be one of the following values: `API`, `Import` ",
          "type": "string"
        },
        "StartDateTime": {
          "description": " The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation.\n**Character limit**: 29 **Values**: a valid date and time value ",
          "format": "date-time",
          "type": "string"
        },
        "SubmissionDateTime": {
          "description": " The date when usage was submitted.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "SubscriptionId": {
          "description": " The ID of the subscription that contains the fees related to the usage data.\n**Character limit**: 32 **Values**: a valid subscription ID ",
          "type": "string"
        },
        "UOM": {
          "description": " Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.\n**Character limit**: **Values**: a valid unit of measure ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the usage upload.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the usage upload was last updated.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyAccount": {
      "example": {
        "AccountNumber": "AN_1476935163869",
        "AutoPay": true,
        "Batch": "Batch1",
        "BillCycleDay": 1,
        "BillToId": "2c93808457d787030157e03220684fac",
        "CrmId": "crmid",
        "Currency": "USD",
        "DefaultPaymentMethodId": "2c93808457d787030157e03220ec4fad",
        "Id": "2c93808457d787030157e0321fdf4fab",
        "InvoiceTemplateId": "2c93808457d787030157e03208864f97",
        "Name": "AC_1476935163869",
        "Notes": "this is notes",
        "PaymentTerm": "Due Upon Receipt",
        "SoldToId": "2c93808457d787030157e03220684fac",
        "Status": "Active"
      },
      "properties": {
        "AccountNumber": {
          "description": "Unique account number assigned to the account. **Character limit**: 50 **Values**: one of the following:\n\n- null to auto-generate\n- a string of 50 characters or fewer that doesn't begin with the default account number prefix\n",
          "type": "string"
        },
        "AdditionalEmailAddresses": {
          "description": "List of additional email addresses to receive emailed invoices. **Character limit**: 120 **Values**: comma-separated list of email addresses ",
          "type": "string"
        },
        "AllowInvoiceEdit": {
          "description": " Indicates if associated invoices can be edited.\n**Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "AutoPay": {
          "description": " Indicates if future payments are automatically collected when they're due during a Payment Run.\n**Character limit**: 5 **Values**: `true`, `false` (default) ",
          "type": "boolean"
        },
        "Batch": {
          "description": " Organizes your customer accounts into groups to optimize your billing and payment operations. Required if you use the Subscribe call.\n**Character limit**: 20 **Values**:any system-defined batch (`Batch1` - `Batch50 `or by name). ",
          "type": "string"
        },
        "BcdSettingOption": {
          "description": "Billing cycle day setting option. **Character limit**: 9 **Values**: `AutoSet`, `ManualSet` ",
          "type": "string"
        },
        "BillCycleDay": {
          "description": "Billing cycle day (BCD) on which bill runs generate invoices for the account. **Character limit**: 2 **Values**: any activated system-defined bill cycle day (`1` - `31`) ",
          "format": "int32",
          "type": "integer"
        },
        "BillToId": {
          "description": "ID of the person to bill for the account. **Character limit**: 32 **Values**: a valid contact ID for the account ",
          "type": "string"
        },
        "CommunicationProfileId": {
          "description": "Associates the account with a specified communication profile. **Character limit**: 32 **Values**: a valid communication profile ID ",
          "type": "string"
        },
        "CrmId": {
          "description": "CRM account ID for the account. A CRM is a customer relationship management system, such as Salesforce.com. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "Currency": {
          "description": " Currency that the customer is billed in. ",
          "type": "string"
        },
        "CustomerServiceRepName": {
          "description": "Name of the account's customer service representative, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "DefaultPaymentMethodId": {
          "description": "ID of the default payment method for the account. This field is required if the AutoPay field is set to `true`. **Character limit**: 32 **Values**: a valid ID for an existing payment method ",
          "type": "string"
        },
        "InvoiceDeliveryPrefsEmail": {
          "description": "Indicates if the customer wants to receive invoices through email.  **Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "InvoiceDeliveryPrefsPrint": {
          "description": "Indicates if the customer wants to receive printed invoices, such as through postal mail. **Character limit**: 5 **Values**: `true`, `false` (default if left null) ",
          "type": "boolean"
        },
        "InvoiceTemplateId": {
          "description": "The ID of the invoice template. Each customer account can use a specific invoice template for invoice generation. **Character limit**: 32 **Values**: a valid template ID configured in Zuora Billing Settings ",
          "type": "string"
        },
        "Name": {
          "description": "Name of the account as displayed in the Zuora UI. **Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "Notes": {
          "description": " Comments about the account. **Character limit**: 65,535 **Values**: a string of 65,535 characters ",
          "type": "string"
        },
        "ParentId": {
          "description": "Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled. **Character limit**: 32 **Values**: a valid account ID ",
          "type": "string"
        },
        "PaymentGateway": {
          "description": "Gateway used for processing electronic payments and refunds. **Character limit**: 40 **Values**: one of the following:\n\n- a valid configured gateway name\n- Null to inherit the default value set in Zuora Payment Settings\n",
          "type": "string"
        },
        "PaymentTerm": {
          "description": "Indicates when the customer pays for subscriptions. **Character limit**: 100 **Values**: a valid, active payment term defined in the web-based UI administrative settings ",
          "type": "string"
        },
        "PurchaseOrderNumber": {
          "description": "The number of the purchase order associated with this account. Purchase order information generally comes from customers. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "SalesRepName": {
          "description": "The name of the sales representative associated with this account, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "SoldToId": {
          "description": "ID of the person who bought the subscription associated with the account. **Character limit**: 32 **Values**: a valid contact ID for the account ",
          "type": "string"
        },
        "Status": {
          "description": "Status of the account in the system. **Character limit**: 8 **Values**: one of the following:\n\n- leave null if you're using the Subscribe call\n- if you're using the Create call:\n- `Draft`\n- `Active`\n- `Canceled`\n",
          "type": "string"
        },
        "TaxCompanyCode": {
          "description": " Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Character limit**: 50 **Values**: a valid company code ",
          "type": "string"
        },
        "TaxExemptCertificateID": {
          "description": "ID of your customer's tax exemption certificate. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptCertificateType": {
          "description": "Type of the tax exemption certificate that your customer holds.  **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptDescription": {
          "description": "Description of the tax exemption certificate that your customer holds. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "TaxExemptEffectiveDate": {
          "description": "Date when the the customer's tax exemption starts. **Character limit**: 29 **Version notes**: requires Zuora Tax ",
          "format": "date",
          "type": "string"
        },
        "TaxExemptExpirationDate": {
          "description": "Date when the customer's tax exemption certificate expires  **Character limit**: 29 **Version notes**: requires Zuora Tax ",
          "format": "date",
          "type": "string"
        },
        "TaxExemptIssuingJurisdiction": {
          "description": "Indicates the jurisdiction in which the customer's tax exemption certificate was issued. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxExemptStatus": {
          "description": " Status of the account's tax exemption. Required if you use Zuora Tax.\n**Character limit**: 19 **Values**: one of the following:\n\n- `Yes`\n- `No`\n- `PendingVerification`\n",
          "type": "string"
        },
        "VATId": {
          "description": " EU Value Added Tax ID.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n**Character limit**: 25 **Values**: a valid Value Added Tax ID ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyAmendment": {
      "example": {
        "Id": "2c93808457d787030157e02e430c1f15",
        "Name": "AMtssl1bnuq1_new"
      },
      "properties": {
        "AutoRenew": {
          "description": " Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed. **Required:** For amendment of type TermsAndConditions when changing the automatic renewal status of a subscription.\n**Values**: true, false ",
          "type": "boolean"
        },
        "ContractEffectiveDate": {
          "description": " The date when the amendment's changes become effective for billing purposes.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "CurrentTerm": {
          "description": " The length of the period for the current subscription term. This field can be updated when Status is `Draft`.\n**Required**: Only if the value of the Type field is set to `TermsAndConditions` and TermType is set to `TERMED`. This field is not required if TermType is set to `EVERGREEN`.\n**Character limit**: **Values**: a valid number ",
          "format": "int64",
          "type": "integer"
        },
        "CurrentTermPeriodType": {
          "description": " The period type for the current subscription term. **Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n**Note**:\n\n- This field can be updated when Status is `Draft`.\n- This field is used with the CurrentTerm field to specify the current subscription term.\n",
          "type": "string"
        },
        "CustomerAcceptanceDate": {
          "description": " The date when the customer accepts the amendment's changes to the subscription. **Required**: Only if the value of the Status field is set to PendingAcceptance.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "Description": {
          "description": " A description of the amendment.\n**Character limit**: 500 **Values**: maximum 500 characters ",
          "type": "string"
        },
        "EffectiveDate": {
          "description": " The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.\n**Required**: For the cancellation amendments. Optional for other types of amendments.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "Name": {
          "description": " The name of the amendment.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "RenewalSetting": {
          "description": " Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\n**Required**: If TermType is Termed **Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN ",
          "type": "string"
        },
        "RenewalTerm": {
          "description": " The term of renewal for the amended subscription. This field can be updated when Status is `Draft`.\n**Required**: Only if the value of the Type field is set to `TermsAndConditions`.\n**Character limit**: **Values:** a valid number ",
          "format": "int64",
          "type": "integer"
        },
        "RenewalTermPeriodType": {
          "description": " The period type for the subscription renewal term. This field can be updated when Status is `Draft`.\n**Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n",
          "type": "string"
        },
        "ServiceActivationDate": {
          "description": " The date when service is activated.\n**Required**: Only if the value of the Status field is set to PendingActivation.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "SpecificUpdateDate": {
          "description": " The date when the UpdateProduct amendment takes effect. This field is only applicable if there is already a future-dated UpdateProduct amendment on the subscription.\n**Required**: Only for the UpdateProduct amendments if there is already a future-dated UpdateProduct amendment on the subscription.\n",
          "format": "date",
          "type": "string"
        },
        "Status": {
          "description": " The status of the amendment. Type: string (enum) **Character limit**: 17 **Values**: one of the following:\n\n- Draft (default, if left null)\n- Pending Activation\n- Pending Acceptance\n- Completed\n",
          "type": "string"
        },
        "SubscriptionId": {
          "description": " The ID of the subscription that the amendment changes.\n**Character limit**: 32 **Values**: a valid subscription ID ",
          "type": "string"
        },
        "TermStartDate": {
          "description": " The date when the new terms and conditions take effect.\n**Required**: Only if the value of the Type field is set to TermsAndConditions.\n**Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "TermType": {
          "description": " Indicates if the subscription isTERMED or EVERGREEN.\n\n- A TERMED subscription has an expiration date, and must be manually renewed.\n- An EVERGREEN subscription doesn't have an expiration date, and must be manually ended.\n\n**Required**: Only when as part of an amendment of type TermsAndConditions &#65279;to change the term type of a subscription. Type: string **Character limit**: 9 **Values**: TERMED, EVERGREEN ",
          "type": "string"
        },
        "Type": {
          "description": " The type of amendment.\n**Character limit**: 18 **Values**: one of the following:\n\n- Cancellation\n- NewProduct\n- OwnerTransfer\n- RemoveProduct\n- Renewal\n- UpdateProduct\n- TermsAndConditions\n- SuspendSubscription (This value is in **Limited Availability**.)\n- ResumeSubscription (This value is in **Limited Availability**.)\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyBillRun": {
      "example": {
        "Status": "Posted"
      },
      "properties": {
        "Status": {
          "description": "The status for this bill run. See [Status Types](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs#Status_Types) for more information.\n\nTo cancel a bill run, specify `Canceled`. To post a bill run, specify `Posted`.\n\n**Character limit:** 20\n\n**Values:** \n\n  * `Pending`\n  * `Processing`\n  * `Completed`\n  * `Error`\n  * `Canceled`\n  * `Posted`\n",
          "type": "string"
        }
      },
      "required": [
        "Status"
      ],
      "type": "object"
    },
    "ProxyModifyContact": {
      "example": {
        "FirstName": "FN1476934918260_new",
        "Id": "2c93808457d787030157e02e606e2095"
      },
      "properties": {
        "AccountId": {
          "description": " The Zuora account ID associated with this contact. This field is not required when you use the Subscribe call. This field is required for all other calls.\n**Character limit: **32 **Values: **a valid account ID ",
          "type": "string"
        },
        "Address1": {
          "description": " The first line of the contact's address, which is often a street address or business name.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "Address2": {
          "description": " The second line of the contact's address.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "City": {
          "description": " The city of the contact's address.\n**Character limit**: 40 **Values: **a string of 40 characters or fewer ",
          "type": "string"
        },
        "Country": {
          "description": " The country of the contact's address. ",
          "type": "string"
        },
        "County": {
          "description": " The country. May optionally be used by Zuora Tax to calculate county tax.\n**Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "Description": {
          "description": " A description for the contact.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "Fax": {
          "description": " The contact's fax number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "FirstName": {
          "description": " The contact's first name.\n**Character limit**: 100 **Values**: a string of the contact's first name ",
          "type": "string"
        },
        "HomePhone": {
          "description": " The contact's home phone number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "LastName": {
          "description": " The contact's last name.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "MobilePhone": {
          "description": " The contact's mobile phone number.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "NickName": {
          "description": " A nickname for the contact.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "OtherPhone": {
          "description": " An additional phone number for the contact.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "OtherPhoneType": {
          "description": "The type of the `OtherPhone`. **Character limit**: 20 **Values**: `Work`, `Mobile`, `Home`, `Other` ",
          "type": "string"
        },
        "PersonalEmail": {
          "description": " The contact's personal email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "PostalCode": {
          "description": " The zip code for the contact's address.\n**Character limit:** 20 **Values: **a string of 20 characters or fewer ",
          "type": "string"
        },
        "State": {
          "description": " The state or province of the contact's address. ",
          "type": "string"
        },
        "TaxRegion": {
          "description": "If using Zuora Tax rules ",
          "type": "string"
        },
        "WorkEmail": {
          "description": " The contact's business email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "WorkPhone": {
          "description": " The contact's business phone number.\n**Character limit**: 40 **notes**: -- **Values**: a string of 40 characters or fewer ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyInvoice": {
      "example": {
        "Id": "2c93808457d787030157e031d86c4c57",
        "Status": "Posted"
      },
      "properties": {
        "Status": {
          "description": " The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.\n**Character limit**: 8 **Values**: one of the following:\n\n-  Draft (default, automatically set upon invoice creation)\n\n-  Posted\n\n-  Canceled\n\n",
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": " Specifies whether or not the invoice was transferred to an external accounting system, such as NetSuite.\n**Character limit**: 10 **Values**: Processing, Yes, Error, Ignore ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyInvoiceAdjustment": {
      "properties": {
        "ReasonCode": {
          "description": " A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n**Character limit**: 32 **V****alues**: a valid reason code ",
          "type": "string"
        },
        "Status": {
          "description": " The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls.\n**Character limit**: 9 **Values**: `Canceled`, `Processed` ",
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": " Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.\n**Character limit**: 10 **Values**: `Processing`, `Yes`, `Error`, `Ignore` ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyInvoicePayment": {
      "properties": {
        "Amount": {
          "description": " The amount of the payment.\n**Character limit**: 16 **Values**: a valid currency amount ",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProxyModifyPayment": {
      "properties": {
        "AccountId": {
          "description": "The unique account ID for the customer that the payment is for.\n",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "AccountingCode": {
          "description": "The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.\n",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "Amount": {
          "description": "The amount of the payment.\n",
          "format": "double",
          "maxLength": 16,
          "minLength": 0,
          "type": "number"
        },
        "Comment": {
          "description": "Additional information related to the payment.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "EffectiveDate": {
          "description": "The date when the payment takes effect.\n",
          "format": "date",
          "maxLength": 29,
          "minLength": 0,
          "type": "string"
        },
        "PaymentMethodId": {
          "description": "The ID of the payment method used for the payment. \n",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "ReferenceId": {
          "description": "The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.\n",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "Status": {
          "description": "The status of the payment in Zuora. The value depends on the type of payment.\n  \nFor electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.\n",
          "enum": [
            "Processed",
            "Error",
            "Voided",
            "Canceled"
          ],
          "maxLength": 11,
          "minLength": 0,
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": "Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
          "enum": [
            "Processing",
            true,
            "Error",
            "Ignore"
          ],
          "maxLength": 11,
          "minLength": 0,
          "type": "string"
        },
        "Type": {
          "description": "The type of the payment, whether the payment is external or electronic.\n",
          "enum": [
            "External",
            "Electronic"
          ],
          "maxLength": 10,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyPaymentMethod": {
      "example": {
        "CreditCardAddress1": "312 2nd Ave W_new",
        "Id": "2c93808457d787030157e02fced332a2"
      },
      "properties": {
        "AccountId": {
          "description": " The ID of the customer account associated with this payment method. This field is not required for the account ID. ",
          "type": "string"
        },
        "AchAbaCode": {
          "description": " The nine-digit routing number or ABA number used by banks. Use this field for ACH payment methods.\n**Character limit**: 9 **Values**: a string of 9 characters or fewer ",
          "type": "string"
        },
        "AchAccountName": {
          "description": " The name of the account holder, which can be either a person or a company. Use this field for ACH payment methods.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "AchAccountType": {
          "description": " The type of bank account associated with the ACH payment. Use this field for ACH payment methods.\n**Character limit**: 16 **Values**:\n\n- `BusinessChecking`\n- `Checking`\n- `Saving`\n",
          "type": "string"
        },
        "AchAddress1": {
          "description": " Line 1 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.\n**Character limit:** **Values:** an address ",
          "type": "string"
        },
        "AchAddress2": {
          "description": " Line 2 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.\n**Character limit:** **Values:** an address ",
          "type": "string"
        },
        "AchBankName": {
          "description": " The name of the bank where the ACH payment account is held. Use this field for ACH payment methods.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "BankBranchCode": {
          "description": " The branch code of the bank used for direct debit. Use this field for direct debit payment methods.\n**Character limit**: 10 **Values**:  string of 10 characters or fewer ",
          "type": "string"
        },
        "BankCheckDigit": {
          "description": "The check digit in the international bank account number, which confirms the validity of the account. Use this field for direct debit payment methods. **Character limit**: 4 **Values**:  string of 4 characters or fewer ",
          "type": "string"
        },
        "BankCity": {
          "description": " The city of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:70 **Values**:  string of 70 characters or fewer ",
          "type": "string"
        },
        "BankCode": {
          "description": " The sort code or number that identifies the bank. This is also known as the sort code. This field is required for direct debit payment methods.\n**Character limit**: 18 **Values**:  string of 18 characters or fewer ",
          "type": "string"
        },
        "BankName": {
          "description": " The name of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:80 **Values**:  string of 80 characters or fewer ",
          "type": "string"
        },
        "BankPostalCode": {
          "description": " The zip code or postal code of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:20 **Values**:  string of 20 characters or fewer ",
          "type": "string"
        },
        "BankStreetName": {
          "description": " The name of the street of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:60 **Values**:  string of 60 characters or fewer ",
          "type": "string"
        },
        "BankStreetNumber": {
          "description": " The number of the direct debit bank. Use this field for direct debit payment methods.\n**Character limit**:10 **Values**:  string of 10 characters or fewer ",
          "type": "string"
        },
        "BankTransferAccountName": {
          "description": " The name on the direct debit bank account. Use this field for direct debit payment methods.\n**Character limit**: 60 **Values**:  string of 60 characters or fewer ",
          "type": "string"
        },
        "BusinessIdentificationCode": {
          "description": " The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Use this field only for direct debit payments in Switzerland with Global Collect.\n**Character limit**: 11 **Values**: string of 11 characters or fewer ",
          "type": "string"
        },
        "City": {
          "description": " The city of the customer's address. Use this field for direct debit payment methods.\n**Character limit**:80 **Values**:  string of 80 characters or fewer ",
          "type": "string"
        },
        "Country": {
          "description": " The two-letter country code of the customer's address. Use this field for direct debit payment methods.\n**Character limit**: 2 **Values**: a valid country code ",
          "type": "string"
        },
        "CreditCardAddress1": {
          "description": " The first line of the card holder's address, which is often a street address or business name. Use this field for credit card and direct debit payment methods.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreditCardAddress2": {
          "description": " The second line of the card holder's address. Use this field for credit card and direct debit payment methods.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "CreditCardCity": {
          "description": " The city of the card holder's address. Use this field for credit card and direct debit payment methods **Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "CreditCardCountry": {
          "description": " The country of the card holder's address. ",
          "type": "string"
        },
        "CreditCardExpirationMonth": {
          "description": " The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.\n**Character limit**: 2 **Values**: a two-digit number, 01 - 12 ",
          "format": "int32",
          "type": "integer"
        },
        "CreditCardExpirationYear": {
          "description": " The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.\n**Character limit**: 4 **Values**: a four-digit number ",
          "format": "int32",
          "type": "integer"
        },
        "CreditCardHolderName": {
          "description": " The full name of the card holder. Use this field for credit card and direct debit payment methods.\n**Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        },
        "CreditCardPostalCode": {
          "description": " The billing address's zip code. This field is required only when you define a debit card or credit card payment.\n**Character limit**: 20 **Values**: a string of 20 characters or fewer ",
          "type": "string"
        },
        "CreditCardState": {
          "description": " The billing address's state. Use this field is if the `CreditCardCountry' value is either Canada or the US. State names must be spelled in full. ",
          "type": "string"
        },
        "CreditCardType": {
          "description": " The type of credit card or debit card. This field is required only when you define a debit card or credit card payment.\n**Character limit**: 32 **Values**: `AmericanExpress`, `Discover`, `MasterCard`, `Visa` ",
          "type": "string"
        },
        "DeviceSessionId": {
          "description": " The session ID of the user when the `PaymentMethod` was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently only Verifi supports this field.\n**Character limit**: 255 **Values**: ",
          "type": "string"
        },
        "Email": {
          "description": " An email address for the payment method in addition to the bill to contact email address.\n**Character limit**: 80 **Values**: a string of 80 characters or fewer ",
          "type": "string"
        },
        "ExistingMandate": {
          "description": " Indicates if the customer has an existing mandate or a new mandate. A mandate is a signed authorization for UK and NL customers. When you are migrating mandates from another system, be sure to set this field correctly. If you indicate that a new mandate is an existing mandate or vice-versa, then transactions fail. This field is used only for the direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`, `No` ",
          "type": "string"
        },
        "FirstName": {
          "description": " The customer's first name. This field is used only for the direct debit payment method.\n**Character limit**: 30 **Values**: a string of 30 characters or fewer ",
          "type": "string"
        },
        "IBAN": {
          "description": " The International Bank Account Number. This field is used only for the direct debit payment method.\n**Character limit**: 42 **Values**: a string of 42 characters or fewer ",
          "type": "string"
        },
        "IPAddress": {
          "description": " The IP address of the user when the payment method was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently PayPal, CyberSource, Authorize.Net, and Verifi support this field.\n**Character limit**: 15 **Values**: a string of 15 characters or fewer ",
          "type": "string"
        },
        "LastName": {
          "description": " The customer's last name. This field is used only for the direct debit payment method.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "LastTransactionDateTime": {
          "description": " The date of the most recent transaction.\n**Character limit**: 29 **Values**: a valid date and time value ",
          "format": "date-time",
          "type": "string"
        },
        "LastTransactionStatus": {
          "description": " The status of the most recent transaction.\n**Character limit**: 39 **Values**: automatically generated ",
          "type": "string"
        },
        "MandateCreationDate": {
          "description": " The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "MandateID": {
          "description": " The ID of the mandate. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 36 **Values**: a string of 36 characters or fewer ",
          "type": "string"
        },
        "MandateReceived": {
          "description": " Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`, `No `(case-sensitive) ",
          "type": "string"
        },
        "MandateUpdateDate": {
          "description": " The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "MaxConsecutivePaymentFailures": {
          "description": " Specifies the number of allowable consecutive failures Zuora attempts with the payment method before stopping.\n**Values**: a valid number ",
          "type": "integer"
        },
        "NumConsecutiveFailures": {
          "description": "The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. \n",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "PaymentMethodStatus": {
          "description": " Specifies the status of the payment method. It is set to Active on creation.\n**Character limit**: 6 **Values**: `Active` or `Closed` ",
          "type": "string"
        },
        "PaymentRetryWindow": {
          "description": " The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. This field is required if the `UseDefaultRetryRule` field value is set to `false`.\n**Character limit**: 4 **Values**: a whole number between 1 and 1000, exclusive ",
          "type": "integer"
        },
        "Phone": {
          "description": " The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.\n**Character limit**: 40 **Values**: a string of 40 characters or fewer ",
          "type": "string"
        },
        "PostalCode": {
          "description": " The zip code of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 20 **Values**: a string of 20 characters or fewer ",
          "type": "string"
        },
        "State": {
          "description": " The state of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 70 **Values**: a string of 70 characters or fewer ",
          "type": "string"
        },
        "StreetName": {
          "description": " The street name of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "StreetNumber": {
          "description": " The street number of the customer's address. This field is used only for the direct debit payment method.\n**Character limit**: 30 **Values**: a string of 30 characters or fewer ",
          "type": "string"
        },
        "UseDefaultRetryRule": {
          "description": " Determines whether to use the default retry rules configured in the Zuora Payments settings. Set this to `true` to use the default retry rules. Set this to `false` to set the specific rules for this payment method. If you set this value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`, are required.\n**Character limit**: 5 **Values**: `t``rue`, `false` ",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyModifyProduct": {
      "example": {
        "Description": "Create product via API_new",
        "EffectiveEndDate": "2066-10-20",
        "EffectiveStartDate": "1966-10-20",
        "Id": "2c93808457d787030157e02e7be22210",
        "Name": "P_1476934925293_new",
        "SKU": "API-SKU1476934925293"
      },
      "properties": {
        "AllowFeatureChanges": {
          "description": " Controls whether to allow your users to add or remove features while creating or amending a subscription.\n**Character** **limit**: n/a\n**Values**: true, false (default) ",
          "type": "boolean"
        },
        "Category": {
          "description": " Category of the product. Used by Zuora Quotes Guided Product Selector.\n**Character** **limit**: 100\n**Values**: One of the following:\n\n- Base Products\n- Add On Services\n- Miscellaneous Products\n",
          "type": "string"
        },
        "Description": {
          "description": " A descriptionof the product. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "EffectiveEndDate": {
          "description": "The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format. **Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "EffectiveStartDate": {
          "description": "The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format. **Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "Name": {
          "description": "The name of the product. This information is displayed in the product catalog pages in the web-based UI. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "SKU": {
          "description": "The unique SKU for the product. **Character limit**: 50 **Values**: one of the following:\n\n- leave null for automatic generated\n- an alphanumeric string of 50 characters or fewer\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyProductRatePlan": {
      "example": {
        "Id": "2c93808457d787030157e02da0d91852",
        "Name": "ProductRatePlan1476934869186_new"
      },
      "properties": {
        "Description": {
          "description": "A description of the product rate plan. **Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "EffectiveEndDate": {
          "description": " The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "EffectiveStartDate": {
          "description": " The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "Name": {
          "description": "The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product. **Character limit**: 100 **Values**: a string of 100 characters or fewer ",
          "type": "string"
        },
        "ProductId": {
          "description": "The ID of the product that contains the product rate plan. **Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyRefund": {
      "example": {
        "Id": "2c93808457d787030157e03198c84918",
        "Status": "Canceled"
      },
      "properties": {
        "ReasonCode": {
          "description": " A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.\n**Character limit**: 32 **V****alues**: a valid reason code ",
          "type": "string"
        },
        "Status": {
          "description": " The status of the refund.\n**Character limit**: 10 **Values**: automatically generated:\n\n- `Canceled`\n- `Error`\n- `Processed`\n- `Processing`\n",
          "type": "string"
        },
        "TransferredToAccounting": {
          "description": " Specifies whether or not the object has been transferred to an external accounting system. Use this field for integrations with accounting systems such as NetSuite.\n**Character limit**: 10 **Values**: automatically generated:\n\n- `Processing`\n- `Yes`\n- `Error`\n- `Ignore`\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifySubscription": {
      "example": {
        "Id": "2c93808457d787030157e02ea04123cf",
        "Name": "S_1476934934547_name",
        "Notes": "this is notes_new"
      },
      "properties": {
        "AccountId": {
          "description": " This field can be updated when **Status** is `Draft`. The ID of a valid account ID. ",
          "type": "string"
        },
        "AutoRenew": {
          "description": " This field can be updated when **Status** is `Draft`. Indicates if the subscription automatically renews at the end of the term.\n**Values**: `true`, `false` ",
          "type": "boolean"
        },
        "CancelledDate": {
          "description": " The date of the Amendment object.\n**Values**: inherited from `Amendment.EffectiveDate` ",
          "format": "date",
          "type": "string"
        },
        "ContractAcceptanceDate": {
          "description": " The date when the customer accepts the contract. This field can be updated when **Status** is `Draft`. ",
          "format": "date",
          "type": "string"
        },
        "ContractEffectiveDate": {
          "description": " The date when the contract takes effect. This field can be updated when **Status** is `Draft`.\n**Note**: This field is required in the Subscribe call. If you set the value of this field to null and both the ServiceActivationDate and ContractAcceptanceDate fields are not required, the Subscribe call still returns success, but the new subscription is in `DRAFT` status. To activate the subscription, you must set a valid date to this field. ",
          "format": "date",
          "type": "string"
        },
        "CpqBundleJsonId__QT": {
          "description": " The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.\n**Character limit**: 32 **Values**: N/A ",
          "type": "string"
        },
        "CurrentTermPeriodType": {
          "description": " The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n",
          "type": "string"
        },
        "InitialTerm": {
          "description": " The length of the period for the first subscription term. This field can be updated when Status is `Draft`.\n**Required**: If TermType is Termed **Character limit**: 20 **Values**: any valid number. The default value is 0. ",
          "format": "int32",
          "type": "integer"
        },
        "InitialTermPeriodType": {
          "description": " The period type for the first subscription term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n**Note**:\n\n- This field can be updated when Status is `Draft`.\n- This field is used with the InitialTerm field to specify the initial subscription term.\n",
          "type": "string"
        },
        "InvoiceOwnerId": {
          "description": " This field can be updated when **Status** is `Draft`. A valid account ID. ",
          "type": "string"
        },
        "IsInvoiceSeparate": {
          "description": " Determines if the subscription is invoiced separately. If `TRUE`, then all charges for this subscription are collected into the subscription's own invoice.\n**Values**: `TRUE`, `FALSE `(default) ",
          "type": "boolean"
        },
        "Name": {
          "description": " The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur.\n**Character limit**: 100 **Values**: one of the following:\n\n- leave null to automatically generate\n- a string of 100 characters or fewer\n",
          "type": "string"
        },
        "Notes": {
          "description": " Use this field to record comments about the subscription.\n**Character limit**: 500 **Values**: a string of 500 characters or fewer ",
          "type": "string"
        },
        "OpportunityCloseDate__QT": {
          "description": " The closing date of the Opportunity. This field is used in Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: **Values**: populated by Zuora Quotes ",
          "format": "date",
          "type": "string"
        },
        "OpportunityName__QT": {
          "description": " The unique identifier of the Opportunity. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: 100 **Values**: populated by Zuora Quotes ",
          "type": "string"
        },
        "QuoteBusinessType__QT": {
          "description": " The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: 32 **Values**: populated by Zuora Quotes ",
          "type": "string"
        },
        "QuoteNumber__QT": {
          "description": " The unique identifier of the Quote. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: 32 **Values**: populated by Zuora Quotes ",
          "type": "string"
        },
        "QuoteType__QT": {
          "description": " The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n**Character limit**: 32 **Values**: populated by Zuora Quotes ",
          "type": "string"
        },
        "RenewalSetting": {
          "description": " This field can be updated when **Status** is `Draft`. Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\n**Required**: If TermType is Termed **Values**: `RENEW_WITH_SPECIFIC_TERM `(default), `RENEW_TO_EVERGREEN` ",
          "type": "string"
        },
        "RenewalTerm": {
          "description": " The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`. **Required**: If TermType is Termed.\n**Character limit**: 20 **Values**: one of the following:\n\n- leave null to default to `0`\n- any number\n",
          "format": "int32",
          "type": "integer"
        },
        "RenewalTermPeriodType": {
          "description": " The period type for the subscription renewal term.\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n**Note**:\n\n- This field is used with the RenewalTerm field to specify the subscription renewal term.\n- This field can be updated when Status is `Draft`.\n",
          "type": "string"
        },
        "ServiceActivationDate": {
          "description": " The date when the subscription is activated. This field can be updated when **Status** is `Draft`.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "Status": {
          "description": " The status of the subscription.\n**Character limit**: 17 **Values**: automatically generated **Possible values**: one of the following:\n\n- `Draft`\n- `PendingActivation`\n- `PendingAcceptance`\n- `Active`\n- `Cancelled`\n- `Expired`\n- `Suspended` (This value is in **Limited Availability**.)\n",
          "type": "string"
        },
        "TermStartDate": {
          "description": " This field can be updated when **Status** is `Draft`. The date when the subscription term begins. If this is a renewal subscription, then this date is different from the subscription start date.\n**Character limit**: 29 **Version notes**: -- ",
          "format": "date",
          "type": "string"
        },
        "TermType": {
          "description": " This field can be updated when **Status** is `Draft`. Indicates if a subscription is termed or evergreen.\n**Character limit**: 9 **Values**: `TERMED`, `EVERGREEN` ",
          "type": "string"
        },
        "Version": {
          "description": " The version number of the subscription.\n**Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProxyModifyTaxationItem": {
      "properties": {
        "AccountingCode": {
          "description": " The Chart of Accounts ",
          "type": "string"
        },
        "ExemptAmount": {
          "description": " The amount of taxes or VAT for which the customer has an exemption.\n**Character limit**: 16 **Values**: a decimal value ",
          "format": "double",
          "type": "number"
        },
        "Jurisdiction": {
          "description": " The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n**Character limit**: 32 **Values**: a string of 32 characterrs or fewer ",
          "type": "string"
        },
        "LocationCode": {
          "description": " The identifier for the location based on the value of the `TaxCode` field.\n**Character limit**: 32 **Values**: automatically generated ",
          "type": "string"
        },
        "Name": {
          "description": " The name of the tax rate, such as sales tax or GST. This name is displayed on invoices.\n**Character limit**: 128 **Values**: a string of 128 characters or fewer ",
          "type": "string"
        },
        "TaxAmount": {
          "description": " The amount of the tax applied to the charge.\n**Character limit**: 16 **Values**: a decimal value ",
          "format": "double",
          "type": "number"
        },
        "TaxCode": {
          "description": " The tax code identifies which tax rules and tax rates to apply to a specific charge.\n**Character limit**: 32 **Values**: a string of 32 characters or fewer ",
          "type": "string"
        },
        "TaxCodeDescription": {
          "description": " The description for the tax code.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "TaxDate": {
          "description": " The date that the tax is applied to the charge, in `yyyy-mm-dd` format.\n**Character limit**: 29 ",
          "format": "date",
          "type": "string"
        },
        "TaxRate": {
          "description": " The tax rate applied to the charge.\n**Character limit**: 16 **Values**: a valid decimal value ",
          "format": "double",
          "type": "number"
        },
        "TaxRateDescription": {
          "description": " The description of the tax rate.\n**Character limit**: 255 **Values**: a string of 255 characters or fewer ",
          "type": "string"
        },
        "TaxRateType": {
          "description": " The type of the tax rate applied to the charge.\n**Character limit**: 10 **Values**: `Percentage`, `FlatFee` ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyUnitOfMeasure": {
      "properties": {
        "Active": {
          "description": " Indicates if the UOM is available for new product rate plans. The default value is `true`.\n**Character limit**: 5 **Values**: `true`, `false ` ",
          "type": "boolean"
        },
        "DecimalPlaces": {
          "description": "The number of digits to the right of the decimal point that you want to measure for the unit. To use whole numbers only, set this value to 0. You can't change this value after this `UOM` is used in any product, subscription, or usage. **Character limit**: 1 **Values**: an integer between 0 and 9, exclusive ",
          "format": "int64",
          "type": "integer"
        },
        "DisplayedAs": {
          "description": "The name of the UOM that you want displayed on invoices. The default value is the `UomName` field value. **Character limit**: 50 **Values**: A string of 50 characters or fewer ",
          "type": "string"
        },
        "RoundingMode": {
          "description": " Specifies whether to round the UOM value up or down when the value exceeds the `DecimalPlaces` field value. The default value is `Up`.\n**Character limit**: 4 **Values**: `Up`, `Down` ",
          "type": "string"
        },
        "UomName": {
          "description": " The name of the UOM, such as license or GB. This name is displayed in query results and in the web-based UI labels. If you want a different name to be displayed on invoices, then use the `DisplayedAs` field to provide the invoice label.\n**Character limit**: 50 **Values**: a string of 50 characters or fewer ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyModifyUsage": {
      "properties": {
        "EndDateTime": {
          "description": " The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation.\n**Character limit**: 29 **Values**: a valid date and time value ",
          "format": "date-time",
          "type": "string"
        },
        "Quantity": {
          "description": " Indicates the number of units used.\n**Character limit**: 16 **Values**: a valid decimal amount equal to or greater than 0 ",
          "format": "double",
          "type": "number"
        },
        "RbeStatus": {
          "description": " Indicates if the rating and billing engine (RBE) processed usage data for an invoice.\n**Character limit**: 9 **Values**: automatically generated to be one of the following values: `Importing`, `Pending`, `Processed` ",
          "type": "string"
        },
        "StartDateTime": {
          "description": " The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation.\n**Character limit**: 29 **Values**: a valid date and time value ",
          "format": "date-time",
          "type": "string"
        },
        "SubmissionDateTime": {
          "description": " The date when usage was submitted.\n**Character limit**: 29 **Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "UOM": {
          "description": " Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.\n**Character limit**: **Values**: a valid unit of measure ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyNoDataResponse": {
      "properties": {
        "done": {
          "description": "",
          "type": "boolean"
        },
        "records": {
          "description": "",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "size": {
          "description": "",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PutCreditMemoTaxItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the taxation item in the credit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the taxation item in the credit memo item.\n",
          "properties": {
            "onAccountAccountingCode": {
              "description": "The accounting code that maps to an on account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the taxation item in the credit memo item.\n",
          "type": "string"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific credit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "taxExemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "taxName": {
          "description": "The name of taxation.\n",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the credit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate. \n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the credit memo.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "taxItems",
      "type": "object"
    },
    "PutDebitMemoTaxItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the taxation item in the debit memo item.\n",
          "format": "double",
          "type": "number"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the taxation item in the debit memo item.\n",
          "properties": {
            "salesTaxPayableAccountingCode": {
              "description": "The accounting code for the sales taxes payable.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": {
          "description": "The ID of the taxation item in the debit memo item.\n",
          "type": "string"
        },
        "jurisdiction": {
          "description": "The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.\n",
          "type": "string"
        },
        "locationCode": {
          "description": "The identifier for the location based on the value of the `taxCode` field.\n",
          "type": "string"
        },
        "taxCode": {
          "description": "The tax code identifies which tax rules and tax rates to apply to a specific debit memo.\n",
          "type": "string"
        },
        "taxCodeDescription": {
          "description": "The description of the tax code.\n",
          "type": "string"
        },
        "taxDate": {
          "description": "The date that the tax is applied to the debit memo, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "taxExemptAmount": {
          "description": "The amount of taxes or VAT for which the customer has an exemption.\n",
          "format": "double",
          "type": "number"
        },
        "taxName": {
          "description": "The name of taxation.\n",
          "type": "string"
        },
        "taxRate": {
          "description": "The tax rate applied to the debit memo.\n",
          "format": "double",
          "type": "number"
        },
        "taxRateDescription": {
          "description": "The description of the tax rate.\n",
          "type": "string"
        },
        "taxRateType": {
          "description": "The type of the tax rate applied to the debit memo.\n",
          "enum": [
            "Percentage",
            "FlatFee"
          ],
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "taxItems",
      "type": "object"
    },
    "PutReverseInvoiceResponseType": {
      "properties": {
        "creditMemo": {
          "description": "Container for the credit memo that is auto-generated when reversing invoices.\n",
          "properties": {
            "id": {
              "description": "ID of the credit memo.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PutReverseInvoiceType": {
      "example": {
        "applyEffectiveDate": "2017-02-20",
        "memoDate": "2017-02-20"
      },
      "properties": {
        "applyEffectiveDate": {
          "description": "The date when the credit memo was applied to the invoice that will be reversed, in `yyyy-mm-dd` format. The effective date must be later than or equal to the memo date.\n\nDefault value is today's date.\n",
          "format": "date",
          "type": "string"
        },
        "memoDate": {
          "description": "The date when the credit memo was created, in `yyyy-mm-dd` format. The memo date must be later than or equal to the invoice date.\n\nDefault value is today's date.\n",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RatePlan": {
      "properties": {
        "AmendmentId": {
          "description": " The ID of the amendment associated with the rate plan. This field only applies to amendment rate plans.\n\n\n**Character limit**: 32\n\n**Values**: a valid amendment ID ",
          "type": "string"
        },
        "AmendmentSubscriptionRatePlanId": {
          "description": "The ID of the subscription rate plan modified by the amendment. This field only applies to amendment rate plans.\n\n**Character limit**: 32\n\n**Values**: a valid rate plan ID ",
          "type": "string"
        },
        "AmendmentType": {
          "description": "The type of amendment associated with the rate plan. This field only applies to amendment rate plans.\n\n**Character limit**: 18\n\n**Values**: inherited from `Amendment.Type` ",
          "type": "string"
        },
        "CreatedById": {
          "description": "The ID of the Zuora user who created the RatePlan object.\n\n**Character limit**: 32\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": "The date when the `RatePlan` object was last updated.\n\n**Character limit**: 29\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "description": "The name of the rate plan. Leave this null in a subscribe call to inherited the `ProductRatePlan.Name` field value.\n\n**Character limit**: 100\n\n**Values**: a string of 100 characters or fewer or inherited from ProductRatePlan.Name ",
          "type": "string"
        },
        "ProductRatePlanId": {
          "description": "The ID of the associated product rate plan.\n\n**Character limit**: 32\n\n**Values**: a valid product rate plan ID ",
          "type": "string"
        },
        "SubscriptionId": {
          "description": "The ID of the subscription that the rate plan belongs to.\n\n**Character limit**: 32\n\n**Values**: a valid subscription ID ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " The ID of the user who last updated the rate plan.\n\n\n**Character limit**: 32\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the rate plan was last updated.\n\n\n**Character limit**: 29\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "ProductRatePlanId"
      ],
      "type": "object"
    },
    "RatePlanChargeData": {
      "properties": {
        "RatePlanCharge": {
          "description": "",
          "properties": {
            "AccountingCode": {
              "description": "The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.\n\n**Character limit**: 100\n\n\n**Values**: inherited from `ProductRatePlanCharge.AccountingCode` ",
              "type": "string"
            },
            "ApplyDiscountTo": {
              "description": " Specifies the type of charges a specific discount applies to.\n\n**Character limit**: 21\n\n\n**Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo` ",
              "type": "string"
            },
            "BillCycleDay": {
              "description": " Indicates the charge's billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.\n\n\n**Character limit**: 2\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillCycleDay` ",
              "format": "int32",
              "type": "integer"
            },
            "BillCycleType": {
              "description": " Specifies how to determine the billing day for the charge.\n\n\n**Character limit**: 20\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "type": "string"
            },
            "BillingPeriod": {
              "description": " Allows billing period to be overridden on rate plan charge.\n\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "type": "string"
            },
            "BillingPeriodAlignment": {
              "description": " Aligns charges within the same subscription if multiple charges begin on different dates.\n\n\n**Character limit**: 24\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment` ",
              "type": "string"
            },
            "BillingTiming": {
              "description": " The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.\n\n\n**Character limit**:\n\n\n**Values**: one of the following:\n\n- I`n Advance`\n- `In Arrears`\n**Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n",
              "type": "string"
            },
            "ChargeModel": {
              "description": " Determines how to evaluate charges. Charge models must be individually activated in the web-based UI.\n\n\n**Character limit**: 29\n\n\n**Values**: inherited from `ProductRatePlanCharge.ChargeModel` ",
              "type": "string"
            },
            "ChargeNumber": {
              "description": " A unique number that identifies the charge. This number is returned as a string.\n\n\n**Character limit**: 50\n\n\n**Values**: one of the following:\n\n- automatically generated if left null\n- a unique number of 50 characters or fewer\n",
              "type": "string"
            },
            "ChargeType": {
              "description": " Specifies the type of charge.\n\n\n**Character limit**: 9\n\n\n**Values**: inherited from `ProductRatePlanCharge.ChargeType` ",
              "type": "string"
            },
            "ChargedThroughDate": {
              "description": " The date through which a customer has been billed for the charge.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "CreatedById": {
              "description": "The ID of the Zuora user who created the `RatePlanCharge` object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreatedDate": {
              "description": " The date when the `RatePlanCharge` object was created.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "DMRC": {
              "description": "A delta monthly recurring charge is the change in monthly recurring revenue caused by an amendment or a new subscription.\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "DTCV": {
              "description": " After an Amendment, the change in the total contract value (TCV) amount for this charge, compared with its previous value.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "Description": {
              "description": " A description of the charge.\n\n\n**Character limit**: 500\n\n\n**Values**: inherited from `ProductRatePlanCharge.Description` ",
              "type": "string"
            },
            "DiscountAmount": {
              "description": " Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:\n\n- Price\n- IncludedUnits\n- DiscountPercentage\n- OveragePrice\n\n\n**Character limit**: 16\n\n\n**Values**: a valid currency amount ",
              "format": "double",
              "type": "number"
            },
            "DiscountLevel": {
              "description": "Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. This field is only required if the `ChargeModel` field is set to `DiscountFixedAmount` or `DiscountPercentage`.\n\n**Character limit**: 12\n\n\n**Values**: inherited from `ProductRatePlanCharge.DiscountLevel` ",
              "type": "string"
            },
            "DiscountPercentage": {
              "description": " Query Filter ",
              "format": "double",
              "type": "number"
            },
            "EffectiveEndDate": {
              "description": " The date when the segmented charge ends or ended.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "EffectiveStartDate": {
              "description": " The date when the segmented charge starts or started.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "EndDateCondition": {
              "description": " Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.\n\n\n\n**Values**: one of the following:\n\n- `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value.\n- `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields.\n- `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.\n\n\n\n**Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date. ",
              "type": "string"
            },
            "IncludedUnits": {
              "description": " Query Filter ",
              "format": "double",
              "type": "number"
            },
            "IsLastSegment": {
              "description": "Indicates if the segment of the rate plan charge is the most recent segment.\n\n**Character limit**: 5\n\n\n**Values**: automatically generated: `true`, `false` ",
              "type": "boolean"
            },
            "ListPriceBase": {
              "description": "The list price base for the product rate plan charge.\n\n\n**Values**: one of the following:\n\n- `Per Month`\n- `Per Billing Period`\n- `Per Week`\n",
              "type": "string"
            },
            "MRR": {
              "description": "Monthly recurring revenue (MRR) is the amount of recurring charges in a given month. The MRR calculation doesn't include one-time charges nor usage charges.\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "Name": {
              "description": "The name of the rate plan charge.\n\n**Character limit**: 100\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "NumberOfPeriods": {
              "description": "Specifies the number of periods to use when calculating charges in an overage smoothing charge model.\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod` ",
              "format": "int64",
              "type": "integer"
            },
            "OriginalId": {
              "description": "The original ID of the rate plan charge.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "OverageCalculationOption": {
              "description": "Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored.\n\n**Character limit**: 20\n\n\n**Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption` ",
              "type": "string"
            },
            "OveragePrice": {
              "description": " Query Filter ",
              "format": "double",
              "type": "number"
            },
            "OverageUnusedUnitsCreditOption": {
              "description": " Determines whether to credit the customer with unused units of usage.\n\n\n**Character limit**: 20\n\n\n**Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption` ",
              "type": "string"
            },
            "Price": {
              "description": " Query Filter ",
              "format": "double",
              "type": "number"
            },
            "PriceChangeOption": {
              "description": " Applies an automatic price change when a termed subscription is renewed.\n\n\n**Character limit**:\n\n\n**Values**: one of the following:\n\n- `NoChange` (default)\n- `SpecificPercentageValue`\n- `UseLatestProductCatalogPricing`\n",
              "type": "string"
            },
            "PriceIncreasePercentage": {
              "description": " Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.\n\n\n**Character limit**: 16\n\n\n**Values**: a decimal value between -100 and 100 ",
              "format": "double",
              "type": "number"
            },
            "ProcessedThroughDate": {
              "description": " The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "ProductRatePlanChargeId": {
              "description": " The ID of the product rate plan charge associated with the subscription rate plan charge,\n\n**Character limit**: 32\n\n\n**Values**: inherited from `ProductRatePlanCharge.Id` ",
              "type": "string"
            },
            "Quantity": {
              "description": " The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.\n\n\n**Character limit**: 16\n\n\n**Values**: a valid quantity value ",
              "format": "double",
              "type": "number"
            },
            "RatePlanId": {
              "description": " The ID of the rate plan associated with the rate plan charge.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `RatePlan.Id` ",
              "type": "string"
            },
            "RevRecCode": {
              "description": " Associates this product rate plan charge with a specific revenue recognition code.\n\n\n**Character limit**: 70\n\n\n**Values**: a valid revenue recognition code ",
              "type": "string"
            },
            "RevRecTriggerCondition": {
              "description": " Specifies when revenue recognition begins.\n\n\n**Character limit**: 22\n\n\n**Values**: one of the following:\n\n-  `ContractEffectiveDate`\n\n-  `ServiceActivationDate`\n\n-  `CustomerAcceptanceDate`\n\n",
              "type": "string"
            },
            "RevenueRecognitionRuleName": {
              "description": " Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend\ncalls, you can use this field only for NewProduct amendments. For Update\ncalls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.\n\n\n\n**Character limit**: n/a\n\n\n**Values**: name of an active Revenue Recognition Rule ",
              "type": "string"
            },
            "RolloverBalance": {
              "description": " Specifies the number of units of measure (UOM) rolled over from previous periods. This field is applicable only to usage charges with overage models.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated\n\n**Note**:\n\n- You cannot query or filter this field with other fields in a single query.\n- To query or filter this field, you must specify and only specify the rate plan charge Id in the condition.\n- You cannot use this field in the query or filter condition.\n",
              "format": "double",
              "type": "number"
            },
            "Segment": {
              "description": " The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.\n\n\n**Character limit**: 2\n\n\n**Values**: automatically generated ",
              "format": "int32",
              "type": "integer"
            },
            "SpecificBillingPeriod": {
              "description": " Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "format": "int64",
              "type": "integer"
            },
            "SpecificEndDate": {
              "description": " The specific date on which the charge ends, in `yyyy-mm-dd` format.\n\n\n**Character limit**: 29\n\n\n\n**Note**:\n\n- This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.\n- If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.\n",
              "format": "date",
              "type": "string"
            },
            "TCV": {
              "description": " The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "TriggerDate": {
              "description": " The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.\n\n\n**Character limit**: 29\n\n",
              "format": "date",
              "type": "string"
            },
            "TriggerEvent": {
              "description": " Specifies when to start billing the customer for the charge.\n**Note: **This field can be passed through the subscribe\nand amend\ncalls and will override the default value set on the Product Rate Plan Charge.\n\n\n**Character limit**: 18\n\n\n**Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:\n\n- `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed.\n- `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access.\n- `CustomerAcceptance `is when the customer accepts the services or products for a subscription.\n- SpecificDate is valid only on the RatePlanCharge.\n",
              "type": "string"
            },
            "UOM": {
              "description": " Specifies the units to measure usage. Units of measure are configured in the web-based UI: **Z-Billing > Settings**.\n\n\n**Character limit**: 25\n\n\n**Values**: inherited from `ProductRatePlanCharge.UOM` ",
              "type": "string"
            },
            "UnusedUnitsCreditRates": {
              "description": " Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the `OverageUnusedUnitsCreditOption` field value is CreditBySpecificRate.\n\n\n**Character limit**: 16\n\n\n**Values**: a valid decimal value ",
              "format": "double",
              "type": "number"
            },
            "UpToPeriods": {
              "description": " Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.\n\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.UpToPeriods`\n\n**Note**:\n\n- You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n- You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.\n- Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.\n- If you override the value in this field, enter a whole number between 0 and 65535, exclusive.\n- If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.\n",
              "format": "int64",
              "type": "integer"
            },
            "UpToPeriodsType": {
              "description": " The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.\n\n\n**Values**: one of the following:\n\n- `Billing Periods` (default)\n- `Days`\n- `Weeks`\n- `Months`\n- `Years`\n\n\n**Note**:\n\n- You must use this field together with the `UpToPeriods` field to specify the time period.\n- This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n",
              "type": "string"
            },
            "UpdatedById": {
              "description": "The ID of the last user to update the object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UpdatedDate": {
              "description": " The date when the object was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "UsageRecordRatingOption": {
              "description": " Determines how Zuora processes usage records for per-unit usage charges.\n\n**Character limit**: 18\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UseDiscountSpecificAccountingCode": {
              "description": " Determines whether to define a new accounting code for the new discount charge.\n\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.UseDiscountSpecificAccountingCode` ",
              "type": "boolean"
            },
            "Version": {
              "description": " The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge.\n\n**Character limit**: 5\n\n\n**Values**: automatically generated ",
              "format": "int64",
              "type": "integer"
            },
            "WeeklyBillCycleDay": {
              "description": " Specifies which day of the week as the bill cycle day (BCD) for the charge.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n\n\n\n**Values**: one of the following:\n\n- `Sunday`\n- `Monday`\n- `Tuesday`\n- `Wednesday`\n- `Thursday`\n- `Friday`\n- `Saturday`\n",
              "type": "string"
            }
          },
          "required": [
            "ProductRatePlanChargeId"
          ],
          "type": "object"
        },
        "RatePlanChargeTier": {
          "description": "",
          "items": {
            "$ref": "#/definitions/RatePlanChargeTier"
          },
          "type": "array"
        }
      },
      "required": [
        "RatePlanCharge"
      ],
      "type": "object"
    },
    "RatePlanChargeDataInRatePlanData": {
      "properties": {
        "RatePlanCharge": {
          "description": "",
          "properties": {
            "AccountingCode": {
              "description": "The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.\n\n**Character limit**: 100\n\n\n**Values**: inherited from `ProductRatePlanCharge.AccountingCode` ",
              "type": "string"
            },
            "ApplyDiscountTo": {
              "description": " Specifies the type of charges a specific discount applies to.\n\n**Character limit**: 21\n\n\n**Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo` ",
              "type": "string"
            },
            "BillCycleDay": {
              "description": " Indicates the charge's billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.\n\n\n**Character limit**: 2\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillCycleDay` ",
              "format": "int32",
              "type": "integer"
            },
            "BillCycleType": {
              "description": " Specifies how to determine the billing day for the charge.\n\n\n**Character limit**: 20\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "type": "string"
            },
            "BillingPeriod": {
              "description": " Allows billing period to be overridden on rate plan charge.\n\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "type": "string"
            },
            "BillingPeriodAlignment": {
              "description": " Aligns charges within the same subscription if multiple charges begin on different dates.\n\n\n**Character limit**: 24\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment` ",
              "type": "string"
            },
            "BillingTiming": {
              "description": " The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.\n\n\n**Character limit**:\n\n\n**Values**: one of the following:\n\n- I`n Advance`\n- `In Arrears`\n**Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n",
              "type": "string"
            },
            "ChargeModel": {
              "description": " Determines how to evaluate charges. Charge models must be individually activated in the web-based UI.\n\n\n**Character limit**: 29\n\n\n**Values**: inherited from `ProductRatePlanCharge.ChargeModel` ",
              "type": "string"
            },
            "ChargeNumber": {
              "description": " A unique number that identifies the charge. This number is returned as a string.\n\n\n**Character limit**: 50\n\n\n**Values**: one of the following:\n\n- automatically generated if left null\n- a unique number of 50 characters or fewer\n",
              "type": "string"
            },
            "ChargeType": {
              "description": " Specifies the type of charge.\n\n\n**Character limit**: 9\n\n\n**Values**: inherited from `ProductRatePlanCharge.ChargeType` ",
              "type": "string"
            },
            "ChargedThroughDate": {
              "description": " The date through which a customer has been billed for the charge.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "CreatedById": {
              "description": "The ID of the Zuora user who created the `RatePlanCharge` object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreatedDate": {
              "description": " The date when the `RatePlanCharge` object was created.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "DMRC": {
              "description": "A delta monthly recurring charge is the change in monthly recurring revenue caused by an amendment or a new subscription.\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "DTCV": {
              "description": " After an Amendment, the change in the total contract value (TCV) amount for this charge, compared with its previous value.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "Description": {
              "description": " A description of the charge.\n\n\n**Character limit**: 500\n\n\n**Values**: inherited from `ProductRatePlanCharge.Description` ",
              "type": "string"
            },
            "DiscountAmount": {
              "description": " Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:\n\n- Price\n- IncludedUnits\n- DiscountPercentage\n- OveragePrice\n\n\n**Character limit**: 16\n\n\n**Values**: a valid currency amount ",
              "format": "double",
              "type": "number"
            },
            "DiscountLevel": {
              "description": "Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. This field is only required if the `ChargeModel` field is set to `DiscountFixedAmount` or `DiscountPercentage`.\n\n**Character limit**: 12\n\n\n**Values**: inherited from `ProductRatePlanCharge.DiscountLevel` ",
              "type": "string"
            },
            "DiscountPercentage": {
              "description": " Query Filter ",
              "format": "double",
              "type": "number"
            },
            "EffectiveEndDate": {
              "description": " The date when the segmented charge ends or ended.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "EffectiveStartDate": {
              "description": " The date when the segmented charge starts or started.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "EndDateCondition": {
              "description": " Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.\n\n\n\n**Values**: one of the following:\n\n- `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value.\n- `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields.\n- `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.\n\n\n\n**Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date. ",
              "type": "string"
            },
            "IncludedUnits": {
              "description": " Query Filter ",
              "format": "double",
              "type": "number"
            },
            "IsLastSegment": {
              "description": "Indicates if the segment of the rate plan charge is the most recent segment.\n\n**Character limit**: 5\n\n\n**Values**: automatically generated: `true`, `false` ",
              "type": "boolean"
            },
            "ListPriceBase": {
              "description": "The list price base for the product rate plan charge.\n\nYou can only change the value of this field if the amendment type is NewProduct.\n\n**Values**: one of the following:\n\n- `Per Month`\n- `Per Billing Period`\n- `Per Week`\n",
              "type": "string"
            },
            "MRR": {
              "description": "Monthly recurring revenue (MRR) is the amount of recurring charges in a given month. The MRR calculation doesn't include one-time charges nor usage charges.\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "Name": {
              "description": "The name of the rate plan charge.\n\n**Character limit**: 100\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "NumberOfPeriods": {
              "description": "Specifies the number of periods to use when calculating charges in an overage smoothing charge model.\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod` ",
              "format": "int64",
              "type": "integer"
            },
            "OriginalId": {
              "description": "The original ID of the rate plan charge.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "OverageCalculationOption": {
              "description": "Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored.\n\n**Character limit**: 20\n\n\n**Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption` ",
              "type": "string"
            },
            "OveragePrice": {
              "description": " Query Filter ",
              "format": "double",
              "type": "number"
            },
            "OverageUnusedUnitsCreditOption": {
              "description": " Determines whether to credit the customer with unused units of usage.\n\n\n**Character limit**: 20\n\n\n**Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption` ",
              "type": "string"
            },
            "Price": {
              "description": " Query Filter ",
              "format": "double",
              "type": "number"
            },
            "PriceChangeOption": {
              "description": " Applies an automatic price change when a termed subscription is renewed.\n\n\n**Character limit**:\n\n\n**Values**: one of the following:\n\n- `NoChange` (default)\n- `SpecificPercentageValue`\n- `UseLatestProductCatalogPricing`\n",
              "type": "string"
            },
            "PriceIncreasePercentage": {
              "description": " Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.\n\n\n**Character limit**: 16\n\n\n**Values**: a decimal value between -100 and 100 ",
              "format": "double",
              "type": "number"
            },
            "ProcessedThroughDate": {
              "description": " The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "ProductRatePlanChargeId": {
              "description": " The ID of the product rate plan charge associated with the subscription rate plan charge,\n\n**Character limit**: 32\n\n\n**Values**: inherited from `ProductRatePlanCharge.Id` ",
              "type": "string"
            },
            "Quantity": {
              "description": " The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.\n\n\n\n**Character limit**: 16\n\n\n**Values**: a valid quantity value ",
              "format": "double",
              "type": "number"
            },
            "RatePlanId": {
              "description": " The ID of the rate plan associated with the rate plan charge.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `RatePlan.Id` ",
              "type": "string"
            },
            "RevRecCode": {
              "description": " Associates this product rate plan charge with a specific revenue recognition code.\n\n\n**Character limit**: 70\n\n\n**Values**: a valid revenue recognition code ",
              "type": "string"
            },
            "RevRecTriggerCondition": {
              "description": " Specifies when revenue recognition begins.\n\n\n**Character limit**: 22\n\n\n**Values**: one of the following:\n\n-  `ContractEffectiveDate`\n\n-  `ServiceActivationDate`\n\n-  `CustomerAcceptanceDate`\n\n",
              "type": "string"
            },
            "RevenueRecognitionRuleName": {
              "description": " Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend\ncalls, you can use this field only for NewProduct amendments. For Update\ncalls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.\n\n\n\n**Character limit**: n/a\n\n\n**Values**: name of an active Revenue Recognition Rule ",
              "type": "string"
            },
            "RolloverBalance": {
              "description": " Specifies the number of units of measure (UOM) rolled over from previous periods. This field is applicable only to usage charges with overage models.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated\n\n**Note**:\n\n- You cannot query or filter this field with other fields in a single query.\n- To query or filter this field, you must specify and only specify the rate plan charge Id in the condition.\n- You cannot use this field in the query or filter condition.\n",
              "format": "double",
              "type": "number"
            },
            "Segment": {
              "description": " The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.\n\n\n**Character limit**: 2\n\n\n**Values**: automatically generated ",
              "format": "int32",
              "type": "integer"
            },
            "SpecificBillingPeriod": {
              "description": " Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.\n\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. ",
              "format": "int64",
              "type": "integer"
            },
            "SpecificEndDate": {
              "description": " The specific date on which the charge ends, in `yyyy-mm-dd` format.\n\n\n**Character limit**: 29\n\n\n\n**Note**:\n\n- This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.\n- If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.\n",
              "format": "date",
              "type": "string"
            },
            "TCV": {
              "description": " The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.\n\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "TriggerDate": {
              "description": " The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.\n\n\n**Character limit**: 29\n\n",
              "format": "date",
              "type": "string"
            },
            "TriggerEvent": {
              "description": " Specifies when to start billing the customer for the charge.\n**Note: **This field can be passed through the subscribe\nand amend\ncalls and will override the default value set on the Product Rate Plan Charge.\n\n\n**Character limit**: 18\n\n\n**Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:\n\n- `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed.\n- `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access.\n- `CustomerAcceptance `is when the customer accepts the services or products for a subscription.\n- SpecificDate is valid only on the RatePlanCharge.\n",
              "type": "string"
            },
            "UOM": {
              "description": " Specifies the units to measure usage. Units of measure are configured in the web-based UI: **Z-Billing > Settings**.\n\n\n**Character limit**: 25\n\n\n**Values**: inherited from `ProductRatePlanCharge.UOM` ",
              "type": "string"
            },
            "UnusedUnitsCreditRates": {
              "description": " Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the `OverageUnusedUnitsCreditOption` field value is CreditBySpecificRate.\n\n\n**Character limit**: 16\n\n\n**Values**: a valid decimal value ",
              "format": "double",
              "type": "number"
            },
            "UpToPeriods": {
              "description": " Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.\n\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.UpToPeriods`\n\n**Note**:\n\n- You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n- You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.\n- Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.\n- If you override the value in this field, enter a whole number between 0 and 65535, exclusive.\n- If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.\n",
              "format": "int64",
              "type": "integer"
            },
            "UpToPeriodsType": {
              "description": " The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.\n\n\n**Values**: one of the following:\n\n- `Billing Periods` (default)\n- `Days`\n- `Weeks`\n- `Months`\n- `Years`\n\n\n**Note**:\n\n- You must use this field together with the `UpToPeriods` field to specify the time period.\n- This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.\n",
              "type": "string"
            },
            "UpdatedById": {
              "description": "The ID of the last user to update the object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UpdatedDate": {
              "description": " The date when the object was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "UsageRecordRatingOption": {
              "description": " Determines how Zuora processes usage records for per-unit usage charges.\n\n**Character limit**: 18\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UseDiscountSpecificAccountingCode": {
              "description": " Determines whether to define a new accounting code for the new discount charge.\n\n\n**Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.UseDiscountSpecificAccountingCode` ",
              "type": "boolean"
            },
            "Version": {
              "description": " The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge.\n\n**Character limit**: 5\n\n\n**Values**: automatically generated ",
              "format": "int64",
              "type": "integer"
            },
            "WeeklyBillCycleDay": {
              "description": " Specifies which day of the week as the bill cycle day (BCD) for the charge.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n\n\n\n**Values**: one of the following:\n\n- `Sunday`\n- `Monday`\n- `Tuesday`\n- `Wednesday`\n- `Thursday`\n- `Friday`\n- `Saturday`\n",
              "type": "string"
            }
          },
          "required": [
            "ProductRatePlanChargeId"
          ],
          "type": "object"
        },
        "RatePlanChargeTier": {
          "description": "",
          "items": {
            "$ref": "#/definitions/RatePlanChargeTier"
          },
          "type": "array"
        }
      },
      "required": [
        "RatePlanCharge"
      ],
      "title": "RatePlanChargeData",
      "type": "object"
    },
    "RatePlanChargeTier": {
      "properties": {
        "CreatedById": {
          "description": "The ID of the Zuora user who created the RatePlanChargeTier object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "CreatedDate": {
          "description": " The date when the RatePlanChargeTier object was created.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        },
        "EndingUnit": {
          "description": " The end number of a range of units for the tier. This field is only required if the charge mode is `Tiered Pricing` or `Tierred with Overage Pricing`.\n\n\n**Character limit**: 16\n\n\n**Values**: any positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "IsOveragePrice": {
          "description": " Indicates if the price is an overage price. An overage occurs when usage surpasses the last defined tier. This field is applicable only to tier pricing and volume pricing models.\n\n\n\n**Values**: true, false ",
          "type": "boolean"
        },
        "Price": {
          "description": " The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the change model is tiered pricing.\n\n\n**Character limit**: 16\n\n\n**Values**: any positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "PriceFormat": {
          "description": " Indicates if the price is a flat fee or is per unit.\n\n\n**Character limit**: 8\n\n\n**Values**: `Flat Fee`, `Per Unit` ",
          "type": "string"
        },
        "RatePlanChargeId": {
          "description": " The ID of the subscription or amendment rate plan charge associated with this tier. You can't create an unassociated tier.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `RatePlanCharge`.`Id` ",
          "type": "string"
        },
        "StartingUnit": {
          "description": " The start number of a range of units for the tier. This field is only required if the charge mode is `Tiered Pricing` or `Tierred with Overage Pricing`.\n\n\n**Character limit**: 16\n\n\n**Values**: any positive decimal value ",
          "format": "double",
          "type": "number"
        },
        "Tier": {
          "description": " A unique number that identifies the tier that the price applies to.\n\n\n**Character limit**: 20\n\n\n**Values**: automatically generated ",
          "format": "int32",
          "type": "integer"
        },
        "UpdatedById": {
          "description": "The ID of the last user to update the object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " The date when the object was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "RatePlanChargeId"
      ],
      "type": "object"
    },
    "RatePlanData": {
      "properties": {
        "RatePlan": {
          "description": "",
          "properties": {
            "AmendmentId": {
              "description": " The ID of the amendment associated with the rate plan. This field only applies to amendment rate plans.\n\n\n**Character limit**: 32\n\n\n**Values**: a valid amendment ID ",
              "type": "string"
            },
            "AmendmentSubscriptionRatePlanId": {
              "description": "The ID of the subscription rate plan modified by the amendment. This field only applies to amendment rate plans.\n\n**Character limit**: 32\n\n\n**Values**: a valid rate plan ID ",
              "type": "string"
            },
            "AmendmentType": {
              "description": "The type of amendment associated with the rate plan. This field only applies to amendment rate plans.\n\n**Character limit**: 18\n\n\n**Values**: inherited from `Amendment.Type` ",
              "type": "string"
            },
            "CreatedById": {
              "description": "The ID of the Zuora user who created the RatePlan object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreatedDate": {
              "description": "The date when the `RatePlan` object was last updated.\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "Name": {
              "description": "The name of the rate plan. Leave this null in a subscribe\ncall to inherited the `ProductRatePlan.Name` field value.\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer or inherited from ProductRatePlan.Name ",
              "type": "string"
            },
            "ProductRatePlanId": {
              "description": "The ID of the associated product rate plan.\n\n**Character limit**: 32\n\n\n**Values**: a valid product rate plan ID ",
              "type": "string"
            },
            "SubscriptionId": {
              "description": "The ID of the subscription that the rate plan belongs to.\n\n**Character limit**: 32\n\n\n**Values**: a valid subscription ID ",
              "type": "string"
            },
            "UpdatedById": {
              "description": " The ID of the user who last updated the rate plan.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UpdatedDate": {
              "description": " The date when the rate plan was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "ProductRatePlanId"
          ],
          "type": "object"
        },
        "RatePlanChargeData": {
          "description": "",
          "items": {
            "$ref": "#/definitions/RatePlanChargeData"
          },
          "type": "array"
        },
        "SubscriptionProductFeatureList": {
          "description": "",
          "properties": {
            "SubscriptionProductFeature": {
              "description": "",
              "items": {
                "$ref": "#/definitions/SubscriptionProductFeature"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "RatePlan"
      ],
      "type": "object"
    },
    "RatePlanOverride": {
      "description": "The JSON object containing the information related to the 'AddProduct' type of request.",
      "properties": {
        "chargeOverrides": {
          "items": {
            "$ref": "#/definitions/ChargeOverride"
          },
          "type": "array"
        },
        "customFields": {
          "$ref": "#/definitions/CustomFields"
        },
        "productRatePlanId": {
          "type": "string"
        },
        "uniqueToken": {
          "description": "A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.",
          "maxLength": 50,
          "type": "string"
        }
      },
      "required": [
        "productRatePlanId"
      ],
      "type": "object"
    },
    "RatePlanUpdate": {
      "description": "The JSON object containing the information for the 'UpdateProduct' type order action.",
      "properties": {
        "chargeUpdates": {
          "items": {
            "$ref": "#/definitions/ChargeUpdate"
          },
          "type": "array"
        },
        "customFields": {
          "$ref": "#/definitions/CustomFields"
        },
        "ratePlanId": {
          "description": "The id of the rate plan to be updated. It can be the latest version or any history version id.\n",
          "type": "string"
        },
        "specificUpdateDate": {
          "description": "Used for the 'update before update' and 'update before remove' cases.",
          "format": "date",
          "type": "string"
        },
        "uniqueToken": {
          "description": "A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RatedItem": {
      "properties": {
        "amount": {
          "format": "BigDecimal",
          "type": "number"
        },
        "serviceEndDate": {
          "format": "date",
          "type": "string"
        },
        "serviceStartDate": {
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecurringFlatFeePricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPrice": {
              "format": "BigDecimal",
              "type": "number"
            },
            "listPriceBase": {
              "enum": [
                "Per_Billing_Period",
                "Per_Month",
                "Per_Week"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "RecurringFlatFeePricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPrice": {
              "format": "BigDecimal",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "RecurringPerUnitPricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPrice": {
              "format": "BigDecimal",
              "type": "number"
            },
            "listPriceBase": {
              "enum": [
                "Per_Billing_Period",
                "Per_Month",
                "Per_Week"
              ],
              "type": "string"
            },
            "quantity": {
              "format": "BigDecimal",
              "minimum": 0,
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "RecurringPerUnitPricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPrice": {
              "format": "BigDecimal",
              "type": "number"
            },
            "quantity": {
              "format": "BigDecimal",
              "minimum": 0,
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "RecurringTieredPricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPriceBase": {
              "enum": [
                "Per_Billing_Period",
                "Per_Month",
                "Per_Week"
              ],
              "type": "string"
            },
            "quantity": {
              "format": "BigDecimal",
              "minimum": 0,
              "type": "number"
            },
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "RecurringTieredPricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "quantity": {
              "format": "BigDecimal",
              "minimum": 0,
              "type": "number"
            },
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "RecurringVolumePricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPriceBase": {
              "enum": [
                "Per_Billing_Period",
                "Per_Month",
                "Per_Week"
              ],
              "type": "string"
            },
            "quantity": {
              "format": "BigDecimal",
              "minimum": 0,
              "type": "number"
            },
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "RecurringVolumePricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "quantity": {
              "format": "BigDecimal",
              "minimum": 0,
              "type": "number"
            },
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "RefundCreditMemoItemType": {
      "properties": {
        "amount": {
          "description": "The amount of the refund on the specific item.\n",
          "format": "double",
          "type": "number"
        },
        "creditMemoItemId": {
          "description": "The ID of the credit memo item that is refunded.\n",
          "type": "string"
        },
        "creditTaxItemId": {
          "description": "The ID of the credit memo taxation item that is refunded.\n",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "title": "items",
      "type": "object"
    },
    "RefundInvoicePayment": {
      "properties": {
        "InvoiceId": {
          "description": "The ID of the invoice that the payment is applied to.\n",
          "type": "string"
        },
        "RefundAmount": {
          "description": "The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.\n",
          "format": "decimal",
          "type": "string"
        }
      },
      "required": [
        "InvoiceId",
        "RefundAmount"
      ],
      "type": "object"
    },
    "RefundPartResponseType": {
      "properties": {
        "amount": {
          "description": "The amount of the refund part.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the refund part.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the refund part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The ID of the credit memo associated with the refund part.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the refund part.\n",
          "type": "string"
        },
        "paymentId": {
          "description": "The ID of the payment associated with the refund part.\n",
          "type": "string"
        },
        "success": {
          "description": "Returns `true` if the request was processed successfully.",
          "type": "boolean"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the refund part.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the refund part was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RefundPartResponseTypewithSuccess": {
      "properties": {
        "amount": {
          "description": "The amount of the refund part.\n",
          "format": "double",
          "type": "number"
        },
        "createdById": {
          "description": "The ID of the Zuora user who created the refund part.\n",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time when the refund part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n",
          "format": "date-time",
          "type": "string"
        },
        "creditMemoId": {
          "description": "The ID of the credit memo associated with the refund part.\n",
          "type": "string"
        },
        "id": {
          "description": "The ID of the refund part.\n",
          "type": "string"
        },
        "paymentId": {
          "description": "The ID of the payment associated with the refund part.\n",
          "type": "string"
        },
        "updatedById": {
          "description": "The ID of the Zuora user who last updated the refund part.\n",
          "type": "string"
        },
        "updatedDate": {
          "description": "The date and time when the refund part was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.\n",
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "parts",
      "type": "object"
    },
    "RemoveProduct": {
      "description": "The JSON object containing the information for the 'RemoveProduct' type order action.",
      "properties": {
        "ratePlanId": {
          "description": "The origin rate plan id.\n",
          "type": "string"
        },
        "uniqueToken": {
          "description": "A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.A unique string in the order to represent the rate plan.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RenewalTerm": {
      "description": "The term of renewal. \n1. The startDate is not required for renewal terms. The default is the endDate of the previous term.\n2. Use the endDate or the period to specify the length of the term.\n",
      "properties": {
        "period": {
          "description": "Specify only when the renewalSetting is 'RENEW_WITH_SPECIFIC_TERM'.",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "periodType": {
          "description": "Specify only when the renewalSetting is 'RENEW_WITH_SPECIFIC_TERM'.",
          "enum": [
            "Month",
            "Year",
            "Day",
            "Week"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevenueScheduleItemType": {
      "properties": {
        "accountingPeriodName": {
          "description": "Name of the accounting period. The open-ended accounting period is named `Open-Ended`.\n",
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        }
      },
      "required": [
        "accountingPeriodName"
      ],
      "title": "revenueItems",
      "type": "object"
    },
    "SaveResult": {
      "properties": {
        "Errors": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "Id": {
          "description": "",
          "type": "string"
        },
        "Success": {
          "description": "",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SubscribeRequest": {
      "properties": {
        "Account": {
          "description": " This is the Account object containing the information for this particular subscription. It has all the information needed to create an account for a subscription.\n\n**Values:** A valid account.",
          "properties": {
            "AccountNumber": {
              "description": "Unique account number assigned to the account.\n\n**Character limit**: 50\n\n\n**Values**: one of the following:\n\n- null to auto-generate\n- a string of 50 characters or fewer that doesn't begin with the default account number prefix\n",
              "type": "string"
            },
            "AdditionalEmailAddresses": {
              "description": "List of additional email addresses to receive emailed invoices.\n\n**Character limit**: 120\n\n\n**Values**: comma-separated list of email addresses ",
              "type": "string"
            },
            "AllowInvoiceEdit": {
              "description": " Indicates if associated invoices can be edited.\n\n\n**Character limit**: 5\n\n\n**Values**: `true`, `false` (default if left null) ",
              "type": "boolean"
            },
            "AutoPay": {
              "description": " Indicates if future payments are automatically collected when they're due during a Payment Run.\n\n\n**Character limit**: 5\n\n\n**Values**: `true`, `false` (default) ",
              "type": "boolean"
            },
            "Balance": {
              "description": "Current outstanding balance for the account.\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "Batch": {
              "description": " Organizes your customer accounts into groups to optimize your billing and payment operations.\n\n\n**Character limit**: 20\n\n\n**Values**:any system-defined batch (`Batch1` - `Batch50 `or by name). ",
              "type": "string"
            },
            "BcdSettingOption": {
              "description": "Billing cycle day setting option.\n\n**Character limit**: 9\n\n\n**Values**: `AutoSet`, `ManualSet` ",
              "type": "string"
            },
            "BillCycleDay": {
              "description": "Billing cycle day (BCD) on which bill runs generate invoices for the account.\n\n**Character limit**: 2\n\n\n**Values**: any activated system-defined bill cycle day (`1` - `31`) ",
              "format": "int32",
              "type": "integer"
            },
            "BillToId": {
              "description": "ID of the person to bill for the account. This field is only required if the `Status` field is set to `Active`.\n\n**Character limit**: 32\n\n\n**Values**: a valid contact ID for the account ",
              "type": "string"
            },
            "CommunicationProfileId": {
              "description": "Associates the account with a specified communication profile.\n\n**Character limit**: 32\n\n\n**Values**: a valid communication profile ID ",
              "type": "string"
            },
            "CreatedById": {
              "description": "ID of the Zuora user who created the Account object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreatedDate": {
              "description": "Date when the Account object was created.\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "CreditBalance": {
              "description": "Total credit balance for the account.\n\n**Character limit**: 16\n\n\n**Values**: automatically generated ",
              "format": "double",
              "type": "number"
            },
            "CrmId": {
              "description": "CRM account ID for the account. A CRM is a customer relationship management system, such as Salesforce.com.\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "Currency": {
              "description": " Currency that the customer is billed in. See [a currency value defined in the Zuora Ui admin settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Customize_Currencies) ",
              "type": "string"
            },
            "CustomerServiceRepName": {
              "description": "Name of the account's customer service representative, if applicable.\n\n**Character limit**: 50\n\n\n**Values**: a string of 50 characters or fewer ",
              "type": "string"
            },
            "DefaultPaymentMethodId": {
              "description": "ID of the default payment method for the account. This field is only required if the `AutoPay` field is set to `true`.\n\n\n**Character limit**: 32\n\n\n**Values**: a valid ID for an existing payment method ",
              "type": "string"
            },
            "InvoiceDeliveryPrefsEmail": {
              "description": "Indicates if the customer wants to receive invoices through email.\n**Character limit**: 5\n\n\n**Values**: `true`, `false` (default if left null) ",
              "type": "boolean"
            },
            "InvoiceDeliveryPrefsPrint": {
              "description": "Indicates if the customer wants to receive printed invoices, such as through postal mail.\n\n**Character limit**: 5\n\n\n**Values**: `true`, `false` (default if left null) ",
              "type": "boolean"
            },
            "InvoiceTemplateId": {
              "description": "The ID of the invoice template. Each customer account can use a specific invoice template for invoice generation.\n\n**Character limit**: 32\n\n\n**Values**: a[ valid template ID configured in Z-Billing Settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Manage_Invoice_Rules_and_Templates) To find the ID of your current invoice template: In Zuora, navigate to **Settings > Z-Billing > Manage Invoice Rules and Templates** and click **Show Id **next to the template you want to use.\n\n\n",
              "type": "string"
            },
            "LastInvoiceDate": {
              "description": " The date when the previous invoice was generated for the account. The field value is null if no invoice has ever been generated for the account.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date",
              "type": "string"
            },
            "Name": {
              "description": "Name of the account as displayed in the Zuora UI.\n\n**Character limit**: 255\n\n\n**Values**: a string of 255 characters or fewer ",
              "type": "string"
            },
            "Notes": {
              "description": " Comments about the account.\n\n**Character limit**: 65,535\n\n\n**Values**: a string of 65,535 characters ",
              "type": "string"
            },
            "ParentId": {
              "description": "Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled.\n\n**Character limit**: 32\n\n\n**Values**: a valid account ID ",
              "type": "string"
            },
            "PaymentGateway": {
              "description": "Gateway used for processing electronic payments and refunds. This field is only required if there is no default payment gateway is defined in the tenant.\n\n**Character limit**: 40\n\n\n**Values**: one of the following:\n\n- a valid configured gateway name\n- Null to inherit the default value set in Z-Payment Settings\n",
              "type": "string"
            },
            "PaymentTerm": {
              "description": "Indicates when the customer pays for subscriptions.\n\n**Character limit**: 100\n\n\n**Values**: [a valid, active payment term defined in the web-based UI administrative settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Payment_Terms) ",
              "type": "string"
            },
            "PurchaseOrderNumber": {
              "description": "The number of the purchase order associated with this account. Purchase order information generally comes from customers.\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "SalesRepName": {
              "description": "The name of the sales representative associated with this account, if applicable.\n\n**Character limit**: 50\n\n\n**Values**: a string of 50 characters or fewer ",
              "type": "string"
            },
            "SoldToId": {
              "description": "ID of the person who bought the subscription associated with the account. This field is only required if the `Status` field is set to `Active`.\n\n**Character limit**: 32\n\n\n**Values**: a valid contact ID for the account ",
              "type": "string"
            },
            "Status": {
              "description": "Status of the account in the system.\n\n**Character limit**: 8\n\n\n**Values**: one of the following:\n\n- leave null if you're using `subscribe\n`\n- if you're using `create\n`:\n- `Draft`\n- `Active`\n- `Canceled`\n",
              "type": "string"
            },
            "TaxCompanyCode": {
              "description": " Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n\n\n**Character limit**: 50\n\n\n**Values**: a valid company code ",
              "type": "string"
            },
            "TaxExemptCertificateID": {
              "description": "ID of your customer's tax exemption certificate.\n\n**Character limit**: 32\n\n\n**Values**: a string of 32 characters or fewer ",
              "type": "string"
            },
            "TaxExemptCertificateType": {
              "description": "Type of the tax exemption certificate that your customer holds.\n**Character limit**: 32\n\n\n**Values**: a string of 32 characters or fewer ",
              "type": "string"
            },
            "TaxExemptDescription": {
              "description": "Description of the tax exemption certificate that your customer holds.\n\n**Character limit**: 500\n\n\n**Values**: a string of 500 characters or fewer ",
              "type": "string"
            },
            "TaxExemptEffectiveDate": {
              "description": "Date when the the customer's tax exemption starts.\n\n**Character limit**: 29 **Version notes**: requires Z-Tax ",
              "format": "date",
              "type": "string"
            },
            "TaxExemptExpirationDate": {
              "description": "Date when the customer's tax exemption certificate expires\n**Character limit**: 29 **Version notes**: requires Z-Tax ",
              "format": "date",
              "type": "string"
            },
            "TaxExemptIssuingJurisdiction": {
              "description": "Indicates the jurisdiction in which the customer's tax exemption certificate was issued.\n\n**Character limit**: 32\n\n\n**Values**: a string of 32 characters or fewer ",
              "type": "string"
            },
            "TaxExemptStatus": {
              "description": " Status of the account's tax exemption. This field is only required if you use Zuora Tax. This field is not available if you do not use Zuora Tax.\n\n\n**Character limit**: 19\n\n\n**Values**: one of the following:\n\n- `Yes`\n- `No`\n- `PendingVerification`\n",
              "type": "string"
            },
            "TotalInvoiceBalance": {
              "description": "Total balance of the account's invoices.\n\n**Character limit**: 16\n\n\n**Values**: a valid currency value ",
              "format": "double",
              "type": "number"
            },
            "UpdatedById": {
              "description": "ID of the user who last updated the account.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UpdatedDate": {
              "description": "Date when the account was last updated.\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "VATId": {
              "description": " EU Value Added Tax ID.\nThis feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\n\n\n**Character limit**: 25\n\n\n**Values**: a valid Value Added Tax ID ",
              "type": "string"
            }
          },
          "required": [
            "Batch",
            "BillCycleDay",
            "Currency",
            "Name",
            "Status"
          ],
          "type": "object"
        },
        "BillToContact": {
          "description": " This is the object that contains the contact associated with this account in the Account's `BillToId` field.\nThis field is only required if the account does not exist.\nValues: A valid contact for the account.",
          "properties": {
            "AccountId": {
              "description": " The Zuora account ID associated with this contact. This field is not required when you use the subscribe\ncall. This field is required for all other calls.\n**Character limit: **32 **Values: **a valid account ID ",
              "type": "string"
            },
            "Address1": {
              "description": " The first line of the contact's address, which is often a street address or business name.\n\n\n**Character limit**: 255\n\n\n**Values**: a string of 255 characters or fewer ",
              "type": "string"
            },
            "Address2": {
              "description": " The second line of the contact's address.\n\n\n**Character limit**: 255\n\n\n**Values**: a string of 255 characters or fewer ",
              "type": "string"
            },
            "City": {
              "description": " The city of the contact's address.\n\n\n**Character limit**: 40 **Values: **a string of 40 characters or fewer ",
              "type": "string"
            },
            "Country": {
              "description": " The country of the contact's address. This field is only required if you enbale taxation. ",
              "type": "string"
            },
            "County": {
              "description": " The country. May optionally be used by [Z-Tax](/C_Zuora_User_Guides/A_Billing_and_Payments/I_Taxes/Z-Tax) to calculate county tax.\n\n\n**Character limit**: 32\n\n\n**Values**: a string of 32 characters or fewer ",
              "type": "string"
            },
            "CreatedById": {
              "description": "The ID of the Zuora user who created the contact.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreatedDate": {
              "description": "The date when the contact was created.\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "Description": {
              "description": " A description for the contact.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "Fax": {
              "description": " The contact's fax number.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "FirstName": {
              "description": " The contact's first name.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of the contact's first name ",
              "type": "string"
            },
            "HomePhone": {
              "description": " The contact's home phone number.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "LastName": {
              "description": " The contact's last name.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "MobilePhone": {
              "description": " The contact's mobile phone number.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "NickName": {
              "description": " A nickname for the contact.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "OtherPhone": {
              "description": " An additional phone number for the contact.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "OtherPhoneType": {
              "description": "The type of the `OtherPhone`.\n\n**Character limit**: 20\n\n\n**Values**: `Work`, `Mobile`, `Home`, `Other` ",
              "type": "string"
            },
            "PersonalEmail": {
              "description": " The contact's personal email address.\n\n\n**Character limit**: 80\n\n\n**Values**: a string of 80 characters or fewer ",
              "type": "string"
            },
            "PostalCode": {
              "description": " The zip code for the contact's address.\n**Character limit:** 20 **Values: **a string of 20 characters or fewer ",
              "type": "string"
            },
            "State": {
              "description": " The state or province of the contact's address. ",
              "type": "string"
            },
            "TaxRegion": {
              "description": "If using [Z-Tax](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/L_Taxes/A_Z-Tax) tax rules ",
              "type": "string"
            },
            "UpdatedById": {
              "description": " The ID of the user who lasted updated the contact.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UpdatedDate": {
              "description": " The date when the contact was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "WorkEmail": {
              "description": " The contact's business email address.\n\n\n**Character limit**: 80\n\n\n**Values**: a string of 80 characters or fewer ",
              "type": "string"
            },
            "WorkPhone": {
              "description": " The contact's business phone number.\n\n\n**Character limit**: 40 **notes**: --\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            }
          },
          "required": [
            "FirstName",
            "LastName"
          ],
          "type": "object"
        },
        "PaymentMethod": {
          "description": " This is the object defining the payment details for the Account. The Account will be updated with this payment as the default payment method.\nUse this field if you are associating an electronic payment method with the account. A payment gateway must be enabled.\nValues: A valid electronic PaymentMethod.",
          "properties": {
            "AccountId": {
              "description": " The ID of the customer account associated with this payment method. ",
              "type": "string"
            },
            "AchAbaCode": {
              "description": " The nine-digit routing number or ABA number used by banks.\nThis field is only required if the `Type` field is set to `ACH`.\n\n\n**Character limit**: 9\n\n\n**Values**: a string of 9 characters or fewer ",
              "type": "string"
            },
            "AchAccountName": {
              "description": " The name of the account holder, which can be either a person or a company.\nThis field is only required if the `Type` field is set to `ACH`.\n\n\n**Character limit**: 70\n\n\n**Values**: a string of 70 characters or fewer ",
              "type": "string"
            },
            "AchAccountNumber": {
              "description": " The bank account number associated with the ACH payment.\nThis field is only required if the `Type` field is set to `ACH`.\n\n\n**Character limit**: 30\n\n\n**Values**: a string of 30 numeric characters or fewer ",
              "type": "string"
            },
            "AchAccountNumberMask": {
              "description": " This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`. Use this field for ACH payment methods.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "AchAccountType": {
              "description": " The type of bank account associated with the ACH payment.\nThis field is only required if the `Type` field is set to `ACH`.\n\n\n**Character limit**: 16\n\n\n**Values**:\n\n- `BusinessChecking`\n- `Checking`\n- `Saving`\n",
              "type": "string"
            },
            "AchAddress1": {
              "description": " Line 1 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.\n**Character limit:** **Values:** an address ",
              "type": "string"
            },
            "AchAddress2": {
              "description": " Line 2 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.\n**Character limit:** **Values:** an address ",
              "type": "string"
            },
            "AchBankName": {
              "description": " The name of the bank where the ACH payment account is held. Use this field for ACH payment methods.\n\n\n**Character limit**: 70\n\n\n**Values**: a string of 70 characters or fewer ",
              "type": "string"
            },
            "Active": {
              "description": " Specifies whether a payment method is available in Zuora. The default value is `false`.\n\n\n**Character limit**: 5\n\n\n**Values**: `true`, `false` ",
              "type": "boolean"
            },
            "BankBranchCode": {
              "description": " The branch code of the bank used for direct debit. Use this field for direct debit payment methods.\n\n\n**Character limit**: 10\n\n\n**Values**:  string of 10 characters or fewer ",
              "type": "string"
            },
            "BankCheckDigit": {
              "description": "The check digit in the international bank account number, which confirms the validity of the account. Use this field for direct debit payment methods.\n\n**Character limit**: 4\n\n\n**Values**:  string of 4 characters or fewer ",
              "type": "string"
            },
            "BankCity": {
              "description": " The city of the direct debit bank. Use this field for direct debit payment methods.\n\n\n**Character limit**:70\n\n\n**Values**:  string of 70 characters or fewer ",
              "type": "string"
            },
            "BankCode": {
              "description": " The sort code or number that identifies the bank. This is also known as the sort code. This field is required for direct debit payment methods.\n\n\n**Character limit**: 18\n\n\n**Values**:  string of 18 characters or fewer ",
              "type": "string"
            },
            "BankIdentificationNumber": {
              "description": " The first six digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.\n\n\n**Character limit**: 6\n\n\n**Values**:  string of 6 characters or fewer ",
              "type": "string"
            },
            "BankName": {
              "description": " The name of the direct debit bank. Use this field for direct debit payment methods.\n\n\n**Character limit**:80\n\n\n**Values**:  string of 80 characters or fewer ",
              "type": "string"
            },
            "BankPostalCode": {
              "description": " The zip code or postal code of the direct debit bank. Use this field for direct debit payment methods.\n\n\n**Character limit**:20\n\n\n**Values**:  string of 20 characters or fewer ",
              "type": "string"
            },
            "BankStreetName": {
              "description": " The name of the street of the direct debit bank. Use this field for direct debit payment methods.\n\n\n**Character limit**:60\n\n\n**Values**:  string of 60 characters or fewer ",
              "type": "string"
            },
            "BankStreetNumber": {
              "description": " The number of the direct debit bank. Use this field for direct debit payment methods.\n\n\n**Character limit**:10\n\n\n**Values**:  string of 10 characters or fewer ",
              "type": "string"
            },
            "BankTransferAccountName": {
              "description": " The name on the direct debit bank account. Use this field for direct debit payment methods.\n\n\n**Character limit**: 60\n\n\n**Values**:  string of 60 characters or fewer ",
              "type": "string"
            },
            "BankTransferAccountNumber": {
              "description": " The number of the customer's bank account.\nThis field is only required if the `Type` field is set to `BankTransfer`.\n\n\n**Character limit**:30\n\n\n**Values**:  string of 30 characters or fewer ",
              "type": "string"
            },
            "BankTransferAccountNumberMask": {
              "description": " This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "BankTransferAccountType": {
              "description": " The type of the customer's bank account. Use this field for direct debit payment methods.\n\n\n**Character limit**: 11\n\n\n**Values**: `DirectDebit` ",
              "type": "string"
            },
            "BankTransferType": {
              "description": " Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.\nThis field is only required if the `Type` field is set to `BankTransfer`.\n\n\n**Character limit**: 20\n\n\n**Values**:\n\n- `AutomatischIncasso` (NL)\n- `LastschriftDE` (Germany)\n- `LastschriftAT` (Austria)\n- `DemandeDePrelevement` (FR)\n- `DirectDebitUK` (UK)\n- `Domicil` (Belgium)\n- `LastschriftCH` (CH)\n- `RID` (Italy)\n- `OrdenDeDomiciliacion` (Spain)\n",
              "type": "string"
            },
            "BusinessIdentificationCode": {
              "description": " The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Use this field only for direct debit payments in Switzerland with Global Collect.\n\n\n**Character limit**: 11\n\n\n**Values**: string of 11 characters or fewer ",
              "type": "string"
            },
            "City": {
              "description": " The city of the customer's address. Use this field for direct debit payment methods.\n\n\n**Character limit**:80\n\n\n**Values**:  string of 80 characters or fewer ",
              "type": "string"
            },
            "Country": {
              "description": " The two-letter country code of the customer's address.\nThis field is only required if the `Type` field is set to `BankTransfer`, and the `BankTransferType` field is set to either `DirectDebitUK`, `DirectEntryAU`, or `DirectDebitNZ`.\n\n\n**Character limit**: 2\n\n\n**Values**: a valid country code ",
              "type": "string"
            },
            "CreatedById": {
              "description": " The user ID of the person who created the `PaymentMethod` object when there is a login user in the user session. In Hosted Payment Method and Z-Checkout pages, this field is set to 3 as there is no login user to initiate a user session.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreatedDate": {
              "description": " The date when the `PaymentMethod` object was created in the Zuora system.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "CreditCardAddress1": {
              "description": " The first line of the card holder's address, which is often a street address or business name. Use this field for credit card and direct debit payment methods.\n\n\n**Character limit**: 255\n\n\n**Values**: a string of 255 characters or fewer ",
              "type": "string"
            },
            "CreditCardAddress2": {
              "description": " The second line of the card holder's address. Use this field for credit card and direct debit payment methods.\n\n\n**Character limit**: 255\n\n\n**Values**: a string of 255 characters or fewer ",
              "type": "string"
            },
            "CreditCardCity": {
              "description": " The city of the card holder's address. Use this field for credit card and direct debit payment methods\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "CreditCardCountry": {
              "description": " The country of the card holder's address.",
              "type": "string"
            },
            "CreditCardExpirationMonth": {
              "description": " The expiration month of the credit card or debit card.\nThis field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n\n**Character limit**: 2\n\n\n**Values**: a two-digit number, 01 - 12 ",
              "format": "int32",
              "type": "integer"
            },
            "CreditCardExpirationYear": {
              "description": " The expiration month of the credit card or debit card.\nThis field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n\n\n**Character limit**: 4\n\n\n**Values**: a four-digit number ",
              "format": "int32",
              "type": "integer"
            },
            "CreditCardHolderName": {
              "description": " The full name of the card holder.\nThis field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n\n\n**Character limit**: 50\n\n\n**Values**: a string of 50 characters or fewer ",
              "type": "string"
            },
            "CreditCardMaskNumber": {
              "description": " A masked version of the credit or debit card number.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreditCardNumber": {
              "description": " The credit card or debit card number. This is an insert-only field; it cannot be updated nor queried for security purposes.\nThis field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n\n\n**Character limit**: 16\n\n\n**Values**: a string of 16 characters or fewer ",
              "type": "string"
            },
            "CreditCardPostalCode": {
              "description": " The billing address's zip code. This field is required only when you define a debit card or credit card payment.\n\n\n**Character limit**: 20\n\n\n**Values**: a string of 20 characters or fewer ",
              "type": "string"
            },
            "CreditCardSecurityCode": {
              "description": " The CVV or CVV2 security code. See [How do I control what information Zuora sends over to the Payment Gateway?](https://knowledgecenter.zuora.com/kb/How_do_I_control_information_sent_to_payment_gateways_when_verifying_payment_methods%3F) for more information. To ensure PCI compliance, this value is not stored and cannot be queried.\n\n\n**Character limit**:\n\n\n**Values**: a valid CVV or CVV2 security code ",
              "type": "string"
            },
            "CreditCardState": {
              "description": " The billing address's state. Use this field is if the `CreditCardCountry` value is either Canada or the US. State names must be spelled in full. ",
              "type": "string"
            },
            "CreditCardType": {
              "description": " The type of credit card or debit card.\nThis field is only required if the `Type` field is set to `CreditCard` or `DebitCard`.\n\n\n**Character limit**: 32\n\n\n**Values**: `AmericanExpress`, `Discover`, `MasterCard`, `Visa` ",
              "type": "string"
            },
            "DeviceSessionId": {
              "description": " The session ID of the user when the `PaymentMethod` was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently only Verifi supports this field.\n\n\n**Character limit**: 255\n\n\n**Values**: ",
              "type": "string"
            },
            "Email": {
              "description": " An email address for the payment method in addition to the bill to contact email address.\n\n\n**Character limit**: 80\n\n\n**Values**: a string of 80 characters or fewer ",
              "type": "string"
            },
            "ExistingMandate": {
              "description": " Indicates if the customer has an existing mandate or a new mandate. A mandate is a signed authorization for UK and NL customers. When you are migrating mandates from another system, be sure to set this field correctly. If you indicate that a new mandate is an existing mandate or vice-versa, then transactions fail. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 3\n\n\n**Values**: `Yes`, `No` ",
              "type": "string"
            },
            "FirstName": {
              "description": " The customer's first name. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 30\n\n\n**Values**: a string of 30 characters or fewer ",
              "type": "string"
            },
            "GatewayOptionData": {
              "description": " Use this field to pass gateway options.\n\n\n**Character limit**: 255\n\n\n**Values**: GatewayOption ",
              "properties": {
                "GatewayOption": {
                  "description": "",
                  "items": {
                    "$ref": "#/definitions/GatewayOption"
                  },
                  "type": "array"
                }
              },
              "required": [
                "GatewayOption"
              ],
              "type": "object"
            },
            "IBAN": {
              "description": " The International Bank Account Number. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 42\n\n\n**Values**: a string of 42 characters or fewer ",
              "type": "string"
            },
            "IPAddress": {
              "description": " The IP address of the user when the payment method was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently PayPal, CyberSource, Authorize.Net, and Verifi support this field.\n\n\n**Character limit**: 15\n\n\n**Values**: a string of 15 characters or fewer ",
              "type": "string"
            },
            "Id": {
              "description": " The ID of this object. Upon creation, the ID of this object is `PaymentMethodId`.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "LastFailedSaleTransactionDate": {
              "description": " The date of the last failed attempt to collect payment with this payment method.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "LastName": {
              "description": " The customer's last name. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 70\n\n\n**Values**: a string of 70 characters or fewer ",
              "type": "string"
            },
            "LastTransactionDateTime": {
              "description": " The date of the most recent transaction.\n\n\n**Character limit**: 29\n\n\n**Values**: a valid date and time value ",
              "format": "date-time",
              "type": "string"
            },
            "LastTransactionStatus": {
              "description": " The status of the most recent transaction.\n\n\n**Character limit**: 39\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "MandateCreationDate": {
              "description": " The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 29\n\n\n",
              "format": "date",
              "type": "string"
            },
            "MandateID": {
              "description": " The ID of the mandate. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 36\n\n\n**Values**: a string of 36 characters or fewer ",
              "type": "string"
            },
            "MandateReceived": {
              "description": " Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 3\n\n\n**Values**: `Yes`, `No `(case-sensitive) ",
              "type": "string"
            },
            "MandateUpdateDate": {
              "description": " The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 29\n\n\n",
              "format": "date",
              "type": "string"
            },
            "MaxConsecutivePaymentFailures": {
              "description": " Specifies the number of allowable consecutive failures Zuora attempts with the payment method before stopping.\nWhen the `UseDefaultRetryRule` field is set to `false`, this field is only required if the `PaymentRetryWindow` field is not defined.\n\n\n\n**Values**: a valid number ",
              "type": "integer"
            },
            "Name": {
              "description": " Create Query Delete Filter ",
              "type": "string"
            },
            "NumConsecutiveFailures": {
              "description": " The number of consecutive failed payment for this payment method. It is reset to 0 upon successful payment. You can use the API to update the field value to 0.\n\n\n**Character limit**:\n\n\n**Values**: a positive whole number ",
              "format": "int32",
              "type": "integer"
            },
            "PaymentMethodStatus": {
              "description": " Specifies the status of the payment method. It is set to Active on creation.\n\n\n**Character limit**: 6\n\n\n**Values**: `Active` or `Closed` PaymentMethodStatus should not be used in the `create\n` call. You can only set this field to **Closed** via the `update\n` call. ",
              "type": "string"
            },
            "PaymentRetryWindow": {
              "description": " The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.\nWhen the `UseDefaultRetryRule` field is set to `false`, this field is only required if the `MaxConsecutivePaymentFailures` field is not defined.\n\n\n**Character limit**: 4\n\n\n**Values**: a whole number between 1 and 1000, exclusive ",
              "type": "integer"
            },
            "PaypalBaid": {
              "description": " The PayPal billing agreement ID, which is a contract between two PayPal accounts. Typically, the selling party initiates a request to create a BAID, and sends it to buying party for acceptance. The seller can keep track of the BAID and use it for future charges against the buyer.\nThis field is only required if the `Type` field is set to `PayPal`.\n\n\n**Character limit**: 64\n\n\n**Values**: a string of 64 characters or fewer ",
              "type": "string"
            },
            "PaypalEmail": {
              "description": " The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service.\nThis field is only required if the `Type` field is set to `PayPal`.\n\n\n**Character limit**: 80\n\n\n**Values**: a string of 80 characters or fewer ",
              "type": "string"
            },
            "PaypalPreapprovalKey": {
              "description": " PayPal's Adaptive Payments API key. Zuora does not create this key, nor does it call PayPal to generate it. You must use PayPal's Adaptive Payments' API to generate this key, and then pass it to Zuora. Zuora uses this key to authorize future payments to PayPal's Adaptive Payments API.\nThis field is only required if you use PayPal Adaptive Payments gateway.\n\n\n**Character limit**: 32\n\n\n**Values**: a valid PayPal Adaptive Payment pre-approval key ",
              "type": "string"
            },
            "PaypalType": {
              "description": " Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments.\nThis field is only required if you use PayPal Adaptive Payments or Payflow Pro (Express Checkout) gateways.\n\n\n**Character limit**: 32\n\n\n**Values**: `ExpressCheckout`, `AdaptivePayments` ",
              "type": "string"
            },
            "Phone": {
              "description": " The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "PostalCode": {
              "description": " The zip code of the customer's address. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 20\n\n\n**Values**: a string of 20 characters or fewer ",
              "type": "string"
            },
            "SecondTokenId": {
              "description": " A gateway unique identifier that replaces sensitive payment method data. SecondTokenId is conditionally required only when TokenID is being used to represent a gateway customer profile. SecondTokenId is used in the CC Reference Transaction payment method.\n\n**Character limit**: 64\n\n\n**Values**: a string of 64 characters or fewer ",
              "type": "string"
            },
            "SkipValidation": {
              "description": " Creates the payment method even if authorization fails with the payment gateway.\n\n\n**Character limit**: 5\n\n\n**Values**: `t``rue`, `false` ",
              "type": "boolean"
            },
            "State": {
              "description": " The state of the customer's address. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 70\n\n\n**Values**: a string of 70 characters or fewer ",
              "type": "string"
            },
            "StreetName": {
              "description": " The street name of the customer's address. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "StreetNumber": {
              "description": " The street number of the customer's address. This field is used only for the direct debit payment method.\n\n\n**Character limit**: 30\n\n\n**Values**: a string of 30 characters or fewer ",
              "type": "string"
            },
            "TokenId": {
              "description": " A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. When TokenId is used to represent a customer profile, then SecondTokenId is conditionally required for representing the underlying tokenized payment method.\nWhen the `Type` field is set to `CreditCardReferenceTransaction`,  this field is only required if the `CreditCardNumber` field is not specified.\n\n\n**Character limit**: 255\n\n\n**Values**: a string of 255 characters or fewer ",
              "type": "string"
            },
            "TotalNumberOfErrorPayments": {
              "description": " The number of error payments that used this payment method.\n\n\n**Character limit**:\n\n\n**Values**: automatically generated ",
              "format": "int32",
              "type": "integer"
            },
            "TotalNumberOfProcessedPayments": {
              "description": " The number of successful payments that used this payment method.\n\n\n**Character limit**:\n\n\n**Values**: automatically generated ",
              "format": "int32",
              "type": "integer"
            },
            "Type": {
              "description": " Create Query Update Delete Filter ",
              "type": "string"
            },
            "UpdatedById": {
              "description": " The ID of the user who last updated the payment method.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UpdatedDate": {
              "description": " The date when the payment method was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "UseDefaultRetryRule": {
              "description": " Determines whether to use the default retry rules configured in the [Z-Payments settings](https://knowledgecenter.zuora.com/CB_Billing/L_Payment_Methods/H_Configure_Payment_Method_Retry_Rules). Set this to `true` to use the default retry rules. Set this to `false` to set the specific rules for this payment method. If you set this value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`, are required.\n\n\n**Character limit**: 5\n\n\n**Values**: `t``rue`, `false` ",
              "type": "boolean"
            }
          },
          "required": [
            "Type"
          ],
          "type": "object"
        },
        "PreviewOptions": {
          "description": " Specify true to call subscribe() with preview mode. After that is completed, the call system will roll back the subscription and return only the temporary invoice data. Specify false to call subscribe() without preview mode.\n\n**Values:** `true`, `false` ",
          "properties": {
            "EnablePreviewMode": {
              "description": " Determines whether to create an amendment or display a preview of the change.",
              "type": "boolean"
            },
            "IncludeExistingDraftInvoiceItems": {
              "description": " Specifies whether to include draft invoice items in amendment previews.",
              "type": "boolean"
            },
            "NumberOfPeriods": {
              "description": " Indicates the number of invoice periods to show in a preview.",
              "format": "int32",
              "type": "integer"
            },
            "PreviewThroughTermEnd": {
              "description": " Request to preview the charge through the end of the subscription term.",
              "type": "boolean"
            },
            "PreviewType": {
              "description": " The type of preview you will receive from a preview request.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SoldToContact": {
          "description": " Unless otherwise specified, this field defaults to the information in the `BillToContact` field.\n\n**Values:** A valid contact. ",
          "properties": {
            "AccountId": {
              "description": " The Zuora account ID associated with this contact. This field is not required when you use the subscribe\ncall. This field is required for all other calls.\n**Character limit: **32 **Values: **a valid account ID ",
              "type": "string"
            },
            "Address1": {
              "description": " The first line of the contact's address, which is often a street address or business name.\n\n\n**Character limit**: 255\n\n\n**Values**: a string of 255 characters or fewer ",
              "type": "string"
            },
            "Address2": {
              "description": " The second line of the contact's address.\n\n\n**Character limit**: 255\n\n\n**Values**: a string of 255 characters or fewer ",
              "type": "string"
            },
            "City": {
              "description": " The city of the contact's address.\n\n\n**Character limit**: 40 **Values: **a string of 40 characters or fewer ",
              "type": "string"
            },
            "Country": {
              "description": " The country of the contact's address. ",
              "type": "string"
            },
            "County": {
              "description": " The country. May optionally be used by [Z-Tax](/C_Zuora_User_Guides/A_Billing_and_Payments/I_Taxes/Z-Tax) to calculate county tax.\n\n\n**Character limit**: 32\n\n\n**Values**: a string of 32 characters or fewer ",
              "type": "string"
            },
            "CreatedById": {
              "description": "The ID of the Zuora user who created the contact.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "CreatedDate": {
              "description": "The date when the contact was created.\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "Description": {
              "description": " A description for the contact.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "Fax": {
              "description": " The contact's fax number.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "FirstName": {
              "description": " The contact's first name.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of the contact's first name ",
              "type": "string"
            },
            "HomePhone": {
              "description": " The contact's home phone number.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "LastName": {
              "description": " The contact's last name.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "MobilePhone": {
              "description": " The contact's mobile phone number.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "NickName": {
              "description": " A nickname for the contact.\n\n\n**Character limit**: 100\n\n\n**Values**: a string of 100 characters or fewer ",
              "type": "string"
            },
            "OtherPhone": {
              "description": " An additional phone number for the contact.\n\n\n**Character limit**: 40\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            },
            "OtherPhoneType": {
              "description": "The type of the `OtherPhone`.\n\n**Character limit**: 20\n\n\n**Values**: `Work`, `Mobile`, `Home`, `Other` ",
              "type": "string"
            },
            "PersonalEmail": {
              "description": " The contact's personal email address.\n\n\n**Character limit**: 80\n\n\n**Values**: a string of 80 characters or fewer ",
              "type": "string"
            },
            "PostalCode": {
              "description": " The zip code for the contact's address.\n**Character limit:** 20 **Values: **a string of 20 characters or fewer ",
              "type": "string"
            },
            "State": {
              "description": " The state or province of the contact's address. ",
              "type": "string"
            },
            "TaxRegion": {
              "description": "If using [Z-Tax](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/L_Taxes/A_Z-Tax) tax rules ",
              "type": "string"
            },
            "UpdatedById": {
              "description": " The ID of the user who lasted updated the contact.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
              "type": "string"
            },
            "UpdatedDate": {
              "description": " The date when the contact was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
              "format": "date-time",
              "type": "string"
            },
            "WorkEmail": {
              "description": " The contact's business email address.\n\n\n**Character limit**: 80\n\n\n**Values**: a string of 80 characters or fewer ",
              "type": "string"
            },
            "WorkPhone": {
              "description": " The contact's business phone number.\n\n\n**Character limit**: 40 **notes**: --\n\n\n**Values**: a string of 40 characters or fewer ",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SubscribeOptions": {
          "description": " This optional object specifies parameters related to invoicing - whether to immediately generate an invoice and collect payment, and whether the invoice should cover all subscriptions or just this new subscription.\nThe default behavior is to invoice immediately for all the account's subscriptions, with the current date as the target date, and immediately collect payment if the account's `AutoPay` flag is true.\n\n\n**Values:** A valid SubscribeOptions object. ",
          "properties": {
            "ApplyCreditBalance": {
              "description": "",
              "type": "boolean"
            },
            "ElectronicPaymentOptions": {
              "description": "",
              "properties": {
                "PaymentMethodId": {
                  "description": "",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "ExternalPaymentOptions": {
              "description": "",
              "properties": {
                "Amount": {
                  "description": "",
                  "format": "double",
                  "type": "number"
                },
                "EffectiveDate": {
                  "description": "",
                  "format": "date",
                  "type": "string"
                },
                "GatewayOrderId": {
                  "description": "",
                  "type": "string"
                },
                "PaymentMethodId": {
                  "description": "",
                  "type": "string"
                },
                "ReferenceId": {
                  "description": "",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "GenerateInvoice": {
              "description": "",
              "type": "boolean"
            },
            "ProcessPayments": {
              "description": "",
              "type": "boolean"
            },
            "SubscribeInvoiceProcessingOptions": {
              "description": "",
              "properties": {
                "InvoiceDate": {
                  "description": "",
                  "format": "date",
                  "type": "string"
                },
                "InvoiceProcessingScope": {
                  "description": "",
                  "type": "string"
                },
                "InvoiceTargetDate": {
                  "description": "",
                  "format": "date",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "GenerateInvoice",
            "ProcessPayments"
          ],
          "type": "object"
        },
        "SubscriptionData": {
          "description": " This object contains the information on the contract's dates and terms.\n\n\n**Values:** A valid SubscriptionData object. ",
          "properties": {
            "RatePlanData": {
              "description": "",
              "items": {
                "$ref": "#/definitions/RatePlanData"
              },
              "type": "array"
            },
            "Subscription": {
              "description": "",
              "properties": {
                "AccountId": {
                  "description": " This field can be updated when `Status` is `Draft`. ",
                  "type": "string"
                },
                "AncestorAccountId": {
                  "description": " A filter option for querying all subscriptions under the same account hierarchy.\n\n\n**Character limit**: 32\n\n\n**Values**: a valid account ID ",
                  "type": "string"
                },
                "AutoRenew": {
                  "description": " This field can be updated when `Status` is `Draft`. Indicates if the subscription automatically renews at the end of the term. This field is only required if the `TermType` field is set to `TERMED`.\n\n\n\n**Values**: `true`, `false` ",
                  "type": "boolean"
                },
                "CancelledDate": {
                  "description": " The date of the amendment that canceled the subscription.\n\n\n\n**Values**: inherited from `Amendment`.`EffectiveDate` ",
                  "format": "date",
                  "type": "string"
                },
                "ContractAcceptanceDate": {
                  "description": " The date when the customer accepts the contract. This field can be updated when **Status** is `Draft`.\n\n\nThis field is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`. If this setting is set to `Yes`:\n\n- If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription.\n- If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.\n",
                  "format": "date",
                  "type": "string"
                },
                "ContractEffectiveDate": {
                  "description": " The date when the contract takes effect. This field can be updated when **Status** is `Draft`.\n\n\n**Note**: This field is required in the subscribe call. If you set the value of this field to null and both the ServiceActivationDate and ContractAcceptanceDate fields are not required, the subscribe call still returns success, but the new subscription is in `DRAFT` status. To activate the subscription, you must set a valid date to this field. ",
                  "format": "date",
                  "type": "string"
                },
                "CreatedById": {
                  "description": "The user ID of the person who created the subscription.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
                  "type": "string"
                },
                "CreatedDate": {
                  "description": " The date the subscription was created. This value is the same as the OriginalCreatedDate value until the subscription is amended.\n\n\n\n**Values**: automatically generated ",
                  "format": "date-time",
                  "type": "string"
                },
                "CreatorAccountId": {
                  "description": " The account ID that created the subscription or the amended subscription.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
                  "type": "string"
                },
                "CreatorInvoiceOwnerId": {
                  "description": "The account ID that owns the invoices associated with the subscription or the amended subscription.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
                  "type": "string"
                },
                "CurrentTerm": {
                  "description": " The length of the period for the current subscription term. This field is only required If the `TermType` field is set to `TERMED` and its value must be greater than `0`. If TermType is set to `EVERGREEN`, this value is ignored. Default is `0`.\n\n\n**Character limit**: 20\n\n\n**Values**: automatically generated ",
                  "format": "int32",
                  "type": "integer"
                },
                "CurrentTermPeriodType": {
                  "description": " The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.\n\n\n\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n",
                  "type": "string"
                },
                "InitialTerm": {
                  "description": " The length of the period for the first subscription term. This field can be updated when Status is `Draft`. If you use the subscribe\ncall, this field is required.\n\n\nThis field is only required if the `TermType` field is set to `TERMED`.\n\n**Character limit**: 20\n\n\n**Values**: any valid number. The default value is 0. ",
                  "format": "int32",
                  "type": "integer"
                },
                "InitialTermPeriodType": {
                  "description": " The period type for the first subscription term.\n\n\n\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n\n\n**Note**:\n\n- This field can be updated when `Status` is `Draft`.\n- This field is used with the `InitialTerm` field to specify the initial subscription term.\n",
                  "type": "string"
                },
                "InvoiceOwnerId": {
                  "description": " This field can be updated when `Status` is `Draft`. ",
                  "type": "string"
                },
                "IsInvoiceSeparate": {
                  "description": " Determines if the subscription is invoiced separately. If `TRUE`, then all charges for this subscription are collected into the subscription's own invoice.\n\n\n\n**Values**: `TRUE`, `FALSE `(default) ",
                  "type": "boolean"
                },
                "Name": {
                  "description": " The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur. You can change this value only when the subscription is in `Draft` status. Once the subscription is activated, you can't change this value, nor can you use this value for a different subscription.\n\n\n**Character limit**: 100\n\n\n**Values**: one of the following:\n\n- leave null to automatically generate\n- a string of 100 characters or fewer\n",
                  "type": "string"
                },
                "Notes": {
                  "description": " Use this field to record comments about the subscription.\n\n\n**Character limit**: 500\n\n\n**Values**: a string of 500 characters or fewer ",
                  "type": "string"
                },
                "OpportunityCloseDate__QT": {
                  "description": " The closing date of the Opportunity. This field is used in Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n\n\n**Character limit**:\n\n\n**Values**: populated by Zuora Quotes ",
                  "format": "date",
                  "type": "string"
                },
                "OpportunityName__QT": {
                  "description": " The unique identifier of the Opportunity. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n\n\n**Character limit**: 100\n\n\n**Values**: populated by Zuora Quotes ",
                  "type": "string"
                },
                "OriginalCreatedDate": {
                  "description": " The date when the subscription was originally created. This value is the same as the CreatedDate value until the subscription is amended.\n\n\n\n**Values**: automatically generated ",
                  "format": "date-time",
                  "type": "string"
                },
                "OriginalId": {
                  "description": " The original ID of this subscription.\n\n\n\n**Values**: automatically generated ",
                  "type": "string"
                },
                "PreviousSubscriptionId": {
                  "description": " The subscription ID immediately prior to the current subscription.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically generated ",
                  "type": "string"
                },
                "QuoteBusinessType__QT": {
                  "description": " The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n\n\n**Character limit**: 32\n\n\n**Values**: populated by Zuora Quotes ",
                  "type": "string"
                },
                "QuoteNumber__QT": {
                  "description": " The unique identifier of the Quote. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n\n\n**Character limit**: 32\n\n\n**Values**: populated by Zuora Quotes ",
                  "type": "string"
                },
                "QuoteType__QT": {
                  "description": " The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in the Zuora Reporting Data Sources to report on Subscription metrics. If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.\n\n\n**Character limit**: 32\n\n\n**Values**: populated by Zuora Quotes ",
                  "type": "string"
                },
                "RenewalSetting": {
                  "description": " This field can be updated when **Status** is `Draft`. Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.\n\n\nThis field is only required if the `TermType` field is set to `TERMED`.\n\n\n**Values**: `RENEW_WITH_SPECIFIC_TERM `(default), `RENEW_TO_EVERGREEN` ",
                  "type": "string"
                },
                "RenewalTerm": {
                  "description": " The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`. If you use the subscribe\ncall, this field is required.\n\n\nThis field is only required if the `TermType` field is set to `TERMED`.\n\n\n**Character limit**: 20\n\n\n**Values**: one of the following:\n\n- leave null to default to `0`\n- any number\n",
                  "format": "int32",
                  "type": "integer"
                },
                "RenewalTermPeriodType": {
                  "description": " The period type for the subscription renewal term.\n\n\n\n**Values**:\n\n- `Month` (default)\n- `Year`\n- `Day`\n- `Week`\n\n\n**Note**:\n\n- This field is used with the RenewalTerm field to specify the subscription renewal term.\n- This field can be updated when Status is `Draft`.\n",
                  "type": "string"
                },
                "ServiceActivationDate": {
                  "description": " The date when the subscription is activated.\nThis field can be updated when **Status** is `Draft`. This field is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`.\nIf this setting is set to `Yes`:\n\n- If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription.\n- If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.\n\n\n**Character limit**: 29\n\n",
                  "format": "date",
                  "type": "string"
                },
                "Status": {
                  "description": " The status of the subscription.\n\n\n**Character limit**: 17\n\n\n**Values**: automatically generated\n\n**Possible values**: one of the following:\n\n- `Draft`\n- `PendingActivation`\n- `PendingAcceptance`\n- `Active`\n- `Cancelled`\n- `Expired`\n- `Suspended` (This value is in **Limited Availability**.)\n",
                  "type": "string"
                },
                "SubscriptionEndDate": {
                  "description": " The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
                  "format": "date",
                  "type": "string"
                },
                "SubscriptionStartDate": {
                  "description": " The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
                  "format": "date",
                  "type": "string"
                },
                "TermEndDate": {
                  "description": " This field can be updated when **Status** is `Draft`. The date when the subscription term ends. If the subscription is evergreen, the TermEndDate value is null or is the cancelation date, as appropriate.\n\n**Character limit**: 29\n\n\n**Values**: automatically generated ",
                  "format": "date",
                  "type": "string"
                },
                "TermStartDate": {
                  "description": " This field can be updated when **Status** is `Draft`. The date when the subscription term begins. If this is a renewal subscription, then this date is different from the subscription start date. If you don't specify a value, then Zuora uses ContractEffectiveDate automatically.\n\n\n**Character limit**: 29 ",
                  "format": "date",
                  "type": "string"
                },
                "TermType": {
                  "description": " This field can be updated when **Status** is `Draft`. Indicates if a subscription is [termed or evergreen](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions#Termed_and_Evergreen_Subscriptions). A termed subscription has a specific end date and requires manual renewal. An evergreen subscription doesn't have an end date and doesn't need renewal. This field can be updated when the subscription status is Draft.\n\n\n**Character limit**: 9\n\n\n**Values**: `TERMED`, `EVERGREEN` ",
                  "type": "string"
                },
                "UpdatedById": {
                  "description": " The ID of the user who last updated the subscription.\n**Character limit:** 32 **Values: **automatically generated ",
                  "type": "string"
                },
                "UpdatedDate": {
                  "description": " The date when the subscription was last updated.\n**Character limit:** 29\n\n\n**Values**: automatically generated ",
                  "format": "date-time",
                  "type": "string"
                },
                "Version": {
                  "description": " The version number of the subscription.\n\n\n\n**Values**: automatically generated ",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "required": [
                "ContractEffectiveDate",
                "TermType"
              ],
              "type": "object"
            }
          },
          "required": [
            "Subscription",
            "RatePlanData"
          ],
          "type": "object"
        }
      },
      "required": [
        "Account",
        "SubscriptionData"
      ],
      "type": "object"
    },
    "SubscribeResult": {
      "properties": {
        "AccountId": {
          "description": "",
          "type": "string"
        },
        "AccountNumber": {
          "description": "",
          "type": "string"
        },
        "ChargeMetricsData": {
          "description": "",
          "properties": {
            "ChargeMetrics": {
              "description": "",
              "items": {
                "$ref": "#/definitions/NewChargeMetrics"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "Errors": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "GatewayResponse": {
          "description": "",
          "type": "string"
        },
        "GatewayResponseCode": {
          "description": "",
          "type": "string"
        },
        "InvoiceData": {
          "description": "",
          "items": {
            "$ref": "#/definitions/InvoiceData"
          },
          "type": "array"
        },
        "InvoiceId": {
          "description": "",
          "type": "string"
        },
        "InvoiceNumber": {
          "description": "",
          "type": "string"
        },
        "InvoiceResult": {
          "description": "",
          "properties": {
            "Invoice": {
              "description": "",
              "items": {
                "$ref": "#/definitions/Invoice"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "PaymentId": {
          "description": "",
          "type": "string"
        },
        "PaymentTransactionNumber": {
          "description": "",
          "type": "string"
        },
        "SubscriptionId": {
          "description": "",
          "type": "string"
        },
        "SubscriptionNumber": {
          "description": "",
          "type": "string"
        },
        "Success": {
          "description": "",
          "type": "boolean"
        },
        "TotalMrr": {
          "description": "",
          "format": "double",
          "type": "number"
        },
        "TotalTcv": {
          "description": "",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "SubscriptionProductFeature": {
      "properties": {
        "CreatedById": {
          "description": "",
          "type": "string"
        },
        "CreatedDate": {
          "description": " Date and time when the product feature was added to the subscription.\n\n\n**Character limit**: 29\n\n\n**Values**: ",
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "description": " Description of the subscription product feature.\n\n\n**Character limit**: 500\n\n\n**Values**: ",
          "type": "string"
        },
        "FeatureCode": {
          "description": " Unique code of the feature.\n\n\n**Character limit**: 255\n\n\n**Values**: ",
          "type": "string"
        },
        "FeatureId": {
          "description": " Internal Zuora ID of the feature.\n\n\n**Character limit**: 32\n\n\n**Values**: ",
          "type": "string"
        },
        "Name": {
          "description": " Name of the feature.\n\n\n**Character limit**: 255\n\n\n**Values**: ",
          "type": "string"
        },
        "RatePlanId": {
          "description": " Id of the product rate plan to which the feature belongs.\n\n\n**Character limit**: 32\n\n\n**Values**: ",
          "type": "string"
        },
        "UpdatedById": {
          "description": " Internal Zuora ID of the user who last updated the subscription product feature.\n\n\n**Character limit**: 32\n\n\n**Values**: ",
          "type": "string"
        },
        "UpdatedDate": {
          "description": " Date and time when the subscription product feature was last updated.\n\n\n**Character limit**: 29\n\n\n**Values**: ",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "FeatureId"
      ],
      "type": "object"
    },
    "SubscriptionProductFeatureList": {
      "properties": {
        "SubscriptionProductFeature": {
          "description": "",
          "items": {
            "$ref": "#/definitions/SubscriptionProductFeature"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SubscriptionRatedResult": {
      "properties": {
        "chargeRatedResults": {
          "description": "The amount changes per regular charge, or per regular charge and the discount charge if there is discount charge.",
          "items": {
            "$ref": "#/definitions/ChargeRatedResult"
          },
          "type": "array"
        },
        "subscriptionNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Terms": {
      "properties": {
        "autoRenew": {
          "type": "boolean"
        },
        "initialTerm": {
          "$ref": "#/definitions/InitialTerm"
        },
        "renewalSetting": {
          "enum": [
            "RENEW_WITH_SPECIFIC_TERM",
            "RENEW_TO_EVERGREEN"
          ],
          "type": "string"
        },
        "renewalTerms": {
          "items": {
            "$ref": "#/definitions/RenewalTerm"
          },
          "type": "array"
        }
      },
      "required": [
        "initialTerm",
        "renewalTerms"
      ],
      "type": "object"
    },
    "TermsAndConditions": {
      "description": "The JSON object containing the information related to the 'TermsAndConditions' type of request.",
      "properties": {
        "autoRenew": {
          "type": "boolean"
        },
        "lastTerm": {
          "$ref": "#/definitions/LastTerm"
        },
        "renewalSetting": {
          "enum": [
            "RENEW_WITH_SPECIFIC_TERM",
            "RENEW_TO_EVERGREEN"
          ],
          "type": "string"
        },
        "renewalTerms": {
          "items": {
            "$ref": "#/definitions/RenewalTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TimeSlicedMetrics": {
      "properties": {
        "amount": {
          "format": "BigDecimal",
          "type": "number"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "termNumber": {
          "format": "long",
          "type": "number"
        }
      },
      "type": "object"
    },
    "TimeSlicedNetMetrics": {
      "properties": {
        "amount": {
          "format": "BigDecimal",
          "type": "number"
        },
        "discountChargeNumber": {
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "termNumber": {
          "format": "long",
          "type": "number"
        },
        "type": {
          "description": "Indicates whether this metrics is for a regular charge or a discount. charge.",
          "enum": [
            "Regular",
            "Discount"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimeSlicedTcbNetMetrics": {
      "properties": {
        "amount": {
          "format": "BigDecimal",
          "type": "number"
        },
        "discountChargeNumber": {
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "tax": {
          "format": "BigDecimal",
          "type": "number"
        },
        "termNumber": {
          "format": "long",
          "type": "number"
        },
        "type": {
          "description": "Indicates whether this metrics is for a regular charge or a discount. charge.",
          "enum": [
            "Regular",
            "Discount"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TransferPaymentType": {
      "example": {
        "accountId": "4028905f5a87c0ff015a88889fe500a8"
      },
      "properties": {
        "accountId": {
          "description": "The ID of the customer account that the payment is transferred to.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TriggerDates": {
      "items": {
        "properties": {
          "name": {
            "description": "The name of the trigger date.",
            "enum": [
              "ContractEffective",
              "ServiceActivation",
              "CustomerAcceptance"
            ],
            "type": "string"
          },
          "triggerDate": {
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "TriggerParams": {
      "properties": {
        "specificTriggerDate": {
          "description": "The date when this price charge becomes active and billing starts. Required when the triggerEvent is 'SpecificDate'.",
          "format": "date",
          "type": "string"
        },
        "triggerEvent": {
          "description": "The event that triggers the subscription.",
          "enum": [
            "ContractEffective",
            "ServiceActivation",
            "CustomerAcceptance",
            "SpecificDate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "UnapplyCreditMemoType": {
      "example": {
        "effectiveDate": "2017-03-02",
        "invoices": [
          {
            "amount": 1,
            "invoiceId": "4028905f5a87c0ff015a87d3f8f10043",
            "items": [
              {
                "amount": 0.9,
                "creditMemoItemId": "4028905f5a890526015a8d73f74b0016",
                "invoiceItemId": "4028905f5a87c0ff015a87d3f90c0045"
              },
              {
                "amount": 0.1,
                "creditTaxItemId": "4028905f5a890526015a8d73f90c0018",
                "taxItemId": "4028905f5a87c0ff015a87d3f884003f"
              }
            ]
          }
        ]
      },
      "properties": {
        "debitMemos": {
          "description": "Container for debit memos that the credit memo is unapplied from.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoUnapplyDebitMemoRequestType"
          },
          "type": "array"
        },
        "effectiveDate": {
          "description": "The date when the credit memo is unapplied.\n",
          "format": "date",
          "type": "string"
        },
        "invoices": {
          "description": "Container for invoices that the credit memo is unapplied from.\n",
          "items": {
            "$ref": "#/definitions/CreditMemoUnapplyInvoiceRequestType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UnapplyPaymentType": {
      "example": {
        "debitMemos": [
          {
            "amount": 1.02,
            "debitMemoId": "4028905f5a87c0ff015a87e49e6b0062",
            "items": [
              {
                "amount": 1,
                "debitMemoItemId": "4028905f5a87c0ff015a87e49e7a0063"
              },
              {
                "amount": 0.02,
                "taxItemId": "4028905f5a87c0ff015a87e49f5e0065"
              }
            ]
          }
        ],
        "effectiveDate": "2017-03-01",
        "invoices": [
          {
            "amount": 10.1,
            "invoiceId": "4028905f5a87c0ff015a87d3f8f10043",
            "items": [
              {
                "amount": 10,
                "invoiceItemId": "4028905f5a87c0ff015a87d3f90c0045"
              },
              {
                "amount": 0.1,
                "taxItemId": "4028905f5a87c0ff015a87d3f884003f"
              }
            ]
          }
        ]
      },
      "properties": {
        "debitMemos": {
          "description": "Container for debit memos.\n",
          "items": {
            "$ref": "#/definitions/PaymentDebitMemoApplicationUnapplyRequestType"
          },
          "type": "array"
        },
        "effectiveDate": {
          "description": "The date when the payment is unapplied, in `yyyy-mm-dd` format.\n",
          "format": "date",
          "type": "string"
        },
        "invoices": {
          "description": "Container for invoices.\n",
          "items": {
            "$ref": "#/definitions/PaymentInvoiceApplicationUnapplyRequestType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdateEntityResponseType": {
      "properties": {
        "success": {
          "description": "Returns `true` if the request is successful.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UpdateEntityType": {
      "example": {
        "displayName": "Acme-Italy",
        "locale": "en_GB",
        "name": "Acme-Italy",
        "timezone": "Europe/Rome"
      },
      "properties": {
        "displayName": {
          "description": "The display name of the entity that is shown in the Zuora UI and APIs\n\n**Note:** If you do not specify the display name in the request, the entity name is used as the display name.",
          "maxLength": 255,
          "type": "string"
        },
        "locale": {
          "description": "The locale that is used in this entity.",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity that is the entity identifier and is unique across all entities in a multi-entity hierarchy.\n\n**Note:** Only alphanumeric characters (letters A–Z and a–z, and digits 0–9), space, period, and hyphen are allowed to be used in entity names. ",
          "maxLength": 255,
          "type": "string"
        },
        "timezone": {
          "description": "The time zone that is used in this entity.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdatePaymentType": {
      "example": {
        "comment": "new comment",
        "financeInformation": {
          "transferredToAccounting": "No"
        }
      },
      "properties": {
        "comment": {
          "description": "Comments about the payment.\n",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "customField__c": {
          "description": "Any custom fields defined for this object. The custom field name is case-sensitive.\n",
          "type": "string"
        },
        "financeInformation": {
          "description": "Container for the finance information related to the payment.\n",
          "properties": {
            "bankAccountAccountingCode": {
              "description": "The accounting code that maps to a bank account in your accounting system.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "transferredToAccounting": {
              "description": "Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.\n",
              "type": "string"
            },
            "unappliedPaymentAccountingCode": {
              "description": "The accounting code for the unapplied payment.\n",
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "UsageFlatFeePricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPrice": {
              "format": "BigDecimal",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageFlatFeePricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPrice": {
              "format": "BigDecimal",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageOveragePricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "includedUnits": {
              "format": "BigDecimal",
              "minimum": 0,
              "type": "number"
            },
            "numberOfPeriods": {
              "minimum": 1,
              "type": "integer"
            },
            "overagePrice": {
              "format": "BigDecimal",
              "type": "number"
            },
            "overageUnusedUnitsCreditOption": {
              "enum": [
                "NoCredit",
                "CreditBySpecificRate"
              ],
              "type": "string"
            },
            "unusedUnitsCreditRates": {
              "description": "Specify only when the overageUnusedUnitsCreditOption is CreditBySpecificRate.",
              "format": "BigDecimal",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageOveragePricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "overagePrice": {
              "format": "BigDecimal",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsagePerUnitPricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPrice": {
              "format": "BigDecimal",
              "type": "number"
            },
            "ratingGroup": {
              "enum": [
                "ByBillingPeriod",
                "ByUsageStartDate",
                "ByUsageRecord",
                "ByUsageUpload"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsagePerUnitPricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "listPrice": {
              "format": "BigDecimal",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageTieredPricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "ratingGroup": {
              "enum": [
                "ByBillingPeriod",
                "ByUsageStartDate",
                "ByUsageRecord",
                "ByUsageUpload"
              ],
              "type": "string"
            },
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageTieredPricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageTieredWithOveragePricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "numberOfPeriods": {
              "minimum": 1,
              "type": "integer"
            },
            "overagePrice": {
              "format": "BigDecimal",
              "type": "number"
            },
            "overageUnusedUnitsCreditOption": {
              "enum": [
                "NoCredit",
                "CreditBySpecificRate"
              ],
              "type": "string"
            },
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            },
            "unusedUnitsCreditRates": {
              "description": "Specify only when the overageUnusedUnitsCreditOption is CreditBySpecificRate.",
              "format": "BigDecimal",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageTieredWithOveragePricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "overagePrice": {
              "format": "BigDecimal",
              "type": "number"
            },
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageVolumePricingOverride": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "ratingGroup": {
              "enum": [
                "ByBillingPeriod",
                "ByUsageStartDate",
                "ByUsageRecord",
                "ByUsageUpload"
              ],
              "type": "string"
            },
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "UsageVolumePricingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PriceChangeParams"
        },
        {
          "properties": {
            "tiers": {
              "items": {
                "$ref": "#/definitions/ChargeTier"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "tokenResponse": {
      "properties": {
        "access_token": {
          "description": "The generated token.",
          "type": "string"
        },
        "expires_in": {
          "description": "The number of seconds until the token expires.",
          "type": "number"
        },
        "jti": {
          "description": "A globally unique identifier for the token.",
          "type": "string"
        },
        "scope": {
          "description": "A space-delimited list of scopes that the token can be used to access.",
          "type": "string"
        },
        "token_type": {
          "description": "The type of token that was generated, i.e., `bearer`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "zObject": {
      "type": "object"
    },
    "zObject_update": {
      "properties": {
        "Id": {
          "description": "",
          "type": "string"
        },
        "fieldsToNull": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "Id"
      ],
      "title": "zObject",
      "type": "object"
    }
  }
}

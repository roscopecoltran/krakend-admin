basePath: /gateway/public/endpoints/1.0
definitions.Archivable_Object.properties.archived.default: false
definitions.Archivable_Object.properties.archived.type: boolean
definitions.Archivable_Object.properties.id.maxLength: 36
definitions.Archivable_Object.properties.id.minLength: 36
definitions.Archivable_Object.properties.id.type: string
definitions.Archivable_Object.required.length: 1
definitions.Archivable_Object.required[0]: id
definitions.Archivable_Object.type: object
definitions.Existing_Folder.description: Represents an existing folder.
definitions.Existing_Folder.properties.bytes.description: Size of the folder (in bytes)
definitions.Existing_Folder.properties.bytes.example: "1048576"
definitions.Existing_Folder.properties.bytes.format: int64
definitions.Existing_Folder.properties.bytes.minimum: -1
definitions.Existing_Folder.properties.bytes.type: integer
definitions.Existing_Folder.properties.created.description: ISO 8601 Date when he
  folder has been created
definitions.Existing_Folder.properties.created.format: date-time
definitions.Existing_Folder.properties.created.type: string
definitions.Existing_Folder.properties.creator.description: User ID of the user who
  created the folder
definitions.Existing_Folder.properties.creator.example: 899afd84-4051-471c-8438-48cb47816af1
definitions.Existing_Folder.properties.creator.maxLength: 36
definitions.Existing_Folder.properties.creator.minLength: 36
definitions.Existing_Folder.properties.creator.type: string
definitions.Existing_Folder.properties.id.description: Unique ID of the folder
definitions.Existing_Folder.properties.id.example: 55ccb8ea-e15a-48f3-a2ba-c700f0d67a04
definitions.Existing_Folder.properties.id.maxLength: 36
definitions.Existing_Folder.properties.id.minLength: 36
definitions.Existing_Folder.properties.id.type: string
definitions.Existing_Folder.properties.name.description: Name of the folder
definitions.Existing_Folder.properties.name.example: My Folder
definitions.Existing_Folder.properties.name.maxLength: 255
definitions.Existing_Folder.properties.name.minLength: 1
definitions.Existing_Folder.properties.name.type: string
definitions.Existing_Folder.required.length: 5
definitions.Existing_Folder.required[0]: bytes
definitions.Existing_Folder.required[1]: created
definitions.Existing_Folder.required[2]: creator
definitions.Existing_Folder.required[3]: id
definitions.Existing_Folder.required[4]: name
definitions.Existing_Folder.type: object
definitions.Existing_Folder.xml.name: folder
definitions.Existing_Order.description: Represents an existing order.
definitions.Existing_Order.properties.bytes.description: Size of the order (in bytes)
definitions.Existing_Order.properties.bytes.example: "1048576"
definitions.Existing_Order.properties.bytes.format: int64
definitions.Existing_Order.properties.bytes.minimum: -1
definitions.Existing_Order.properties.bytes.type: integer
definitions.Existing_Order.properties.created.description: ISO 8601 Date when the
  order has been created
definitions.Existing_Order.properties.created.format: date-time
definitions.Existing_Order.properties.created.type: string
definitions.Existing_Order.properties.creator.description: User ID of the user who
  created the order
definitions.Existing_Order.properties.creator.example: 54a27cac-a457-443d-a3d5-c67fc20701ad
definitions.Existing_Order.properties.creator.maxLength: 36
definitions.Existing_Order.properties.creator.minLength: 36
definitions.Existing_Order.properties.creator.type: string
definitions.Existing_Order.properties.folders.description: Array of folder IDs to
  be referenced by the order
definitions.Existing_Order.properties.folders.example: '[199abf1c-e250-45d6-a6b7-bb27aeacfad8,
  bf9b3da6-61c1-46a5-b873-c7ffa035153e]'
definitions.Existing_Order.properties.folders.items.type: string
definitions.Existing_Order.properties.folders.type: array
definitions.Existing_Order.properties.folders.uniqueItems: true
definitions.Existing_Order.properties.folders.xml.name: folder
definitions.Existing_Order.properties.folders.xml.wrapped: true
definitions.Existing_Order.properties.id.description: Unique ID of the order
definitions.Existing_Order.properties.id.example: 44144a40-3dcd-469b-bd7d-04cf6797f6b6
definitions.Existing_Order.properties.id.maxLength: 36
definitions.Existing_Order.properties.id.minLength: 36
definitions.Existing_Order.properties.id.type: string
definitions.Existing_Order.properties.name.description: Name of the order
definitions.Existing_Order.properties.name.example: My Order
definitions.Existing_Order.properties.name.maxLength: 255
definitions.Existing_Order.properties.name.minLength: 1
definitions.Existing_Order.properties.name.type: string
definitions.Existing_Order.properties.recipe.description: Recipe to use when processing
  the order
definitions.Existing_Order.properties.recipe.example: d7927569-3431-4d23-a329-ec480385f6db
definitions.Existing_Order.properties.recipe.maxLength: 36
definitions.Existing_Order.properties.recipe.minLength: 36
definitions.Existing_Order.properties.recipe.type: string
definitions.Existing_Order.properties.sources.description: Array of source IDs to
  be referenced by the order
definitions.Existing_Order.properties.sources.example: '[29e2e192-8a57-43b1-be7d-929fc7461650,
  4ce89cce-c96e-4c90-9cfa-75e7fd13adc9]'
definitions.Existing_Order.properties.sources.items.type: string
definitions.Existing_Order.properties.sources.type: array
definitions.Existing_Order.properties.sources.uniqueItems: true
definitions.Existing_Order.properties.sources.xml.name: source
definitions.Existing_Order.properties.sources.xml.wrapped: true
definitions.Existing_Order.required.length: 5
definitions.Existing_Order.required[0]: bytes
definitions.Existing_Order.required[1]: created
definitions.Existing_Order.required[2]: creator
definitions.Existing_Order.required[3]: id
definitions.Existing_Order.required[4]: name
definitions.Existing_Order.type: object
definitions.Existing_Order.xml.name: order
definitions.Existing_Recipe.description: Represents an existing recipe.
definitions.Existing_Recipe.properties.created.description: ISO 8601 Date when the
  recipe has been created
definitions.Existing_Recipe.properties.created.format: date-time
definitions.Existing_Recipe.properties.created.type: string
definitions.Existing_Recipe.properties.creator.description: User ID of the user who
  created the recipe
definitions.Existing_Recipe.properties.creator.example: 9d7ce0d7-5c90-493d-9b4b-5254752ce68f
definitions.Existing_Recipe.properties.creator.maxLength: 36
definitions.Existing_Recipe.properties.creator.minLength: 36
definitions.Existing_Recipe.properties.creator.type: string
definitions.Existing_Recipe.properties.id.description: Unique ID of the recipe
definitions.Existing_Recipe.properties.id.example: 249a1f57-fae5-4ba0-b3fc-f65cc28b63d4
definitions.Existing_Recipe.properties.id.maxLength: 36
definitions.Existing_Recipe.properties.id.minLength: 36
definitions.Existing_Recipe.properties.id.type: string
definitions.Existing_Recipe.properties.name.description: Name of the recipe
definitions.Existing_Recipe.properties.name.example: My Recipe
definitions.Existing_Recipe.properties.name.maxLength: 255
definitions.Existing_Recipe.properties.name.minLength: 1
definitions.Existing_Recipe.properties.name.type: string
definitions.Existing_Recipe.required.length: 4
definitions.Existing_Recipe.required[0]: created
definitions.Existing_Recipe.required[1]: creator
definitions.Existing_Recipe.required[2]: id
definitions.Existing_Recipe.required[3]: name
definitions.Existing_Recipe.type: object
definitions.Existing_Recipe.xml.name: recipe
definitions.Existing_Source.description: Represents an existing source.
definitions.Existing_Source.properties.bytes.description: Size of the source (in bytes)
definitions.Existing_Source.properties.bytes.example: "1048576"
definitions.Existing_Source.properties.bytes.format: int64
definitions.Existing_Source.properties.bytes.minimum: -1
definitions.Existing_Source.properties.bytes.type: integer
definitions.Existing_Source.properties.created.description: ISO 8601 Date when the
  source has been created
definitions.Existing_Source.properties.created.format: date-time
definitions.Existing_Source.properties.created.type: string
definitions.Existing_Source.properties.creator.description: User ID of the user that
  created the source
definitions.Existing_Source.properties.creator.example: a33f3d36-df1b-41b2-ab5d-54dd57c40414
definitions.Existing_Source.properties.creator.maxLength: 36
definitions.Existing_Source.properties.creator.minLength: 36
definitions.Existing_Source.properties.creator.type: string
definitions.Existing_Source.properties.encoding.description: Encoding of the source
definitions.Existing_Source.properties.encoding.example: UTF-8
definitions.Existing_Source.properties.encoding.maxLength: 2.1474836e+09
definitions.Existing_Source.properties.encoding.minLength: 1
definitions.Existing_Source.properties.encoding.type: string
definitions.Existing_Source.properties.folder.description: Optional folder ID of the
  folder containing the source
definitions.Existing_Source.properties.folder.example: 55e94cc2-89e5-4dad-8786-7d1b2daf9ac8
definitions.Existing_Source.properties.folder.maxLength: 36
definitions.Existing_Source.properties.folder.minLength: 36
definitions.Existing_Source.properties.folder.type: string
definitions.Existing_Source.properties.folderName.type: string
definitions.Existing_Source.properties.id.description: Unique ID of the source
definitions.Existing_Source.properties.id.example: 1df110bf-8f71-44c8-b6b9-a5e1d49b4a6b
definitions.Existing_Source.properties.id.maxLength: 36
definitions.Existing_Source.properties.id.minLength: 36
definitions.Existing_Source.properties.id.type: string
definitions.Existing_Source.properties.mime.description: MIME type of the source
definitions.Existing_Source.properties.mime.enum.length: 8
definitions.Existing_Source.properties.mime.enum[0]: text/csv
definitions.Existing_Source.properties.mime.enum[1]: text/tab-separated-values
definitions.Existing_Source.properties.mime.enum[2]: text/x-bar-separated-values
definitions.Existing_Source.properties.mime.enum[3]: text/x-semicolon-separated-values
definitions.Existing_Source.properties.mime.enum[4]: application/x-ldjson
definitions.Existing_Source.properties.mime.enum[5]: application/xml
definitions.Existing_Source.properties.mime.enum[6]: application/vnd.ms-excel
definitions.Existing_Source.properties.mime.enum[7]: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
definitions.Existing_Source.properties.mime.example: text/csv
definitions.Existing_Source.properties.mime.maxLength: 255
definitions.Existing_Source.properties.mime.minLength: 1
definitions.Existing_Source.properties.mime.type: string
definitions.Existing_Source.properties.name.description: Name of the source
definitions.Existing_Source.properties.name.example: File.csv
definitions.Existing_Source.properties.name.maxLength: 255
definitions.Existing_Source.properties.name.minLength: 1
definitions.Existing_Source.properties.name.type: string
definitions.Existing_Source.required.length: 6
definitions.Existing_Source.required[0]: bytes
definitions.Existing_Source.required[1]: created
definitions.Existing_Source.required[2]: creator
definitions.Existing_Source.required[3]: id
definitions.Existing_Source.required[4]: mime
definitions.Existing_Source.required[5]: name
definitions.Existing_Source.type: object
definitions.Existing_Source.xml.name: source
definitions.Folder_Request.description: Represents a folder to be created or updated.
definitions.Folder_Request.properties.name.description: Name of the folder
definitions.Folder_Request.properties.name.example: My Folder
definitions.Folder_Request.properties.name.maxLength: 255
definitions.Folder_Request.properties.name.minLength: 1
definitions.Folder_Request.properties.name.type: string
definitions.Folder_Request.required.length: 1
definitions.Folder_Request.required[0]: name
definitions.Folder_Request.type: object
definitions.Folder_Request.xml.name: folder
definitions.Order_Request.description: Represents an order to be created or updated.
definitions.Order_Request.properties.folders.description: Array of folder IDs to be
  referenced by the order
definitions.Order_Request.properties.folders.example: '[199abf1c-e250-45d6-a6b7-bb27aeacfad8,
  bf9b3da6-61c1-46a5-b873-c7ffa035153e]'
definitions.Order_Request.properties.folders.items.type: string
definitions.Order_Request.properties.folders.type: array
definitions.Order_Request.properties.folders.uniqueItems: true
definitions.Order_Request.properties.folders.xml.name: folder
definitions.Order_Request.properties.folders.xml.wrapped: true
definitions.Order_Request.properties.name.description: Name of the order
definitions.Order_Request.properties.name.example: My Order
definitions.Order_Request.properties.name.maxLength: 255
definitions.Order_Request.properties.name.minLength: 1
definitions.Order_Request.properties.name.type: string
definitions.Order_Request.properties.recipe.description: Recipe to use when processing
  the order
definitions.Order_Request.properties.recipe.example: 66c5becb-5482-40c8-a192-cac702e17613
definitions.Order_Request.properties.recipe.maxLength: 36
definitions.Order_Request.properties.recipe.minLength: 36
definitions.Order_Request.properties.recipe.type: string
definitions.Order_Request.properties.sources.description: Array of source IDs to be
  referenced by the order
definitions.Order_Request.properties.sources.example: '[29e2e192-8a57-43b1-be7d-929fc7461650,
  4ce89cce-c96e-4c90-9cfa-75e7fd13adc9]'
definitions.Order_Request.properties.sources.items.type: string
definitions.Order_Request.properties.sources.type: array
definitions.Order_Request.properties.sources.uniqueItems: true
definitions.Order_Request.properties.sources.xml.name: source
definitions.Order_Request.properties.sources.xml.wrapped: true
definitions.Order_Request.required.length: 1
definitions.Order_Request.required[0]: name
definitions.Order_Request.type: object
definitions.Order_Request.xml.name: order
definitions.Source_Request.description: Represents a source to be created or updated.
definitions.Source_Request.properties.encoding.description: Encoding of the source
definitions.Source_Request.properties.encoding.example: UTF-8
definitions.Source_Request.properties.encoding.maxLength: 2.1474836e+09
definitions.Source_Request.properties.encoding.minLength: 1
definitions.Source_Request.properties.encoding.type: string
definitions.Source_Request.properties.folder.description: Folder ID of the folder
  containing the source
definitions.Source_Request.properties.folder.example: 07187b90-2bbb-4508-90f7-6b23139204e2
definitions.Source_Request.properties.folder.maxLength: 36
definitions.Source_Request.properties.folder.minLength: 36
definitions.Source_Request.properties.folder.type: string
definitions.Source_Request.properties.mime.description: MIME type of the source
definitions.Source_Request.properties.mime.enum.length: 8
definitions.Source_Request.properties.mime.enum[0]: text/csv
definitions.Source_Request.properties.mime.enum[1]: text/tab-separated-values
definitions.Source_Request.properties.mime.enum[2]: text/x-bar-separated-values
definitions.Source_Request.properties.mime.enum[3]: text/x-semicolon-separated-values
definitions.Source_Request.properties.mime.enum[4]: application/x-ldjson
definitions.Source_Request.properties.mime.enum[5]: application/xml
definitions.Source_Request.properties.mime.enum[6]: application/vnd.ms-excel
definitions.Source_Request.properties.mime.enum[7]: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
definitions.Source_Request.properties.mime.example: text/csv
definitions.Source_Request.properties.mime.maxLength: 2.1474836e+09
definitions.Source_Request.properties.mime.minLength: 1
definitions.Source_Request.properties.mime.type: string
definitions.Source_Request.properties.name.description: Name of the source
definitions.Source_Request.properties.name.example: File.csv
definitions.Source_Request.properties.name.maxLength: 255
definitions.Source_Request.properties.name.minLength: 1
definitions.Source_Request.properties.name.type: string
definitions.Source_Request.required.length: 2
definitions.Source_Request.required[0]: mime
definitions.Source_Request.required[1]: name
definitions.Source_Request.type: object
definitions.Source_Request.xml.name: source
host: api.wealthport.com
info.description: Wealthport provides a simple, lightweight and open Web API based
  on the Open API 2.0 standard (<a href="https://www.openapis.org" target="_blank">https://www.openapis.org</a>).
  Our APIs offer a variety of operations related to managing Sources, Folders, Orders
  and Recipes. There are operations to submit and track Jobs, upload and download
  data files and many more.
info.termsOfService: https://www.wealthport.com/terms-of-service
info.title: Wealthport
info.version: "1.0"
info.x-apisguru-categories.length: 2
info.x-apisguru-categories[0]: analytics
info.x-apisguru-categories[1]: machine_learning
info.x-logo.backgroundColor: '#FFFFFF'
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_912326535566196737_gQPnTTPZ_400x400.jpg
info.x-origin.length: 1
info.x-origin[0].format: swagger
info.x-origin[0].url: https://wealthport.github.io/wealthport-api-docs/swagger.json
info.x-origin[0].version: "2.0"
info.x-preferred: true
info.x-providerName: wealthport.com
paths./folders.get.description: Retrieves all Folders in the Data Inventory.
paths./folders.get.operationId: retrieveFolders
paths./folders.get.parameters.length: 0
paths./folders.get.produces.length: 1
paths./folders.get.produces[0]: application/json
paths./folders.get.responses.200.description: Folders successfully retrieved
paths./folders.get.responses.200.schema.items.$ref: '#/definitions/Existing_Folder'
paths./folders.get.responses.200.schema.type: array
paths./folders.get.responses.401.description: Invalid or unauthorised API key
paths./folders.get.responses.403.description: No permission to perform operation
paths./folders.get.security.length: 2
paths./folders.get.security[0].Using HTTP Header.length: 0
paths./folders.get.security[1].Using URL Query Parameter.length: 0
paths./folders.get.summary: Retrieve Folders
paths./folders.get.tags.length: 1
paths./folders.get.tags[0]: Folders
paths./folders.post.consumes.length: 1
paths./folders.post.consumes[0]: application/json
paths./folders.post.description: Creates the specified Folder in the Data Inventory.
paths./folders.post.operationId: createFolder
paths./folders.post.parameters.length: 1
paths./folders.post.parameters[0].description: JSON
paths./folders.post.parameters[0].in: body
paths./folders.post.parameters[0].name: body
paths./folders.post.parameters[0].required: false
paths./folders.post.parameters[0].schema.$ref: '#/definitions/Folder_Request'
paths./folders.post.responses.201.description: Folder successfully created and available
  at the returned URL
paths./folders.post.responses.201.schema.format: url
paths./folders.post.responses.201.schema.type: string
paths./folders.post.responses.400.description: Wrong or missing mandatory arguments
paths./folders.post.responses.401.description: Invalid or unauthorised API key
paths./folders.post.responses.403.description: No permission to perform operation
paths./folders.post.responses.409.description: Folder with same name already exists
paths./folders.post.security.length: 2
paths./folders.post.security[0].Using HTTP Header.length: 0
paths./folders.post.security[1].Using URL Query Parameter.length: 0
paths./folders.post.summary: Create Folder
paths./folders.post.tags.length: 1
paths./folders.post.tags[0]: Folders
paths./folders/{id}.delete.description: Deletes the specified Folder and all contained
  Sources from the Data Inventory.
paths./folders/{id}.delete.operationId: deleteFolder
paths./folders/{id}.delete.parameters.length: 1
paths./folders/{id}.delete.parameters[0].description: Folder ID of the Folder to delete,
  including any Sources contained
paths./folders/{id}.delete.parameters[0].in: path
paths./folders/{id}.delete.parameters[0].name: id
paths./folders/{id}.delete.parameters[0].required: true
paths./folders/{id}.delete.parameters[0].type: string
paths./folders/{id}.delete.responses.204.description: Folder successfully deleted
paths./folders/{id}.delete.responses.400.description: Wrong or missing mandatory arguments
paths./folders/{id}.delete.responses.401.description: Invalid or unauthorised API
  key
paths./folders/{id}.delete.responses.403.description: No permission to perform operation
paths./folders/{id}.delete.responses.404.description: Folder cannot be found
paths./folders/{id}.delete.security.length: 2
paths./folders/{id}.delete.security[0].Using HTTP Header.length: 0
paths./folders/{id}.delete.security[1].Using URL Query Parameter.length: 0
paths./folders/{id}.delete.summary: Delete Folder
paths./folders/{id}.delete.tags.length: 1
paths./folders/{id}.delete.tags[0]: Folders
paths./folders/{id}.get.description: Retrieves the specified Folder.
paths./folders/{id}.get.operationId: retrieveFolder
paths./folders/{id}.get.parameters.length: 1
paths./folders/{id}.get.parameters[0].description: Folder ID of the Folder to retrieve
paths./folders/{id}.get.parameters[0].in: path
paths./folders/{id}.get.parameters[0].name: id
paths./folders/{id}.get.parameters[0].required: true
paths./folders/{id}.get.parameters[0].type: string
paths./folders/{id}.get.produces.length: 1
paths./folders/{id}.get.produces[0]: application/json
paths./folders/{id}.get.responses.200.description: Folder successfully retrieved
paths./folders/{id}.get.responses.200.schema.$ref: '#/definitions/Existing_Folder'
paths./folders/{id}.get.responses.400.description: Wrong or missing mandatory arguments
paths./folders/{id}.get.responses.401.description: Invalid or unauthorised API key
paths./folders/{id}.get.responses.403.description: No permission to perform operation
paths./folders/{id}.get.responses.404.description: Folder cannot be found
paths./folders/{id}.get.security.length: 2
paths./folders/{id}.get.security[0].Using HTTP Header.length: 0
paths./folders/{id}.get.security[1].Using URL Query Parameter.length: 0
paths./folders/{id}.get.summary: Retrieve Folder
paths./folders/{id}.get.tags.length: 1
paths./folders/{id}.get.tags[0]: Folders
paths./folders/{id}.put.consumes.length: 1
paths./folders/{id}.put.consumes[0]: application/json
paths./folders/{id}.put.description: Updates the specified Folder.
paths./folders/{id}.put.operationId: updateFolder
paths./folders/{id}.put.parameters.length: 2
paths./folders/{id}.put.parameters[0].description: JSON
paths./folders/{id}.put.parameters[0].in: body
paths./folders/{id}.put.parameters[0].name: body
paths./folders/{id}.put.parameters[0].required: false
paths./folders/{id}.put.parameters[0].schema.$ref: '#/definitions/Folder_Request'
paths./folders/{id}.put.parameters[1].description: Folder ID of the Folder to update
paths./folders/{id}.put.parameters[1].in: path
paths./folders/{id}.put.parameters[1].name: id
paths./folders/{id}.put.parameters[1].required: true
paths./folders/{id}.put.parameters[1].type: string
paths./folders/{id}.put.responses.200.description: Folder successfully updated
paths./folders/{id}.put.responses.400.description: Wrong or missing mandatory arguments
paths./folders/{id}.put.responses.401.description: Invalid or unauthorised API key
paths./folders/{id}.put.responses.403.description: No permission to perform operation
paths./folders/{id}.put.responses.404.description: Folder cannot be found
paths./folders/{id}.put.responses.409.description: Folder with same name already exists
paths./folders/{id}.put.security.length: 2
paths./folders/{id}.put.security[0].Using HTTP Header.length: 0
paths./folders/{id}.put.security[1].Using URL Query Parameter.length: 0
paths./folders/{id}.put.summary: Update Folder
paths./folders/{id}.put.tags.length: 1
paths./folders/{id}.put.tags[0]: Folders
paths./folders/{id}/sources.delete.description: Deletes all Sources in the specified
  Folder.
paths./folders/{id}/sources.delete.operationId: deleteFolderSources
paths./folders/{id}/sources.delete.parameters.length: 1
paths./folders/{id}/sources.delete.parameters[0].description: Folder ID of the Folder
  to delete all Sources from
paths./folders/{id}/sources.delete.parameters[0].in: path
paths./folders/{id}/sources.delete.parameters[0].name: id
paths./folders/{id}/sources.delete.parameters[0].required: true
paths./folders/{id}/sources.delete.parameters[0].type: string
paths./folders/{id}/sources.delete.responses.204.description: Sources successfully
  deleted
paths./folders/{id}/sources.delete.responses.400.description: Wrong or missing mandatory
  arguments
paths./folders/{id}/sources.delete.responses.401.description: Invalid or unauthorised
  API key
paths./folders/{id}/sources.delete.responses.403.description: No permission to perform
  operation
paths./folders/{id}/sources.delete.responses.404.description: Folder cannot be found
paths./folders/{id}/sources.delete.security.length: 2
paths./folders/{id}/sources.delete.security[0].Using HTTP Header.length: 0
paths./folders/{id}/sources.delete.security[1].Using URL Query Parameter.length: 0
paths./folders/{id}/sources.delete.summary: Delete Sources
paths./folders/{id}/sources.delete.tags.length: 1
paths./folders/{id}/sources.delete.tags[0]: Folders
paths./folders/{id}/sources.get.description: Retrieves all Sources of the specified
  Folder.
paths./folders/{id}/sources.get.operationId: retrieveFolderSources
paths./folders/{id}/sources.get.parameters.length: 1
paths./folders/{id}/sources.get.parameters[0].description: Folder ID of the Folder
  to retrieve its Sources from
paths./folders/{id}/sources.get.parameters[0].in: path
paths./folders/{id}/sources.get.parameters[0].name: id
paths./folders/{id}/sources.get.parameters[0].required: true
paths./folders/{id}/sources.get.parameters[0].type: string
paths./folders/{id}/sources.get.produces.length: 1
paths./folders/{id}/sources.get.produces[0]: application/json
paths./folders/{id}/sources.get.responses.200.description: Sources successfully retrieved
paths./folders/{id}/sources.get.responses.200.schema.$ref: '#/definitions/Existing_Source'
paths./folders/{id}/sources.get.responses.400.description: Wrong or missing mandatory
  arguments
paths./folders/{id}/sources.get.responses.401.description: Invalid or unauthorised
  API key
paths./folders/{id}/sources.get.responses.403.description: No permission to perform
  operation
paths./folders/{id}/sources.get.responses.404.description: Folder cannot be found
paths./folders/{id}/sources.get.security.length: 2
paths./folders/{id}/sources.get.security[0].Using HTTP Header.length: 0
paths./folders/{id}/sources.get.security[1].Using URL Query Parameter.length: 0
paths./folders/{id}/sources.get.summary: Retrieve Sources
paths./folders/{id}/sources.get.tags.length: 1
paths./folders/{id}/sources.get.tags[0]: Folders
paths./jobs/{id}/result.get.description: Returns the result of a finished Job.
paths./jobs/{id}/result.get.operationId: getResult
paths./jobs/{id}/result.get.parameters.length: 1
paths./jobs/{id}/result.get.parameters[0].description: Job ID of the job to retrieve
  its result
paths./jobs/{id}/result.get.parameters[0].in: path
paths./jobs/{id}/result.get.parameters[0].name: id
paths./jobs/{id}/result.get.parameters[0].required: true
paths./jobs/{id}/result.get.parameters[0].type: string
paths./jobs/{id}/result.get.produces.length: 1
paths./jobs/{id}/result.get.produces[0]: text/plain
paths./jobs/{id}/result.get.responses.200.description: Job has finished, potentially
  with errors, result is returned as JSON in the response
paths./jobs/{id}/result.get.responses.200.schema.type: string
paths./jobs/{id}/result.get.responses.201.description: Job has finished successfully,
  resulting source is available at the returned URL
paths./jobs/{id}/result.get.responses.201.schema.format: url
paths./jobs/{id}/result.get.responses.201.schema.type: string
paths./jobs/{id}/result.get.responses.400.description: Wrong or missing mandatory
  arguments, job has not yet finished or is not in a valid state
paths./jobs/{id}/result.get.responses.401.description: Invalid or unauthorised API
  key
paths./jobs/{id}/result.get.responses.403.description: No permission to perform operation
paths./jobs/{id}/result.get.responses.404.description: Job cannot be found
paths./jobs/{id}/result.get.security.length: 2
paths./jobs/{id}/result.get.security[0].Using HTTP Header.length: 0
paths./jobs/{id}/result.get.security[1].Using URL Query Parameter.length: 0
paths./jobs/{id}/result.get.summary: Get Result
paths./jobs/{id}/result.get.tags.length: 1
paths./jobs/{id}/result.get.tags[0]: Orders
paths./jobs/{id}/status.get.description: Retrieves the status of a Job.
paths./jobs/{id}/status.get.operationId: getStatus
paths./jobs/{id}/status.get.parameters.length: 1
paths./jobs/{id}/status.get.parameters[0].description: Job ID of the job to retrieve
  its status
paths./jobs/{id}/status.get.parameters[0].in: path
paths./jobs/{id}/status.get.parameters[0].name: id
paths./jobs/{id}/status.get.parameters[0].required: true
paths./jobs/{id}/status.get.parameters[0].type: string
paths./jobs/{id}/status.get.produces.length: 1
paths./jobs/{id}/status.get.produces[0]: text/plain
paths./jobs/{id}/status.get.responses.200.description: Job has finished, potentially
  with errors, result is available and Job ID is returned
paths./jobs/{id}/status.get.responses.200.headers.Location.description: URL to the
  Get Result operation to retrieve the result
paths./jobs/{id}/status.get.responses.200.headers.Location.format: url
paths./jobs/{id}/status.get.responses.200.headers.Location.type: string
paths./jobs/{id}/status.get.responses.200.schema.type: string
paths./jobs/{id}/status.get.responses.202.description: Job is running, no result available
  yet and Job ID is returned
paths./jobs/{id}/status.get.responses.202.headers.Location.description: URL to the
  Get Status operation to retrieve the result
paths./jobs/{id}/status.get.responses.202.headers.Location.format: url
paths./jobs/{id}/status.get.responses.202.headers.Location.type: string
paths./jobs/{id}/status.get.responses.202.schema.type: string
paths./jobs/{id}/status.get.responses.400.description: Wrong or missing mandatory
  arguments
paths./jobs/{id}/status.get.responses.401.description: Invalid or unauthorised API
  key
paths./jobs/{id}/status.get.responses.403.description: No permission to perform operation
paths./jobs/{id}/status.get.responses.404.description: Job cannot be found
paths./jobs/{id}/status.get.security.length: 2
paths./jobs/{id}/status.get.security[0].Using HTTP Header.length: 0
paths./jobs/{id}/status.get.security[1].Using URL Query Parameter.length: 0
paths./jobs/{id}/status.get.summary: Get Status
paths./jobs/{id}/status.get.tags.length: 1
paths./jobs/{id}/status.get.tags[0]: Orders
paths./orders.get.description: Retrieves all previously submitted Orders.
paths./orders.get.operationId: retrieveOrders
paths./orders.get.parameters.length: 0
paths./orders.get.produces.length: 1
paths./orders.get.produces[0]: application/json
paths./orders.get.responses.200.description: Orders successfully retrieved
paths./orders.get.responses.200.schema.items.$ref: '#/definitions/Existing_Order'
paths./orders.get.responses.200.schema.type: array
paths./orders.get.responses.401.description: Invalid or unauthorised API key
paths./orders.get.responses.403.description: No permission to perform operation
paths./orders.get.security.length: 2
paths./orders.get.security[0].Using HTTP Header.length: 0
paths./orders.get.security[1].Using URL Query Parameter.length: 0
paths./orders.get.summary: Retrieve Orders
paths./orders.get.tags.length: 1
paths./orders.get.tags[0]: Orders
paths./orders.post.consumes.length: 1
paths./orders.post.consumes[0]: application/json
paths./orders.post.description: Creates a new Order to be submitted.<p>Orders reference
  one or more Sources, e.g. uploaded files, as well as one or more Folders (which
  again can contain Sources).The Recipe describes what to do with the referenced sources
  and where to publish the processing result to.</p>
paths./orders.post.operationId: createOrder
paths./orders.post.parameters.length: 1
paths./orders.post.parameters[0].description: JSON
paths./orders.post.parameters[0].in: body
paths./orders.post.parameters[0].name: body
paths./orders.post.parameters[0].required: false
paths./orders.post.parameters[0].schema.$ref: '#/definitions/Order_Request'
paths./orders.post.responses.201.description: Order successfully created and available
  at the returned URL
paths./orders.post.responses.201.schema.format: url
paths./orders.post.responses.201.schema.type: string
paths./orders.post.responses.400.description: Wrong or missing mandatory arguments
paths./orders.post.responses.401.description: Invalid or unauthorised API key
paths./orders.post.responses.403.description: No permission to perform operation
paths./orders.post.security.length: 2
paths./orders.post.security[0].Using HTTP Header.length: 0
paths./orders.post.security[1].Using URL Query Parameter.length: 0
paths./orders.post.summary: Create Order
paths./orders.post.tags.length: 1
paths./orders.post.tags[0]: Orders
paths./orders/{id}.delete.description: Deletes the specified Order.
paths./orders/{id}.delete.operationId: deleteOrder
paths./orders/{id}.delete.parameters.length: 1
paths./orders/{id}.delete.parameters[0].description: Order ID of the order to delete
paths./orders/{id}.delete.parameters[0].in: path
paths./orders/{id}.delete.parameters[0].name: id
paths./orders/{id}.delete.parameters[0].required: true
paths./orders/{id}.delete.parameters[0].type: string
paths./orders/{id}.delete.responses.204.description: Order has been deleted
paths./orders/{id}.delete.responses.400.description: Wrong or missing mandatory arguments
paths./orders/{id}.delete.responses.401.description: Invalid or unauthorised API key
paths./orders/{id}.delete.responses.403.description: No permission to perform operation
paths./orders/{id}.delete.responses.404.description: Order cannot be found
paths./orders/{id}.delete.security.length: 2
paths./orders/{id}.delete.security[0].Using HTTP Header.length: 0
paths./orders/{id}.delete.security[1].Using URL Query Parameter.length: 0
paths./orders/{id}.delete.summary: Delete Order
paths./orders/{id}.delete.tags.length: 1
paths./orders/{id}.delete.tags[0]: Orders
paths./orders/{id}.get.description: Retrieves the specified Order.
paths./orders/{id}.get.operationId: retrieveOrder
paths./orders/{id}.get.parameters.length: 1
paths./orders/{id}.get.parameters[0].description: Order ID of the order to retrieve
paths./orders/{id}.get.parameters[0].in: path
paths./orders/{id}.get.parameters[0].name: id
paths./orders/{id}.get.parameters[0].required: true
paths./orders/{id}.get.parameters[0].type: string
paths./orders/{id}.get.produces.length: 1
paths./orders/{id}.get.produces[0]: application/json
paths./orders/{id}.get.responses.200.description: Order successfully retrieved
paths./orders/{id}.get.responses.200.schema.$ref: '#/definitions/Existing_Order'
paths./orders/{id}.get.responses.400.description: Wrong or missing mandatory arguments
paths./orders/{id}.get.responses.401.description: Invalid or unauthorised API key
paths./orders/{id}.get.responses.403.description: No permission to perform operation
paths./orders/{id}.get.responses.404.description: Order cannot be found
paths./orders/{id}.get.security.length: 2
paths./orders/{id}.get.security[0].Using HTTP Header.length: 0
paths./orders/{id}.get.security[1].Using URL Query Parameter.length: 0
paths./orders/{id}.get.summary: Retrieve Order
paths./orders/{id}.get.tags.length: 1
paths./orders/{id}.get.tags[0]: Orders
paths./orders/{id}.put.consumes.length: 1
paths./orders/{id}.put.consumes[0]: application/json
paths./orders/{id}.put.description: Updates the specified Order.
paths./orders/{id}.put.operationId: updateOrder
paths./orders/{id}.put.parameters.length: 2
paths./orders/{id}.put.parameters[0].description: JSON
paths./orders/{id}.put.parameters[0].in: body
paths./orders/{id}.put.parameters[0].name: body
paths./orders/{id}.put.parameters[0].required: false
paths./orders/{id}.put.parameters[0].schema.$ref: '#/definitions/Order_Request'
paths./orders/{id}.put.parameters[1].description: Order ID of the order to update
paths./orders/{id}.put.parameters[1].in: path
paths./orders/{id}.put.parameters[1].name: id
paths./orders/{id}.put.parameters[1].required: true
paths./orders/{id}.put.parameters[1].type: string
paths./orders/{id}.put.responses.200.description: Order successfully updated
paths./orders/{id}.put.responses.400.description: Wrong or missing mandatory arguments
paths./orders/{id}.put.responses.401.description: Invalid or unauthorised API key
paths./orders/{id}.put.responses.403.description: No permission to perform operation
paths./orders/{id}.put.responses.404.description: Order cannot be found
paths./orders/{id}.put.security.length: 2
paths./orders/{id}.put.security[0].Using HTTP Header.length: 0
paths./orders/{id}.put.security[1].Using URL Query Parameter.length: 0
paths./orders/{id}.put.summary: Update Order
paths./orders/{id}.put.tags.length: 1
paths./orders/{id}.put.tags[0]: Orders
paths./orders/{id}/submit.post.description: Submits the specified Order for processing
  and launches a corresponding job.
paths./orders/{id}/submit.post.operationId: submitOrder
paths./orders/{id}/submit.post.parameters.length: 1
paths./orders/{id}/submit.post.parameters[0].description: Order ID of the order to
  submit for processing
paths./orders/{id}/submit.post.parameters[0].in: path
paths./orders/{id}/submit.post.parameters[0].name: id
paths./orders/{id}/submit.post.parameters[0].required: true
paths./orders/{id}/submit.post.parameters[0].type: string
paths./orders/{id}/submit.post.produces.length: 1
paths./orders/{id}/submit.post.produces[0]: text/plain
paths./orders/{id}/submit.post.responses.202.description: Order has been submitted,
  Job is running and Job ID is returned
paths./orders/{id}/submit.post.responses.202.headers.Location.description: URL to
  the Get Status operation to poll for processing status updates
paths./orders/{id}/submit.post.responses.202.headers.Location.format: url
paths./orders/{id}/submit.post.responses.202.headers.Location.type: string
paths./orders/{id}/submit.post.responses.400.description: Wrong or missing mandatory
  arguments, order has no recipe or is not valid otherwise
paths./orders/{id}/submit.post.responses.401.description: Invalid or unauthorised
  API key
paths./orders/{id}/submit.post.responses.403.description: No permission to perform
  operation
paths./orders/{id}/submit.post.responses.404.description: Order cannot be found
paths./orders/{id}/submit.post.security.length: 2
paths./orders/{id}/submit.post.security[0].Using HTTP Header.length: 0
paths./orders/{id}/submit.post.security[1].Using URL Query Parameter.length: 0
paths./orders/{id}/submit.post.summary: Submit Order
paths./orders/{id}/submit.post.tags.length: 1
paths./orders/{id}/submit.post.tags[0]: Orders
paths./recipes.get.description: Retrieves all available Recipes.
paths./recipes.get.operationId: retrieveRecipes
paths./recipes.get.parameters.length: 0
paths./recipes.get.produces.length: 1
paths./recipes.get.produces[0]: application/json
paths./recipes.get.responses.200.description: Recipes successfully retrieved
paths./recipes.get.responses.200.schema.items.$ref: '#/definitions/Existing_Recipe'
paths./recipes.get.responses.200.schema.type: array
paths./recipes.get.responses.401.description: Invalid or unauthorised API key
paths./recipes.get.responses.403.description: No permission to perform operation
paths./recipes.get.security.length: 2
paths./recipes.get.security[0].Using HTTP Header.length: 0
paths./recipes.get.security[1].Using URL Query Parameter.length: 0
paths./recipes.get.summary: Retrieve Recipes
paths./recipes.get.tags.length: 1
paths./recipes.get.tags[0]: Recipes
paths./recipes/{id}.get.description: Retrieves the specified Recipe.
paths./recipes/{id}.get.operationId: retrieveRecipe
paths./recipes/{id}.get.parameters.length: 1
paths./recipes/{id}.get.parameters[0].description: Recipe ID of the recipe to retrieve
paths./recipes/{id}.get.parameters[0].in: path
paths./recipes/{id}.get.parameters[0].name: id
paths./recipes/{id}.get.parameters[0].required: true
paths./recipes/{id}.get.parameters[0].type: string
paths./recipes/{id}.get.produces.length: 1
paths./recipes/{id}.get.produces[0]: application/json
paths./recipes/{id}.get.responses.200.description: Recipe successfully retrieved
paths./recipes/{id}.get.responses.200.schema.$ref: '#/definitions/Existing_Recipe'
paths./recipes/{id}.get.responses.400.description: Wrong or missing mandatory arguments
paths./recipes/{id}.get.responses.401.description: Invalid or unauthorised API key
paths./recipes/{id}.get.responses.403.description: No permission to perform operation
paths./recipes/{id}.get.responses.404.description: Recipe cannot be found
paths./recipes/{id}.get.security.length: 2
paths./recipes/{id}.get.security[0].Using HTTP Header.length: 0
paths./recipes/{id}.get.security[1].Using URL Query Parameter.length: 0
paths./recipes/{id}.get.summary: Retrieve Recipe
paths./recipes/{id}.get.tags.length: 1
paths./recipes/{id}.get.tags[0]: Recipes
paths./recipes/{id}/instructions.get.description: Retrieves the instructions of the
  specified Recipe.
paths./recipes/{id}/instructions.get.operationId: retrieveInstructions
paths./recipes/{id}/instructions.get.parameters.length: 1
paths./recipes/{id}/instructions.get.parameters[0].description: Recipe ID of the recipe
  whose instructions to retrieve
paths./recipes/{id}/instructions.get.parameters[0].in: path
paths./recipes/{id}/instructions.get.parameters[0].name: id
paths./recipes/{id}/instructions.get.parameters[0].required: true
paths./recipes/{id}/instructions.get.parameters[0].type: string
paths./recipes/{id}/instructions.get.produces.length: 1
paths./recipes/{id}/instructions.get.produces[0]: application/json
paths./recipes/{id}/instructions.get.responses.200.description: Instructions successfully
  retrieved
paths./recipes/{id}/instructions.get.responses.200.schema.type: string
paths./recipes/{id}/instructions.get.responses.400.description: Wrong or missing mandatory
  arguments
paths./recipes/{id}/instructions.get.responses.401.description: Invalid or unauthorised
  API key
paths./recipes/{id}/instructions.get.responses.403.description: No permission to perform
  operation
paths./recipes/{id}/instructions.get.responses.404.description: Recipe cannot be found
paths./recipes/{id}/instructions.get.security.length: 2
paths./recipes/{id}/instructions.get.security[0].Using HTTP Header.length: 0
paths./recipes/{id}/instructions.get.security[1].Using URL Query Parameter.length: 0
paths./recipes/{id}/instructions.get.summary: Retrieve Instructions
paths./recipes/{id}/instructions.get.tags.length: 1
paths./recipes/{id}/instructions.get.tags[0]: Recipes
paths./recipes/{id}/instructions.put.consumes.length: 1
paths./recipes/{id}/instructions.put.consumes[0]: application/json
paths./recipes/{id}/instructions.put.description: Updates the instructions of the
  specified Recipe.
paths./recipes/{id}/instructions.put.operationId: updateInstructions
paths./recipes/{id}/instructions.put.parameters.length: 2
paths./recipes/{id}/instructions.put.parameters[0].description: Recipe ID of the recipe
  whose instructions to update
paths./recipes/{id}/instructions.put.parameters[0].in: path
paths./recipes/{id}/instructions.put.parameters[0].name: id
paths./recipes/{id}/instructions.put.parameters[0].required: true
paths./recipes/{id}/instructions.put.parameters[0].type: string
paths./recipes/{id}/instructions.put.parameters[1].description: JSON instructions
  to update the Recipe
paths./recipes/{id}/instructions.put.parameters[1].in: body
paths./recipes/{id}/instructions.put.parameters[1].name: body
paths./recipes/{id}/instructions.put.parameters[1].required: false
paths./recipes/{id}/instructions.put.parameters[1].schema.type: string
paths./recipes/{id}/instructions.put.responses.200.description: Instructions successfully
  updated
paths./recipes/{id}/instructions.put.responses.400.description: Wrong or missing mandatory
  arguments
paths./recipes/{id}/instructions.put.responses.401.description: Invalid or unauthorised
  API key
paths./recipes/{id}/instructions.put.responses.403.description: No permission to perform
  operation
paths./recipes/{id}/instructions.put.responses.404.description: Recipe cannot be found
paths./recipes/{id}/instructions.put.security.length: 2
paths./recipes/{id}/instructions.put.security[0].Using HTTP Header.length: 0
paths./recipes/{id}/instructions.put.security[1].Using URL Query Parameter.length: 0
paths./recipes/{id}/instructions.put.summary: Update Instructions
paths./recipes/{id}/instructions.put.tags.length: 1
paths./recipes/{id}/instructions.put.tags[0]: Recipes
paths./sources.get.description: Retrieves all Sources stored in the Data Inventory.
paths./sources.get.operationId: retrieveSources
paths./sources.get.parameters.length: 0
paths./sources.get.produces.length: 1
paths./sources.get.produces[0]: application/json
paths./sources.get.responses.200.description: Sources successfully retrieved
paths./sources.get.responses.200.schema.items.$ref: '#/definitions/Existing_Source'
paths./sources.get.responses.200.schema.type: array
paths./sources.get.responses.401.description: Invalid or unauthorised API key
paths./sources.get.responses.403.description: No permission to perform operation
paths./sources.get.security.length: 2
paths./sources.get.security[0].Using HTTP Header.length: 0
paths./sources.get.security[1].Using URL Query Parameter.length: 0
paths./sources.get.summary: Retrieve Sources
paths./sources.get.tags.length: 1
paths./sources.get.tags[0]: Sources
paths./sources.post.consumes.length: 1
paths./sources.post.consumes[0]: application/json
paths./sources.post.description: Creates the specified Source.<p>Sources are either
  uploaded files or a reference to a database. They are referenced in orders to specify
  which data needs processing.</p><p>Most clients should probably use the Upload File
  API which implicitly creates a new source on successful file upload.</p>
paths./sources.post.operationId: createSource
paths./sources.post.parameters.length: 1
paths./sources.post.parameters[0].description: JSON
paths./sources.post.parameters[0].in: body
paths./sources.post.parameters[0].name: body
paths./sources.post.parameters[0].required: false
paths./sources.post.parameters[0].schema.$ref: '#/definitions/Source_Request'
paths./sources.post.responses.201.description: Source successfully created and available
  at the returned URL
paths./sources.post.responses.201.schema.format: url
paths./sources.post.responses.201.schema.type: string
paths./sources.post.responses.400.description: Wrong or missing mandatory arguments
paths./sources.post.responses.401.description: Invalid or unauthorised API key
paths./sources.post.responses.403.description: No permission to perform operation
paths./sources.post.security.length: 2
paths./sources.post.security[0].Using HTTP Header.length: 0
paths./sources.post.security[1].Using URL Query Parameter.length: 0
paths./sources.post.summary: Create Source
paths./sources.post.tags.length: 1
paths./sources.post.tags[0]: Sources
paths./sources/{id}.delete.description: Deletes the specified Source.
paths./sources/{id}.delete.operationId: deleteSource
paths./sources/{id}.delete.parameters.length: 1
paths./sources/{id}.delete.parameters[0].description: Source ID of the Source to delete
paths./sources/{id}.delete.parameters[0].in: path
paths./sources/{id}.delete.parameters[0].name: id
paths./sources/{id}.delete.parameters[0].required: true
paths./sources/{id}.delete.parameters[0].type: string
paths./sources/{id}.delete.responses.204.description: Source successfully deleted
paths./sources/{id}.delete.responses.400.description: Wrong or missing mandatory arguments
paths./sources/{id}.delete.responses.401.description: Invalid or unauthorised API
  key
paths./sources/{id}.delete.responses.403.description: No permission to perform operation
paths./sources/{id}.delete.responses.404.description: Source cannot be found
paths./sources/{id}.delete.security.length: 2
paths./sources/{id}.delete.security[0].Using HTTP Header.length: 0
paths./sources/{id}.delete.security[1].Using URL Query Parameter.length: 0
paths./sources/{id}.delete.summary: Delete Source
paths./sources/{id}.delete.tags.length: 1
paths./sources/{id}.delete.tags[0]: Sources
paths./sources/{id}.get.description: Retrieves the specified Source.
paths./sources/{id}.get.operationId: retrieveSource
paths./sources/{id}.get.parameters.length: 1
paths./sources/{id}.get.parameters[0].description: Source ID of the source to retrieve
paths./sources/{id}.get.parameters[0].in: path
paths./sources/{id}.get.parameters[0].name: id
paths./sources/{id}.get.parameters[0].required: true
paths./sources/{id}.get.parameters[0].type: string
paths./sources/{id}.get.produces.length: 1
paths./sources/{id}.get.produces[0]: application/json
paths./sources/{id}.get.responses.200.description: Source successfully retrieved
paths./sources/{id}.get.responses.200.schema.$ref: '#/definitions/Existing_Source'
paths./sources/{id}.get.responses.400.description: Wrong or missing mandatory arguments
paths./sources/{id}.get.responses.401.description: Invalid or unauthorised API key
paths./sources/{id}.get.responses.403.description: No permission to perform operation
paths./sources/{id}.get.responses.404.description: Source cannot be found
paths./sources/{id}.get.security.length: 2
paths./sources/{id}.get.security[0].Using HTTP Header.length: 0
paths./sources/{id}.get.security[1].Using URL Query Parameter.length: 0
paths./sources/{id}.get.summary: Retrieve Source
paths./sources/{id}.get.tags.length: 1
paths./sources/{id}.get.tags[0]: Sources
paths./sources/{id}.put.consumes.length: 1
paths./sources/{id}.put.consumes[0]: application/json
paths./sources/{id}.put.description: Updates the specified Source.
paths./sources/{id}.put.operationId: updateSource
paths./sources/{id}.put.parameters.length: 2
paths./sources/{id}.put.parameters[0].description: JSON
paths./sources/{id}.put.parameters[0].in: body
paths./sources/{id}.put.parameters[0].name: body
paths./sources/{id}.put.parameters[0].required: false
paths./sources/{id}.put.parameters[0].schema.$ref: '#/definitions/Source_Request'
paths./sources/{id}.put.parameters[1].description: Source ID of Source to update
paths./sources/{id}.put.parameters[1].in: path
paths./sources/{id}.put.parameters[1].name: id
paths./sources/{id}.put.parameters[1].required: true
paths./sources/{id}.put.parameters[1].type: string
paths./sources/{id}.put.responses.200.description: Source successfully updated
paths./sources/{id}.put.responses.400.description: Wrong or missing mandatory arguments
paths./sources/{id}.put.responses.401.description: Invalid or unauthorised API key
paths./sources/{id}.put.responses.403.description: No permission to perform operation
paths./sources/{id}.put.responses.404.description: Source cannot be found
paths./sources/{id}.put.security.length: 2
paths./sources/{id}.put.security[0].Using HTTP Header.length: 0
paths./sources/{id}.put.security[1].Using URL Query Parameter.length: 0
paths./sources/{id}.put.summary: Update Source
paths./sources/{id}.put.tags.length: 1
paths./sources/{id}.put.tags[0]: Sources
paths./sources/{id}/download.get.description: Initiates a file download and returns
  the URL where to download the file from.<p>Calling this API generates a secure,
  unique and time-restricted URL where the file can be downloaded from. The URL is
  available in the <pre>Location</pre> HTTP header of the response. The time restriction
  of the URL is availablein the <pre>Cache-Control</pre> HTTP header of the response.Clients
  may perform a <pre>HTTP GET</pre> request on the URL to download the file.</p>
paths./sources/{id}/download.get.operationId: getDownloadUrl
paths./sources/{id}/download.get.parameters.length: 1
paths./sources/{id}/download.get.parameters[0].description: Source ID of file to download
paths./sources/{id}/download.get.parameters[0].in: path
paths./sources/{id}/download.get.parameters[0].name: id
paths./sources/{id}/download.get.parameters[0].required: true
paths./sources/{id}/download.get.parameters[0].type: string
paths./sources/{id}/download.get.produces.length: 1
paths./sources/{id}/download.get.produces[0]: text/plain
paths./sources/{id}/download.get.responses.200.description: Source file download initiated
paths./sources/{id}/download.get.responses.200.headers.Location.description: URL where
  to download the file from
paths./sources/{id}/download.get.responses.200.headers.Location.format: url
paths./sources/{id}/download.get.responses.200.headers.Location.type: string
paths./sources/{id}/download.get.responses.200.schema.type: string
paths./sources/{id}/download.get.responses.400.description: Wrong or missing mandatory
  argument
paths./sources/{id}/download.get.responses.401.description: Invalid or unauthorised
  API key
paths./sources/{id}/download.get.responses.403.description: No permission to perform
  operation
paths./sources/{id}/download.get.responses.404.description: Source not found
paths./sources/{id}/download.get.security.length: 2
paths./sources/{id}/download.get.security[0].Using HTTP Header.length: 0
paths./sources/{id}/download.get.security[1].Using URL Query Parameter.length: 0
paths./sources/{id}/download.get.summary: Download File
paths./sources/{id}/download.get.tags.length: 1
paths./sources/{id}/download.get.tags[0]: Sources
paths./sources/upload.put.description: Initiates a file upload and returns the URL
  where to upload the file to.<p>Calling this API generates a secure, unique and time-restricted
  URL where the file can be uploaded to. The URL is available in the <pre>Location</pre>
  HTTP header of the response. The temporal validity of the URL is available in the
  <pre>Cache-Control</pre> HTTP header of the response.Clients may perform a <pre>HTTP
  PUT</pre> request on the URL to upload the file using a form where a file <pre>sample.csv</pre>
  is passed as property <pre>file=sample.csv</pre>. For security reasons, clients
  must pass all HTTP headers as returned by the <pre>X-WP-Upload-Headers</pre> in
  the response, together with their values. This procedure ensures a secure, encrypted
  file upload.</p><p>Note that calling this API automatically generates a Source,
  there is no need to call the Create Source API.</p>
paths./sources/upload.put.operationId: getUploadUrl
paths./sources/upload.put.parameters.length: 5
paths./sources/upload.put.parameters[0].description: Name of the source to create.
  The name must correspond to the exact file name of the file being uploaded.
paths./sources/upload.put.parameters[0].in: query
paths./sources/upload.put.parameters[0].name: name
paths./sources/upload.put.parameters[0].required: true
paths./sources/upload.put.parameters[0].type: string
paths./sources/upload.put.parameters[1].description: Existing source ID to create
  a new version from
paths./sources/upload.put.parameters[1].in: query
paths./sources/upload.put.parameters[1].name: source
paths./sources/upload.put.parameters[1].required: false
paths./sources/upload.put.parameters[1].type: string
paths./sources/upload.put.parameters[2].description: Folder ID where to upload source
  to
paths./sources/upload.put.parameters[2].in: query
paths./sources/upload.put.parameters[2].name: folder
paths./sources/upload.put.parameters[2].required: false
paths./sources/upload.put.parameters[2].type: string
paths./sources/upload.put.parameters[3].description: MIME type of the source file
paths./sources/upload.put.parameters[3].in: query
paths./sources/upload.put.parameters[3].name: contentType
paths./sources/upload.put.parameters[3].required: false
paths./sources/upload.put.parameters[3].type: string
paths./sources/upload.put.parameters[4].description: Encoding of the source file
paths./sources/upload.put.parameters[4].in: query
paths./sources/upload.put.parameters[4].name: encoding
paths./sources/upload.put.parameters[4].required: false
paths./sources/upload.put.parameters[4].type: string
paths./sources/upload.put.produces.length: 1
paths./sources/upload.put.produces[0]: text/plain
paths./sources/upload.put.responses.202.description: Source file upload initiated
paths./sources/upload.put.responses.202.headers.Location.description: URL where to
  upload the source file to
paths./sources/upload.put.responses.202.headers.Location.format: url
paths./sources/upload.put.responses.202.headers.Location.type: string
paths./sources/upload.put.responses.202.headers.X-WP-Upload-Headers.description: Comma-separated
  list of HTTP headers from the response whose values need to be passed again as HTTP
  headers to the <pre>HTTP PUT</pre> request when uploading the source file
paths./sources/upload.put.responses.202.headers.X-WP-Upload-Headers.type: string
paths./sources/upload.put.responses.202.schema.type: string
paths./sources/upload.put.responses.400.description: Wrong or missing mandatory argument
paths./sources/upload.put.responses.401.description: Invalid or unauthorised API key
paths./sources/upload.put.responses.403.description: No permission to perform operation
paths./sources/upload.put.security.length: 2
paths./sources/upload.put.security[0].Using HTTP Header.length: 0
paths./sources/upload.put.security[1].Using URL Query Parameter.length: 0
paths./sources/upload.put.summary: Upload File
paths./sources/upload.put.tags.length: 1
paths./sources/upload.put.tags[0]: Sources
schemes.length: 1
schemes[0]: https
securityDefinitions.Using HTTP Header.in: header
securityDefinitions.Using HTTP Header.name: X-API-Key
securityDefinitions.Using HTTP Header.type: apiKey
securityDefinitions.Using URL Query Parameter.in: query
securityDefinitions.Using URL Query Parameter.name: apikey
securityDefinitions.Using URL Query Parameter.type: apiKey
swagger: "2.0"
tags.length: 4
tags[0].name: Folders
tags[1].name: Orders
tags[2].name: Recipes
tags[3].name: Sources

basePath = "/"
host = "api.datumbox.com"
"info.description" = "Datumbox offers a Machine Learning platform composed of 14 classifiers and Natural Language processing functions. Functions include sentiment analysis, topic classification, readability assessment, language detection, and much more."
"info.title" = "DatumBox"
"info.version" = "1.0"
"info.x-apisguru-categories.length" = 2
"info.x-apisguru-categories[0]" = "machine_learning"
"info.x-apisguru-categories[1]" = "text"
"info.x-logo.url" = "https://api.apis.guru/v2/cache/logo/http_www.datumbox.com_img_logo.png"
"info.x-origin.length" = 1
"info.x-origin[0].converter.url" = "https://github.com/lucybot/api-spec-converter"
"info.x-origin[0].converter.version" = "2.5.0"
"info.x-origin[0].format" = "swagger"
"info.x-origin[0].url" = "http://www.datumbox.com/api-sandbox/api-docs"
"info.x-origin[0].version" = "1.2"
"info.x-preferred" = true
"info.x-providerName" = "datumbox.com"
"paths./1.0/AdultContentDetection.json.post.deprecated" = false
"paths./1.0/AdultContentDetection.json.post.description" = "The Adult Content Detection function classifies the documents as adult or noadult based on their context. It can be used to detect whether a document contains content unsuitable for minors."
"paths./1.0/AdultContentDetection.json.post.operationId" = "AdultContentDetection"
"paths./1.0/AdultContentDetection.json.post.parameters.length" = 2
"paths./1.0/AdultContentDetection.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/AdultContentDetection.json.post.parameters[0].in" = "formData"
"paths./1.0/AdultContentDetection.json.post.parameters[0].name" = "api_key"
"paths./1.0/AdultContentDetection.json.post.parameters[0].required" = true
"paths./1.0/AdultContentDetection.json.post.parameters[0].type" = "string"
"paths./1.0/AdultContentDetection.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/AdultContentDetection.json.post.parameters[1].in" = "formData"
"paths./1.0/AdultContentDetection.json.post.parameters[1].name" = "text"
"paths./1.0/AdultContentDetection.json.post.parameters[1].required" = true
"paths./1.0/AdultContentDetection.json.post.parameters[1].type" = "string"
"paths./1.0/AdultContentDetection.json.post.responses.200.description" = "No response was specified"
"paths./1.0/AdultContentDetection.json.post.summary" = "Classifies the Document as adult or noadult"
"paths./1.0/AdultContentDetection.json.post.tags.length" = 1
"paths./1.0/AdultContentDetection.json.post.tags[0]" = "Document-Classification"
"paths./1.0/CommercialDetection.json.post.deprecated" = false
"paths./1.0/CommercialDetection.json.post.description" = "The Commercial Detection function labels the documents as commercial or non-commercial based on their keywords and expressions. It can be used to detect whether a website is commercial or not."
"paths./1.0/CommercialDetection.json.post.operationId" = "CommercialDetection"
"paths./1.0/CommercialDetection.json.post.parameters.length" = 2
"paths./1.0/CommercialDetection.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/CommercialDetection.json.post.parameters[0].in" = "formData"
"paths./1.0/CommercialDetection.json.post.parameters[0].name" = "api_key"
"paths./1.0/CommercialDetection.json.post.parameters[0].required" = true
"paths./1.0/CommercialDetection.json.post.parameters[0].type" = "string"
"paths./1.0/CommercialDetection.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/CommercialDetection.json.post.parameters[1].in" = "formData"
"paths./1.0/CommercialDetection.json.post.parameters[1].name" = "text"
"paths./1.0/CommercialDetection.json.post.parameters[1].required" = true
"paths./1.0/CommercialDetection.json.post.parameters[1].type" = "string"
"paths./1.0/CommercialDetection.json.post.responses.200.description" = "No response was specified"
"paths./1.0/CommercialDetection.json.post.summary" = "Classifies the Document as commercial or nocommercial"
"paths./1.0/CommercialDetection.json.post.tags.length" = 1
"paths./1.0/CommercialDetection.json.post.tags[0]" = "Document-Classification"
"paths./1.0/DocumentSimilarity.json.post.deprecated" = false
"paths./1.0/DocumentSimilarity.json.post.description" = "The Document Similarity function estimates the degree of similarity between two documents. It can be used to detect duplicate webpages or detect plagiarism."
"paths./1.0/DocumentSimilarity.json.post.operationId" = "DocumentSimilarity"
"paths./1.0/DocumentSimilarity.json.post.parameters.length" = 3
"paths./1.0/DocumentSimilarity.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/DocumentSimilarity.json.post.parameters[0].in" = "formData"
"paths./1.0/DocumentSimilarity.json.post.parameters[0].name" = "api_key"
"paths./1.0/DocumentSimilarity.json.post.parameters[0].required" = true
"paths./1.0/DocumentSimilarity.json.post.parameters[0].type" = "string"
"paths./1.0/DocumentSimilarity.json.post.parameters[1].description" = "The first text. It should not contain HTML tags."
"paths./1.0/DocumentSimilarity.json.post.parameters[1].in" = "formData"
"paths./1.0/DocumentSimilarity.json.post.parameters[1].name" = "original"
"paths./1.0/DocumentSimilarity.json.post.parameters[1].required" = true
"paths./1.0/DocumentSimilarity.json.post.parameters[1].type" = "string"
"paths./1.0/DocumentSimilarity.json.post.parameters[2].description" = "The second text. It should not contain HTML tags."
"paths./1.0/DocumentSimilarity.json.post.parameters[2].in" = "formData"
"paths./1.0/DocumentSimilarity.json.post.parameters[2].name" = "copy"
"paths./1.0/DocumentSimilarity.json.post.parameters[2].required" = true
"paths./1.0/DocumentSimilarity.json.post.parameters[2].type" = "string"
"paths./1.0/DocumentSimilarity.json.post.responses.200.description" = "No response was specified"
"paths./1.0/DocumentSimilarity.json.post.summary" = "Estimates the similarity between 2 Documents"
"paths./1.0/DocumentSimilarity.json.post.tags.length" = 1
"paths./1.0/DocumentSimilarity.json.post.tags[0]" = "Metrics"
"paths./1.0/EducationalDetection.json.post.deprecated" = false
"paths./1.0/EducationalDetection.json.post.description" = "The Educational Detection function classifies the documents as educational or non-educational based on their context. It can be used to detect whether a website is educational or not."
"paths./1.0/EducationalDetection.json.post.operationId" = "EducationalDetection"
"paths./1.0/EducationalDetection.json.post.parameters.length" = 2
"paths./1.0/EducationalDetection.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/EducationalDetection.json.post.parameters[0].in" = "formData"
"paths./1.0/EducationalDetection.json.post.parameters[0].name" = "api_key"
"paths./1.0/EducationalDetection.json.post.parameters[0].required" = true
"paths./1.0/EducationalDetection.json.post.parameters[0].type" = "string"
"paths./1.0/EducationalDetection.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/EducationalDetection.json.post.parameters[1].in" = "formData"
"paths./1.0/EducationalDetection.json.post.parameters[1].name" = "text"
"paths./1.0/EducationalDetection.json.post.parameters[1].required" = true
"paths./1.0/EducationalDetection.json.post.parameters[1].type" = "string"
"paths./1.0/EducationalDetection.json.post.responses.200.description" = "No response was specified"
"paths./1.0/EducationalDetection.json.post.summary" = "Classifies the Document as educational or noeducational"
"paths./1.0/EducationalDetection.json.post.tags.length" = 1
"paths./1.0/EducationalDetection.json.post.tags[0]" = "Document-Classification"
"paths./1.0/GenderDetection.json.post.deprecated" = false
"paths./1.0/GenderDetection.json.post.description" = "The Gender Detection function identifies if a particular document is written-by or targets-to a man or a woman based on the context, the words and the idioms found in the text."
"paths./1.0/GenderDetection.json.post.operationId" = "GenderDetection"
"paths./1.0/GenderDetection.json.post.parameters.length" = 2
"paths./1.0/GenderDetection.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/GenderDetection.json.post.parameters[0].in" = "formData"
"paths./1.0/GenderDetection.json.post.parameters[0].name" = "api_key"
"paths./1.0/GenderDetection.json.post.parameters[0].required" = true
"paths./1.0/GenderDetection.json.post.parameters[0].type" = "string"
"paths./1.0/GenderDetection.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/GenderDetection.json.post.parameters[1].in" = "formData"
"paths./1.0/GenderDetection.json.post.parameters[1].name" = "text"
"paths./1.0/GenderDetection.json.post.parameters[1].required" = true
"paths./1.0/GenderDetection.json.post.parameters[1].type" = "string"
"paths./1.0/GenderDetection.json.post.responses.200.description" = "No response was specified"
"paths./1.0/GenderDetection.json.post.summary" = "Gender Detection Service"
"paths./1.0/GenderDetection.json.post.tags.length" = 1
"paths./1.0/GenderDetection.json.post.tags[0]" = "Document-Classification"
"paths./1.0/KeywordExtraction.json.post.deprecated" = false
"paths./1.0/KeywordExtraction.json.post.description" = "The Keyword Extraction function enables you to extract from an arbitrary document all the keywords and word-combinations along with their occurrences in the text."
"paths./1.0/KeywordExtraction.json.post.operationId" = "KeywordExtraction"
"paths./1.0/KeywordExtraction.json.post.parameters.length" = 3
"paths./1.0/KeywordExtraction.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/KeywordExtraction.json.post.parameters[0].in" = "formData"
"paths./1.0/KeywordExtraction.json.post.parameters[0].name" = "api_key"
"paths./1.0/KeywordExtraction.json.post.parameters[0].required" = true
"paths./1.0/KeywordExtraction.json.post.parameters[0].type" = "string"
"paths./1.0/KeywordExtraction.json.post.parameters[1].description" = "The number of keyword combinations (n-grams) that you wish to extract."
"paths./1.0/KeywordExtraction.json.post.parameters[1].in" = "formData"
"paths./1.0/KeywordExtraction.json.post.parameters[1].maximum" = 5.0
"paths./1.0/KeywordExtraction.json.post.parameters[1].minimum" = 1.0
"paths./1.0/KeywordExtraction.json.post.parameters[1].name" = "n"
"paths./1.0/KeywordExtraction.json.post.parameters[1].required" = true
"paths./1.0/KeywordExtraction.json.post.parameters[1].type" = "integer"
"paths./1.0/KeywordExtraction.json.post.parameters[2].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/KeywordExtraction.json.post.parameters[2].in" = "formData"
"paths./1.0/KeywordExtraction.json.post.parameters[2].name" = "text"
"paths./1.0/KeywordExtraction.json.post.parameters[2].required" = true
"paths./1.0/KeywordExtraction.json.post.parameters[2].type" = "string"
"paths./1.0/KeywordExtraction.json.post.responses.200.description" = "No response was specified"
"paths./1.0/KeywordExtraction.json.post.summary" = "Extracts the Keywords of the Document"
"paths./1.0/KeywordExtraction.json.post.tags.length" = 1
"paths./1.0/KeywordExtraction.json.post.tags[0]" = "Information-Retrieval"
"paths./1.0/LanguageDetection.json.post.deprecated" = false
"paths./1.0/LanguageDetection.json.post.description" = "The Language Detection function identifies the natural language of the given document based on its words and context. This classifier is able to detect 96 different languages."
"paths./1.0/LanguageDetection.json.post.operationId" = "LanguageDetection"
"paths./1.0/LanguageDetection.json.post.parameters.length" = 2
"paths./1.0/LanguageDetection.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/LanguageDetection.json.post.parameters[0].in" = "formData"
"paths./1.0/LanguageDetection.json.post.parameters[0].name" = "api_key"
"paths./1.0/LanguageDetection.json.post.parameters[0].required" = true
"paths./1.0/LanguageDetection.json.post.parameters[0].type" = "string"
"paths./1.0/LanguageDetection.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/LanguageDetection.json.post.parameters[1].in" = "formData"
"paths./1.0/LanguageDetection.json.post.parameters[1].name" = "text"
"paths./1.0/LanguageDetection.json.post.parameters[1].required" = true
"paths./1.0/LanguageDetection.json.post.parameters[1].type" = "string"
"paths./1.0/LanguageDetection.json.post.responses.200.description" = "No response was specified"
"paths./1.0/LanguageDetection.json.post.summary" = "Identifies the Language of the Document"
"paths./1.0/LanguageDetection.json.post.tags.length" = 1
"paths./1.0/LanguageDetection.json.post.tags[0]" = "Document-Classification"
"paths./1.0/ReadabilityAssessment.json.post.deprecated" = false
"paths./1.0/ReadabilityAssessment.json.post.description" = "The Readability Assessment function determines the degree of readability of a document based on its terms and idioms. The texts are classified as basic, intermediate and advanced depending their difficulty."
"paths./1.0/ReadabilityAssessment.json.post.operationId" = "ReadabilityAssessment"
"paths./1.0/ReadabilityAssessment.json.post.parameters.length" = 2
"paths./1.0/ReadabilityAssessment.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/ReadabilityAssessment.json.post.parameters[0].in" = "formData"
"paths./1.0/ReadabilityAssessment.json.post.parameters[0].name" = "api_key"
"paths./1.0/ReadabilityAssessment.json.post.parameters[0].required" = true
"paths./1.0/ReadabilityAssessment.json.post.parameters[0].type" = "string"
"paths./1.0/ReadabilityAssessment.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/ReadabilityAssessment.json.post.parameters[1].in" = "formData"
"paths./1.0/ReadabilityAssessment.json.post.parameters[1].name" = "text"
"paths./1.0/ReadabilityAssessment.json.post.parameters[1].required" = true
"paths./1.0/ReadabilityAssessment.json.post.parameters[1].type" = "string"
"paths./1.0/ReadabilityAssessment.json.post.responses.200.description" = "No response was specified"
"paths./1.0/ReadabilityAssessment.json.post.summary" = "Evaluates the Readability of the Document"
"paths./1.0/ReadabilityAssessment.json.post.tags.length" = 1
"paths./1.0/ReadabilityAssessment.json.post.tags[0]" = "Document-Classification"
"paths./1.0/SentimentAnalysis.json.post.deprecated" = false
"paths./1.0/SentimentAnalysis.json.post.description" = "The Sentiment Analysis function classifies documents as positive, negative or neutral (lack of sentiment) depending on whether they express a positive, negative or neutral opinion."
"paths./1.0/SentimentAnalysis.json.post.operationId" = "SentimentAnalysis"
"paths./1.0/SentimentAnalysis.json.post.parameters.length" = 2
"paths./1.0/SentimentAnalysis.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/SentimentAnalysis.json.post.parameters[0].in" = "formData"
"paths./1.0/SentimentAnalysis.json.post.parameters[0].name" = "api_key"
"paths./1.0/SentimentAnalysis.json.post.parameters[0].required" = true
"paths./1.0/SentimentAnalysis.json.post.parameters[0].type" = "string"
"paths./1.0/SentimentAnalysis.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/SentimentAnalysis.json.post.parameters[1].in" = "formData"
"paths./1.0/SentimentAnalysis.json.post.parameters[1].name" = "text"
"paths./1.0/SentimentAnalysis.json.post.parameters[1].required" = true
"paths./1.0/SentimentAnalysis.json.post.parameters[1].type" = "string"
"paths./1.0/SentimentAnalysis.json.post.responses.200.description" = "No response was specified"
"paths./1.0/SentimentAnalysis.json.post.summary" = "Identifies the Sentiment of the Document"
"paths./1.0/SentimentAnalysis.json.post.tags.length" = 1
"paths./1.0/SentimentAnalysis.json.post.tags[0]" = "Document-Classification"
"paths./1.0/SpamDetection.json.post.deprecated" = false
"paths./1.0/SpamDetection.json.post.description" = "The Spam Detection function labels documents as spam or nospam by taking into account their context. It can be used to filter out spam emails and comments."
"paths./1.0/SpamDetection.json.post.operationId" = "SpamDetection"
"paths./1.0/SpamDetection.json.post.parameters.length" = 2
"paths./1.0/SpamDetection.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/SpamDetection.json.post.parameters[0].in" = "formData"
"paths./1.0/SpamDetection.json.post.parameters[0].name" = "api_key"
"paths./1.0/SpamDetection.json.post.parameters[0].required" = true
"paths./1.0/SpamDetection.json.post.parameters[0].type" = "string"
"paths./1.0/SpamDetection.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/SpamDetection.json.post.parameters[1].in" = "formData"
"paths./1.0/SpamDetection.json.post.parameters[1].name" = "text"
"paths./1.0/SpamDetection.json.post.parameters[1].required" = true
"paths./1.0/SpamDetection.json.post.parameters[1].type" = "string"
"paths./1.0/SpamDetection.json.post.responses.200.description" = "No response was specified"
"paths./1.0/SpamDetection.json.post.summary" = "Classifies the Document as spam or nospam"
"paths./1.0/SpamDetection.json.post.tags.length" = 1
"paths./1.0/SpamDetection.json.post.tags[0]" = "Document-Classification"
"paths./1.0/SubjectivityAnalysis.json.post.deprecated" = false
"paths./1.0/SubjectivityAnalysis.json.post.description" = "The Subjectivity Analysis function categorizes documents as subjective or objective based on their writing style. Texts that express personal opinions are labeled as subjective and the others as objective."
"paths./1.0/SubjectivityAnalysis.json.post.operationId" = "SubjectivityAnalysis"
"paths./1.0/SubjectivityAnalysis.json.post.parameters.length" = 2
"paths./1.0/SubjectivityAnalysis.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/SubjectivityAnalysis.json.post.parameters[0].in" = "formData"
"paths./1.0/SubjectivityAnalysis.json.post.parameters[0].name" = "api_key"
"paths./1.0/SubjectivityAnalysis.json.post.parameters[0].required" = true
"paths./1.0/SubjectivityAnalysis.json.post.parameters[0].type" = "string"
"paths./1.0/SubjectivityAnalysis.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/SubjectivityAnalysis.json.post.parameters[1].in" = "formData"
"paths./1.0/SubjectivityAnalysis.json.post.parameters[1].name" = "text"
"paths./1.0/SubjectivityAnalysis.json.post.parameters[1].required" = true
"paths./1.0/SubjectivityAnalysis.json.post.parameters[1].type" = "string"
"paths./1.0/SubjectivityAnalysis.json.post.responses.200.description" = "No response was specified"
"paths./1.0/SubjectivityAnalysis.json.post.summary" = "Classifies Document as Subjective or Objective"
"paths./1.0/SubjectivityAnalysis.json.post.tags.length" = 1
"paths./1.0/SubjectivityAnalysis.json.post.tags[0]" = "Document-Classification"
"paths./1.0/TextExtraction.json.post.deprecated" = false
"paths./1.0/TextExtraction.json.post.description" = "The Text Extraction function enables you to extract the important information from a given webpage. Extracting the clear text of the documents is an important step before any other analysis."
"paths./1.0/TextExtraction.json.post.operationId" = "TextExtraction"
"paths./1.0/TextExtraction.json.post.parameters.length" = 2
"paths./1.0/TextExtraction.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/TextExtraction.json.post.parameters[0].in" = "formData"
"paths./1.0/TextExtraction.json.post.parameters[0].name" = "api_key"
"paths./1.0/TextExtraction.json.post.parameters[0].required" = true
"paths./1.0/TextExtraction.json.post.parameters[0].type" = "string"
"paths./1.0/TextExtraction.json.post.parameters[1].description" = "The HTML source of the webpage."
"paths./1.0/TextExtraction.json.post.parameters[1].in" = "formData"
"paths./1.0/TextExtraction.json.post.parameters[1].name" = "text"
"paths./1.0/TextExtraction.json.post.parameters[1].required" = true
"paths./1.0/TextExtraction.json.post.parameters[1].type" = "string"
"paths./1.0/TextExtraction.json.post.responses.200.description" = "No response was specified"
"paths./1.0/TextExtraction.json.post.summary" = "Extracts the clear text from Webpage"
"paths./1.0/TextExtraction.json.post.tags.length" = 1
"paths./1.0/TextExtraction.json.post.tags[0]" = "Information-Retrieval"
"paths./1.0/TopicClassification.json.post.deprecated" = false
"paths./1.0/TopicClassification.json.post.description" = "The Topic Classification function assigns documents in 12 thematic categories based on their keywords, idioms and jargon. It can be used to identify the topic of the texts."
"paths./1.0/TopicClassification.json.post.operationId" = "TopicClassification"
"paths./1.0/TopicClassification.json.post.parameters.length" = 2
"paths./1.0/TopicClassification.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/TopicClassification.json.post.parameters[0].in" = "formData"
"paths./1.0/TopicClassification.json.post.parameters[0].name" = "api_key"
"paths./1.0/TopicClassification.json.post.parameters[0].required" = true
"paths./1.0/TopicClassification.json.post.parameters[0].type" = "string"
"paths./1.0/TopicClassification.json.post.parameters[1].description" = "The text that you want to analyze. It should not contain HTML tags."
"paths./1.0/TopicClassification.json.post.parameters[1].in" = "formData"
"paths./1.0/TopicClassification.json.post.parameters[1].name" = "text"
"paths./1.0/TopicClassification.json.post.parameters[1].required" = true
"paths./1.0/TopicClassification.json.post.parameters[1].type" = "string"
"paths./1.0/TopicClassification.json.post.responses.200.description" = "No response was specified"
"paths./1.0/TopicClassification.json.post.summary" = "Identifies the Topic of the Document"
"paths./1.0/TopicClassification.json.post.tags.length" = 1
"paths./1.0/TopicClassification.json.post.tags[0]" = "Document-Classification"
"paths./1.0/TwitterSentimentAnalysis.json.post.deprecated" = false
"paths./1.0/TwitterSentimentAnalysis.json.post.description" = "The Twitter Sentiment Analysis function allows you to perform Sentiment Analysis on Twitter. It classifies the tweets as positive, negative or neutral depending on their context."
"paths./1.0/TwitterSentimentAnalysis.json.post.operationId" = "TwitterSentimentAnalysis"
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters.length" = 2
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[0].description" = "Your API Key"
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[0].in" = "formData"
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[0].name" = "api_key"
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[0].required" = true
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[0].type" = "string"
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[1].description" = "The text of the tweet that we evaluate."
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[1].in" = "formData"
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[1].name" = "text"
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[1].required" = true
"paths./1.0/TwitterSentimentAnalysis.json.post.parameters[1].type" = "string"
"paths./1.0/TwitterSentimentAnalysis.json.post.responses.200.description" = "No response was specified"
"paths./1.0/TwitterSentimentAnalysis.json.post.summary" = "Identifies the Sentiment of Twitter Messages"
"paths./1.0/TwitterSentimentAnalysis.json.post.tags.length" = 1
"paths./1.0/TwitterSentimentAnalysis.json.post.tags[0]" = "Document-Classification"
"produces.length" = 1
"produces[0]" = "application/json"
"schemes.length" = 1
"schemes[0]" = "http"
swagger = "2.0"
"tags.length" = 3
"tags[0].description" = "Document Classification Functions"
"tags[0].name" = "Document-Classification"
"tags[1].description" = "Information Retrieval Functions"
"tags[1].name" = "Information-Retrieval"
"tags[2].description" = "Metrics"
"tags[2].name" = "Metrics"

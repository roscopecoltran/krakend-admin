syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package datumbox;

message Post10AdultContentDetectionRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10CommercialDetectionRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10DocumentSimilarityRequest {
    // Your API Key
    string api_key = 1;
    // The second text. It should not contain HTML tags.
    string copy = 2;
    // The first text. It should not contain HTML tags.
    string original = 3;
}

message Post10EducationalDetectionRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10GenderDetectionRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10KeywordExtractionRequest {
    // Your API Key
    string api_key = 1;
    // The number of keyword combinations (n-grams) that you wish to extract.
    int32 n = 2;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 3;
}

message Post10LanguageDetectionRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10ReadabilityAssessmentRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10SentimentAnalysisRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10SpamDetectionRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10SubjectivityAnalysisRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10TextExtractionRequest {
    // Your API Key
    string api_key = 1;
    // The HTML source of the webpage.
    string text = 2;
}

message Post10TopicClassificationRequest {
    // Your API Key
    string api_key = 1;
    // The text that you want to analyze. It should not contain HTML tags.
    string text = 2;
}

message Post10TwitterSentimentAnalysisRequest {
    // Your API Key
    string api_key = 1;
    // The text of the tweet that we evaluate.
    string text = 2;
}

service DatumBoxService {
    // Classifies the Document as adult or noadult
    // 
    // The Adult Content Detection function classifies the documents as adult or noadult based on their context. It can be used to detect whether a document contains content unsuitable for minors.
    rpc Post10AdultContentDetection(Post10AdultContentDetectionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/AdultContentDetection.json"
      };
    }
    // Classifies the Document as commercial or nocommercial
    // 
    // The Commercial Detection function labels the documents as commercial or non-commercial based on their keywords and expressions. It can be used to detect whether a website is commercial or not.
    rpc Post10CommercialDetection(Post10CommercialDetectionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/CommercialDetection.json"
      };
    }
    // Estimates the similarity between 2 Documents
    // 
    // The Document Similarity function estimates the degree of similarity between two documents. It can be used to detect duplicate webpages or detect plagiarism.
    rpc Post10DocumentSimilarity(Post10DocumentSimilarityRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/DocumentSimilarity.json"
      };
    }
    // Classifies the Document as educational or noeducational
    // 
    // The Educational Detection function classifies the documents as educational or non-educational based on their context. It can be used to detect whether a website is educational or not.
    rpc Post10EducationalDetection(Post10EducationalDetectionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/EducationalDetection.json"
      };
    }
    // Gender Detection Service
    // 
    // The Gender Detection function identifies if a particular document is written-by or targets-to a man or a woman based on the context, the words and the idioms found in the text.
    rpc Post10GenderDetection(Post10GenderDetectionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/GenderDetection.json"
      };
    }
    // Extracts the Keywords of the Document
    // 
    // The Keyword Extraction function enables you to extract from an arbitrary document all the keywords and word-combinations along with their occurrences in the text.
    rpc Post10KeywordExtraction(Post10KeywordExtractionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/KeywordExtraction.json"
      };
    }
    // Identifies the Language of the Document
    // 
    // The Language Detection function identifies the natural language of the given document based on its words and context. This classifier is able to detect 96 different languages.
    rpc Post10LanguageDetection(Post10LanguageDetectionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/LanguageDetection.json"
      };
    }
    // Evaluates the Readability of the Document
    // 
    // The Readability Assessment function determines the degree of readability of a document based on its terms and idioms. The texts are classified as basic, intermediate and advanced depending their difficulty.
    rpc Post10ReadabilityAssessment(Post10ReadabilityAssessmentRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/ReadabilityAssessment.json"
      };
    }
    // Identifies the Sentiment of the Document
    // 
    // The Sentiment Analysis function classifies documents as positive, negative or neutral (lack of sentiment) depending on whether they express a positive, negative or neutral opinion.
    rpc Post10SentimentAnalysis(Post10SentimentAnalysisRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/SentimentAnalysis.json"
      };
    }
    // Classifies the Document as spam or nospam
    // 
    // The Spam Detection function labels documents as spam or nospam by taking into account their context. It can be used to filter out spam emails and comments.
    rpc Post10SpamDetection(Post10SpamDetectionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/SpamDetection.json"
      };
    }
    // Classifies Document as Subjective or Objective
    // 
    // The Subjectivity Analysis function categorizes documents as subjective or objective based on their writing style. Texts that express personal opinions are labeled as subjective and the others as objective.
    rpc Post10SubjectivityAnalysis(Post10SubjectivityAnalysisRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/SubjectivityAnalysis.json"
      };
    }
    // Extracts the clear text from Webpage
    // 
    // The Text Extraction function enables you to extract the important information from a given webpage. Extracting the clear text of the documents is an important step before any other analysis.
    rpc Post10TextExtraction(Post10TextExtractionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/TextExtraction.json"
      };
    }
    // Identifies the Topic of the Document
    // 
    // The Topic Classification function assigns documents in 12 thematic categories based on their keywords, idioms and jargon. It can be used to identify the topic of the texts.
    rpc Post10TopicClassification(Post10TopicClassificationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/TopicClassification.json"
      };
    }
    // Identifies the Sentiment of Twitter Messages
    // 
    // The Twitter Sentiment Analysis function allows you to perform Sentiment Analysis on Twitter. It classifies the tweets as positive, negative or neutral depending on their context.
    rpc Post10TwitterSentimentAnalysis(Post10TwitterSentimentAnalysisRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//1.0/TwitterSentimentAnalysis.json"
      };
    }
}

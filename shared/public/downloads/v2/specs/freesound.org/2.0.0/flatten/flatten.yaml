basePath: /apiv2
definitions.Sound.properties.id.description: The sound’s unique identifier.
definitions.Sound.properties.id.format: int64
definitions.Sound.properties.id.type: integer
definitions.Sound.properties.name.description: The name user gave to the sound.
definitions.Sound.properties.name.type: string
definitions.Sound.properties.url.description: The URI for this sound on the Freesound
  website.
definitions.Sound.properties.url.type: string
definitions.Sound.type: object
externalDocs.description: Find out more about Freesound
externalDocs.url: https://freesound.org/docs/api/index.html
host: www.freesound.org
info.contact.url: http://groups.google.com/group/freesound-api
info.description: With the Freesound APIv2 you can browse, search, and retrieve information
  about Freesound users, packs, and the sounds themselves of course. You can find
  similar sounds to a given target (based on content analysis) and retrieve automatically
  extracted features from audio files, as well as perform advanced queries combining
  content analysis features and other metadata (tags, etc...). With the Freesound
  APIv2, you can also upload, comment, rate and bookmark sounds!
info.license.name: GNU Affero General Public License v3.0
info.license.url: https://www.gnu.org/licenses/agpl-3.0.html
info.termsOfService: http://freesound.org/help/tos_api/
info.title: Freesound
info.version: 2.0.0
info.x-apisguru-categories.length: 1
info.x-apisguru-categories[0]: media
info.x-logo.backgroundColor: '#FFFFFF'
info.x-logo.url: https://api.apis.guru/v2/cache/logo/http_freesound.org_media_images_logo.png
info.x-origin.length: 1
info.x-origin[0].format: swagger
info.x-origin[0].url: http://miguel76.github.io/freesound-openapi/swagger.json
info.x-origin[0].version: "2.0"
info.x-preferred: true
info.x-providerName: freesound.org
info.x-unofficialSpec: true
paths./search/text.get.description: This resource allows searching sounds in Freesound
  by matching their tags and other kinds of metadata.
paths./search/text.get.operationId: searchText
paths./search/text.get.parameters.length: 6
paths./search/text.get.parameters[0].description: The query! The query is the main
  parameter used to define a query. You can type several terms separated by spaces
  or phrases wrapped inside quote ‘”’ characters. For every term, you can also use
  ‘+’ and ‘-‘ modifier characters to indicate that a term is “mandatory” or “prohibited”
  (by default, terms are considered to be “mandatory”). For example, in a query such
  as query=term_a -term_b, sounds including term_b will not match the search criteria.
  The query does a weighted search over some sound properties including sound tags,
  the sound name, its description, pack name and the sound id. Therefore, searching
  for query=123 will find you sounds with id 1234, sounds that have 1234 in the description,
  in the tags, etc. You’ll find some examples below. Using an empty query (query=
  or query="") will return all Freeosund sounds.
paths./search/text.get.parameters[0].in: query
paths./search/text.get.parameters[0].name: query
paths./search/text.get.parameters[0].required: false
paths./search/text.get.parameters[0].type: string
paths./search/text.get.parameters[1].description: Allows filtering query results.
  See below for more information.
paths./search/text.get.parameters[1].in: query
paths./search/text.get.parameters[1].name: filter
paths./search/text.get.parameters[1].required: false
paths./search/text.get.parameters[1].type: string
paths./search/text.get.parameters[2].description: |-
  Indicates how query results should be sorted. See below for a list of the sorting options. By default `sort=score`. <p> <table>
    <tr>
      <th>Option</th>
      <th>Explanation</th>
    </tr>
    <tr>
      <td>score</td>
      <td>Sort by a relevance score returned by our search engine (default).</td>
    </tr>
    <tr>
      <td>duration_desc
      <td>Sort by the duration of the sounds, longest sounds first.
    </tr>
    <tr>
      <td>duration_asc
      <td>Same as above, but shortest sounds first.
    </tr>
    <tr>
      <td>created_desc
      <td>Sort by the date of when the sound was added. newest sounds first.
    </tr>
    <tr>
      <td>created_asc
      <td>Same as above, but oldest sounds first.
    </tr>
    <tr>
      <td>downloads_desc
      <td>Sort by the number of downloads, most downloaded sounds first.
    </tr>
    <tr>
      <td>downloads_asc
      <td>Same as above, but least downloaded sounds first.
    </tr>
    <tr>
      <td>rating_desc
      <td>Sort by the average rating given to the sounds, highest rated first.
    </tr>
    <tr>
      <td>rating_asc
      <td>Same as above, but lowest rated sounds first.
    </tr>
  </table> </p>
paths./search/text.get.parameters[2].enum.length: 9
paths./search/text.get.parameters[2].enum[0]: score
paths./search/text.get.parameters[2].enum[1]: duration_desc
paths./search/text.get.parameters[2].enum[2]: duration_asc
paths./search/text.get.parameters[2].enum[3]: created_desc
paths./search/text.get.parameters[2].enum[4]: created_asc
paths./search/text.get.parameters[2].enum[5]: downloads_desc
paths./search/text.get.parameters[2].enum[6]: downloads_asc
paths./search/text.get.parameters[2].enum[7]: rating_desc
paths./search/text.get.parameters[2].enum[8]: rating_asc
paths./search/text.get.parameters[2].in: query
paths./search/text.get.parameters[2].name: sort
paths./search/text.get.parameters[2].required: false
paths./search/text.get.parameters[2].type: string
paths./search/text.get.parameters[3].description: 'This parameter represents a boolean
  option to indicate whether to collapse results belonging to sounds of the same pack
  into single entries in the results list. If `group_by_pack=1` and search results
  contain more than one sound that belongs to the same pack, only one sound for each
  distinct pack is returned (sounds with no packs are returned as well). However,
  the returned sound will feature two extra properties to access these other sounds
  omitted from the results list: `n_from_same_pack`: indicates how many other results
  belong to the same pack (and have not been returned) `more_from_same_pack`: uri
  pointing to the list of omitted sound results of the same pack (also including the
  result which has already been returned). See examples below. By default `group_by_pack=0`.'
paths./search/text.get.parameters[3].in: query
paths./search/text.get.parameters[3].maximum: 1
paths./search/text.get.parameters[3].minimum: 0
paths./search/text.get.parameters[3].name: group_by_pack
paths./search/text.get.parameters[3].required: false
paths./search/text.get.parameters[3].type: integer
paths./search/text.get.parameters[4].default: 1
paths./search/text.get.parameters[4].description: Query results are paginated, this
  parameter indicates what page should be returned. By default `page=1`.
paths./search/text.get.parameters[4].in: query
paths./search/text.get.parameters[4].minimum: 1
paths./search/text.get.parameters[4].name: page
paths./search/text.get.parameters[4].required: false
paths./search/text.get.parameters[4].type: integer
paths./search/text.get.parameters[5].default: 15
paths./search/text.get.parameters[5].description: Indicates the number of sounds per
  page to include in the result. By default `page_size=15`, and the maximum is `page_size=150`.
  Not that with bigger `page_size`, more data will need to be transferred.
paths./search/text.get.parameters[5].in: query
paths./search/text.get.parameters[5].maximum: 150
paths./search/text.get.parameters[5].minimum: 0
paths./search/text.get.parameters[5].name: page_size
paths./search/text.get.parameters[5].required: false
paths./search/text.get.parameters[5].type: integer
paths./search/text.get.responses.200.description: successful operation
paths./search/text.get.responses.200.schema.items.$ref: '#/definitions/Sound'
paths./search/text.get.responses.200.schema.type: array
paths./search/text.get.responses.400.description: Invalid status value
paths./search/text.get.summary: Search sounds
paths./search/text.get.tags.length: 1
paths./search/text.get.tags[0]: search
paths./sounds/{soundId}.get.description: This resource allows the retrieval of detailed
  information about a sound.
paths./sounds/{soundId}.get.operationId: getSoundById
paths./sounds/{soundId}.get.parameters.length: 1
paths./sounds/{soundId}.get.parameters[0].description: ID of the sound that needs
  to be fetched
paths./sounds/{soundId}.get.parameters[0].format: int64
paths./sounds/{soundId}.get.parameters[0].in: path
paths./sounds/{soundId}.get.parameters[0].name: soundId
paths./sounds/{soundId}.get.parameters[0].required: true
paths./sounds/{soundId}.get.parameters[0].type: integer
paths./sounds/{soundId}.get.responses.200.description: successful operation
paths./sounds/{soundId}.get.responses.200.schema.$ref: '#/definitions/Sound'
paths./sounds/{soundId}.get.responses.400.description: Invalid ID supplied
paths./sounds/{soundId}.get.responses.404.description: Order not found
paths./sounds/{soundId}.get.summary: Details of a sound
paths./sounds/{soundId}.get.tags.length: 1
paths./sounds/{soundId}.get.tags[0]: sound
produces.length: 2
produces[0]: application/xml
produces[1]: application/json
schemes.length: 1
schemes[0]: http
swagger: "2.0"
tags.length: 5
tags[0].description: Search resources
tags[0].name: search
tags[1].description: Sound resources
tags[1].name: sound
tags[2].description: User resources
tags[2].name: user
tags[3].description: Pack resources
tags[3].name: pack
tags[4].description: Other resources
tags[4].name: other

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package neutrinoapi;

message PostBadWordFilterRequest {
    // The character to use to censor out the bad words found
    string censor_character = 1;
    // The text content to check. This can be either a URL to load content from or an actual content string
    string content = 2;
    enum PostBadWordFilterRequest_Output_case {
        POSTBADWORDFILTERREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostBadWordFilterRequest_Output_case output_case = 3;
}

message PostBinLookupRequest {
    // The BIN or IIN number (the first 6 digits of a credit card number)
    string bin_number = 1;
    // Pass in a customers remote IP address. The API will then determine the country of the IP address and match it against the BIN country. This feature is designed for fraud prevention and detection checks.
    string customer_ip = 2;
    enum PostBinLookupRequest_Output_case {
        POSTBINLOOKUPREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostBinLookupRequest_Output_case output_case = 3;
}

message PostCodeHighlightRequest {
    // Add links on source code keywords to the relevant language documentation
    bool add_keyword_links = 1;
    // The source content. This can be either a URL to load from or an actual content string
    string content = 2;
    // The code type. See the API docs for all supported types
    string type = 3;
}

message PostConvertRequest {
    // The type of the value to convert from
    string from_type = 1;
    // The value to convert from
    string from_value = 2;
    enum PostConvertRequest_Output_case {
        POSTCONVERTREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostConvertRequest_Output_case output_case = 3;
    // The type to convert to
    string to_type = 4;
}

message PostEmailValidateRequest {
    // The email address
    string email = 1;
    // Automatically attempt to fix typos in the address
    bool fix_typos = 2;
    enum PostEmailValidateRequest_Output_case {
        POSTEMAILVALIDATEREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostEmailValidateRequest_Output_case output_case = 3;
}

message PostGeocodeAddressRequest {
    // The address or partial address to try and locate
    string address = 1;
    // The ISO 2-letter country code to be biased towards (default is no country bias)
    string country_code = 2;
    // If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. We use a combination of approximate string matching and data cleansing to find possible location matches
    bool fuzzy_search = 3;
    // The language to display results in, available languages are: de, en, es, fr, it, pt, ru
    string language_code = 4;
    enum PostGeocodeAddressRequest_Output_case {
        POSTGEOCODEADDRESSREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostGeocodeAddressRequest_Output_case output_case = 5;
}

message PostGeocodeReverseRequest {
    // The language to display results in, available languages are: de, en, es, fr, it, pt, ru
    string language_code = 1;
    // The location latitude
    double latitude = 2;
    // The location longitude
    double longitude = 3;
    enum PostGeocodeReverseRequest_Output_case {
        POSTGEOCODEREVERSEREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostGeocodeReverseRequest_Output_case output_case = 4;
}

message PostHlrLookupRequest {
    // ISO 2-letter country code, assume numbers are based in this country. If not set numbers are assumed to be in international format (with or without the leading + sign)
    string country_code = 1;
    // A phone number
    string number = 2;
    enum PostHlrLookupRequest_Output_case {
        POSTHLRLOOKUPREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostHlrLookupRequest_Output_case output_case = 3;
}

message PostHostReputationRequest {
    // An IPv4 address or a domain name. If you supply a domain name it will be checked against the URI DNSBL list
    string host = 1;
    enum PostHostReputationRequest_Output_case {
        POSTHOSTREPUTATIONREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostHostReputationRequest_Output_case output_case = 2;
}

message PostHtmlCleanRequest {
    // The HTML content. This can be either a URL to load HTML from or an actual HTML content string
    string content = 1;
    // The level of sanitization, possible values are: plain-text, simple-text, basic-html, basic-html-with-images, advanced-html
    string output_type = 2;
}

message PostHtmlExtractTagsRequest {
    // If set, then extract data from the specified tag attribute. If not set, then data will be extracted from the tags inner content
    string attribute = 1;
    // The base URL to replace into realive links
    string base_url = 2;
    // The HTML content. This can be either a URL to load HTML from or an actual HTML content string
    string content = 3;
    enum PostHtmlExtractTagsRequest_Output_case {
        POSTHTMLEXTRACTTAGSREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostHtmlExtractTagsRequest_Output_case output_case = 4;
    // The HTML tag(s) to extract data from. This can just be a simple tag name like 'img' OR a CSS/jQuery style selector
    string tag = 5;
}

message PostHtml5RenderRequest {
    // The HTML content. This can be either a URL to load HTML from or an actual HTML content string
    string content = 1;
    // Inject custom CSS into the HTML. e.g. 'body { background-color: red;}'
    string css = 2;
    // Which format to output, available options are: PDF, PNG, JPG
    string format = 3;
    // Generate real (fillable) PDF forms from HTML forms
    bool forms = 4;
    // Render the final document in grayscale
    bool grayscale = 5;
    // If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content
    int32 image_height = 6;
    // If rendering to an image format (PNG or JPG) use this image width (in pixels)
    int32 image_width = 7;
    // Set the document to lanscape orientation
    bool landscape = 8;
    // The document margin (in mm)
    int32 margin = 9;
    // The document bottom margin (in mm)
    int32 margin_bottom = 10;
    // The document left margin (in mm)
    int32 margin_left = 11;
    // The document right margin (in mm)
    int32 margin_right = 12;
    // The document top margin (in mm)
    int32 margin_top = 13;
    // Use @media print CSS styles to render the document
    bool media_print = 14;
    // Activate all @media queries before rendering. This can be useful if you wan't to render the mobile version of a responsive website
    bool media_queries = 15;
    enum PostHtml5RenderRequest_Output_case {
        POSTHTML5RENDERREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostHtml5RenderRequest_Output_case output_case = 16;
    // Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter
    string page_size = 17;
    // The document title
    string title = 18;
    // Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size)
    double zoom = 19;
}

message PostImageResizeRequest {
    // The output image format, can be either png or jpg
    string format = 1;
    // Height to resize to (in px)
    int32 height = 2;
    // The URL to the source image
    string image_url = 3;
    // Width to resize to (in px)
    int32 width = 4;
}

message PostImageWatermarkRequest {
    // The output image format, can be either png or jpg
    string format = 1;
    // If set resize the resulting image to this height (preserving aspect ratio)
    int32 height = 2;
    // The URL to the source image
    string image_url = 3;
    // The opacity of the watermark (0 to 100)
    int32 opacity = 4;
    // The position of the watermark image, possible values are: center, top-left, top-center, top-right, bottom-left, bottom-center, bottom-right
    string position = 5;
    // The URL to the watermark image
    string watermark_url = 6;
    // If set resize the resulting image to this width (preserving aspect ratio)
    int32 width = 7;
}

message PostIpBlocklistRequest {
    // An IPv4 address
    string ip = 1;
    enum PostIpBlocklistRequest_Output_case {
        POSTIPBLOCKLISTREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostIpBlocklistRequest_Output_case output_case = 2;
}

message PostIpInfoRequest {
    // The IP address
    string ip = 1;
    enum PostIpInfoRequest_Output_case {
        POSTIPINFOREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostIpInfoRequest_Output_case output_case = 2;
    // Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it
    bool reverse_lookup = 3;
}

message PostIpProbeRequest {
    // IPv4 or IPv6 address
    string ip = 1;
    enum PostIpProbeRequest_Output_case {
        POSTIPPROBEREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostIpProbeRequest_Output_case output_case = 2;
}

message PostPhonePlaybackRequest {
    // A URL to a valid audio file. Accepted audio formats are: MP3, WAV, OGG
    string audio_url = 1;
    // The phone number to call. Must be valid international format
    string number = 2;
    enum PostPhonePlaybackRequest_Output_case {
        POSTPHONEPLAYBACKREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostPhonePlaybackRequest_Output_case output_case = 3;
}

message PostPhoneValidateRequest {
    // ISO 2-letter country code, assume numbers are based in this country. If not set numbers are assumed to be in international format (with or without the leading + sign)
    string country_code = 1;
    // Pass in a users IP address and we will assume numbers are based in the country of the IP address
    string ip = 2;
    // The phone number
    string number = 3;
    enum PostPhoneValidateRequest_Output_case {
        POSTPHONEVALIDATEREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostPhoneValidateRequest_Output_case output_case = 4;
}

message PostPhoneVerifyRequest {
    // The number of digits to use in the security code (between 4 and 12)
    int32 code_length = 1;
    // ISO 2-letter country code, assume numbers are based in this country. If not set numbers are assumed to be in international format (with or without the leading + sign)
    string country_code = 2;
    // The language to playback the verification code in, available languages are: de - German, en - English, es - Spanish, fr - Fench, it - Italian, pt - Portuguese, ru - Russian
    string language_code = 3;
    // The phone number to send the verification code to
    string number = 4;
    enum PostPhoneVerifyRequest_Output_case {
        POSTPHONEVERIFYREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostPhoneVerifyRequest_Output_case output_case = 5;
    // The delay in milliseconds between the playback of each security code
    int32 playback_delay = 6;
    // Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (only numerical security codes are currently supported)
    int32 security_code = 7;
}

message PostQrCodeRequest {
    // The QR code background color (you should always use a light color for this)
    string bg_color = 1;
    // The content to encode into the QR code (e.g. a URL or a phone number)
    string content = 2;
    // The QR code foreground color (you should always use a dark color for this)
    string fg_color = 3;
    // The height of the QR code (in px)
    int32 height = 4;
    // The width of the QR code (in px)
    int32 width = 5;
}

message PostSmsVerifyRequest {
    // The number of digits to use in the security code (must be between 4 and 12)
    int32 code_length = 1;
    // ISO 2-letter country code, assume numbers are based in this country. If not set numbers are assumed to be in international format (with or without the leading + sign)
    string country_code = 2;
    // The language to send the verification code in, available languages are: de - German, en - English, es - Spanish, fr - Fench, it - Italian, pt - Portuguese, ru - Russian
    string language_code = 3;
    // The phone number to send a verification code to
    string number = 4;
    enum PostSmsVerifyRequest_Output_case {
        POSTSMSVERIFYREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostSmsVerifyRequest_Output_case output_case = 5;
    // ass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (only numerical security codes are currently supported)
    int32 security_code = 6;
}

message PostUrlInfoRequest {
    // If this URL responds with html, text, json or xml then return the response. This option is useful if you want to perform further processing on the URL content
    bool fetch_content = 1;
    enum PostUrlInfoRequest_Output_case {
        POSTURLINFOREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostUrlInfoRequest_Output_case output_case = 2;
    // The URL to process
    string url = 3;
}

message PostUserAgentInfoRequest {
    enum PostUserAgentInfoRequest_Output_case {
        POSTUSERAGENTINFOREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostUserAgentInfoRequest_Output_case output_case = 1;
    // A user-agent string
    string user_agent = 2;
}

message PostVerifySecurityCodeRequest {
    enum PostVerifySecurityCodeRequest_Output_case {
        POSTVERIFYSECURITYCODEREQUEST_OUTPUT_CASE_CAMEL = 0;
    }
    PostVerifySecurityCodeRequest_Output_case output_case = 1;
    // The security code to verify
    int32 security_code = 2;
}

message ApiError {
    // API error code. If set and > 0 then an API error has occurred your request could not be completed
    int32 apiError = 1;
    // API error message
    string apiErrorMsg = 2;
}

message BadWordFilterResponse {
    // Array of the bad words found
    repeated string badWordsList = 1;
    // Total number of bad words detected
    int32 badWordsTotal = 2;
    // The censored content (only set if censor-character has been set)
    string censoredContent = 3;
    // Does the text contain bad words
    bool isBad = 4;
}

message BinLookupResponse {
    // The card brand (e.g. Visa or Mastercard)
    string cardBrand = 1;
    // The card category (if known)
    string cardCategory = 2;
    // The card type, will always be one of: DEBIT, CREDIT, CHARGE CARD
    string cardType = 3;
    // Full country name of the issuer
    string country = 4;
    // ISO 2-letter country code of the issuer
    string countryCode = 5;
    // True if the customer IP is listed on one of our blocklists, see the IP Blocklist API for more details
    bool ipBlocklisted = 6;
    // An array of strings indicating which blocklists this IP is listed on
    repeated string ipBlocklists = 7;
    // The city name (if detectable) from the customer IP
    string ipCity = 8;
    // The country detected from the customer IP
    string ipCountry = 9;
    // The ISO 2-letter country code detected from the customer IP
    string ipCountryCode = 10;
    // True if the customer IP address country matches the BIN country
    bool ipMatchesBin = 11;
    // The region name (if detectable) from the customer IP
    string ipRegion = 12;
    // The card issuer (if known)
    string issuer = 13;
    // The card issuer phone number (if known)
    string issuerPhone = 14;
    // The card issuer website (if known)
    string issuerWebsite = 15;
    // Is this a valid BIN or IIN number
    bool valid = 16;
}

message Blacklist {
    // true if listed, false if not
    bool isListed = 1;
    // the domain/hostname of the DNSBL
    string listHost = 2;
    // the name of the DNSBL
    string listName = 3;
    // the list rating [1-3] with 1 being the best rating and 3 the lowest rating
    int32 listRating = 4;
    // the DNSBL server response time in milliseconds
    int32 responseTime = 5;
    // the TXT record returned for this listing (if listed)
    string txtRecord = 6;
}

message ConvertResponse {
    // The type of the value being converted from
    string fromType = 1;
    // The value being converted from
    string fromValue = 2;
    // The result of the conversion
    string result = 3;
    // The type being converted to
    string toType = 4;
    // Was the coversion successful and produced a valid result
    bool valid = 5;
}

message EmailValidateResponse {
    // The email domain
    string domain = 1;
    // True if this address has a domain error (e.g. no valid mail server records)
    bool domainError = 2;
    // The full email address (this could be different to the supplied address if fix-typos is used)
    string email = 3;
    // True if this address is a disposable, temporary or darknet related email address
    bool isDisposable = 4;
    // True if this address is a free-mail address
    bool isFreemail = 5;
    // True if this address has a syntax error
    bool syntaxError = 6;
    // True if typos have been fixed
    bool typosFixed = 7;
    // Is this a valid email
    bool valid = 8;
}

message GeocodeAddressResponse {
    // The number of possible matching locations found
    int32 found = 1;
    // Array of matching location objects
    repeated Location locations = 2;
}

message GeocodeReverseResponse {
    // The fully formatted address
    string address = 1;
    // The components which make up the address such as road, city, state etc. May also include additional metadata about the address
    map<string, string> addressComponents = 2;
    // The city of the location
    string city = 3;
    // The country of the location
    string country = 4;
    // The ISO 2-letter country code of the location
    string countryCode = 5;
    // True if these coordinates map to a real location
    bool found = 6;
    // The postal code for the location
    string postalCode = 7;
    // The state of the location
    string state = 8;
}

message HlrLookupResponse {
    // Number location ISO 2-letter country code
    string countryCode = 1;
    // The HLR lookup status. See API docs for specific status details
    string hlrStatus = 2;
    // Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)
    bool hlrValid = 3;
    // The mobile IMSI number (only set if HLR lookup valid)
    string imsi = 4;
    // Numbers international calling code
    string internationalCallingCode = 5;
    // Number represented in international format
    string internationalNumber = 6;
    // Is this a mobile number
    bool isMobile = 7;
    // Has this number been ported to another network
    bool isPorted = 8;
    // Is this number currently roaming from its origin country
    bool isRoaming = 9;
    // Number represented in local format
    string localNumber = 10;
    // Number location (could be a city, region or country)
    string location = 11;
    // The mobile MCC number (only set if HLR lookup valid)
    string mcc = 12;
    // The mobile MNC number (only set if HLR lookup valid)
    string mnc = 13;
    // The mobile MSIN number (only set if HLR lookup valid)
    string msin = 14;
    // The number type, possible values are: mobile, fixed-line, premium-rate, toll-free, voip, unknown
    string numberType = 15;
    // Is this a valid phone number (mobile or otherwise)
    bool numberValid = 16;
    // The origin mobile carrier name (only set if HLR lookup valid)
    string originNetwork = 17;
    // If the number has been ported, the ported to mobile carrier name (only set if HLR lookup valid)
    string portedNetwork = 18;
}

message HostReputationResponse {
    // Is this host blacklisted
    bool isListed = 1;
    // The number of DNSBL's the host is listed on
    int32 listCount = 2;
    // An array of objects for each DNSBL checked
    repeated Blacklist lists = 3;
}

message HtmlExtractResponse {
    // The total number of values extracted
    int32 total = 1;
    // Array of extracted values
    repeated string values = 2;
}

message IpBlocklistResponse {
    // IP is hosting a malicious bot or is part of a botnet
    bool isBot = 1;
    // IP has been flagged on DShield (dshield.org)
    bool isDshield = 2;
    // IP is hosting an exploit finding bot or exploit scanning software
    bool isExploitBot = 3;
    // hijacked netblocks or netblocks controlled by criminal organizations
    bool isHijacked = 4;
    // Is this IP on a blocklist
    bool isListed = 5;
    // IP is involved in distributing malware
    bool isMalware = 6;
    // IP has been detected as an anonymous web proxy or anonymous HTTP proxy
    bool isProxy = 7;
    // IP address is hosting a spam bot, comment spamming or other spamming software
    bool isSpamBot = 8;
    // IP is a hostile spider or crawler
    bool isSpider = 9;
    // IP is being used by spyware, malware, botnets or for other malicious activities
    bool isSpyware = 10;
    // IP is coming from a Tor node
    bool isTor = 11;
    // IP has been detected as coming from a VPN hosting provider
    bool isVpn = 12;
    // The last time this IP was seen on a blocklist (in Unix time or 0 if not listed recently)
    int32 lastSeen = 13;
    // The number of blocklists the IP is listed on
    int32 listCount = 14;
}

message IpInfoResponse {
    // Full city name (if detectable)
    string city = 1;
    // Full country name
    string country = 2;
    // ISO 2-letter country code
    string countryCode = 3;
    // The IPs hostname (only set if reverse-lookup has been used)
    string hostname = 4;
    // Location latitude
    double latitude = 5;
    // Location longitude
    double longitude = 6;
    // Full region name (if detectable)
    string region = 7;
    // Is this a valid IP address
    bool valid = 8;
}

message IpProbeResponse {
    // Full city name (if detectable)
    string city = 1;
    // Full country name
    string country = 2;
    // ISO 2-letter country code
    string country_code = 3;
    // The IPs hostname (PTR)
    string hostname = 4;
    // The IP address
    string ip = 5;
    // A description of the provider, usually extracted from the providers website or WHOIS record
    string provider_description = 6;
    // The domain name of the provider
    string provider_domain = 7;
    // The detected provider type. See API docs for specific provider type details
    string provider_type = 8;
    // The website URL for the provider
    string provider_website = 9;
    // Full region name (if detectable)
    string region = 10;
    // Is this a valid IPv4 or IPv6 address
    bool valid = 11;
}

message Location {
    // The fully formatted address
    string address = 1;
    // The components which make up the address such as road, city, state etc. May also include additional metadata about the address
    map<string, string> addressComponents = 2;
    // The city of the location
    string city = 3;
    // The country of the location
    string country = 4;
    // The ISO 2-letter country code of the location
    string countryCode = 5;
    // The location latitude
    double latitude = 6;
    // The location longitude
    double longitude = 7;
    // The postal code for the location
    string postalCode = 8;
    // The state of the location (if applicable)
    string state = 9;
}

message PhonePlaybackResponse {
    // True if the call is being made now
    bool calling = 1;
    // Is this a valid phone number
    bool number_valid = 2;
}

message PhoneValidateResponse {
    // Number location ISO 2-letter country code
    string countryCode = 1;
    // Numbers international calling code
    string internationalCallingCode = 2;
    // Number represented in international format
    string internationalNumber = 3;
    // Is this a mobile number
    bool isMobile = 4;
    // Number represented in local format
    string localNumber = 5;
    // Number location (could be a city, region or country)
    string location = 6;
    // The number type, possible values are: mobile, fixed-line, premium-rate, toll-free, voip, unknown
    string type = 7;
    // Is this a valid phone number
    bool valid = 8;
}

message PhoneVerifyResponse {
    // True if the call is being made now
    bool calling = 1;
    // Is this a valid phone number
    bool numberValid = 2;
    // The security code generated, you can save this code to perform your own verification or you can use the Verify Security Code API
    string securityCode = 3;
}

message SmsVerifyResponse {
    // Is this a valid phone number
    bool numberValid = 1;
    // The security code generated, you can save this code to perform your own verification or you can use the Verify Security Code API
    string securityCode = 2;
    // True if the SMS has been sent
    bool sent = 3;
}

message UrlInfoResponse {
    // The actual content this URL responded with. Only set if the 'fetch-content' option was used
    string content = 1;
    // The encoding type the URL uses
    string contentEncoding = 2;
    // The size of the URL content in bytes
    int32 contentSize = 3;
    // The content-type the URL points to
    string contentType = 4;
    // True if this URL responded with an HTTP OK (200) status
    bool httpOk = 5;
    // True if this URL responded with a HTTP redirect
    bool httpRedirect = 6;
    // The HTTP status code this URL responded with
    int32 httpStatus = 7;
    // The HTTP status message assoicated with the status code
    string httpStatusMessage = 8;
    // The time taken to load the URL content (in seconds)
    double loadTime = 9;
    // A key:value map of the URL query paramaters
    map<string, object> query = 10;
    // Is this URL actually serving real content
    bool real = 11;
    // Server IP geo-location: full city name (if detectable)
    string serverCity = 12;
    // Server IP geo-location: full country name
    string serverCountry = 13;
    // Server IP geo-location: ISO 2-letter country code
    string serverCountryCode = 14;
    // The server hostname (PTR)
    string serverHostname = 15;
    // The IP address of the server hosting this URL
    string serverIp = 16;
    // The name of the server software hosting this URL
    string serverName = 17;
    // Server IP geo-location: full region name (if detectable)
    string serverRegion = 18;
    // The fully qualified URL. This may be different to the URL requested if http-redirect is True
    string url = 19;
    // The URL path
    string urlPath = 20;
    // The URL port
    int32 urlPort = 21;
    // The URL protocol (usually http or https)
    string urlProtocol = 22;
    // Is this a valid well-formed URL
    bool valid = 23;
}

message UserAgentInfoResponse {
    // Browser software name
    string browserName = 1;
    // True if this is an Android based mobile user agent
    bool isAndroid = 2;
    // True if this is an iOS based mobile user agent
    bool isIos = 3;
    // True if this is a mobile user-agent
    bool isMobile = 4;
    // Mobile device brand
    string mobileBrand = 5;
    // Mobile device browser
    string mobileBrowser = 6;
    // Mobile device model
    string mobileModel = 7;
    // Mobile device screen height (in px)
    int32 mobileScreenHeight = 8;
    // Mobile device screen width (in px)
    int32 mobileScreenWidth = 9;
    // Operating system
    string operatingSystem = 10;
    // The operating system family name, this is the OS name without any version information
    string operatingSystemFamily = 11;
    // The operating system version number (if detectable)
    string operatingSystemVersion = 12;
    // Producer or manufacturer
    string producer = 13;
    // The user-agent type, possible values are: desktop-browser, email-client, feed-reader, software-library, media-player, mobile-browser, robot, unknown
    string type = 14;
    // Software version
    string version = 15;
}

message VerifySecurityCodeResponse {
    // True if the code is valid
    bool verified = 1;
}

service NeutrinoAPIService {
    // Detect bad words, swear words and profanity in a given text
    rpc PostBadWordFilter(PostBadWordFilterRequest) returns (BadWordFilterResponse) {
      option (google.api.http) = {
        post: "//bad-word-filter"
      };
    }
    // Perform a BIN (Bank Identification Number) or IIN (Issuer Identification Number) lookup. See: https://www.neutrinoapi.com/api/bin-lookup
    rpc PostBinLookup(PostBinLookupRequest) returns (BinLookupResponse) {
      option (google.api.http) = {
        post: "//bin-lookup"
      };
    }
    // Code highlight will take raw source code and convert into nicely formatted HTML with syntax and keyword highlighting
    rpc PostCodeHighlight(PostCodeHighlightRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//code-highlight"
      };
    }
    // A powerful unit and currency conversion tool
    rpc PostConvert(PostConvertRequest) returns (ConvertResponse) {
      option (google.api.http) = {
        post: "//convert"
      };
    }
    // Parse, validate and clean an email address
    rpc PostEmailValidate(PostEmailValidateRequest) returns (EmailValidateResponse) {
      option (google.api.http) = {
        post: "//email-validate"
      };
    }
    // Geocode an address, partial address or the name of a location
    rpc PostGeocodeAddress(PostGeocodeAddressRequest) returns (GeocodeAddressResponse) {
      option (google.api.http) = {
        post: "//geocode-address"
      };
    }
    // Convert a geographic coordinate (latitude and longitude) into a real world address or location.
    rpc PostGeocodeReverse(PostGeocodeReverseRequest) returns (GeocodeReverseResponse) {
      option (google.api.http) = {
        post: "//geocode-reverse"
      };
    }
    // Connect to the global mobile cellular network and retrieve the status of a mobile device
    rpc PostHlrLookup(PostHlrLookupRequest) returns (HlrLookupResponse) {
      option (google.api.http) = {
        post: "//hlr-lookup"
      };
    }
    // Check the reputation of an IP address or domain against a comprehensive list of blacklists and blocklists (DNSBLs)
    rpc PostHostReputation(PostHostReputationRequest) returns (HostReputationResponse) {
      option (google.api.http) = {
        post: "//host-reputation"
      };
    }
    // Clean and sanitize untrusted HTML
    rpc PostHtmlClean(PostHtmlCleanRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//html-clean"
      };
    }
    // Extract specific HTML tag contents or attributes from complex HTML or XHTML content
    rpc PostHtmlExtractTags(PostHtmlExtractTagsRequest) returns (HtmlExtractResponse) {
      option (google.api.http) = {
        post: "//html-extract-tags"
      };
    }
    // Render HTML and HTML5 content to PDF, JPG or PNG
    rpc PostHtml5Render(PostHtml5RenderRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//html5-render"
      };
    }
    // Resize an image and output as either JPEG or PNG. See: https://www.neutrinoapi.com/api/image-resize
    rpc PostImageResize(PostImageResizeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//image-resize"
      };
    }
    // Watermark one image with another image. See: https://www.neutrinoapi.com/api/image-watermark
    rpc PostImageWatermark(PostImageWatermarkRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//image-watermark"
      };
    }
    // The IP Blocklist API will detect potentially malicious or dangerous IP addresses
    rpc PostIpBlocklist(PostIpBlocklistRequest) returns (IpBlocklistResponse) {
      option (google.api.http) = {
        post: "//ip-blocklist"
      };
    }
    // Get location information about an IP address and do reverse DNS (PTR) lookups.
    rpc PostIpInfo(PostIpInfoRequest) returns (IpInfoResponse) {
      option (google.api.http) = {
        post: "//ip-info"
      };
    }
    // Analyze and extract provider information for an IP address
    rpc PostIpProbe(PostIpProbeRequest) returns (IpProbeResponse) {
      option (google.api.http) = {
        post: "//ip-probe"
      };
    }
    // Make an automated call to any valid phone number and playback an audio message
    rpc PostPhonePlayback(PostPhonePlaybackRequest) returns (PhonePlaybackResponse) {
      option (google.api.http) = {
        post: "//phone-playback"
      };
    }
    // Parse, validate and get location information about a phone number
    rpc PostPhoneValidate(PostPhoneValidateRequest) returns (PhoneValidateResponse) {
      option (google.api.http) = {
        post: "//phone-validate"
      };
    }
    // Make an automated call to any valid phone number and playback a unique security code
    rpc PostPhoneVerify(PostPhoneVerifyRequest) returns (PhoneVerifyResponse) {
      option (google.api.http) = {
        post: "//phone-verify"
      };
    }
    // Generate a QR code as a PNG image. See: https://www.neutrinoapi.com/api/qr-code
    rpc PostQrCode(PostQrCodeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//qr-code"
      };
    }
    // Send a unique security code to any mobile device via SMS
    rpc PostSmsVerify(PostSmsVerifyRequest) returns (SmsVerifyResponse) {
      option (google.api.http) = {
        post: "//sms-verify"
      };
    }
    // Parse, analyze and retrieve content from the supplied URL
    rpc PostUrlInfo(PostUrlInfoRequest) returns (UrlInfoResponse) {
      option (google.api.http) = {
        post: "//url-info"
      };
    }
    // Parse, validate and get detailed user-agent information from a user agent string
    rpc PostUserAgentInfo(PostUserAgentInfoRequest) returns (UserAgentInfoResponse) {
      option (google.api.http) = {
        post: "//user-agent-info"
      };
    }
    // Check if a security code from one of the verify APIs is valid
    rpc PostVerifySecurityCode(PostVerifySecurityCodeRequest) returns (VerifySecurityCodeResponse) {
      option (google.api.http) = {
        post: "//verify-security-code"
      };
    }
}

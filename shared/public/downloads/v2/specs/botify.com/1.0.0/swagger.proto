syntax = "proto3";

import "google/api/annotations.proto";

package botify;

message GetAnalysesUsernameProject_slugRequest {
    // Return only successfully finished analyses
    bool only_success = 1;
    // Page Number
    int32 page = 2;
    // Project's identifier
    string project_slug = 3;
    // Page Size
    int32 size = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated Analysis results = 5;
    int32 size = 6;
}

message GetAnalysesUsernameProject_slugAnalysis_slugRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Project's identifier
    string project_slug = 2;
    // User's identifier
    string username = 3;
}

message GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Project's identifier
    string project_slug = 2;
    // User's identifier
    string username = 3;
}

message GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsTimeRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Aggregation frequency
    enum GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsTimeRequest_Frequency {
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGCRAWL_STATISTICSTIMEREQUEST_FREQUENCY_1MN = 0;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGCRAWL_STATISTICSTIMEREQUEST_FREQUENCY_5MN = 1;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGCRAWL_STATISTICSTIMEREQUEST_FREQUENCY_60MN = 2;
    }
    GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsTimeRequest_Frequency frequency = 2;
    // max number of elements to retrieve
    int32 limit = 3;
    // Project's identifier
    string project_slug = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsUrlsList_typeRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // URLs list type (crawled URLs or error URLs)
    enum GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsUrlsList_typeRequest_List_type {
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGCRAWL_STATISTICSURLSLIST_TYPEREQUEST_LIST_TYPE_CRAWLED = 0;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGCRAWL_STATISTICSURLSLIST_TYPEREQUEST_LIST_TYPE_ERRORS = 1;
    }
    GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsUrlsList_typeRequest_List_type list_type = 2;
    // Project's identifier
    string project_slug = 3;
    // User's identifier
    string username = 4;
}

message GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsUrlsList_typeResponse {
    repeated CrawlStatisticsUrls items = 1;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSourceRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Type of traffic, value: 'organic' (from search engine)or 'social' (from a social network)
    enum GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSourceRequest_Medium {
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_MEDIUM_ORGANIC = 0;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_MEDIUM_SOCIAL = 1;
    }
    GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSourceRequest_Medium medium = 2;
    // Page Number
    int32 page = 3;
    // Project's identifier
    string project_slug = 4;
    // Page Size
    int32 size = 5;
    // Traffic source, value: name of the search engine or social network
    enum GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSourceRequest_Source {
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_ALL = 0;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_AOL = 1;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_ASK = 2;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_BAIDU = 3;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_BING = 4;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_FACEBOOK = 5;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_GOOGLE = 6;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_GOOGLE+ = 7;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_LINKEDIN = 8;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_NAVER = 9;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_PINTEREST = 10;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_REDDIT = 11;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_TUMBLR = 12;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_TWITTER = 13;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_YAHOO = 14;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESGANALYTICSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_YANDEX = 15;
    }
    GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSourceRequest_Source source = 6;
    // User's identifier
    string username = 7;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSourceResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated CrawlOrphanURLs results = 5;
    int32 size = 6;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesLinksPercentilesRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Project's identifier
    string project_slug = 2;
    // User's identifier
    string username = 3;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesPagerankLostRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Project's identifier
    string project_slug = 2;
    // User's identifier
    string username = 3;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsReportRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Project's identifier
    string project_slug = 2;
    // User's identifier
    string username = 3;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesOut_of_configRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Page Number
    int32 page = 2;
    // Project's identifier
    string project_slug = 3;
    // Page Size
    int32 size = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesOut_of_configResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated string results = 5;
    int32 size = 6;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesSitemap_onlyRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Page Number
    int32 page = 2;
    // Project's identifier
    string project_slug = 3;
    // Page Size
    int32 size = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesSitemap_onlyResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated string results = 5;
    int32 size = 6;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsDomainsRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Page Number
    int32 page = 2;
    // Project's identifier
    string project_slug = 3;
    // Page Size
    int32 size = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsDomainsResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated LinksTopDomains results = 5;
    int32 size = 6;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsSubdomainsRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Page Number
    int32 page = 2;
    // Project's identifier
    string project_slug = 3;
    // Page Size
    int32 size = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsSubdomainsResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated LinksTopDomains results = 5;
    int32 size = 6;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSourceRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Type of traffic, value: 'organic' (from search engine)or 'social' (from a social network)
    enum GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSourceRequest_Medium {
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_MEDIUM_ORGANIC = 0;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_MEDIUM_SOCIAL = 1;
    }
    GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSourceRequest_Medium medium = 2;
    // Page Number
    int32 page = 3;
    // Project's identifier
    string project_slug = 4;
    // Page Size
    int32 size = 5;
    // Traffic source, value: name of the search engine or social network
    enum GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSourceRequest_Source {
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_ALL = 0;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_AOL = 1;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_ASK = 2;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_BAIDU = 3;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_BING = 4;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_FACEBOOK = 5;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_GOOGLE = 6;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_GOOGLE+ = 7;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_LINKEDIN = 8;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_NAVER = 9;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_PINTEREST = 10;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_REDDIT = 11;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_TUMBLR = 12;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_TWITTER = 13;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_YAHOO = 14;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGFEATURESVISITSORPHAN_URLSMEDIUMSOURCEREQUEST_SOURCE_YANDEX = 15;
    }
    GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSourceRequest_Source source = 6;
    // User's identifier
    string username = 7;
}

message GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSourceResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated CrawlOrphanURLs results = 5;
    int32 size = 6;
}

message PostAnalysesUsernameProject_slugAnalysis_slugUrlsRequest {
    // Urls query
    UrlsQuery UrlsQuery = 1;
    // Analysis' identifier
    string analysis_slug = 2;
    // Analysis context
    enum PostAnalysesUsernameProject_slugAnalysis_slugUrlsRequest_Area {
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSREQUEST_AREA_CURRENT = 0;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSREQUEST_AREA_DISAPPEARED = 1;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSREQUEST_AREA_NEW = 2;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSREQUEST_AREA_SEARCH_ENGINES_ORPHANS = 3;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSREQUEST_AREA_GSC_KEYWORDS = 4;
    }
    PostAnalysesUsernameProject_slugAnalysis_slugUrlsRequest_Area area = 3;
    // Page Number
    int32 page = 4;
    // Project's identifier
    string project_slug = 5;
    // Page Size
    int32 size = 6;
    // User's identifier
    string username = 7;
}

message PostAnalysesUsernameProject_slugAnalysis_slugUrlsResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated UrlDetail results = 5;
    int32 size = 6;
}

message PostAnalysesUsernameProject_slugAnalysis_slugUrlsAggsRequest {
    // UrlsAggs queries
    array UrlsAggsQueries = 1;
    // Analysis' identifier
    string analysis_slug = 2;
    // Analysis context
    enum PostAnalysesUsernameProject_slugAnalysis_slugUrlsAggsRequest_Area {
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSAGGSREQUEST_AREA_CURRENT = 0;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSAGGSREQUEST_AREA_DISAPPEARED = 1;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSAGGSREQUEST_AREA_NEW = 2;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSAGGSREQUEST_AREA_SEARCH_ENGINES_ORPHANS = 3;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSAGGSREQUEST_AREA_GSC_KEYWORDS = 4;
    }
    PostAnalysesUsernameProject_slugAnalysis_slugUrlsAggsRequest_Area area = 3;
    // Project's identifier
    string project_slug = 4;
    // User's identifier
    string username = 5;
}

message PostAnalysesUsernameProject_slugAnalysis_slugUrlsAggsResponse {
    repeated Aggs items = 1;
}

message GetAnalysesUsernameProject_slugAnalysis_slugUrlsDatamodelRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Analysis context
    enum GetAnalysesUsernameProject_slugAnalysis_slugUrlsDatamodelRequest_Area {
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSDATAMODELREQUEST_AREA_CURRENT = 0;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSDATAMODELREQUEST_AREA_DISAPPEARED = 1;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSDATAMODELREQUEST_AREA_NEW = 2;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSDATAMODELREQUEST_AREA_SEARCH_ENGINES_ORPHANS = 3;
        GETANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSDATAMODELREQUEST_AREA_GSC_KEYWORDS = 4;
    }
    GetAnalysesUsernameProject_slugAnalysis_slugUrlsDatamodelRequest_Area area = 2;
    // Project's identifier
    string project_slug = 3;
    // User's identifier
    string username = 4;
}

message GetAnalysesUsernameProject_slugAnalysis_slugUrlsExportRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Page Number
    int32 page = 2;
    // Project's identifier
    string project_slug = 3;
    // Page Size
    int32 size = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugAnalysis_slugUrlsExportResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated CsvExportStatus results = 5;
    int32 size = 6;
}

message PostAnalysesUsernameProject_slugAnalysis_slugUrlsExportRequest {
    // Urls query
    UrlsQuery UrlsQuery = 1;
    // Analysis' identifier
    string analysis_slug = 2;
    // Analysis context
    enum PostAnalysesUsernameProject_slugAnalysis_slugUrlsExportRequest_Area {
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSEXPORTREQUEST_AREA_CURRENT = 0;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSEXPORTREQUEST_AREA_DISAPPEARED = 1;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSEXPORTREQUEST_AREA_NEW = 2;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSEXPORTREQUEST_AREA_SEARCH_ENGINES_ORPHANS = 3;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSEXPORTREQUEST_AREA_GSC_KEYWORDS = 4;
    }
    PostAnalysesUsernameProject_slugAnalysis_slugUrlsExportRequest_Area area = 3;
    // Project's identifier
    string project_slug = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugAnalysis_slugUrlsExportUrl_export_idRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Project's identifier
    string project_slug = 2;
    // Url Export ID
    string url_export_id = 3;
    // User's identifier
    string username = 4;
}

message GetAnalysesUsernameProject_slugAnalysis_slugUrlsHtmlUrlRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // Project's identifier
    string project_slug = 2;
    // (Urlencoded) Searched URL
    string url = 3;
    // User's identifier
    string username = 4;
}

message PostAnalysesUsernameProject_slugAnalysis_slugUrlsSuggested_filtersRequest {
    // UrlsAggs query
    UrlsAggsQuery UrlsAggsQuery = 1;
    // Analysis' identifier
    string analysis_slug = 2;
    // Analysis context
    enum PostAnalysesUsernameProject_slugAnalysis_slugUrlsSuggested_filtersRequest_Area {
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSSUGGESTED_FILTERSREQUEST_AREA_CURRENT = 0;
        POSTANALYSESUSERNAMEPROJECT_SLUGANALYSIS_SLUGURLSSUGGESTED_FILTERSREQUEST_AREA_NEW = 1;
    }
    PostAnalysesUsernameProject_slugAnalysis_slugUrlsSuggested_filtersRequest_Area area = 3;
    // Project's identifier
    string project_slug = 4;
    // User's identifier
    string username = 5;
}

message GetAnalysesUsernameProject_slugAnalysis_slugUrlsUrlRequest {
    // Analysis' identifier
    string analysis_slug = 1;
    // comma separated list of fields to return (c.f. URLs Datamodel)
    repeated string fields = 2;
    // Project's identifier
    string project_slug = 3;
    // (Urlencoded) Searched URL
    string url = 4;
    // User's identifier
    string username = 5;
}

message GetProjectsUsernameRequest {
    // Project's name
    string name = 1;
    // Page Number
    int32 page = 2;
    // Page Size
    int32 size = 3;
    // User's identifier
    string username = 4;
}

message GetProjectsUsernameResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated Project results = 5;
    int32 size = 6;
}

message GetProjectsUsernameProject_slugFiltersRequest {
    // Page Number
    int32 page = 1;
    // Project's identifier
    string project_slug = 2;
    // Page Size
    int32 size = 3;
    // User's identifier
    string username = 4;
}

message GetProjectsUsernameProject_slugFiltersResponse {
    int32 count = 1;
    string next = 2;
    int32 page = 3;
    string previous = 4;
    repeated ProjectSavedFilter results = 5;
    int32 size = 6;
}

message GetProjectsUsernameProject_slugFiltersIdentifierRequest {
    string identifier = 1;
    // Project's identifier
    string project_slug = 2;
    // User's identifier
    string username = 3;
}

message PostProjectsUsernameProject_slugUrlsAggsRequest {
    // UrlsAggs queries
    array UrlsAggsQueries = 1;
    // Analyses context
    enum PostProjectsUsernameProject_slugUrlsAggsRequest_Area {
        POSTPROJECTSUSERNAMEPROJECT_SLUGURLSAGGSREQUEST_AREA_CURRENT = 0;
        POSTPROJECTSUSERNAMEPROJECT_SLUGURLSAGGSREQUEST_AREA_DISAPPEARED = 1;
        POSTPROJECTSUSERNAMEPROJECT_SLUGURLSAGGSREQUEST_AREA_NEW = 2;
        POSTPROJECTSUSERNAMEPROJECT_SLUGURLSAGGSREQUEST_AREA_GSC_KEYWORDS = 3;
    }
    PostProjectsUsernameProject_slugUrlsAggsRequest_Area area = 2;
    // Last analysis on the trend
    string last_analysis_slug = 3;
    // Max number of analysis to return
    int32 nb_analyses = 4;
    // Project's identifier
    string project_slug = 5;
    // User's identifier
    string username = 6;
}

message AdvancedExportStatus {
    string advanced_export_type = 1;
    string date_created = 2;
    bool full_export = 3;
    string job_id = 4;
    string job_status = 5;
    string job_url = 6;
    string nb_lines = 7;
    string query = 8;
    string results = 9;
}

message AdvancedExporter {
    bool full_export = 1;
    string group = 2;
    int64 lines = 3;
    string name = 4;
    string type = 5;
}

message AdvancedExporters {
    repeated AdvancedExporter exporters = 1;
}

message Aggs {
    ErrorAgg error = 1;
    int64 status = 2;
}

message Analysis {
    string computing_revision = 1;
    string config = 2;
    string crawl_launch_type = 3;
    string date_created = 4;
    string date_finished = 5;
    // Date of last modified analysis
    string date_last_modified = 6;
    string date_launched = 7;
    string failures = 8;
    string features = 9;
    string friendly_name = 10;
    int64 id = 11;
    string import_keywords_data = 12;
    string name = 13;
    string owner = 14;
    string red_button_domain = 15;
    string slug = 16;
    string status = 17;
    string url = 18;
    string urls_done = 19;
    string urls_in_queue = 20;
    User user = 21;
}

message AnalysisDetail {
    string computing_revision = 1;
    string config = 2;
    string crawl_launch_type = 3;
    string date_created = 4;
    string date_finished = 5;
    // Date of last modified analysis
    string date_last_modified = 6;
    string date_launched = 7;
    string failures = 8;
    string features = 9;
    string friendly_name = 10;
    int64 id = 11;
    string import_keywords_data = 12;
    string name = 13;
    string owner = 14;
    string red_button_domain = 15;
    string slug = 16;
    string status = 17;
    string url = 18;
    string urls_done = 19;
    string urls_in_queue = 20;
    User user = 21;
}

message AnalysisUpdateLaunch {
    repeated string refresh_features = 1;
}

message AnalysisUpdateSuggest {
    repeated SuggestedUpdatesAddOnFeatures add_on_features = 1;
    repeated SuggestedUpdatesFeaturesToUpdate features_to_update = 2;
}

message CheckExternalStorageAccess {
    string access_ok = 1;
}

message CrawlOrphanURLs {
    string url = 1;
    int64 visits = 2;
}

message CrawlStatistics {
    string crawler_ip = 1;
    int64 depth_current = 2;
    string last_upd_dt = 3;
    int64 pages_dones = 4;
    int64 pages_dones_2xx = 5;
    int64 pages_dones_3xx = 6;
    int64 pages_dones_4xx = 7;
    int64 pages_dones_5xx = 8;
    int64 pages_dones_networkerror = 9;
    int64 pages_dones_xxx = 10;
    int64 pages_known = 11;
}

message CrawlStatisticsTime {
    repeated CrawlStatisticsTimePoint avg_delay = 1;
    repeated CrawlStatisticsTimePoint avg_size = 2;
    string frequency = 3;
    repeated CrawlStatisticsTimePoint http_code_2xx = 4;
    repeated CrawlStatisticsTimePoint http_code_3xx = 5;
    repeated CrawlStatisticsTimePoint http_code_4xx = 6;
    repeated CrawlStatisticsTimePoint http_code_5xx = 7;
    repeated CrawlStatisticsTimePoint http_code_xxx = 8;
    string last_update_date = 9;
    repeated CrawlStatisticsTimePoint new_urls = 10;
}

message CrawlStatisticsTimePoint {
    int64 count = 1;
    string datetime = 2;
}

message CrawlStatisticsUrls {
    string content_type = 1;
    string date = 2;
    int64 delay_first_byte = 3;
    int64 delay_last_byte = 4;
    bool gzip = 5;
    int64 http = 6;
    int64 length = 7;
    string redirects_to = 8;
    string url = 9;
}

message CsvExportStatus {
    string area = 1;
    string date_created = 2;
    string job_id = 3;
    string job_status = 4;
    string job_url = 5;
    int64 nb_results = 6;
    UrlsQuery query = 7;
    string results = 8;
}

message Datamodel {
    message Aliases {
    }
    Aliases aliases = 1;
    repeated DatamodelField fields = 2;
    repeated DatamodelGroup groups = 3;
    int64 max_timeseries_fields = 4;
}

message DatamodelField {
    repeated string aliases = 1;
    string group = 2;
    string id = 3;
    bool multiple = 4;
    string name = 5;
    bool optional = 6;
    repeated string permissions = 7;
    string subtype = 8;
    string type = 9;
}

message DatamodelGroup {
    string id = 1;
    string name = 2;
}

message Default {
}

message DefaultPayload {
    message Error {
            // Error Code
    string error_code = 1;
            // If available, detailed error
    message Error_detail {
        }
        Error_detail error_detail = 2;
            // Error Message
    string message = 3;
    }
    Error error = 1;
}

message ErrorAgg {
    string error_code = 1;
    string message = 2;
}

message FieldValues {
    int64 count = 1;
    repeated FieldValuesResult results = 2;
}

message FieldValuesResult {
    int64 nb_urls = 1;
    string value = 2;
}

message LinksPercentiles {
    string domain = 1;
    repeated LinksPercentilesItem percentiles = 2;
}

message LinksPercentilesItem {
    int64 avg = 1;
    int64 id = 2;
    int64 max = 3;
    int64 metric_total = 4;
    int64 min = 5;
    int64 url_total = 6;
}

message LinksTopDomains {
    string domain = 1;
    int64 follow_links = 2;
    repeated LinksTopDomainsSamples follow_samples = 3;
    int64 nofollow_links = 4;
    repeated LinksTopDomainsSamples nofollow_samples = 5;
    int64 unique_follow_links = 6;
    int64 unique_nofollow_links = 7;
}

message LinksTopDomainsSamples {
    repeated string sources = 1;
    int64 unique_links = 2;
    string url = 3;
}

message PageRankLost {
    float external = 1;
    float non_crawled = 2;
    float robots_txt = 3;
}

message Project {
    bool active = 1;
    ProjectSettings current_settings = 2;
    string date_created = 3;
    bool has_log_analysis = 4;
    message Last_analysis {
    }
    Last_analysis last_analysis = 5;
    string name = 6;
    string slug = 7;
    string url = 8;
    User user = 9;
}

message ProjectSavedFilter {
    message Filters {
    }
    Filters filters = 1;
    string identifier = 2;
    string name = 3;
}

message ProjectSettings {
    repeated string allowed_domains = 1;
    repeated string blacklisted_domains = 2;
    bool compare_crawl = 3;
    bool crawl_gzip = 4;
    string extra_headers = 5;
    // Keep email in case user delete his social auth connection
    string google_analytics_account_email = 6;
    int64 google_analytics_nb_days = 7;
    int64 google_analytics_site_id = 8;
    int64 google_social_auth_id = 9;
    string has_robots_txt = 10;
    repeated string header_settings = 11;
    int64 max_depth = 12;
    int64 max_nb_pages = 13;
    int64 max_pages_per_sec = 14;
    bool respect_nofollow = 15;
    repeated string sitemaps = 16;
    repeated string start_urls = 17;
    string user_agent = 18;
}

message RewritingRule {
    bool ignore_case = 1;
    string regex = 2;
    string replace = 3;
}

message SitemapsReport {
    int64 count = 1;
    repeated SitemapsReportSitemap errors = 2;
    repeated SitemapsReportSitemap sitemap_indexes = 3;
    SitemapsReportOnly sitemap_only = 4;
    repeated SitemapsReportSitemap sitemaps = 5;
}

message SitemapsReportOnly {
    int64 in_configuration = 1;
    int64 out_of_configuration = 2;
}

message SitemapsReportSitemap {
    SitemapsReportSitemapError error = 1;
    string file_type = 2;
    int64 invalid_urls = 3;
    repeated string sitemap_indexes = 4;
    string url = 5;
    int64 valid_urls = 6;
}

message SitemapsReportSitemapError {
    string message = 1;
    string type = 2;
}

message SuggestedUpdatesAddOnFeatures {
    string name = 1;
    message Options {
    }
    Options options = 2;
}

message SuggestedUpdatesFeaturesToUpdate {
    string name = 1;
    message New_options {
    }
    New_options new_options = 2;
    message Previous_options {
    }
    Previous_options previous_options = 3;
}

message URLRewritingRules {
    repeated RewritingRule rules = 1;
    repeated string urls = 2;
}

message UrlDetail {
}

message UrlHTML {
}

repeated UrlsAggsQuery UrlsAggsQueries = 1

message UrlsAggsQuery {
    message Agg {
    }
    repeated Agg aggs = 1;
    message Filters {
    }
    Filters filters = 2;
}

message UrlsQuery {
    repeated string fields = 1;
    message Filters {
    }
    Filters filters = 2;
    message Sort {
    }
    repeated Sort sort = 3;
}

message User {
    string company_name = 1;
    string date_joined = 2;
    string email = 3;
    string first_name = 4;
    string is_organization = 5;
    string last_name = 6;
    string login = 7;
    string status = 8;
    string url = 9;
}

message String {
}

service BotifyService {
    // List all analyses for a project
    // 
    // List all analyses for a project
    rpc GetAnalysesUsernameProject_slug(GetAnalysesUsernameProject_slugRequest) returns (GetAnalysesUsernameProject_slugResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}"
      };
    }
    // Get an Analysis detail
    // 
    // Get an Analysis detail
    rpc GetAnalysesUsernameProject_slugAnalysis_slug(GetAnalysesUsernameProject_slugAnalysis_slugRequest) returns (AnalysisDetail) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}"
      };
    }
    // Return global statistics for an analysis
    // 
    // Return global statistics for an analysis
    rpc GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statistics(GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsRequest) returns (CrawlStatistics) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics"
      };
    }
    // Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min)
    // 
    // Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min) for an analysis
    rpc GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsTime(GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsTimeRequest) returns (CrawlStatisticsTime) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/time"
      };
    }
    // Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
    // 
    // Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
    rpc GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsUrlsList_type(GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsUrlsList_typeRequest) returns (GetAnalysesUsernameProject_slugAnalysis_slugCrawl_statisticsUrlsList_typeResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/urls/{list_type}"
      };
    }
    // List of Orphan URLs
    // 
    // Legacy    List of Orphan URLs. URLs which generated visits from the selected source according to Google Analytics data, but were not crawled with by the Botify crawler (either because no links to them were found on the website, or because the crawler was not allowed to follow these links according to the project settings).   For a search engine (medium: origanic; sources: all, aol, ask, baidu, bing, google, naver, yahoo, yandex) or a social network (medium: social; sources: all, facebook, google+, linkedin, pinterest, reddit, tumblr, twitter)
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSource(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSourceRequest) returns (GetAnalysesUsernameProject_slugAnalysis_slugFeaturesGanalyticsOrphan_urlsMediumSourceResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/ganalytics/orphan_urls/{medium}/{source}"
      };
    }
    // Get inlinks percentiles
    // 
    // Get inlinks percentiles
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesLinksPercentiles(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesLinksPercentilesRequest) returns (LinksPercentiles) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/links/percentiles"
      };
    }
    // Lost pagerank
    // 
    // Lost pagerank
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesPagerankLost(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesPagerankLostRequest) returns (PageRankLost) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/pagerank/lost"
      };
    }
    // Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc
    // 
    // Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc.)
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsReport(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsReportRequest) returns (SitemapsReport) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/report"
      };
    }
    // Sample list of URLs which were found in your sitemaps but outside of the
    // 
    // Sample list of URLs which were found in your sitemaps but outside of the crawl perimeter defined for the project, for instance domain/subdomain or protocol (HTTP/HTTPS) not allowed in the crawl settings.
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesOut_of_config(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesOut_of_configRequest) returns (GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesOut_of_configResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/out_of_config"
      };
    }
    // Sample list of URLs which were found in your sitemaps, within the project
    // 
    // Sample list of URLs which were found in your sitemaps, within the project allowed scope (allowed domains/subdomains/protocols), but not found by the Botify crawler.
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesSitemap_only(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesSitemap_onlyRequest) returns (GetAnalysesUsernameProject_slugAnalysis_slugFeaturesSitemapsSamplesSitemap_onlyResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/sitemap_only"
      };
    }
    // Top domains
    // 
    // Top domains
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsDomains(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsDomainsRequest) returns (GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsDomainsResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/domains"
      };
    }
    // Top subddomains
    // 
    // Top subddomains
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsSubdomains(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsSubdomainsRequest) returns (GetAnalysesUsernameProject_slugAnalysis_slugFeaturesTop_domainsSubdomainsResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/subdomains"
      };
    }
    // List of Orphan URLs
    // 
    // List of Orphan URLs. URLs which generated visits from the selected source according to Google Analytics data, but were not crawled with by the Botify crawler (either because no links to them were found on the website, or because the crawler was not allowed to follow these links according to the project settings).   For a search engine (medium: origanic; sources: all, aol, ask, baidu, bing, google, naver, yahoo, yandex) or a social network (medium: social; sources: all, facebook, google+, linkedin, pinterest, reddit, tumblr, twitter)
    rpc GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSource(GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSourceRequest) returns (GetAnalysesUsernameProject_slugAnalysis_slugFeaturesVisitsOrphan_urlsMediumSourceResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/features/visits/orphan_urls/{medium}/{source}"
      };
    }
    // Executes a query and returns a paginated response
    // 
    // Executes a query and returns a paginated response
    rpc PostAnalysesUsernameProject_slugAnalysis_slugUrls(PostAnalysesUsernameProject_slugAnalysis_slugUrlsRequest) returns (PostAnalysesUsernameProject_slugAnalysis_slugUrlsResponse) {
      option (google.api.http) = {
        post: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls"
        body: "UrlsQuery"
      };
    }
    // Query aggregator
    // 
    // Query aggregator. It accepts multiple queries
    rpc PostAnalysesUsernameProject_slugAnalysis_slugUrlsAggs(PostAnalysesUsernameProject_slugAnalysis_slugUrlsAggsRequest) returns (PostAnalysesUsernameProject_slugAnalysis_slugUrlsAggsResponse) {
      option (google.api.http) = {
        post: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls/aggs"
        body: "UrlsAggsQueries"
      };
    }
    // Gets an Analysis datamodel
    // 
    // Gets an Analysis datamodel
    rpc GetAnalysesUsernameProject_slugAnalysis_slugUrlsDatamodel(GetAnalysesUsernameProject_slugAnalysis_slugUrlsDatamodelRequest) returns (Datamodel) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls/datamodel"
      };
    }
    // A list of the CSV Exports requests and their current status
    // 
    // A list of the CSV Exports requests and their current status
    rpc GetAnalysesUsernameProject_slugAnalysis_slugUrlsExport(GetAnalysesUsernameProject_slugAnalysis_slugUrlsExportRequest) returns (GetAnalysesUsernameProject_slugAnalysis_slugUrlsExportResponse) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls/export"
      };
    }
    // Creates a new UrlExport object and starts a task that will export the results into a csv
    // 
    // Creates a new UrlExport object and starts a task that will export the results into a csv. Returns the model id that manages the task
    rpc PostAnalysesUsernameProject_slugAnalysis_slugUrlsExport(PostAnalysesUsernameProject_slugAnalysis_slugUrlsExportRequest) returns (CsvExportStatus) {
      option (google.api.http) = {
        post: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls/export"
        body: "UrlsQuery"
      };
    }
    // Checks the status of an CSVUrlExportJob object
    // 
    // Checks the status of an CSVUrlExportJob object. Returns json object with the status.
    rpc GetAnalysesUsernameProject_slugAnalysis_slugUrlsExportUrl_export_id(GetAnalysesUsernameProject_slugAnalysis_slugUrlsExportUrl_export_idRequest) returns (CsvExportStatus) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls/export/{url_export_id}"
      };
    }
    // Gets the HTML of an URL for an analysis
    // 
    // Gets the HTML of an URL for an analysis
    rpc GetAnalysesUsernameProject_slugAnalysis_slugUrlsHtmlUrl(GetAnalysesUsernameProject_slugAnalysis_slugUrlsHtmlUrlRequest) returns (UrlHTML) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls/html/{url}"
      };
    }
    // Return most frequent segments (= suggested patterns in the previous version)
    // 
    // Return most frequent segments (= suggested patterns in the previous version) for a Botify Query.
    rpc PostAnalysesUsernameProject_slugAnalysis_slugUrlsSuggested_filters(PostAnalysesUsernameProject_slugAnalysis_slugUrlsSuggested_filtersRequest) returns (UrlsAggsQuery) {
      option (google.api.http) = {
        post: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls/suggested_filters"
        body: "UrlsAggsQuery"
      };
    }
    // Gets the detail of an URL for an analysis
    // 
    // Gets the detail of an URL for an analysis
    rpc GetAnalysesUsernameProject_slugAnalysis_slugUrlsUrl(GetAnalysesUsernameProject_slugAnalysis_slugUrlsUrlRequest) returns (UrlDetail) {
      option (google.api.http) = {
        get: "/v1/analyses/{username}/{project_slug}/{analysis_slug}/urls/{url}"
      };
    }
    // List all active projects for the user
    // 
    // List all active projects for the user
    rpc GetProjectsUsername(GetProjectsUsernameRequest) returns (GetProjectsUsernameResponse) {
      option (google.api.http) = {
        get: "/v1/projects/{username}"
      };
    }
    // List all the project's saved filters (each filter's name, ID and filter value)
    // 
    // List all the project's saved filters (each filter's name, ID and filter value)
    rpc GetProjectsUsernameProject_slugFilters(GetProjectsUsernameProject_slugFiltersRequest) returns (GetProjectsUsernameProject_slugFiltersResponse) {
      option (google.api.http) = {
        get: "/v1/projects/{username}/{project_slug}/filters"
      };
    }
    // Retrieves a specific saved filter's name, ID and filter value
    // 
    // Retrieves a specific saved filter's name, ID and filter value
    rpc GetProjectsUsernameProject_slugFiltersIdentifier(GetProjectsUsernameProject_slugFiltersIdentifierRequest) returns (ProjectSavedFilter) {
      option (google.api.http) = {
        get: "/v1/projects/{username}/{project_slug}/filters/{identifier}"
      };
    }
    // Project Query aggregator
    // 
    // Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
    rpc PostProjectsUsernameProject_slugUrlsAggs(PostProjectsUsernameProject_slugUrlsAggsRequest) returns (Default) {
      option (google.api.http) = {
        post: "/v1/projects/{username}/{project_slug}/urls/aggs"
        body: "UrlsAggsQueries"
      };
    }
}

{
	"basePath": "/",
	"consumes.length": 1,
	"consumes[0]": "application/json",
	"definitions.Agent.description": "SimplyRETS Agent Api",
	"definitions.Agent.properties.contact.$ref": "#/definitions/ContactInformation",
	"definitions.Agent.properties.contact.description": "Agent contact info. This information is only present when\nyour RETS feed specifies the agent wishes to show their\ncontact information publicly.\n\n*Contact information is not available for all RETS Vendors.*\n",
	"definitions.Agent.properties.firstName.description": "Agent first name",
	"definitions.Agent.properties.firstName.type": "string",
	"definitions.Agent.properties.id.description": "Well known Agent MLS number or id.",
	"definitions.Agent.properties.id.type": "string",
	"definitions.Agent.properties.lastName.description": "Agent last name",
	"definitions.Agent.properties.lastName.type": "string",
	"definitions.Agent.type": "object",
	"definitions.Association.description": "Home Owners Association",
	"definitions.Association.properties.amenities.description": "Any extra amenities granted by the HOA",
	"definitions.Association.properties.amenities.type": "string",
	"definitions.Association.properties.fee.description": "Association fee",
	"definitions.Association.properties.fee.type": "integer",
	"definitions.Association.properties.name.description": "Name of the association",
	"definitions.Association.properties.name.type": "string",
	"definitions.Association.type": "object",
	"definitions.Broker.description": "SimplyRETS Broker Api",
	"definitions.Broker.properties.startdate.description": "Start Date",
	"definitions.Broker.properties.startdate.format": "date-time",
	"definitions.Broker.properties.startdate.type": "string",
	"definitions.Broker.type": "object",
	"definitions.ContactInformation.description": "RETS MLS Contact Information",
	"definitions.ContactInformation.properties.cell.description": "Contact Information Cell Phone\n\n**Not available for all RETS vendors**\n",
	"definitions.ContactInformation.properties.cell.type": "string",
	"definitions.ContactInformation.properties.email.description": "The email address of the `ContactInformation`\n\n**Not available for all RETS vendors**\n",
	"definitions.ContactInformation.properties.email.type": "string",
	"definitions.ContactInformation.properties.office.description": "Contact Information Office Phone Number\n\n**Not available for all RETS vendors**\n",
	"definitions.ContactInformation.properties.office.type": "string",
	"definitions.ContactInformation.type": "object",
	"definitions.Error.description": "Error information",
	"definitions.Error.properties.error.description": "Error code. In general, we try to adhere to HTTP status code\nand use these error statuses for detailed reporting.\n",
	"definitions.Error.properties.error.format": "int32",
	"definitions.Error.properties.error.type": "integer",
	"definitions.Error.properties.message.description": "Status message with an explanation of the error",
	"definitions.Error.properties.message.type": "string",
	"definitions.Error.type": "object",
	"definitions.GeographicData.description": "RETS MLS Geographic Data",
	"definitions.GeographicData.properties.county.description": "Listing county",
	"definitions.GeographicData.properties.county.type": "string",
	"definitions.GeographicData.properties.directions.description": "Directions to the property",
	"definitions.GeographicData.properties.directions.type": "string",
	"definitions.GeographicData.properties.lat.description": "Listing latitude (if available)",
	"definitions.GeographicData.properties.lat.format": "double",
	"definitions.GeographicData.properties.lat.type": "number",
	"definitions.GeographicData.properties.lng.description": "Listing longitude (if available)",
	"definitions.GeographicData.properties.lng.format": "double",
	"definitions.GeographicData.properties.lng.type": "number",
	"definitions.GeographicData.properties.marketArea.description": "Listing GeoMarket area. May be the same as mlsArea",
	"definitions.GeographicData.properties.marketArea.type": "string",
	"definitions.GeographicData.type": "object",
	"definitions.Listing.description": "RETS MLS Listing Property",
	"definitions.Listing.properties.address.$ref": "#/definitions/StreetAddress",
	"definitions.Listing.properties.address.description": "Comprehensive property address information",
	"definitions.Listing.properties.agent.$ref": "#/definitions/Agent",
	"definitions.Listing.properties.agent.description": "Comprehensive listing agent information",
	"definitions.Listing.properties.association.$ref": "#/definitions/Association",
	"definitions.Listing.properties.coAgent.$ref": "#/definitions/Agent",
	"definitions.Listing.properties.coAgent.description": "co-listing agent information.\n\n*NOTE*: If your RETS feed stores co-list information outside\nof the `Property` resource, co-list agent information will not\nbe available.\n",
	"definitions.Listing.properties.disclaimer.description": "Data accuracy disclaimer. The value in the disclaimer may\nchange depending on your MLS vendors rules.\n",
	"definitions.Listing.properties.disclaimer.type": "string",
	"definitions.Listing.properties.geo.$ref": "#/definitions/GeographicData",
	"definitions.Listing.properties.geo.description": "Geographic data for the listing",
	"definitions.Listing.properties.leaseTerm.description": "Represents the length of the lease.",
	"definitions.Listing.properties.leaseTerm.type": "string",
	"definitions.Listing.properties.leaseType.description": "Information about the status of the existing lease on the property.",
	"definitions.Listing.properties.leaseType.type": "string",
	"definitions.Listing.properties.listDate.description": "Date and time the listing became Active",
	"definitions.Listing.properties.listDate.format": "date-time",
	"definitions.Listing.properties.listDate.type": "string",
	"definitions.Listing.properties.listPrice.description": "Price of the listing",
	"definitions.Listing.properties.listPrice.format": "double",
	"definitions.Listing.properties.listPrice.type": "number",
	"definitions.Listing.properties.listingId.description": "Data Dictionary v1.3 ListingId. The well known identifier\nfor the listing. The value is the id or number by the MLS as\na public identifier for the listing.\n\nThis identifier should not be confused with the `mlsId`, which is\nspecific to the SimplyRETS API.\n",
	"definitions.Listing.properties.listingId.type": "string",
	"definitions.Listing.properties.mls.$ref": "#/definitions/MlsInformation",
	"definitions.Listing.properties.mls.description": "MLS vendor information and data",
	"definitions.Listing.properties.mlsId.description": "A unique identifier for this listing specific to the\nSimplyRETS API. Thie identifier is specific to the\nSimplyRETS api and has no correlation with the MLS\nnumber. Use this id when making requests to the single\nlisting endpoint (eg, `/properties/{mlsId}`).\n\nApplications should not rely on specific `mlsId`s being\npresent. Instead, apps should dynamically use the `mlsId`\nafter using other more general query parameters. Many mls\nvendors require listings which are expired, terminated or\nsold to be purged, which will render calls to specific\n`mlsId`s to return nothing (or possibly a 404).\n",
	"definitions.Listing.properties.mlsId.format": "int64",
	"definitions.Listing.properties.mlsId.type": "integer",
	"definitions.Listing.properties.modified.description": "Date and time of the last modification",
	"definitions.Listing.properties.modified.format": "date-time",
	"definitions.Listing.properties.modified.type": "string",
	"definitions.Listing.properties.office.$ref": "#/definitions/Office",
	"definitions.Listing.properties.office.description": "Listing office or brokerage.",
	"definitions.Listing.properties.photos.description": "Photos of the property. Images are served over https and are\nsuitable for production use on secure websites\n",
	"definitions.Listing.properties.photos.items.type": "string",
	"definitions.Listing.properties.photos.type": "array",
	"definitions.Listing.properties.privateRemarks.description": "Agent only remarks",
	"definitions.Listing.properties.privateRemarks.type": "string",
	"definitions.Listing.properties.property.$ref": "#/definitions/Property",
	"definitions.Listing.properties.property.description": "Specific property data associated with listing.",
	"definitions.Listing.properties.remarks.description": "Description or remarks",
	"definitions.Listing.properties.remarks.type": "string",
	"definitions.Listing.properties.sales.$ref": "#/definitions/Sales",
	"definitions.Listing.properties.sales.description": "Sales data",
	"definitions.Listing.properties.school.$ref": "#/definitions/School",
	"definitions.Listing.properties.school.description": "Comprehensive school zone data",
	"definitions.Listing.properties.showingInstructions.description": "Public instructions for showing the property.",
	"definitions.Listing.properties.showingInstructions.type": "string",
	"definitions.Listing.properties.tax.$ref": "#/definitions/Tax",
	"definitions.Listing.properties.tax.description": "Associate tax data",
	"definitions.Listing.properties.virtualTourUrl.description": "The URL for an unbranded virtual tour of the property.\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n",
	"definitions.Listing.properties.virtualTourUrl.type": "string",
	"definitions.Listing.type": "object",
	"definitions.MlsInformation.description": "RETS MLS Vendor Data",
	"definitions.MlsInformation.properties.area.description": "MLS Area. Generally a subdivision or community name.",
	"definitions.MlsInformation.properties.area.type": "string",
	"definitions.MlsInformation.properties.daysOnMarket.description": "Amount of days the property has been Active",
	"definitions.MlsInformation.properties.daysOnMarket.format": "int64",
	"definitions.MlsInformation.properties.daysOnMarket.type": "integer",
	"definitions.MlsInformation.properties.originatingSystemName.description": "Alias for the listing office or brokerage\n\nThis field corresponds to the data-dictionary `OriginatingSystemName` field\n\nThe name of the originating record provider.  Most commonly\nthe name of the MLS. The place where the listing is\noriginally input by the member.  The legal name of the\ncompany.  To be used for display.\n\nIf you're RETS provider aggregates feeds from multiple\nMLS's, this will be the name of the corresponding MLS.\n",
	"definitions.MlsInformation.properties.originatingSystemName.type": "string",
	"definitions.MlsInformation.properties.status.description": "Normalized MLS Status Code. Compliant with data dictionary\nv1.3 ListingStatus Listing statuses depend on your MLS's\navailability. Below is a brief description of each status\nwith possible synonyms which may map to your MLS-specific\nstatuses\n\n- Active: Active Listing which is still on the market\n- ActiveUnderContract: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent\n- Pending: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract\n- Hold: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- Withdrawn: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- Closed: The purchase agreement has been fulfilled or the lease\n  agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale\n- Expired: The listing contract has expired\n- Delete: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap\n- Incomplete: The listing has not yet be completely entered and is not yet\n  published in the MLS. Synonyms: Draft, Partially Complted\n- ComingSoon\n",
	"definitions.MlsInformation.properties.status.enum.length": 10,
	"definitions.MlsInformation.properties.status.enum[0]": "Active",
	"definitions.MlsInformation.properties.status.enum[1]": "ActiveUnderContract (Backup-Offer)",
	"definitions.MlsInformation.properties.status.enum[2]": "Pending",
	"definitions.MlsInformation.properties.status.enum[3]": "Hold",
	"definitions.MlsInformation.properties.status.enum[4]": "Withdrawn",
	"definitions.MlsInformation.properties.status.enum[5]": "Closed",
	"definitions.MlsInformation.properties.status.enum[6]": "Expired",
	"definitions.MlsInformation.properties.status.enum[7]": "Delete",
	"definitions.MlsInformation.properties.status.enum[8]": "Incomplete",
	"definitions.MlsInformation.properties.status.enum[9]": "ComingSoon",
	"definitions.MlsInformation.properties.status.type": "string",
	"definitions.MlsInformation.properties.statusText.description": "Raw MLS status text. This `field` comes directly from your RETS data\nfield and is not normalized.\n",
	"definitions.MlsInformation.properties.statusText.type": "string",
	"definitions.MlsInformation.type": "object",
	"definitions.Office.description": "RETS MLS Office",
	"definitions.Office.properties.brokerid.description": "Office or brokerage MLS identifier\n\n**Not available for all RETS vendors**\n",
	"definitions.Office.properties.brokerid.type": "string",
	"definitions.Office.properties.contact.$ref": "#/definitions/ContactInformation",
	"definitions.Office.properties.contact.description": "Associated contact details for the office. The availability of this\ninformation depends on your MLS rules and regulations\n\n*Contact information is not available for all RETS Vendors.*\n",
	"definitions.Office.properties.name.description": "Pimary office name",
	"definitions.Office.properties.name.type": "string",
	"definitions.Office.properties.servingName.description": "Primary office or brokerage name",
	"definitions.Office.properties.servingName.type": "string",
	"definitions.Office.type": "object",
	"definitions.OpenHouse.description": "SimplyRETS Open House object",
	"definitions.OpenHouse.properties.description.description": "The remarks and/or description details for the open house",
	"definitions.OpenHouse.properties.description.type": "string",
	"definitions.OpenHouse.properties.endTime.description": "The ending date time for the open house",
	"definitions.OpenHouse.properties.endTime.format": "date-time",
	"definitions.OpenHouse.properties.endTime.type": "string",
	"definitions.OpenHouse.properties.inputId.description": "The MLS number for the showing agent or agent which created the OpenHouse\nin the MLS database.\n",
	"definitions.OpenHouse.properties.listing.$ref": "#/definitions/Listing",
	"definitions.OpenHouse.properties.listing.description": "The full listing associated with the OpenHouse",
	"definitions.OpenHouse.properties.openHouseId.description": "The MLS number or id provided by the MLS\n",
	"definitions.OpenHouse.properties.openHouseId.type": "string",
	"definitions.OpenHouse.properties.openHouseKey.description": "A unique identifier for the open house which is specific to the\nSimplyRETS API\n",
	"definitions.OpenHouse.properties.openHouseKey.type": "string",
	"definitions.OpenHouse.properties.refreshments.description": "Provided",
	"definitions.OpenHouse.properties.refreshments.type": "string",
	"definitions.OpenHouse.properties.startTime.description": "Start Date for the open house",
	"definitions.OpenHouse.properties.startTime.format": "date-time",
	"definitions.OpenHouse.properties.startTime.type": "string",
	"definitions.OpenHouse.properties.type.description": "The open house type. For example, Public or Private",
	"definitions.OpenHouse.properties.type.type": "string",
	"definitions.OpenHouse.type": "object",
	"definitions.Parking.description": "RETS MLS School Data",
	"definitions.Parking.properties.description.description": "Parking features description",
	"definitions.Parking.properties.description.type": "string",
	"definitions.Parking.properties.leased.type": "string",
	"definitions.Parking.properties.spaces.description": "Number of parking spaces",
	"definitions.Parking.properties.spaces.type": "integer",
	"definitions.Parking.type": "object",
	"definitions.Property.description": "Rets MLS Listing Property",
	"definitions.Property.properties.accessibility.type": "string",
	"definitions.Property.properties.additionalRooms.description": "Additional room information. This is a textual description\nof additional rooms for the listing.\n",
	"definitions.Property.properties.additionalRooms.type": "string",
	"definitions.Property.properties.area.description": "Square footage of the building associated with a listing",
	"definitions.Property.properties.area.format": "int64",
	"definitions.Property.properties.area.type": "integer",
	"definitions.Property.properties.areaSource.type": "string",
	"definitions.Property.properties.bathsFull.description": "Number of full bathrooms",
	"definitions.Property.properties.bathsFull.format": "int64",
	"definitions.Property.properties.bathsFull.type": "integer",
	"definitions.Property.properties.bathsHalf.description": "Number of half bathrooms",
	"definitions.Property.properties.bathsHalf.format": "int64",
	"definitions.Property.properties.bathsHalf.type": "integer",
	"definitions.Property.properties.bedrooms.description": "Number of bedrooms",
	"definitions.Property.properties.bedrooms.format": "int64",
	"definitions.Property.properties.bedrooms.type": "integer",
	"definitions.Property.properties.construction.description": "The materials that were used in the construction of the property.",
	"definitions.Property.properties.construction.type": "string",
	"definitions.Property.properties.cooling.description": "A description of the cooling or air conditioning features of the property.",
	"definitions.Property.properties.cooling.type": "string",
	"definitions.Property.properties.exteriorFeatures.description": "Exterior Features for the listing\n",
	"definitions.Property.properties.exteriorFeatures.type": "string",
	"definitions.Property.properties.fireplaces.description": "Number of fireplaces",
	"definitions.Property.properties.fireplaces.format": "int64",
	"definitions.Property.properties.fireplaces.type": "integer",
	"definitions.Property.properties.flooring.description": "The type(s) of flooring found within the property.",
	"definitions.Property.properties.flooring.type": "string",
	"definitions.Property.properties.foundation.type": "string",
	"definitions.Property.properties.garageSpaces.description": "Number of garage spaces",
	"definitions.Property.properties.garageSpaces.format": "float",
	"definitions.Property.properties.garageSpaces.type": "number",
	"definitions.Property.properties.heating.description": "Heating description or short string",
	"definitions.Property.properties.heating.type": "string",
	"definitions.Property.properties.interiorFeatures.description": "The properties interior features",
	"definitions.Property.properties.interiorFeatures.type": "string",
	"definitions.Property.properties.laundryFeatures.type": "string",
	"definitions.Property.properties.lotDescription.type": "string",
	"definitions.Property.properties.lotSize.description": "Lot size dimensions or square footage as a text. This\nfield is generally used to show the pretty formatted\nlot size.\n",
	"definitions.Property.properties.lotSize.type": "string",
	"definitions.Property.properties.lotSizeAcres.description": "Lot size in acres\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n",
	"definitions.Property.properties.lotSizeAcres.format": "float",
	"definitions.Property.properties.lotSizeAcres.type": "number",
	"definitions.Property.properties.lotSizeArea.description": "The total area of the lot.  See `lotSizeUnits` for the units\nof measurement (Square Feet, Square Meters, Acres, etc.).\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n",
	"definitions.Property.properties.lotSizeArea.format": "double",
	"definitions.Property.properties.lotSizeArea.type": "number",
	"definitions.Property.properties.lotSizeAreaUnits.description": "Unit of measurement for the lotSizeArea field.  e.g. Square\nFeet, Square Meters, Acres, etc.\n\nIf this field is `null` the units is the default unit\nof measure specified by your RETS provider.\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n",
	"definitions.Property.properties.lotSizeAreaUnits.type": "string",
	"definitions.Property.properties.maintenanceExpense.description": "Yearly maintenance expense",
	"definitions.Property.properties.maintenanceExpense.format": "float",
	"definitions.Property.properties.maintenanceExpense.type": "number",
	"definitions.Property.properties.occupantName.type": "string",
	"definitions.Property.properties.occupantType.type": "string",
	"definitions.Property.properties.parking.$ref": "#/definitions/Parking",
	"definitions.Property.properties.poolFeatures.type": "string",
	"definitions.Property.properties.roof.description": "Property roof description",
	"definitions.Property.properties.roof.type": "string",
	"definitions.Property.properties.stories.description": "Number of stories or levels. Represented as a `double' to\naccount for half stories.\n",
	"definitions.Property.properties.stories.format": "float",
	"definitions.Property.properties.stories.type": "number",
	"definitions.Property.properties.style.description": "Property style description or short string",
	"definitions.Property.properties.style.type": "string",
	"definitions.Property.properties.subType.description": "A normalized representation of the listings sub-type.\n",
	"definitions.Property.properties.subType.enum.length": 14,
	"definitions.Property.properties.subType.enum[0]": "Apartment",
	"definitions.Property.properties.subType.enum[10]": "Townhouse",
	"definitions.Property.properties.subType.enum[11]": "Timeshare",
	"definitions.Property.properties.subType.enum[12]": "Triplex",
	"definitions.Property.properties.subType.enum[13]": "ManufacturedOnLand",
	"definitions.Property.properties.subType.enum[1]": "BoatSlip",
	"definitions.Property.properties.subType.enum[2]": "SingleFamilyResidence",
	"definitions.Property.properties.subType.enum[3]": "DeededParking",
	"definitions.Property.properties.subType.enum[4]": "Cabin",
	"definitions.Property.properties.subType.enum[5]": "Condominium",
	"definitions.Property.properties.subType.enum[6]": "Duplex",
	"definitions.Property.properties.subType.enum[7]": "ManufacturedHome",
	"definitions.Property.properties.subType.enum[8]": "Quadruplex",
	"definitions.Property.properties.subType.enum[9]": "StockCooperative",
	"definitions.Property.properties.subType.type": "string",
	"definitions.Property.properties.subTypeRaw.description": "The raw text representation of the property sub type.\n",
	"definitions.Property.properties.subTypeRaw.type": "string",
	"definitions.Property.properties.subdivision.description": "The subdivision or community name",
	"definitions.Property.properties.subdivision.type": "string",
	"definitions.Property.properties.type.description": "Abbreviated property type. RES is Residential, CND is CondoOrTownhome,\nRNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land,\nFRM is Farm. See the `propertySubType` field for more information.\n",
	"definitions.Property.properties.type.enum.length": 7,
	"definitions.Property.properties.type.enum[0]": "RES",
	"definitions.Property.properties.type.enum[1]": "CND",
	"definitions.Property.properties.type.enum[2]": "RNT",
	"definitions.Property.properties.type.enum[3]": "MLF",
	"definitions.Property.properties.type.enum[4]": "CRE",
	"definitions.Property.properties.type.enum[5]": "LND",
	"definitions.Property.properties.type.enum[6]": "FRM",
	"definitions.Property.properties.type.type": "string",
	"definitions.Property.properties.view.description": "View details and description",
	"definitions.Property.properties.view.type": "string",
	"definitions.Property.properties.water.description": "The name, if known, of the body of water on which the\nproperty is located. (E.g., lake name, river name, ocean\nname, sea name, canal name). Otherwise, this field will\ncontain features of the waterfront on which the property is\nlocated.\n",
	"definitions.Property.properties.water.type": "string",
	"definitions.Property.properties.yearBuilt.description": "Year the property was built",
	"definitions.Property.properties.yearBuilt.format": "int64",
	"definitions.Property.properties.yearBuilt.type": "integer",
	"definitions.Property.type": "object",
	"definitions.Sales.description": "Sales Data",
	"definitions.Sales.properties.agent.description": "RETS Sales data agent id",
	"definitions.Sales.properties.agent.type": "string",
	"definitions.Sales.properties.closeDate.description": "RETS Sales data close date",
	"definitions.Sales.properties.closeDate.format": "date-time",
	"definitions.Sales.properties.closeDate.type": "string",
	"definitions.Sales.properties.closePrice.description": "RETS Sales data sold price",
	"definitions.Sales.properties.closePrice.format": "int64",
	"definitions.Sales.properties.closePrice.type": "integer",
	"definitions.Sales.properties.contractDate.description": "RETS Sales data contract date",
	"definitions.Sales.properties.contractDate.format": "date-time",
	"definitions.Sales.properties.contractDate.type": "string",
	"definitions.Sales.properties.office.description": "RETS Sales data selling office/brokerage id",
	"definitions.Sales.properties.office.type": "string",
	"definitions.Sales.type": "object",
	"definitions.School.description": "RETS MLS School Data",
	"definitions.School.properties.district.description": "School district name.",
	"definitions.School.properties.district.type": "string",
	"definitions.School.properties.elementarySchool.description": "Elementary school name.",
	"definitions.School.properties.elementarySchool.type": "string",
	"definitions.School.properties.highSchool.description": "High school name",
	"definitions.School.properties.highSchool.type": "string",
	"definitions.School.properties.middleSchool.description": "Middle or junior school name",
	"definitions.School.properties.middleSchool.type": "string",
	"definitions.School.type": "object",
	"definitions.StreetAddress.description": "RETS MLS Street Address",
	"definitions.StreetAddress.properties.city.description": "City name",
	"definitions.StreetAddress.properties.city.type": "string",
	"definitions.StreetAddress.properties.country.description": "Street address country (United States or Canada)",
	"definitions.StreetAddress.properties.country.type": "string",
	"definitions.StreetAddress.properties.crossStreet.description": "Known cross street",
	"definitions.StreetAddress.properties.crossStreet.type": "string",
	"definitions.StreetAddress.properties.full.description": "Full pretty-printed address with suffix (if available)",
	"definitions.StreetAddress.properties.full.type": "string",
	"definitions.StreetAddress.properties.postalCode.description": "Street Address postal code",
	"definitions.StreetAddress.properties.postalCode.type": "string",
	"definitions.StreetAddress.properties.state.description": "State or province. Maps to the data dictionary field `StateOrProvince`.",
	"definitions.StreetAddress.properties.state.type": "string",
	"definitions.StreetAddress.properties.streetName.description": "Name of the street",
	"definitions.StreetAddress.properties.streetName.type": "string",
	"definitions.StreetAddress.properties.streetNumber.description": "Street number",
	"definitions.StreetAddress.properties.streetNumber.format": "int64",
	"definitions.StreetAddress.properties.streetNumber.type": "integer",
	"definitions.StreetAddress.properties.streetNumberText.description": "Textual representation of the street number. This field\nis usually redundant with what's in `streetNumber` but is\noccassionally usefuly for street number which are actually\nalpha-numerical. For example, \"N63453\" or \"34556B\".\n\n**Added on 2016/05/02**\n",
	"definitions.StreetAddress.properties.streetNumberText.type": "string",
	"definitions.StreetAddress.type": "object",
	"definitions.Tax.description": "RETS MLS Tax Data",
	"definitions.Tax.properties.id.description": "Tax Parcel ID for the listing",
	"definitions.Tax.properties.id.type": "string",
	"definitions.Tax.properties.taxAnnualAmount.description": "Annual tax amount in USD",
	"definitions.Tax.properties.taxAnnualAmount.type": "string",
	"definitions.Tax.properties.taxYear.description": "Tax Year",
	"definitions.Tax.properties.taxYear.format": "int64",
	"definitions.Tax.properties.taxYear.type": "integer",
	"definitions.Tax.type": "object",
	"host": "api.simplyrets.com",
	"info.description": "The SimplyRETS API is an exciting step towards making it easier for\ndevelopers and real estate agents to build something awesome with\nreal estate data!\n\nThe documentation below makes live requests to our API using the\ntrial data. To get set up with the API using live MLS data, you\nmust have RETS credentials from your MLS, which you can then use to\ncreate an app with SimplyRETS. For more information on that\nprocess, please see our [FAQ](https://simplyrets.com/faq), [Getting\nStarted](https://simplyrets.com/blog/getting-set-up.html) page, or\n[contact us](https://simplyrets.com/\\#home-contact).\n\nBelow you'll find the API endpoints, query parameters, response bodies,\nand other information about using the SimplyRETS API. You can run\nqueries by clicking the 'Try it Out' button at the bottom of each\nsection.\n\n### Authentication\nThe SimplyRETS API uses Basic Authentication. When you create an\napp, you'll get a set of API credentials to access your\nlistings. If you're trying out the test data, you can use\n`simplyrets:simplyrets` for connecting to the API.\n\n### Media Types\nThe SimplyRETS API uses the `Accept` header to allow clients to\ncontrol media types (content versions). We maintain backwards\ncompatibility with API clients by allowing them to specify a\ncontent version. We highly recommend setting and explicity media\ntype when your application reaches production. Both the structure\nand content of our API response bodies is subject to change so we\ncan add new features while respecting the stability of applications\nwhich have already been developed.\n\nTo always use the latest SimplyRETS content version, simply use\n`application/json` in your application `Accept` header.\n\nIf you want to pin your clients media type to a specific version,\nyou can use the vendor-specific SimplyRETS media type, e.g.\n`application/vnd.simplyrets-v0.1+json\"`\n\nTo view all valid content-types for making an `OPTIONS`, make a\nrequest to the SimplyRETS api root\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`\n\nThe default media types used in our API responses may change in the\nfuture. If you're building an application and care about the\nstability of the API, be sure to request a specific media type in the\nAccept header as shown in the examples below.\n\nThe wordpress plugin automatically sets the `Accept` header for the\ncompatible SimplyRETS media types.\n\n### Pagination\n\nTo paginate through listings, start your query with these\nparameters: 'limit=500\u0026lastId=0'. The 'lastId' is the important\npart, you can use any limit up to 500. When you receive the\nresponse from the API with the results, check the 'Link' header for\nthe 'next' link. That link is pre-built to access the next 'page'\nof listings. Alternatively, you can use the last listing's 'mlsId'\nfrom the previous request and use that in the next query. For\nexample:\n\nFirst query:\n\ncurl -u username:password 'https://api.simplyrets.com/properties?limit=500\u0026lastId=0'\n\nIf the 'mlsId' in the last listing of the results is '1234567', then the next query will be:\n\ncurl -u username:password 'https://api.simplyrets.com/properties?limit=500\u0026lastId=1234567'\n\n...and so one until you have reached the final page of listings.\n\nThere a few pieces of useful information about each request stored\nin the HTTP Headers:\n\n- `X-Total-Count` shows you the total amount of listings that match\n  your current query.\n- `Link` contains pre-built pagination links for accessing the next\n'page' of listings that match your query.\n\n### RETS Vendor Compliance\n\nMany RETS vendors have strict requirements for showing disclaimers\nwith specific information embedded. For example, in many areas it's\nrequired to show the time of the last listing refresh inside the\ndisclaimer.\n\nThe timestamp of the last listing refresh timestamp can be found in\none of two spots:\n\n- The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`\n\n- Calling the API root `/` or properties api endpoint `/properties`\n  with an OPTIONS request\n\n  - `OPTIONS /`\n\n    Using this route, you can see the timestamp for all RETS\n    vendors associated with your account.\n\n  - `OPTIONS /properties`\n",
	"info.title": "SimplyRETS",
	"info.version": "1.0.0",
	"info.x-origin.length": 1,
	"info.x-origin[0].format": "swagger",
	"info.x-origin[0].url": "https://docs.simplyrets.com/api/resources.json",
	"info.x-origin[0].version": "2.0",
	"info.x-preferred": true,
	"info.x-providerName": "simplyrets.com",
	"paths./openhouses.get.description": "This is the main endpoint for accessing openhouses.\n",
	"paths./openhouses.get.parameters.length": 12,
	"paths./openhouses.get.parameters[0].collectionFormat": "multi",
	"paths./openhouses.get.parameters[0].description": "Request listings by a specific property type. This\ndefaults to Residential, and you can only specify one type\nin a single query.\n",
	"paths./openhouses.get.parameters[0].enum.length": 7,
	"paths./openhouses.get.parameters[0].enum[0]": "residential",
	"paths./openhouses.get.parameters[0].enum[1]": "rental",
	"paths./openhouses.get.parameters[0].enum[2]": "multifamily",
	"paths./openhouses.get.parameters[0].enum[3]": "condominium",
	"paths./openhouses.get.parameters[0].enum[4]": "commercial",
	"paths./openhouses.get.parameters[0].enum[5]": "land",
	"paths./openhouses.get.parameters[0].enum[6]": "farm",
	"paths./openhouses.get.parameters[0].in": "query",
	"paths./openhouses.get.parameters[0].name": "type",
	"paths./openhouses.get.parameters[0].required": false,
	"paths./openhouses.get.parameters[0].type": "string",
	"paths./openhouses.get.parameters[10].description": "Sort the response by a specific field. Values starting\nwith a minus (-) denote descending order, while the others\nare ascending.\n",
	"paths./openhouses.get.parameters[10].enum.length": 8,
	"paths./openhouses.get.parameters[10].enum[0]": "listprice",
	"paths./openhouses.get.parameters[10].enum[1]": "-listprice",
	"paths./openhouses.get.parameters[10].enum[2]": "listdate",
	"paths./openhouses.get.parameters[10].enum[3]": "-listdate",
	"paths./openhouses.get.parameters[10].enum[4]": "beds",
	"paths./openhouses.get.parameters[10].enum[5]": "-beds",
	"paths./openhouses.get.parameters[10].enum[6]": "baths",
	"paths./openhouses.get.parameters[10].enum[7]": "-baths",
	"paths./openhouses.get.parameters[10].in": "query",
	"paths./openhouses.get.parameters[10].name": "sort",
	"paths./openhouses.get.parameters[10].required": false,
	"paths./openhouses.get.parameters[10].type": "string",
	"paths./openhouses.get.parameters[11].collectionFormat": "multi",
	"paths./openhouses.get.parameters[11].description": "Include a extra fields which are not in the default\nresponse body\n- 'association' includes additional HOA data\n- 'agreement' information on the listing agreement\n- 'garageSpaces' additional garage data\n- 'maintenanceExpense' data on maintenance expenses\n- 'parking' additional parking data\n- 'pool' includes an additional pool description\n- 'taxAnnualAmount' include the annual tax amount\n- 'taxYear' include the tax year data\n- 'rooms' include parameter will include\n   any additional rooms as a list.\n\nNote that your MLS must provide these fields in their RETS\ndata for them to be available in the API response.\n\nIn the future, fields which require an 'include' may become available\nby default.\n",
	"paths./openhouses.get.parameters[11].in": "query",
	"paths./openhouses.get.parameters[11].items.type": "string",
	"paths./openhouses.get.parameters[11].name": "include",
	"paths./openhouses.get.parameters[11].required": false,
	"paths./openhouses.get.parameters[11].type": "array",
	"paths./openhouses.get.parameters[1].description": "Request openhouses for a specific `listingId`.\n",
	"paths./openhouses.get.parameters[1].in": "query",
	"paths./openhouses.get.parameters[1].name": "listingId",
	"paths./openhouses.get.parameters[1].required": false,
	"paths./openhouses.get.parameters[1].type": "string",
	"paths./openhouses.get.parameters[2].collectionFormat": "multi",
	"paths./openhouses.get.parameters[2].description": "Filter the openhouses returned by a list of valid cities. A\nlist of valid cities can be found by making an OPTIONS\nrequest to the `/openhouses` endpoint.\n\nThe `cities` query parameter is case-insensitive.\n",
	"paths./openhouses.get.parameters[2].in": "query",
	"paths./openhouses.get.parameters[2].items.type": "string",
	"paths./openhouses.get.parameters[2].name": "cities",
	"paths./openhouses.get.parameters[2].required": false,
	"paths./openhouses.get.parameters[2].type": "array",
	"paths./openhouses.get.parameters[3].collectionFormat": "multi",
	"paths./openhouses.get.parameters[3].description": "Filter the listings returned by brokerage with a Broker ID.\nYou can specific multiple broker parameters. Note, the Broker\nID is provided by your MLS.\n",
	"paths./openhouses.get.parameters[3].in": "query",
	"paths./openhouses.get.parameters[3].items.type": "string",
	"paths./openhouses.get.parameters[3].name": "brokers",
	"paths./openhouses.get.parameters[3].required": false,
	"paths./openhouses.get.parameters[3].type": "array",
	"paths./openhouses.get.parameters[4].description": "Filter the listings returned by an agent ID.  Note, the\nAgent ID is provided by your MLS.\n",
	"paths./openhouses.get.parameters[4].in": "query",
	"paths./openhouses.get.parameters[4].name": "agent",
	"paths./openhouses.get.parameters[4].required": false,
	"paths./openhouses.get.parameters[4].type": "string",
	"paths./openhouses.get.parameters[5].description": "Filter listings by a minimum price.\n",
	"paths./openhouses.get.parameters[5].in": "query",
	"paths./openhouses.get.parameters[5].name": "minprice",
	"paths./openhouses.get.parameters[5].required": false,
	"paths./openhouses.get.parameters[5].type": "integer",
	"paths./openhouses.get.parameters[6].description": "Scheduled date and time of the open house showing",
	"paths./openhouses.get.parameters[6].format": "date-time",
	"paths./openhouses.get.parameters[6].in": "query",
	"paths./openhouses.get.parameters[6].name": "startdate",
	"paths./openhouses.get.parameters[6].type": "string",
	"paths./openhouses.get.parameters[7].description": "Increase the offset parameter by the limit to go to the\nnext \"page\" of listings. Also take a look at the Link HTTP\nHeader for pre-built pagination.\n\n*NOTE:* Use the `lastId` parameter for pagination.\n",
	"paths./openhouses.get.parameters[7].in": "query",
	"paths./openhouses.get.parameters[7].name": "offset",
	"paths./openhouses.get.parameters[7].required": false,
	"paths./openhouses.get.parameters[7].type": "integer",
	"paths./openhouses.get.parameters[8].description": "Used as a cursor for pagination.\n",
	"paths./openhouses.get.parameters[8].in": "query",
	"paths./openhouses.get.parameters[8].name": "lastId",
	"paths./openhouses.get.parameters[8].required": false,
	"paths./openhouses.get.parameters[8].type": "integer",
	"paths./openhouses.get.parameters[9].description": "Set the number of listings to return in the response.\nThis defaults to 20 listings, and can be a maximum of 500.\nTo paginate through to the next page of listings, take a\nlook at the `offset` parameter, or the Link in the HTTP\nHeader.\n",
	"paths./openhouses.get.parameters[9].in": "query",
	"paths./openhouses.get.parameters[9].name": "limit",
	"paths./openhouses.get.parameters[9].required": false,
	"paths./openhouses.get.parameters[9].type": "integer",
	"paths./openhouses.get.responses.200.description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`.\n",
	"paths./openhouses.get.responses.200.schema.items.$ref": "#/definitions/OpenHouse",
	"paths./openhouses.get.responses.200.schema.type": "array",
	"paths./openhouses.get.responses.400.description": "Will send `Bad Request`.",
	"paths./openhouses.get.responses.400.schema.$ref": "#/definitions/Error",
	"paths./openhouses.get.responses.401.description": "Will send `Authentication Required`.",
	"paths./openhouses.get.responses.401.schema.$ref": "#/definitions/Error",
	"paths./openhouses.get.responses.403.description": "Will send `Authorization Required`.",
	"paths./openhouses.get.responses.403.schema.$ref": "#/definitions/Error",
	"paths./openhouses.get.responses.429.description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n",
	"paths./openhouses.get.responses.429.schema.$ref": "#/definitions/Error",
	"paths./openhouses.get.responses.500.description": "Will send `Internal Server Error`.",
	"paths./openhouses.get.responses.500.schema.$ref": "#/definitions/Error",
	"paths./openhouses.get.security.length": 1,
	"paths./openhouses.get.security[0].basicAuth.length": 0,
	"paths./openhouses.get.summary": "The SimplyRETS OpenHouses API",
	"paths./openhouses/{openHouseKey}.get.description": "Use this endpoint for accessing a single OpenHouse.\n",
	"paths./openhouses/{openHouseKey}.get.parameters.length": 2,
	"paths./openhouses/{openHouseKey}.get.parameters[0].default": 189018,
	"paths./openhouses/{openHouseKey}.get.parameters[0].description": "A unique OpenHouse identification key",
	"paths./openhouses/{openHouseKey}.get.parameters[0].format": "int64",
	"paths./openhouses/{openHouseKey}.get.parameters[0].in": "path",
	"paths./openhouses/{openHouseKey}.get.parameters[0].name": "openHouseKey",
	"paths./openhouses/{openHouseKey}.get.parameters[0].required": true,
	"paths./openhouses/{openHouseKey}.get.parameters[0].type": "integer",
	"paths./openhouses/{openHouseKey}.get.parameters[1].collectionFormat": "multi",
	"paths./openhouses/{openHouseKey}.get.parameters[1].description": "Include a extra fields which are not in the default\nresponse body\n- 'association' includes additional HOA data\n- 'agreement' information on the listing agreement\n- 'garageSpaces' additional garage data\n- 'maintenanceExpense' data on maintenance expenses\n- 'parking' additional parking data\n- 'pool' includes an additional pool description\n- 'taxAnnualAmount' include the annual tax amount\n- 'taxYear' include the tax year data\n- 'rooms' include parameter will include\n   any additional rooms as a list.\n\nNote that your MLS must provide these fields in their RETS\ndata for them to be available in the API response.\n\nIn the future, fields which require an 'include' may\nbecome available by default.\n",
	"paths./openhouses/{openHouseKey}.get.parameters[1].in": "query",
	"paths./openhouses/{openHouseKey}.get.parameters[1].items.type": "string",
	"paths./openhouses/{openHouseKey}.get.parameters[1].name": "include",
	"paths./openhouses/{openHouseKey}.get.parameters[1].required": false,
	"paths./openhouses/{openHouseKey}.get.parameters[1].type": "array",
	"paths./openhouses/{openHouseKey}.get.responses.200.description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`\n",
	"paths./openhouses/{openHouseKey}.get.responses.200.schema.$ref": "#/definitions/OpenHouse",
	"paths./openhouses/{openHouseKey}.get.responses.400.description": "Will send `Bad Request`.",
	"paths./openhouses/{openHouseKey}.get.responses.400.schema.$ref": "#/definitions/Error",
	"paths./openhouses/{openHouseKey}.get.responses.401.description": "Will send `Authentication Required`.",
	"paths./openhouses/{openHouseKey}.get.responses.401.schema.$ref": "#/definitions/Error",
	"paths./openhouses/{openHouseKey}.get.responses.403.description": "Will send `Authorization Required`.",
	"paths./openhouses/{openHouseKey}.get.responses.403.schema.$ref": "#/definitions/Error",
	"paths./openhouses/{openHouseKey}.get.responses.429.description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n",
	"paths./openhouses/{openHouseKey}.get.responses.429.schema.$ref": "#/definitions/Error",
	"paths./openhouses/{openHouseKey}.get.responses.500.description": "Will send `Internal Server Error`.",
	"paths./openhouses/{openHouseKey}.get.responses.500.schema.$ref": "#/definitions/Error",
	"paths./openhouses/{openHouseKey}.get.security.length": 1,
	"paths./openhouses/{openHouseKey}.get.security[0].basicAuth.length": 0,
	"paths./openhouses/{openHouseKey}.get.summary": "Single OpenHouse Endpoint",
	"paths./properties.get.description": "This is the main endpoint for accessing your properties. View\nall of the available query parameters and make requests below!\nThe API uses Basic Authentication, which most HTTP libraries\nwill handle for you. To use the test data (which is what this\npages uses), you can use the api key `simplyrets` and secret\n`simplyrets`. Note that these test listings are not live MLS\nlistings but the data, query parameters, and response bodies\nwill all work the same.\n",
	"paths./properties.get.parameters.length": 29,
	"paths./properties.get.parameters[0].description": "A textual keyword search. This parameter will search  the following\nfields, when available:\n  - listingId (This does _not_ search the `mlsId` field in the SimplyRETS response body)\n  - street number\n  - street name\n  - mls area (major)\n  - city\n  - subdivision name\n  - postal code\n",
	"paths./properties.get.parameters[0].in": "query",
	"paths./properties.get.parameters[0].name": "q",
	"paths./properties.get.parameters[0].required": false,
	"paths./properties.get.parameters[0].type": "string",
	"paths./properties.get.parameters[10].description": "Filter listings by a maximum number of bathrooms.\n",
	"paths./properties.get.parameters[10].in": "query",
	"paths./properties.get.parameters[10].name": "maxbaths",
	"paths./properties.get.parameters[10].required": false,
	"paths./properties.get.parameters[10].type": "integer",
	"paths./properties.get.parameters[11].description": "Filter listings by a minimum number of bedrooms.\n",
	"paths./properties.get.parameters[11].in": "query",
	"paths./properties.get.parameters[11].name": "minbeds",
	"paths./properties.get.parameters[11].required": false,
	"paths./properties.get.parameters[11].type": "integer",
	"paths./properties.get.parameters[12].description": "Filter listings by a maximum number of bedrooms.\n",
	"paths./properties.get.parameters[12].in": "query",
	"paths./properties.get.parameters[12].name": "maxbeds",
	"paths./properties.get.parameters[12].required": false,
	"paths./properties.get.parameters[12].type": "integer",
	"paths./properties.get.parameters[13].description": "Filter listings by a maximum number of days on market.\n_Note that your MLS must provide Days on Market data._\n",
	"paths./properties.get.parameters[13].in": "query",
	"paths./properties.get.parameters[13].name": "maxdom",
	"paths./properties.get.parameters[13].required": false,
	"paths./properties.get.parameters[13].type": "integer",
	"paths./properties.get.parameters[14].description": "Filter listings by a setting a minimum year built.\n",
	"paths./properties.get.parameters[14].in": "query",
	"paths./properties.get.parameters[14].name": "minyear",
	"paths./properties.get.parameters[14].required": false,
	"paths./properties.get.parameters[14].type": "integer",
	"paths./properties.get.parameters[15].description": "Set the number of listings to return in the response.\nThis defaults to 20 listings, and can be a maximum of 500.\nTo paginate through to the next page of listings, take a\nlook at the `offset` parameter, or the Link in the HTTP\nHeader.\n",
	"paths./properties.get.parameters[15].in": "query",
	"paths./properties.get.parameters[15].name": "limit",
	"paths./properties.get.parameters[15].required": false,
	"paths./properties.get.parameters[15].type": "integer",
	"paths./properties.get.parameters[16].description": "Increase the offset parameter by the limit to go to the\nnext \"page\" of listings. Also take a look at the Link HTTP\nHeader for pre-built pagination.\n\n*NOTE:* Use the `lastId` field to paginate response\n\n*NOTE:* If you're offset is too high, you will receive an\n`HTTP 400 offset too high` error message.\n",
	"paths./properties.get.parameters[16].in": "query",
	"paths./properties.get.parameters[16].name": "offset",
	"paths./properties.get.parameters[16].required": false,
	"paths./properties.get.parameters[16].type": "integer",
	"paths./properties.get.parameters[17].description": "Used as a cursor for pagination. When using `lastId`, the `sort` parameter\nwill not work.\n",
	"paths./properties.get.parameters[17].in": "query",
	"paths./properties.get.parameters[17].name": "lastId",
	"paths./properties.get.parameters[17].required": false,
	"paths./properties.get.parameters[17].type": "integer",
	"paths./properties.get.parameters[18].description": "Used to specify the vendor (MLS) to search from. This\nparameter is required on multi-MLS apps, and you can only\nquery one vendor at a time. To get your vendor id's make\nan OPTIONS request to https://api.simplyrets.com.\n",
	"paths./properties.get.parameters[18].in": "query",
	"paths./properties.get.parameters[18].name": "vendor",
	"paths./properties.get.parameters[18].required": false,
	"paths./properties.get.parameters[18].type": "string",
	"paths./properties.get.parameters[19].collectionFormat": "multi",
	"paths./properties.get.parameters[19].description": "Filter the listings returned by postal codes / zip\ncode. You can specify multiple.\n",
	"paths./properties.get.parameters[19].in": "query",
	"paths./properties.get.parameters[19].items.type": "string",
	"paths./properties.get.parameters[19].name": "postalCodes",
	"paths./properties.get.parameters[19].required": false,
	"paths./properties.get.parameters[19].type": "array",
	"paths./properties.get.parameters[1].collectionFormat": "multi",
	"paths./properties.get.parameters[1].description": "Request listings by a specific status. This parameter\ndefaults to active and you can specify multiple statuses\nin a single query.\n\nListing statuses depend on your MLS's availability. Below is\na brief description of each status with possible synonyms which\nmay map to your MLS-specific statuses\n- *Active*: Active Listing which is still on the market\n- *ActiveUnderContract*: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent\n- *Pending*: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract\n- *Hold*: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- *Withdrawn*: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- *Closed*: The purchase agreement has been fulfilled or the lease\n  agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale\n- *Expired*: The listing contract has expired\n- *Delete*: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap\n- *Incomplete*: The listing has not yet be completely entered and is not yet\n  published in the MLS. Synonyms: Draft, Partially Complted\n- *ComingSoon*\n",
	"paths./properties.get.parameters[1].enum.length": 10,
	"paths./properties.get.parameters[1].enum[0]": "Active",
	"paths./properties.get.parameters[1].enum[1]": "Pending",
	"paths./properties.get.parameters[1].enum[2]": "Closed",
	"paths./properties.get.parameters[1].enum[3]": "ActiveUnderContract",
	"paths./properties.get.parameters[1].enum[4]": "Hold",
	"paths./properties.get.parameters[1].enum[5]": "Withdrawn",
	"paths./properties.get.parameters[1].enum[6]": "Expired",
	"paths./properties.get.parameters[1].enum[7]": "Delete",
	"paths./properties.get.parameters[1].enum[8]": "Incomplete",
	"paths./properties.get.parameters[1].enum[9]": "ComingSoon",
	"paths./properties.get.parameters[1].in": "query",
	"paths./properties.get.parameters[1].items.type": "string",
	"paths./properties.get.parameters[1].name": "status",
	"paths./properties.get.parameters[1].required": false,
	"paths./properties.get.parameters[1].type": "array",
	"paths./properties.get.parameters[20].collectionFormat": "multi",
	"paths./properties.get.parameters[20].description": "Filter the listings by specific interior features.  You\ncan filter by multiple. For example, to filter trial listings\nby multiple features you can use,\nReturn listings that are within a set of latitude\nlongitude coordinates. For example,\n\n```\nWet Bar\nHigh Ceiling\n```\n\ne.g. `https://simplyrets.com/services?features=Wet%20Bar\u0026features=High%20Ceiling`\n\nThe features provided by your MLS can be seen in your\nOPTIONS request. To view all valid features, make a\nrequest to the SimplyRETS api root\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`\n",
	"paths./properties.get.parameters[20].in": "query",
	"paths./properties.get.parameters[20].items.type": "string",
	"paths./properties.get.parameters[20].name": "features",
	"paths./properties.get.parameters[20].required": false,
	"paths./properties.get.parameters[20].type": "array",
	"paths./properties.get.parameters[21].description": "Query water/waterfront listings only. Specify `true` to\nfilter waterfront listings.\n",
	"paths./properties.get.parameters[21].in": "query",
	"paths./properties.get.parameters[21].name": "water",
	"paths./properties.get.parameters[21].required": false,
	"paths./properties.get.parameters[21].type": "string",
	"paths./properties.get.parameters[22].collectionFormat": "multi",
	"paths./properties.get.parameters[22].description": "Filter the listings returned by specific neighborhoods and\nsubdivisions. You can specify multiple `neighborhoods` by\nusing the query parameter multiple times.\n\nThe `neighborhoods` query parameter is case-insensitive.\n",
	"paths./properties.get.parameters[22].in": "query",
	"paths./properties.get.parameters[22].items.type": "string",
	"paths./properties.get.parameters[22].name": "neighborhoods",
	"paths./properties.get.parameters[22].required": false,
	"paths./properties.get.parameters[22].type": "array",
	"paths./properties.get.parameters[23].collectionFormat": "multi",
	"paths./properties.get.parameters[23].description": "Filter the listings returned by specific cities. You can\nspecify multiple `cities` query parameters.\n\nThe `cities` query parameter is case-insensitive.\n",
	"paths./properties.get.parameters[23].in": "query",
	"paths./properties.get.parameters[23].items.type": "string",
	"paths./properties.get.parameters[23].name": "cities",
	"paths./properties.get.parameters[23].required": false,
	"paths./properties.get.parameters[23].type": "array",
	"paths./properties.get.parameters[24].collectionFormat": "multi",
	"paths./properties.get.parameters[24].description": "Filter the listings returned by specific counties. You can\nspecify multiple `counties` parameters.\n\nThe `counties` query parameter is case-insensitive.\n",
	"paths./properties.get.parameters[24].in": "query",
	"paths./properties.get.parameters[24].items.type": "string",
	"paths./properties.get.parameters[24].name": "counties",
	"paths./properties.get.parameters[24].required": false,
	"paths./properties.get.parameters[24].type": "array",
	"paths./properties.get.parameters[25].collectionFormat": "multi",
	"paths./properties.get.parameters[25].description": "Return listings that are within a set of latitude\nlongitude coordinates. For example;\n```\n29.723837,-95.69778\n29.938275,-95.69778\n29.938275,-95.32974\n29.723837,-95.32974\n```\nNote that some MLS's do not provide latitude and longitude\nfor their listings, which is required for this parameter\nto work. In these cases, SimplyRETS offers a [Geocoding\nAddon](https://simplyrets.com/services#geocoding).\n\nCheck out our\n[blog post](https://simplyrets.com/blog/interactive-map-search.html)\non using the `points` parameter to build a map-based app\nin javascript.\n",
	"paths./properties.get.parameters[25].in": "query",
	"paths./properties.get.parameters[25].items.type": "string",
	"paths./properties.get.parameters[25].name": "points",
	"paths./properties.get.parameters[25].required": false,
	"paths./properties.get.parameters[25].type": "array",
	"paths./properties.get.parameters[26].collectionFormat": "multi",
	"paths./properties.get.parameters[26].description": "Include a extra fields which are not in the default\nresponse body\n- 'association' includes additional HOA data\n- 'agreement' information on the listing agreement\n- 'garageSpaces' additional garage data\n- 'maintenanceExpense' data on maintenance expenses\n- 'parking' additional parking data\n- 'pool' includes an additional pool description\n- 'taxAnnualAmount' include the annual tax amount\n- 'taxYear' include the tax year data\n- 'rooms' include parameter will include\n   any additional rooms as a list.\n\nNote that your MLS must provide these fields in their RETS\ndata for them to be available in the API response.\n\nIn the future, fields which require an 'include' may become available\nby default.\n",
	"paths./properties.get.parameters[26].enum.length": 9,
	"paths./properties.get.parameters[26].enum[0]": "association",
	"paths./properties.get.parameters[26].enum[1]": "agreement",
	"paths./properties.get.parameters[26].enum[2]": "garageSpaces",
	"paths./properties.get.parameters[26].enum[3]": "maintenanceExpense",
	"paths./properties.get.parameters[26].enum[4]": "parking",
	"paths./properties.get.parameters[26].enum[5]": "pool",
	"paths./properties.get.parameters[26].enum[6]": "rooms",
	"paths./properties.get.parameters[26].enum[7]": "taxYear",
	"paths./properties.get.parameters[26].enum[8]": "taxAnnualAmount",
	"paths./properties.get.parameters[26].in": "query",
	"paths./properties.get.parameters[26].items.type": "string",
	"paths./properties.get.parameters[26].name": "include",
	"paths./properties.get.parameters[26].required": false,
	"paths./properties.get.parameters[26].type": "array",
	"paths./properties.get.parameters[27].description": "Sort the response by a specific field. Values starting\nwith a minus (-) denote descending order, while the others\nare ascending.\n",
	"paths./properties.get.parameters[27].enum.length": 8,
	"paths./properties.get.parameters[27].enum[0]": "listprice",
	"paths./properties.get.parameters[27].enum[1]": "-listprice",
	"paths./properties.get.parameters[27].enum[2]": "listdate",
	"paths./properties.get.parameters[27].enum[3]": "-listdate",
	"paths./properties.get.parameters[27].enum[4]": "beds",
	"paths./properties.get.parameters[27].enum[5]": "-beds",
	"paths./properties.get.parameters[27].enum[6]": "baths",
	"paths./properties.get.parameters[27].enum[7]": "-baths",
	"paths./properties.get.parameters[27].in": "query",
	"paths./properties.get.parameters[27].name": "sort",
	"paths./properties.get.parameters[27].required": false,
	"paths./properties.get.parameters[27].type": "string",
	"paths./properties.get.parameters[28].description": "When set to `false`, The `X-Total-Count` header will not\nbe returned\n\nCounting the listings can contribute to slower API calls\ndue to the extra queries that need to be run to get an\nexact count.\n\nDisabling count can increase query speeds.\n",
	"paths./properties.get.parameters[28].in": "query",
	"paths./properties.get.parameters[28].name": "count",
	"paths./properties.get.parameters[28].required": false,
	"paths./properties.get.parameters[28].type": "integer",
	"paths./properties.get.parameters[2].collectionFormat": "multi",
	"paths./properties.get.parameters[2].description": "Request listings by a specific property type. This\ndefaults to Residential and Rental. You can specify\nmultiple property types in a single query.\n",
	"paths./properties.get.parameters[2].enum.length": 7,
	"paths./properties.get.parameters[2].enum[0]": "residential",
	"paths./properties.get.parameters[2].enum[1]": "rental",
	"paths./properties.get.parameters[2].enum[2]": "multifamily",
	"paths./properties.get.parameters[2].enum[3]": "condominium",
	"paths./properties.get.parameters[2].enum[4]": "commercial",
	"paths./properties.get.parameters[2].enum[5]": "land",
	"paths./properties.get.parameters[2].enum[6]": "farm",
	"paths./properties.get.parameters[2].in": "query",
	"paths./properties.get.parameters[2].items.type": "string",
	"paths./properties.get.parameters[2].name": "type",
	"paths./properties.get.parameters[2].required": false,
	"paths./properties.get.parameters[2].type": "array",
	"paths./properties.get.parameters[3].description": "Filter the listings returned by an agent ID.  Note, the\nAgent ID is provided by your MLS.\n\nThe co-listing agent is not included in this query parameter.\n",
	"paths./properties.get.parameters[3].in": "query",
	"paths./properties.get.parameters[3].name": "agent",
	"paths./properties.get.parameters[3].required": false,
	"paths./properties.get.parameters[3].type": "string",
	"paths./properties.get.parameters[4].collectionFormat": "multi",
	"paths./properties.get.parameters[4].description": "Filter the listings returned by brokerage with a Broker\nID. For some MLS areas, this is the ListOfficeId (Listing\nOffice ID).  You can specific multiple broker\nparameters. Note, this query parameter is only available\nif a Broker ID is provided by your MLS.\n",
	"paths./properties.get.parameters[4].in": "query",
	"paths./properties.get.parameters[4].items.type": "string",
	"paths./properties.get.parameters[4].name": "brokers",
	"paths./properties.get.parameters[4].required": false,
	"paths./properties.get.parameters[4].type": "array",
	"paths./properties.get.parameters[5].description": "Filter listings by a minimum price.\n",
	"paths./properties.get.parameters[5].in": "query",
	"paths./properties.get.parameters[5].name": "minprice",
	"paths./properties.get.parameters[5].required": false,
	"paths./properties.get.parameters[5].type": "integer",
	"paths./properties.get.parameters[6].description": "Filter listings by a maximum price\n",
	"paths./properties.get.parameters[6].in": "query",
	"paths./properties.get.parameters[6].name": "maxprice",
	"paths./properties.get.parameters[6].required": false,
	"paths./properties.get.parameters[6].type": "integer",
	"paths./properties.get.parameters[7].description": "Filter listings by a minimum area size in Sq Ft.\n",
	"paths./properties.get.parameters[7].in": "query",
	"paths./properties.get.parameters[7].name": "minarea",
	"paths./properties.get.parameters[7].required": false,
	"paths./properties.get.parameters[7].type": "integer",
	"paths./properties.get.parameters[8].description": "Filter listings by a maximum area size in Sq Ft.\n",
	"paths./properties.get.parameters[8].in": "query",
	"paths./properties.get.parameters[8].name": "maxarea",
	"paths./properties.get.parameters[8].required": false,
	"paths./properties.get.parameters[8].type": "integer",
	"paths./properties.get.parameters[9].description": "Filter listings by a minimum number of bathrooms.\n",
	"paths./properties.get.parameters[9].in": "query",
	"paths./properties.get.parameters[9].name": "minbaths",
	"paths./properties.get.parameters[9].required": false,
	"paths./properties.get.parameters[9].type": "integer",
	"paths./properties.get.responses.200.description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`.\n",
	"paths./properties.get.responses.200.schema.items.$ref": "#/definitions/Listing",
	"paths./properties.get.responses.200.schema.type": "array",
	"paths./properties.get.responses.400.description": "Will send `Bad Request`.",
	"paths./properties.get.responses.400.schema.$ref": "#/definitions/Error",
	"paths./properties.get.responses.401.description": "Will send `Authentication Required`.",
	"paths./properties.get.responses.401.schema.$ref": "#/definitions/Error",
	"paths./properties.get.responses.403.description": "Will send `Authorization Required`.",
	"paths./properties.get.responses.403.schema.$ref": "#/definitions/Error",
	"paths./properties.get.responses.429.description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n",
	"paths./properties.get.responses.429.schema.$ref": "#/definitions/Error",
	"paths./properties.get.responses.500.description": "Will send `Internal Server Error`.",
	"paths./properties.get.responses.500.schema.$ref": "#/definitions/Error",
	"paths./properties.get.security.length": 1,
	"paths./properties.get.security[0].basicAuth.length": 0,
	"paths./properties.get.summary": "The SimplyRETS Listings API",
	"paths./properties/{mlsId}.get.description": "Use this endpoint for accessing a single listing. When you\nmake a search to the `/properties` endpoint, each listing in\nthe response will contain a unique `mlsId` field which should\nbe used to request that listing on this route.\n\nThe `mlsId` field is a unique identifier for a listing which\nis specific to the SimplyRETS API only.  It is different from\nthe `listingId` field is the public number given to a listing\nby the MLS and is not used here.\n",
	"paths./properties/{mlsId}.get.parameters.length": 2,
	"paths./properties/{mlsId}.get.parameters[0].default": 1005252,
	"paths./properties/{mlsId}.get.parameters[0].description": "The `mlsId` field is a unique identifier which is specific\nto the SimplyRETS API only.  This field is different from\nthe `listingId` field (which is the public number given to\na listing by the MLS and is not used here).\n",
	"paths./properties/{mlsId}.get.parameters[0].format": "int64",
	"paths./properties/{mlsId}.get.parameters[0].in": "path",
	"paths./properties/{mlsId}.get.parameters[0].name": "mlsId",
	"paths./properties/{mlsId}.get.parameters[0].required": true,
	"paths./properties/{mlsId}.get.parameters[0].type": "integer",
	"paths./properties/{mlsId}.get.parameters[1].collectionFormat": "multi",
	"paths./properties/{mlsId}.get.parameters[1].description": "Include a extra fields which are not in the default\nresponse body\n- 'association' includes additional HOA data\n- 'agreement' information on the listing agreement\n- 'garageSpaces' additional garage data\n- 'maintenanceExpense' data on maintenance expenses\n- 'parking' additional parking data\n- 'pool' includes an additional pool description\n- 'rooms' include parameter will include\n   any additional rooms as a list.\n\nNote that your MLS must provide these fields in their RETS\ndata for them to be available with valid data in the API\nresponse. If your MLS does not offer these fields, they will\ncontain 'null'.\n\nIn the future, fields which require an 'include' may become available\nby default.\n",
	"paths./properties/{mlsId}.get.parameters[1].enum.length": 7,
	"paths./properties/{mlsId}.get.parameters[1].enum[0]": "association",
	"paths./properties/{mlsId}.get.parameters[1].enum[1]": "agreement",
	"paths./properties/{mlsId}.get.parameters[1].enum[2]": "garageSpaces",
	"paths./properties/{mlsId}.get.parameters[1].enum[3]": "maintenanceExpense",
	"paths./properties/{mlsId}.get.parameters[1].enum[4]": "parking",
	"paths./properties/{mlsId}.get.parameters[1].enum[5]": "pool",
	"paths./properties/{mlsId}.get.parameters[1].enum[6]": "rooms",
	"paths./properties/{mlsId}.get.parameters[1].in": "query",
	"paths./properties/{mlsId}.get.parameters[1].items.type": "string",
	"paths./properties/{mlsId}.get.parameters[1].name": "include",
	"paths./properties/{mlsId}.get.parameters[1].required": false,
	"paths./properties/{mlsId}.get.parameters[1].type": "array",
	"paths./properties/{mlsId}.get.responses.200.description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`\n",
	"paths./properties/{mlsId}.get.responses.200.schema.$ref": "#/definitions/Listing",
	"paths./properties/{mlsId}.get.responses.400.description": "Will send `Bad Request`.",
	"paths./properties/{mlsId}.get.responses.400.schema.$ref": "#/definitions/Error",
	"paths./properties/{mlsId}.get.responses.401.description": "Will send `Authentication Required`.",
	"paths./properties/{mlsId}.get.responses.401.schema.$ref": "#/definitions/Error",
	"paths./properties/{mlsId}.get.responses.403.description": "Will send `Authorization Required`.",
	"paths./properties/{mlsId}.get.responses.403.schema.$ref": "#/definitions/Error",
	"paths./properties/{mlsId}.get.responses.429.description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n",
	"paths./properties/{mlsId}.get.responses.429.schema.$ref": "#/definitions/Error",
	"paths./properties/{mlsId}.get.responses.500.description": "Will send `Internal Server Error`.",
	"paths./properties/{mlsId}.get.responses.500.schema.$ref": "#/definitions/Error",
	"paths./properties/{mlsId}.get.security.length": 1,
	"paths./properties/{mlsId}.get.security[0].basicAuth.length": 0,
	"paths./properties/{mlsId}.get.summary": "Single Listing Endpoint",
	"produces.length": 2,
	"produces[0]": "application/json",
	"produces[1]": "application/vnd.simplyrets-v0.1+json",
	"schemes.length": 1,
	"schemes[0]": "https",
	"securityDefinitions.basicAuth.description": "HTTP Basic Authentication. Works over `HTTPS` only",
	"securityDefinitions.basicAuth.type": "basic",
	"swagger": "2.0"
}
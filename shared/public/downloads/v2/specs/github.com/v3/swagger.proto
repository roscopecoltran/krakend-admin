syntax = "proto3";

import "google/protobuf/struct.proto";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package github;

message GetEmojisRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetEventsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetFeedsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetGistsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
    // Only gists updated at or after this time are returned.
    string since = 7;
}

message PostGistsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    postGist body = 7;
}

message GetGistsPublicRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
    // Only gists updated at or after this time are returned.
    string since = 7;
}

message GetGistsStarredRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
    // Only gists updated at or after this time are returned.
    string since = 7;
}

message GetGistsIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of gist.
    int32 id = 7;
}

message DeleteGistsIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of gist.
    int32 id = 7;
}

message GetGistsIdCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of gist.
    int32 id = 7;
}

message PostGistsIdCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    commentBody body = 7;
    // Id of gist.
    int32 id = 8;
}

message GetGistsIdCommentsCommentIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of comment.
    int32 commentId = 7;
    // Id of gist.
    int32 id = 8;
}

message DeleteGistsIdCommentsCommentIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of comment.
    int32 commentId = 7;
    // Id of gist.
    int32 id = 8;
}

message PostGistsIdForksRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of gist.
    int32 id = 7;
}

message GetGistsIdStarRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of gist.
    int32 id = 7;
}

message PutGistsIdStarRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of gist.
    int32 id = 7;
}

message DeleteGistsIdStarRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of gist.
    int32 id = 7;
}

message GetGitignoreTemplatesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetGitignoreTemplatesLanguageRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    string language = 7;
}

message GetIssuesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    enum GetIssuesRequest_Direction {
        GETISSUESREQUEST_DIRECTION_ASC = 0;
        GETISSUESREQUEST_DIRECTION_DESC = 1;
    }
    GetIssuesRequest_Direction direction = 7;
    // Issues assigned to you / created by you / mentioning you / you're
    // subscribed to updates for / All issues the authenticated user can see
    enum GetIssuesRequest_Filter {
        GETISSUESREQUEST_FILTER_ASSIGNED = 0;
        GETISSUESREQUEST_FILTER_CREATED = 1;
        GETISSUESREQUEST_FILTER_MENTIONED = 2;
        GETISSUESREQUEST_FILTER_SUBSCRIBED = 3;
        GETISSUESREQUEST_FILTER_ALL = 4;
    }
    GetIssuesRequest_Filter filter = 8;
    // String list of comma separated Label names. Example - bug,ui,@high.
    string labels = 9;
    // Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Only issues updated at or after this time are returned.
    string since = 10;
    enum GetIssuesRequest_Sort {
        GETISSUESREQUEST_SORT_CREATED = 0;
        GETISSUESREQUEST_SORT_UPDATED = 1;
        GETISSUESREQUEST_SORT_COMMENTS = 2;
    }
    GetIssuesRequest_Sort sort = 11;
    enum GetIssuesRequest_State {
        GETISSUESREQUEST_STATE_OPEN = 0;
        GETISSUESREQUEST_STATE_CLOSED = 1;
    }
    GetIssuesRequest_State state = 12;
}

message GetLegacyIssuesSearchOwnerRepositoryStateKeywordRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The search term.
    string keyword = 7;
    string owner = 8;
    string repository = 9;
    // Indicates the state of the issues to return. Can be either open or closed.
    enum GetLegacyIssuesSearchOwnerRepositoryStateKeywordRequest_State {
        GETLEGACYISSUESSEARCHOWNERREPOSITORYSTATEKEYWORDREQUEST_STATE_OPEN = 0;
        GETLEGACYISSUESSEARCHOWNERREPOSITORYSTATEKEYWORDREQUEST_STATE_CLOSED = 1;
    }
    GetLegacyIssuesSearchOwnerRepositoryStateKeywordRequest_State state = 10;
}

message GetLegacyReposSearchKeywordRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The search term
    string keyword = 7;
    // Filter results by language
    string language = 8;
    // The sort field. if sort param is provided. Can be either asc or desc.
    enum GetLegacyReposSearchKeywordRequest_Order {
        GETLEGACYREPOSSEARCHKEYWORDREQUEST_ORDER_DESC = 0;
        GETLEGACYREPOSSEARCHKEYWORDREQUEST_ORDER_ASC = 1;
    }
    GetLegacyReposSearchKeywordRequest_Order order = 9;
    // The sort field. One of stars, forks, or updated. Default: results are sorted by best match.
    enum GetLegacyReposSearchKeywordRequest_Sort {
        GETLEGACYREPOSSEARCHKEYWORDREQUEST_SORT_UPDATED = 0;
        GETLEGACYREPOSSEARCHKEYWORDREQUEST_SORT_STARS = 1;
        GETLEGACYREPOSSEARCHKEYWORDREQUEST_SORT_FORKS = 2;
    }
    GetLegacyReposSearchKeywordRequest_Sort sort = 10;
    // The page number to fetch
    string start_page = 11;
}

message GetLegacyUserEmailEmailRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The email address
    string email = 7;
}

message GetLegacyUserSearchKeywordRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The search term
    string keyword = 7;
    // The sort field. if sort param is provided. Can be either asc or desc.
    enum GetLegacyUserSearchKeywordRequest_Order {
        GETLEGACYUSERSEARCHKEYWORDREQUEST_ORDER_DESC = 0;
        GETLEGACYUSERSEARCHKEYWORDREQUEST_ORDER_ASC = 1;
    }
    GetLegacyUserSearchKeywordRequest_Order order = 8;
    // The sort field. One of stars, forks, or updated. Default: results are sorted by best match.
    enum GetLegacyUserSearchKeywordRequest_Sort {
        GETLEGACYUSERSEARCHKEYWORDREQUEST_SORT_UPDATED = 0;
        GETLEGACYUSERSEARCHKEYWORDREQUEST_SORT_STARS = 1;
        GETLEGACYUSERSEARCHKEYWORDREQUEST_SORT_FORKS = 2;
    }
    GetLegacyUserSearchKeywordRequest_Sort sort = 9;
    // The page number to fetch
    string start_page = 10;
}

message PostMarkdownRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    markdown body = 7;
}

message PostMarkdownRawRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetMetaRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetNetworksOwnerRepoEventsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of the owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetNotificationsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // True to show notifications marked as read.
    bool all = 7;
    // True to show only notifications in which the user is directly participating
    // or mentioned.
    bool participating = 8;
    // The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Example: "2012-10-09T23:39:01Z".
    string since = 9;
}

message PutNotificationsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    notificationMarkRead body = 7;
}

message GetNotificationsThreadsIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of thread.
    int32 id = 7;
}

message GetNotificationsThreadsIdSubscriptionRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of thread.
    int32 id = 7;
}

message PutNotificationsThreadsIdSubscriptionRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    putSubscription body = 7;
    // Id of thread.
    int32 id = 8;
}

message DeleteNotificationsThreadsIdSubscriptionRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of thread.
    int32 id = 7;
}

message GetOrgsOrgRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
}

message GetOrgsOrgEventsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
}

message GetOrgsOrgIssuesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    enum GetOrgsOrgIssuesRequest_Direction {
        GETORGSORGISSUESREQUEST_DIRECTION_ASC = 0;
        GETORGSORGISSUESREQUEST_DIRECTION_DESC = 1;
    }
    GetOrgsOrgIssuesRequest_Direction direction = 7;
    // Issues assigned to you / created by you / mentioning you / you're
    // subscribed to updates for / All issues the authenticated user can see
    enum GetOrgsOrgIssuesRequest_Filter {
        GETORGSORGISSUESREQUEST_FILTER_ASSIGNED = 0;
        GETORGSORGISSUESREQUEST_FILTER_CREATED = 1;
        GETORGSORGISSUESREQUEST_FILTER_MENTIONED = 2;
        GETORGSORGISSUESREQUEST_FILTER_SUBSCRIBED = 3;
        GETORGSORGISSUESREQUEST_FILTER_ALL = 4;
    }
    GetOrgsOrgIssuesRequest_Filter filter = 8;
    // String list of comma separated Label names. Example - bug,ui,@high.
    string labels = 9;
    // Name of organisation.
    string org = 10;
    // Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Only issues updated at or after this time are returned.
    string since = 11;
    enum GetOrgsOrgIssuesRequest_Sort {
        GETORGSORGISSUESREQUEST_SORT_CREATED = 0;
        GETORGSORGISSUESREQUEST_SORT_UPDATED = 1;
        GETORGSORGISSUESREQUEST_SORT_COMMENTS = 2;
    }
    GetOrgsOrgIssuesRequest_Sort sort = 12;
    enum GetOrgsOrgIssuesRequest_State {
        GETORGSORGISSUESREQUEST_STATE_OPEN = 0;
        GETORGSORGISSUESREQUEST_STATE_CLOSED = 1;
    }
    GetOrgsOrgIssuesRequest_State state = 13;
}

message GetOrgsOrgMembersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
}

message GetOrgsOrgMembersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
    // Name of the user.
    string username = 8;
}

message DeleteOrgsOrgMembersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
    // Name of the user.
    string username = 8;
}

message GetOrgsOrgPublic_membersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
}

message GetOrgsOrgPublic_membersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
    // Name of the user.
    string username = 8;
}

message PutOrgsOrgPublic_membersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
    // Name of the user.
    string username = 8;
}

message DeleteOrgsOrgPublic_membersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
    // Name of the user.
    string username = 8;
}

message GetOrgsOrgReposRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
    enum GetOrgsOrgReposRequest_Type {
        GETORGSORGREPOSREQUEST_TYPE_ALL = 0;
        GETORGSORGREPOSREQUEST_TYPE_PUBLIC = 1;
        GETORGSORGREPOSREQUEST_TYPE_PRIVATE = 2;
        GETORGSORGREPOSREQUEST_TYPE_FORKS = 3;
        GETORGSORGREPOSREQUEST_TYPE_SOURCES = 4;
        GETORGSORGREPOSREQUEST_TYPE_MEMBER = 5;
    }
    GetOrgsOrgReposRequest_Type type = 8;
}

message PostOrgsOrgReposRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    postRepo body = 7;
    // Name of organisation.
    string org = 8;
}

message GetOrgsOrgTeamsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of organisation.
    string org = 7;
}

message PostOrgsOrgTeamsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    orgTeamsPost body = 7;
    // Name of organisation.
    string org = 8;
}

message GetRate_limitRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetReposOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message DeleteReposOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoAssigneesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoAssigneesAssigneeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Login of the assignee.
    string assignee = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoBranchesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoBranchesBranchRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of the branch.
    string branch = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoCollaboratorsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoCollaboratorsUserRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    // Login of the user.
    string user = 9;
}

message PutReposOwnerRepoCollaboratorsUserRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    // Login of the user.
    string user = 9;
}

message DeleteReposOwnerRepoCollaboratorsUserRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    // Login of the user.
    string user = 9;
}

message GetReposOwnerRepoCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoCommentsCommentIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of comment.
    int32 commentId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoCommentsCommentIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of comment.
    int32 commentId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoCommitsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // GitHub login, name, or email by which to filter by commit author.
    string author = 7;
    // Name of repository owner.
    string owner = 8;
    // Only commits containing this file path will be returned.
    string path = 9;
    // Name of repository.
    string repo = 10;
    // Sha or branch to start listing commits from.
    string sha = 11;
    // The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Example: "2012-10-09T23:39:01Z".
    string since = 12;
    // ISO 8601 Date - Only commits before this date will be returned.
    string until = 13;
}

message GetReposOwnerRepoCommitsRefStatusRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    string ref = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoCommitsShaCodeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    // SHA-1 code of the commit.
    string shaCode = 9;
}

message GetReposOwnerRepoCommitsShaCodeCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    // SHA-1 code of the commit.
    string shaCode = 9;
}

message PostReposOwnerRepoCommitsShaCodeCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    commitBody body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
    // SHA-1 code of the commit.
    string shaCode = 10;
}

message GetReposOwnerRepoCompareBaseIdHeadIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    string baseId = 7;
    string headId = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
}

message GetReposOwnerRepoContentsPathRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // The content path.
    string path = 8;
    // The String name of the Commit/Branch/Tag. Defaults to 'master'.
    string ref = 9;
    // Name of repository.
    string repo = 10;
}

message PutReposOwnerRepoContentsPathRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    createFileBody body = 7;
    // Name of repository owner.
    string owner = 8;
    string path = 9;
    // Name of repository.
    string repo = 10;
}

message DeleteReposOwnerRepoContentsPathRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    deleteFileBody body = 7;
    // Name of repository owner.
    string owner = 8;
    string path = 9;
    // Name of repository.
    string repo = 10;
}

message GetReposOwnerRepoContributorsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Set to 1 or true to include anonymous contributors in results.
    string anon = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoDeploymentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PostReposOwnerRepoDeploymentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    deployment body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoDeploymentsIdStatusesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The Deployment ID to list the statuses from.
    int32 id = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message PostReposOwnerRepoDeploymentsIdStatusesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    deployment-statuses-create body = 7;
    // The Deployment ID to list the statuses from.
    int32 id = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
}

message GetReposOwnerRepoDownloadsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoDownloadsDownloadIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of download.
    int32 downloadId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoDownloadsDownloadIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of download.
    int32 downloadId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoEventsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoForksRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    enum GetReposOwnerRepoForksRequest_Sort {
        GETREPOSOWNERREPOFORKSREQUEST_SORT_NEWES = 0;
        GETREPOSOWNERREPOFORKSREQUEST_SORT_OLDES = 1;
        GETREPOSOWNERREPOFORKSREQUEST_SORT_WATCHERS = 2;
    }
    GetReposOwnerRepoForksRequest_Sort sort = 9;
}

message PostReposOwnerRepoForksRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    forkBody body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message PostReposOwnerRepoGitBlobsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    blob body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoGitBlobsShaCodeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    // SHA-1 code.
    string shaCode = 9;
}

message PostReposOwnerRepoGitCommitsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    repoCommitBody body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoGitCommitsShaCodeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    // SHA-1 code.
    string shaCode = 9;
}

message GetReposOwnerRepoGitRefsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PostReposOwnerRepoGitRefsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    refsBody body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoGitRefsRefRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    string ref = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoGitRefsRefRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    string ref = 8;
    // Name of repository.
    string repo = 9;
}

message PostReposOwnerRepoGitTagsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    tag body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoGitTagsShaCodeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
    string shaCode = 9;
}

message PostReposOwnerRepoGitTreesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    tree body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoGitTreesShaCodeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Get a Tree Recursively. (0 or 1)
    int32 recursive = 8;
    // Name of repository.
    string repo = 9;
    // Tree SHA.
    string shaCode = 10;
}

message GetReposOwnerRepoHooksRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PostReposOwnerRepoHooksRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    hookBody body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoHooksHookIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of hook.
    int32 hookId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoHooksHookIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of hook.
    int32 hookId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message PostReposOwnerRepoHooksHookIdTestsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of hook.
    int32 hookId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoIssuesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    enum GetReposOwnerRepoIssuesRequest_Direction {
        GETREPOSOWNERREPOISSUESREQUEST_DIRECTION_ASC = 0;
        GETREPOSOWNERREPOISSUESREQUEST_DIRECTION_DESC = 1;
    }
    GetReposOwnerRepoIssuesRequest_Direction direction = 7;
    // Issues assigned to you / created by you / mentioning you / you're
    // subscribed to updates for / All issues the authenticated user can see
    enum GetReposOwnerRepoIssuesRequest_Filter {
        GETREPOSOWNERREPOISSUESREQUEST_FILTER_ASSIGNED = 0;
        GETREPOSOWNERREPOISSUESREQUEST_FILTER_CREATED = 1;
        GETREPOSOWNERREPOISSUESREQUEST_FILTER_MENTIONED = 2;
        GETREPOSOWNERREPOISSUESREQUEST_FILTER_SUBSCRIBED = 3;
        GETREPOSOWNERREPOISSUESREQUEST_FILTER_ALL = 4;
    }
    GetReposOwnerRepoIssuesRequest_Filter filter = 8;
    // String list of comma separated Label names. Example - bug,ui,@high.
    string labels = 9;
    // Name of repository owner.
    string owner = 10;
    // Name of repository.
    string repo = 11;
    // Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Only issues updated at or after this time are returned.
    string since = 12;
    enum GetReposOwnerRepoIssuesRequest_Sort {
        GETREPOSOWNERREPOISSUESREQUEST_SORT_CREATED = 0;
        GETREPOSOWNERREPOISSUESREQUEST_SORT_UPDATED = 1;
        GETREPOSOWNERREPOISSUESREQUEST_SORT_COMMENTS = 2;
    }
    GetReposOwnerRepoIssuesRequest_Sort sort = 13;
    enum GetReposOwnerRepoIssuesRequest_State {
        GETREPOSOWNERREPOISSUESREQUEST_STATE_OPEN = 0;
        GETREPOSOWNERREPOISSUESREQUEST_STATE_CLOSED = 1;
    }
    GetReposOwnerRepoIssuesRequest_State state = 14;
}

message PostReposOwnerRepoIssuesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    issue body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoIssuesCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Ignored without 'sort' parameter.
    string direction = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
    // The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Example: "2012-10-09T23:39:01Z".
    string since = 10;
    enum GetReposOwnerRepoIssuesCommentsRequest_Sort {
        GETREPOSOWNERREPOISSUESCOMMENTSREQUEST_SORT_CREATED = 0;
        GETREPOSOWNERREPOISSUESCOMMENTSREQUEST_SORT_UPDATED = 1;
    }
    GetReposOwnerRepoIssuesCommentsRequest_Sort sort = 11;
}

message GetReposOwnerRepoIssuesCommentsCommentIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // ID of comment.
    int32 commentId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoIssuesCommentsCommentIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // ID of comment.
    int32 commentId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoIssuesEventsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoIssuesEventsEventIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of the event.
    int32 eventId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoIssuesNumberRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Number of issue.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoIssuesNumberCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Number of issue.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message PostReposOwnerRepoIssuesNumberCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    commentBody body = 7;
    // Number of issue.
    int32 number = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
}

message GetReposOwnerRepoIssuesNumberEventsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Number of issue.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoIssuesNumberLabelsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Number of issue.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message PutReposOwnerRepoIssuesNumberLabelsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    array body = 7;
    // Number of issue.
    int32 number = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
}

message PostReposOwnerRepoIssuesNumberLabelsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    array body = 7;
    // Number of issue.
    int32 number = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
}

message DeleteReposOwnerRepoIssuesNumberLabelsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Number of issue.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoIssuesNumberLabelsNameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of the label.
    string name = 7;
    // Number of issue.
    int32 number = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
}

message GetReposOwnerRepoKeysRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PostReposOwnerRepoKeysRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    user-keys-post body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoKeysKeyIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of key.
    int32 keyId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoKeysKeyIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of key.
    int32 keyId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoLabelsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PostReposOwnerRepoLabelsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    array body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoLabelsNameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of the label.
    string name = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoLabelsNameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of the label.
    string name = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoLanguagesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PostReposOwnerRepoMergesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    mergesBody body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoMilestonesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Ignored without 'sort' parameter.
    string direction = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
    enum GetReposOwnerRepoMilestonesRequest_Sort {
        GETREPOSOWNERREPOMILESTONESREQUEST_SORT_DUE_DATE = 0;
        GETREPOSOWNERREPOMILESTONESREQUEST_SORT_COMPLETENESS = 1;
    }
    GetReposOwnerRepoMilestonesRequest_Sort sort = 10;
    // String to filter by state.
    enum GetReposOwnerRepoMilestonesRequest_State {
        GETREPOSOWNERREPOMILESTONESREQUEST_STATE_OPEN = 0;
        GETREPOSOWNERREPOMILESTONESREQUEST_STATE_CLOSED = 1;
    }
    GetReposOwnerRepoMilestonesRequest_State state = 11;
}

message PostReposOwnerRepoMilestonesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    milestoneUpdate body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoMilestonesNumberRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Number of milestone.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoMilestonesNumberRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Number of milestone.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoMilestonesNumberLabelsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Number of milestone.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoNotificationsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // True to show notifications marked as read.
    bool all = 7;
    // Name of repository owner.
    string owner = 8;
    // True to show only notifications in which the user is directly participating
    // or mentioned.
    bool participating = 9;
    // Name of repository.
    string repo = 10;
    // The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Example: "2012-10-09T23:39:01Z".
    string since = 11;
}

message PutReposOwnerRepoNotificationsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    notificationMarkRead body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoPullsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Filter pulls by base branch name. Example - gh-pages.
    string base = 7;
    // Filter pulls by head user and branch name in the format of 'user:ref-name'.
    // Example: github:new-script-format.
    string head = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
    // String to filter by state.
    enum GetReposOwnerRepoPullsRequest_State {
        GETREPOSOWNERREPOPULLSREQUEST_STATE_OPEN = 0;
        GETREPOSOWNERREPOPULLSREQUEST_STATE_CLOSED = 1;
    }
    GetReposOwnerRepoPullsRequest_State state = 11;
}

message PostReposOwnerRepoPullsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    pullsPost body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoPullsCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Ignored without 'sort' parameter.
    string direction = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
    // The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Example: "2012-10-09T23:39:01Z".
    string since = 10;
    enum GetReposOwnerRepoPullsCommentsRequest_Sort {
        GETREPOSOWNERREPOPULLSCOMMENTSREQUEST_SORT_CREATED = 0;
        GETREPOSOWNERREPOPULLSCOMMENTSREQUEST_SORT_UPDATED = 1;
    }
    GetReposOwnerRepoPullsCommentsRequest_Sort sort = 11;
}

message GetReposOwnerRepoPullsCommentsCommentIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of comment.
    int32 commentId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoPullsCommentsCommentIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of comment.
    int32 commentId = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoPullsNumberRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of pull.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoPullsNumberCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of pull.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message PostReposOwnerRepoPullsNumberCommentsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    pullsCommentPost body = 7;
    // Id of pull.
    int32 number = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
}

message GetReposOwnerRepoPullsNumberCommitsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of pull.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoPullsNumberFilesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of pull.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoPullsNumberMergeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of pull.
    int32 number = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message PutReposOwnerRepoPullsNumberMergeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    mergePullBody body = 7;
    // Id of pull.
    int32 number = 8;
    // Name of repository owner.
    string owner = 9;
    // Name of repository.
    string repo = 10;
}

message GetReposOwnerRepoReadmeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // The String name of the Commit/Branch/Tag. Defaults to master.
    string ref = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoReleasesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PostReposOwnerRepoReleasesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    release-create body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoReleasesAssetsIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    string id = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoReleasesAssetsIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    string id = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoReleasesIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    string id = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoReleasesIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    string id = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoReleasesIdAssetsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    string id = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message GetReposOwnerRepoStargazersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoStatsCode_frequencyRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoStatsCommit_activityRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoStatsContributorsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoStatsParticipationRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoStatsPunch_cardRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoStatusesRefRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.
    string ref = 8;
    // Name of repository.
    string repo = 9;
}

message PostReposOwnerRepoStatusesRefRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    headBranch body = 7;
    // Name of repository owner.
    string owner = 8;
    // Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.
    string ref = 9;
    // Name of repository.
    string repo = 10;
}

message GetReposOwnerRepoSubscribersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoSubscriptionRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PutReposOwnerRepoSubscriptionRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    subscribitionBody body = 7;
    // Name of repository owner.
    string owner = 8;
    // Name of repository.
    string repo = 9;
}

message DeleteReposOwnerRepoSubscriptionRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoTagsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoTeamsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoWatchersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of repository owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetReposOwnerRepoArchive_formatPathRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    enum GetReposOwnerRepoArchive_formatPathRequest_Archive_format {
        GETREPOSOWNERREPOARCHIVE_FORMATPATHREQUEST_ARCHIVE_FORMAT_TARBALL = 0;
        GETREPOSOWNERREPOARCHIVE_FORMATPATHREQUEST_ARCHIVE_FORMAT_ZIPBALL = 1;
    }
    GetReposOwnerRepoArchive_formatPathRequest_Archive_format archive_format = 7;
    // Name of repository owner.
    string owner = 8;
    // Valid Git reference, defaults to 'master'.
    string path = 9;
    // Name of repository.
    string repo = 10;
}

message GetRepositoriesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Example: "2012-10-09T23:39:01Z".
    string since = 7;
}

message GetSearchCodeRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The sort field. if sort param is provided. Can be either asc or desc.
    enum GetSearchCodeRequest_Order {
        GETSEARCHCODEREQUEST_ORDER_DESC = 0;
        GETSEARCHCODEREQUEST_ORDER_ASC = 1;
    }
    GetSearchCodeRequest_Order order = 7;
    // The search terms. This can be any combination of the supported code
    // search parameters:
    // 'Search In' Qualifies which fields are searched. With this qualifier
    // you can restrict the search to just the file contents, the file path,
    // or both.
    // 'Languages' Searches code based on the language it's written in.
    // 'Forks' Filters repositories based on the number of forks, and/or
    // whether code from forked repositories should be included in the results
    // at all.
    // 'Size' Finds files that match a certain size (in bytes).
    // 'Path' Specifies the path that the resulting file must be at.
    // 'Extension' Matches files with a certain extension.
    // 'Users' or 'Repositories' Limits searches to a specific user or repository.
    string q = 8;
    // Can only be 'indexed', which indicates how recently a file has been indexed
    // by the GitHub search infrastructure. If not provided, results are sorted
    // by best match.
    enum GetSearchCodeRequest_Sort {
        GETSEARCHCODEREQUEST_SORT_INDEXED = 0;
    }
    GetSearchCodeRequest_Sort sort = 9;
}

message GetSearchIssuesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The sort field. if sort param is provided. Can be either asc or desc.
    enum GetSearchIssuesRequest_Order {
        GETSEARCHISSUESREQUEST_ORDER_DESC = 0;
        GETSEARCHISSUESREQUEST_ORDER_ASC = 1;
    }
    GetSearchIssuesRequest_Order order = 7;
    // The q search term can also contain any combination of the supported issue search qualifiers:
    string q = 8;
    // The sort field. Can be comments, created, or updated. Default: results are sorted by best match.
    enum GetSearchIssuesRequest_Sort {
        GETSEARCHISSUESREQUEST_SORT_UPDATED = 0;
        GETSEARCHISSUESREQUEST_SORT_CREATED = 1;
        GETSEARCHISSUESREQUEST_SORT_COMMENTS = 2;
    }
    GetSearchIssuesRequest_Sort sort = 9;
}

message GetSearchRepositoriesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The sort field. if sort param is provided. Can be either asc or desc.
    enum GetSearchRepositoriesRequest_Order {
        GETSEARCHREPOSITORIESREQUEST_ORDER_DESC = 0;
        GETSEARCHREPOSITORIESREQUEST_ORDER_ASC = 1;
    }
    GetSearchRepositoriesRequest_Order order = 7;
    // The search terms. This can be any combination of the supported repository
    // search parameters:
    // 'Search In' Qualifies which fields are searched. With this qualifier you
    // can restrict the search to just the repository name, description, readme,
    // or any combination of these.
    // 'Size' Finds repositories that match a certain size (in kilobytes).
    // 'Forks' Filters repositories based on the number of forks, and/or whether
    // forked repositories should be included in the results at all.
    // 'Created' and 'Last Updated' Filters repositories based on times of
    // creation, or when they were last updated.
    // 'Users or Repositories' Limits searches to a specific user or repository.
    // 'Languages' Searches repositories based on the language they are written in.
    // 'Stars' Searches repositories based on the number of stars.
    string q = 8;
    // If not provided, results are sorted by best match.
    enum GetSearchRepositoriesRequest_Sort {
        GETSEARCHREPOSITORIESREQUEST_SORT_STARS = 0;
        GETSEARCHREPOSITORIESREQUEST_SORT_FORKS = 1;
        GETSEARCHREPOSITORIESREQUEST_SORT_UPDATED = 2;
    }
    GetSearchRepositoriesRequest_Sort sort = 9;
}

message GetSearchUsersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The sort field. if sort param is provided. Can be either asc or desc.
    enum GetSearchUsersRequest_Order {
        GETSEARCHUSERSREQUEST_ORDER_DESC = 0;
        GETSEARCHUSERSREQUEST_ORDER_ASC = 1;
    }
    GetSearchUsersRequest_Order order = 7;
    // The search terms. This can be any combination of the supported user
    // search parameters:
    // 'Search In' Qualifies which fields are searched. With this qualifier you
    // can restrict the search to just the username, public email, full name,
    // location, or any combination of these.
    // 'Repository count' Filters users based on the number of repositories they
    // have.
    // 'Location' Filter users by the location indicated in their profile.
    // 'Language' Search for users that have repositories that match a certain
    // language.
    // 'Created' Filter users based on when they joined.
    // 'Followers' Filter users based on the number of followers they have.
    string q = 8;
    // If not provided, results are sorted by best match.
    enum GetSearchUsersRequest_Sort {
        GETSEARCHUSERSREQUEST_SORT_FOLLOWERS = 0;
        GETSEARCHUSERSREQUEST_SORT_REPOSITORIES = 1;
        GETSEARCHUSERSREQUEST_SORT_JOINED = 2;
    }
    GetSearchUsersRequest_Sort sort = 9;
}

message GetTeamsTeamIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
}

message DeleteTeamsTeamIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
}

message GetTeamsTeamIdMembersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
}

message GetTeamsTeamIdMembersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
    // Name of a member.
    string username = 8;
}

message PutTeamsTeamIdMembersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
    // Name of a member.
    string username = 8;
}

message DeleteTeamsTeamIdMembersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
    // Name of a member.
    string username = 8;
}

message GetTeamsTeamIdMembershipsUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
    // Name of a member.
    string username = 8;
}

message PutTeamsTeamIdMembershipsUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
    // Name of a member.
    string username = 8;
}

message DeleteTeamsTeamIdMembershipsUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
    // Name of a member.
    string username = 8;
}

message GetTeamsTeamIdReposRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Id of team.
    int32 teamId = 7;
}

message PutTeamsTeamIdReposOrgRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of a organization.
    string org = 7;
    // Name of a repository.
    string repo = 8;
    // Id of team.
    int32 teamId = 9;
}

message GetTeamsTeamIdReposOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of a repository owner.
    string owner = 7;
    // Name of a repository.
    string repo = 8;
    // Id of team.
    int32 teamId = 9;
}

message DeleteTeamsTeamIdReposOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of a repository owner.
    string owner = 7;
    // Name of a repository.
    string repo = 8;
    // Id of team.
    int32 teamId = 9;
}

message GetUserRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetUserEmailsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message PostUserEmailsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    array body = 7;
}

message DeleteUserEmailsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    array body = 7;
}

message GetUserFollowersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetUserFollowingRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetUserFollowingUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message PutUserFollowingUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message DeleteUserFollowingUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUserIssuesRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    enum GetUserIssuesRequest_Direction {
        GETUSERISSUESREQUEST_DIRECTION_ASC = 0;
        GETUSERISSUESREQUEST_DIRECTION_DESC = 1;
    }
    GetUserIssuesRequest_Direction direction = 7;
    // Issues assigned to you / created by you / mentioning you / you're
    // subscribed to updates for / All issues the authenticated user can see
    enum GetUserIssuesRequest_Filter {
        GETUSERISSUESREQUEST_FILTER_ASSIGNED = 0;
        GETUSERISSUESREQUEST_FILTER_CREATED = 1;
        GETUSERISSUESREQUEST_FILTER_MENTIONED = 2;
        GETUSERISSUESREQUEST_FILTER_SUBSCRIBED = 3;
        GETUSERISSUESREQUEST_FILTER_ALL = 4;
    }
    GetUserIssuesRequest_Filter filter = 8;
    // String list of comma separated Label names. Example - bug,ui,@high.
    string labels = 9;
    // Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Only issues updated at or after this time are returned.
    string since = 10;
    enum GetUserIssuesRequest_Sort {
        GETUSERISSUESREQUEST_SORT_CREATED = 0;
        GETUSERISSUESREQUEST_SORT_UPDATED = 1;
        GETUSERISSUESREQUEST_SORT_COMMENTS = 2;
    }
    GetUserIssuesRequest_Sort sort = 11;
    enum GetUserIssuesRequest_State {
        GETUSERISSUESREQUEST_STATE_OPEN = 0;
        GETUSERISSUESREQUEST_STATE_CLOSED = 1;
    }
    GetUserIssuesRequest_State state = 12;
}

message GetUserKeysRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message PostUserKeysRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    user-keys-post body = 7;
}

message GetUserKeysKeyIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // ID of key.
    int32 keyId = 7;
}

message DeleteUserKeysKeyIdRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // ID of key.
    int32 keyId = 7;
}

message GetUserOrgsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetUserReposRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    enum GetUserReposRequest_Type {
        GETUSERREPOSREQUEST_TYPE_ALL = 0;
        GETUSERREPOSREQUEST_TYPE_PUBLIC = 1;
        GETUSERREPOSREQUEST_TYPE_PRIVATE = 2;
        GETUSERREPOSREQUEST_TYPE_FORKS = 3;
        GETUSERREPOSREQUEST_TYPE_SOURCES = 4;
        GETUSERREPOSREQUEST_TYPE_MEMBER = 5;
    }
    GetUserReposRequest_Type type = 7;
}

message PostUserReposRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    postRepo body = 7;
}

message GetUserStarredRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Ignored without 'sort' parameter.
    string direction = 7;
    enum GetUserStarredRequest_Sort {
        GETUSERSTARREDREQUEST_SORT_CREATED = 0;
        GETUSERSTARREDREQUEST_SORT_UPDATED = 1;
    }
    GetUserStarredRequest_Sort sort = 8;
}

message GetUserStarredOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of a repository owner.
    string owner = 7;
    // Name of a repository.
    string repo = 8;
}

message PutUserStarredOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of a repository owner.
    string owner = 7;
    // Name of a repository.
    string repo = 8;
}

message DeleteUserStarredOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of a repository owner.
    string owner = 7;
    // Name of a repository.
    string repo = 8;
}

message GetUserSubscriptionsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetUserSubscriptionsOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of the owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message PutUserSubscriptionsOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of the owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message DeleteUserSubscriptionsOwnerRepoRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of the owner.
    string owner = 7;
    // Name of repository.
    string repo = 8;
}

message GetUserTeamsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
}

message GetUsersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The integer ID of the last User that you've seen.
    int32 since = 7;
}

message GetUsersUsernameRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUsersUsernameEventsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUsersUsernameEventsOrgsOrgRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    string org = 7;
    // Name of user.
    string username = 8;
}

message GetUsersUsernameFollowersRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUsersUsernameFollowingTargetUserRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string targetUser = 7;
    // Name of user.
    string username = 8;
}

message GetUsersUsernameGistsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    // Example: "2012-10-09T23:39:01Z".
    string since = 7;
    // Name of user.
    string username = 8;
}

message GetUsersUsernameKeysRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUsersUsernameOrgsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUsersUsernameReceived_eventsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUsersUsernameReceived_eventsPublicRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUsersUsernameReposRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    enum GetUsersUsernameReposRequest_Type {
        GETUSERSUSERNAMEREPOSREQUEST_TYPE_ALL = 0;
        GETUSERSUSERNAMEREPOSREQUEST_TYPE_PUBLIC = 1;
        GETUSERSUSERNAMEREPOSREQUEST_TYPE_PRIVATE = 2;
        GETUSERSUSERNAMEREPOSREQUEST_TYPE_FORKS = 3;
        GETUSERSUSERNAMEREPOSREQUEST_TYPE_SOURCES = 4;
        GETUSERSUSERNAMEREPOSREQUEST_TYPE_MEMBER = 5;
    }
    GetUsersUsernameReposRequest_Type type = 7;
    // Name of user.
    string username = 8;
}

message GetUsersUsernameStarredRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message GetUsersUsernameSubscriptionsRequest {
    // Is used to set specified media type.
    string Accept = 1;
    // You can check the current version of media type in responses.
    string X_GitHub_Media_Type = 2;
    int32 X_GitHub_Request_Id = 3;
    int32 X_RateLimit_Limit = 4;
    int32 X_RateLimit_Remaining = 5;
    int32 X_RateLimit_Reset = 6;
    // Name of user.
    string username = 7;
}

message Asset {
    string content_type = 1;
    string created_at = 2;
    int32 download_count = 3;
    int32 id = 4;
    string label = 5;
    string name = 6;
    int32 size = 7;
    string state = 8;
    string updated_at = 9;
    message Uploader {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        bool site_admin = 13;
        string starred_url = 14;
        string subscriptions_url = 15;
        string type = 16;
        string url = 17;
    }
    Uploader uploader = 10;
    string url = 11;
}

message AssetPatch {
    string label = 1;
    string name = 2;
}

message Asset {
    string content_type = 1;
    string created_at = 2;
    int32 download_count = 3;
    int32 id = 4;
    string label = 5;
    string name = 6;
    int32 size = 7;
    string state = 8;
    string updated_at = 9;
    message Uploader {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        bool site_admin = 13;
        string starred_url = 14;
        string subscriptions_url = 15;
        string type = 16;
        string url = 17;
    }
    Uploader uploader = 10;
    string url = 11;
}
repeated Asset assets = 1

message Assignee {
    int32 avatar_url = 1;
    string gravatar_id = 2;
    int32 id = 3;
    string login = 4;
    string url = 5;
}
repeated Assignee assignees = 1

message Blob {
    string content = 1;
    ;
    string sha = 3;
    int32 size = 4;
}

message Blobs {
    string sha = 1;
}

message Branch {
    message _links {
        string html = 1;
        string self = 2;
    }
    _links _links = 1;
    message Commit {
        message Author {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        Author author = 1;
        message Commit {
            ;
            message Committer {
                            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string date = 1;
                string email = 2;
                string name = 3;
            }
            Committer committer = 2;
            string message = 3;
            message Tree {
                string sha = 1;
                string url = 2;
            }
            Tree tree = 4;
            string url = 5;
        }
        Commit commit = 2;
        message Committer {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        Committer committer = 3;
        message Parent {
            string sha = 1;
            string url = 2;
        }
        repeated Parent parents = 4;
        string sha = 5;
        string url = 6;
    }
    Commit commit = 2;
    string name = 3;
}

message Branche {
    message Commit {
        string sha = 1;
        string url = 2;
    }
    Commit commit = 1;
    string name = 2;
}
repeated Branche branches = 1

repeated int32 codeFrequencyStats = 1

message Collaborator {
    string avatar_url = 1;
    string gravatar_id = 2;
    int32 id = 3;
    string login = 4;
    string url = 5;
}
repeated Collaborator collaborators = 1

message Comment {
    string body = 1;
}

message CommentBody {
    string body = 1;
}

message Comment {
    string body = 1;
    // ISO 8601.
    string created_at = 2;
    int32 id = 3;
    string url = 4;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 5;
}
repeated Comment comments = 1

message Commit {
    message Author {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Author author = 1;
    message Commit {
        message Author {
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string date = 1;
            string email = 2;
            string name = 3;
        }
        Author author = 1;
        message Committer {
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string date = 1;
            string email = 2;
            string name = 3;
        }
        Committer committer = 2;
        string message = 3;
        message Tree {
            string sha = 1;
            string url = 2;
        }
        Tree tree = 4;
        string url = 5;
    }
    Commit commit = 2;
    message Committer {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Committer committer = 3;
    message File {
        int32 additions = 1;
        string blob_url = 2;
        int32 changes = 3;
        int32 deletions = 4;
        string filename = 5;
        string patch = 6;
        string raw_url = 7;
        string status = 8;
    }
    repeated File files = 4;
    message Parent {
        string sha = 1;
        string url = 2;
    }
    repeated Parent parents = 5;
    string sha = 6;
    message Stats {
        int32 additions = 1;
        int32 deletions = 2;
        int32 total = 3;
    }
    Stats stats = 7;
    string url = 8;
}

message CommitActivityStat {
    repeated int32 days = 1;
    int32 total = 2;
    int32 week = 3;
}
repeated CommitActivityStat commitActivityStats = 1

message CommitBody {
    string body = 1;
    // Deprecated - Use position parameter instead.
    string line = 2;
    // Line number in the file to comment on. Defaults to null.
    string number = 3;
    // Relative path of the file to comment on.
    string path = 4;
    // Line index in the diff to comment on.
    int32 position = 5;
    // SHA of the commit to comment on.
    string sha = 6;
}

message CommitComments {
    string body = 1;
    string commit_id = 2;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 3;
    string html_url = 4;
    int32 id = 5;
    int32 line = 6;
    string path = 7;
    int32 position = 8;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 9;
    string url = 10;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 11;
}

message Commit {
    message Author {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Author author = 1;
    message Commit {
        message Author {
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string date = 1;
            string email = 2;
            string name = 3;
        }
        Author author = 1;
        message Committer {
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string date = 1;
            string email = 2;
            string name = 3;
        }
        Committer committer = 2;
        string message = 3;
        message Tree {
            string sha = 1;
            string url = 2;
        }
        Tree tree = 4;
        string url = 5;
    }
    Commit commit = 2;
    message Committer {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Committer committer = 3;
    message Parent {
        string sha = 1;
        string url = 2;
    }
    repeated Parent parents = 4;
    string sha = 5;
    string url = 6;
}
repeated Commit commits = 1

message Compare_commits {
    int32 ahead_by = 1;
    message Base_commit {
        message Author {
            string avatar_url = 1;
            string events_url = 2;
            string followers_url = 3;
            string following_url = 4;
            string gists_url = 5;
            string gravatar_id = 6;
            string html_url = 7;
            int32 id = 8;
            string login = 9;
            string organizations_url = 10;
            string received_events_url = 11;
            string repos_url = 12;
            bool site_admin = 13;
            string starred_url = 14;
            string subscriptions_url = 15;
            string type = 16;
            string url = 17;
        }
        Author author = 1;
        message Commit {
            message Author {
                string date = 1;
                string email = 2;
                string name = 3;
            }
            Author author = 1;
            message Committer {
                string date = 1;
                string email = 2;
                string name = 3;
            }
            Committer committer = 2;
            string message = 3;
            message Tree {
                string sha = 1;
                string url = 2;
            }
            Tree tree = 4;
            string url = 5;
        }
        Commit commit = 2;
        message Committer {
            string avatar_url = 1;
            string events_url = 2;
            string followers_url = 3;
            string following_url = 4;
            string gists_url = 5;
            string gravatar_id = 6;
            string html_url = 7;
            int32 id = 8;
            string login = 9;
            string organizations_url = 10;
            string received_events_url = 11;
            string repos_url = 12;
            bool site_admin = 13;
            string starred_url = 14;
            string subscriptions_url = 15;
            string type = 16;
            string url = 17;
        }
        Committer committer = 3;
        message Parent {
            string sha = 1;
            string url = 2;
        }
        repeated Parent parents = 4;
        string sha = 5;
        string url = 6;
    }
    Base_commit base_commit = 2;
    int32 behind_by = 3;
    message Commit {
        message Author {
            string avatar_url = 1;
            string events_url = 2;
            string followers_url = 3;
            string following_url = 4;
            string gists_url = 5;
            string gravatar_id = 6;
            string html_url = 7;
            int32 id = 8;
            string login = 9;
            string organizations_url = 10;
            string received_events_url = 11;
            string repos_url = 12;
            bool site_admin = 13;
            string starred_url = 14;
            string subscriptions_url = 15;
            string type = 16;
            string url = 17;
        }
        Author author = 1;
        message Commit {
            message Author {
                string date = 1;
                string email = 2;
                string name = 3;
            }
            Author author = 1;
            message Committer {
                string date = 1;
                string email = 2;
                string name = 3;
            }
            Committer committer = 2;
            string message = 3;
            message Tree {
                string sha = 1;
                string url = 2;
            }
            Tree tree = 4;
            string url = 5;
        }
        Commit commit = 2;
        message Committer {
            string avatar_url = 1;
            string events_url = 2;
            string followers_url = 3;
            string following_url = 4;
            string gists_url = 5;
            string gravatar_id = 6;
            string html_url = 7;
            int32 id = 8;
            string login = 9;
            string organizations_url = 10;
            string received_events_url = 11;
            string repos_url = 12;
            bool site_admin = 13;
            string starred_url = 14;
            string subscriptions_url = 15;
            string type = 16;
            string url = 17;
        }
        Committer committer = 3;
        message Parent {
            string sha = 1;
            string url = 2;
        }
        repeated Parent parents = 4;
        string sha = 5;
        string url = 6;
    }
    repeated Commit commits = 4;
    string diff_url = 5;
    message File {
        int32 additions = 1;
        string blob_url = 2;
        int32 changes = 3;
        string contents_url = 4;
        int32 deletions = 5;
        string filename = 6;
        string patch = 7;
        string raw_url = 8;
        string sha = 9;
        string status = 10;
    }
    repeated File files = 6;
    string html_url = 7;
    string patch_url = 8;
    string permalink_url = 9;
    string status = 10;
    int32 total_commits = 11;
    string url = 12;
}

message Contents_path {
    message _links {
        string git = 1;
        string html = 2;
        string self = 3;
    }
    _links _links = 1;
    string content = 2;
    string encoding = 3;
    string git_url = 4;
    string html_url = 5;
    string name = 6;
    string path = 7;
    string sha = 8;
    int32 size = 9;
    string type = 10;
    string url = 11;
}

message Contributor {
    string avatar_url = 1;
    int32 contributions = 2;
    string gravatar_id = 3;
    int32 id = 4;
    string login = 5;
    string url = 6;
}
repeated Contributor contributors = 1

message ContributorsStat {
    message Author {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Author author = 1;
    // The Total number of commits authored by the contributor.
    int32 total = 2;
    message Week {
            // Number of additions.
    int32 a = 1;
            // Number of commits.
    int32 c = 2;
            // Number of deletions.
    int32 d = 3;
            // Start of the week.
    string w = 4;
    }
    repeated Week weeks = 3;
}
repeated ContributorsStat contributorsStats = 1

message CreateDownload {
    string accesskeyid = 1;
    string acl = 2;
    string bucket = 3;
    string content_type = 4;
    string description = 5;
    int32 download_count = 6;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string expirationdate = 7;
    string html_url = 8;
    int32 id = 9;
    string mime_type = 10;
    string name = 11;
    string path = 12;
    string policy = 13;
    string prefix = 14;
    bool redirect = 15;
    string s3_url = 16;
    string signature = 17;
    int32 size = 18;
    string url = 19;
}

message CreateFile {
    message Commit {
        message Author {
            string date = 1;
            string email = 2;
            string name = 3;
        }
        Author author = 1;
        message Committer {
            string date = 1;
            string email = 2;
            string name = 3;
        }
        Committer committer = 2;
        string html_url = 3;
        string message = 4;
        message Parent {
            string html_url = 1;
            string sha = 2;
            string url = 3;
        }
        repeated Parent parents = 5;
        string sha = 6;
        message Tree {
            string sha = 1;
            string url = 2;
        }
        Tree tree = 7;
        string url = 8;
    }
    Commit commit = 1;
    message Content {
        message _links {
            string git = 1;
            string html = 2;
            string self = 3;
        }
        _links _links = 1;
        string git_url = 2;
        string html_url = 3;
        string name = 4;
        string path = 5;
        string sha = 6;
        int32 size = 7;
        string type = 8;
        string url = 9;
    }
    Content content = 2;
}

message CreateFileBody {
    message Committer {
        string email = 1;
        string name = 2;
    }
    Committer committer = 1;
    string content = 2;
    string message = 3;
}

message DeleteFile {
    message Commit {
        message Author {
            string date = 1;
            string email = 2;
            string name = 3;
        }
        Author author = 1;
        ;
        string html_url = 3;
        string message = 4;
        message Parents {
            string html_url = 1;
            string sha = 2;
            string url = 3;
        }
        Parents parents = 5;
        string sha = 6;
        message Tree {
            string sha = 1;
            string url = 2;
        }
        Tree tree = 7;
        string url = 8;
    }
    Commit commit = 1;
    string content = 2;
}

message DeleteFileBody {
    message Committer {
        string email = 1;
        string name = 2;
    }
    Committer committer = 1;
    string message = 2;
    string sha = 3;
}

message Deployment {
    string description = 1;
    message Payload {
        string deploy_user = 1;
        string environment = 2;
        int32 room_id = 3;
    }
    Payload payload = 2;
    string ref = 3;
}

message Deployment_resp {
    string created_at = 1;
    message Creator {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        bool site_admin = 13;
        string starred_url = 14;
        string subscriptions_url = 15;
        string type = 16;
        string url = 17;
    }
    Creator creator = 2;
    string description = 3;
    int32 id = 4;
    string payload = 5;
    string sha = 6;
    string statuses_url = 7;
    string updated_at = 8;
    string url = 9;
}

message Deployment_statuse {
    string created_at = 1;
    message Creator {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        bool site_admin = 13;
        string starred_url = 14;
        string subscriptions_url = 15;
        string type = 16;
        string url = 17;
    }
    Creator creator = 2;
    string description = 3;
    int32 id = 4;
    string payload = 5;
    string state = 6;
    string target_url = 7;
    string updated_at = 8;
    string url = 9;
}
repeated Deployment_statuse deployment_statuses = 1

message Deployment_statuses_create {
    string description = 1;
    string state = 2;
    string target_url = 3;
}

message DownloadBody {
    string content_type = 1;
    string description = 2;
    string name = 3;
    // Size of file in bytes.
    int32 size = 4;
}

message Downloads {
    string content_type = 1;
    string description = 2;
    int32 download_count = 3;
    string html_url = 4;
    int32 id = 5;
    string name = 6;
    int32 size = 7;
    string url = 8;
}

message EditTeam {
    string name = 1;
    ;
}

repeated string emailsPost = 1

message Emojis {
    string +1 = 1;
    string _1 = 2;
    string 100 = 3;
    string 1234 = 4;
    string 8ball = 5;
    string a = 6;
    string ab = 7;
}

message Event {
    message Actor {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Actor actor = 1;
    string commit_id = 2;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 3;
    string event = 4;
    message Issue {
        ;
        string body = 2;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string closed_at = 3;
        int32 comments = 4;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 5;
        string html_url = 6;
        message Label {
            string color = 1;
            string name = 2;
            string url = 3;
        }
        repeated Label labels = 7;
        message Milestone {
            int32 closed_issues = 1;
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
            message Creator {
                string avatar_url = 1;
                string gravatar_id = 2;
                int32 id = 3;
                string login = 4;
                string url = 5;
            }
            Creator creator = 3;
            string description = 4;
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string due_on = 5;
            int32 number = 6;
            int32 open_issues = 7;
            ;
            string title = 9;
            string url = 10;
        }
        Milestone milestone = 8;
        int32 number = 9;
        message Pull_request {
            string diff_url = 1;
            string html_url = 2;
            string patch_url = 3;
        }
        Pull_request pull_request = 10;
        ;
        string title = 12;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 13;
        string url = 14;
        message User {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        User user = 15;
    }
    Issue issue = 5;
    string url = 6;
}

message Events {
    message Actor {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Actor actor = 1;
    message Created_at {
    }
    Created_at created_at = 2;
    int32 id = 3;
    message Org {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Org org = 4;
    message Payload {
    }
    Payload payload = 5;
    bool public = 6;
    message Repo {
        int32 id = 1;
        string name = 2;
        string url = 3;
    }
    Repo repo = 7;
    string type = 8;
}

message Feeds {
    ;
    string current_user_actor_url = 2;
    string current_user_organization_url = 3;
    string current_user_public = 4;
    string current_user_url = 5;
    string timeline_url = 6;
    string user_url = 7;
}

message Fork {
    string clone_url = 1;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
    string description = 3;
    bool fork = 4;
    int32 forks = 5;
    int32 forks_count = 6;
    string full_name = 7;
    string git_url = 8;
    string homepage = 9;
    string html_url = 10;
    int32 id = 11;
    string language = 12;
    string master_branch = 13;
    string mirror_url = 14;
    string name = 15;
    int32 open_issues = 16;
    int32 open_issues_count = 17;
    message Owner {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Owner owner = 18;
    bool private = 19;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 20;
    int32 size = 21;
    string ssh_url = 22;
    string svn_url = 23;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 24;
    string url = 25;
    int32 watchers = 26;
    int32 watchers_count = 27;
}

message ForkBody {
    string organization = 1;
}

message Fork {
    string clone_url = 1;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
    string description = 3;
    bool fork = 4;
    int32 forks = 5;
    int32 forks_count = 6;
    string full_name = 7;
    string git_url = 8;
    string homepage = 9;
    string html_url = 10;
    int32 id = 11;
    string language = 12;
    string master_branch = 13;
    string mirror_url = 14;
    string name = 15;
    int32 open_issues = 16;
    int32 open_issues_count = 17;
    message Owner {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Owner owner = 18;
    bool private = 19;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 20;
    int32 size = 21;
    string ssh_url = 22;
    string svn_url = 23;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 24;
    string url = 25;
    int32 watchers = 26;
    int32 watchers_count = 27;
}
repeated Fork forks = 1

message Gist {
    int32 comments = 1;
    string comments_url = 2;
    // Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    string created_at = 3;
    string description = 4;
    message Files {
        message Ring.Erl {
            string filename = 1;
            string raw_url = 2;
            int32 size = 3;
        }
        Ring.Erl ring.erl = 1;
    }
    Files files = 5;
    message Fork {
            // Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    string created_at = 1;
        string url = 2;
        message User {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        User user = 3;
    }
    repeated Fork forks = 6;
    string git_pull_url = 7;
    string git_push_url = 8;
    message History {
        message Change_status {
            int32 additions = 1;
            int32 deletions = 2;
            int32 total = 3;
        }
        Change_status change_status = 1;
            // Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
    string committed_at = 2;
        string url = 3;
        message User {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        User user = 4;
        string version = 5;
    }
    repeated History history = 9;
    string html_url = 10;
    string id = 11;
    bool public = 12;
    string url = 13;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 14;
}

message Gist {
    int32 comments = 1;
    string comments_url = 2;
    string created_at = 3;
    string description = 4;
    message Files {
        message Ring.Erl {
            string filename = 1;
            string raw_url = 2;
            int32 size = 3;
        }
        Ring.Erl ring.erl = 1;
    }
    Files files = 5;
    string git_pull_url = 6;
    string git_push_url = 7;
    string html_url = 8;
    string id = 9;
    bool public = 10;
    string url = 11;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 12;
}
repeated Gist gists = 1

message GitCommit {
    message Author {
        string date = 1;
        string email = 2;
        string name = 3;
    }
    Author author = 1;
    string message = 2;
    string parents = 3;
    string tree = 4;
}

message GitRefPatch {
    bool force = 1;
    string sha = 2;
}

message Gitignore {
}
repeated Gitignore gitignore = 1

message Gitignore_lang {
    string name = 1;
    string source = 2;
}

message HeadBranch {
    message Object {
        string sha = 1;
        string type = 2;
        string url = 3;
    }
    Object object = 1;
    string ref = 2;
    string url = 3;
}

message HeadBranchBody {
    // Boolean indicating whether to force the update or to make sure the update is a fast-forward update. The default is false, so leaving this out or setting it to false will make sure you’re not overwriting work.
    bool force = 1;
    // String of the SHA1 value to set this reference to.
    string sha = 2;
}

message Head {
    message Commit {
        string sha = 1;
        string url = 2;
    }
    Commit commit = 1;
    string name = 2;
    string tarball_url = 3;
    string zipball_url = 4;
}
repeated Head heads = 1

message Hook {
    bool active = 1;
    message Config {
        string content_type = 1;
        string url = 2;
    }
    Config config = 2;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 3;
    message Event {
    }
    repeated Event events = 4;
    int32 id = 5;
    string name = 6;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 7;
    string url = 8;
}
repeated Hook hook = 1

message HookBody {
    bool active = 1;
    repeated string add_events = 2;
}

message Issue {
    string assignee = 1;
    string body = 2;
    repeated string labels = 3;
    int32 milestone = 4;
    string title = 5;
}

message IssueBody {
    string assignee = 1;
    string body = 2;
    repeated string labels = 3;
    int32 milestone = 4;
    string title = 5;
}

message Issue {
    message Assignee {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Assignee assignee = 1;
    string body = 2;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string closed_at = 3;
    int32 comments = 4;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 5;
    string html_url = 6;
    message Label {
        string color = 1;
        string name = 2;
        string url = 3;
    }
    repeated Label labels = 7;
    message Milestone {
        int32 closed_issues = 1;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
        message Creator {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        Creator creator = 3;
        string description = 4;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string due_on = 5;
        int32 number = 6;
        int32 open_issues = 7;
        ;
        string title = 9;
        string url = 10;
    }
    Milestone milestone = 8;
    int32 number = 9;
    message Pull_request {
        string diff_url = 1;
        string html_url = 2;
        string patch_url = 3;
    }
    Pull_request pull_request = 10;
    ;
    string title = 12;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 13;
    string url = 14;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 15;
}
repeated Issue issues = 1

message IssuesComment {
    string body = 1;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
    string html_url = 3;
    int32 id = 4;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 5;
    string url = 6;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 7;
}

message IssuesComment {
    message _links {
        message Html {
            string href = 1;
        }
        Html html = 1;
        message Pull_request {
            string href = 1;
        }
        Pull_request pull_request = 2;
        message Self {
            string href = 1;
        }
        Self self = 3;
    }
    _links _links = 1;
    string body = 2;
    string commit_id = 3;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 4;
    int32 id = 5;
    string path = 6;
    int32 position = 7;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 8;
    string url = 9;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 10;
}
repeated IssuesComment issuesComments = 1

message Key {
    int32 id = 1;
    string key = 2;
    string title = 3;
    string url = 4;
}

message KeyBody {
    string key = 1;
    string title = 2;
}

message Key {
    int32 id = 1;
    string key = 2;
    string title = 3;
    string url = 4;
}
repeated Key keys = 1

message Label {
    string color = 1;
    string name = 2;
    string url = 3;
}

message Label {
    string color = 1;
    string name = 2;
    string url = 3;
}
repeated Label labels = 1

repeated string labelsBody = 1

map<string, integer> languages = 1

message Markdown {
    string context = 1;
    string mode = 2;
    string text = 3;
}

message Member {
    string avatar_url = 1;
    string gravatar_id = 2;
    int32 id = 3;
    string login = 4;
    string url = 5;
}
repeated Member members = 1

message Merge {
    bool merged = 1;
    string message = 2;
    string sha = 3;
}

message MergePullBody {
    string commit_message = 1;
}

message MergesBody {
    string base = 1;
    string commit_message = 2;
    string head = 3;
}

message MergesConflict {
    // Error message
    string message = 1;
}

message MergesSuccessful {
    message Author {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        string starred_url = 13;
        string subscriptions_url = 14;
        string type = 15;
        string url = 16;
    }
    Author author = 1;
    string comments_url = 2;
    message Commit {
        message Author {
            string date = 1;
            string email = 2;
            string name = 3;
        }
        Author author = 1;
        int32 comment_count = 2;
        message Committer {
            string date = 1;
            string email = 2;
            string name = 3;
        }
        Committer committer = 3;
        string message = 4;
        message Tree {
            string sha = 1;
            string url = 2;
        }
        Tree tree = 5;
        string url = 6;
    }
    Commit commit = 3;
    message Committer {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        string starred_url = 13;
        string subscriptions_url = 14;
        string type = 15;
        string url = 16;
    }
    Committer committer = 4;
    bool merged = 5;
    string message = 6;
    message Parent {
        string sha = 1;
        string url = 2;
    }
    repeated Parent parents = 7;
    string sha = 8;
    string url = 9;
}

message Meta {
    repeated string git = 1;
    repeated string hooks = 2;
}

message Milestone {
    int32 closed_issues = 1;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
    message Creator {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Creator creator = 3;
    string description = 4;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string due_on = 5;
    int32 number = 6;
    int32 open_issues = 7;
    ;
    string title = 9;
    string url = 10;
}

message MilestoneBody {
    string description = 1;
    string due_on = 2;
    string state = 3;
    string title = 4;
}

message MilestoneUpdate {
    string description = 1;
    string due_on = 2;
    string state = 3;
    string title = 4;
}

message NotificationMarkRead {
    string last_read_at = 1;
}

message Notifications {
    int32 id = 1;
    string last_read_at = 2;
    string reason = 3;
    message Repository {
        string description = 1;
        bool fork = 2;
        string full_name = 3;
        string html_url = 4;
        int32 id = 5;
        string name = 6;
        message Owner {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        Owner owner = 7;
        bool private = 8;
        string url = 9;
    }
    Repository repository = 4;
    message Subject {
        string latest_comment_url = 1;
        string title = 2;
        string type = 3;
        string url = 4;
    }
    Subject subject = 5;
    bool unread = 6;
    string updated_at = 7;
    string url = 8;
}

message OrgMember {
    string avatar_url = 1;
    string gravatar_id = 2;
    int32 id = 3;
    string login = 4;
    string url = 5;
}
repeated OrgMember orgMembers = 1

message OrgPublicMember {
    string avatar_url = 1;
    string gravatar_id = 2;
    int32 id = 3;
    string login = 4;
    string url = 5;
}
repeated OrgPublicMember orgPublicMembers = 1

message OrgTeam {
    int32 id = 1;
    string name = 2;
    string url = 3;
}
repeated OrgTeam orgTeams = 1

message OrgTeamsPost {
    string name = 1;
    ;
    repeated string repo_names = 3;
}

message Organization {
    string avatar_url = 1;
    string blog = 2;
    string company = 3;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 4;
    string email = 5;
    int32 followers = 6;
    int32 following = 7;
    string html_url = 8;
    int32 id = 9;
    string location = 10;
    string login = 11;
    string name = 12;
    int32 public_gists = 13;
    int32 public_repos = 14;
    string type = 15;
    string url = 16;
}

message OrganizationAsTeamMember {
    message Error {
        string code = 1;
        string field = 2;
        string resource = 3;
    }
    repeated Error errors = 1;
    string message = 2;
}

message ParticipationStats {
    repeated int32 all = 1;
    repeated int32 owner = 2;
}

message PatchGist {
    string description = 1;
    ;
}

message PatchOrg {
    // Billing email address. This address is not publicized.
    string billing_email = 1;
    string company = 2;
    // Publicly visible email address.
    string email = 3;
    string location = 4;
    string name = 5;
}

message PostComment {
    string body = 1;
}

message PostGist {
    string description = 1;
    message Files {
        message File1.Txt {
            string content = 1;
        }
        File1.Txt file1.txt = 1;
    }
    Files files = 2;
    bool public = 3;
}

message PostRepo {
    // True to create an initial commit with empty README. Default is false.
    bool auto_init = 1;
    string description = 2;
    // Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, "Haskell" Ignored if auto_init parameter is not provided.
    string gitignore_template = 3;
    // True to enable downloads for this repository, false to disable them. Default is true.
    bool has_downloads = 4;
    // True to enable issues for this repository, false to disable them. Default is true.
    bool has_issues = 5;
    // True to enable the wiki for this repository, false to disable it. Default is true.
    bool has_wiki = 6;
    string homepage = 7;
    string name = 8;
    // True to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account.
    bool private = 9;
    // The id of the team that will be granted access to this repository. This is only valid when creating a repo in an organization.
    int32 team_id = 10;
}

message PullRequest {
    message _links {
        message Comments {
            string href = 1;
        }
        Comments comments = 1;
        message Html {
            string href = 1;
        }
        Html html = 2;
        message Review_comments {
            string href = 1;
        }
        Review_comments review_comments = 3;
        message Self {
            string href = 1;
        }
        Self self = 4;
    }
    _links _links = 1;
    int32 additions = 2;
    message Base {
        string label = 1;
        string ref = 2;
        message Repo {
            string clone_url = 1;
            string created_at = 2;
            string description = 3;
            bool fork = 4;
            int32 forks = 5;
            int32 forks_count = 6;
            string full_name = 7;
            string git_url = 8;
            string homepage = 9;
            string html_url = 10;
            int32 id = 11;
            google.protobuf.NullValue language = 12;
            string master_branch = 13;
            string mirror_url = 14;
            string name = 15;
            int32 open_issues = 16;
            int32 open_issues_count = 17;
            message Owner {
                string avatar_url = 1;
                string gravatar_id = 2;
                int32 id = 3;
                string login = 4;
                string url = 5;
            }
            Owner owner = 18;
            bool private = 19;
            string pushed_at = 20;
            int32 size = 21;
            string ssh_url = 22;
            string svn_url = 23;
            string updated_at = 24;
            string url = 25;
            int32 watchers = 26;
            int32 watchers_count = 27;
        }
        Repo repo = 3;
        string sha = 4;
        message User {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        User user = 5;
    }
    Base base = 3;
    string body = 4;
    int32 changed_files = 5;
    string closed_at = 6;
    int32 comments = 7;
    int32 commits = 8;
    string created_at = 9;
    int32 deletions = 10;
    string diff_url = 11;
    message Head {
        string label = 1;
        string ref = 2;
        message Repo {
            string clone_url = 1;
            string created_at = 2;
            string description = 3;
            bool fork = 4;
            int32 forks = 5;
            int32 forks_count = 6;
            string full_name = 7;
            string git_url = 8;
            string homepage = 9;
            string html_url = 10;
            int32 id = 11;
            google.protobuf.NullValue language = 12;
            string master_branch = 13;
            string mirror_url = 14;
            string name = 15;
            int32 open_issues = 16;
            int32 open_issues_count = 17;
            message Owner {
                string avatar_url = 1;
                string gravatar_id = 2;
                int32 id = 3;
                string login = 4;
                string url = 5;
            }
            Owner owner = 18;
            bool private = 19;
            string pushed_at = 20;
            int32 size = 21;
            string ssh_url = 22;
            string svn_url = 23;
            string updated_at = 24;
            string url = 25;
            int32 watchers = 26;
            int32 watchers_count = 27;
        }
        Repo repo = 3;
        string sha = 4;
        message User {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        User user = 5;
    }
    Head head = 12;
    string html_url = 13;
    string issue_url = 14;
    string merge_commit_sha = 15;
    bool mergeable = 16;
    bool merged = 17;
    string merged_at = 18;
    message Merged_by {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Merged_by merged_by = 19;
    int32 number = 20;
    string patch_url = 21;
    string state = 22;
    string title = 23;
    string updated_at = 24;
    string url = 25;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 26;
}

message PullUpdate {
    string body = 1;
    string state = 2;
    string title = 3;
}

message Pull {
    message _links {
        message Comments {
            string href = 1;
        }
        Comments comments = 1;
        message Html {
            string href = 1;
        }
        Html html = 2;
        message Review_comments {
            string href = 1;
        }
        Review_comments review_comments = 3;
        message Self {
            string href = 1;
        }
        Self self = 4;
    }
    _links _links = 1;
    message Base {
        string label = 1;
        string ref = 2;
        message Repo {
            string clone_url = 1;
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
            string description = 3;
            bool fork = 4;
            int32 forks = 5;
            int32 forks_count = 6;
            string full_name = 7;
            string git_url = 8;
            string homepage = 9;
            string html_url = 10;
            int32 id = 11;
            string language = 12;
            string master_branch = 13;
            string mirror_url = 14;
            string name = 15;
            int32 open_issues = 16;
            int32 open_issues_count = 17;
            message Owner {
                string avatar_url = 1;
                string gravatar_id = 2;
                int32 id = 3;
                string login = 4;
                string url = 5;
            }
            Owner owner = 18;
            bool private = 19;
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 20;
            int32 size = 21;
            string ssh_url = 22;
            string svn_url = 23;
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 24;
            string url = 25;
            int32 watchers = 26;
            int32 watchers_count = 27;
        }
        Repo repo = 3;
        string sha = 4;
        message User {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        User user = 5;
    }
    Base base = 2;
    string body = 3;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string closed_at = 4;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 5;
    string diff_url = 6;
    message Head {
        string label = 1;
        string ref = 2;
        message Repo {
            string clone_url = 1;
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
            string description = 3;
            bool fork = 4;
            int32 forks = 5;
            int32 forks_count = 6;
            string full_name = 7;
            string git_url = 8;
            string homepage = 9;
            string html_url = 10;
            int32 id = 11;
            string language = 12;
            string master_branch = 13;
            string mirror_url = 14;
            string name = 15;
            int32 open_issues = 16;
            int32 open_issues_count = 17;
            message Owner {
                string avatar_url = 1;
                string gravatar_id = 2;
                int32 id = 3;
                string login = 4;
                string url = 5;
            }
            Owner owner = 18;
            bool private = 19;
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 20;
            int32 size = 21;
            string ssh_url = 22;
            string svn_url = 23;
                    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 24;
            string url = 25;
            int32 watchers = 26;
            int32 watchers_count = 27;
        }
        Repo repo = 3;
        string sha = 4;
        message User {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        User user = 5;
    }
    Head head = 7;
    string html_url = 8;
    string issue_url = 9;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string merged_at = 10;
    int32 number = 11;
    string patch_url = 12;
    ;
    string title = 14;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 15;
    string url = 16;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 17;
}
repeated Pull pulls = 1

message PullsComment {
    message _links {
        message Html {
            string href = 1;
        }
        Html html = 1;
        message Pull_request {
            string href = 1;
        }
        Pull_request pull_request = 2;
        message Self {
            string href = 1;
        }
        Self self = 3;
    }
    _links _links = 1;
    string body = 2;
    string commit_id = 3;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 4;
    int32 id = 5;
    string path = 6;
    int32 position = 7;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 8;
    string url = 9;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 10;
}

message PullsCommentPost {
    string body = 1;
    string commit_id = 2;
    string path = 3;
    int32 position = 4;
}

message PullsComment {
    message _links {
        message Html {
            string href = 1;
        }
        Html html = 1;
        message Pull_request {
            string href = 1;
        }
        Pull_request pull_request = 2;
        message Self {
            string href = 1;
        }
        Self self = 3;
    }
    _links _links = 1;
    string body = 2;
    string commit_id = 3;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 4;
    int32 id = 5;
    string path = 6;
    int32 position = 7;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 8;
    string url = 9;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 10;
}
repeated PullsComment pullsComments = 1

message PullsPost {
    string base = 1;
    string body = 2;
    string head = 3;
    string title = 4;
}

repeated int32 punchCardStats = 1

message PutSubscription {
    string created_at = 1;
    bool ignored = 2;
    message Reason {
    }
    Reason reason = 3;
    bool subscribed = 4;
    string thread_url = 5;
    string url = 6;
}

message Rate_limit {
    ;
}

message Readme {
    message _links {
        string git = 1;
        string html = 2;
        string self = 3;
    }
    _links _links = 1;
    string content = 2;
    string encoding = 3;
    string git_url = 4;
    string html_url = 5;
    string name = 6;
    string path = 7;
    string sha = 8;
    int32 size = 9;
    string type = 10;
    string url = 11;
}

message Ref {
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 1;
    message Creator {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Creator creator = 2;
    string description = 3;
    int32 id = 4;
    string state = 5;
    string target_url = 6;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 7;
    string url = 8;
}
repeated Ref ref = 1

message RefBody {
    message Object {
        string sha = 1;
        string type = 2;
        string url = 3;
    }
    Object object = 1;
    string ref = 2;
    string url = 3;
}

message RefStatu {
    string commit_url = 1;
    string name = 2;
    string repository_url = 3;
    string sha = 4;
    string state = 5;
    message Statuse {
        string context = 1;
        string created_at = 2;
        string description = 3;
        int32 id = 4;
        string state = 5;
        string target_url = 6;
        string updated_at = 7;
        string url = 8;
    }
    repeated Statuse statuses = 6;
}
repeated RefStatu refStatus = 1

message Ref {
    message Object {
        string sha = 1;
        string type = 2;
        string url = 3;
    }
    Object object = 1;
    string ref = 2;
    string url = 3;
}
repeated Ref refs = 1

message RefsBody {
    string ref = 1;
    string sha = 2;
}

message Release {
    message Asset {
        string content_type = 1;
        string created_at = 2;
        int32 download_count = 3;
        int32 id = 4;
        string label = 5;
        string name = 6;
        int32 size = 7;
        string state = 8;
        string updated_at = 9;
        message Uploader {
            string avatar_url = 1;
            string events_url = 2;
            string followers_url = 3;
            string following_url = 4;
            string gists_url = 5;
            string gravatar_id = 6;
            string html_url = 7;
            int32 id = 8;
            string login = 9;
            string organizations_url = 10;
            string received_events_url = 11;
            string repos_url = 12;
            bool site_admin = 13;
            string starred_url = 14;
            string subscriptions_url = 15;
            string type = 16;
            string url = 17;
        }
        Uploader uploader = 10;
        string url = 11;
    }
    repeated Asset assets = 1;
    string assets_url = 2;
    message Author {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        bool site_admin = 13;
        string starred_url = 14;
        string subscriptions_url = 15;
        string type = 16;
        string url = 17;
    }
    Author author = 3;
    string body = 4;
    string created_at = 5;
    bool draft = 6;
    string html_url = 7;
    int32 id = 8;
    string name = 9;
    bool prerelease = 10;
    string published_at = 11;
    string tag_name = 12;
    string tarball_url = 13;
    string target_commitish = 14;
    string upload_url = 15;
    string url = 16;
    string zipball_url = 17;
}

message Release_create {
    string body = 1;
    bool draft = 2;
    string name = 3;
    bool prerelease = 4;
    string tag_name = 5;
    string target_commitish = 6;
}

message Release {
    message Asset {
        string content_type = 1;
        string created_at = 2;
        int32 download_count = 3;
        int32 id = 4;
        string label = 5;
        string name = 6;
        int32 size = 7;
        string state = 8;
        string updated_at = 9;
        message Uploader {
            string avatar_url = 1;
            string events_url = 2;
            string followers_url = 3;
            string following_url = 4;
            string gists_url = 5;
            string gravatar_id = 6;
            string html_url = 7;
            int32 id = 8;
            string login = 9;
            string organizations_url = 10;
            string received_events_url = 11;
            string repos_url = 12;
            bool site_admin = 13;
            string starred_url = 14;
            string subscriptions_url = 15;
            string type = 16;
            string url = 17;
        }
        Uploader uploader = 10;
        string url = 11;
    }
    repeated Asset assets = 1;
    string assets_url = 2;
    message Author {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        bool site_admin = 13;
        string starred_url = 14;
        string subscriptions_url = 15;
        string type = 16;
        string url = 17;
    }
    Author author = 3;
    string body = 4;
    string created_at = 5;
    bool draft = 6;
    string html_url = 7;
    int32 id = 8;
    string name = 9;
    bool prerelease = 10;
    string published_at = 11;
    string tag_name = 12;
    string tarball_url = 13;
    string target_commitish = 14;
    string upload_url = 15;
    string url = 16;
    string zipball_url = 17;
}
repeated Release releases = 1

message Repo {
    string clone_url = 1;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
    string description = 3;
    bool fork = 4;
    int32 forks = 5;
    int32 forks_count = 6;
    string full_name = 7;
    string git_url = 8;
    bool has_downloads = 9;
    bool has_issues = 10;
    bool has_wiki = 11;
    string homepage = 12;
    string html_url = 13;
    int32 id = 14;
    string language = 15;
    string master_branch = 16;
    string mirror_url = 17;
    string name = 18;
    int32 open_issues = 19;
    int32 open_issues_count = 20;
    message Organization {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string type = 5;
        string url = 6;
    }
    Organization organization = 21;
    message Owner {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Owner owner = 22;
    // Is present when the repo is a fork. Parent is the repo this repo was forked from.
    message Parent {
        string clone_url = 1;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
        string description = 3;
        bool fork = 4;
        int32 forks = 5;
        int32 forks_count = 6;
        string full_name = 7;
        string git_url = 8;
        string homepage = 9;
        string html_url = 10;
        int32 id = 11;
        string language = 12;
        string master_branch = 13;
        string mirror_url = 14;
        string name = 15;
        int32 open_issues = 16;
        int32 open_issues_count = 17;
        message Owner {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        Owner owner = 18;
        bool private = 19;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 20;
        int32 size = 21;
        string ssh_url = 22;
        string svn_url = 23;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 24;
        string url = 25;
        int32 watchers = 26;
        int32 watchers_count = 27;
    }
    Parent parent = 23;
    bool private = 24;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 25;
    int32 size = 26;
    // Is present when the repo is a fork. Source is the ultimate source for the network.
    message Source {
        string clone_url = 1;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
        string description = 3;
        bool fork = 4;
        int32 forks = 5;
        int32 forks_count = 6;
        string full_name = 7;
        string git_url = 8;
        string homepage = 9;
        string html_url = 10;
        int32 id = 11;
        string language = 12;
        string master_branch = 13;
        string mirror_url = 14;
        string name = 15;
        int32 open_issues = 16;
        int32 open_issues_count = 17;
        message Owner {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string url = 5;
        }
        Owner owner = 18;
        bool private = 19;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 20;
        int32 size = 21;
        string ssh_url = 22;
        string svn_url = 23;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 24;
        string url = 25;
        int32 watchers = 26;
        int32 watchers_count = 27;
    }
    Source source = 27;
    string ssh_url = 28;
    string svn_url = 29;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 30;
    string url = 31;
    int32 watchers = 32;
    int32 watchers_count = 33;
}

message Repo_deployment {
    string created_at = 1;
    message Creator {
        string avatar_url = 1;
        string events_url = 2;
        string followers_url = 3;
        string following_url = 4;
        string gists_url = 5;
        string gravatar_id = 6;
        string html_url = 7;
        int32 id = 8;
        string login = 9;
        string organizations_url = 10;
        string received_events_url = 11;
        string repos_url = 12;
        bool site_admin = 13;
        string starred_url = 14;
        string subscriptions_url = 15;
        string type = 16;
        string url = 17;
    }
    Creator creator = 2;
    string description = 3;
    int32 id = 4;
    string payload = 5;
    string sha = 6;
    string statuses_url = 7;
    string updated_at = 8;
    string url = 9;
}
repeated Repo_deployment repo_deployments = 1

message RepoComment {
    string body = 1;
    string commit_id = 2;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 3;
    string html_url = 4;
    int32 id = 5;
    int32 line = 6;
    string path = 7;
    int32 position = 8;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 9;
    string url = 10;
    message User {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    User user = 11;
}
repeated RepoComment repoComments = 1

message RepoCommit {
    message Author {
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string date = 1;
        string email = 2;
        string name = 3;
    }
    Author author = 1;
    message Committer {
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string date = 1;
        string email = 2;
        string name = 3;
    }
    Committer committer = 2;
    string message = 3;
    message Parent {
        string sha = 1;
        string url = 2;
    }
    repeated Parent parents = 4;
    string sha = 5;
    message Tree {
        string sha = 1;
        string url = 2;
    }
    Tree tree = 6;
    string url = 7;
}

message RepoCommitBody {
    message Author {
        string date = 1;
        string email = 2;
        string name = 3;
    }
    Author author = 1;
    string message = 2;
    repeated string parents = 3;
    string tree = 4;
}

message RepoEdit {
    string description = 1;
    bool has_downloads = 2;
    bool has_issues = 3;
    bool has_wiki = 4;
    string homepage = 5;
    string name = 6;
    bool private = 7;
}

message Repo {
    string clone_url = 1;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
    string description = 3;
    bool fork = 4;
    int32 forks = 5;
    int32 forks_count = 6;
    string full_name = 7;
    string git_url = 8;
    string homepage = 9;
    string html_url = 10;
    int32 id = 11;
    string language = 12;
    string master_branch = 13;
    string mirror_url = 14;
    string name = 15;
    int32 open_issues = 16;
    int32 open_issues_count = 17;
    message Owner {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Owner owner = 18;
    bool private = 19;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 20;
    int32 size = 21;
    string ssh_url = 22;
    string svn_url = 23;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 24;
    string url = 25;
    int32 watchers = 26;
    int32 watchers_count = 27;
}
repeated Repo repos = 1

message Repositorie {
    string description = 1;
    bool fork = 2;
    string full_name = 3;
    string html_url = 4;
    int32 id = 5;
    string name = 6;
    message Owner {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Owner owner = 7;
    bool private = 8;
    string url = 9;
}
repeated Repositorie repositories = 1

message Search_code {
    message Item {
        string git_url = 1;
        string html_url = 2;
        string name = 3;
        string path = 4;
        message Repository {
            string archive_url = 1;
            string assignees_url = 2;
            string blobs_url = 3;
            string branches_url = 4;
            string collaborators_url = 5;
            string comments_url = 6;
            string commits_url = 7;
            string compare_url = 8;
            string contents_url = 9;
            string contributors_url = 10;
            string description = 11;
            string downloads_url = 12;
            string events_url = 13;
            bool fork = 14;
            string forks_url = 15;
            string full_name = 16;
            string git_commits_url = 17;
            string git_refs_url = 18;
            string git_tags_url = 19;
            string hooks_url = 20;
            string html_url = 21;
            int32 id = 22;
            string issue_comment_url = 23;
            string issue_events_url = 24;
            string issues_url = 25;
            string keys_url = 26;
            string labels_url = 27;
            string languages_url = 28;
            string merges_url = 29;
            string milestones_url = 30;
            string name = 31;
            string notifications_url = 32;
            message Owner {
                string avatar_url = 1;
                string events_url = 2;
                string followers_url = 3;
                string following_url = 4;
                string gists_url = 5;
                string gravatar_id = 6;
                string html_url = 7;
                int32 id = 8;
                string login = 9;
                string organizations_url = 10;
                string received_events_url = 11;
                string repos_url = 12;
                string starred_url = 13;
                string subscriptions_url = 14;
                string type = 15;
                string url = 16;
            }
            Owner owner = 33;
            bool private = 34;
            string pulls_url = 35;
            string stargazers_url = 36;
            string statuses_url = 37;
            string subscribers_url = 38;
            string subscription_url = 39;
            string tags_url = 40;
            string teams_url = 41;
            string trees_url = 42;
            string url = 43;
        }
        Repository repository = 5;
        int32 score = 6;
        string sha = 7;
        string url = 8;
    }
    repeated Item items = 1;
    int32 total_count = 2;
}

message Search_issues {
    message Item {
        google.protobuf.NullValue assignee = 1;
        string body = 2;
        google.protobuf.NullValue closed_at = 3;
        int32 comments = 4;
        string comments_url = 5;
        string created_at = 6;
        string events_url = 7;
        string html_url = 8;
        int32 id = 9;
        message Label {
            string color = 1;
            string name = 2;
            string url = 3;
        }
        repeated Label labels = 10;
        string labels_url = 11;
        google.protobuf.NullValue milestone = 12;
        int32 number = 13;
        message Pull_request {
            google.protobuf.NullValue diff_url = 1;
            google.protobuf.NullValue html_url = 2;
            google.protobuf.NullValue patch_url = 3;
        }
        Pull_request pull_request = 14;
        int32 score = 15;
        string state = 16;
        string title = 17;
        string updated_at = 18;
        string url = 19;
        message User {
            string avatar_url = 1;
            string events_url = 2;
            string followers_url = 3;
            string following_url = 4;
            string gists_url = 5;
            string gravatar_id = 6;
            string html_url = 7;
            int32 id = 8;
            string login = 9;
            string organizations_url = 10;
            string received_events_url = 11;
            string repos_url = 12;
            string starred_url = 13;
            string subscriptions_url = 14;
            string type = 15;
            string url = 16;
        }
        User user = 20;
    }
    repeated Item items = 1;
    int32 total_count = 2;
}

message Search_issues_by_keyword {
    message Issue {
        string body = 1;
        int32 comments = 2;
        string created_at = 3;
        string gravatar_id = 4;
        string html_url = 5;
        repeated string labels = 6;
        int32 number = 7;
        int32 position = 8;
        string state = 9;
        string title = 10;
        string updated_at = 11;
        string user = 12;
        int32 votes = 13;
    }
    repeated Issue issues = 1;
}

message Search_repositories {
    message Item {
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 1;
        string default_branch = 2;
        string description = 3;
        bool fork = 4;
        int32 forks = 5;
        int32 forks_count = 6;
        string full_name = 7;
        string homepage = 8;
        string html_url = 9;
        int32 id = 10;
        string language = 11;
        string master_branch = 12;
        string name = 13;
        int32 open_issues = 14;
        int32 open_issues_count = 15;
        message Owner {
            string avatar_url = 1;
            string gravatar_id = 2;
            int32 id = 3;
            string login = 4;
            string received_events_url = 5;
            string type = 6;
            string url = 7;
        }
        Owner owner = 16;
        bool private = 17;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 18;
        int32 score = 19;
        int32 size = 20;
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 21;
        string url = 22;
        int32 watchers = 23;
        int32 watchers_count = 24;
    }
    repeated Item items = 1;
    int32 total_count = 2;
}

message Search_repositories_by_keyword {
    message Repositorie {
        string created = 1;
        string created_at = 2;
        string description = 3;
        int32 followers = 4;
        bool fork = 5;
        int32 forks = 6;
        bool has_downloads = 7;
        bool has_issues = 8;
        bool has_wiki = 9;
        string homepage = 10;
        string language = 11;
        string name = 12;
        int32 open_issues = 13;
        string owner = 14;
        bool private = 15;
        string pushed = 16;
        string pushed_at = 17;
        int32 score = 18;
        int32 size = 19;
        string type = 20;
        string url = 21;
        string username = 22;
        int32 watchers = 23;
    }
    repeated Repositorie repositories = 1;
}

message Search_user_by_email {
    message User {
        string blog = 1;
        string company = 2;
        string created = 3;
        string created_at = 4;
        string email = 5;
        int32 followers_count = 6;
        int32 following_count = 7;
        string gravatar_id = 8;
        int32 id = 9;
        string location = 10;
        string login = 11;
        string name = 12;
        int32 public_gist_count = 13;
        int32 public_repo_count = 14;
        string type = 15;
    }
    User user = 1;
}

message Search_users {
    message Item {
        string avatar_url = 1;
        string followers_url = 2;
        string gravatar_id = 3;
        string html_url = 4;
        int32 id = 5;
        string login = 6;
        string organizations_url = 7;
        string received_events_url = 8;
        string repos_url = 9;
        int32 score = 10;
        string subscriptions_url = 11;
        string type = 12;
        string url = 13;
    }
    repeated Item items = 1;
    int32 total_count = 2;
}

message Search_users_by_keyword {
    message User {
        string created = 1;
        string created_at = 2;
        int32 followers = 3;
        int32 followers_count = 4;
        string fullname = 5;
        string gravatar_id = 6;
        string id = 7;
        string language = 8;
        string location = 9;
        string login = 10;
        string name = 11;
        int32 public_repo_count = 12;
        int32 repos = 13;
        int32 score = 14;
        string type = 15;
        string username = 16;
    }
    repeated User users = 1;
}

message Stargazer {
    string avatar_url = 1;
    string gravatar_id = 2;
    int32 id = 3;
    string login = 4;
    string url = 5;
}
repeated Stargazer stargazers = 1

message Subscribition {
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 1;
    bool ignored = 2;
    string reason = 3;
    string repository_url = 4;
    bool subscribed = 5;
    string url = 6;
}

message SubscribitionBody {
    bool ignored = 1;
    bool subscribed = 2;
}

message Subscription {
    string created_at = 1;
    bool ignored = 2;
    bool reason = 3;
    bool subscribed = 4;
    string thread_url = 5;
    string url = 6;
}

message Tag {
    string message = 1;
    message Object {
        string sha = 1;
        string type = 2;
        string url = 3;
    }
    Object object = 2;
    string sha = 3;
    string tag = 4;
    message Tagger {
            // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string date = 1;
        string email = 2;
        string name = 3;
    }
    Tagger tagger = 5;
    string url = 6;
}

message Tags {
    // String of the tag message.
    string message = 1;
    // String of the SHA of the git object this is tagging.
    string object = 2;
    string tag = 3;
    message Tagger {
            // Timestamp of when this object was tagged.
    string date = 1;
            // String of the email of the author of the tag.
    string email = 2;
            // String of the name of the author of the tag.
    string name = 3;
    }
    Tagger tagger = 4;
    // String of the type of the object we’re tagging. Normally this is a commit but it can also be a tree or a blob.
    string type = 5;
}

message Team {
    int32 id = 1;
    int32 members_count = 2;
    string name = 3;
    string permission = 4;
    int32 repos_count = 5;
    string url = 6;
}

message TeamMembership {
    string state = 1;
    string url = 2;
}

message TeamRepo {
    string clone_url = 1;
    string created_at = 2;
    string description = 3;
    bool fork = 4;
    int32 forks = 5;
    int32 forks_count = 6;
    string full_name = 7;
    string git_url = 8;
    string homepage = 9;
    string html_url = 10;
    int32 id = 11;
    google.protobuf.NullValue language = 12;
    string master_branch = 13;
    string mirror_url = 14;
    string name = 15;
    int32 open_issues = 16;
    int32 open_issues_count = 17;
    message Owner {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Owner owner = 18;
    bool private = 19;
    string pushed_at = 20;
    int32 size = 21;
    string ssh_url = 22;
    string svn_url = 23;
    string updated_at = 24;
    string url = 25;
    int32 watchers = 26;
    int32 watchers_count = 27;
}
repeated TeamRepo teamRepos = 1

message Team {
    int32 id = 1;
    string name = 2;
    string url = 3;
}
repeated Team teams = 1

message Teams_list {
    int32 id = 1;
    int32 members_count = 2;
    string name = 3;
    message Organization {
        string avatar_url = 1;
        int32 id = 2;
        string login = 3;
        string url = 4;
    }
    Organization organization = 4;
    string permission = 5;
    int32 repos_count = 6;
    string url = 7;
}
repeated Teams_list teams_list = 1

message Tree {
    string sha = 1;
    message Tree {
        string mode = 1;
        string path = 2;
        string sha = 3;
        int32 size = 4;
        string type = 5;
        string url = 6;
    }
    repeated Tree tree = 2;
    string url = 3;
}

message Trees {
    string base_tree = 1;
    // SHA1 checksum ID of the object in the tree.
    string sha = 2;
    message Tree {
            // One of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for submodule (commit) or 120000 for a blob that specifies the path of a symlink.
    enum Tree_Mode {
            TREE_MODE_100644 = 0;
            TREE_MODE_100755 = 1;
            TREE_MODE_040000 = 2;
            TREE_MODE_160000 = 3;
            TREE_MODE_120000 = 4;
        }
        Tree_Mode mode = 1;
        string path = 2;
            // SHA1 checksum ID of the object in the tree.
    string sha = 3;
        enum Tree_Type {
            TREE_TYPE_BLOB = 0;
            TREE_TYPE_TREE = 1;
            TREE_TYPE_COMMIT = 2;
        }
        Tree_Type type = 4;
        string url = 5;
    }
    repeated Tree tree = 3;
    string url = 4;
}

message User {
    string avatar_url = 1;
    string bio = 2;
    string blog = 3;
    int32 collaborators = 4;
    string company = 5;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 6;
    int32 disk_usage = 7;
    string email = 8;
    int32 followers = 9;
    int32 following = 10;
    string gravatar_id = 11;
    bool hireable = 12;
    string html_url = 13;
    int32 id = 14;
    string location = 15;
    string login = 16;
    string name = 17;
    int32 owned_private_repos = 18;
    message Plan {
        int32 collaborators = 1;
        string name = 2;
        int32 private_repos = 3;
        int32 space = 4;
    }
    Plan plan = 19;
    int32 private_gists = 20;
    int32 public_gists = 21;
    int32 public_repos = 22;
    int32 total_private_repos = 23;
    string type = 24;
    string url = 25;
}

repeated string user_emails = 1

message User_emails_final {
}
repeated User_emails_final user_emails_final = 1

message User_key {
}
repeated User_key user_keys = 1

message User_keys_keyId {
    int32 id = 1;
    string key = 2;
    string title = 3;
    string url = 4;
}

message User_keys_post {
    string key = 1;
    string title = 2;
}

message User_update {
    string bio = 1;
    string blog = 2;
    string company = 3;
    string email = 4;
    bool hireable = 5;
    string location = 6;
    string name = 7;
}

message User_userId {
    string avatar_url = 1;
    string bio = 2;
    string blog = 3;
    string company = 4;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 5;
    // Note: The returned email is the user’s publicly visible email address (or null if the user has not specified a public email address in their profile).
    string email = 6;
    int32 followers = 7;
    int32 following = 8;
    string gravatar_id = 9;
    bool hireable = 10;
    string html_url = 11;
    int32 id = 12;
    string location = 13;
    string login = 14;
    string name = 15;
    int32 public_gists = 16;
    int32 public_repos = 17;
    string type = 18;
    string url = 19;
}

message User_userId_starred {
}
repeated User_userId_starred user_userId_starred = 1

message User_userId_subscribition {
    string clone_url = 1;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string created_at = 2;
    string description = 3;
    bool fork = 4;
    int32 forks = 5;
    int32 forks_count = 6;
    string full_name = 7;
    string git_url = 8;
    string homepage = 9;
    string html_url = 10;
    int32 id = 11;
    string language = 12;
    int32 master_branch = 13;
    string mirror_url = 14;
    string name = 15;
    int32 open_issues = 16;
    int32 open_issues_count = 17;
    message Owner {
        string avatar_url = 1;
        string gravatar_id = 2;
        int32 id = 3;
        string login = 4;
        string url = 5;
    }
    Owner owner = 18;
    bool private = 19;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string pushed_at = 20;
    int32 size = 21;
    string ssh_url = 22;
    string svn_url = 23;
    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
    string updated_at = 24;
    string url = 25;
    int32 watchers = 26;
    int32 watchers_count = 27;
}
repeated User_userId_subscribition user_userId_subscribitions = 1

message User {
    string avatar_url = 1;
    string gravatar_id = 2;
    int32 id = 3;
    string login = 4;
    string url = 5;
}
repeated User users = 1

message Users_userId_key {
}
repeated Users_userId_key users_userId_keys = 1

message Users_userId_org {
}
repeated Users_userId_org users_userId_orgs = 1

service GitHubService {
    // Lists all the emojis available to use on GitHub.
    rpc GetEmojis(GetEmojisRequest) returns (Emojis) {
      option (google.api.http) = {
        get: "//emojis"
      };
    }
    // List public events.
    rpc GetEvents(GetEventsRequest) returns (Events) {
      option (google.api.http) = {
        get: "//events"
      };
    }
    // List Feeds.
    // GitHub provides several timeline resources in Atom format. The Feeds API
    //  lists all the feeds available to the authenticating user.
    rpc GetFeeds(GetFeedsRequest) returns (Feeds) {
      option (google.api.http) = {
        get: "//feeds"
      };
    }
    // List the authenticated user's gists or if called anonymously, this will
    // return all public gists.
    rpc GetGists(GetGistsRequest) returns (Gists) {
      option (google.api.http) = {
        get: "//gists"
      };
    }
    // Create a gist.
    rpc PostGists(PostGistsRequest) returns (Gist) {
      option (google.api.http) = {
        post: "//gists"
        body: "body"
      };
    }
    // List all public gists.
    rpc GetGistsPublic(GetGistsPublicRequest) returns (Gists) {
      option (google.api.http) = {
        get: "//gists/public"
      };
    }
    // List the authenticated user's starred gists.
    rpc GetGistsStarred(GetGistsStarredRequest) returns (Gists) {
      option (google.api.http) = {
        get: "//gists/starred"
      };
    }
    // Get a single gist.
    rpc GetGistsId(GetGistsIdRequest) returns (Gist) {
      option (google.api.http) = {
        get: "//gists/{id}"
      };
    }
    // Delete a gist.
    rpc DeleteGistsId(DeleteGistsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//gists/{id}"
      };
    }
    // List comments on a gist.
    rpc GetGistsIdComments(GetGistsIdCommentsRequest) returns (Comments) {
      option (google.api.http) = {
        get: "//gists/{id}/comments"
      };
    }
    // Create a commen
    rpc PostGistsIdComments(PostGistsIdCommentsRequest) returns (Comment) {
      option (google.api.http) = {
        post: "//gists/{id}/comments"
        body: "body"
      };
    }
    // Get a single comment.
    rpc GetGistsIdCommentsCommentId(GetGistsIdCommentsCommentIdRequest) returns (Comment) {
      option (google.api.http) = {
        get: "//gists/{id}/comments/{commentId}"
      };
    }
    // Delete a comment.
    rpc DeleteGistsIdCommentsCommentId(DeleteGistsIdCommentsCommentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//gists/{id}/comments/{commentId}"
      };
    }
    // Fork a gist.
    rpc PostGistsIdForks(PostGistsIdForksRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//gists/{id}/forks"
      };
    }
    // Check if a gist is starred.
    rpc GetGistsIdStar(GetGistsIdStarRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//gists/{id}/star"
      };
    }
    // Star a gist.
    rpc PutGistsIdStar(PutGistsIdStarRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//gists/{id}/star"
      };
    }
    // Unstar a gist.
    rpc DeleteGistsIdStar(DeleteGistsIdStarRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//gists/{id}/star"
      };
    }
    // Listing available templates.
    // List all templates available to pass as an option when creating a repository.
    rpc GetGitignoreTemplates(GetGitignoreTemplatesRequest) returns (Gitignore) {
      option (google.api.http) = {
        get: "//gitignore/templates"
      };
    }
    // Get a single template.
    rpc GetGitignoreTemplatesLanguage(GetGitignoreTemplatesLanguageRequest) returns (Gitignore-Lang) {
      option (google.api.http) = {
        get: "//gitignore/templates/{language}"
      };
    }
    // List issues.
    // List all issues across all the authenticated user's visible repositories.
    rpc GetIssues(GetIssuesRequest) returns (Issues) {
      option (google.api.http) = {
        get: "//issues"
      };
    }
    // Find issues by state and keyword.
    rpc GetLegacyIssuesSearchOwnerRepositoryStateKeyword(GetLegacyIssuesSearchOwnerRepositoryStateKeywordRequest) returns (Search-Issues-By-Keyword) {
      option (google.api.http) = {
        get: "//legacy/issues/search/{owner}/{repository}/{state}/{keyword}"
      };
    }
    // Find repositories by keyword. Note, this legacy method does not follow the v3 pagination pattern. This method returns up to 100 results per page and pages can be fetched using the start_page parameter.
    rpc GetLegacyReposSearchKeyword(GetLegacyReposSearchKeywordRequest) returns (Search-Repositories-By-Keyword) {
      option (google.api.http) = {
        get: "//legacy/repos/search/{keyword}"
      };
    }
    // This API call is added for compatibility reasons only.
    rpc GetLegacyUserEmailEmail(GetLegacyUserEmailEmailRequest) returns (Search-User-By-Email) {
      option (google.api.http) = {
        get: "//legacy/user/email/{email}"
      };
    }
    // Find users by keyword.
    rpc GetLegacyUserSearchKeyword(GetLegacyUserSearchKeywordRequest) returns (Search-Users-By-Keyword) {
      option (google.api.http) = {
        get: "//legacy/user/search/{keyword}"
      };
    }
    // Render an arbitrary Markdown document
    rpc PostMarkdown(PostMarkdownRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//markdown"
        body: "body"
      };
    }
    // Render a Markdown document in raw mode
    rpc PostMarkdownRaw(PostMarkdownRawRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//markdown/raw"
      };
    }
    // This gives some information about GitHub.com, the service.
    rpc GetMeta(GetMetaRequest) returns (Meta) {
      option (google.api.http) = {
        get: "//meta"
      };
    }
    // List public events for a network of repositories.
    rpc GetNetworksOwnerRepoEvents(GetNetworksOwnerRepoEventsRequest) returns (Events) {
      option (google.api.http) = {
        get: "//networks/{owner}/{repo}/events"
      };
    }
    // List your notifications.
    // List all notifications for the current user, grouped by repository.
    rpc GetNotifications(GetNotificationsRequest) returns (Notifications) {
      option (google.api.http) = {
        get: "//notifications"
      };
    }
    // Mark as read.
    // Marking a notification as "read" removes it from the default view on GitHub.com.
    rpc PutNotifications(PutNotificationsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//notifications"
        body: "body"
      };
    }
    // View a single thread.
    rpc GetNotificationsThreadsId(GetNotificationsThreadsIdRequest) returns (Notifications) {
      option (google.api.http) = {
        get: "//notifications/threads/{id}"
      };
    }
    // Get a Thread Subscription.
    rpc GetNotificationsThreadsIdSubscription(GetNotificationsThreadsIdSubscriptionRequest) returns (Subscription) {
      option (google.api.http) = {
        get: "//notifications/threads/{id}/subscription"
      };
    }
    // Set a Thread Subscription.
    // This lets you subscribe to a thread, or ignore it. Subscribing to a thread
    // is unnecessary if the user is already subscribed to the repository. Ignoring
    // a thread will mute all future notifications (until you comment or get @mentioned).
    rpc PutNotificationsThreadsIdSubscription(PutNotificationsThreadsIdSubscriptionRequest) returns (Subscription) {
      option (google.api.http) = {
        put: "//notifications/threads/{id}/subscription"
        body: "body"
      };
    }
    // Delete a Thread Subscription.
    rpc DeleteNotificationsThreadsIdSubscription(DeleteNotificationsThreadsIdSubscriptionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//notifications/threads/{id}/subscription"
      };
    }
    // Get an Organization.
    rpc GetOrgsOrg(GetOrgsOrgRequest) returns (Organization) {
      option (google.api.http) = {
        get: "//orgs/{org}"
      };
    }
    // List public events for an organization.
    rpc GetOrgsOrgEvents(GetOrgsOrgEventsRequest) returns (Events) {
      option (google.api.http) = {
        get: "//orgs/{org}/events"
      };
    }
    // List issues.
    // List all issues for a given organization for the authenticated user.
    rpc GetOrgsOrgIssues(GetOrgsOrgIssuesRequest) returns (Issues) {
      option (google.api.http) = {
        get: "//orgs/{org}/issues"
      };
    }
    // Members list.
    // List all users who are members of an organization. A member is a user tha
    // belongs to at least 1 team in the organization. If the authenticated user
    // is also an owner of this organization then both concealed and public members
    // will be returned. If the requester is not an owner of the organization the
    // query will be redirected to the public members list.
    rpc GetOrgsOrgMembers(GetOrgsOrgMembersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//orgs/{org}/members"
      };
    }
    // Check if a user is, publicly or privately, a member of the organization.
    rpc GetOrgsOrgMembersUsername(GetOrgsOrgMembersUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//orgs/{org}/members/{username}"
      };
    }
    // Remove a member.
    // Removing a user from this list will remove them from all teams and they
    // will no longer have any access to the organization's repositories.
    rpc DeleteOrgsOrgMembersUsername(DeleteOrgsOrgMembersUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//orgs/{org}/members/{username}"
      };
    }
    // Public members list.
    // Members of an organization can choose to have their membership publicized
    // or not.
    rpc GetOrgsOrgPublic_members(GetOrgsOrgPublic_membersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//orgs/{org}/public_members"
      };
    }
    // Check public membership.
    rpc GetOrgsOrgPublic_membersUsername(GetOrgsOrgPublic_membersUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//orgs/{org}/public_members/{username}"
      };
    }
    // Publicize a user's membership.
    rpc PutOrgsOrgPublic_membersUsername(PutOrgsOrgPublic_membersUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//orgs/{org}/public_members/{username}"
      };
    }
    // Conceal a user's membership.
    rpc DeleteOrgsOrgPublic_membersUsername(DeleteOrgsOrgPublic_membersUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//orgs/{org}/public_members/{username}"
      };
    }
    // List repositories for the specified org.
    rpc GetOrgsOrgRepos(GetOrgsOrgReposRequest) returns (Repos) {
      option (google.api.http) = {
        get: "//orgs/{org}/repos"
      };
    }
    // Create a new repository for the authenticated user. OAuth users must supply
    // repo scope.
    rpc PostOrgsOrgRepos(PostOrgsOrgReposRequest) returns (Repos) {
      option (google.api.http) = {
        post: "//orgs/{org}/repos"
        body: "body"
      };
    }
    // List teams.
    rpc GetOrgsOrgTeams(GetOrgsOrgTeamsRequest) returns (Teams) {
      option (google.api.http) = {
        get: "//orgs/{org}/teams"
      };
    }
    // Create team.
    // In order to create a team, the authenticated user must be an owner of organization.
    rpc PostOrgsOrgTeams(PostOrgsOrgTeamsRequest) returns (Team) {
      option (google.api.http) = {
        post: "//orgs/{org}/teams"
        body: "body"
      };
    }
    // Get your current rate limit status
    // Note: Accessing this endpoint does not count against your rate limit.
    rpc GetRate_limit(GetRate_limitRequest) returns (Rate_limit) {
      option (google.api.http) = {
        get: "//rate_limit"
      };
    }
    // Get repository.
    rpc GetReposOwnerRepo(GetReposOwnerRepoRequest) returns (Repo) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}"
      };
    }
    // Delete a Repository.
    // Deleting a repository requires admin access. If OAuth is used, the delete_repo
    // scope is required.
    rpc DeleteReposOwnerRepo(DeleteReposOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}"
      };
    }
    // List assignees.
    // This call lists all the available assignees (owner + collaborators) to which
    // issues may be assigned.
    rpc GetReposOwnerRepoAssignees(GetReposOwnerRepoAssigneesRequest) returns (Assignees) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/assignees"
      };
    }
    // Check assignee.
    // You may also check to see if a particular user is an assignee for a repository.
    rpc GetReposOwnerRepoAssigneesAssignee(GetReposOwnerRepoAssigneesAssigneeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/assignees/{assignee}"
      };
    }
    // Get list of branches
    rpc GetReposOwnerRepoBranches(GetReposOwnerRepoBranchesRequest) returns (Branches) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/branches"
      };
    }
    // Get Branch
    rpc GetReposOwnerRepoBranchesBranch(GetReposOwnerRepoBranchesBranchRequest) returns (Branch) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/branches/{branch}"
      };
    }
    // List.
    // When authenticating as an organization owner of an organization-owned
    // repository, all organization owners are included in the list of
    // collaborators. Otherwise, only users with access to the repository are
    // returned in the collaborators list.
    rpc GetReposOwnerRepoCollaborators(GetReposOwnerRepoCollaboratorsRequest) returns (Users) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/collaborators"
      };
    }
    // Check if user is a collaborator
    rpc GetReposOwnerRepoCollaboratorsUser(GetReposOwnerRepoCollaboratorsUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/collaborators/{user}"
      };
    }
    // Add collaborator.
    rpc PutReposOwnerRepoCollaboratorsUser(PutReposOwnerRepoCollaboratorsUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//repos/{owner}/{repo}/collaborators/{user}"
      };
    }
    // Remove collaborator.
    rpc DeleteReposOwnerRepoCollaboratorsUser(DeleteReposOwnerRepoCollaboratorsUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/collaborators/{user}"
      };
    }
    // List commit comments for a repository.
    // Comments are ordered by ascending ID.
    rpc GetReposOwnerRepoComments(GetReposOwnerRepoCommentsRequest) returns (RepoComments) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/comments"
      };
    }
    // Get a single commit comment.
    rpc GetReposOwnerRepoCommentsCommentId(GetReposOwnerRepoCommentsCommentIdRequest) returns (CommitComments) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/comments/{commentId}"
      };
    }
    // Delete a commit comment
    rpc DeleteReposOwnerRepoCommentsCommentId(DeleteReposOwnerRepoCommentsCommentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/comments/{commentId}"
      };
    }
    // List commits on a repository.
    rpc GetReposOwnerRepoCommits(GetReposOwnerRepoCommitsRequest) returns (Commits) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/commits"
      };
    }
    // Get the combined Status for a specific Ref
    // The Combined status endpoint is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the blog post for full details.
    // To access this endpoint during the preview period, you must provide a custom media type in the Accept header:
    // application/vnd.github.she-hulk-preview+json
    rpc GetReposOwnerRepoCommitsRefStatus(GetReposOwnerRepoCommitsRefStatusRequest) returns (RefStatus) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/commits/{ref}/status"
      };
    }
    // Get a single commit.
    rpc GetReposOwnerRepoCommitsShaCode(GetReposOwnerRepoCommitsShaCodeRequest) returns (Commit) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/commits/{shaCode}"
      };
    }
    // List comments for a single commitList comments for a single commit.
    rpc GetReposOwnerRepoCommitsShaCodeComments(GetReposOwnerRepoCommitsShaCodeCommentsRequest) returns (RepoComments) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/commits/{shaCode}/comments"
      };
    }
    // Create a commit comment.
    rpc PostReposOwnerRepoCommitsShaCodeComments(PostReposOwnerRepoCommitsShaCodeCommentsRequest) returns (CommitComments) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/commits/{shaCode}/comments"
        body: "body"
      };
    }
    // Compare two commits
    rpc GetReposOwnerRepoCompareBaseIdHeadId(GetReposOwnerRepoCompareBaseIdHeadIdRequest) returns (Compare-Commits) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/compare/{baseId}...{headId}"
      };
    }
    // Get contents.
    // This method returns the contents of a file or directory in a repository.
    // Files and symlinks support a custom media type for getting the raw content.
    // Directories and submodules do not support custom media types.
    // Note: This API supports files up to 1 megabyte in size.
    // Here can be many outcomes. For details see "http://developer.github.com/v3/repos/contents/"
    rpc GetReposOwnerRepoContentsPath(GetReposOwnerRepoContentsPathRequest) returns (Contents-Path) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/contents/{path}"
      };
    }
    // Create a file.
    rpc PutReposOwnerRepoContentsPath(PutReposOwnerRepoContentsPathRequest) returns (CreateFile) {
      option (google.api.http) = {
        put: "//repos/{owner}/{repo}/contents/{path}"
        body: "body"
      };
    }
    // Delete a file.
    // This method deletes a file in a repository.
    rpc DeleteReposOwnerRepoContentsPath(DeleteReposOwnerRepoContentsPathRequest) returns (DeleteFile) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/contents/{path}"
        body: "body"
      };
    }
    // Get list of contributors.
    rpc GetReposOwnerRepoContributors(GetReposOwnerRepoContributorsRequest) returns (Contributors) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/contributors"
      };
    }
    // Users with pull access can view deployments for a repository
    rpc GetReposOwnerRepoDeployments(GetReposOwnerRepoDeploymentsRequest) returns (Repo-Deployments) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/deployments"
      };
    }
    // Users with push access can create a deployment for a given ref
    rpc PostReposOwnerRepoDeployments(PostReposOwnerRepoDeploymentsRequest) returns (Deployment-Resp) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/deployments"
        body: "body"
      };
    }
    // Users with pull access can view deployment statuses for a deployment
    rpc GetReposOwnerRepoDeploymentsIdStatuses(GetReposOwnerRepoDeploymentsIdStatusesRequest) returns (Deployment-Statuses) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/deployments/{id}/statuses"
      };
    }
    // Create a Deployment Status
    // Users with push access can create deployment statuses for a given deployment:
    rpc PostReposOwnerRepoDeploymentsIdStatuses(PostReposOwnerRepoDeploymentsIdStatusesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/deployments/{id}/statuses"
        body: "body"
      };
    }
    // Deprecated. List downloads for a repository.
    rpc GetReposOwnerRepoDownloads(GetReposOwnerRepoDownloadsRequest) returns (Downloads) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/downloads"
      };
    }
    // Deprecated. Get a single download.
    rpc GetReposOwnerRepoDownloadsDownloadId(GetReposOwnerRepoDownloadsDownloadIdRequest) returns (Downloads) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/downloads/{downloadId}"
      };
    }
    // Deprecated. Delete a download.
    rpc DeleteReposOwnerRepoDownloadsDownloadId(DeleteReposOwnerRepoDownloadsDownloadIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/downloads/{downloadId}"
      };
    }
    // Get list of repository events.
    rpc GetReposOwnerRepoEvents(GetReposOwnerRepoEventsRequest) returns (Events) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/events"
      };
    }
    // List forks.
    rpc GetReposOwnerRepoForks(GetReposOwnerRepoForksRequest) returns (Forks) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/forks"
      };
    }
    // Create a fork.
    // Forking a Repository happens asynchronously. Therefore, you may have to wai
    // a short period before accessing the git objects. If this takes longer than 5
    // minutes, be sure to contact Support.
    rpc PostReposOwnerRepoForks(PostReposOwnerRepoForksRequest) returns (Fork) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/forks"
        body: "body"
      };
    }
    // Create a Blob.
    rpc PostReposOwnerRepoGitBlobs(PostReposOwnerRepoGitBlobsRequest) returns (Blobs) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/git/blobs"
        body: "body"
      };
    }
    // Get a Blob.
    // Since blobs can be any arbitrary binary data, the input and responses for
    // the blob API takes an encoding parameter that can be either utf-8 or
    // base64. If your data cannot be losslessly sent as a UTF-8 string, you can
    // base64 encode it.
    rpc GetReposOwnerRepoGitBlobsShaCode(GetReposOwnerRepoGitBlobsShaCodeRequest) returns (Blob) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/git/blobs/{shaCode}"
      };
    }
    // Create a Commit.
    rpc PostReposOwnerRepoGitCommits(PostReposOwnerRepoGitCommitsRequest) returns (GitCommit) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/git/commits"
        body: "body"
      };
    }
    // Get a Commit.
    rpc GetReposOwnerRepoGitCommitsShaCode(GetReposOwnerRepoGitCommitsShaCodeRequest) returns (RepoCommit) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/git/commits/{shaCode}"
      };
    }
    // Get all References
    rpc GetReposOwnerRepoGitRefs(GetReposOwnerRepoGitRefsRequest) returns (Refs) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/git/refs"
      };
    }
    // Create a Reference
    rpc PostReposOwnerRepoGitRefs(PostReposOwnerRepoGitRefsRequest) returns (HeadBranch) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/git/refs"
        body: "body"
      };
    }
    // Get a Reference
    rpc GetReposOwnerRepoGitRefsRef(GetReposOwnerRepoGitRefsRefRequest) returns (HeadBranch) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/git/refs/{ref}"
      };
    }
    // Delete a Reference
    // Example: Deleting a branch: DELETE /repos/octocat/Hello-World/git/refs/heads/feature-a 
    // Example: Deleting a tag:        DELETE /repos/octocat/Hello-World/git/refs/tags/v1.0
    rpc DeleteReposOwnerRepoGitRefsRef(DeleteReposOwnerRepoGitRefsRefRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/git/refs/{ref}"
      };
    }
    // Create a Tag Object.
    // Note that creating a tag object does not create the reference that makes a
    // tag in Git. If you want to create an annotated tag in Git, you have to do
    // this call to create the tag object, and then create the refs/tags/[tag]
    // reference. If you want to create a lightweight tag, you only have to create
    // the tag reference - this call would be unnecessary.
    rpc PostReposOwnerRepoGitTags(PostReposOwnerRepoGitTagsRequest) returns (Tags) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/git/tags"
        body: "body"
      };
    }
    // Get a Tag.
    rpc GetReposOwnerRepoGitTagsShaCode(GetReposOwnerRepoGitTagsShaCodeRequest) returns (Tag) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/git/tags/{shaCode}"
      };
    }
    // Create a Tree.
    // The tree creation API will take nested entries as well. If both a tree and
    // a nested path modifying that tree are specified, it will overwrite the
    // contents of that tree with the new path contents and write a new tree out.
    rpc PostReposOwnerRepoGitTrees(PostReposOwnerRepoGitTreesRequest) returns (Trees) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/git/trees"
        body: "body"
      };
    }
    // Get a Tree.
    rpc GetReposOwnerRepoGitTreesShaCode(GetReposOwnerRepoGitTreesShaCodeRequest) returns (Tree) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/git/trees/{shaCode}"
      };
    }
    // Get list of hooks.
    rpc GetReposOwnerRepoHooks(GetReposOwnerRepoHooksRequest) returns (Hook) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/hooks"
      };
    }
    // Create a hook.
    rpc PostReposOwnerRepoHooks(PostReposOwnerRepoHooksRequest) returns (Hook) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/hooks"
        body: "body"
      };
    }
    // Get single hook.
    rpc GetReposOwnerRepoHooksHookId(GetReposOwnerRepoHooksHookIdRequest) returns (Hook) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/hooks/{hookId}"
      };
    }
    // Delete a hook.
    rpc DeleteReposOwnerRepoHooksHookId(DeleteReposOwnerRepoHooksHookIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/hooks/{hookId}"
      };
    }
    // Test a push hook.
    // This will trigger the hook with the latest push to the current repository
    // if the hook is subscribed to push events. If the hook is not subscribed
    // to push events, the server will respond with 204 but no test POST will
    // be generated.
    // Note: Previously /repos/:owner/:repo/hooks/:id/tes
    rpc PostReposOwnerRepoHooksHookIdTests(PostReposOwnerRepoHooksHookIdTestsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/hooks/{hookId}/tests"
      };
    }
    // List issues for a repository.
    rpc GetReposOwnerRepoIssues(GetReposOwnerRepoIssuesRequest) returns (Issues) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues"
      };
    }
    // Create an issue.
    // Any user with pull access to a repository can create an issue.
    rpc PostReposOwnerRepoIssues(PostReposOwnerRepoIssuesRequest) returns (Issue) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/issues"
        body: "body"
      };
    }
    // List comments in a repository.
    rpc GetReposOwnerRepoIssuesComments(GetReposOwnerRepoIssuesCommentsRequest) returns (IssuesComments) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues/comments"
      };
    }
    // Get a single comment.
    rpc GetReposOwnerRepoIssuesCommentsCommentId(GetReposOwnerRepoIssuesCommentsCommentIdRequest) returns (IssuesComment) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues/comments/{commentId}"
      };
    }
    // Delete a comment.
    rpc DeleteReposOwnerRepoIssuesCommentsCommentId(DeleteReposOwnerRepoIssuesCommentsCommentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/issues/comments/{commentId}"
      };
    }
    // List issue events for a repository.
    rpc GetReposOwnerRepoIssuesEvents(GetReposOwnerRepoIssuesEventsRequest) returns (Events) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues/events"
      };
    }
    // Get a single event.
    rpc GetReposOwnerRepoIssuesEventsEventId(GetReposOwnerRepoIssuesEventsEventIdRequest) returns (Event) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues/events/{eventId}"
      };
    }
    // Get a single issue
    rpc GetReposOwnerRepoIssuesNumber(GetReposOwnerRepoIssuesNumberRequest) returns (Issue) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues/{number}"
      };
    }
    // List comments on an issue.
    rpc GetReposOwnerRepoIssuesNumberComments(GetReposOwnerRepoIssuesNumberCommentsRequest) returns (IssuesComments) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues/{number}/comments"
      };
    }
    // Create a comment.
    rpc PostReposOwnerRepoIssuesNumberComments(PostReposOwnerRepoIssuesNumberCommentsRequest) returns (IssuesComment) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/issues/{number}/comments"
        body: "body"
      };
    }
    // List events for an issue.
    rpc GetReposOwnerRepoIssuesNumberEvents(GetReposOwnerRepoIssuesNumberEventsRequest) returns (Events) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues/{number}/events"
      };
    }
    // List labels on an issue.
    rpc GetReposOwnerRepoIssuesNumberLabels(GetReposOwnerRepoIssuesNumberLabelsRequest) returns (Labels) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/issues/{number}/labels"
      };
    }
    // Replace all labels for an issue.
    // Sending an empty array ([]) will remove all Labels from the Issue.
    rpc PutReposOwnerRepoIssuesNumberLabels(PutReposOwnerRepoIssuesNumberLabelsRequest) returns (Label) {
      option (google.api.http) = {
        put: "//repos/{owner}/{repo}/issues/{number}/labels"
        body: "body"
      };
    }
    // Add labels to an issue.
    rpc PostReposOwnerRepoIssuesNumberLabels(PostReposOwnerRepoIssuesNumberLabelsRequest) returns (Label) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/issues/{number}/labels"
        body: "body"
      };
    }
    // Remove all labels from an issue.
    rpc DeleteReposOwnerRepoIssuesNumberLabels(DeleteReposOwnerRepoIssuesNumberLabelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/issues/{number}/labels"
      };
    }
    // Remove a label from an issue.
    rpc DeleteReposOwnerRepoIssuesNumberLabelsName(DeleteReposOwnerRepoIssuesNumberLabelsNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/issues/{number}/labels/{name}"
      };
    }
    // Get list of keys.
    rpc GetReposOwnerRepoKeys(GetReposOwnerRepoKeysRequest) returns (Keys) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/keys"
      };
    }
    // Create a key.
    rpc PostReposOwnerRepoKeys(PostReposOwnerRepoKeysRequest) returns (User-Keys-KeyId) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/keys"
        body: "body"
      };
    }
    // Get a key
    rpc GetReposOwnerRepoKeysKeyId(GetReposOwnerRepoKeysKeyIdRequest) returns (User-Keys-KeyId) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/keys/{keyId}"
      };
    }
    // Delete a key.
    rpc DeleteReposOwnerRepoKeysKeyId(DeleteReposOwnerRepoKeysKeyIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/keys/{keyId}"
      };
    }
    // List all labels for this repository.
    rpc GetReposOwnerRepoLabels(GetReposOwnerRepoLabelsRequest) returns (Labels) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/labels"
      };
    }
    // Create a label.
    rpc PostReposOwnerRepoLabels(PostReposOwnerRepoLabelsRequest) returns (Label) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/labels"
        body: "body"
      };
    }
    // Get a single label.
    rpc GetReposOwnerRepoLabelsName(GetReposOwnerRepoLabelsNameRequest) returns (Label) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/labels/{name}"
      };
    }
    // Delete a label.
    rpc DeleteReposOwnerRepoLabelsName(DeleteReposOwnerRepoLabelsNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/labels/{name}"
      };
    }
    // List languages.
    // List languages for the specified repository. The value on the right of a
    // language is the number of bytes of code written in that language.
    rpc GetReposOwnerRepoLanguages(GetReposOwnerRepoLanguagesRequest) returns (Languages) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/languages"
      };
    }
    // Perform a merge.
    rpc PostReposOwnerRepoMerges(PostReposOwnerRepoMergesRequest) returns (MergesSuccessful) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/merges"
        body: "body"
      };
    }
    // List milestones for a repository.
    rpc GetReposOwnerRepoMilestones(GetReposOwnerRepoMilestonesRequest) returns (Milestone) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/milestones"
      };
    }
    // Create a milestone.
    rpc PostReposOwnerRepoMilestones(PostReposOwnerRepoMilestonesRequest) returns (Milestone) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/milestones"
        body: "body"
      };
    }
    // Get a single milestone.
    rpc GetReposOwnerRepoMilestonesNumber(GetReposOwnerRepoMilestonesNumberRequest) returns (Milestone) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/milestones/{number}"
      };
    }
    // Delete a milestone.
    rpc DeleteReposOwnerRepoMilestonesNumber(DeleteReposOwnerRepoMilestonesNumberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/milestones/{number}"
      };
    }
    // Get labels for every issue in a milestone.
    rpc GetReposOwnerRepoMilestonesNumberLabels(GetReposOwnerRepoMilestonesNumberLabelsRequest) returns (Labels) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/milestones/{number}/labels"
      };
    }
    // List your notifications in a repository
    // List all notifications for the current user.
    rpc GetReposOwnerRepoNotifications(GetReposOwnerRepoNotificationsRequest) returns (Notifications) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/notifications"
      };
    }
    // Mark notifications as read in a repository.
    // Marking all notifications in a repository as "read" removes them from the
    // default view on GitHub.com.
    rpc PutReposOwnerRepoNotifications(PutReposOwnerRepoNotificationsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//repos/{owner}/{repo}/notifications"
        body: "body"
      };
    }
    // List pull requests.
    rpc GetReposOwnerRepoPulls(GetReposOwnerRepoPullsRequest) returns (Pulls) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/pulls"
      };
    }
    // Create a pull request.
    rpc PostReposOwnerRepoPulls(PostReposOwnerRepoPullsRequest) returns (Pulls) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/pulls"
        body: "body"
      };
    }
    // List comments in a repository.
    // By default, Review Comments are ordered by ascending ID.
    rpc GetReposOwnerRepoPullsComments(GetReposOwnerRepoPullsCommentsRequest) returns (IssuesComments) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/pulls/comments"
      };
    }
    // Get a single comment.
    rpc GetReposOwnerRepoPullsCommentsCommentId(GetReposOwnerRepoPullsCommentsCommentIdRequest) returns (PullsComment) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/pulls/comments/{commentId}"
      };
    }
    // Delete a comment.
    rpc DeleteReposOwnerRepoPullsCommentsCommentId(DeleteReposOwnerRepoPullsCommentsCommentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/pulls/comments/{commentId}"
      };
    }
    // Get a single pull request.
    rpc GetReposOwnerRepoPullsNumber(GetReposOwnerRepoPullsNumberRequest) returns (PullRequest) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/pulls/{number}"
      };
    }
    // List comments on a pull request.
    rpc GetReposOwnerRepoPullsNumberComments(GetReposOwnerRepoPullsNumberCommentsRequest) returns (PullsComment) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/pulls/{number}/comments"
      };
    }
    // Create a comment.
    //   #TODO Alternative input ( http://developer.github.com/v3/pulls/comments/ )
    //   description: |
    //     Alternative Input.
    //     Instead of passing commit_id, path, and position you can reply to an
    //     existing Pull Request Comment like this:
    // 
    //         body
    //            Required string
    //         in_reply_to
    //            Required number - Comment id to reply to.
    rpc PostReposOwnerRepoPullsNumberComments(PostReposOwnerRepoPullsNumberCommentsRequest) returns (PullsComment) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/pulls/{number}/comments"
        body: "body"
      };
    }
    // List commits on a pull request.
    rpc GetReposOwnerRepoPullsNumberCommits(GetReposOwnerRepoPullsNumberCommitsRequest) returns (Commits) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/pulls/{number}/commits"
      };
    }
    // List pull requests files.
    rpc GetReposOwnerRepoPullsNumberFiles(GetReposOwnerRepoPullsNumberFilesRequest) returns (Pulls) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/pulls/{number}/files"
      };
    }
    // Get if a pull request has been merged.
    rpc GetReposOwnerRepoPullsNumberMerge(GetReposOwnerRepoPullsNumberMergeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/pulls/{number}/merge"
      };
    }
    // Merge a pull request (Merge Button's)
    rpc PutReposOwnerRepoPullsNumberMerge(PutReposOwnerRepoPullsNumberMergeRequest) returns (Merge) {
      option (google.api.http) = {
        put: "//repos/{owner}/{repo}/pulls/{number}/merge"
        body: "body"
      };
    }
    // Get the README.
    // This method returns the preferred README for a repository.
    rpc GetReposOwnerRepoReadme(GetReposOwnerRepoReadmeRequest) returns (Contents-Path) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/readme"
      };
    }
    // Users with push access to the repository will receive all releases (i.e., published releases and draft releases). Users with pull access will receive published releases only
    rpc GetReposOwnerRepoReleases(GetReposOwnerRepoReleasesRequest) returns (Releases) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/releases"
      };
    }
    // Create a release
    // Users with push access to the repository can create a release.
    rpc PostReposOwnerRepoReleases(PostReposOwnerRepoReleasesRequest) returns (Release) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/releases"
        body: "body"
      };
    }
    // Get a single release asset
    rpc GetReposOwnerRepoReleasesAssetsId(GetReposOwnerRepoReleasesAssetsIdRequest) returns (Asset) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/releases/assets/{id}"
      };
    }
    // Delete a release asset
    rpc DeleteReposOwnerRepoReleasesAssetsId(DeleteReposOwnerRepoReleasesAssetsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/releases/assets/{id}"
      };
    }
    // Get a single release
    rpc GetReposOwnerRepoReleasesId(GetReposOwnerRepoReleasesIdRequest) returns (Release) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/releases/{id}"
      };
    }
    // Users with push access to the repository can delete a release.
    rpc DeleteReposOwnerRepoReleasesId(DeleteReposOwnerRepoReleasesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/releases/{id}"
      };
    }
    // List assets for a release
    rpc GetReposOwnerRepoReleasesIdAssets(GetReposOwnerRepoReleasesIdAssetsRequest) returns (Assets) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/releases/{id}/assets"
      };
    }
    // List Stargazers.
    rpc GetReposOwnerRepoStargazers(GetReposOwnerRepoStargazersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/stargazers"
      };
    }
    // Get the number of additions and deletions per week.
    // Returns a weekly aggregate of the number of additions and deletions pushed
    // to a repository.
    rpc GetReposOwnerRepoStatsCode_frequency(GetReposOwnerRepoStatsCode_frequencyRequest) returns (CodeFrequencyStats) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/stats/code_frequency"
      };
    }
    // Get the last year of commit activity data.
    // Returns the last year of commit activity grouped by week. The days array
    // is a group of commits per day, starting on Sunday.
    rpc GetReposOwnerRepoStatsCommit_activity(GetReposOwnerRepoStatsCommit_activityRequest) returns (CommitActivityStats) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/stats/commit_activity"
      };
    }
    // Get contributors list with additions, deletions, and commit counts.
    rpc GetReposOwnerRepoStatsContributors(GetReposOwnerRepoStatsContributorsRequest) returns (ContributorsStats) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/stats/contributors"
      };
    }
    // Get the weekly commit count for the repo owner and everyone else.
    rpc GetReposOwnerRepoStatsParticipation(GetReposOwnerRepoStatsParticipationRequest) returns (ParticipationStats) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/stats/participation"
      };
    }
    // Get the number of commits per hour in each day.
    // Each array contains the day number, hour number, and number of commits
    // 0-6 Sunday - Saturday
    // 0-23 Hour of day
    // Number of commits
    // 
    // For example, [2, 14, 25] indicates that there were 25 total commits, during
    // the 2.00pm hour on Tuesdays. All times are based on the time zone of
    // individual commits.
    rpc GetReposOwnerRepoStatsPunch_card(GetReposOwnerRepoStatsPunch_cardRequest) returns (CodeFrequencyStats) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/stats/punch_card"
      };
    }
    // List Statuses for a specific Ref.
    rpc GetReposOwnerRepoStatusesRef(GetReposOwnerRepoStatusesRefRequest) returns (Ref) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/statuses/{ref}"
      };
    }
    // Create a Status.
    rpc PostReposOwnerRepoStatusesRef(PostReposOwnerRepoStatusesRefRequest) returns (Ref) {
      option (google.api.http) = {
        post: "//repos/{owner}/{repo}/statuses/{ref}"
        body: "body"
      };
    }
    // List watchers.
    rpc GetReposOwnerRepoSubscribers(GetReposOwnerRepoSubscribersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/subscribers"
      };
    }
    // Get a Repository Subscription.
    rpc GetReposOwnerRepoSubscription(GetReposOwnerRepoSubscriptionRequest) returns (Subscribition) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/subscription"
      };
    }
    // Set a Repository Subscription
    rpc PutReposOwnerRepoSubscription(PutReposOwnerRepoSubscriptionRequest) returns (Subscribition) {
      option (google.api.http) = {
        put: "//repos/{owner}/{repo}/subscription"
        body: "body"
      };
    }
    // Delete a Repository Subscription.
    rpc DeleteReposOwnerRepoSubscription(DeleteReposOwnerRepoSubscriptionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//repos/{owner}/{repo}/subscription"
      };
    }
    // Get list of tags.
    rpc GetReposOwnerRepoTags(GetReposOwnerRepoTagsRequest) returns (Tags) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/tags"
      };
    }
    // Get list of teams
    rpc GetReposOwnerRepoTeams(GetReposOwnerRepoTeamsRequest) returns (Teams) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/teams"
      };
    }
    // List Stargazers. New implementation.
    rpc GetReposOwnerRepoWatchers(GetReposOwnerRepoWatchersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/watchers"
      };
    }
    // Get archive link.
    // This method will return a 302 to a URL to download a tarball or zipball
    // archive for a repository. Please make sure your HTTP framework is
    // configured to follow redirects or you will need to use the Location header
    // to make a second GET request.
    // Note: For private repositories, these links are temporary and expire quickly.
    rpc GetReposOwnerRepoArchive_formatPath(GetReposOwnerRepoArchive_formatPathRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//repos/{owner}/{repo}/{archive_format}/{path}"
      };
    }
    // List all public repositories.
    // This provides a dump of every public repository, in the order that they
    // were created.
    // Note: Pagination is powered exclusively by the since parameter. is the
    // Link header to get the URL for the next page of repositories.
    rpc GetRepositories(GetRepositoriesRequest) returns (Repositories) {
      option (google.api.http) = {
        get: "//repositories"
      };
    }
    // Search code.
    rpc GetSearchCode(GetSearchCodeRequest) returns (Search-Code) {
      option (google.api.http) = {
        get: "//search/code"
      };
    }
    // Find issues by state and keyword. (This method returns up to 100 results per page.)
    rpc GetSearchIssues(GetSearchIssuesRequest) returns (Search-Issues) {
      option (google.api.http) = {
        get: "//search/issues"
      };
    }
    // Search repositories.
    rpc GetSearchRepositories(GetSearchRepositoriesRequest) returns (Search-Repositories) {
      option (google.api.http) = {
        get: "//search/repositories"
      };
    }
    // Search users.
    rpc GetSearchUsers(GetSearchUsersRequest) returns (Search-Users) {
      option (google.api.http) = {
        get: "//search/users"
      };
    }
    // Get team.
    rpc GetTeamsTeamId(GetTeamsTeamIdRequest) returns (Team) {
      option (google.api.http) = {
        get: "//teams/{teamId}"
      };
    }
    // Delete team.
    // In order to delete a team, the authenticated user must be an owner of the
    // org that the team is associated with.
    rpc DeleteTeamsTeamId(DeleteTeamsTeamIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//teams/{teamId}"
      };
    }
    // List team members.
    // In order to list members in a team, the authenticated user must be a member
    // of the team.
    rpc GetTeamsTeamIdMembers(GetTeamsTeamIdMembersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//teams/{teamId}/members"
      };
    }
    // The "Get team member" API is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Get team membership API instead. It allows you to get both active and pending memberships.
    // 
    // Get team member.
    // In order to get if a user is a member of a team, the authenticated user mus
    // be a member of the team.
    rpc GetTeamsTeamIdMembersUsername(GetTeamsTeamIdMembersUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//teams/{teamId}/members/{username}"
      };
    }
    // The API (described below) is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Add team membership API instead. It allows you to invite new organization members to your teams.
    // 
    // Add team member.
    // In order to add a user to a team, the authenticated user must have 'admin'
    // permissions to the team or be an owner of the org that the team is associated
    // with.
    rpc PutTeamsTeamIdMembersUsername(PutTeamsTeamIdMembersUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//teams/{teamId}/members/{username}"
      };
    }
    // The "Remove team member" API is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Remove team membership API instead. It allows you to remove both active and pending memberships.
    // 
    // Remove team member.
    // In order to remove a user from a team, the authenticated user must have 'admin'
    // permissions to the team or be an owner of the org that the team is associated
    // with.
    // NOTE This does not delete the user, it just remove them from the team.
    rpc DeleteTeamsTeamIdMembersUsername(DeleteTeamsTeamIdMembersUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//teams/{teamId}/members/{username}"
      };
    }
    // Get team membership.
    // In order to get a user's membership with a team, the authenticated user must be a member of the team or an owner of the team's organization.
    rpc GetTeamsTeamIdMembershipsUsername(GetTeamsTeamIdMembershipsUsernameRequest) returns (TeamMembership) {
      option (google.api.http) = {
        get: "//teams/{teamId}/memberships/{username}"
      };
    }
    // Add team membership.
    // In order to add a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with.
    // 
    // If the user is already a part of the team's organization (meaning they're on at least one other team in the organization), this endpoint will add the user to the team.
    // 
    // If the user is completely unaffiliated with the team's organization (meaning they're on none of the organization's teams), this endpoint will send an invitation to the user via email. This newly-created membership will be in the 'pending' state until the user accepts the invitation, at which point the membership will transition to the 'active' state and the user will be added as a member of the team.
    rpc PutTeamsTeamIdMembershipsUsername(PutTeamsTeamIdMembershipsUsernameRequest) returns (TeamMembership) {
      option (google.api.http) = {
        put: "//teams/{teamId}/memberships/{username}"
      };
    }
    // Remove team membership.
    // In order to remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. NOTE: This does not delete the user, it just removes their membership from the team.
    rpc DeleteTeamsTeamIdMembershipsUsername(DeleteTeamsTeamIdMembershipsUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//teams/{teamId}/memberships/{username}"
      };
    }
    // List team repos
    rpc GetTeamsTeamIdRepos(GetTeamsTeamIdReposRequest) returns (TeamRepos) {
      option (google.api.http) = {
        get: "//teams/{teamId}/repos"
      };
    }
    // In order to add a repository to a team, the authenticated user must be an owner of the org that the team is associated with. Also, the repository must be owned by the organization, or a direct fork of a repository owned by the organization.
    rpc PutTeamsTeamIdReposOrgRepo(PutTeamsTeamIdReposOrgRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//teams/{teamId}/repos/{org}/{repo}"
      };
    }
    // Check if a team manages a repository
    rpc GetTeamsTeamIdReposOwnerRepo(GetTeamsTeamIdReposOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//teams/{teamId}/repos/{owner}/{repo}"
      };
    }
    // In order to remove a repository from a team, the authenticated user must be an owner of the org that the team is associated with. NOTE: This does not delete the repository, it just removes it from the team.
    rpc DeleteTeamsTeamIdReposOwnerRepo(DeleteTeamsTeamIdReposOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//teams/{teamId}/repos/{owner}/{repo}"
      };
    }
    // Get the authenticated user.
    rpc GetUser(GetUserRequest) returns (User) {
      option (google.api.http) = {
        get: "//user"
      };
    }
    // List email addresses for a user.
    // In the final version of the API, this method will return an array of hashes
    // with extended information for each email address indicating if the address
    // has been verified and if it's primary email address for GitHub.
    // Until API v3 is finalized, use the application/vnd.github.v3 media type to
    // get other response format.
    rpc GetUserEmails(GetUserEmailsRequest) returns (User-Emails) {
      option (google.api.http) = {
        get: "//user/emails"
      };
    }
    // Add email address(es).
    // You can post a single email address or an array of addresses.
    rpc PostUserEmails(PostUserEmailsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//user/emails"
        body: "body"
      };
    }
    // Delete email address(es).
    // You can include a single email address or an array of addresses.
    rpc DeleteUserEmails(DeleteUserEmailsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//user/emails"
        body: "body"
      };
    }
    // List the authenticated user's followers
    rpc GetUserFollowers(GetUserFollowersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//user/followers"
      };
    }
    // List who the authenticated user is following.
    rpc GetUserFollowing(GetUserFollowingRequest) returns (Users) {
      option (google.api.http) = {
        get: "//user/following"
      };
    }
    // Check if you are following a user.
    rpc GetUserFollowingUsername(GetUserFollowingUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//user/following/{username}"
      };
    }
    // Follow a user.
    // Following a user requires the user to be logged in and authenticated with
    // basic auth or OAuth with the user:follow scope.
    rpc PutUserFollowingUsername(PutUserFollowingUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//user/following/{username}"
      };
    }
    // Unfollow a user.
    // Unfollowing a user requires the user to be logged in and authenticated with
    // basic auth or OAuth with the user:follow scope.
    rpc DeleteUserFollowingUsername(DeleteUserFollowingUsernameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//user/following/{username}"
      };
    }
    // List issues.
    // List all issues across owned and member repositories for the authenticated
    // user.
    rpc GetUserIssues(GetUserIssuesRequest) returns (Issues) {
      option (google.api.http) = {
        get: "//user/issues"
      };
    }
    // List your public keys.
    // Lists the current user's keys. Management of public keys via the API requires
    // that you are authenticated through basic auth, or OAuth with the 'user', 'write:public_key' scopes.
    rpc GetUserKeys(GetUserKeysRequest) returns (Gitignore) {
      option (google.api.http) = {
        get: "//user/keys"
      };
    }
    // Create a public key.
    rpc PostUserKeys(PostUserKeysRequest) returns (User-Keys-KeyId) {
      option (google.api.http) = {
        post: "//user/keys"
        body: "body"
      };
    }
    // Get a single public key.
    rpc GetUserKeysKeyId(GetUserKeysKeyIdRequest) returns (User-Keys-KeyId) {
      option (google.api.http) = {
        get: "//user/keys/{keyId}"
      };
    }
    // Delete a public key. Removes a public key. Requires that you are authenticated via Basic Auth or via OAuth with at least admin:public_key scope.
    rpc DeleteUserKeysKeyId(DeleteUserKeysKeyIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//user/keys/{keyId}"
      };
    }
    // List public and private organizations for the authenticated user.
    rpc GetUserOrgs(GetUserOrgsRequest) returns (Gitignore) {
      option (google.api.http) = {
        get: "//user/orgs"
      };
    }
    // List repositories for the authenticated user. Note that this does not include
    // repositories owned by organizations which the user can access. You can lis
    // user organizations and list organization repositories separately.
    rpc GetUserRepos(GetUserReposRequest) returns (Repos) {
      option (google.api.http) = {
        get: "//user/repos"
      };
    }
    // Create a new repository for the authenticated user. OAuth users must supply
    // repo scope.
    rpc PostUserRepos(PostUserReposRequest) returns (Repos) {
      option (google.api.http) = {
        post: "//user/repos"
        body: "body"
      };
    }
    // List repositories being starred by the authenticated user.
    rpc GetUserStarred(GetUserStarredRequest) returns (Gitignore) {
      option (google.api.http) = {
        get: "//user/starred"
      };
    }
    // Check if you are starring a repository.
    rpc GetUserStarredOwnerRepo(GetUserStarredOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//user/starred/{owner}/{repo}"
      };
    }
    // Star a repository.
    rpc PutUserStarredOwnerRepo(PutUserStarredOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//user/starred/{owner}/{repo}"
      };
    }
    // Unstar a repository
    rpc DeleteUserStarredOwnerRepo(DeleteUserStarredOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//user/starred/{owner}/{repo}"
      };
    }
    // List repositories being watched by the authenticated user.
    rpc GetUserSubscriptions(GetUserSubscriptionsRequest) returns (User-UserId-Subscribitions) {
      option (google.api.http) = {
        get: "//user/subscriptions"
      };
    }
    // Check if you are watching a repository.
    rpc GetUserSubscriptionsOwnerRepo(GetUserSubscriptionsOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//user/subscriptions/{owner}/{repo}"
      };
    }
    // Watch a repository.
    rpc PutUserSubscriptionsOwnerRepo(PutUserSubscriptionsOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//user/subscriptions/{owner}/{repo}"
      };
    }
    // Stop watching a repository
    rpc DeleteUserSubscriptionsOwnerRepo(DeleteUserSubscriptionsOwnerRepoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//user/subscriptions/{owner}/{repo}"
      };
    }
    // List all of the teams across all of the organizations to which the authenticated user belongs. This method requires user or repo scope when authenticating via OAuth.
    rpc GetUserTeams(GetUserTeamsRequest) returns (Teams-List) {
      option (google.api.http) = {
        get: "//user/teams"
      };
    }
    // Get all users.
    // This provides a dump of every user, in the order that they signed up for GitHub.
    // Note: Pagination is powered exclusively by the since parameter. Use the Link
    // header to get the URL for the next page of users.
    rpc GetUsers(GetUsersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//users"
      };
    }
    // Get a single user.
    rpc GetUsersUsername(GetUsersUsernameRequest) returns (Users) {
      option (google.api.http) = {
        get: "//users/{username}"
      };
    }
    // If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
    rpc GetUsersUsernameEvents(GetUsersUsernameEventsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//users/{username}/events"
      };
    }
    // This is the user's organization dashboard. You must be authenticated as the user to view this.
    rpc GetUsersUsernameEventsOrgsOrg(GetUsersUsernameEventsOrgsOrgRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//users/{username}/events/orgs/{org}"
      };
    }
    // List a user's followers
    rpc GetUsersUsernameFollowers(GetUsersUsernameFollowersRequest) returns (Users) {
      option (google.api.http) = {
        get: "//users/{username}/followers"
      };
    }
    // Check if one user follows another.
    rpc GetUsersUsernameFollowingTargetUser(GetUsersUsernameFollowingTargetUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//users/{username}/following/{targetUser}"
      };
    }
    // List a users gists.
    rpc GetUsersUsernameGists(GetUsersUsernameGistsRequest) returns (Gists) {
      option (google.api.http) = {
        get: "//users/{username}/gists"
      };
    }
    // List public keys for a user.
    // Lists the verified public keys for a user. This is accessible by anyone.
    rpc GetUsersUsernameKeys(GetUsersUsernameKeysRequest) returns (Gitignore) {
      option (google.api.http) = {
        get: "//users/{username}/keys"
      };
    }
    // List all public organizations for a user.
    rpc GetUsersUsernameOrgs(GetUsersUsernameOrgsRequest) returns (Gitignore) {
      option (google.api.http) = {
        get: "//users/{username}/orgs"
      };
    }
    // These are events that you'll only see public events.
    rpc GetUsersUsernameReceived_events(GetUsersUsernameReceived_eventsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//users/{username}/received_events"
      };
    }
    // List public events that a user has received
    rpc GetUsersUsernameReceived_eventsPublic(GetUsersUsernameReceived_eventsPublicRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//users/{username}/received_events/public"
      };
    }
    // List public repositories for the specified user.
    rpc GetUsersUsernameRepos(GetUsersUsernameReposRequest) returns (Repos) {
      option (google.api.http) = {
        get: "//users/{username}/repos"
      };
    }
    // List repositories being starred by a user.
    rpc GetUsersUsernameStarred(GetUsersUsernameStarredRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//users/{username}/starred"
      };
    }
    // List repositories being watched by a user.
    rpc GetUsersUsernameSubscriptions(GetUsersUsernameSubscriptionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//users/{username}/subscriptions"
      };
    }
}

{
	"basePath": "/api/v2",
	"consumes.length": 1,
	"consumes[0]": "application/json",
	"definitions.Attachment.properties.attachable_id.example": 7543829,
	"definitions.Attachment.properties.attachable_id.type": "integer",
	"definitions.Attachment.properties.attachable_type.example": "Spot",
	"definitions.Attachment.properties.attachable_type.type": "string",
	"definitions.Attachment.properties.created_at.format": "date-time",
	"definitions.Attachment.properties.created_at.type": "string",
	"definitions.Attachment.properties.description.example": "This photo was taken in front of the restaurant",
	"definitions.Attachment.properties.description.type": "string",
	"definitions.Attachment.properties.file_url.example": "https://...",
	"definitions.Attachment.properties.file_url.type": "string",
	"definitions.Attachment.properties.id.example": 34939432,
	"definitions.Attachment.properties.id.type": "integer",
	"definitions.Attachment.properties.map_id.example": 985732,
	"definitions.Attachment.properties.map_id.type": "integer",
	"definitions.Attachment.properties.sizes.example.large.h": 860,
	"definitions.Attachment.properties.sizes.example.large.w": 1024,
	"definitions.Attachment.properties.sizes.type": "object",
	"definitions.Attachment.properties.spot.$ref": "#/definitions/Spot",
	"definitions.Attachment.properties.status.enum.length": 2,
	"definitions.Attachment.properties.status.enum[0]": "approved",
	"definitions.Attachment.properties.status.enum[1]": "unapproved",
	"definitions.Attachment.properties.status.example": "approved",
	"definitions.Attachment.properties.status.type": "string",
	"definitions.Attachment.properties.user.$ref": "#/definitions/User",
	"definitions.Collaborator.properties.created_at.format": "date-time",
	"definitions.Collaborator.properties.created_at.type": "string",
	"definitions.Collaborator.properties.group.enum.length": 2,
	"definitions.Collaborator.properties.group.enum[0]": "admin",
	"definitions.Collaborator.properties.group.enum[1]": "editor",
	"definitions.Collaborator.properties.group.example": "editor",
	"definitions.Collaborator.properties.group.type": "string",
	"definitions.Collaborator.properties.id.example": 4829504,
	"definitions.Collaborator.properties.id.type": "integer",
	"definitions.Collaborator.properties.is_admin.example": false,
	"definitions.Collaborator.properties.is_admin.type": "boolean",
	"definitions.Collaborator.properties.map.$ref": "#/definitions/Map",
	"definitions.Collaborator.properties.map_id.example": 324894,
	"definitions.Collaborator.properties.map_id.type": "integer",
	"definitions.Collaborator.properties.updated_at.format": "date-time",
	"definitions.Collaborator.properties.updated_at.type": "string",
	"definitions.Collaborator.properties.user.$ref": "#/definitions/User",
	"definitions.Collaborator.properties.user_id.example": 649302,
	"definitions.Collaborator.properties.user_id.type": "integer",
	"definitions.CollaboratorEditable.properties.group.enum.length": 2,
	"definitions.CollaboratorEditable.properties.group.enum[0]": "admin",
	"definitions.CollaboratorEditable.properties.group.enum[1]": "editor",
	"definitions.CollaboratorEditable.properties.group.example": "editor",
	"definitions.CollaboratorEditable.properties.group.type": "string",
	"definitions.CollaboratorInvitation.properties.accepted.example": true,
	"definitions.CollaboratorInvitation.properties.accepted.type": "boolean",
	"definitions.CollaboratorInvitation.properties.created_at.format": "date-time",
	"definitions.CollaboratorInvitation.properties.created_at.type": "string",
	"definitions.CollaboratorInvitation.properties.email.example": "a@b.com",
	"definitions.CollaboratorInvitation.properties.email.type": "string",
	"definitions.CollaboratorInvitation.properties.group.enum.length": 2,
	"definitions.CollaboratorInvitation.properties.group.enum[0]": "admin",
	"definitions.CollaboratorInvitation.properties.group.enum[1]": "editor",
	"definitions.CollaboratorInvitation.properties.group.example": "editor",
	"definitions.CollaboratorInvitation.properties.group.type": "string",
	"definitions.CollaboratorInvitation.properties.id.example": 8696493,
	"definitions.CollaboratorInvitation.properties.id.type": "integer",
	"definitions.CollaboratorInvitation.properties.invited_by_user.$ref": "#/definitions/User",
	"definitions.CollaboratorInvitation.properties.map.$ref": "#/definitions/Map",
	"definitions.CollaboratorInvitation.properties.sent.example": true,
	"definitions.CollaboratorInvitation.properties.sent.type": "boolean",
	"definitions.CollaboratorInvitation.properties.updated_at.format": "date-time",
	"definitions.CollaboratorInvitation.properties.updated_at.type": "string",
	"definitions.CollaboratorInvitation.properties.user.$ref": "#/definitions/User",
	"definitions.CollaboratorInvitationCreate.properties.emails.example": "a@b.com, c@d.com, e@f.com",
	"definitions.CollaboratorInvitationCreate.properties.emails.type": "string",
	"definitions.CollaboratorInvitationCreate.properties.is_admin.example": true,
	"definitions.CollaboratorInvitationCreate.properties.is_admin.type": "boolean",
	"definitions.CollaboratorInvitationCreate.properties.map_id.example": 34925783,
	"definitions.CollaboratorInvitationCreate.properties.map_id.type": "integer",
	"definitions.CollaboratorInvitationCreate.properties.user_ids.example": "5839459, 389423, 89494, 686950",
	"definitions.CollaboratorInvitationCreate.properties.user_ids.type": "string",
	"definitions.Comment.properties.body.example": "Nice photo",
	"definitions.Comment.properties.body.type": "string",
	"definitions.Comment.properties.created_at.format": "date-time",
	"definitions.Comment.properties.created_at.type": "string",
	"definitions.Comment.properties.id.example": 29628358,
	"definitions.Comment.properties.id.type": "integer",
	"definitions.Comment.properties.status.enum.length": 2,
	"definitions.Comment.properties.status.enum[0]": "approved",
	"definitions.Comment.properties.status.enum[1]": "unapproved",
	"definitions.Comment.properties.status.example": "approved",
	"definitions.Comment.properties.status.type": "string",
	"definitions.Comment.properties.updated_at.format": "date-time",
	"definitions.Comment.properties.updated_at.type": "string",
	"definitions.Comment.properties.user.$ref": "#/definitions/User",
	"definitions.CommentEditable.properties.body.example": "Nice photo",
	"definitions.CommentEditable.properties.body.type": "string",
	"definitions.Event.properties.counts.$ref": "#/definitions/EventCounts",
	"definitions.Event.properties.created_at.format": "date-time",
	"definitions.Event.properties.created_at.type": "string",
	"definitions.Event.properties.description.example": "Very special event",
	"definitions.Event.properties.description.type": "string",
	"definitions.Event.properties.ends_at.format": "date-time",
	"definitions.Event.properties.ends_at.type": "string",
	"definitions.Event.properties.id.example": 482959,
	"definitions.Event.properties.id.type": "integer",
	"definitions.Event.properties.lat.example": 53.293493,
	"definitions.Event.properties.lat.type": "number",
	"definitions.Event.properties.lon.example": 12.394328,
	"definitions.Event.properties.lon.type": "number",
	"definitions.Event.properties.owner_id.example": 82389429,
	"definitions.Event.properties.owner_id.type": "integer",
	"definitions.Event.properties.picture_url.example": "https://...",
	"definitions.Event.properties.picture_url.type": "string",
	"definitions.Event.properties.spot.$ref": "#/definitions/Spot",
	"definitions.Event.properties.starts_at.format": "date-time",
	"definitions.Event.properties.starts_at.type": "string",
	"definitions.Event.properties.time_zone.example": "Berlin",
	"definitions.Event.properties.time_zone.type": "string",
	"definitions.Event.properties.title.example": "20th anniversary event",
	"definitions.Event.properties.title.type": "string",
	"definitions.Event.properties.updated_at.format": "date-time",
	"definitions.Event.properties.updated_at.type": "string",
	"definitions.Event.properties.user.$ref": "#/definitions/User",
	"definitions.EventCounts.properties.attachments.example": 27,
	"definitions.EventCounts.properties.attachments.type": "integer",
	"definitions.EventCounts.properties.comments.example": 284,
	"definitions.EventCounts.properties.comments.type": "integer",
	"definitions.EventEditable.properties.description.example": "Very special event",
	"definitions.EventEditable.properties.description.type": "string",
	"definitions.EventEditable.properties.ends_at.format": "date-time",
	"definitions.EventEditable.properties.ends_at.type": "string",
	"definitions.EventEditable.properties.lat.example": 53.293493,
	"definitions.EventEditable.properties.lat.type": "number",
	"definitions.EventEditable.properties.lon.example": 12.394328,
	"definitions.EventEditable.properties.lon.type": "number",
	"definitions.EventEditable.properties.picture.example": "\u003cBASE_64_ENCODED_STRING\u003e",
	"definitions.EventEditable.properties.picture.type": "string",
	"definitions.EventEditable.properties.starts_at.format": "date-time",
	"definitions.EventEditable.properties.starts_at.type": "string",
	"definitions.EventEditable.properties.time_zone.example": "Berlin",
	"definitions.EventEditable.properties.time_zone.type": "string",
	"definitions.EventEditable.properties.title.example": "20th anniversary event",
	"definitions.EventEditable.properties.title.type": "string",
	"definitions.EventEditable.properties.user_id.example": 703943,
	"definitions.EventEditable.properties.user_id.type": "integer",
	"definitions.Map.properties.counts.$ref": "#/definitions/MapCounts",
	"definitions.Map.properties.created_at.format": "date-time",
	"definitions.Map.properties.created_at.type": "string",
	"definitions.Map.properties.description.example": "A collection of restaurants, cafes, clubs and random spots that I recommend in Berlin",
	"definitions.Map.properties.description.type": "string",
	"definitions.Map.properties.id.example": 18234843,
	"definitions.Map.properties.id.type": "integer",
	"definitions.Map.properties.map_settings.$ref": "#/definitions/MapSettings",
	"definitions.Map.properties.owner_id.example": 9829358,
	"definitions.Map.properties.owner_id.type": "integer",
	"definitions.Map.properties.picture_url.example": "https://...",
	"definitions.Map.properties.picture_url.type": "string",
	"definitions.Map.properties.title.example": "My favourite places in Berlin",
	"definitions.Map.properties.title.type": "string",
	"definitions.Map.properties.updated_at.format": "date-time",
	"definitions.Map.properties.updated_at.type": "string",
	"definitions.Map.properties.visibility.enum.length": 3,
	"definitions.Map.properties.visibility.enum[0]": "public",
	"definitions.Map.properties.visibility.enum[1]": "link",
	"definitions.Map.properties.visibility.enum[2]": "private",
	"definitions.Map.properties.visibility.example": "public",
	"definitions.Map.properties.visibility.type": "string",
	"definitions.MapCounts.properties.attachments.example": 31,
	"definitions.MapCounts.properties.attachments.type": "integer",
	"definitions.MapCounts.properties.comments.example": 234,
	"definitions.MapCounts.properties.comments.type": "integer",
	"definitions.MapCounts.properties.impressions.example": 234332,
	"definitions.MapCounts.properties.impressions.type": "integer",
	"definitions.MapCounts.properties.respots.example": 24,
	"definitions.MapCounts.properties.respots.type": "integer",
	"definitions.MapCounts.properties.spots.example": 67,
	"definitions.MapCounts.properties.spots.type": "integer",
	"definitions.MapCounts.properties.subscriptions.example": 3892,
	"definitions.MapCounts.properties.subscriptions.type": "integer",
	"definitions.MapEditable.properties.description.example": "A collection of restaurants, cafes, clubs and random spots that I recommend in Berlin",
	"definitions.MapEditable.properties.description.type": "string",
	"definitions.MapEditable.properties.map_settings.$ref": "#/definitions/MapSettings",
	"definitions.MapEditable.properties.picture.example": "\u003cBASE_64_ENCODED_STRING\u003e",
	"definitions.MapEditable.properties.picture.type": "string",
	"definitions.MapEditable.properties.title.example": "My favourite places in Berlin",
	"definitions.MapEditable.properties.title.type": "string",
	"definitions.MapEditable.properties.visibility.enum.length": 3,
	"definitions.MapEditable.properties.visibility.enum[0]": "public",
	"definitions.MapEditable.properties.visibility.enum[1]": "link",
	"definitions.MapEditable.properties.visibility.enum[2]": "private",
	"definitions.MapEditable.properties.visibility.example": "public",
	"definitions.MapEditable.properties.visibility.type": "string",
	"definitions.MapRelation.properties.access.example.length": 6,
	"definitions.MapRelation.properties.access.example[0]": "can_administer.map",
	"definitions.MapRelation.properties.access.example[1]": "can_administer.spots",
	"definitions.MapRelation.properties.access.example[2]": "can_administer.events",
	"definitions.MapRelation.properties.access.example[3]": "can_administer.comments",
	"definitions.MapRelation.properties.access.example[4]": "can_administer.attachments",
	"definitions.MapRelation.properties.access.example[5]": "can_administer.collaborators",
	"definitions.MapRelation.properties.access.type": "string",
	"definitions.MapRelation.properties.access_group.enum.length": 3,
	"definitions.MapRelation.properties.access_group.enum[0]": "visitor",
	"definitions.MapRelation.properties.access_group.enum[1]": "editor",
	"definitions.MapRelation.properties.access_group.enum[2]": "admin",
	"definitions.MapRelation.properties.access_group.example": "owner",
	"definitions.MapRelation.properties.access_group.type": "string",
	"definitions.MapRelation.properties.subscribed.example": true,
	"definitions.MapRelation.properties.subscribed.type": "boolean",
	"definitions.MapSettings.properties.editor_access.example.length": 6,
	"definitions.MapSettings.properties.editor_access.example[0]": "can_administer.map",
	"definitions.MapSettings.properties.editor_access.example[1]": "can_administer.spots",
	"definitions.MapSettings.properties.editor_access.example[2]": "can_administer.events",
	"definitions.MapSettings.properties.editor_access.example[3]": "can_administer.comments",
	"definitions.MapSettings.properties.editor_access.example[4]": "can_administer.attachments",
	"definitions.MapSettings.properties.editor_access.example[5]": "can_administer.collaborators",
	"definitions.MapSettings.properties.editor_access.type": "string",
	"definitions.MapSettings.properties.respotting_to_this_map.example": true,
	"definitions.MapSettings.properties.respotting_to_this_map.type": "boolean",
	"definitions.MapSettings.properties.visitor_access.example.length": 6,
	"definitions.MapSettings.properties.visitor_access.example[0]": "can_administer.map",
	"definitions.MapSettings.properties.visitor_access.example[1]": "can_administer.spots",
	"definitions.MapSettings.properties.visitor_access.example[2]": "can_administer.events",
	"definitions.MapSettings.properties.visitor_access.example[3]": "can_administer.comments",
	"definitions.MapSettings.properties.visitor_access.example[4]": "can_administer.attachments",
	"definitions.MapSettings.properties.visitor_access.example[5]": "can_administer.collaborators",
	"definitions.MapSettings.properties.visitor_access.type": "string",
	"definitions.MapWithAuthToken.properties.counts.$ref": "#/definitions/MapCounts",
	"definitions.MapWithAuthToken.properties.created_at.format": "date-time",
	"definitions.MapWithAuthToken.properties.created_at.type": "string",
	"definitions.MapWithAuthToken.properties.description.example": "A collection of restaurants, cafes, clubs and random spots that I recommend in Berlin",
	"definitions.MapWithAuthToken.properties.description.type": "string",
	"definitions.MapWithAuthToken.properties.id.example": 18234843,
	"definitions.MapWithAuthToken.properties.id.type": "integer",
	"definitions.MapWithAuthToken.properties.owner_id.example": 9829358,
	"definitions.MapWithAuthToken.properties.owner_id.type": "integer",
	"definitions.MapWithAuthToken.properties.picture_url.example": "https://...",
	"definitions.MapWithAuthToken.properties.picture_url.type": "string",
	"definitions.MapWithAuthToken.properties.title.example": "My favourite places in Berlin",
	"definitions.MapWithAuthToken.properties.title.type": "string",
	"definitions.MapWithAuthToken.properties.token.example": "1-x_gqu7eLBe3uKoAGAGXy",
	"definitions.MapWithAuthToken.properties.token.type": "string",
	"definitions.MapWithAuthToken.properties.updated_at.format": "date-time",
	"definitions.MapWithAuthToken.properties.updated_at.type": "string",
	"definitions.MapWithAuthToken.properties.visibility.enum.length": 3,
	"definitions.MapWithAuthToken.properties.visibility.enum[0]": "public",
	"definitions.MapWithAuthToken.properties.visibility.enum[1]": "link",
	"definitions.MapWithAuthToken.properties.visibility.enum[2]": "private",
	"definitions.MapWithAuthToken.properties.visibility.example": "public",
	"definitions.MapWithAuthToken.properties.visibility.type": "string",
	"definitions.MapWithRelation.properties.counts.$ref": "#/definitions/MapCounts",
	"definitions.MapWithRelation.properties.created_at.format": "date-time",
	"definitions.MapWithRelation.properties.created_at.type": "string",
	"definitions.MapWithRelation.properties.description.example": "A collection of restaurants, cafes, clubs and random spots that I recommend in Berlin",
	"definitions.MapWithRelation.properties.description.type": "string",
	"definitions.MapWithRelation.properties.id.example": 18234843,
	"definitions.MapWithRelation.properties.id.type": "integer",
	"definitions.MapWithRelation.properties.map_settings.$ref": "#/definitions/MapSettings",
	"definitions.MapWithRelation.properties.owner_id.example": 9829358,
	"definitions.MapWithRelation.properties.owner_id.type": "integer",
	"definitions.MapWithRelation.properties.picture_url.example": "https://...",
	"definitions.MapWithRelation.properties.picture_url.type": "string",
	"definitions.MapWithRelation.properties.relation.$ref": "#/definitions/MapRelation",
	"definitions.MapWithRelation.properties.title.example": "My favourite places in Berlin",
	"definitions.MapWithRelation.properties.title.type": "string",
	"definitions.MapWithRelation.properties.updated_at.format": "date-time",
	"definitions.MapWithRelation.properties.updated_at.type": "string",
	"definitions.MapWithRelation.properties.visibility.enum.length": 3,
	"definitions.MapWithRelation.properties.visibility.enum[0]": "public",
	"definitions.MapWithRelation.properties.visibility.enum[1]": "link",
	"definitions.MapWithRelation.properties.visibility.enum[2]": "private",
	"definitions.MapWithRelation.properties.visibility.example": "public",
	"definitions.MapWithRelation.properties.visibility.type": "string",
	"definitions.Respot.properties.created_at.format": "date-time",
	"definitions.Respot.properties.created_at.type": "string",
	"definitions.Respot.properties.id.example": 589032,
	"definitions.Respot.properties.id.type": "integer",
	"definitions.Respot.properties.map.$ref": "#/definitions/Map",
	"definitions.Respot.properties.map_id.example": 8393450,
	"definitions.Respot.properties.map_id.type": "integer",
	"definitions.Respot.properties.spot.$ref": "#/definitions/Spot",
	"definitions.Respot.properties.updated_at.format": "date-time",
	"definitions.Respot.properties.updated_at.type": "string",
	"definitions.Respot.properties.user.$ref": "#/definitions/User",
	"definitions.Spot.properties.counts.$ref": "#/definitions/SpotCounts",
	"definitions.Spot.properties.created_at.format": "date-time",
	"definitions.Spot.properties.created_at.type": "string",
	"definitions.Spot.properties.description.example": "Landed here by accident but look how wonderful this place is in the photos attached",
	"definitions.Spot.properties.description.type": "string",
	"definitions.Spot.properties.id.example": 5932234,
	"definitions.Spot.properties.id.type": "integer",
	"definitions.Spot.properties.lat.example": 53.112385,
	"definitions.Spot.properties.lat.type": "number",
	"definitions.Spot.properties.lon.example": 10.58349,
	"definitions.Spot.properties.lon.type": "number",
	"definitions.Spot.properties.map_id.example": 394805,
	"definitions.Spot.properties.map_id.type": "integer",
	"definitions.Spot.properties.picture_url.example": "https://...",
	"definitions.Spot.properties.picture_url.type": "string",
	"definitions.Spot.properties.status.enum.length": 2,
	"definitions.Spot.properties.status.enum[0]": "approved",
	"definitions.Spot.properties.status.enum[1]": "unapproved",
	"definitions.Spot.properties.status.example": "approved",
	"definitions.Spot.properties.status.type": "string",
	"definitions.Spot.properties.time_zone.example": "Berlin",
	"definitions.Spot.properties.time_zone.type": "string",
	"definitions.Spot.properties.title.example": "Beautiful place out in the country",
	"definitions.Spot.properties.title.type": "string",
	"definitions.Spot.properties.updated_at.format": "date-time",
	"definitions.Spot.properties.updated_at.type": "string",
	"definitions.Spot.properties.user.$ref": "#/definitions/User",
	"definitions.SpotCounts.properties.attachments.example": 4,
	"definitions.SpotCounts.properties.attachments.type": "integer",
	"definitions.SpotCounts.properties.comments.example": 24,
	"definitions.SpotCounts.properties.comments.type": "integer",
	"definitions.SpotCounts.properties.respot.example": 34,
	"definitions.SpotCounts.properties.respot.type": "integer",
	"definitions.SpotEditable.properties.description.example": "Landed here by accident but look how wonderful this place is in the photos attached",
	"definitions.SpotEditable.properties.description.type": "string",
	"definitions.SpotEditable.properties.lat.example": 53.112385,
	"definitions.SpotEditable.properties.lat.type": "number",
	"definitions.SpotEditable.properties.lon.example": 10.58349,
	"definitions.SpotEditable.properties.lon.type": "number",
	"definitions.SpotEditable.properties.picture.example": "\u003cBASE_64_ENCODED_STRING\u003e",
	"definitions.SpotEditable.properties.picture.type": "string",
	"definitions.SpotEditable.properties.time_zone.example": "Berlin",
	"definitions.SpotEditable.properties.time_zone.type": "string",
	"definitions.SpotEditable.properties.title.example": "Beautiful place out in the country",
	"definitions.SpotEditable.properties.title.type": "string",
	"definitions.Subscription.properties.created_at.format": "date-time",
	"definitions.Subscription.properties.created_at.type": "string",
	"definitions.Subscription.properties.id.example": 23950552,
	"definitions.Subscription.properties.id.type": "integer",
	"definitions.Subscription.properties.map.$ref": "#/definitions/Map",
	"definitions.Subscription.properties.updated_at.format": "date-time",
	"definitions.Subscription.properties.updated_at.type": "string",
	"definitions.Subscription.properties.user.$ref": "#/definitions/User",
	"definitions.Subscription.properties.user_id.example": 852002,
	"definitions.Subscription.properties.user_id.type": "integer",
	"definitions.User.properties.about.example": "The comedian",
	"definitions.User.properties.about.type": "string",
	"definitions.User.properties.counts.properties.maps.example": 24,
	"definitions.User.properties.counts.properties.maps.type": "integer",
	"definitions.User.properties.header_picture.example": "https://...",
	"definitions.User.properties.header_picture.type": "string",
	"definitions.User.properties.id.example": 5829035,
	"definitions.User.properties.id.type": "integer",
	"definitions.User.properties.location.example": "Little Rock, Arkansas",
	"definitions.User.properties.location.type": "string",
	"definitions.User.properties.name.example": "Bill Hicks",
	"definitions.User.properties.name.type": "string",
	"definitions.User.properties.picture_url.example": "https://...",
	"definitions.User.properties.picture_url.type": "string",
	"definitions.User.properties.screen_name.example": "billhicks",
	"definitions.User.properties.screen_name.type": "string",
	"definitions.User.properties.url.example": "http://www.billhicks.com",
	"definitions.User.properties.url.type": "string",
	"definitions.UserAuthentication.properties.email.example": "a@b.com",
	"definitions.UserAuthentication.properties.email.type": "string",
	"definitions.UserAuthentication.properties.password.example": "••••••••",
	"definitions.UserAuthentication.properties.password.type": "string",
	"definitions.UserEditable.properties.about.example": "The comedian",
	"definitions.UserEditable.properties.about.type": "string",
	"definitions.UserEditable.properties.header.example": "\u003cBASE_64_ENCODED_STRING\u003e",
	"definitions.UserEditable.properties.header.type": "string",
	"definitions.UserEditable.properties.language.example": "en",
	"definitions.UserEditable.properties.language.type": "string",
	"definitions.UserEditable.properties.location.example": "Little Rock, Arkansas",
	"definitions.UserEditable.properties.location.type": "string",
	"definitions.UserEditable.properties.name.example": "Bill Hicks",
	"definitions.UserEditable.properties.name.type": "string",
	"definitions.UserEditable.properties.picture.example": "\u003cBASE_64_ENCODED_STRING\u003e",
	"definitions.UserEditable.properties.picture.type": "string",
	"definitions.UserEditable.properties.screen_name.example": "billhicks",
	"definitions.UserEditable.properties.screen_name.type": "string",
	"definitions.UserEditable.properties.time_zone.example": "Pacific Time (US \u0026 Canada)",
	"definitions.UserEditable.properties.time_zone.type": "string",
	"definitions.UserEditable.properties.url.example": "http://www.billhicks.com",
	"definitions.UserEditable.properties.url.type": "string",
	"definitions.UserFullProfile.allOf.length": 1,
	"definitions.UserFullProfile.allOf[0].$ref": "#/definitions/User",
	"definitions.UserFullProfile.properties.auth_token.example": "6g8as82h3kj23h2",
	"definitions.UserFullProfile.properties.auth_token.type": "string",
	"definitions.UserFullProfile.properties.language.example": "en",
	"definitions.UserFullProfile.properties.language.type": "string",
	"definitions.UserFullProfile.properties.time_zone.example": "Pacific Time (US \u0026 Canada)",
	"definitions.UserFullProfile.properties.time_zone.type": "string",
	"host": "uebermaps.com",
	"info.contact.name": "uebermaps API Team",
	"info.description": "Enable people to store spots on public and private maps",
	"info.termsOfService": "https://uebermaps.com/terms/",
	"info.title": "uebermaps API endpoints",
	"info.version": "2.0",
	"info.x-apisguru-categories.length": 1,
	"info.x-apisguru-categories[0]": "location",
	"info.x-logo.url": "https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_738299914506113024_oUd7NREW_400x400.jpg",
	"info.x-origin.length": 1,
	"info.x-origin[0].format": "swagger",
	"info.x-origin[0].url": "https://uebermaps.com/api/v2/apidocs",
	"info.x-origin[0].version": "2.0",
	"info.x-preferred": true,
	"info.x-providerName": "uebermaps.com",
	"paths./account.patch.description": "Update account. Wrap map parameters in [user].",
	"paths./account.patch.parameters.length": 1,
	"paths./account.patch.parameters[0].description": "user attributes",
	"paths./account.patch.parameters[0].in": "body",
	"paths./account.patch.parameters[0].name": "user",
	"paths./account.patch.parameters[0].required": false,
	"paths./account.patch.parameters[0].schema.$ref": "#/definitions/UserEditable",
	"paths./account.patch.responses.200.description": "Contains user data.",
	"paths./account.patch.responses.200.schema.$ref": "#/definitions/User",
	"paths./account.patch.summary": "Update account",
	"paths./account.patch.tags.length": 1,
	"paths./account.patch.tags[0]": "Account",
	"paths./attachments/{id}.delete.description": "Delete attachment.",
	"paths./attachments/{id}.delete.parameters.length": 1,
	"paths./attachments/{id}.delete.parameters[0].description": "Attachment id",
	"paths./attachments/{id}.delete.parameters[0].in": "path",
	"paths./attachments/{id}.delete.parameters[0].name": "id",
	"paths./attachments/{id}.delete.parameters[0].required": true,
	"paths./attachments/{id}.delete.parameters[0].type": "integer",
	"paths./attachments/{id}.delete.responses.200.description": "Contains deleted attachment.",
	"paths./attachments/{id}.delete.responses.200.schema.$ref": "#/definitions/Attachment",
	"paths./attachments/{id}.delete.summary": "Delete attachment",
	"paths./attachments/{id}.delete.tags.length": 1,
	"paths./attachments/{id}.delete.tags[0]": "Attachments",
	"paths./authentication.post.description": "Sign in user. Wrap authentication parameters in [user].",
	"paths./authentication.post.parameters.length": 1,
	"paths./authentication.post.parameters[0].description": "user authentication attributes",
	"paths./authentication.post.parameters[0].in": "body",
	"paths./authentication.post.parameters[0].name": "user",
	"paths./authentication.post.parameters[0].required": true,
	"paths./authentication.post.parameters[0].schema.$ref": "#/definitions/UserAuthentication",
	"paths./authentication.post.responses.200.description": "Contains user data including authentication token for subsequent requests",
	"paths./authentication.post.responses.200.schema.$ref": "#/definitions/UserFullProfile",
	"paths./authentication.post.summary": "Sign in user",
	"paths./authentication.post.tags.length": 1,
	"paths./authentication.post.tags[0]": "Authentication",
	"paths./collaborator_invitations.get.description": "List your collaborator invitations.",
	"paths./collaborator_invitations.get.responses.200.description": "Contains list of collaborator invitations.",
	"paths./collaborator_invitations.get.responses.200.schema.items.$ref": "#/definitions/CollaboratorInvitation",
	"paths./collaborator_invitations.get.responses.200.schema.type": "array",
	"paths./collaborator_invitations.get.summary": "List your collaborator invitations",
	"paths./collaborator_invitations.get.tags.length": 1,
	"paths./collaborator_invitations.get.tags[0]": "CollaboratorInvitations",
	"paths./collaborator_invitations.post.description": "Invite user to collaborate on map.",
	"paths./collaborator_invitations.post.parameters.length": 1,
	"paths./collaborator_invitations.post.parameters[0].description": "Supply map_id and either a comma separated list of user_ids or emails. Optionally you can provide a 'is_admin' parameter with 'true' or 'false' to give the invited users admin privileges.",
	"paths./collaborator_invitations.post.parameters[0].in": "body",
	"paths./collaborator_invitations.post.parameters[0].name": "body",
	"paths./collaborator_invitations.post.parameters[0].schema.$ref": "#/definitions/CollaboratorInvitationCreate",
	"paths./collaborator_invitations.post.responses.200.description": "Contains collaborator invitation data.",
	"paths./collaborator_invitations.post.responses.200.schema.$ref": "#/definitions/CollaboratorInvitation",
	"paths./collaborator_invitations.post.summary": "Invite user to collaborate on map",
	"paths./collaborator_invitations.post.tags.length": 1,
	"paths./collaborator_invitations.post.tags[0]": "CollaboratorInvitations",
	"paths./collaborator_invitations/{id}.delete.description": "Delete collaborator invitation.",
	"paths./collaborator_invitations/{id}.delete.parameters.length": 1,
	"paths./collaborator_invitations/{id}.delete.parameters[0].description": "Collaborator invitation id",
	"paths./collaborator_invitations/{id}.delete.parameters[0].in": "path",
	"paths./collaborator_invitations/{id}.delete.parameters[0].name": "id",
	"paths./collaborator_invitations/{id}.delete.parameters[0].required": true,
	"paths./collaborator_invitations/{id}.delete.parameters[0].type": "integer",
	"paths./collaborator_invitations/{id}.delete.responses.200.description": "Contains deleted collaborator invitation.",
	"paths./collaborator_invitations/{id}.delete.responses.200.schema.$ref": "#/definitions/CollaboratorInvitation",
	"paths./collaborator_invitations/{id}.delete.summary": "Delete collaborator invitation",
	"paths./collaborator_invitations/{id}.delete.tags.length": 1,
	"paths./collaborator_invitations/{id}.delete.tags[0]": "CollaboratorInvitations",
	"paths./collaborator_invitations/{id}.get.description": "Show collaborator invitation",
	"paths./collaborator_invitations/{id}.get.parameters.length": 1,
	"paths./collaborator_invitations/{id}.get.parameters[0].description": "Collaborator invitation id",
	"paths./collaborator_invitations/{id}.get.parameters[0].in": "path",
	"paths./collaborator_invitations/{id}.get.parameters[0].name": "id",
	"paths./collaborator_invitations/{id}.get.parameters[0].required": true,
	"paths./collaborator_invitations/{id}.get.parameters[0].type": "integer",
	"paths./collaborator_invitations/{id}.get.responses.200.description": "Contains collaborator invitation data.",
	"paths./collaborator_invitations/{id}.get.responses.200.schema.$ref": "#/definitions/CollaboratorInvitation",
	"paths./collaborator_invitations/{id}.get.summary": "Show collaborator invitation",
	"paths./collaborator_invitations/{id}.get.tags.length": 1,
	"paths./collaborator_invitations/{id}.get.tags[0]": "CollaboratorInvitations",
	"paths./collaborator_invitations/{id}.patch.description": "Accept collaborator invitation.",
	"paths./collaborator_invitations/{id}.patch.parameters.length": 1,
	"paths./collaborator_invitations/{id}.patch.parameters[0].description": "Collaborator invitation id",
	"paths./collaborator_invitations/{id}.patch.parameters[0].in": "path",
	"paths./collaborator_invitations/{id}.patch.parameters[0].name": "id",
	"paths./collaborator_invitations/{id}.patch.parameters[0].required": true,
	"paths./collaborator_invitations/{id}.patch.parameters[0].type": "integer",
	"paths./collaborator_invitations/{id}.patch.responses.200.description": "Contains collaborator invitation data.",
	"paths./collaborator_invitations/{id}.patch.responses.200.schema.$ref": "#/definitions/CollaboratorInvitation",
	"paths./collaborator_invitations/{id}.patch.summary": "Accept collaborator invitation.",
	"paths./collaborator_invitations/{id}.patch.tags.length": 1,
	"paths./collaborator_invitations/{id}.patch.tags[0]": "CollaboratorInvitations",
	"paths./comments/{id}.delete.description": "Delete comment.",
	"paths./comments/{id}.delete.parameters.length": 1,
	"paths./comments/{id}.delete.parameters[0].description": "Comment id",
	"paths./comments/{id}.delete.parameters[0].in": "path",
	"paths./comments/{id}.delete.parameters[0].name": "id",
	"paths./comments/{id}.delete.parameters[0].required": true,
	"paths./comments/{id}.delete.parameters[0].type": "integer",
	"paths./comments/{id}.delete.responses.200.description": "Contains deleted comment.",
	"paths./comments/{id}.delete.responses.200.schema.$ref": "#/definitions/Comment",
	"paths./comments/{id}.delete.summary": "Delete comment",
	"paths./comments/{id}.delete.tags.length": 1,
	"paths./comments/{id}.delete.tags[0]": "Comments",
	"paths./comments/{id}.patch.description": "Update comment. Wrap comment parameters in [comment].",
	"paths./comments/{id}.patch.parameters.length": 2,
	"paths./comments/{id}.patch.parameters[0].description": "Comment id",
	"paths./comments/{id}.patch.parameters[0].in": "path",
	"paths./comments/{id}.patch.parameters[0].name": "id",
	"paths./comments/{id}.patch.parameters[0].required": true,
	"paths./comments/{id}.patch.parameters[0].type": "integer",
	"paths./comments/{id}.patch.parameters[1].description": "Comment attributes",
	"paths./comments/{id}.patch.parameters[1].in": "body",
	"paths./comments/{id}.patch.parameters[1].name": "comment",
	"paths./comments/{id}.patch.parameters[1].required": false,
	"paths./comments/{id}.patch.parameters[1].schema.$ref": "#/definitions/CommentEditable",
	"paths./comments/{id}.patch.responses.200.description": "Contains comment data",
	"paths./comments/{id}.patch.responses.200.schema.$ref": "#/definitions/Comment",
	"paths./comments/{id}.patch.summary": "Update comment",
	"paths./comments/{id}.patch.tags.length": 1,
	"paths./comments/{id}.patch.tags[0]": "Comments",
	"paths./events.get.description": "List your own events.",
	"paths./events.get.parameters.length": 3,
	"paths./events.get.parameters[0].description": "Begin of time range of event (ISO 8601 date format).",
	"paths./events.get.parameters[0].in": "query",
	"paths./events.get.parameters[0].name": "timeframe_start",
	"paths./events.get.parameters[0].required": false,
	"paths./events.get.parameters[0].type": "string",
	"paths./events.get.parameters[1].description": "End of time range of event (ISO 8601 date format).",
	"paths./events.get.parameters[1].in": "query",
	"paths./events.get.parameters[1].name": "timeframe_end",
	"paths./events.get.parameters[1].required": false,
	"paths./events.get.parameters[1].type": "string",
	"paths./events.get.parameters[2].description": "To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within 'Hamburg, St. Pauli':                                                             bounds[sw_lat]=53.54831449741324                                                             bounds[sw_lon]=9.943227767944336                                                             bounds[ne_lat]=53.5571103674878                                                             bounds[ne_lon]=9.9776029586792",
	"paths./events.get.parameters[2].in": "query",
	"paths./events.get.parameters[2].name": "bounds",
	"paths./events.get.parameters[2].required": false,
	"paths./events.get.parameters[2].type": "string",
	"paths./events.get.responses.200.description": "Contains list of events.",
	"paths./events.get.responses.200.schema.items.$ref": "#/definitions/Event",
	"paths./events.get.responses.200.schema.type": "array",
	"paths./events.get.summary": "List your own events",
	"paths./events.get.tags.length": 1,
	"paths./events.get.tags[0]": "Events",
	"paths./events/{id}.delete.description": "Delete event.",
	"paths./events/{id}.delete.parameters.length": 1,
	"paths./events/{id}.delete.parameters[0].description": "Event id",
	"paths./events/{id}.delete.parameters[0].in": "path",
	"paths./events/{id}.delete.parameters[0].name": "id",
	"paths./events/{id}.delete.parameters[0].required": true,
	"paths./events/{id}.delete.parameters[0].type": "integer",
	"paths./events/{id}.delete.responses.200.description": "Contains deleted event.",
	"paths./events/{id}.delete.responses.200.schema.$ref": "#/definitions/Event",
	"paths./events/{id}.delete.summary": "Delete event",
	"paths./events/{id}.delete.tags.length": 1,
	"paths./events/{id}.delete.tags[0]": "Events",
	"paths./events/{id}.get.description": "Get basic information about an event",
	"paths./events/{id}.get.parameters.length": 1,
	"paths./events/{id}.get.parameters[0].description": "Id of event",
	"paths./events/{id}.get.parameters[0].in": "path",
	"paths./events/{id}.get.parameters[0].name": "id",
	"paths./events/{id}.get.parameters[0].required": true,
	"paths./events/{id}.get.parameters[0].type": "integer",
	"paths./events/{id}.get.responses.200.description": "Contains event data.",
	"paths./events/{id}.get.responses.200.schema.$ref": "#/definitions/Event",
	"paths./events/{id}.get.summary": "Get event",
	"paths./events/{id}.get.tags.length": 1,
	"paths./events/{id}.get.tags[0]": "Events",
	"paths./events/{id}.patch.description": "Update event. Wrap event parameters in [event].",
	"paths./events/{id}.patch.parameters.length": 2,
	"paths./events/{id}.patch.parameters[0].description": "Event id",
	"paths./events/{id}.patch.parameters[0].in": "path",
	"paths./events/{id}.patch.parameters[0].name": "id",
	"paths./events/{id}.patch.parameters[0].required": true,
	"paths./events/{id}.patch.parameters[0].type": "integer",
	"paths./events/{id}.patch.parameters[1].description": "Event attributes",
	"paths./events/{id}.patch.parameters[1].in": "body",
	"paths./events/{id}.patch.parameters[1].name": "event",
	"paths./events/{id}.patch.parameters[1].required": false,
	"paths./events/{id}.patch.parameters[1].schema.$ref": "#/definitions/EventEditable",
	"paths./events/{id}.patch.responses.200.description": "Contains map data, map settings and your relation to this map",
	"paths./events/{id}.patch.responses.200.schema.$ref": "#/definitions/Map",
	"paths./events/{id}.patch.summary": "Update event",
	"paths./events/{id}.patch.tags.length": 1,
	"paths./events/{id}.patch.tags[0]": "Events",
	"paths./maps.get.description": "List your own maps.",
	"paths./maps.get.responses.200.description": "Contains list of maps.",
	"paths./maps.get.responses.200.schema.items.$ref": "#/definitions/Map",
	"paths./maps.get.responses.200.schema.type": "array",
	"paths./maps.get.summary": "List your own maps",
	"paths./maps.get.tags.length": 1,
	"paths./maps.get.tags[0]": "Maps",
	"paths./maps.post.description": "Create map. Wrap map parameters in [map]. To add a map header picture pass a base64 encoded string to [map][picture].",
	"paths./maps.post.parameters.length": 1,
	"paths./maps.post.parameters[0].description": "map attributes",
	"paths./maps.post.parameters[0].in": "body",
	"paths./maps.post.parameters[0].name": "map",
	"paths./maps.post.parameters[0].required": false,
	"paths./maps.post.parameters[0].schema.$ref": "#/definitions/MapEditable",
	"paths./maps.post.responses.200.description": "Contains map data, map settings and your relation to this map",
	"paths./maps.post.responses.200.schema.$ref": "#/definitions/Map",
	"paths./maps.post.summary": "Create map",
	"paths./maps.post.tags.length": 1,
	"paths./maps.post.tags[0]": "Maps",
	"paths./maps/search.get.description": "Search maps",
	"paths./maps/search.get.parameters.length": 4,
	"paths./maps/search.get.parameters[0].description": "Query",
	"paths./maps/search.get.parameters[0].in": "query",
	"paths./maps/search.get.parameters[0].name": "q",
	"paths./maps/search.get.parameters[0].type": "string",
	"paths./maps/search.get.parameters[1].description": "Distance. Diameter of search radius in meter (default: 2000 meter)",
	"paths./maps/search.get.parameters[1].in": "query",
	"paths./maps/search.get.parameters[1].name": "d",
	"paths./maps/search.get.parameters[1].type": "integer",
	"paths./maps/search.get.parameters[2].description": "Latitude for search radius (default distance: 2000 meter)",
	"paths./maps/search.get.parameters[2].in": "query",
	"paths./maps/search.get.parameters[2].name": "lat",
	"paths./maps/search.get.parameters[2].type": "number",
	"paths./maps/search.get.parameters[3].description": "Longitude for search radius (default distance: 2000 meter)",
	"paths./maps/search.get.parameters[3].in": "query",
	"paths./maps/search.get.parameters[3].name": "lon",
	"paths./maps/search.get.parameters[3].type": "number",
	"paths./maps/search.get.responses.200.description": "Contains map data.",
	"paths./maps/search.get.responses.200.schema.$ref": "#/definitions/Map",
	"paths./maps/search.get.summary": "Search maps",
	"paths./maps/search.get.tags.length": 1,
	"paths./maps/search.get.tags[0]": "Search",
	"paths./maps/{id}.delete.description": "Delete map.",
	"paths./maps/{id}.delete.parameters.length": 1,
	"paths./maps/{id}.delete.parameters[0].description": "map id",
	"paths./maps/{id}.delete.parameters[0].in": "path",
	"paths./maps/{id}.delete.parameters[0].name": "id",
	"paths./maps/{id}.delete.parameters[0].required": true,
	"paths./maps/{id}.delete.parameters[0].type": "integer",
	"paths./maps/{id}.delete.responses.200.description": "Contains deleted map.",
	"paths./maps/{id}.delete.responses.200.schema.$ref": "#/definitions/Map",
	"paths./maps/{id}.delete.summary": "Delete map",
	"paths./maps/{id}.delete.tags.length": 1,
	"paths./maps/{id}.delete.tags[0]": "Maps",
	"paths./maps/{id}.get.description": "Get basic information about a map",
	"paths./maps/{id}.get.parameters.length": 1,
	"paths./maps/{id}.get.parameters[0].description": "Id of map",
	"paths./maps/{id}.get.parameters[0].in": "path",
	"paths./maps/{id}.get.parameters[0].name": "id",
	"paths./maps/{id}.get.parameters[0].required": true,
	"paths./maps/{id}.get.parameters[0].type": "integer",
	"paths./maps/{id}.get.responses.200.description": "Contains map data, map settings and your relation to this map",
	"paths./maps/{id}.get.responses.200.schema.$ref": "#/definitions/MapWithRelation",
	"paths./maps/{id}.get.summary": "Get map",
	"paths./maps/{id}.get.tags.length": 1,
	"paths./maps/{id}.get.tags[0]": "Maps",
	"paths./maps/{id}.patch.description": "Update map. Wrap map parameters in [map]. To update the map header picture pass a base64 encoded string to [map][picture].",
	"paths./maps/{id}.patch.parameters.length": 2,
	"paths./maps/{id}.patch.parameters[0].description": "map id",
	"paths./maps/{id}.patch.parameters[0].in": "path",
	"paths./maps/{id}.patch.parameters[0].name": "id",
	"paths./maps/{id}.patch.parameters[0].required": true,
	"paths./maps/{id}.patch.parameters[0].type": "integer",
	"paths./maps/{id}.patch.parameters[1].description": "map settings attributes",
	"paths./maps/{id}.patch.parameters[1].in": "body",
	"paths./maps/{id}.patch.parameters[1].name": "map",
	"paths./maps/{id}.patch.parameters[1].required": false,
	"paths./maps/{id}.patch.parameters[1].schema.$ref": "#/definitions/MapEditable",
	"paths./maps/{id}.patch.responses.200.description": "Contains map data, map settings and your relation to this map",
	"paths./maps/{id}.patch.responses.200.schema.$ref": "#/definitions/Map",
	"paths./maps/{id}.patch.summary": "Update map",
	"paths./maps/{id}.patch.tags.length": 1,
	"paths./maps/{id}.patch.tags[0]": "Maps",
	"paths./maps/{id}/attachments.get.description": "List attachments for a given map.",
	"paths./maps/{id}/attachments.get.parameters.length": 1,
	"paths./maps/{id}/attachments.get.parameters[0].description": "Map id",
	"paths./maps/{id}/attachments.get.parameters[0].in": "path",
	"paths./maps/{id}/attachments.get.parameters[0].name": "id",
	"paths./maps/{id}/attachments.get.parameters[0].required": true,
	"paths./maps/{id}/attachments.get.parameters[0].type": "integer",
	"paths./maps/{id}/attachments.get.responses.200.description": "Contains list of attachments.",
	"paths./maps/{id}/attachments.get.responses.200.schema.items.$ref": "#/definitions/Attachment",
	"paths./maps/{id}/attachments.get.responses.200.schema.type": "array",
	"paths./maps/{id}/attachments.get.summary": "List attachments for a given map",
	"paths./maps/{id}/attachments.get.tags.length": 1,
	"paths./maps/{id}/attachments.get.tags[0]": "Attachments",
	"paths./maps/{id}/attachments.post.description": "Upload map attachment. Wrap attachment parameters in [attachment]",
	"paths./maps/{id}/attachments.post.parameters.length": 2,
	"paths./maps/{id}/attachments.post.parameters[0].description": "Map id",
	"paths./maps/{id}/attachments.post.parameters[0].in": "path",
	"paths./maps/{id}/attachments.post.parameters[0].name": "id",
	"paths./maps/{id}/attachments.post.parameters[0].required": true,
	"paths./maps/{id}/attachments.post.parameters[0].type": "integer",
	"paths./maps/{id}/attachments.post.parameters[1].description": "Base64 encoded image",
	"paths./maps/{id}/attachments.post.parameters[1].in": "body",
	"paths./maps/{id}/attachments.post.parameters[1].name": "image",
	"paths./maps/{id}/attachments.post.parameters[1].required": true,
	"paths./maps/{id}/attachments.post.parameters[1].schema.type": "string",
	"paths./maps/{id}/attachments.post.responses.200.description": "Contains attachment data",
	"paths./maps/{id}/attachments.post.responses.200.schema.$ref": "#/definitions/Attachment",
	"paths./maps/{id}/attachments.post.summary": "Upload map attachment",
	"paths./maps/{id}/attachments.post.tags.length": 1,
	"paths./maps/{id}/attachments.post.tags[0]": "Attachments",
	"paths./maps/{id}/collaborators/.get.description": "List collaborators of a map.",
	"paths./maps/{id}/collaborators/.get.parameters.length": 1,
	"paths./maps/{id}/collaborators/.get.parameters[0].description": "Map id",
	"paths./maps/{id}/collaborators/.get.parameters[0].in": "path",
	"paths./maps/{id}/collaborators/.get.parameters[0].name": "id",
	"paths./maps/{id}/collaborators/.get.parameters[0].required": true,
	"paths./maps/{id}/collaborators/.get.parameters[0].type": "integer",
	"paths./maps/{id}/collaborators/.get.responses.200.description": "Contains list of collaborators.",
	"paths./maps/{id}/collaborators/.get.responses.200.schema.items.$ref": "#/definitions/Collaborator",
	"paths./maps/{id}/collaborators/.get.responses.200.schema.type": "array",
	"paths./maps/{id}/collaborators/.get.summary": "List collaborators of a map",
	"paths./maps/{id}/collaborators/.get.tags.length": 1,
	"paths./maps/{id}/collaborators/.get.tags[0]": "Collaborators",
	"paths./maps/{id}/collaborators/{user_id}.delete.description": "Delete collaboration.",
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters.length": 2,
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[0].description": "map id",
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[0].in": "path",
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[0].name": "id",
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[0].required": true,
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[0].type": "integer",
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[1].description": "user id",
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[1].in": "path",
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[1].name": "user_id",
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[1].required": true,
	"paths./maps/{id}/collaborators/{user_id}.delete.parameters[1].type": "integer",
	"paths./maps/{id}/collaborators/{user_id}.delete.responses.200.description": "Contains deleted collaborator.",
	"paths./maps/{id}/collaborators/{user_id}.delete.responses.200.schema.$ref": "#/definitions/Collaborator",
	"paths./maps/{id}/collaborators/{user_id}.delete.summary": "Delete collaboration",
	"paths./maps/{id}/collaborators/{user_id}.delete.tags.length": 1,
	"paths./maps/{id}/collaborators/{user_id}.delete.tags[0]": "Collaborators",
	"paths./maps/{id}/collaborators/{user_id}.patch.description": "Update collaborator. Wrap collaborator parameters in [collaborator]",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters.length": 3,
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[0].description": "map id",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[0].in": "path",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[0].name": "id",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[0].required": true,
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[0].type": "integer",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[1].description": "user id",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[1].in": "path",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[1].name": "user_id",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[1].required": true,
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[1].type": "integer",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[2].description": "collaborator attributes",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[2].in": "body",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[2].name": "collaborator",
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[2].required": false,
	"paths./maps/{id}/collaborators/{user_id}.patch.parameters[2].schema.$ref": "#/definitions/CollaboratorEditable",
	"paths./maps/{id}/collaborators/{user_id}.patch.responses.200.description": "Contains collaborator data",
	"paths./maps/{id}/collaborators/{user_id}.patch.responses.200.schema.$ref": "#/definitions/Collaborator",
	"paths./maps/{id}/collaborators/{user_id}.patch.summary": "Update collaborator",
	"paths./maps/{id}/collaborators/{user_id}.patch.tags.length": 1,
	"paths./maps/{id}/collaborators/{user_id}.patch.tags[0]": "Collaborators",
	"paths./maps/{id}/comments.get.description": "List comments for a given map.",
	"paths./maps/{id}/comments.get.parameters.length": 1,
	"paths./maps/{id}/comments.get.parameters[0].description": "Id of map",
	"paths./maps/{id}/comments.get.parameters[0].in": "path",
	"paths./maps/{id}/comments.get.parameters[0].name": "id",
	"paths./maps/{id}/comments.get.parameters[0].required": true,
	"paths./maps/{id}/comments.get.parameters[0].type": "integer",
	"paths./maps/{id}/comments.get.responses.200.description": "Contains list of comments.",
	"paths./maps/{id}/comments.get.responses.200.schema.items.$ref": "#/definitions/Comment",
	"paths./maps/{id}/comments.get.responses.200.schema.type": "array",
	"paths./maps/{id}/comments.get.summary": "List comments for a given map",
	"paths./maps/{id}/comments.get.tags.length": 1,
	"paths./maps/{id}/comments.get.tags[0]": "Comments",
	"paths./maps/{id}/comments.post.description": "Create map comment. Wrap comment parameters in [comment].",
	"paths./maps/{id}/comments.post.parameters.length": 2,
	"paths./maps/{id}/comments.post.parameters[0].description": "map id",
	"paths./maps/{id}/comments.post.parameters[0].in": "path",
	"paths./maps/{id}/comments.post.parameters[0].name": "id",
	"paths./maps/{id}/comments.post.parameters[0].required": true,
	"paths./maps/{id}/comments.post.parameters[0].type": "integer",
	"paths./maps/{id}/comments.post.parameters[1].description": "comment attributes",
	"paths./maps/{id}/comments.post.parameters[1].in": "body",
	"paths./maps/{id}/comments.post.parameters[1].name": "comment",
	"paths./maps/{id}/comments.post.parameters[1].required": false,
	"paths./maps/{id}/comments.post.parameters[1].schema.$ref": "#/definitions/CommentEditable",
	"paths./maps/{id}/comments.post.responses.200.description": "Contains comment data",
	"paths./maps/{id}/comments.post.responses.200.schema.$ref": "#/definitions/Comment",
	"paths./maps/{id}/comments.post.summary": "Create map comment",
	"paths./maps/{id}/comments.post.tags.length": 1,
	"paths./maps/{id}/comments.post.tags[0]": "Comments",
	"paths./maps/{id}/respots.get.description": "List respots of a map.",
	"paths./maps/{id}/respots.get.parameters.length": 1,
	"paths./maps/{id}/respots.get.parameters[0].description": "Map Id",
	"paths./maps/{id}/respots.get.parameters[0].in": "path",
	"paths./maps/{id}/respots.get.parameters[0].name": "id",
	"paths./maps/{id}/respots.get.parameters[0].required": true,
	"paths./maps/{id}/respots.get.parameters[0].type": "integer",
	"paths./maps/{id}/respots.get.responses.200.description": "Contains list of respots.",
	"paths./maps/{id}/respots.get.responses.200.schema.items.$ref": "#/definitions/Respot",
	"paths./maps/{id}/respots.get.responses.200.schema.type": "array",
	"paths./maps/{id}/respots.get.summary": "List respots of a map",
	"paths./maps/{id}/respots.get.tags.length": 1,
	"paths./maps/{id}/respots.get.tags[0]": "Respots",
	"paths./maps/{id}/spots.get.description": "List spots for a given map.",
	"paths./maps/{id}/spots.get.parameters.length": 2,
	"paths./maps/{id}/spots.get.parameters[0].description": "Id of map",
	"paths./maps/{id}/spots.get.parameters[0].in": "path",
	"paths./maps/{id}/spots.get.parameters[0].name": "id",
	"paths./maps/{id}/spots.get.parameters[0].required": true,
	"paths./maps/{id}/spots.get.parameters[0].type": "integer",
	"paths./maps/{id}/spots.get.parameters[1].description": "Order of spots",
	"paths./maps/{id}/spots.get.parameters[1].enum.length": 6,
	"paths./maps/{id}/spots.get.parameters[1].enum[0]": "created_at_asc",
	"paths./maps/{id}/spots.get.parameters[1].enum[1]": "created_at_desc",
	"paths./maps/{id}/spots.get.parameters[1].enum[2]": "updated_at_asc",
	"paths./maps/{id}/spots.get.parameters[1].enum[3]": "updated_at_desc",
	"paths./maps/{id}/spots.get.parameters[1].enum[4]": "title_asc",
	"paths./maps/{id}/spots.get.parameters[1].enum[5]": "title_desc",
	"paths./maps/{id}/spots.get.parameters[1].in": "query",
	"paths./maps/{id}/spots.get.parameters[1].name": "order",
	"paths./maps/{id}/spots.get.parameters[1].type": "string",
	"paths./maps/{id}/spots.get.responses.200.description": "Contains list of spots.",
	"paths./maps/{id}/spots.get.responses.200.schema.items.$ref": "#/definitions/Spot",
	"paths./maps/{id}/spots.get.responses.200.schema.type": "array",
	"paths./maps/{id}/spots.get.summary": "List spots for a given map",
	"paths./maps/{id}/spots.get.tags.length": 1,
	"paths./maps/{id}/spots.get.tags[0]": "Spots",
	"paths./maps/{id}/spots.post.description": "Create spot. Wrap parameters in [spot]. To add a spot picture pass a base64 encoded string to [spot][picture].",
	"paths./maps/{id}/spots.post.parameters.length": 2,
	"paths./maps/{id}/spots.post.parameters[0].description": "Id of map",
	"paths./maps/{id}/spots.post.parameters[0].in": "path",
	"paths./maps/{id}/spots.post.parameters[0].name": "id",
	"paths./maps/{id}/spots.post.parameters[0].required": true,
	"paths./maps/{id}/spots.post.parameters[0].type": "integer",
	"paths./maps/{id}/spots.post.parameters[1].description": "spot attributes",
	"paths./maps/{id}/spots.post.parameters[1].in": "body",
	"paths./maps/{id}/spots.post.parameters[1].name": "spot",
	"paths./maps/{id}/spots.post.parameters[1].required": true,
	"paths./maps/{id}/spots.post.parameters[1].schema.$ref": "#/definitions/SpotEditable",
	"paths./maps/{id}/spots.post.responses.200.description": "Contains spot data",
	"paths./maps/{id}/spots.post.responses.200.schema.$ref": "#/definitions/Spot",
	"paths./maps/{id}/spots.post.summary": "Create spot",
	"paths./maps/{id}/spots.post.tags.length": 1,
	"paths./maps/{id}/spots.post.tags[0]": "Spots",
	"paths./maps/{id}/subscriptions.delete.description": "Unsubscribe from map.",
	"paths./maps/{id}/subscriptions.delete.parameters.length": 1,
	"paths./maps/{id}/subscriptions.delete.parameters[0].description": "map id",
	"paths./maps/{id}/subscriptions.delete.parameters[0].in": "path",
	"paths./maps/{id}/subscriptions.delete.parameters[0].name": "id",
	"paths./maps/{id}/subscriptions.delete.parameters[0].required": true,
	"paths./maps/{id}/subscriptions.delete.parameters[0].type": "integer",
	"paths./maps/{id}/subscriptions.delete.responses.200.description": "Contains deleted subscription.",
	"paths./maps/{id}/subscriptions.delete.responses.200.schema.$ref": "#/definitions/Subscription",
	"paths./maps/{id}/subscriptions.delete.summary": "Unsubscribe from map",
	"paths./maps/{id}/subscriptions.delete.tags.length": 1,
	"paths./maps/{id}/subscriptions.delete.tags[0]": "Subscriptions",
	"paths./maps/{id}/subscriptions.get.description": "List subscriptions for a given map.",
	"paths./maps/{id}/subscriptions.get.parameters.length": 1,
	"paths./maps/{id}/subscriptions.get.parameters[0].description": "Id of map",
	"paths./maps/{id}/subscriptions.get.parameters[0].in": "path",
	"paths./maps/{id}/subscriptions.get.parameters[0].name": "id",
	"paths./maps/{id}/subscriptions.get.parameters[0].required": true,
	"paths./maps/{id}/subscriptions.get.parameters[0].type": "integer",
	"paths./maps/{id}/subscriptions.get.responses.200.description": "Contains list of subscriptions.",
	"paths./maps/{id}/subscriptions.get.responses.200.schema.items.$ref": "#/definitions/Subscription",
	"paths./maps/{id}/subscriptions.get.responses.200.schema.type": "array",
	"paths./maps/{id}/subscriptions.get.summary": "List subscriptions for a given map",
	"paths./maps/{id}/subscriptions.get.tags.length": 1,
	"paths./maps/{id}/subscriptions.get.tags[0]": "Subscriptions",
	"paths./maps/{map_id}/spots/{id}.get.description": "Get basic information about a spot",
	"paths./maps/{map_id}/spots/{id}.get.parameters.length": 2,
	"paths./maps/{map_id}/spots/{id}.get.parameters[0].description": "Id of spot",
	"paths./maps/{map_id}/spots/{id}.get.parameters[0].in": "path",
	"paths./maps/{map_id}/spots/{id}.get.parameters[0].name": "id",
	"paths./maps/{map_id}/spots/{id}.get.parameters[0].required": true,
	"paths./maps/{map_id}/spots/{id}.get.parameters[0].type": "integer",
	"paths./maps/{map_id}/spots/{id}.get.parameters[1].description": "Id of map",
	"paths./maps/{map_id}/spots/{id}.get.parameters[1].in": "path",
	"paths./maps/{map_id}/spots/{id}.get.parameters[1].name": "map_id",
	"paths./maps/{map_id}/spots/{id}.get.parameters[1].required": true,
	"paths./maps/{map_id}/spots/{id}.get.parameters[1].type": "integer",
	"paths./maps/{map_id}/spots/{id}.get.responses.200.description": "Contains spot data",
	"paths./maps/{map_id}/spots/{id}.get.responses.200.schema.$ref": "#/definitions/Spot",
	"paths./maps/{map_id}/spots/{id}.get.summary": "Get spot",
	"paths./maps/{map_id}/spots/{id}.get.tags.length": 1,
	"paths./maps/{map_id}/spots/{id}.get.tags[0]": "Spots",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.description": "Delete respot from map by spot id.",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters.length": 2,
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[0].description": "Map Id",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[0].in": "path",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[0].name": "map_id",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[0].required": true,
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[0].type": "integer",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[1].description": "Spot Id",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[1].in": "path",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[1].name": "spot_id",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[1].required": true,
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.parameters[1].type": "integer",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.responses.200.description": "Contains deleted respot.",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.responses.200.schema.$ref": "#/definitions/Respot",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.summary": "Delete respot from map by spot id",
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.tags.length": 1,
	"paths./maps/{map_id}/spots/{spot_id}/respot.delete.tags[0]": "Respots",
	"paths./respot_maps.get.description": "List maps that user can respot to.",
	"paths./respot_maps.get.responses.200.description": "Contains list of maps.",
	"paths./respot_maps.get.responses.200.schema.items.$ref": "#/definitions/Map",
	"paths./respot_maps.get.responses.200.schema.type": "array",
	"paths./respot_maps.get.summary": "List maps that user can respot to",
	"paths./respot_maps.get.tags.length": 1,
	"paths./respot_maps.get.tags[0]": "Respots",
	"paths./respots/{id}.delete.description": "Delete respot.",
	"paths./respots/{id}.delete.parameters.length": 1,
	"paths./respots/{id}.delete.parameters[0].description": "Respot Id",
	"paths./respots/{id}.delete.parameters[0].in": "path",
	"paths./respots/{id}.delete.parameters[0].name": "id",
	"paths./respots/{id}.delete.parameters[0].required": true,
	"paths./respots/{id}.delete.parameters[0].type": "integer",
	"paths./respots/{id}.delete.responses.200.description": "Contains deleted respot.",
	"paths./respots/{id}.delete.responses.200.schema.$ref": "#/definitions/Respot",
	"paths./respots/{id}.delete.summary": "Delete respot",
	"paths./respots/{id}.delete.tags.length": 1,
	"paths./respots/{id}.delete.tags[0]": "Respots",
	"paths./respots/{id}.get.description": "Get basic information about a respot",
	"paths./respots/{id}.get.parameters.length": 1,
	"paths./respots/{id}.get.parameters[0].description": "Id of respot",
	"paths./respots/{id}.get.parameters[0].in": "path",
	"paths./respots/{id}.get.parameters[0].name": "id",
	"paths./respots/{id}.get.parameters[0].required": true,
	"paths./respots/{id}.get.parameters[0].type": "integer",
	"paths./respots/{id}.get.responses.200.description": "Contains respot data.",
	"paths./respots/{id}.get.responses.200.schema.$ref": "#/definitions/Respot",
	"paths./respots/{id}.get.summary": "Get respot",
	"paths./respots/{id}.get.tags.length": 1,
	"paths./respots/{id}.get.tags[0]": "Respots",
	"paths./share/map/{id}.get.description": "Get secret access token of an uebermap with access set to 'Secret link'. Pass the 'token' on every request you make to access this uebermap and its resources. F.e. token=1-x_gqu7eLBe3uKoAGAGXy",
	"paths./share/map/{id}.get.parameters.length": 1,
	"paths./share/map/{id}.get.parameters[0].description": "Id of map",
	"paths./share/map/{id}.get.parameters[0].in": "path",
	"paths./share/map/{id}.get.parameters[0].name": "id",
	"paths./share/map/{id}.get.parameters[0].required": true,
	"paths./share/map/{id}.get.parameters[0].type": "integer",
	"paths./share/map/{id}.get.responses.200.description": "Contains map data and a secret token to access this map.",
	"paths./share/map/{id}.get.responses.200.schema.$ref": "#/definitions/MapWithAuthToken",
	"paths./share/map/{id}.get.summary": "Get secret access token to share map",
	"paths./share/map/{id}.get.tags.length": 1,
	"paths./share/map/{id}.get.tags[0]": "Share",
	"paths./spots.get.description": "List your own spots.",
	"paths./spots.get.parameters.length": 1,
	"paths./spots.get.parameters[0].description": "Order of spots",
	"paths./spots.get.parameters[0].enum.length": 6,
	"paths./spots.get.parameters[0].enum[0]": "created_at_asc",
	"paths./spots.get.parameters[0].enum[1]": "created_at_desc",
	"paths./spots.get.parameters[0].enum[2]": "updated_at_asc",
	"paths./spots.get.parameters[0].enum[3]": "updated_at_desc",
	"paths./spots.get.parameters[0].enum[4]": "title_asc",
	"paths./spots.get.parameters[0].enum[5]": "title_desc",
	"paths./spots.get.parameters[0].in": "query",
	"paths./spots.get.parameters[0].name": "order",
	"paths./spots.get.parameters[0].type": "string",
	"paths./spots.get.responses.200.description": "Contains list of spots.",
	"paths./spots.get.responses.200.schema.items.$ref": "#/definitions/Spot",
	"paths./spots.get.responses.200.schema.type": "array",
	"paths./spots.get.summary": "List your own spots",
	"paths./spots.get.tags.length": 1,
	"paths./spots.get.tags[0]": "Spots",
	"paths./spots/search.get.description": "Search spots",
	"paths./spots/search.get.parameters.length": 4,
	"paths./spots/search.get.parameters[0].description": "Query",
	"paths./spots/search.get.parameters[0].in": "query",
	"paths./spots/search.get.parameters[0].name": "q",
	"paths./spots/search.get.parameters[0].type": "string",
	"paths./spots/search.get.parameters[1].description": "Distance. Diameter of search radius in meter (default: 2000 meter)",
	"paths./spots/search.get.parameters[1].in": "query",
	"paths./spots/search.get.parameters[1].name": "d",
	"paths./spots/search.get.parameters[1].type": "integer",
	"paths./spots/search.get.parameters[2].description": "Latitude for search radius (2 km)",
	"paths./spots/search.get.parameters[2].in": "query",
	"paths./spots/search.get.parameters[2].name": "lat",
	"paths./spots/search.get.parameters[2].type": "number",
	"paths./spots/search.get.parameters[3].description": "Longitude for search radius (2 km)",
	"paths./spots/search.get.parameters[3].in": "query",
	"paths./spots/search.get.parameters[3].name": "lon",
	"paths./spots/search.get.parameters[3].type": "number",
	"paths./spots/search.get.responses.200.description": "Contains spot data.",
	"paths./spots/search.get.responses.200.schema.$ref": "#/definitions/Spot",
	"paths./spots/search.get.summary": "Search spots",
	"paths./spots/search.get.tags.length": 1,
	"paths./spots/search.get.tags[0]": "Search",
	"paths./spots/{id}.delete.description": "Delete spot.",
	"paths./spots/{id}.delete.parameters.length": 1,
	"paths./spots/{id}.delete.parameters[0].description": "spot id",
	"paths./spots/{id}.delete.parameters[0].in": "path",
	"paths./spots/{id}.delete.parameters[0].name": "id",
	"paths./spots/{id}.delete.parameters[0].required": true,
	"paths./spots/{id}.delete.parameters[0].type": "integer",
	"paths./spots/{id}.delete.responses.200.description": "Contains deleted spot.",
	"paths./spots/{id}.delete.responses.200.schema.$ref": "#/definitions/Spot",
	"paths./spots/{id}.delete.summary": "Delete spot",
	"paths./spots/{id}.delete.tags.length": 1,
	"paths./spots/{id}.delete.tags[0]": "Spots",
	"paths./spots/{id}.patch.description": "Update spot. Wrap parameters in [spot]. To update the spot picture pass a base64 encoded string to [spot][picture].",
	"paths./spots/{id}.patch.parameters.length": 2,
	"paths./spots/{id}.patch.parameters[0].description": "spot id",
	"paths./spots/{id}.patch.parameters[0].in": "path",
	"paths./spots/{id}.patch.parameters[0].name": "id",
	"paths./spots/{id}.patch.parameters[0].required": true,
	"paths./spots/{id}.patch.parameters[0].type": "integer",
	"paths./spots/{id}.patch.parameters[1].description": "spot attributes",
	"paths./spots/{id}.patch.parameters[1].in": "body",
	"paths./spots/{id}.patch.parameters[1].name": "spot",
	"paths./spots/{id}.patch.parameters[1].required": false,
	"paths./spots/{id}.patch.parameters[1].schema.$ref": "#/definitions/SpotEditable",
	"paths./spots/{id}.patch.responses.200.description": "Contains spot data",
	"paths./spots/{id}.patch.responses.200.schema.$ref": "#/definitions/Spot",
	"paths./spots/{id}.patch.summary": "Update spot",
	"paths./spots/{id}.patch.tags.length": 1,
	"paths./spots/{id}.patch.tags[0]": "Spots",
	"paths./spots/{id}/attachments.get.description": "List attachments for a given spot.",
	"paths./spots/{id}/attachments.get.parameters.length": 1,
	"paths./spots/{id}/attachments.get.parameters[0].description": "Spot id",
	"paths./spots/{id}/attachments.get.parameters[0].in": "path",
	"paths./spots/{id}/attachments.get.parameters[0].name": "id",
	"paths./spots/{id}/attachments.get.parameters[0].required": true,
	"paths./spots/{id}/attachments.get.parameters[0].type": "integer",
	"paths./spots/{id}/attachments.get.responses.200.description": "Contains list of attachments.",
	"paths./spots/{id}/attachments.get.responses.200.schema.items.$ref": "#/definitions/Attachment",
	"paths./spots/{id}/attachments.get.responses.200.schema.type": "array",
	"paths./spots/{id}/attachments.get.summary": "List attachments for a given spot",
	"paths./spots/{id}/attachments.get.tags.length": 1,
	"paths./spots/{id}/attachments.get.tags[0]": "Attachments",
	"paths./spots/{id}/attachments.post.description": "Upload spot attachment. Wrap attachment parameters in [attachment]",
	"paths./spots/{id}/attachments.post.parameters.length": 2,
	"paths./spots/{id}/attachments.post.parameters[0].description": "Spot id",
	"paths./spots/{id}/attachments.post.parameters[0].in": "path",
	"paths./spots/{id}/attachments.post.parameters[0].name": "id",
	"paths./spots/{id}/attachments.post.parameters[0].required": true,
	"paths./spots/{id}/attachments.post.parameters[0].type": "integer",
	"paths./spots/{id}/attachments.post.parameters[1].description": "Base64 encoded image",
	"paths./spots/{id}/attachments.post.parameters[1].in": "body",
	"paths./spots/{id}/attachments.post.parameters[1].name": "image",
	"paths./spots/{id}/attachments.post.parameters[1].required": true,
	"paths./spots/{id}/attachments.post.parameters[1].schema.type": "string",
	"paths./spots/{id}/attachments.post.responses.200.description": "Contains attachment data",
	"paths./spots/{id}/attachments.post.responses.200.schema.$ref": "#/definitions/Attachment",
	"paths./spots/{id}/attachments.post.summary": "Upload spot attachment",
	"paths./spots/{id}/attachments.post.tags.length": 1,
	"paths./spots/{id}/attachments.post.tags[0]": "Attachments",
	"paths./spots/{id}/comments.get.description": "List comments for a given spot.",
	"paths./spots/{id}/comments.get.parameters.length": 1,
	"paths./spots/{id}/comments.get.parameters[0].description": "Id of spot",
	"paths./spots/{id}/comments.get.parameters[0].in": "path",
	"paths./spots/{id}/comments.get.parameters[0].name": "id",
	"paths./spots/{id}/comments.get.parameters[0].required": true,
	"paths./spots/{id}/comments.get.parameters[0].type": "integer",
	"paths./spots/{id}/comments.get.responses.200.description": "Contains list of comments.",
	"paths./spots/{id}/comments.get.responses.200.schema.items.$ref": "#/definitions/Comment",
	"paths./spots/{id}/comments.get.responses.200.schema.type": "array",
	"paths./spots/{id}/comments.get.summary": "List comments for a given spot",
	"paths./spots/{id}/comments.get.tags.length": 1,
	"paths./spots/{id}/comments.get.tags[0]": "Comments",
	"paths./spots/{id}/comments.post.description": "Create spot comment. Wrap comment parameters in [comment].",
	"paths./spots/{id}/comments.post.parameters.length": 2,
	"paths./spots/{id}/comments.post.parameters[0].description": "spot id",
	"paths./spots/{id}/comments.post.parameters[0].in": "path",
	"paths./spots/{id}/comments.post.parameters[0].name": "id",
	"paths./spots/{id}/comments.post.parameters[0].required": true,
	"paths./spots/{id}/comments.post.parameters[0].type": "integer",
	"paths./spots/{id}/comments.post.parameters[1].description": "comment attributes",
	"paths./spots/{id}/comments.post.parameters[1].in": "body",
	"paths./spots/{id}/comments.post.parameters[1].name": "comment",
	"paths./spots/{id}/comments.post.parameters[1].required": false,
	"paths./spots/{id}/comments.post.parameters[1].schema.$ref": "#/definitions/CommentEditable",
	"paths./spots/{id}/comments.post.responses.200.description": "Contains comment data",
	"paths./spots/{id}/comments.post.responses.200.schema.$ref": "#/definitions/Comment",
	"paths./spots/{id}/comments.post.summary": "Create spot comment",
	"paths./spots/{id}/comments.post.tags.length": 1,
	"paths./spots/{id}/comments.post.tags[0]": "Comments",
	"paths./spots/{id}/events.get.description": "List maps for a given spot.",
	"paths./spots/{id}/events.get.parameters.length": 4,
	"paths./spots/{id}/events.get.parameters[0].description": "Id of spot",
	"paths./spots/{id}/events.get.parameters[0].in": "path",
	"paths./spots/{id}/events.get.parameters[0].name": "id",
	"paths./spots/{id}/events.get.parameters[0].required": true,
	"paths./spots/{id}/events.get.parameters[0].type": "integer",
	"paths./spots/{id}/events.get.parameters[1].description": "Begin of time range of event (ISO 8601 date format).",
	"paths./spots/{id}/events.get.parameters[1].in": "query",
	"paths./spots/{id}/events.get.parameters[1].name": "timeframe_start",
	"paths./spots/{id}/events.get.parameters[1].required": false,
	"paths./spots/{id}/events.get.parameters[1].type": "string",
	"paths./spots/{id}/events.get.parameters[2].description": "End of time range of event (ISO 8601 date format).",
	"paths./spots/{id}/events.get.parameters[2].in": "query",
	"paths./spots/{id}/events.get.parameters[2].name": "timeframe_end",
	"paths./spots/{id}/events.get.parameters[2].required": false,
	"paths./spots/{id}/events.get.parameters[2].type": "string",
	"paths./spots/{id}/events.get.parameters[3].description": "To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within 'Hamburg, St. Pauli':                                                             bounds[sw_lat]=53.54831449741324                                                             bounds[sw_lon]=9.943227767944336                                                             bounds[ne_lat]=53.5571103674878                                                             bounds[ne_lon]=9.9776029586792",
	"paths./spots/{id}/events.get.parameters[3].in": "query",
	"paths./spots/{id}/events.get.parameters[3].name": "bounds",
	"paths./spots/{id}/events.get.parameters[3].required": false,
	"paths./spots/{id}/events.get.parameters[3].type": "string",
	"paths./spots/{id}/events.get.responses.200.description": "Contains list of events.",
	"paths./spots/{id}/events.get.responses.200.schema.items.$ref": "#/definitions/Event",
	"paths./spots/{id}/events.get.responses.200.schema.type": "array",
	"paths./spots/{id}/events.get.summary": "List events for a given spot",
	"paths./spots/{id}/events.get.tags.length": 1,
	"paths./spots/{id}/events.get.tags[0]": "Events",
	"paths./spots/{id}/events.post.description": "Create event. Wrap map parameters in [event].",
	"paths./spots/{id}/events.post.parameters.length": 2,
	"paths./spots/{id}/events.post.parameters[0].description": "Spot id",
	"paths./spots/{id}/events.post.parameters[0].in": "path",
	"paths./spots/{id}/events.post.parameters[0].name": "id",
	"paths./spots/{id}/events.post.parameters[0].required": true,
	"paths./spots/{id}/events.post.parameters[0].type": "integer",
	"paths./spots/{id}/events.post.parameters[1].description": "Event attributes",
	"paths./spots/{id}/events.post.parameters[1].in": "body",
	"paths./spots/{id}/events.post.parameters[1].name": "event",
	"paths./spots/{id}/events.post.parameters[1].required": false,
	"paths./spots/{id}/events.post.parameters[1].schema.$ref": "#/definitions/EventEditable",
	"paths./spots/{id}/events.post.responses.200.description": "Contains event data",
	"paths./spots/{id}/events.post.responses.200.schema.$ref": "#/definitions/Event",
	"paths./spots/{id}/events.post.summary": "Create event",
	"paths./spots/{id}/events.post.tags.length": 1,
	"paths./spots/{id}/events.post.tags[0]": "Events",
	"paths./spots/{id}/respots.post.description": "Respot a spot onto a map.",
	"paths./spots/{id}/respots.post.parameters.length": 2,
	"paths./spots/{id}/respots.post.parameters[0].description": "Spot Id",
	"paths./spots/{id}/respots.post.parameters[0].in": "path",
	"paths./spots/{id}/respots.post.parameters[0].name": "id",
	"paths./spots/{id}/respots.post.parameters[0].required": true,
	"paths./spots/{id}/respots.post.parameters[0].type": "integer",
	"paths./spots/{id}/respots.post.parameters[1].description": "Map Id",
	"paths./spots/{id}/respots.post.parameters[1].in": "body",
	"paths./spots/{id}/respots.post.parameters[1].name": "map_id",
	"paths./spots/{id}/respots.post.parameters[1].required": true,
	"paths./spots/{id}/respots.post.parameters[1].schema.format": "integer",
	"paths./spots/{id}/respots.post.parameters[1].schema.type": "number",
	"paths./spots/{id}/respots.post.responses.200.description": "Contains respot data.",
	"paths./spots/{id}/respots.post.responses.200.schema.$ref": "#/definitions/Respot",
	"paths./spots/{id}/respots.post.summary": "Respot a spot onto a map",
	"paths./spots/{id}/respots.post.tags.length": 1,
	"paths./spots/{id}/respots.post.tags[0]": "Respots",
	"paths./subscriptions.get.description": "List subscriptions.",
	"paths./subscriptions.get.parameters.length": 2,
	"paths./subscriptions.get.parameters[0].description": "Id of user",
	"paths./subscriptions.get.parameters[0].in": "query",
	"paths./subscriptions.get.parameters[0].name": "user_id",
	"paths./subscriptions.get.parameters[0].type": "integer",
	"paths./subscriptions.get.parameters[1].description": "Id of map",
	"paths./subscriptions.get.parameters[1].in": "query",
	"paths./subscriptions.get.parameters[1].name": "map_id",
	"paths./subscriptions.get.parameters[1].type": "integer",
	"paths./subscriptions.get.responses.200.description": "Contains list of subscriptions.",
	"paths./subscriptions.get.responses.200.schema.items.$ref": "#/definitions/Subscription",
	"paths./subscriptions.get.responses.200.schema.type": "array",
	"paths./subscriptions.get.summary": "List subscriptions. Pass no parameters to get own subscriptions",
	"paths./subscriptions.get.tags.length": 1,
	"paths./subscriptions.get.tags[0]": "Subscriptions",
	"paths./subscriptions.post.description": "Create map subscription.",
	"paths./subscriptions.post.parameters.length": 1,
	"paths./subscriptions.post.parameters[0].description": "map id",
	"paths./subscriptions.post.parameters[0].in": "body",
	"paths./subscriptions.post.parameters[0].name": "map_id",
	"paths./subscriptions.post.parameters[0].required": true,
	"paths./subscriptions.post.parameters[0].schema.format": "integer",
	"paths./subscriptions.post.parameters[0].schema.type": "number",
	"paths./subscriptions.post.responses.200.description": "Contains subscription data.",
	"paths./subscriptions.post.responses.200.schema.$ref": "#/definitions/Subscription",
	"paths./subscriptions.post.summary": "Create map subscription",
	"paths./subscriptions.post.tags.length": 1,
	"paths./subscriptions.post.tags[0]": "Subscriptions",
	"paths./trends/latest.get.description": "List latest maps.",
	"paths./trends/latest.get.responses.200.description": "Contains list of maps.",
	"paths./trends/latest.get.responses.200.schema.items.$ref": "#/definitions/Map",
	"paths./trends/latest.get.responses.200.schema.type": "array",
	"paths./trends/latest.get.summary": "List latest maps",
	"paths./trends/latest.get.tags.length": 1,
	"paths./trends/latest.get.tags[0]": "Trends",
	"paths./trends/recommended.get.description": "List recommended maps.",
	"paths./trends/recommended.get.responses.200.description": "Contains list of maps.",
	"paths./trends/recommended.get.responses.200.schema.items.$ref": "#/definitions/Map",
	"paths./trends/recommended.get.responses.200.schema.type": "array",
	"paths./trends/recommended.get.summary": "List recommended maps",
	"paths./trends/recommended.get.tags.length": 1,
	"paths./trends/recommended.get.tags[0]": "Trends",
	"paths./users/search.get.description": "Search users",
	"paths./users/search.get.parameters.length": 1,
	"paths./users/search.get.parameters[0].description": "Query",
	"paths./users/search.get.parameters[0].in": "query",
	"paths./users/search.get.parameters[0].name": "q",
	"paths./users/search.get.parameters[0].type": "string",
	"paths./users/search.get.responses.200.description": "Contains users data.",
	"paths./users/search.get.responses.200.schema.$ref": "#/definitions/User",
	"paths./users/search.get.summary": "Search users",
	"paths./users/search.get.tags.length": 1,
	"paths./users/search.get.tags[0]": "Search",
	"paths./users/{id}.get.description": "Get profile a user",
	"paths./users/{id}.get.parameters.length": 1,
	"paths./users/{id}.get.parameters[0].description": "Id of user",
	"paths./users/{id}.get.parameters[0].in": "path",
	"paths./users/{id}.get.parameters[0].name": "id",
	"paths./users/{id}.get.parameters[0].required": true,
	"paths./users/{id}.get.parameters[0].type": "integer",
	"paths./users/{id}.get.responses.200.description": "Contains user data",
	"paths./users/{id}.get.responses.200.schema.$ref": "#/definitions/User",
	"paths./users/{id}.get.summary": "Get user profile",
	"paths./users/{id}.get.tags.length": 1,
	"paths./users/{id}.get.tags[0]": "Users",
	"paths./users/{user_id}/maps.get.description": "List maps for a given user.",
	"paths./users/{user_id}/maps.get.parameters.length": 1,
	"paths./users/{user_id}/maps.get.parameters[0].description": "Id of user",
	"paths./users/{user_id}/maps.get.parameters[0].in": "path",
	"paths./users/{user_id}/maps.get.parameters[0].name": "user_id",
	"paths./users/{user_id}/maps.get.parameters[0].required": true,
	"paths./users/{user_id}/maps.get.parameters[0].type": "integer",
	"paths./users/{user_id}/maps.get.responses.200.description": "Contains list of maps.",
	"paths./users/{user_id}/maps.get.responses.200.schema.items.$ref": "#/definitions/Map",
	"paths./users/{user_id}/maps.get.responses.200.schema.type": "array",
	"paths./users/{user_id}/maps.get.summary": "List maps for a given user",
	"paths./users/{user_id}/maps.get.tags.length": 1,
	"paths./users/{user_id}/maps.get.tags[0]": "Maps",
	"produces.length": 1,
	"produces[0]": "application/json",
	"schemes.length": 1,
	"schemes[0]": "https",
	"swagger": "2.0"
}
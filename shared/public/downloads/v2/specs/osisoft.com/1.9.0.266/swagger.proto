syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package piwebapi2017swaggerspec;

message GetAnalysesRequest {
    // The path to the Analysis.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAnalysesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the Analysis.
    string webId = 2;
}

message DeleteAnalysesWebIdRequest {
    // The ID of the Analysis to delete.
    string webId = 1;
}

message GetAnalysesWebIdCategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the Analysis.
    string webId = 2;
}

message GetAnalysesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the Analysis for the security to be checked.
    string webId = 4;
}

message GetAnalysesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the analysis.
    string webId = 3;
}

message PostAnalysesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the analysis, where the security entry will be created.
    string webId = 3;
}

message GetAnalysesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the analysis.
    string webId = 3;
}

message PutAnalysesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the analysis, where the security entry will be updated.
    string webId = 4;
}

message DeleteAnalysesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the analysis, where the security entry will be deleted.
    string webId = 3;
}

message GetAnalysiscategoriesRequest {
    // The path to the target analysis category.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAnalysiscategoriesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the analysis category.
    string webId = 2;
}

message DeleteAnalysiscategoriesWebIdRequest {
    // The ID of the analysis category to delete.
    string webId = 1;
}

message GetAnalysiscategoriesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the analysis category for the security to be checked.
    string webId = 4;
}

message GetAnalysiscategoriesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the analysis category.
    string webId = 3;
}

message PostAnalysiscategoriesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the analysis category, where the security entry will be created.
    string webId = 3;
}

message GetAnalysiscategoriesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the analysis category.
    string webId = 3;
}

message PutAnalysiscategoriesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the analysis category, where the security entry will be updated.
    string webId = 4;
}

message DeleteAnalysiscategoriesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the analysis category, where the security entry will be deleted.
    string webId = 3;
}

message GetAnalysisrulepluginsRequest {
    // The path to the Analysis Rule Plug-in.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAnalysisrulepluginsWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the Analysis Rule Plug-in.
    string webId = 2;
}

message GetAnalysisrulesRequest {
    // The path to the Analysis Rule.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAnalysisrulesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the Analysis Rule.
    string webId = 2;
}

message DeleteAnalysisrulesWebIdRequest {
    // The ID of the Analysis Rule.
    string webId = 1;
}

message GetAnalysisrulesWebIdAnalysisrulesRequest {
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 1;
    // The name query string used for finding Analysis Rules. The default is no filter.
    string nameFilter = 2;
    // Specifies if the search should include Analysis Rules nested further than the immediate children of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 5;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 6;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 7;
    // The ID of the parent Analysis Rule.
    string webId = 8;
}

message PostAnalysisrulesWebIdAnalysisrulesRequest {
    // The definition of the new Analysis Rule.
    AnalysisRule analysisRule = 1;
    // The ID of the parent Analysis Rule, on which to create the child Analysis Rule.
    string webId = 2;
}

message GetAnalysistemplatesRequest {
    // The path to the analysis template.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message PostAnalysistemplatesRequest {
    // The ID of the Analysis, on which the template is created.
    string analysisWebId = 1;
    // The name for the created template, which must be unique within the database's AnalysisTemplate collection. If the name ends with an asterisk (*), then a unique name will be generated based on the supplied name. The default is the specified Analysis' name suffixed with an asterisk (*).
    string name = 2;
}

message GetAnalysistemplatesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the analysis template.
    string webId = 2;
}

message DeleteAnalysistemplatesWebIdRequest {
    // The ID of the analysis template to update.
    string webId = 1;
}

message GetAnalysistemplatesWebIdCategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the analysis template.
    string webId = 2;
}

message GetAnalysistemplatesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the analysis template for the security to be checked.
    string webId = 4;
}

message GetAnalysistemplatesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the analysis template.
    string webId = 3;
}

message PostAnalysistemplatesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the analysis template, where the security entry will be created.
    string webId = 3;
}

message GetAnalysistemplatesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the analysis template.
    string webId = 3;
}

message PutAnalysistemplatesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the analysis template, where the security entry will be updated.
    string webId = 4;
}

message DeleteAnalysistemplatesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the analysis template, where the security entry will be deleted.
    string webId = 3;
}

message GetAssetdatabasesRequest {
    // The path to the database.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAssetdatabasesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the database.
    string webId = 2;
}

message DeleteAssetdatabasesWebIdRequest {
    // The ID of the database.
    string webId = 1;
}

message GetAssetdatabasesWebIdAnalysesRequest {
    // Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'.
    repeated string field = 1;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 2;
    // The query string used for finding analyses. The default is null.
    string query = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 5;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 6;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 7;
    // The ID of the database to search for the analyses.
    string webId = 8;
}

message GetAssetdatabasesWebIdAnalysiscategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the database.
    string webId = 2;
}

message PostAssetdatabasesWebIdAnalysiscategoriesRequest {
    // The new analysis category definition.
    AnalysisCategory analysisCategory = 1;
    // The ID of the database in which to create the analysis category.
    string webId = 2;
}

message GetAssetdatabasesWebIdAnalysistemplatesRequest {
    // Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'.
    repeated string field = 1;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 2;
    // The query string used for finding objects. The default is no query string.
    string query = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 5;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 6;
    // The ID of the database to search.
    string webId = 7;
}

message PostAssetdatabasesWebIdAnalysistemplatesRequest {
    // The new analysis template definition.
    AnalysisTemplate template = 1;
    // The ID of the database in which to create the analysis template.
    string webId = 2;
}

message GetAssetdatabasesWebIdAttributecategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the database.
    string webId = 2;
}

message PostAssetdatabasesWebIdAttributecategoriesRequest {
    // The new attribute category definition.
    AttributeCategory attributeCategory = 1;
    // The ID of the database in which to create the attribute category.
    string webId = 2;
}

message GetAssetdatabasesWebIdElementattributesRequest {
    // Specify that returned attributes must have this category. The default is no filter.
    string attributeCategory = 1;
    // The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string attributeDescriptionFilter = 2;
    // The attribute name filter string used for finding objects. The default is no filter.
    string attributeNameFilter = 3;
    // Specify that returned attributes' value type must be this value type. The default is no filter.
    string attributeType = 4;
    // Specify that the owner of the returned attributes must have this category. The default is no filter.
    string elementCategory = 5;
    // The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string elementDescriptionFilter = 6;
    // The element name filter string used for finding objects. The default is no filter.
    string elementNameFilter = 7;
    // Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
    string elementTemplate = 8;
    // Specify that the element of the returned attributes must have this AFElementType. The default is no filter.
    string elementType = 9;
    // The maximum number of objects to be returned (the page size). The default is 1000.
    int32 maxCount = 10;
    // Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
    bool searchFullHierarchy = 11;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 12;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 13;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 14;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 15;
    // The ID of the asset database to use as the root of the search.
    string webId = 16;
}

message GetAssetdatabasesWebIdElementcategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the database.
    string webId = 2;
}

message PostAssetdatabasesWebIdElementcategoriesRequest {
    // The new element category definition.
    ElementCategory elementCategory = 1;
    // The ID of the database in which to create the element category.
    string webId = 2;
}

message GetAssetdatabasesWebIdElementsRequest {
    // Specify that returned elements must have this category. The default is no category filter.
    string categoryName = 1;
    // Specify that returned elements must have this description. The default is no description filter.
    string descriptionFilter = 2;
    // Specify that returned elements must have this type. The default type is 'Any'.
    string elementType = 3;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 4;
    // The name query string used for finding objects. The default is no filter.
    string nameFilter = 5;
    // Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 6;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 7;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 8;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 9;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 10;
    // Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
    string templateName = 11;
    // The ID of the database to use as the root of the search.
    string webId = 12;
}

message PostAssetdatabasesWebIdElementsRequest {
    // The new element definition.
    Element element = 1;
    // The ID of the asset database on which to create the element.
    string webId = 2;
}

message GetAssetdatabasesWebIdElementtemplatesRequest {
    // Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'.
    repeated string field = 1;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 2;
    // The query string used for finding objects. The default is no query string.
    string query = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 5;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 6;
    // The ID of the database to search.
    string webId = 7;
}

message PostAssetdatabasesWebIdElementtemplatesRequest {
    // The new element template definition.
    ElementTemplate template = 1;
    // The ID of the database in which to create the element template.
    string webId = 2;
}

message GetAssetdatabasesWebIdEnumerationsetsRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the database.
    string webId = 2;
}

message PostAssetdatabasesWebIdEnumerationsetsRequest {
    // The new enumeration set definition.
    EnumerationSet enumerationSet = 1;
    // The ID of the database in which to create the enumeration set.
    string webId = 2;
}

message GetAssetdatabasesWebIdEventframeattributesRequest {
    // Specify that returned attributes must have this category. The default is no filter.
    string attributeCategory = 1;
    // The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string attributeDescriptionFilter = 2;
    // The attribute name filter string used for finding objects. The default is no filter.
    string attributeNameFilter = 3;
    // Specify that returned attributes' value type must be this value type. The default is no filter.
    string attributeType = 4;
    // A string representing the latest ending time for the event frames to be matched. The endTime must be greater than or equal to the startTime. The default is '*'.
    string endTime = 5;
    // Specify that the owner of the returned attributes must have this category. The default is no filter.
    string eventFrameCategory = 6;
    // The event frame description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string eventFrameDescriptionFilter = 7;
    // The event frame name filter string used for finding objects. The default is no filter.
    string eventFrameNameFilter = 8;
    // Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
    string eventFrameTemplate = 9;
    // The maximum number of objects to be returned (the page size). The default is 1000.
    int32 maxCount = 10;
    // The name query string which must match the name of a referenced element. The default is no filter.
    string referencedElementNameFilter = 11;
    // Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
    bool searchFullHierarchy = 12;
    // Determines how the startTime and endTime parameters are treated when searching for event frames.     The default is 'Overlapped'.
    string searchMode = 13;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 14;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 15;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 16;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 17;
    // A string representing the earliest starting time for the event frames to be matched. startTime must be less than or equal to the endTime. The default is '*-8h'.
    string startTime = 18;
    // The ID of the asset database to use as the root of the search.
    string webId = 19;
}

message GetAssetdatabasesWebIdEventframesRequest {
    // Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
    bool canBeAcknowledged = 1;
    // Specify that returned event frames must have this category. The default is no category filter.
    string categoryName = 2;
    // The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string endTime = 3;
    // Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
    bool isAcknowledged = 4;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 5;
    // The name query string used for finding event frames. The default is no filter.
    string nameFilter = 6;
    // The name query string which must match the name of a referenced element. The default is no filter.
    string referencedElementNameFilter = 7;
    // Specify that returned event frames must have an element in the event frame's referenced elements collection that derives from the template. Specify this parameter by name.
    string referencedElementTemplateName = 8;
    // Specifies whether the search should include objects nested further than the immediate children of the search root. The default is 'false'.
    bool searchFullHierarchy = 9;
    // Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
    string searchMode = 10;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 11;
    // Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
    repeated string severity = 12;
    // The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string sortField = 13;
    // The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string sortOrder = 14;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 15;
    // The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
    string startTime = 16;
    // Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
    string templateName = 17;
    // The ID of the asset database to use as the root of the search.
    string webId = 18;
}

message PostAssetdatabasesWebIdEventframesRequest {
    // The new event frame definition.
    EventFrame eventFrame = 1;
    // The ID of the database on which to create the event frame.
    string webId = 2;
}

message GetAssetdatabasesWebIdExportRequest {
    // The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is '*'.
    string endTime = 1;
    // Indicates the type of export to perform. The default is 'StrongReferences'. Multiple export modes may be specified by using multiple instances of exportMode.
    repeated string exportMode = 2;
    // The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is '*-30d'.
    string startTime = 3;
    // The ID of the database.
    string webId = 4;
}

message PostAssetdatabasesWebIdImportRequest {
    // Indicates the type of import to perform. The default is 'AllowCreate | AllowUpdate | AutoCheckIn'. Multiple import modes may be specified by using multiple instances of importMode.
    repeated string importMode = 1;
    // The ID of the asset database.
    string webId = 2;
}

message GetAssetdatabasesWebIdReferencedelementsRequest {
    // Specify that returned elements must have this category. The default is no category filter.
    string categoryName = 1;
    // Specify that returned elements must have this description. The default is no description filter.
    string descriptionFilter = 2;
    // Specify that returned elements must have this type. The default type is 'Any'.
    string elementType = 3;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 4;
    // The name query string used for finding objects. The default is no filter.
    string nameFilter = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 7;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 8;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 9;
    // Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
    string templateName = 10;
    // The ID of the resource to use as the root of the search.
    string webId = 11;
}

message PostAssetdatabasesWebIdReferencedelementsRequest {
    // The name of the reference type between the parent and the referenced element. This must be a "strong" reference type. The default is "parent-child".
    string referenceType = 1;
    // The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter.
    repeated string referencedElementWebId = 2;
    // The ID of the database which the referenced element will be added to.
    string webId = 3;
}

message DeleteAssetdatabasesWebIdReferencedelementsRequest {
    // The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter.
    repeated string referencedElementWebId = 1;
    // The ID of the database which the referenced element will be removed from.
    string webId = 2;
}

message GetAssetdatabasesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only 'Default' security item of the security information will be returned.
    repeated string securityItem = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 4;
    // The ID of the asset database for the security to be checked.
    string webId = 5;
}

message GetAssetdatabasesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
    string securityItem = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The ID of the asset database.
    string webId = 4;
}

message PostAssetdatabasesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The security item of the desired security entries to be created. If the parameter is not specified, security entries of the 'Default' security item will be created.
    string securityItem = 3;
    // The ID of the asset database where the security entry will be created.
    string webId = 4;
}

message GetAssetdatabasesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
    string securityItem = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The ID of the asset database.
    string webId = 4;
}

message PutAssetdatabasesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the 'Default' security item will be updated.
    string securityItem = 4;
    // The ID of the asset database where the security entry will be updated.
    string webId = 5;
}

message DeleteAssetdatabasesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the 'Default' security item will be deleted.
    string securityItem = 3;
    // The ID of the asset database where the security entry will be deleted.
    string webId = 4;
}

message GetAssetdatabasesWebIdTablecategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the database.
    string webId = 2;
}

message PostAssetdatabasesWebIdTablecategoriesRequest {
    // The new table category definition.
    TableCategory tableCategory = 1;
    // The ID of the database in which to create the table category.
    string webId = 2;
}

message GetAssetdatabasesWebIdTablesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the database.
    string webId = 2;
}

message PostAssetdatabasesWebIdTablesRequest {
    // The new table definition.
    Table table = 1;
    // The ID of the database in which to create the table.
    string webId = 2;
}

message GetAssetserversRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
}

message GetAssetservers#NameRequest {
    // The name of the server.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAssetservers#PathRequest {
    // The path to the server.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAssetserversWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the server.
    string webId = 2;
}

message GetAssetserversWebIdAnalysisrulepluginsRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the asset server, where the Analysis Rule Plug-in's are installed.
    string webId = 2;
}

message GetAssetserversWebIdAssetdatabasesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the server.
    string webId = 2;
}

message PostAssetserversWebIdAssetdatabasesRequest {
    // The new database definition.
    AssetDatabase database = 1;
    // The ID of the asset server on which to create the database.
    string webId = 2;
}

message GetAssetserversWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only 'Default' security item of the security information will be returned.
    repeated string securityItem = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 4;
    // The ID of the asset server for the security to be checked.
    string webId = 5;
}

message GetAssetserversWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
    string securityItem = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The ID of the asset server.
    string webId = 4;
}

message PostAssetserversWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The security item of the desired security entries to be created. If the parameter is not specified, security entries of the 'Default' security item will be created.
    string securityItem = 3;
    // The ID of the asset server where the security entry will be created.
    string webId = 4;
}

message GetAssetserversWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
    string securityItem = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The ID of the asset server.
    string webId = 4;
}

message PutAssetserversWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the 'Default' security item will be updated.
    string securityItem = 4;
    // The ID of the asset server where the security entry will be updated.
    string webId = 5;
}

message DeleteAssetserversWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the 'Default' security item will be deleted.
    string securityItem = 3;
    // The ID of the asset server where the security entry will be deleted.
    string webId = 4;
}

message GetAssetserversWebIdSecurityidentitiesRequest {
    // Specifies which of the object's properties are searched. The default is 'Name'.
    string field = 1;
    // The maximum number of objects to be returned. The default is 1000.
    int32 maxCount = 2;
    // The query string used for finding objects. The default is no query string.
    string query = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 5;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 6;
    // The ID of the asset server to search.
    string webId = 7;
}

message PostAssetserversWebIdSecurityidentitiesRequest {
    // The new security identity definition.
    SecurityIdentity securityIdentity = 1;
    // The ID of the asset server on which to create the security identity.
    string webId = 2;
}

message GetAssetserversWebIdSecurityidentities#UserIdentityRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The user identity to search for.
    string userIdentity = 2;
    // The ID of the server.
    string webId = 3;
}

message GetAssetserversWebIdSecuritymappingsRequest {
    // Specifies which of the object's properties are searched. The default is 'Name'.
    string field = 1;
    // The maximum number of objects to be returned. The default is 1000.
    int32 maxCount = 2;
    // The query string used for finding objects. The default is no query string.
    string query = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 5;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 6;
    // The ID of the asset server to search.
    string webId = 7;
}

message PostAssetserversWebIdSecuritymappingsRequest {
    // The new security mapping definition.
    SecurityMapping securityMapping = 1;
    // The ID of the asset server on which to create the security mapping.
    string webId = 2;
}

message GetAssetserversWebIdTimerulepluginsRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the asset server, where the Time Rule Plug-in's are installed.
    string webId = 2;
}

message GetAssetserversWebIdUnitclassesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the server.
    string webId = 2;
}

message PostAssetserversWebIdUnitclassesRequest {
    // The new unit class definition.
    UnitClass unitClass = 1;
    // The ID of the server.
    string webId = 2;
}

message GetAttributecategoriesRequest {
    // The path to the target attribute category.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAttributecategoriesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The id of the attribute category.
    string webId = 2;
}

message DeleteAttributecategoriesWebIdRequest {
    // The ID of the attribute category to delete.
    string webId = 1;
}

message GetAttributecategoriesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the attribute category for the security to be checked.
    string webId = 4;
}

message GetAttributecategoriesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the attribute category.
    string webId = 3;
}

message PostAttributecategoriesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the attribute category where the security entry will be created.
    string webId = 3;
}

message GetAttributecategoriesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the attribute category.
    string webId = 3;
}

message PutAttributecategoriesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the attribute category where the security entry will be updated.
    string webId = 4;
}

message DeleteAttributecategoriesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the attribute category where the security entry will be deleted.
    string webId = 3;
}

message GetAttributesRequest {
    // The path to the attribute.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAttributesMultipleRequest {
    // Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
    bool asParallel = 1;
    // The include mode for the return list. The default is 'All'.
    string includeMode = 2;
    // The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
    repeated string path = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
    repeated string webId = 5;
}

message GetAttributesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the attribute.
    string webId = 2;
}

message DeleteAttributesWebIdRequest {
    // The ID of the attribute.
    string webId = 1;
}

message GetAttributesWebIdAttributesRequest {
    // Specify that returned attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 2;
    // The name query string used for finding attributes. The default is no filter.
    string nameFilter = 3;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 4;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 5;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 6;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 7;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 8;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 9;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 10;
    // Specify that returned attributes must be members of this template. The default is no template filter.
    string templateName = 11;
    // Specify that returned attributes' value type must be the given value type. The default is no value type filter.
    string valueType = 12;
    // The ID of the parent attribute.
    string webId = 13;
}

message PostAttributesWebIdAttributesRequest {
    // The definition of the new attribute.
    Attribute attribute = 1;
    // The ID of the parent attribute on which to create the attribute.
    string webId = 2;
}

message GetAttributesWebIdCategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the attribute.
    string webId = 2;
}

message PostAttributesWebIdConfigRequest {
    // The ID of the attribute.
    string webId = 1;
}

message GetAttributesWebIdValueRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the attribute.
    string webId = 2;
}

message PutAttributesWebIdValueRequest {
    // The value to write.
    TimedValue value = 1;
    // The ID of the attribute.
    string webId = 2;
}

message GetAttributetemplatesRequest {
    // The path to the attribute template.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAttributetemplatesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the attribute template.
    string webId = 2;
}

message DeleteAttributetemplatesWebIdRequest {
    // The ID of the attribute template.
    string webId = 1;
}

message GetAttributetemplatesWebIdAttributetemplatesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the attribute template.
    string webId = 2;
}

message PostAttributetemplatesWebIdAttributetemplatesRequest {
    // The attribute template definition.
    AttributeTemplate template = 1;
    // The ID of the parent attribute template on which to create the attribute template.
    string webId = 2;
}

message GetAttributetemplatesWebIdCategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the attribute template.
    string webId = 2;
}

message GetAttributetraitsRequest {
    // The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is "all", then all attribute traits of all categories will be returned.
    repeated string category = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetAttributetraitsNameRequest {
    // The name or abbreviation of the attribute trait.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message PostBatchRequest {
    // The batch of requests.
    map<string, Request> batch = 1;
}

message GetCalculationIntervalsRequest {
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 1;
    // A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation.
    string expression = 2;
    // A time span specifies how often the filter expression is evaluated when computing the summary for an interval.
    string sampleInterval = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 5;
    // The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null.
    string webId = 6;
}

message GetCalculationRecordedRequest {
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 1;
    // A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation.
    string expression = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 4;
    // The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null.
    string webId = 5;
}

message GetCalculationSummaryRequest {
    // Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
    string calculationBasis = 1;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 2;
    // A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation.
    string expression = 3;
    // A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is 'Interval'.
    string sampleInterval = 4;
    // A flag which specifies one or more summaries to compute for each interval over the time range. The default is 'ExpressionRecordedValues'.
    string sampleType = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 7;
    // The duration of each summary interval.
    string summaryDuration = 8;
    // Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
    repeated string summaryType = 9;
    // Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
    string timeType = 10;
    // The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null.
    string webId = 11;
}

message GetCalculationTimesRequest {
    // A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation.
    string expression = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 3;
    // A list of timestamps at which to calculate the expression.
    repeated string time = 4;
    // The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null.
    string webId = 5;
}

message GetDataserversRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
}

message GetDataservers#NameRequest {
    // The name of the server.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetDataservers#PathRequest {
    // The path to the server. Note that the path supplied to this method must be of the form '\\servername'.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetDataserversWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the server.
    string webId = 2;
}

message GetDataserversWebIdEnumerationsetsRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the server.
    string webId = 2;
}

message PostDataserversWebIdEnumerationsetsRequest {
    // The new enumeration set definition.
    EnumerationSet enumerationSet = 1;
    // The ID of the server on which to create the enumeration set.
    string webId = 2;
}

message GetDataserversWebIdPointsRequest {
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 1;
    // A query string for filtering by point name. The default is no filter.
    string nameFilter = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The starting index (zero based) of the items to be returned. The default is '0'.
    int32 startIndex = 4;
    // The ID of the server.
    string webId = 5;
}

message PostDataserversWebIdPointsRequest {
    // The new point definition.
    Point pointDTO = 1;
    // The ID of the server.
    string webId = 2;
}

message GetElementcategoriesRequest {
    // The path to the target element category.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetElementcategoriesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The id of the element category.
    string webId = 2;
}

message DeleteElementcategoriesWebIdRequest {
    // The ID of the element category to delete.
    string webId = 1;
}

message GetElementcategoriesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the element category for the security to be checked.
    string webId = 4;
}

message GetElementcategoriesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the element category.
    string webId = 3;
}

message PostElementcategoriesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the element category where the security entry will be created.
    string webId = 3;
}

message GetElementcategoriesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the element category.
    string webId = 3;
}

message PutElementcategoriesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the element category where the security entry will be updated.
    string webId = 4;
}

message DeleteElementcategoriesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the element category where the security entry will be deleted.
    string webId = 3;
}

message GetElementsRequest {
    // The path to the element.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetElementsMultipleRequest {
    // Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
    bool asParallel = 1;
    // The include mode for the return list. The default is 'All'.
    string includeMode = 2;
    // The path of an element. Multiple elements may be specified with multiple instances of the parameter.
    repeated string path = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The ID of an element. Multiple elements may be specified with multiple instances of the parameter.
    repeated string webId = 5;
}

message GetElementsSearchbyattributeSearchIdRequest {
    // Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string categoryName = 1;
    // The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string descriptionFilter = 2;
    // The maximum number of objects to be returned. The default is 1000.
    int32 maxCount = 3;
    // The name query string used for finding objects. The default is no filter.
    string nameFilter = 4;
    // Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 5;
    // The encoded search Id of the "Search Elements By Attribute Value" operation.
    string searchId = 6;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 7;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 8;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 9;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 10;
}

message GetElementsWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the element.
    string webId = 2;
}

message DeleteElementsWebIdRequest {
    // The ID of the element.
    string webId = 1;
}

message GetElementsWebIdAnalysesRequest {
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 3;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 4;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 5;
    // The ID of the element, which is the Target of the analyses.
    string webId = 6;
}

message PostElementsWebIdAnalysesRequest {
    // The new Analysis definition.
    Analysis analysis = 1;
    // The ID of the element on which to create the Analysis.
    string webId = 2;
}

message GetElementsWebIdAttributesRequest {
    // Specify that returned attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 2;
    // The name query string used for finding attributes. The default is no filter.
    string nameFilter = 3;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 4;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 5;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 6;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 7;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 8;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 9;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 10;
    // Specify that returned attributes must be members of this template. The default is no template filter.
    string templateName = 11;
    // Specify that returned attributes' value type must be the given value type. The default is no value type filter.
    string valueType = 12;
    // The ID of the element.
    string webId = 13;
}

message PostElementsWebIdAttributesRequest {
    // The definition of the new attribute.
    Attribute attribute = 1;
    // The ID of the element on which to create the attribute.
    string webId = 2;
}

message GetElementsWebIdCategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the element.
    string webId = 2;
}

message PostElementsWebIdConfigRequest {
    // If true, includes the child elements of the specified element.
    bool includeChildElements = 1;
    // The ID of the element.
    string webId = 2;
}

message GetElementsWebIdElementattributesRequest {
    // Specify that returned attributes must have this category. The default is no filter.
    string attributeCategory = 1;
    // The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string attributeDescriptionFilter = 2;
    // The attribute name filter string used for finding objects. The default is no filter.
    string attributeNameFilter = 3;
    // Specify that returned attributes' value type must be this value type. The default is no filter.
    string attributeType = 4;
    // Specify that the owner of the returned attributes must have this category. The default is no filter.
    string elementCategory = 5;
    // The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string elementDescriptionFilter = 6;
    // The element name filter string used for finding objects. The default is no filter.
    string elementNameFilter = 7;
    // Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
    string elementTemplate = 8;
    // Specify that the element of the returned attributes must have this AFElementType. The default is no filter.
    string elementType = 9;
    // The maximum number of objects to be returned (the page size). The default is 1000.
    int32 maxCount = 10;
    // Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
    bool searchFullHierarchy = 11;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 12;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 13;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 14;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 15;
    // The ID of the element to use as the root of the search.
    string webId = 16;
}

message GetElementsWebIdElementsRequest {
    // Specify that returned elements must have this category. The default is no category filter.
    string categoryName = 1;
    // Specify that returned elements must have this description. The default is no description filter.
    string descriptionFilter = 2;
    // Specify that returned elements must have this type. The default type is 'Any'.
    string elementType = 3;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 4;
    // The name query string used for finding objects. The default is no filter.
    string nameFilter = 5;
    // Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 6;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 7;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 8;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 9;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 10;
    // Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
    string templateName = 11;
    // The ID of the element to use as the root of the search.
    string webId = 12;
}

message PostElementsWebIdElementsRequest {
    // The new element definition.
    Element element = 1;
    // The ID of the parent element on which to create the element.
    string webId = 2;
}

message GetElementsWebIdEventframesRequest {
    // Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
    bool canBeAcknowledged = 1;
    // Specify that returned event frames must have this category. The default is no category filter.
    string categoryName = 2;
    // The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string endTime = 3;
    // Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
    bool isAcknowledged = 4;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 5;
    // The name query string used for finding event frames. The default is no filter.
    string nameFilter = 6;
    // Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
    string searchMode = 7;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 8;
    // Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
    repeated string severity = 9;
    // The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string sortField = 10;
    // The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string sortOrder = 11;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 12;
    // The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
    string startTime = 13;
    // Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
    string templateName = 14;
    // The ID of the element whose related event frames are sought.
    string webId = 15;
}

message GetElementsWebIdReferencedelementsRequest {
    // Specify that returned elements must have this category. The default is no category filter.
    string categoryName = 1;
    // Specify that returned elements must have this description. The default is no description filter.
    string descriptionFilter = 2;
    // Specify that returned elements must have this type. The default type is 'Any'.
    string elementType = 3;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 4;
    // The name query string used for finding objects. The default is no filter.
    string nameFilter = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 7;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 8;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 9;
    // Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
    string templateName = 10;
    // The ID of the resource to use as the root of the search.
    string webId = 11;
}

message PostElementsWebIdReferencedelementsRequest {
    // The name of the reference type between the parent and the referenced element. The default is "parent-child".
    string referenceType = 1;
    // The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter.
    repeated string referencedElementWebId = 2;
    // The ID of the element which the referenced element will be added to.
    string webId = 3;
}

message DeleteElementsWebIdReferencedelementsRequest {
    // The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter.
    repeated string referencedElementWebId = 1;
    // The ID of the element which the referenced element will be removed from.
    string webId = 2;
}

message GetElementsWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the element for the security to be checked.
    string webId = 4;
}

message GetElementsWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the element.
    string webId = 3;
}

message PostElementsWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the element where the security entry will be created.
    string webId = 3;
}

message GetElementsWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the element.
    string webId = 3;
}

message PutElementsWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the element where the security entry will be updated.
    string webId = 4;
}

message DeleteElementsWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the element where the security entry will be deleted.
    string webId = 3;
}

message GetElementtemplatesRequest {
    // The path to the element template.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetElementtemplatesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the element template.
    string webId = 2;
}

message DeleteElementtemplatesWebIdRequest {
    // The ID of the element template to update.
    string webId = 1;
}

message GetElementtemplatesWebIdAnalysistemplatesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the element template.
    string webId = 2;
}

message GetElementtemplatesWebIdAttributetemplatesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // Specifies if the result should include attribute templates inherited from base element templates. The default is 'false'.
    bool showInherited = 2;
    // The ID of the element template.
    string webId = 3;
}

message PostElementtemplatesWebIdAttributetemplatesRequest {
    // The attribute template definition.
    AttributeTemplate template = 1;
    // The ID of the element template on which to create the attribute template.
    string webId = 2;
}

message GetElementtemplatesWebIdCategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // Specifies if the result should include categories inherited from base element templates. The default is 'false'.
    bool showInherited = 2;
    // The ID of the element template.
    string webId = 3;
}

message GetElementtemplatesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the element template for the security to be checked.
    string webId = 4;
}

message GetElementtemplatesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the element template.
    string webId = 3;
}

message PostElementtemplatesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the element template where the security entry will be created.
    string webId = 3;
}

message GetElementtemplatesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the element template.
    string webId = 3;
}

message PutElementtemplatesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the element template where the security entry will be updated.
    string webId = 4;
}

message DeleteElementtemplatesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the element template where the security entry will be deleted.
    string webId = 3;
}

message GetEnumerationsetsRequest {
    // The path to the target enumeration set.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetEnumerationsetsWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the enumeration set.
    string webId = 2;
}

message DeleteEnumerationsetsWebIdRequest {
    // The ID of the enumeration set to delete.
    string webId = 1;
}

message GetEnumerationsetsWebIdEnumerationvaluesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the enumeration set.
    string webId = 2;
}

message PostEnumerationsetsWebIdEnumerationvaluesRequest {
    // The new enumeration value definition.
    EnumerationValue enumerationValue = 1;
    // The ID of the enumeration set on which to create the enumeration value.
    string webId = 2;
}

message GetEnumerationsetsWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the enumeration set for the security to be checked.
    string webId = 4;
}

message GetEnumerationsetsWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the enumeration set.
    string webId = 3;
}

message PostEnumerationsetsWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the enumeration set where the security entry will be created.
    string webId = 3;
}

message GetEnumerationsetsWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the enumeration set.
    string webId = 3;
}

message PutEnumerationsetsWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the enumeration set where the security entry will be updated.
    string webId = 4;
}

message DeleteEnumerationsetsWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the enumeration set where the security entry will be deleted.
    string webId = 3;
}

message GetEnumerationvaluesRequest {
    // The path to the target enumeration value.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetEnumerationvaluesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the enumeration value.
    string webId = 2;
}

message DeleteEnumerationvaluesWebIdRequest {
    // The ID of the enumeration value.
    string webId = 1;
}

message GetEventframesRequest {
    // The path to the event frame.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetEventframesMultipleRequest {
    // Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
    bool asParallel = 1;
    // The include mode for the return list. The default is 'All'.
    string includeMode = 2;
    // The path of an event frame. Multiple event frames may be specified with multiple instances of the parameter.
    repeated string path = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The ID of an event frame. Multiple event frames may be specified with multiple instances of the parameter.
    repeated string webId = 5;
}

message GetEventframesSearchbyattributeSearchIdRequest {
    // Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
    bool canBeAcknowledged = 1;
    // The ending time for the search. endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*'.
    string endTime = 2;
    // Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
    bool isAcknowledged = 3;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 4;
    // The name query string used for finding event frames. The default is no filter.
    string nameFilter = 5;
    // The name query string which must match the name of a referenced element. The default is no filter.
    string referencedElementNameFilter = 6;
    // Specifies whether the search should include objects nested further than the immediate children of the search root. The default is 'false'.
    bool searchFullHierarchy = 7;
    // The encoded search Id of the "Search EventFrames By Attribute Value" operation.
    string searchId = 8;
    // Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. The default is 'Overlapped'.
    string searchMode = 9;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 10;
    // Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
    repeated string severity = 11;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 12;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 13;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 14;
    // The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
    string startTime = 15;
}

message GetEventframesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the event frame.
    string webId = 2;
}

message DeleteEventframesWebIdRequest {
    // The ID of the event frame to delete.
    string webId = 1;
}

message GetEventframesWebIdAnnotationsRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the owner event frame.
    string webId = 2;
}

message PostEventframesWebIdAnnotationsRequest {
    // The new annotation definition.
    Annotation annotation = 1;
    // The ID of the owner event frame on which to create the annotation.
    string webId = 2;
}

message GetEventframesWebIdAnnotationsIdRequest {
    // The Annotation identifier of the specific annotation.
    string id = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the owner event frame.
    string webId = 3;
}

message DeleteEventframesWebIdAnnotationsIdRequest {
    // The Annotation identifier of the annotation to be deleted.
    string id = 1;
    // The ID of the owner event frame of the annotation to delete.
    string webId = 2;
}

message GetEventframesWebIdAttributesRequest {
    // Specify that returned attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 2;
    // The name query string used for finding attributes. The default is no filter.
    string nameFilter = 3;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 4;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 5;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 6;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 7;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 8;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 9;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 10;
    // Specify that returned attributes must be members of this template. The default is no template filter.
    string templateName = 11;
    // Specify that returned attributes' value type must be the given value type. The default is no value type filter.
    string valueType = 12;
    // The ID of the event frame.
    string webId = 13;
}

message PostEventframesWebIdAttributesRequest {
    // The definition of the new attribute.
    Attribute attribute = 1;
    // The ID of the event frame on which to create the attribute.
    string webId = 2;
}

message PostEventframesWebIdAttributesCaptureRequest {
    // The ID of the event frame.
    string webId = 1;
}

message GetEventframesWebIdCategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the event frame.
    string webId = 2;
}

message PostEventframesWebIdConfigRequest {
    // If true, includes the child event frames of the specified event frame.
    bool includeChildElements = 1;
    // The ID of the event frame.
    string webId = 2;
}

message GetEventframesWebIdEventframeattributesRequest {
    // Specify that returned attributes must have this category. The default is no filter.
    string attributeCategory = 1;
    // The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string attributeDescriptionFilter = 2;
    // The attribute name filter string used for finding objects. The default is no filter.
    string attributeNameFilter = 3;
    // Specify that returned attributes' value type must be this value type. The default is no filter.
    string attributeType = 4;
    // A string representing the latest ending time for the event frames to be matched. The endTime must be greater than or equal to the startTime. The default is '*'.
    string endTime = 5;
    // Specify that the owner of the returned attributes must have this category. The default is no filter.
    string eventFrameCategory = 6;
    // The event frame description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
    string eventFrameDescriptionFilter = 7;
    // The event frame name filter string used for finding objects. The default is no filter.
    string eventFrameNameFilter = 8;
    // Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
    string eventFrameTemplate = 9;
    // The maximum number of objects to be returned (the page size). The default is 1000.
    int32 maxCount = 10;
    // The name query string which must match the name of a referenced element. The default is no filter.
    string referencedElementNameFilter = 11;
    // Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
    bool searchFullHierarchy = 12;
    // Determines how the startTime and endTime parameters are treated when searching for event frames.     The default is 'Overlapped'.
    string searchMode = 13;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 14;
    // The field or property of the object used to sort the returned collection. The default is 'Name'.
    string sortField = 15;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 16;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 17;
    // A string representing the earliest starting time for the event frames to be matched. startTime must be less than or equal to the endTime. The default is '*-8h'.
    string startTime = 18;
    // The ID of the event frame to use as the root of the search.
    string webId = 19;
}

message GetEventframesWebIdEventframesRequest {
    // Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
    bool canBeAcknowledged = 1;
    // Specify that returned event frames must have this category. The default is no category filter.
    string categoryName = 2;
    // The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string endTime = 3;
    // Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
    bool isAcknowledged = 4;
    // The maximum number of objects to be returned per call (page size). The default is 1000.
    int32 maxCount = 5;
    // The name query string used for finding event frames. The default is no filter.
    string nameFilter = 6;
    // The name query string which must match the name of a referenced element. The default is no filter.
    string referencedElementNameFilter = 7;
    // Specify that returned event frames must have an element in the event frame's referenced elements collection that derives from the template. Specify this parameter by name.
    string referencedElementTemplateName = 8;
    // Specifies whether the search should include objects nested further than the immediate children of the search root. The default is 'false'.
    bool searchFullHierarchy = 9;
    // Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
    string searchMode = 10;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 11;
    // Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
    repeated string severity = 12;
    // The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string sortField = 13;
    // The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
    string sortOrder = 14;
    // The starting index (zero based) of the items to be returned. The default is 0.
    int32 startIndex = 15;
    // The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
    string startTime = 16;
    // Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
    string templateName = 17;
    // The ID of the event frame to use as the root of the search.
    string webId = 18;
}

message PostEventframesWebIdEventframesRequest {
    // The new event frame definition.
    EventFrame eventFrame = 1;
    // The ID of the parent event frame on which to create the event frame.
    string webId = 2;
}

message GetEventframesWebIdReferencedelementsRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the event frame whose referenced elements should be retrieved.
    string webId = 2;
}

message GetEventframesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the event frame for the security to be checked.
    string webId = 4;
}

message GetEventframesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the event frame.
    string webId = 3;
}

message PostEventframesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the event frame where the security entry will be created.
    string webId = 3;
}

message GetEventframesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the event frame.
    string webId = 3;
}

message PutEventframesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the event frame where the security entry will be updated.
    string webId = 4;
}

message DeleteEventframesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the event frame where the security entry will be deleted.
    string webId = 3;
}

message GetPointsRequest {
    // The path to the point.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetPointsMultipleRequest {
    // Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested points. The default is 'false'.
    bool asParallel = 1;
    // The include mode for the return list. The default is 'All'.
    string includeMode = 2;
    // The path of a point. Multiple points may be specified with multiple instances of the parameter.
    repeated string path = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The ID of a point. Multiple points may be specified with multiple instances of the parameter.
    repeated string webId = 5;
}

message GetPointsWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the point.
    string webId = 2;
}

message DeletePointsWebIdRequest {
    // The ID of the point.
    string webId = 1;
}

message GetPointsWebIdAttributesRequest {
    // The name of a point attribute to be returned. Multiple attributes may be specified with multiple instances of the parameter.
    repeated string name = 1;
    // The filter to the names of the list of point attributes to be returned. The default is no filter.
    string nameFilter = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The ID of the point.
    string webId = 4;
}

message GetPointsWebIdAttributesNameRequest {
    // The name of the attribute.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the point.
    string webId = 3;
}

message GetSecurityidentitiesRequest {
    // The path to the security identity.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetSecurityidentitiesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the security identity.
    string webId = 2;
}

message DeleteSecurityidentitiesWebIdRequest {
    // The ID of the security identity.
    string webId = 1;
}

message GetSecurityidentitiesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the security identity for the security to be checked.
    string webId = 4;
}

message GetSecurityidentitiesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the security identity.
    string webId = 3;
}

message GetSecurityidentitiesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the security identity.
    string webId = 3;
}

message GetSecurityidentitiesWebIdSecuritymappingsRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the security identity.
    string webId = 2;
}

message GetSecuritymappingsRequest {
    // The path to the security mapping.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetSecuritymappingsWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the security mapping.
    string webId = 2;
}

message DeleteSecuritymappingsWebIdRequest {
    // The ID of the security mapping.
    string webId = 1;
}

message GetSecuritymappingsWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the security mapping for the security to be checked.
    string webId = 4;
}

message GetSecuritymappingsWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the security mapping.
    string webId = 3;
}

message GetSecuritymappingsWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the security mapping.
    string webId = 3;
}

message GetStreamsWebIdChannelRequest {
    // Specified if the channel should send a message with the current value of the stream after the connection is opened. The default is 'false'.
    bool includeInitialValues = 1;
    // The ID of the stream.
    string webId = 2;
}

message GetStreamsWebIdEndRequest {
    // The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute's default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure.
    string desiredUnits = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the stream.
    string webId = 3;
}

message GetStreamsWebIdInterpolatedRequest {
    // The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute's default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure.
    string desiredUnits = 1;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 2;
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
    string filterExpression = 3;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 4;
    // The sampling interval, in AFTimeSpan format.
    string interval = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 7;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 8;
    // The ID of the stream.
    string webId = 9;
}

message GetStreamsWebIdInterpolatedattimesRequest {
    // The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute's default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure.
    string desiredUnits = 1;
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
    string filterExpression = 2;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 5;
    // The timestamp at which to retrieve an interpolated value. Multiple timestamps may be specified with multiple instances of the parameter.
    repeated string time = 6;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 7;
    // The ID of the stream.
    string webId = 8;
}

message GetStreamsWebIdPlotRequest {
    // The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute's default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure.
    string desiredUnits = 1;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 2;
    // The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is '24'. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
    int32 intervals = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 5;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 6;
    // The ID of the stream.
    string webId = 7;
}

message GetStreamsWebIdRecordedRequest {
    // An optional value that determines how the times and values of the returned end points are determined. The default is 'Inside'.
    string boundaryType = 1;
    // The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute's default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure.
    string desiredUnits = 2;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 3;
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. The default is no filtering.
    string filterExpression = 4;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 5;
    // The maximum number of values to be returned. The default is 1000.
    int32 maxCount = 6;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 7;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 8;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 9;
    // The ID of the stream.
    string webId = 10;
}

message PostStreamsWebIdRecordedRequest {
    // The desired AFBufferOption. The default is 'BufferIfPossible'.
    string bufferOption = 1;
    // The desired AFUpdateOption. The default is 'Replace'.
    string updateOption = 2;
    // The values to add or update.
    repeated TimedValue values = 3;
    // The ID of the stream.
    string webId = 4;
}

message GetStreamsWebIdRecordedattimeRequest {
    // The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute's default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure.
    string desiredUnits = 1;
    // An optional value that determines the value to return when a value doesn't exist at the exact time specified. The default is 'Auto'.
    string retrievalMode = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The timestamp at which the value is desired.
    string time = 4;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 5;
    // The ID of the stream.
    string webId = 6;
}

message GetStreamsWebIdRecordedattimesRequest {
    // The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute's default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure.
    string desiredUnits = 1;
    // An optional value that determines the value to return when a value doesn't exist at the exact time specified. The default is 'Auto'.
    string retrievalMode = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 4;
    // The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter.
    repeated string time = 5;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 6;
    // The ID of the stream.
    string webId = 7;
}

message GetStreamsWebIdSummaryRequest {
    // Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
    string calculationBasis = 1;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 2;
    // A string containing a filter expression. Expression variables are relative to the attribute. Use '.' to reference the containing attribute.
    string filterExpression = 3;
    // When the sampleType is Interval, sampleInterval specifies how often the filter expression is evaluated when computing the summary for an interval.
    string sampleInterval = 4;
    // Defines the evaluation of an expression over a time range. The default is 'ExpressionRecordedValues'.
    string sampleType = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 7;
    // The duration of each summary interval. If specified in hours, minutes, seconds, or milliseconds, the summary durations will be evenly spaced UTC time intervals. Longer interval types are interpreted using wall clock rules and are time zone dependent.
    string summaryDuration = 8;
    // Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
    repeated string summaryType = 9;
    // Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
    string timeType = 10;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 11;
    // The ID of the stream.
    string webId = 12;
}

message GetStreamsWebIdValueRequest {
    // The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute's default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure.
    string desiredUnits = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // An optional time. The default time context is determined from the owning object - for example, the time range of the event frame or transfer which holds this attribute. Otherwise, the implementation of the Data Reference determines the meaning of no context. For Points or simply configured PI Point Data References, this means the snapshot value of the PI Point on the Data Server.
    string time = 3;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 4;
    // The ID of the stream.
    string webId = 5;
}

message PostStreamsWebIdValueRequest {
    // The desired AFBufferOption. The default is 'BufferIfPossible'.
    string bufferOption = 1;
    // The desired AFUpdateOption. The default is 'Replace'. This parameter is ignored if the attribute is a configuration item.
    string updateOption = 2;
    // The value to add or update.
    TimedValue value = 3;
    // The ID of the stream.
    string webId = 4;
}

message GetStreamsetsChannelRequest {
    // Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is 'false'.
    bool includeInitialValues = 1;
    // The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 2;
}

message GetStreamsetsEndRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 2;
}

message GetStreamsetsInterpolatedRequest {
    // An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 1;
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
    string filterExpression = 2;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 3;
    // The sampling interval, in AFTimeSpan format.
    string interval = 4;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 5;
    // An optional start time. The default is '*-1d'.
    string startTime = 6;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 7;
    // The ID of a stream. Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 8;
}

message GetStreamsetsInterpolatedattimesRequest {
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
    string filterExpression = 1;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 4;
    // The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter.
    repeated string time = 5;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 6;
    // The ID of a stream. Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 7;
}

message GetStreamsetsPlotRequest {
    // An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 1;
    // The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is '24'. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
    int32 intervals = 2;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 3;
    // An optional start time. The default is '*-1d'.
    string startTime = 4;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 5;
    // The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 6;
}

message GetStreamsetsRecordedRequest {
    // An optional value that determines how the times and values of the returned end points are determined. The default is 'Inside'.
    string boundaryType = 1;
    // An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 2;
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. The default is no filtering.
    string filterExpression = 3;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 4;
    // The maximum number of values to be returned. The default is 1000.
    int32 maxCount = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // An optional start time. The default is '*-1d'.
    string startTime = 7;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 8;
    // The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 9;
}

message PostStreamsetsRecordedRequest {
    // The desired AFBufferOption. The default is 'BufferIfPossible'.
    string bufferOption = 1;
    // The desired AFUpdateOption. The default is 'Replace'.
    string updateOption = 2;
    // The values to add or update.
    repeated StreamValues values = 3;
}

message GetStreamsetsRecordedattimeRequest {
    // An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
    string retrievalMode = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The timestamp at which the values are desired.
    string time = 3;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 4;
    // The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 5;
}

message GetStreamsetsRecordedattimesRequest {
    // An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
    string retrievalMode = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 3;
    // The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter.
    repeated string time = 4;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 5;
    // The ID of a stream. Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 6;
}

message GetStreamsetsSummaryRequest {
    // Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
    string calculationBasis = 1;
    // An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 2;
    // A string containing a filter expression. Expression variables are relative to the attribute. Use '.' to reference the containing attribute. The default is no filtering.
    string filterExpression = 3;
    // A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is 'Interval'.
    string sampleInterval = 4;
    // A flag which specifies one or more summaries to compute for each interval over the time range. The default is 'ExpressionRecordedValues'.
    string sampleType = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // An optional start time. The default is '*-1d'.
    string startTime = 7;
    // The duration of each summary interval.
    string summaryDuration = 8;
    // Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
    repeated string summaryType = 9;
    // Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
    string timeType = 10;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 11;
    // The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 12;
}

message GetStreamsetsValueRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used.
    string time = 2;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 3;
    // The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter.
    repeated string webId = 4;
}

message PostStreamsetsValueRequest {
    // The desired AFBufferOption. The default is 'BufferIfPossible'.
    string bufferOption = 1;
    // The desired AFUpdateOption. The default is 'Replace'.
    string updateOption = 2;
    // The values to add or update.
    repeated StreamValues values = 3;
}

message GetStreamsetsWebIdChannelRequest {
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is 'false'.
    bool includeInitialValues = 2;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 3;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 4;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 5;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 6;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 7;
    // The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes.
    string webId = 8;
}

message GetStreamsetsWebIdEndRequest {
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 2;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 5;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 6;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 7;
    // The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes.
    string webId = 8;
}

message GetStreamsetsWebIdInterpolatedRequest {
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 2;
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
    string filterExpression = 3;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 4;
    // The sampling interval, in AFTimeSpan format.
    string interval = 5;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 6;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 7;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 8;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 9;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 10;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 11;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 12;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 13;
    // The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes.
    string webId = 14;
}

message GetStreamsetsWebIdInterpolatedattimesRequest {
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
    string filterExpression = 2;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 3;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 4;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 7;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 8;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 9;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 10;
    // The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter.
    repeated string time = 11;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 12;
    // The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes.
    string webId = 13;
}

message GetStreamsetsWebIdPlotRequest {
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 2;
    // The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is '24'. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
    int32 intervals = 3;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 4;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 5;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 6;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 7;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 8;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 9;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 10;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 11;
    // The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes.
    string webId = 12;
}

message GetStreamsetsWebIdRecordedRequest {
    // An optional value that determines how the times and values of the returned end points are determined. The default is 'Inside'.
    string boundaryType = 1;
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 2;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 3;
    // An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. The default is no filtering.
    string filterExpression = 4;
    // Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
    bool includeFilteredValues = 5;
    // The maximum number of values to be returned. The default is 1000.
    int32 maxCount = 6;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 7;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 8;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 9;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 10;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 11;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 12;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 13;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 14;
    // The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes.
    string webId = 15;
}

message PostStreamsetsWebIdRecordedRequest {
    // The desired AFBufferOption. The default is 'BufferIfPossible'.
    string bufferOption = 1;
    // The desired AFUpdateOption. The default is 'Replace'.
    string updateOption = 2;
    // The values to add or update.
    repeated StreamValues values = 3;
    // The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object.
    string webId = 4;
}

message GetStreamsetsWebIdRecordedattimeRequest {
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 2;
    // An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
    string retrievalMode = 3;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 4;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 5;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 6;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 7;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 8;
    // The timestamp at which the values are desired.
    string time = 9;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 10;
    // The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes.
    string webId = 11;
}

message GetStreamsetsWebIdRecordedattimesRequest {
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 2;
    // An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
    string retrievalMode = 3;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 4;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 5;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 6;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 7;
    // The order that the returned collection is sorted. The default is 'Ascending'.
    string sortOrder = 8;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 9;
    // The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter.
    repeated string time = 10;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 11;
    // The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes.
    string webId = 12;
}

message GetStreamsetsWebIdSummaryRequest {
    // Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
    string calculationBasis = 1;
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 2;
    // An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
    string endTime = 3;
    // A string containing a filter expression. Expression variables are relative to the attribute. Use '.' to reference the containing attribute. The default is no filtering.
    string filterExpression = 4;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 5;
    // A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is 'Interval'.
    string sampleInterval = 6;
    // A flag which specifies one or more summaries to compute for each interval over the time range. The default is 'ExpressionRecordedValues'.
    string sampleType = 7;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 8;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 9;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 10;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 11;
    // An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
    string startTime = 12;
    // The duration of each summary interval.
    string summaryDuration = 13;
    // Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
    repeated string summaryType = 14;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 15;
    // Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
    string timeType = 16;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 17;
    // The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes.
    string webId = 18;
}

message GetStreamsetsWebIdValueRequest {
    // Specify that included attributes must have this category. The default is no category filter.
    string categoryName = 1;
    // The name query string used for filtering attributes. The default is no filter.
    string nameFilter = 2;
    // Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
    bool searchFullHierarchy = 3;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 4;
    // Specified if the search should include attributes with the Excluded property set. The default is 'false'.
    bool showExcluded = 5;
    // Specified if the search should include attributes with the Hidden property set. The default is 'false'.
    bool showHidden = 6;
    // Specify that included attributes must be members of this template. The default is no template filter.
    string templateName = 7;
    // An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used.
    string time = 8;
    // The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
    string timeZone = 9;
    // The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes.
    string webId = 10;
}

message PostStreamsetsWebIdValueRequest {
    // The desired AFBufferOption. The default is 'BufferIfPossible'.
    string bufferOption = 1;
    // The desired AFUpdateOption. The default is 'Replace'.
    string updateOption = 2;
    // The values to add or update.
    repeated StreamValue values = 3;
    // The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object.
    string webId = 4;
}

message GetSystemConfigurationResponse {
}

message GetSystemConfigurationKeyRequest {
    // The key of the configuration item.
    string key = 1;
}

message GetSystemConfigurationKeyResponse {
}

message DeleteSystemConfigurationKeyRequest {
    // The key of the configuration item to remove.
    string key = 1;
}

message GetSystemVersionsResponse {
}

message GetTablecategoriesRequest {
    // The path to the target table category.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetTablecategoriesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The id of the table category.
    string webId = 2;
}

message DeleteTablecategoriesWebIdRequest {
    // The ID of the table category to delete.
    string webId = 1;
}

message GetTablecategoriesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the table category for the security to be checked.
    string webId = 4;
}

message GetTablecategoriesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the table category.
    string webId = 3;
}

message PostTablecategoriesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the table category where the security entry will be created.
    string webId = 3;
}

message GetTablecategoriesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the table category.
    string webId = 3;
}

message PutTablecategoriesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the table category where the security entry will be updated.
    string webId = 4;
}

message DeleteTablecategoriesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the table category where the security entry will be deleted.
    string webId = 3;
}

message GetTablesRequest {
    // The path to the table.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetTablesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the table.
    string webId = 2;
}

message DeleteTablesWebIdRequest {
    // The ID of the table to delete.
    string webId = 1;
}

message GetTablesWebIdCategoriesRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the table.
    string webId = 2;
}

message GetTablesWebIdDataRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the table.
    string webId = 2;
}

message PutTablesWebIdDataRequest {
    // The new table data definition.
    TableData data = 1;
    // The ID of the table on which to update the data.
    string webId = 2;
}

message GetTablesWebIdSecurityRequest {
    // Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
    bool forceRefresh = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
    repeated string userIdentity = 3;
    // The ID of the table for the security to be checked.
    string webId = 4;
}

message GetTablesWebIdSecurityentriesRequest {
    // The name query string used for filtering security entries. The default is no filter.
    string nameFilter = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the table.
    string webId = 3;
}

message PostTablesWebIdSecurityentriesRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The new security entry definition. The full list of allow and deny rights must be supplied.
    SecurityEntry securityEntry = 2;
    // The ID of the table where the security entry will be created.
    string webId = 3;
}

message GetTablesWebIdSecurityentriesNameRequest {
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
    // The ID of the table.
    string webId = 3;
}

message PutTablesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry.
    string name = 2;
    // The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
    SecurityEntry securityEntry = 3;
    // The ID of the table where the security entry will be updated.
    string webId = 4;
}

message DeleteTablesWebIdSecurityentriesNameRequest {
    // If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
    bool applyToChildren = 1;
    // The name of the security entry. For every backslash character (\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\username.
    string name = 2;
    // The ID of the table where the security entry will be deleted.
    string webId = 3;
}

message GetTimerulepluginsRequest {
    // The path to the Time Rule Plug-in.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetTimerulepluginsWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the Time Rule Plug-in.
    string webId = 2;
}

message GetTimerulesRequest {
    // The path to the Time Rule.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetTimerulesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the Time Rule.
    string webId = 2;
}

message DeleteTimerulesWebIdRequest {
    // The ID of the Time Rule.
    string webId = 1;
}

message GetUnitclassesRequest {
    // The path to the unit class.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetUnitclassesWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the unit class.
    string webId = 2;
}

message DeleteUnitclassesWebIdRequest {
    // The ID of the unit class.
    string webId = 1;
}

message GetUnitclassesWebIdCanonicalunitRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of unit class.
    string webId = 2;
}

message GetUnitclassesWebIdUnitsRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of unit class.
    string webId = 2;
}

message PostUnitclassesWebIdUnitsRequest {
    // The new unit definition.
    Unit unitDTO = 1;
    // The ID of the server.
    string webId = 2;
}

message GetUnitsRequest {
    // The path to the unit.
    string path = 1;
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 2;
}

message GetUnitsWebIdRequest {
    // List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
    string selectedFields = 1;
    // The ID of the unit.
    string webId = 2;
}

message DeleteUnitsWebIdRequest {
    // The ID of the unit.
    string webId = 1;
}

message Analysis {
    string AnalysisRulePlugInName = 1;
    bool AutoCreated = 2;
    repeated string CategoryNames = 3;
    string Description = 4;
    int32 GroupId = 5;
    bool HasNotification = 6;
    bool HasTarget = 7;
    bool HasTemplate = 8;
    string Id = 9;
    bool IsConfigured = 10;
    bool IsTimeRuleDefinedByTemplate = 11;
    message Links {
        string AnalysisRule = 1;
        string AnalysisRulePlugIn = 2;
        string Categories = 3;
        string Database = 4;
        string Security = 5;
        string SecurityEntries = 6;
        string Self = 7;
        string Target = 8;
        string Template = 9;
        string TimeRule = 10;
        string TimeRulePlugIn = 11;
    }
    Links Links = 12;
    int32 MaximumQueueSize = 13;
    string Name = 14;
    string OutputTime = 15;
    string Path = 16;
    string Priority = 17;
    bool PublishResults = 18;
    string Status = 19;
    string TargetWebId = 20;
    string TemplateName = 21;
    string TimeRulePlugInName = 22;
    string WebId = 23;
}

message AnalysisCategory {
    string Description = 1;
    string Id = 2;
    message Links {
        string Database = 1;
        string Security = 2;
        string SecurityEntries = 3;
        string Self = 4;
    }
    Links Links = 3;
    string Name = 4;
    string Path = 5;
    string WebId = 6;
}

message AnalysisRule {
    string ConfigString = 1;
    string Description = 2;
    string DisplayString = 3;
    string EditorType = 4;
    bool HasChildren = 5;
    string Id = 6;
    bool IsConfigured = 7;
    bool IsInitializing = 8;
    message Links {
        string Analysis = 1;
        string AnalysisRules = 2;
        string AnalysisTemplate = 3;
        string Parent = 4;
        string PlugIn = 5;
        string Self = 6;
    }
    Links Links = 9;
    string Name = 10;
    string Path = 11;
    string PlugInName = 12;
    repeated string SupportedBehaviors = 13;
    string VariableMapping = 14;
    string WebId = 15;
}

message AnalysisRulePlugIn {
    string AssemblyFileName = 1;
    string AssemblyID = 2;
    repeated string AssemblyLoadProperties = 3;
    string AssemblyTime = 4;
    int32 CompatibilityVersion = 5;
    string Description = 6;
    string Id = 7;
    bool IsBrowsable = 8;
    bool IsNonEditableConfig = 9;
    message Links {
        string AssetServer = 1;
        string Self = 2;
    }
    Links Links = 10;
    string LoadedAssemblyTime = 11;
    string LoadedVersion = 12;
    string Name = 13;
    string Path = 14;
    string Version = 15;
    string WebId = 16;
}

message AnalysisTemplate {
    string AnalysisRulePlugInName = 1;
    repeated string CategoryNames = 2;
    bool CreateEnabled = 3;
    string Description = 4;
    int32 GroupId = 5;
    bool HasNotificationTemplate = 6;
    bool HasTarget = 7;
    string Id = 8;
    message Links {
        string AnalysisRule = 1;
        string AnalysisRulePlugIn = 2;
        string Categories = 3;
        string Database = 4;
        string Security = 5;
        string SecurityEntries = 6;
        string Self = 7;
        string Target = 8;
        string TimeRule = 9;
        string TimeRulePlugIn = 10;
    }
    Links Links = 9;
    string Name = 10;
    string OutputTime = 11;
    string Path = 12;
    string TargetName = 13;
    string TimeRulePlugInName = 14;
    string WebId = 15;
}

message Annotation {
    string CreationDate = 1;
    string Creator = 2;
    string Description = 3;
    string Id = 4;
    message Links {
        string Owner = 1;
        string Self = 2;
    }
    Links Links = 5;
    string Modifier = 6;
    string ModifyDate = 7;
    string Name = 8;
    message Value {
    }
    Value Value = 9;
}

message AssetDatabase {
    string Description = 1;
    map<string, Value> ExtendedProperties = 2;
    string Id = 3;
    message Links {
        string AnalysisCategories = 1;
        string AnalysisTemplates = 2;
        string AssetServer = 3;
        string AttributeCategories = 4;
        string ElementCategories = 5;
        string ElementTemplates = 6;
        string Elements = 7;
        string EnumerationSets = 8;
        string EventFrames = 9;
        string Security = 10;
        string SecurityEntries = 11;
        string Self = 12;
        string TableCategories = 13;
        string Tables = 14;
    }
    Links Links = 4;
    string Name = 5;
    string Path = 6;
    string WebId = 7;
}

message AssetServer {
    string Description = 1;
    map<string, Value> ExtendedProperties = 2;
    string Id = 3;
    bool IsConnected = 4;
    message Links {
        string AnalysisRulePlugIns = 1;
        string Databases = 2;
        string Security = 3;
        string SecurityEntries = 4;
        string SecurityIdentities = 5;
        string SecurityMappings = 6;
        string Self = 7;
        string TimeRulePlugIns = 8;
        string UnitClasses = 9;
    }
    Links Links = 5;
    string Name = 6;
    string Path = 7;
    string ServerVersion = 8;
    string WebId = 9;
}

message Attribute {
    repeated string CategoryNames = 1;
    string ConfigString = 2;
    string DataReferencePlugIn = 3;
    string DefaultUnitsName = 4;
    string Description = 5;
    bool HasChildren = 6;
    string Id = 7;
    bool IsConfigurationItem = 8;
    bool IsExcluded = 9;
    bool IsHidden = 10;
    bool IsManualDataEntry = 11;
    message Links {
        string Attributes = 1;
        string Categories = 2;
        string Element = 3;
        string EndValue = 4;
        string EnumerationSet = 5;
        string EventFrame = 6;
        string InterpolatedData = 7;
        string Parent = 8;
        string PlotData = 9;
        string Point = 10;
        string RecordedData = 11;
        string Self = 12;
        string SummaryData = 13;
        string Template = 14;
        string Trait = 15;
        string Value = 16;
    }
    Links Links = 12;
    string Name = 13;
    string Path = 14;
    bool Step = 15;
    string TraitName = 16;
    string Type = 17;
    string TypeQualifier = 18;
    string WebId = 19;
}

message AttributeCategory {
    string Description = 1;
    string Id = 2;
    message Links {
        string Database = 1;
        string Security = 2;
        string SecurityEntries = 3;
        string Self = 4;
    }
    Links Links = 3;
    string Name = 4;
    string Path = 5;
    string WebId = 6;
}

message AttributeTemplate {
    repeated string CategoryNames = 1;
    string ConfigString = 2;
    string DataReferencePlugIn = 3;
    string DefaultUnitsName = 4;
    message DefaultValue {
    }
    DefaultValue DefaultValue = 5;
    string Description = 6;
    bool HasChildren = 7;
    string Id = 8;
    bool IsConfigurationItem = 9;
    bool IsExcluded = 10;
    bool IsHidden = 11;
    bool IsManualDataEntry = 12;
    message Links {
        string AttributeTemplates = 1;
        string Categories = 2;
        string ElementTemplate = 3;
        string Parent = 4;
        string Self = 5;
        string Trait = 6;
    }
    Links Links = 13;
    string Name = 14;
    string Path = 15;
    string TraitName = 16;
    string Type = 17;
    string TypeQualifier = 18;
    string WebId = 19;
}

message AttributeTrait {
    string Abbreviation = 1;
    bool AllowChildAttributes = 2;
    bool AllowDuplicates = 3;
    bool IsAllowedOnRootAttribute = 4;
    bool IsTypeInherited = 5;
    bool IsUOMInherited = 6;
    message Links {
        string Self = 1;
    }
    Links Links = 7;
    string Name = 8;
    bool RequireNumeric = 9;
    bool RequireString = 10;
}

message CacheInstance {
    string Id = 1;
    string LastRefreshTime = 2;
    string ScheduledExpirationTime = 3;
    string User = 4;
    string WillRefreshAfter = 5;
}

message DataServer {
    string Id = 1;
    bool IsConnected = 2;
    message Links {
        string EnumerationSets = 1;
        string Points = 2;
        string Self = 3;
    }
    Links Links = 3;
    string Name = 4;
    string Path = 5;
    string ServerVersion = 6;
    string WebId = 7;
}

message Element {
    repeated string CategoryNames = 1;
    string Description = 2;
    map<string, Value> ExtendedProperties = 3;
    bool HasChildren = 4;
    string Id = 5;
    message Links {
        string Analyses = 1;
        string Attributes = 2;
        string Categories = 3;
        string Database = 4;
        string DefaultAttribute = 5;
        string Elements = 6;
        string EndValue = 7;
        string EventFrames = 8;
        string InterpolatedData = 9;
        string Parent = 10;
        string PlotData = 11;
        string RecordedData = 12;
        string Security = 13;
        string SecurityEntries = 14;
        string Self = 15;
        string SummaryData = 16;
        string Template = 17;
        string Value = 18;
    }
    Links Links = 6;
    string Name = 7;
    string Path = 8;
    string TemplateName = 9;
    string WebId = 10;
}

message ElementCategory {
    string Description = 1;
    string Id = 2;
    message Links {
        string Database = 1;
        string Security = 2;
        string SecurityEntries = 3;
        string Self = 4;
    }
    Links Links = 3;
    string Name = 4;
    string Path = 5;
    string WebId = 6;
}

message ElementTemplate {
    bool AllowElementToExtend = 1;
    string BaseTemplate = 2;
    bool CanBeAcknowledged = 3;
    repeated string CategoryNames = 4;
    string Description = 5;
    map<string, Value> ExtendedProperties = 6;
    string Id = 7;
    string InstanceType = 8;
    message Links {
        string AnalysisTemplates = 1;
        string AttributeTemplates = 2;
        string BaseTemplate = 3;
        string Categories = 4;
        string Database = 5;
        string DefaultAttribute = 6;
        string Security = 7;
        string SecurityEntries = 8;
        string Self = 9;
    }
    Links Links = 9;
    string Name = 10;
    string NamingPattern = 11;
    string Path = 12;
    string Severity = 13;
    string WebId = 14;
}

message EnumerationSet {
    string Description = 1;
    string Id = 2;
    message Links {
        string DataServer = 1;
        string Database = 2;
        string Security = 3;
        string SecurityEntries = 4;
        string Self = 5;
        string Values = 6;
    }
    Links Links = 3;
    string Name = 4;
    string Path = 5;
    bool SerializeDescription = 6;
    string WebId = 7;
}

message EnumerationValue {
    string Description = 1;
    string Id = 2;
    message Links {
        string EnumerationSet = 1;
        string Self = 2;
    }
    Links Links = 3;
    string Name = 4;
    string Path = 5;
    bool SerializeDescription = 6;
    bool SerializeId = 7;
    bool SerializeLinks = 8;
    bool SerializePath = 9;
    bool SerializeWebId = 10;
    int32 Value = 11;
    string WebId = 12;
}

message Errors {
    repeated string Errors = 1;
}

message EventFrame {
    string AcknowledgedBy = 1;
    string AcknowledgedDate = 2;
    bool AreValuesCaptured = 3;
    bool CanBeAcknowledged = 4;
    repeated string CategoryNames = 5;
    string Description = 6;
    string EndTime = 7;
    map<string, Value> ExtendedProperties = 8;
    bool HasChildren = 9;
    string Id = 10;
    bool IsAcknowledged = 11;
    bool IsAnnotated = 12;
    bool IsLocked = 13;
    message Links {
        string Annotations = 1;
        string Attributes = 2;
        string Categories = 3;
        string Database = 4;
        string DefaultAttribute = 5;
        string EndValue = 6;
        string EventFrames = 7;
        string InterpolatedData = 8;
        string Parent = 9;
        string PlotData = 10;
        string PrimaryReferencedElement = 11;
        string RecordedData = 12;
        string ReferencedElements = 13;
        string Security = 14;
        string SecurityEntries = 15;
        string Self = 16;
        string SummaryData = 17;
        string Template = 18;
        string Value = 19;
    }
    Links Links = 14;
    string Name = 15;
    string Path = 16;
    repeated string RefElementWebIds = 17;
    Security Security = 18;
    string Severity = 19;
    string StartTime = 20;
    string TemplateName = 21;
    string WebId = 22;
}

message Item[Attribute] {
    Errors Exception = 1;
    string Identifier = 2;
    string IdentifierType = 3;
    Attribute Object = 4;
}

message Item[Element] {
    Errors Exception = 1;
    string Identifier = 2;
    string IdentifierType = 3;
    Element Object = 4;
}

message Item[EventFrame] {
    Errors Exception = 1;
    string Identifier = 2;
    string IdentifierType = 3;
    EventFrame Object = 4;
}

message Item[Point] {
    Errors Exception = 1;
    string Identifier = 2;
    string IdentifierType = 3;
    Point Object = 4;
}

message Items[AnalysisCategory] {
    repeated AnalysisCategory Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[AnalysisRulePlugIn] {
    repeated AnalysisRulePlugIn Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[AnalysisRule] {
    repeated AnalysisRule Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[AnalysisTemplate] {
    repeated AnalysisTemplate Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Analysis] {
    repeated Analysis Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Annotation] {
    repeated Annotation Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[AssetDatabase] {
    repeated AssetDatabase Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[AssetServer] {
    repeated AssetServer Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[AttributeCategory] {
    repeated AttributeCategory Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[AttributeTemplate] {
    repeated AttributeTemplate Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[AttributeTrait] {
    repeated AttributeTrait Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Attribute] {
    repeated Attribute Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[CacheInstance] {
    repeated CacheInstance Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[DataServer] {
    repeated DataServer Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[ElementCategory] {
    repeated ElementCategory Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[ElementTemplate] {
    repeated ElementTemplate Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Element] {
    repeated Element Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[EnumerationSet] {
    repeated EnumerationSet Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[EnumerationValue] {
    repeated EnumerationValue Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[EventFrame] {
    repeated EventFrame Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Item[Attribute]] {
    repeated Item[Attribute] Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Item[Element]] {
    repeated Item[Element] Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Item[EventFrame]] {
    repeated Item[EventFrame] Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Item[Point]] {
    repeated Item[Point] Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Items[Substatus]] {
    repeated Items[Substatus] Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[PointAttribute] {
    repeated PointAttribute Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Point] {
    repeated Point Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[SecurityEntry] {
    repeated SecurityEntry Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[SecurityIdentity] {
    repeated SecurityIdentity Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[SecurityMapping] {
    repeated SecurityMapping Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[SecurityRights] {
    repeated SecurityRights Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[StreamSummaries] {
    repeated StreamSummaries Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[StreamValue] {
    repeated StreamValue Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[StreamValues] {
    repeated StreamValues Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Substatus] {
    repeated Substatus Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[SummaryValue] {
    repeated SummaryValue Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[TableCategory] {
    repeated TableCategory Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[Table] {
    repeated Table Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[TimeRulePlugIn] {
    repeated TimeRulePlugIn Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Items[UnitClass] {
    repeated UnitClass Items = 1;
    message Links {
        string First = 1;
        string Last = 2;
        string Next = 3;
        string Previous = 4;
    }
    Links Links = 2;
}

message Landing {
    message Links {
        string AssetServers = 1;
        string DataServers = 2;
        string Search = 3;
        string Self = 4;
        string System = 5;
    }
    Links Links = 1;
}

message Point {
    string Descriptor = 1;
    string DigitalSetName = 2;
    string EngineeringUnits = 3;
    bool Future = 4;
    int32 Id = 5;
    message Links {
        string Attributes = 1;
        string DataServer = 2;
        string EndValue = 3;
        string InterpolatedData = 4;
        string PlotData = 5;
        string RecordedData = 6;
        string Self = 7;
        string SummaryData = 8;
        string Value = 9;
    }
    Links Links = 6;
    string Name = 7;
    string Path = 8;
    string PointClass = 9;
    string PointType = 10;
    bool Step = 11;
    string WebId = 12;
}

message PointAttribute {
    message Links {
        string Point = 1;
        string Self = 2;
    }
    Links Links = 1;
    string Name = 2;
    message Value {
    }
    Value Value = 3;
}

message Request {
    string Content = 1;
    map<string, string> Headers = 2;
    string Method = 3;
    repeated string Parameters = 4;
    repeated string ParentIds = 5;
    RequestTemplate RequestTemplate = 6;
    string Resource = 7;
}

message RequestTemplate {
    string Resource = 1;
}

message Response {
    message Content {
    }
    Content Content = 1;
    map<string, string> Headers = 2;
    int32 Status = 3;
}

message Security {
    bool CanAnnotate = 1;
    bool CanDelete = 2;
    bool CanExecute = 3;
    bool CanRead = 4;
    bool CanReadData = 5;
    bool CanSubscribe = 6;
    bool CanSubscribeOthers = 7;
    bool CanWrite = 8;
    bool CanWriteData = 9;
    bool HasAdmin = 10;
    repeated string Rights = 11;
}

message SecurityEntry {
    repeated string AllowRights = 1;
    repeated string DenyRights = 2;
    message Links {
        string SecurableObject = 1;
        string SecurityIdentity = 2;
        string Self = 3;
    }
    Links Links = 3;
    string Name = 4;
    string SecurityIdentityName = 5;
}

message SecurityIdentity {
    string Description = 1;
    string Id = 2;
    bool IsEnabled = 3;
    message Links {
        string AssetServer = 1;
        string Security = 2;
        string SecurityEntries = 3;
        string SecurityMappings = 4;
        string Self = 5;
    }
    Links Links = 4;
    string Name = 5;
    string Path = 6;
    string WebId = 7;
}

message SecurityMapping {
    string Account = 1;
    string Description = 2;
    string Id = 3;
    message Links {
        string AssetServer = 1;
        string Security = 2;
        string SecurityEntries = 3;
        string SecurityIdentity = 4;
        string Self = 5;
    }
    Links Links = 4;
    string Name = 5;
    string Path = 6;
    string SecurityIdentityWebId = 7;
    string WebId = 8;
}

message SecurityRights {
    message Links {
        string Owner = 1;
        string Self = 2;
    }
    Links Links = 1;
    string OwnerWebId = 2;
    string SecurityItem = 3;
    string UserIdentity = 4;
}

message StreamSummaries {
    repeated SummaryValue Items = 1;
    message Links {
        string Source = 1;
    }
    Links Links = 2;
    string Name = 3;
    string Path = 4;
    string WebId = 5;
}

message StreamValue {
    message Links {
        string Source = 1;
    }
    Links Links = 1;
    string Name = 2;
    string Path = 3;
    TimedValue Value = 4;
    string WebId = 5;
}

message StreamValues {
    repeated TimedValue Items = 1;
    message Links {
        string Source = 1;
    }
    Links Links = 2;
    string Name = 3;
    string Path = 4;
    string UnitsAbbreviation = 5;
    string WebId = 6;
}

message Substatus {
    string Message = 1;
    int32 Substatus = 2;
}

message SummaryValue {
    string Type = 1;
    TimedValue Value = 2;
}

message SystemLanding {
    message Links {
        string CacheInstances = 1;
        string Configuration = 2;
        string Self = 3;
        string Status = 4;
        string UserInfo = 5;
        string Versions = 6;
    }
    Links Links = 1;
    string ProductTitle = 2;
    string ProductVersion = 3;
}

message SystemStatus {
    int32 CacheInstances = 1;
    string State = 2;
    double UpTimeInMinutes = 3;
}

message Table {
    repeated string CategoryNames = 1;
    bool ConvertToLocalTime = 2;
    string Description = 3;
    string Id = 4;
    message Links {
        string Categories = 1;
        string Data = 2;
        string Database = 3;
        string Security = 4;
        string SecurityEntries = 5;
        string Self = 6;
    }
    Links Links = 5;
    string Name = 6;
    string Path = 7;
    string TimeZone = 8;
    string WebId = 9;
}

message TableCategory {
    string Description = 1;
    string Id = 2;
    message Links {
        string Database = 1;
        string Security = 2;
        string SecurityEntries = 3;
        string Self = 4;
    }
    Links Links = 3;
    string Name = 4;
    string Path = 5;
    string WebId = 6;
}

message TableData {
    map<string, string> Columns = 1;
    message Row {
    }
    repeated Row Rows = 2;
}

message TimeRule {
    string ConfigString = 1;
    string ConfigStringStored = 2;
    string Description = 3;
    string DisplayString = 4;
    string EditorType = 5;
    string Id = 6;
    bool IsConfigured = 7;
    bool IsInitializing = 8;
    message Links {
        string Analysis = 1;
        string AnalysisTemplate = 2;
        string PlugIn = 3;
        string Self = 4;
    }
    Links Links = 9;
    bool MergeDuplicatedItems = 10;
    string Name = 11;
    string Path = 12;
    string PlugInName = 13;
    string WebId = 14;
}

message TimeRulePlugIn {
    string AssemblyFileName = 1;
    string AssemblyID = 2;
    repeated string AssemblyLoadProperties = 3;
    string AssemblyTime = 4;
    int32 CompatibilityVersion = 5;
    string Description = 6;
    string Id = 7;
    bool IsBrowsable = 8;
    bool IsNonEditableConfig = 9;
    message Links {
        string AssetServer = 1;
        string Self = 2;
    }
    Links Links = 10;
    string LoadedAssemblyTime = 11;
    string LoadedVersion = 12;
    string Name = 13;
    string Path = 14;
    string Version = 15;
    string WebId = 16;
}

message TimedValue {
    Errors Exception = 1;
    bool Good = 2;
    bool Questionable = 3;
    bool Substituted = 4;
    string Timestamp = 5;
    string UnitsAbbreviation = 6;
    message Value {
    }
    Value Value = 7;
}

message TimedValues {
    repeated TimedValue Items = 1;
    string UnitsAbbreviation = 2;
}

message Unit {
    string Abbreviation = 1;
    string Description = 2;
    double Factor = 3;
    string Id = 4;
    message Links {
        string Class = 1;
        string ReferenceUnit = 2;
        string Self = 3;
    }
    Links Links = 5;
    string Name = 6;
    double Offset = 7;
    string Path = 8;
    double ReferenceFactor = 9;
    double ReferenceOffset = 10;
    string ReferenceUnitAbbreviation = 11;
    string WebId = 12;
}

message UnitClass {
    string CanonicalUnitAbbreviation = 1;
    string CanonicalUnitName = 2;
    string Description = 3;
    string Id = 4;
    message Links {
        string AssetServer = 1;
        string CanonicalUnit = 2;
        string Self = 3;
        string Units = 4;
    }
    Links Links = 5;
    string Name = 6;
    string Path = 7;
    string WebId = 8;
}

message UserInfo {
    string IdentityType = 1;
    string ImpersonationLevel = 2;
    bool IsAuthenticated = 3;
    string Name = 4;
    string SID = 5;
}

message Value {
    Errors Exception = 1;
    message Value {
    }
    Value Value = 2;
}

message Version {
    string Build = 1;
    string FullVersion = 2;
    string MajorMinorRevision = 3;
}

service PIWebAPI2017SwaggerSpecService {
    // Get top level links for this PI System Web API instance.
    rpc Get(google.protobuf.Empty) returns (Landing) {
      option (google.api.http) = {
        get: "/piwebapi/"
      };
    }
    // Retrieve an Analysis by path.
    // 
    // This method returns an Analysis based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetAnalyses(GetAnalysesRequest) returns (Analysis) {
      option (google.api.http) = {
        get: "/piwebapi/analyses"
      };
    }
    // Retrieve an Analysis.
    rpc GetAnalysesWebId(GetAnalysesWebIdRequest) returns (Analysis) {
      option (google.api.http) = {
        get: "/piwebapi/analyses/{webId}"
      };
    }
    // Delete an Analysis.
    rpc DeleteAnalysesWebId(DeleteAnalysesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/analyses/{webId}"
      };
    }
    // Get an Analysis' categories.
    rpc GetAnalysesWebIdCategories(GetAnalysesWebIdCategoriesRequest) returns (Items[AnalysisCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/analyses/{webId}/categories"
      };
    }
    // Get the security information of the specified security item associated with the Analysis for a specified user.
    rpc GetAnalysesWebIdSecurity(GetAnalysesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/analyses/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the analysis based on the specified criteria. By default, all security entries for this analysis are returned.
    rpc GetAnalysesWebIdSecurityentries(GetAnalysesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/analyses/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the analysis.
    rpc PostAnalysesWebIdSecurityentries(PostAnalysesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/analyses/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the analysis with the specified name.
    rpc GetAnalysesWebIdSecurityentriesName(GetAnalysesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/analyses/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the analysis.
    rpc PutAnalysesWebIdSecurityentriesName(PutAnalysesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/analyses/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the analysis.
    rpc DeleteAnalysesWebIdSecurityentriesName(DeleteAnalysesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/analyses/{webId}/securityentries/{name}"
      };
    }
    // Retrieve an analysis category by path.
    rpc GetAnalysiscategories(GetAnalysiscategoriesRequest) returns (AnalysisCategory) {
      option (google.api.http) = {
        get: "/piwebapi/analysiscategories"
      };
    }
    // Retrieve an analysis category.
    rpc GetAnalysiscategoriesWebId(GetAnalysiscategoriesWebIdRequest) returns (AnalysisCategory) {
      option (google.api.http) = {
        get: "/piwebapi/analysiscategories/{webId}"
      };
    }
    // Delete an analysis category.
    rpc DeleteAnalysiscategoriesWebId(DeleteAnalysiscategoriesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/analysiscategories/{webId}"
      };
    }
    // Get the security information of the specified security item associated with the analysis category for a specified user.
    rpc GetAnalysiscategoriesWebIdSecurity(GetAnalysiscategoriesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/analysiscategories/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the analysis category based on the specified criteria. By default, all security entries for this analysis category are returned.
    rpc GetAnalysiscategoriesWebIdSecurityentries(GetAnalysiscategoriesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/analysiscategories/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the analysis category.
    rpc PostAnalysiscategoriesWebIdSecurityentries(PostAnalysiscategoriesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/analysiscategories/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the analysis category with the specified name.
    rpc GetAnalysiscategoriesWebIdSecurityentriesName(GetAnalysiscategoriesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/analysiscategories/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the analysis category.
    rpc PutAnalysiscategoriesWebIdSecurityentriesName(PutAnalysiscategoriesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/analysiscategories/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the analysis category.
    rpc DeleteAnalysiscategoriesWebIdSecurityentriesName(DeleteAnalysiscategoriesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/analysiscategories/{webId}/securityentries/{name}"
      };
    }
    // Retrieve an Analysis Rule Plug-in by path.
    // 
    // This method returns an Analysis Rule Plug-in based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetAnalysisruleplugins(GetAnalysisrulepluginsRequest) returns (AnalysisRulePlugIn) {
      option (google.api.http) = {
        get: "/piwebapi/analysisruleplugins"
      };
    }
    // Retrieve an Analysis Rule Plug-in.
    rpc GetAnalysisrulepluginsWebId(GetAnalysisrulepluginsWebIdRequest) returns (AnalysisRulePlugIn) {
      option (google.api.http) = {
        get: "/piwebapi/analysisruleplugins/{webId}"
      };
    }
    // Retrieve an Analysis Rule by path.
    // 
    // This method returns an Analysis Rule based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetAnalysisrules(GetAnalysisrulesRequest) returns (AnalysisRule) {
      option (google.api.http) = {
        get: "/piwebapi/analysisrules"
      };
    }
    // Retrieve an Analysis Rule.
    rpc GetAnalysisrulesWebId(GetAnalysisrulesWebIdRequest) returns (AnalysisRule) {
      option (google.api.http) = {
        get: "/piwebapi/analysisrules/{webId}"
      };
    }
    // Delete an Analysis Rule.
    rpc DeleteAnalysisrulesWebId(DeleteAnalysisrulesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/analysisrules/{webId}"
      };
    }
    // Get the child Analysis Rules of the Analysis Rule.
    rpc GetAnalysisrulesWebIdAnalysisrules(GetAnalysisrulesWebIdAnalysisrulesRequest) returns (Items[AnalysisRule]) {
      option (google.api.http) = {
        get: "/piwebapi/analysisrules/{webId}/analysisrules"
      };
    }
    // Create a new Analysis Rule as a child of an existing Analysis Rule.
    rpc PostAnalysisrulesWebIdAnalysisrules(PostAnalysisrulesWebIdAnalysisrulesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/analysisrules/{webId}/analysisrules"
        body: "analysisRule"
      };
    }
    // Retrieve an analysis template by path.
    // 
    // This method returns an analysis template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetAnalysistemplates(GetAnalysistemplatesRequest) returns (AnalysisTemplate) {
      option (google.api.http) = {
        get: "/piwebapi/analysistemplates"
      };
    }
    // Create an Analysis template based upon a specified Analysis.
    rpc PostAnalysistemplates(PostAnalysistemplatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/analysistemplates"
      };
    }
    // Retrieve an analysis template.
    rpc GetAnalysistemplatesWebId(GetAnalysistemplatesWebIdRequest) returns (AnalysisTemplate) {
      option (google.api.http) = {
        get: "/piwebapi/analysistemplates/{webId}"
      };
    }
    // Delete an analysis template.
    // 
    // Deleting an analysis template will delete any anlysis which was created from it, unless the analysis is tied to a notification.
    rpc DeleteAnalysistemplatesWebId(DeleteAnalysistemplatesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/analysistemplates/{webId}"
      };
    }
    // Get an analysis template's categories.
    rpc GetAnalysistemplatesWebIdCategories(GetAnalysistemplatesWebIdCategoriesRequest) returns (Items[AnalysisCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/analysistemplates/{webId}/categories"
      };
    }
    // Get the security information of the specified security item associated with the analysis template for a specified user.
    rpc GetAnalysistemplatesWebIdSecurity(GetAnalysistemplatesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/analysistemplates/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the analysis template based on the specified criteria. By default, all security entries for this analysis template are returned.
    rpc GetAnalysistemplatesWebIdSecurityentries(GetAnalysistemplatesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/analysistemplates/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the analysis template.
    rpc PostAnalysistemplatesWebIdSecurityentries(PostAnalysistemplatesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/analysistemplates/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the analysis template with the specified name.
    rpc GetAnalysistemplatesWebIdSecurityentriesName(GetAnalysistemplatesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/analysistemplates/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the analysis template.
    rpc PutAnalysistemplatesWebIdSecurityentriesName(PutAnalysistemplatesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/analysistemplates/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the analysis template.
    rpc DeleteAnalysistemplatesWebIdSecurityentriesName(DeleteAnalysistemplatesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/analysistemplates/{webId}/securityentries/{name}"
      };
    }
    // Retrieve an Asset Database by path.
    // 
    // This method returns an asset database based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetAssetdatabases(GetAssetdatabasesRequest) returns (AssetDatabase) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases"
      };
    }
    // Retrieve an Asset Database.
    rpc GetAssetdatabasesWebId(GetAssetdatabasesWebIdRequest) returns (AssetDatabase) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}"
      };
    }
    // Delete an asset database.
    rpc DeleteAssetdatabasesWebId(DeleteAssetdatabasesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/assetdatabases/{webId}"
      };
    }
    // Retrieve analyses based on the specified conditions.
    // 
    // Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
    rpc GetAssetdatabasesWebIdAnalyses(GetAssetdatabasesWebIdAnalysesRequest) returns (Items[Analysis]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/analyses"
      };
    }
    // Retrieve analysis categories for a given Asset Database.
    rpc GetAssetdatabasesWebIdAnalysiscategories(GetAssetdatabasesWebIdAnalysiscategoriesRequest) returns (Items[AnalysisCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/analysiscategories"
      };
    }
    // Create an analysis category at the Asset Database root.
    rpc PostAssetdatabasesWebIdAnalysiscategories(PostAssetdatabasesWebIdAnalysiscategoriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/analysiscategories"
        body: "analysisCategory"
      };
    }
    // Retrieve analysis templates based on the specified criteria. By default, all analysis templates in the specified Asset Database are returned.
    // 
    // Users can search for the analysis templates based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
    rpc GetAssetdatabasesWebIdAnalysistemplates(GetAssetdatabasesWebIdAnalysistemplatesRequest) returns (Items[AnalysisTemplate]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/analysistemplates"
      };
    }
    // Create an analysis template at the Asset Database root.
    // 
    // Analyses that are based on an analysis template will inherit characteristics defined in the template.
    rpc PostAssetdatabasesWebIdAnalysistemplates(PostAssetdatabasesWebIdAnalysistemplatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/analysistemplates"
        body: "template"
      };
    }
    // Retrieve attribute categories for a given Asset Database.
    rpc GetAssetdatabasesWebIdAttributecategories(GetAssetdatabasesWebIdAttributecategoriesRequest) returns (Items[AttributeCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/attributecategories"
      };
    }
    // Create an attribute category at the Asset Database root.
    rpc PostAssetdatabasesWebIdAttributecategories(PostAssetdatabasesWebIdAttributecategoriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/attributecategories"
        body: "attributeCategory"
      };
    }
    // Retrieves a list of element attributes matching the specified filters from the specified asset database.
    rpc GetAssetdatabasesWebIdElementattributes(GetAssetdatabasesWebIdElementattributesRequest) returns (Items[Attribute]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/elementattributes"
      };
    }
    // Retrieve element categories for a given Asset Database.
    rpc GetAssetdatabasesWebIdElementcategories(GetAssetdatabasesWebIdElementcategoriesRequest) returns (Items[ElementCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/elementcategories"
      };
    }
    // Create an element category at the Asset Database root.
    rpc PostAssetdatabasesWebIdElementcategories(PostAssetdatabasesWebIdElementcategoriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/elementcategories"
        body: "elementCategory"
      };
    }
    // Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified asset database.
    // 
    // Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
    rpc GetAssetdatabasesWebIdElements(GetAssetdatabasesWebIdElementsRequest) returns (Items[Element]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/elements"
      };
    }
    // Create a child element.
    rpc PostAssetdatabasesWebIdElements(PostAssetdatabasesWebIdElementsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/elements"
        body: "element"
      };
    }
    // Retrieve element templates based on the specified criteria. Only templates of instance type "Element" and "EventFrame" are returned. By default, all element and event frame templates in the specified Asset Database are returned.
    // 
    // Users can search for the element and event frame template based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
    rpc GetAssetdatabasesWebIdElementtemplates(GetAssetdatabasesWebIdElementtemplatesRequest) returns (Items[ElementTemplate]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/elementtemplates"
      };
    }
    // Create a template at the Asset Database root. Specify InstanceType of "Element" or "EventFrame" to create element or event frame template respectively. Only these two types of templates can be created.
    // 
    // Elements and event frames that are based on an element template will inherit characteristics defined in the template.
    rpc PostAssetdatabasesWebIdElementtemplates(PostAssetdatabasesWebIdElementtemplatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/elementtemplates"
        body: "template"
      };
    }
    // Retrieve enumeration sets for given asset database.
    rpc GetAssetdatabasesWebIdEnumerationsets(GetAssetdatabasesWebIdEnumerationsetsRequest) returns (Items[EnumerationSet]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/enumerationsets"
      };
    }
    // Create an enumeration set at the Asset Database.
    rpc PostAssetdatabasesWebIdEnumerationsets(PostAssetdatabasesWebIdEnumerationsetsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/enumerationsets"
        body: "enumerationSet"
      };
    }
    // Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
    rpc GetAssetdatabasesWebIdEventframeattributes(GetAssetdatabasesWebIdEventframeattributesRequest) returns (Items[Attribute]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/eventframeattributes"
      };
    }
    // Retrieve event frames based on the specified conditions. By default, returns all children of the specified root resource with a start time in the past 8 hours.
    rpc GetAssetdatabasesWebIdEventframes(GetAssetdatabasesWebIdEventframesRequest) returns (Items[EventFrame]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/eventframes"
      };
    }
    // Create an event frame.
    rpc PostAssetdatabasesWebIdEventframes(PostAssetdatabasesWebIdEventframesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/eventframes"
        body: "eventFrame"
      };
    }
    // Export the asset database.
    rpc GetAssetdatabasesWebIdExport(GetAssetdatabasesWebIdExportRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/export"
      };
    }
    // Import an asset database.
    rpc PostAssetdatabasesWebIdImport(PostAssetdatabasesWebIdImportRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/import"
      };
    }
    // Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements at the root level of the asset database.
    // 
    // Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
    rpc GetAssetdatabasesWebIdReferencedelements(GetAssetdatabasesWebIdReferencedelementsRequest) returns (Items[Element]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/referencedelements"
      };
    }
    // Add a reference to an existing element to the specified database.
    rpc PostAssetdatabasesWebIdReferencedelements(PostAssetdatabasesWebIdReferencedelementsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/referencedelements"
      };
    }
    // Remove a reference to an existing element from the specified database.
    rpc DeleteAssetdatabasesWebIdReferencedelements(DeleteAssetdatabasesWebIdReferencedelementsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/assetdatabases/{webId}/referencedelements"
      };
    }
    // Get the security information of the specified security item associated with the asset database for a specified user.
    rpc GetAssetdatabasesWebIdSecurity(GetAssetdatabasesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/security"
      };
    }
    // Retrieve the security entries of the specified security item associated with the asset database based on the specified criteria. By default, all security entries for this asset database are returned.
    rpc GetAssetdatabasesWebIdSecurityentries(GetAssetdatabasesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the asset database.
    rpc PostAssetdatabasesWebIdSecurityentries(PostAssetdatabasesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry of the specified security item associated with the asset database with the specified name.
    rpc GetAssetdatabasesWebIdSecurityentriesName(GetAssetdatabasesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the asset database.
    rpc PutAssetdatabasesWebIdSecurityentriesName(PutAssetdatabasesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/assetdatabases/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the asset database.
    rpc DeleteAssetdatabasesWebIdSecurityentriesName(DeleteAssetdatabasesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/assetdatabases/{webId}/securityentries/{name}"
      };
    }
    // Retrieve table categories for a given Asset Database.
    rpc GetAssetdatabasesWebIdTablecategories(GetAssetdatabasesWebIdTablecategoriesRequest) returns (Items[TableCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/tablecategories"
      };
    }
    // Create a table category on the Asset Database.
    rpc PostAssetdatabasesWebIdTablecategories(PostAssetdatabasesWebIdTablecategoriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/tablecategories"
        body: "tableCategory"
      };
    }
    // Retrieve tables for given Asset Database.
    rpc GetAssetdatabasesWebIdTables(GetAssetdatabasesWebIdTablesRequest) returns (Items[Table]) {
      option (google.api.http) = {
        get: "/piwebapi/assetdatabases/{webId}/tables"
      };
    }
    // Create a table on the Asset Database.
    rpc PostAssetdatabasesWebIdTables(PostAssetdatabasesWebIdTablesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetdatabases/{webId}/tables"
        body: "table"
      };
    }
    // Retrieve a list of all Asset Servers known to this service.
    rpc GetAssetservers(GetAssetserversRequest) returns (Items[AssetServer]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers"
      };
    }
    // Retrieve an Asset Server by name.
    // 
    // This method returns an asset server based on the name associated with it. Users should primarily search with the WebID when available.
    rpc GetAssetservers#Name(GetAssetservers#NameRequest) returns (AssetServer) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers#name"
      };
    }
    // Retrieve an Asset Server by path.
    // 
    // This method returns an asset server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetAssetservers#Path(GetAssetservers#PathRequest) returns (AssetServer) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers#path"
      };
    }
    // Retrieve an Asset Server.
    rpc GetAssetserversWebId(GetAssetserversWebIdRequest) returns (AssetServer) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}"
      };
    }
    // Retrieve a list of all Analysis Rule Plug-in's.
    rpc GetAssetserversWebIdAnalysisruleplugins(GetAssetserversWebIdAnalysisrulepluginsRequest) returns (Items[AnalysisRulePlugIn]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/analysisruleplugins"
      };
    }
    // Retrieve a list of all Asset Databases on the specified Asset Server.
    rpc GetAssetserversWebIdAssetdatabases(GetAssetserversWebIdAssetdatabasesRequest) returns (Items[AssetDatabase]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/assetdatabases"
      };
    }
    // Create an asset database.
    rpc PostAssetserversWebIdAssetdatabases(PostAssetserversWebIdAssetdatabasesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetservers/{webId}/assetdatabases"
        body: "database"
      };
    }
    // Get the security information of the specified security item associated with the asset server for a specified user.
    rpc GetAssetserversWebIdSecurity(GetAssetserversWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/security"
      };
    }
    // Retrieve the security entries of the specified security item associated with the asset server based on the specified criteria. By default, all security entries for this asset server are returned.
    rpc GetAssetserversWebIdSecurityentries(GetAssetserversWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the asset server.
    rpc PostAssetserversWebIdSecurityentries(PostAssetserversWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetservers/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry of the specified security item associated with the asset server with the specified name.
    rpc GetAssetserversWebIdSecurityentriesName(GetAssetserversWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the asset server.
    rpc PutAssetserversWebIdSecurityentriesName(PutAssetserversWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/assetservers/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the asset server.
    rpc DeleteAssetserversWebIdSecurityentriesName(DeleteAssetserversWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/assetservers/{webId}/securityentries/{name}"
      };
    }
    // Retrieve security identities based on the specified criteria. By default, all security identities in the specified Asset Server are returned.
    rpc GetAssetserversWebIdSecurityidentities(GetAssetserversWebIdSecurityidentitiesRequest) returns (Items[SecurityIdentity]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/securityidentities"
      };
    }
    // Create a security identity.
    rpc PostAssetserversWebIdSecurityidentities(PostAssetserversWebIdSecurityidentitiesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetservers/{webId}/securityidentities"
        body: "securityIdentity"
      };
    }
    // Retrieve security identities for a specific user.
    rpc GetAssetserversWebIdSecurityidentities#UserIdentity(GetAssetserversWebIdSecurityidentities#UserIdentityRequest) returns (Items[SecurityIdentity]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/securityidentities#userIdentity"
      };
    }
    // Retrieve security mappings based on the specified criteria. By default, all security mappings in the specified Asset Server are returned.
    rpc GetAssetserversWebIdSecuritymappings(GetAssetserversWebIdSecuritymappingsRequest) returns (Items[SecurityMapping]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/securitymappings"
      };
    }
    // Create a security mapping.
    rpc PostAssetserversWebIdSecuritymappings(PostAssetserversWebIdSecuritymappingsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetservers/{webId}/securitymappings"
        body: "securityMapping"
      };
    }
    // Retrieve a list of all Time Rule Plug-in's.
    rpc GetAssetserversWebIdTimeruleplugins(GetAssetserversWebIdTimerulepluginsRequest) returns (Items[TimeRulePlugIn]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/timeruleplugins"
      };
    }
    // Retrieve a list of all unit classes on the specified Asset Server.
    rpc GetAssetserversWebIdUnitclasses(GetAssetserversWebIdUnitclassesRequest) returns (Items[UnitClass]) {
      option (google.api.http) = {
        get: "/piwebapi/assetservers/{webId}/unitclasses"
      };
    }
    // Create a unit class in the specified Asset Server.
    rpc PostAssetserversWebIdUnitclasses(PostAssetserversWebIdUnitclassesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/assetservers/{webId}/unitclasses"
        body: "unitClass"
      };
    }
    // Retrieve an attribute category by path.
    rpc GetAttributecategories(GetAttributecategoriesRequest) returns (AttributeCategory) {
      option (google.api.http) = {
        get: "/piwebapi/attributecategories"
      };
    }
    // Retrieve an attribute category.
    rpc GetAttributecategoriesWebId(GetAttributecategoriesWebIdRequest) returns (AttributeCategory) {
      option (google.api.http) = {
        get: "/piwebapi/attributecategories/{webId}"
      };
    }
    // Delete an attribute category.
    rpc DeleteAttributecategoriesWebId(DeleteAttributecategoriesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/attributecategories/{webId}"
      };
    }
    // Get the security information of the specified security item associated with the attribute category for a specified user.
    rpc GetAttributecategoriesWebIdSecurity(GetAttributecategoriesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/attributecategories/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the attribute category based on the specified criteria. By default, all security entries for this attribute category are returned.
    rpc GetAttributecategoriesWebIdSecurityentries(GetAttributecategoriesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/attributecategories/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the attribute category.
    rpc PostAttributecategoriesWebIdSecurityentries(PostAttributecategoriesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/attributecategories/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the attribute category with the specified name.
    rpc GetAttributecategoriesWebIdSecurityentriesName(GetAttributecategoriesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/attributecategories/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the attribute category.
    rpc PutAttributecategoriesWebIdSecurityentriesName(PutAttributecategoriesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/attributecategories/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the attribute category.
    rpc DeleteAttributecategoriesWebIdSecurityentriesName(DeleteAttributecategoriesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/attributecategories/{webId}/securityentries/{name}"
      };
    }
    // Retrieve an attribute by path.
    // 
    // This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetAttributes(GetAttributesRequest) returns (Attribute) {
      option (google.api.http) = {
        get: "/piwebapi/attributes"
      };
    }
    // Retrieve multiple attributes by web id or path.
    rpc GetAttributesMultiple(GetAttributesMultipleRequest) returns (Items[Item[Attribute]]) {
      option (google.api.http) = {
        get: "/piwebapi/attributes/multiple"
      };
    }
    // Retrieve an attribute.
    rpc GetAttributesWebId(GetAttributesWebIdRequest) returns (Attribute) {
      option (google.api.http) = {
        get: "/piwebapi/attributes/{webId}"
      };
    }
    // Delete an attribute.
    rpc DeleteAttributesWebId(DeleteAttributesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/attributes/{webId}"
      };
    }
    // Get the child attributes of the specified attribute.
    rpc GetAttributesWebIdAttributes(GetAttributesWebIdAttributesRequest) returns (Items[Attribute]) {
      option (google.api.http) = {
        get: "/piwebapi/attributes/{webId}/attributes"
      };
    }
    // Create a new attribute as a child of the specified attribute.
    rpc PostAttributesWebIdAttributes(PostAttributesWebIdAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/attributes/{webId}/attributes"
        body: "attribute"
      };
    }
    // Get an attribute's categories.
    rpc GetAttributesWebIdCategories(GetAttributesWebIdCategoriesRequest) returns (Items[AttributeCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/attributes/{webId}/categories"
      };
    }
    // Create or update an attribute's DataReference configuration (Create/Update PI point for PI Point DataReference).
    rpc PostAttributesWebIdConfig(PostAttributesWebIdConfigRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/attributes/{webId}/config"
      };
    }
    // Get the attribute's value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams.
    rpc GetAttributesWebIdValue(GetAttributesWebIdValueRequest) returns (TimedValue) {
      option (google.api.http) = {
        get: "/piwebapi/attributes/{webId}/value"
      };
    }
    // Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams.
    // 
    // Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.
    rpc PutAttributesWebIdValue(PutAttributesWebIdValueRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/attributes/{webId}/value"
        body: "value"
      };
    }
    // Retrieve an attribute template by path.
    // 
    // This method returns an attribute template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetAttributetemplates(GetAttributetemplatesRequest) returns (AttributeTemplate) {
      option (google.api.http) = {
        get: "/piwebapi/attributetemplates"
      };
    }
    // Retrieve an attribute template.
    rpc GetAttributetemplatesWebId(GetAttributetemplatesWebIdRequest) returns (AttributeTemplate) {
      option (google.api.http) = {
        get: "/piwebapi/attributetemplates/{webId}"
      };
    }
    // Delete an attribute template.
    // 
    // Deleting an attribute template will delete the attributes that were created based on the template
    rpc DeleteAttributetemplatesWebId(DeleteAttributetemplatesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/attributetemplates/{webId}"
      };
    }
    // Retrieve an attribute template's child attribute templates.
    rpc GetAttributetemplatesWebIdAttributetemplates(GetAttributetemplatesWebIdAttributetemplatesRequest) returns (Items[AttributeTemplate]) {
      option (google.api.http) = {
        get: "/piwebapi/attributetemplates/{webId}/attributetemplates"
      };
    }
    // Create an attribute template as a child of another attribute template.
    rpc PostAttributetemplatesWebIdAttributetemplates(PostAttributetemplatesWebIdAttributetemplatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/attributetemplates/{webId}/attributetemplates"
        body: "template"
      };
    }
    // Get an attribute template's categories.
    rpc GetAttributetemplatesWebIdCategories(GetAttributetemplatesWebIdCategoriesRequest) returns (Items[AttributeCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/attributetemplates/{webId}/categories"
      };
    }
    // Retrieve all attribute traits of the specified category/categories.
    rpc GetAttributetraits(GetAttributetraitsRequest) returns (Items[AttributeTrait]) {
      option (google.api.http) = {
        get: "/piwebapi/attributetraits"
      };
    }
    // Retrieve an attribute trait.
    rpc GetAttributetraitsName(GetAttributetraitsNameRequest) returns (AttributeTrait) {
      option (google.api.http) = {
        get: "/piwebapi/attributetraits/{name}"
      };
    }
    // Execute a batch of requests against the service. As shown in the Sample Request, the input is a dictionary with IDs as keys and request objects as values. Each request object specifies the HTTP method and the resource and, optionally, the content and a list of parent IDs. The list of parent IDs specifies which other requests must complete before the given request will be executed. The example first creates an element, then gets the element by the response's Location header, then creates an attribute for the element. Note that the resource can be an absolute URL or a JsonPath that references the response to the parent request. The batch's response is a dictionary uses keys corresponding those provided in the request, with response objects containing a status code, response headers, and the response body. A request can alternatively specify a request template in place of a resource. In this case, a single JsonPath may select multiple tokens, and a separate subrequest will be made from the template for each token. The responses of these subrequests will returned as the content of a single outer response.
    rpc PostBatch(PostBatchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/batch"
        body: "batch"
      };
    }
    // Returns results of evaluating the expression over the time range from the start time to the end time at a defined interval.
    rpc GetCalculationIntervals(GetCalculationIntervalsRequest) returns (TimedValues) {
      option (google.api.http) = {
        get: "/piwebapi/calculation/intervals"
      };
    }
    // Returns the result of evaluating the expression at each point in time over the time range from the start time to the end time where a recorded value exists for a member of the expression.
    rpc GetCalculationRecorded(GetCalculationRecordedRequest) returns (TimedValues) {
      option (google.api.http) = {
        get: "/piwebapi/calculation/recorded"
      };
    }
    // Returns the result of evaluating the expression over the time range from the start time to the end time. The time range is first divided into a number of summary intervals. Then the calculation is performed for the specified summaries over each interval.
    rpc GetCalculationSummary(GetCalculationSummaryRequest) returns (Items[SummaryValue]) {
      option (google.api.http) = {
        get: "/piwebapi/calculation/summary"
      };
    }
    // Returns the result of evaluating the expression at the specified timestamps.
    rpc GetCalculationTimes(GetCalculationTimesRequest) returns (TimedValues) {
      option (google.api.http) = {
        get: "/piwebapi/calculation/times"
      };
    }
    // Retrieves a list of currently running channel instances.
    rpc GetChannelsInstances(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/piwebapi/channels/instances"
      };
    }
    // Retrieve a list of Data Servers known to this service.
    // 
    // This method returns a list of all available known Data Servers that the user can connect to. Even though a server may be returned in the list, the user may not have permission to access it.
    rpc GetDataservers(GetDataserversRequest) returns (Items[DataServer]) {
      option (google.api.http) = {
        get: "/piwebapi/dataservers"
      };
    }
    // Retrieve a Data Server by name.
    // 
    // This method returns a data server based on the name. Users should primarily search with the WebID when available.
    rpc GetDataservers#Name(GetDataservers#NameRequest) returns (DataServer) {
      option (google.api.http) = {
        get: "/piwebapi/dataservers#name"
      };
    }
    // Retrieve a Data Server by path.
    // 
    // This method returns a data server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetDataservers#Path(GetDataservers#PathRequest) returns (DataServer) {
      option (google.api.http) = {
        get: "/piwebapi/dataservers#path"
      };
    }
    // Retrieve a Data Server.
    rpc GetDataserversWebId(GetDataserversWebIdRequest) returns (DataServer) {
      option (google.api.http) = {
        get: "/piwebapi/dataservers/{webId}"
      };
    }
    // Retrieve enumeration sets for given Data Server.
    rpc GetDataserversWebIdEnumerationsets(GetDataserversWebIdEnumerationsetsRequest) returns (Items[EnumerationSet]) {
      option (google.api.http) = {
        get: "/piwebapi/dataservers/{webId}/enumerationsets"
      };
    }
    // Create an enumeration set on the Data Server.
    rpc PostDataserversWebIdEnumerationsets(PostDataserversWebIdEnumerationsetsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/dataservers/{webId}/enumerationsets"
        body: "enumerationSet"
      };
    }
    // Retrieve a list of points on a specified Data Server.
    // 
    // Users can search for the data servers based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the data servers that match the default search.
    rpc GetDataserversWebIdPoints(GetDataserversWebIdPointsRequest) returns (Items[Point]) {
      option (google.api.http) = {
        get: "/piwebapi/dataservers/{webId}/points"
      };
    }
    // Create a point in the specified Data Server.
    rpc PostDataserversWebIdPoints(PostDataserversWebIdPointsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/dataservers/{webId}/points"
        body: "pointDTO"
      };
    }
    // Retrieve an element category by path.
    rpc GetElementcategories(GetElementcategoriesRequest) returns (ElementCategory) {
      option (google.api.http) = {
        get: "/piwebapi/elementcategories"
      };
    }
    // Retrieve an element category.
    rpc GetElementcategoriesWebId(GetElementcategoriesWebIdRequest) returns (ElementCategory) {
      option (google.api.http) = {
        get: "/piwebapi/elementcategories/{webId}"
      };
    }
    // Delete an element category.
    rpc DeleteElementcategoriesWebId(DeleteElementcategoriesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/elementcategories/{webId}"
      };
    }
    // Get the security information of the specified security item associated with the element category for a specified user.
    rpc GetElementcategoriesWebIdSecurity(GetElementcategoriesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/elementcategories/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the element category based on the specified criteria. By default, all security entries for this element category are returned.
    rpc GetElementcategoriesWebIdSecurityentries(GetElementcategoriesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/elementcategories/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the element category.
    rpc PostElementcategoriesWebIdSecurityentries(PostElementcategoriesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elementcategories/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the element category with the specified name.
    rpc GetElementcategoriesWebIdSecurityentriesName(GetElementcategoriesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/elementcategories/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the element category.
    rpc PutElementcategoriesWebIdSecurityentriesName(PutElementcategoriesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/elementcategories/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the element category.
    rpc DeleteElementcategoriesWebIdSecurityentriesName(DeleteElementcategoriesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/elementcategories/{webId}/securityentries/{name}"
      };
    }
    // Retrieve an element by path.
    // 
    // This method returns an element based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetElements(GetElementsRequest) returns (Element) {
      option (google.api.http) = {
        get: "/piwebapi/elements"
      };
    }
    // Retrieve multiple elements by web id or path.
    rpc GetElementsMultiple(GetElementsMultipleRequest) returns (Items[Item[Element]]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/multiple"
      };
    }
    // Create a link for a "Search Elements By Attribute Value" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
    rpc PostElementsSearchbyattribute(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elements/searchbyattribute"
      };
    }
    // Execute a "Search Elements By Attribute Value" operation.
    rpc GetElementsSearchbyattributeSearchId(GetElementsSearchbyattributeSearchIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/piwebapi/elements/searchbyattribute/{searchId}"
      };
    }
    // Retrieve an element.
    rpc GetElementsWebId(GetElementsWebIdRequest) returns (Element) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}"
      };
    }
    // Delete an element.
    rpc DeleteElementsWebId(DeleteElementsWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/elements/{webId}"
      };
    }
    // Retrieve analyses based on the specified conditions.
    // 
    // Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
    rpc GetElementsWebIdAnalyses(GetElementsWebIdAnalysesRequest) returns (Items[Analysis]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/analyses"
      };
    }
    // Create an Analysis.
    rpc PostElementsWebIdAnalyses(PostElementsWebIdAnalysesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elements/{webId}/analyses"
        body: "analysis"
      };
    }
    // Get the attributes of the specified element.
    rpc GetElementsWebIdAttributes(GetElementsWebIdAttributesRequest) returns (Items[Attribute]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/attributes"
      };
    }
    // Create a new attribute of the specified element.
    rpc PostElementsWebIdAttributes(PostElementsWebIdAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elements/{webId}/attributes"
        body: "attribute"
      };
    }
    // Get an element's categories.
    rpc GetElementsWebIdCategories(GetElementsWebIdCategoriesRequest) returns (Items[ElementCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/categories"
      };
    }
    // Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
    rpc PostElementsWebIdConfig(PostElementsWebIdConfigRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elements/{webId}/config"
      };
    }
    // Retrieves a list of element attributes matching the specified filters from the specified element.
    rpc GetElementsWebIdElementattributes(GetElementsWebIdElementattributesRequest) returns (Items[Attribute]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/elementattributes"
      };
    }
    // Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
    // 
    // Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
    rpc GetElementsWebIdElements(GetElementsWebIdElementsRequest) returns (Items[Element]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/elements"
      };
    }
    // Create a child element.
    rpc PostElementsWebIdElements(PostElementsWebIdElementsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elements/{webId}/elements"
        body: "element"
      };
    }
    // Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element with a start time in the past 8 hours.
    rpc GetElementsWebIdEventframes(GetElementsWebIdEventframesRequest) returns (Items[EventFrame]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/eventframes"
      };
    }
    // Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
    // 
    // Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
    rpc GetElementsWebIdReferencedelements(GetElementsWebIdReferencedelementsRequest) returns (Items[Element]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/referencedelements"
      };
    }
    // Add a reference to an existing element to the child elements collection.
    rpc PostElementsWebIdReferencedelements(PostElementsWebIdReferencedelementsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elements/{webId}/referencedelements"
      };
    }
    // Remove a reference to an existing element from the child elements collection.
    rpc DeleteElementsWebIdReferencedelements(DeleteElementsWebIdReferencedelementsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/elements/{webId}/referencedelements"
      };
    }
    // Get the security information of the specified security item associated with the element for a specified user.
    rpc GetElementsWebIdSecurity(GetElementsWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
    rpc GetElementsWebIdSecurityentries(GetElementsWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the element.
    rpc PostElementsWebIdSecurityentries(PostElementsWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elements/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the element with the specified name.
    rpc GetElementsWebIdSecurityentriesName(GetElementsWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/elements/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the element.
    rpc PutElementsWebIdSecurityentriesName(PutElementsWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/elements/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the element.
    rpc DeleteElementsWebIdSecurityentriesName(DeleteElementsWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/elements/{webId}/securityentries/{name}"
      };
    }
    // Retrieve an element template by path.
    // 
    // This method returns an element template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetElementtemplates(GetElementtemplatesRequest) returns (ElementTemplate) {
      option (google.api.http) = {
        get: "/piwebapi/elementtemplates"
      };
    }
    // Retrieve an element template.
    rpc GetElementtemplatesWebId(GetElementtemplatesWebIdRequest) returns (ElementTemplate) {
      option (google.api.http) = {
        get: "/piwebapi/elementtemplates/{webId}"
      };
    }
    // Delete an element template.
    // 
    // Deleting an element template will delete all associated templated data from elements which were created from it.
    rpc DeleteElementtemplatesWebId(DeleteElementtemplatesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/elementtemplates/{webId}"
      };
    }
    // Get analysis templates for an element template.
    rpc GetElementtemplatesWebIdAnalysistemplates(GetElementtemplatesWebIdAnalysistemplatesRequest) returns (Items[AnalysisTemplate]) {
      option (google.api.http) = {
        get: "/piwebapi/elementtemplates/{webId}/analysistemplates"
      };
    }
    // Get child attribute templates for an element template.
    rpc GetElementtemplatesWebIdAttributetemplates(GetElementtemplatesWebIdAttributetemplatesRequest) returns (Items[AttributeTemplate]) {
      option (google.api.http) = {
        get: "/piwebapi/elementtemplates/{webId}/attributetemplates"
      };
    }
    // Create an attribute template.
    rpc PostElementtemplatesWebIdAttributetemplates(PostElementtemplatesWebIdAttributetemplatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elementtemplates/{webId}/attributetemplates"
        body: "template"
      };
    }
    // Get an element template's categories.
    rpc GetElementtemplatesWebIdCategories(GetElementtemplatesWebIdCategoriesRequest) returns (Items[ElementCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/elementtemplates/{webId}/categories"
      };
    }
    // Get the security information of the specified security item associated with the element template for a specified user.
    rpc GetElementtemplatesWebIdSecurity(GetElementtemplatesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/elementtemplates/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the element template based on the specified criteria. By default, all security entries for this element template are returned.
    rpc GetElementtemplatesWebIdSecurityentries(GetElementtemplatesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/elementtemplates/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the element template.
    rpc PostElementtemplatesWebIdSecurityentries(PostElementtemplatesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/elementtemplates/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the element template with the specified name.
    rpc GetElementtemplatesWebIdSecurityentriesName(GetElementtemplatesWebIdSecurityentriesNameRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/elementtemplates/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the element template.
    rpc PutElementtemplatesWebIdSecurityentriesName(PutElementtemplatesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/elementtemplates/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the element template.
    rpc DeleteElementtemplatesWebIdSecurityentriesName(DeleteElementtemplatesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/elementtemplates/{webId}/securityentries/{name}"
      };
    }
    // Retrieve an enumeration set by path.
    // 
    // This method returns an enumeration set based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetEnumerationsets(GetEnumerationsetsRequest) returns (EnumerationSet) {
      option (google.api.http) = {
        get: "/piwebapi/enumerationsets"
      };
    }
    // Retrieve an enumeration set.
    rpc GetEnumerationsetsWebId(GetEnumerationsetsWebIdRequest) returns (EnumerationSet) {
      option (google.api.http) = {
        get: "/piwebapi/enumerationsets/{webId}"
      };
    }
    // Delete an enumeration set.
    rpc DeleteEnumerationsetsWebId(DeleteEnumerationsetsWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/enumerationsets/{webId}"
      };
    }
    // Retrieve an enumeration set's values.
    rpc GetEnumerationsetsWebIdEnumerationvalues(GetEnumerationsetsWebIdEnumerationvaluesRequest) returns (Items[EnumerationValue]) {
      option (google.api.http) = {
        get: "/piwebapi/enumerationsets/{webId}/enumerationvalues"
      };
    }
    // Create an enumeration value for a enumeration set.
    rpc PostEnumerationsetsWebIdEnumerationvalues(PostEnumerationsetsWebIdEnumerationvaluesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/enumerationsets/{webId}/enumerationvalues"
        body: "enumerationValue"
      };
    }
    // Get the security information of the specified security item associated with the enumeration set for a specified user.
    rpc GetEnumerationsetsWebIdSecurity(GetEnumerationsetsWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/enumerationsets/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the enumeration set based on the specified criteria. By default, all security entries for this enumeration set are returned.
    rpc GetEnumerationsetsWebIdSecurityentries(GetEnumerationsetsWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/enumerationsets/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the enumeration set.
    rpc PostEnumerationsetsWebIdSecurityentries(PostEnumerationsetsWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/enumerationsets/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the enumeration set with the specified name.
    rpc GetEnumerationsetsWebIdSecurityentriesName(GetEnumerationsetsWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/enumerationsets/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the enumeration set.
    rpc PutEnumerationsetsWebIdSecurityentriesName(PutEnumerationsetsWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/enumerationsets/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the enumeration set.
    rpc DeleteEnumerationsetsWebIdSecurityentriesName(DeleteEnumerationsetsWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/enumerationsets/{webId}/securityentries/{name}"
      };
    }
    // Retrieve an enumeration value by path.
    // 
    // This method returns a enumeration value based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetEnumerationvalues(GetEnumerationvaluesRequest) returns (EnumerationValue) {
      option (google.api.http) = {
        get: "/piwebapi/enumerationvalues"
      };
    }
    // Retrieve an enumeration value mapping
    rpc GetEnumerationvaluesWebId(GetEnumerationvaluesWebIdRequest) returns (EnumerationValue) {
      option (google.api.http) = {
        get: "/piwebapi/enumerationvalues/{webId}"
      };
    }
    // Delete an enumeration value from an enumeration set.
    // 
    // Deleting a value will remove it from the enumeration set along with any value references within the PI Web API system.
    rpc DeleteEnumerationvaluesWebId(DeleteEnumerationvaluesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/enumerationvalues/{webId}"
      };
    }
    // Retrieve an event frame by path.
    // 
    // This method returns an event frame based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetEventframes(GetEventframesRequest) returns (EventFrame) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes"
      };
    }
    // Retrieve multiple event frames by web ids or paths.
    rpc GetEventframesMultiple(GetEventframesMultipleRequest) returns (Items[Item[EventFrame]]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/multiple"
      };
    }
    // Create a link for a "Search EventFrames By Attribute Value" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root EventFrame. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the EventFrames. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
    rpc PostEventframesSearchbyattribute(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/eventframes/searchbyattribute"
      };
    }
    // Execute a "Search EventFrames By Attribute Value" operation.
    rpc GetEventframesSearchbyattributeSearchId(GetEventframesSearchbyattributeSearchIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/searchbyattribute/{searchId}"
      };
    }
    // Retrieve an event frame.
    rpc GetEventframesWebId(GetEventframesWebIdRequest) returns (EventFrame) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}"
      };
    }
    // Delete an event frame.
    rpc DeleteEventframesWebId(DeleteEventframesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/eventframes/{webId}"
      };
    }

    // Get an event frame's annotations.
    rpc GetEventframesWebIdAnnotations(GetEventframesWebIdAnnotationsRequest) returns (Items[Annotation]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/annotations"
      };
    }
    // Create an annotation on an event frame.
    rpc PostEventframesWebIdAnnotations(PostEventframesWebIdAnnotationsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/eventframes/{webId}/annotations"
        body: "annotation"
      };
    }
    // Get a specific annotation on an event frame.
    rpc GetEventframesWebIdAnnotationsId(GetEventframesWebIdAnnotationsIdRequest) returns (Annotation) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/annotations/{id}"
      };
    }
    // Delete an annotation on an event frame.
    rpc DeleteEventframesWebIdAnnotationsId(DeleteEventframesWebIdAnnotationsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/eventframes/{webId}/annotations/{id}"
      };
    }
    // Get the attributes of the specified event frame.
    rpc GetEventframesWebIdAttributes(GetEventframesWebIdAttributesRequest) returns (Items[Attribute]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/attributes"
      };
    }
    // Create a new attribute of the specified event frame.
    rpc PostEventframesWebIdAttributes(PostEventframesWebIdAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/eventframes/{webId}/attributes"
        body: "attribute"
      };
    }
    // Calls the EventFrame's CaptureValues method.
    rpc PostEventframesWebIdAttributesCapture(PostEventframesWebIdAttributesCaptureRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/eventframes/{webId}/attributes/capture"
      };
    }
    // Get an event frame's categories.
    rpc GetEventframesWebIdCategories(GetEventframesWebIdCategoriesRequest) returns (Items[ElementCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/categories"
      };
    }
    // Executes the create configuration function of the data references found within the attributes of the event frame, and optionally, its children.
    rpc PostEventframesWebIdConfig(PostEventframesWebIdConfigRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/eventframes/{webId}/config"
      };
    }
    // Retrieves a list of event frame attributes matching the specified filters from the specified event frame.
    rpc GetEventframesWebIdEventframeattributes(GetEventframesWebIdEventframeattributesRequest) returns (Items[Attribute]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/eventframeattributes"
      };
    }
    // Retrieve event frames based on the specified conditions. By default, returns all children of the specified root event frame with a start time in the past 8 hours.
    rpc GetEventframesWebIdEventframes(GetEventframesWebIdEventframesRequest) returns (Items[EventFrame]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/eventframes"
      };
    }
    // Create an event frame as a child of the specified event frame.
    rpc PostEventframesWebIdEventframes(PostEventframesWebIdEventframesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/eventframes/{webId}/eventframes"
        body: "eventFrame"
      };
    }
    // Retrieve the event frame's referenced elements.
    rpc GetEventframesWebIdReferencedelements(GetEventframesWebIdReferencedelementsRequest) returns (Items[Element]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/referencedelements"
      };
    }
    // Get the security information of the specified security item associated with the event frame for a specified user.
    rpc GetEventframesWebIdSecurity(GetEventframesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the event frame based on the specified criteria. By default, all security entries for this event frame are returned.
    rpc GetEventframesWebIdSecurityentries(GetEventframesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the event frame.
    rpc PostEventframesWebIdSecurityentries(PostEventframesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/eventframes/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the event frame with the specified name.
    rpc GetEventframesWebIdSecurityentriesName(GetEventframesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/eventframes/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the event frame.
    rpc PutEventframesWebIdSecurityentriesName(PutEventframesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/eventframes/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the event frame.
    rpc DeleteEventframesWebIdSecurityentriesName(DeleteEventframesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/eventframes/{webId}/securityentries/{name}"
      };
    }
    // Get a point by path.
    // 
    // This method returns a PI Point based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetPoints(GetPointsRequest) returns (Point) {
      option (google.api.http) = {
        get: "/piwebapi/points"
      };
    }
    // Retrieve multiple points by web id or path.
    rpc GetPointsMultiple(GetPointsMultipleRequest) returns (Items[Item[Point]]) {
      option (google.api.http) = {
        get: "/piwebapi/points/multiple"
      };
    }
    // Get a point.
    rpc GetPointsWebId(GetPointsWebIdRequest) returns (Point) {
      option (google.api.http) = {
        get: "/piwebapi/points/{webId}"
      };
    }
    // Delete a point.
    rpc DeletePointsWebId(DeletePointsWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/points/{webId}"
      };
    }
    // Get point attributes.
    rpc GetPointsWebIdAttributes(GetPointsWebIdAttributesRequest) returns (Items[PointAttribute]) {
      option (google.api.http) = {
        get: "/piwebapi/points/{webId}/attributes"
      };
    }
    // Get a point attribute by name.
    rpc GetPointsWebIdAttributesName(GetPointsWebIdAttributesNameRequest) returns (PointAttribute) {
      option (google.api.http) = {
        get: "/piwebapi/points/{webId}/attributes/{name}"
      };
    }
    // Retrieve a security identity by path.
    // 
    // This method returns a security identity based on the path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetSecurityidentities(GetSecurityidentitiesRequest) returns (SecurityIdentity) {
      option (google.api.http) = {
        get: "/piwebapi/securityidentities"
      };
    }
    // Retrieve a security identity.
    rpc GetSecurityidentitiesWebId(GetSecurityidentitiesWebIdRequest) returns (SecurityIdentity) {
      option (google.api.http) = {
        get: "/piwebapi/securityidentities/{webId}"
      };
    }
    // Delete a security identity.
    rpc DeleteSecurityidentitiesWebId(DeleteSecurityidentitiesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/securityidentities/{webId}"
      };
    }
    // Get the security information of the specified security item associated with the security identity for a specified user.
    rpc GetSecurityidentitiesWebIdSecurity(GetSecurityidentitiesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/securityidentities/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the security identity based on the specified criteria. By default, all security entries for this security identity are returned.
    rpc GetSecurityidentitiesWebIdSecurityentries(GetSecurityidentitiesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/securityidentities/{webId}/securityentries"
      };
    }
    // Retrieve the security entry associated with the security identity with the specified name.
    rpc GetSecurityidentitiesWebIdSecurityentriesName(GetSecurityidentitiesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/securityidentities/{webId}/securityentries/{name}"
      };
    }
    // Get security mappings for the specified security identity.
    rpc GetSecurityidentitiesWebIdSecuritymappings(GetSecurityidentitiesWebIdSecuritymappingsRequest) returns (Items[SecurityMapping]) {
      option (google.api.http) = {
        get: "/piwebapi/securityidentities/{webId}/securitymappings"
      };
    }
    // Retrieve a security mapping by path.
    // 
    // This method returns a security mapping based on the path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetSecuritymappings(GetSecuritymappingsRequest) returns (SecurityMapping) {
      option (google.api.http) = {
        get: "/piwebapi/securitymappings"
      };
    }
    // Retrieve a security mapping.
    rpc GetSecuritymappingsWebId(GetSecuritymappingsWebIdRequest) returns (SecurityMapping) {
      option (google.api.http) = {
        get: "/piwebapi/securitymappings/{webId}"
      };
    }
    // Delete a security mapping.
    rpc DeleteSecuritymappingsWebId(DeleteSecuritymappingsWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/securitymappings/{webId}"
      };
    }
    // Get the security information of the specified security item associated with the security mapping for a specified user.
    rpc GetSecuritymappingsWebIdSecurity(GetSecuritymappingsWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/securitymappings/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the security mapping based on the specified criteria. By default, all security entries for this security mapping are returned.
    rpc GetSecuritymappingsWebIdSecurityentries(GetSecuritymappingsWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/securitymappings/{webId}/securityentries"
      };
    }
    // Retrieve the security entry associated with the security mapping with the specified name.
    rpc GetSecuritymappingsWebIdSecurityentriesName(GetSecuritymappingsWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/securitymappings/{webId}/securityentries/{name}"
      };
    }
    // Opens a channel that will send messages about any value changes for the specified stream.
    rpc GetStreamsWebIdChannel(GetStreamsWebIdChannelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/channel"
      };
    }
    // Returns the end-of-stream value of the stream.
    rpc GetStreamsWebIdEnd(GetStreamsWebIdEndRequest) returns (TimedValue) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/end"
      };
    }
    // Retrieves interpolated values over the specified time range at the specified sampling interval.
    rpc GetStreamsWebIdInterpolated(GetStreamsWebIdInterpolatedRequest) returns (TimedValues) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/interpolated"
      };
    }
    // Retrieves interpolated values over the specified time range at the specified sampling interval.
    rpc GetStreamsWebIdInterpolatedattimes(GetStreamsWebIdInterpolatedattimesRequest) returns (TimedValues) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/interpolatedattimes"
      };
    }
    // Retrieves values over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
    // 
    // For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
    rpc GetStreamsWebIdPlot(GetStreamsWebIdPlotRequest) returns (TimedValues) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/plot"
      };
    }
    // Returns a list of compressed values for the requested time range from the source provider.
    // 
    // Returned times are affected by the specified boundary type. If no values are found for the time range and conditions specified then the HTTP response will be success, with a body containing an empty array of Items. When specifying true for the includeFilteredValues parameter, consecutive filtered events are not returned. The first value that would be filtered out is returned with its time and the enumeration value "Filtered". The next value in the collection will be the next compressed value in the specified direction that passes the filter criteria - if any. When both boundaryType and a filterExpression are specified, the events returned for the boundary condition specified are passed through the filter. If the includeFilteredValues parameter is true, the boundary values will be reported at the proper timestamps with the enumeration value "Filtered" when the filter conditions are not met at the boundary time. If the includeFilteredValues parameter is false for this case, no event is returned for the boundary time.
    rpc GetStreamsWebIdRecorded(GetStreamsWebIdRecordedRequest) returns (TimedValues) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/recorded"
      };
    }
    // Updates multiple values for the specified stream.
    rpc PostStreamsWebIdRecorded(PostStreamsWebIdRecordedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/streams/{webId}/recorded"
        body: "values"
      };
    }
    // Returns a single recorded value based on the passed time and retrieval mode from the stream.
    rpc GetStreamsWebIdRecordedattime(GetStreamsWebIdRecordedattimeRequest) returns (TimedValue) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/recordedattime"
      };
    }
    // Retrieves recorded values at the specified times.
    rpc GetStreamsWebIdRecordedattimes(GetStreamsWebIdRecordedattimesRequest) returns (TimedValues) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/recordedattimes"
      };
    }
    // Returns a summary over the specified time range for the stream.
    // 
    // Count is the only summary type supported on non-numeric streams. Requesting a summary for any other type will generate an error. Time-weighted totals are computed by integrating the rate tag values over the requested time range. If some of the data are bad in the time range, the calculated total is divided by the fraction of the time period for which there are good values. This approach is equivalent to assuming that during the period of bad data, the tag takes on the average values for the entire calculation time range. The PercentGood summary may be used to determine if the calculation results are suitable for the application's purposes. For time-weighted totals, if the time unit rate of the stream cannot be determined, then the value will be totaled assuming a unit of "per day" and no unit of measure will be assigned to the value. If the measured time component of the tag is not based on a day, the user of the data must convert the totalized value to the correct units.
    rpc GetStreamsWebIdSummary(GetStreamsWebIdSummaryRequest) returns (Items[SummaryValue]) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/summary"
      };
    }
    // Returns the value of the stream at the specified time. By default, this is usually the current value.
    rpc GetStreamsWebIdValue(GetStreamsWebIdValueRequest) returns (TimedValue) {
      option (google.api.http) = {
        get: "/piwebapi/streams/{webId}/value"
      };
    }
    // Updates a value for the specified stream.
    rpc PostStreamsWebIdValue(PostStreamsWebIdValueRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/streams/{webId}/value"
        body: "value"
      };
    }
    // Opens a channel that will send messages about any value changes for the specified streams.
    rpc GetStreamsetsChannel(GetStreamsetsChannelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/channel"
      };
    }
    // Returns End Of Stream values for attributes of the specified streams
    rpc GetStreamsetsEnd(GetStreamsetsEndRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/end"
      };
    }
    // Returns interpolated values of the specified streams over the specified time range at the specified sampling interval.
    rpc GetStreamsetsInterpolated(GetStreamsetsInterpolatedRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/interpolated"
      };
    }
    // Returns interpolated values of the specified streams at the specified times.
    rpc GetStreamsetsInterpolatedattimes(GetStreamsetsInterpolatedattimesRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/interpolatedattimes"
      };
    }
    // Returns values of attributes for the specified streams over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
    // 
    // For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
    rpc GetStreamsetsPlot(GetStreamsetsPlotRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/plot"
      };
    }
    // Returns recorded values of the specified streams.
    rpc GetStreamsetsRecorded(GetStreamsetsRecordedRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/recorded"
      };
    }
    // Updates multiple values for the specified streams.
    rpc PostStreamsetsRecorded(PostStreamsetsRecordedRequest) returns (Items[Items[Substatus]]) {
      option (google.api.http) = {
        post: "/piwebapi/streamsets/recorded"
        body: "values"
      };
    }
    // Returns recorded values based on the passed time and retrieval mode.
    rpc GetStreamsetsRecordedattime(GetStreamsetsRecordedattimeRequest) returns (Items[StreamValue]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/recordedattime"
      };
    }
    // Returns recorded values of the specified streams at the specified times.
    rpc GetStreamsetsRecordedattimes(GetStreamsetsRecordedattimesRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/recordedattimes"
      };
    }
    // Returns summary values of the specified streams.
    rpc GetStreamsetsSummary(GetStreamsetsSummaryRequest) returns (Items[StreamSummaries]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/summary"
      };
    }
    // Returns values of the specified streams.
    rpc GetStreamsetsValue(GetStreamsetsValueRequest) returns (Items[StreamValue]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/value"
      };
    }
    // Updates a single value for the specified streams.
    rpc PostStreamsetsValue(PostStreamsetsValueRequest) returns (Items[Substatus]) {
      option (google.api.http) = {
        post: "/piwebapi/streamsets/value"
        body: "values"
      };
    }
    // Opens a channel that will send messages about any value changes for the attributes of an Element, Event Frame, or Attribute.
    rpc GetStreamsetsWebIdChannel(GetStreamsetsWebIdChannelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/channel"
      };
    }
    // Returns End of stream values of the attributes for an Element, Event Frame or Attribute
    rpc GetStreamsetsWebIdEnd(GetStreamsetsWebIdEndRequest) returns (Items[StreamValue]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/end"
      };
    }
    // Returns interpolated values of attributes for an element, event frame or attribute over the specified time range at the specified sampling interval.
    rpc GetStreamsetsWebIdInterpolated(GetStreamsetsWebIdInterpolatedRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/interpolated"
      };
    }
    // Returns interpolated values of attributes for an element, event frame or attribute at the specified times.
    rpc GetStreamsetsWebIdInterpolatedattimes(GetStreamsetsWebIdInterpolatedattimesRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/interpolatedattimes"
      };
    }
    // Returns values of attributes for an element, event frame or attribute over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
    // 
    // For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
    rpc GetStreamsetsWebIdPlot(GetStreamsetsWebIdPlotRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/plot"
      };
    }
    // Returns recorded values of the attributes for an element, event frame, or attribute.
    rpc GetStreamsetsWebIdRecorded(GetStreamsetsWebIdRecordedRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/recorded"
      };
    }
    // Updates multiple values for the specified streams.
    rpc PostStreamsetsWebIdRecorded(PostStreamsetsWebIdRecordedRequest) returns (Items[Items[Substatus]]) {
      option (google.api.http) = {
        post: "/piwebapi/streamsets/{webId}/recorded"
        body: "values"
      };
    }
    // Returns recorded values of the attributes for an element, event frame, or attribute.
    rpc GetStreamsetsWebIdRecordedattime(GetStreamsetsWebIdRecordedattimeRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/recordedattime"
      };
    }
    // Returns recorded values of attributes for an element, event frame or attribute at the specified times.
    rpc GetStreamsetsWebIdRecordedattimes(GetStreamsetsWebIdRecordedattimesRequest) returns (Items[StreamValues]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/recordedattimes"
      };
    }
    // Returns summary values of the attributes for an element, event frame or attribute.
    rpc GetStreamsetsWebIdSummary(GetStreamsetsWebIdSummaryRequest) returns (Items[StreamSummaries]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/summary"
      };
    }
    // Returns values of the attributes for an Element, Event Frame or Attribute at the specified time.
    rpc GetStreamsetsWebIdValue(GetStreamsetsWebIdValueRequest) returns (Items[StreamValue]) {
      option (google.api.http) = {
        get: "/piwebapi/streamsets/{webId}/value"
      };
    }
    // Updates a single value for the specified streams.
    rpc PostStreamsetsWebIdValue(PostStreamsetsWebIdValueRequest) returns (Items[Substatus]) {
      option (google.api.http) = {
        post: "/piwebapi/streamsets/{webId}/value"
        body: "values"
      };
    }
    // Get system links for this PI System Web API instance.
    rpc GetSystem(google.protobuf.Empty) returns (SystemLanding) {
      option (google.api.http) = {
        get: "/piwebapi/system"
      };
    }
    // Get AF cache instances currently in use by the system. These are caches from which user requests are serviced. The number of instances depends on the number of users connected to the service, the service's authentication method, and the cache instance configuration.
    rpc GetSystemCacheinstances(google.protobuf.Empty) returns (Items[CacheInstance]) {
      option (google.api.http) = {
        get: "/piwebapi/system/cacheinstances"
      };
    }
    // Get the current system configuration.
    rpc GetSystemConfiguration(google.protobuf.Empty) returns (GetSystemConfigurationResponse) {
      option (google.api.http) = {
        get: "/piwebapi/system/configuration"
      };
    }
    // Get the value of a configuration item.
    rpc GetSystemConfigurationKey(GetSystemConfigurationKeyRequest) returns (GetSystemConfigurationKeyResponse) {
      option (google.api.http) = {
        get: "/piwebapi/system/configuration/{key}"
      };
    }
    // Delete a configuration item.
    rpc DeleteSystemConfigurationKey(DeleteSystemConfigurationKeyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/system/configuration/{key}"
      };
    }
    // Get the system uptime, the system state and the number of cache instances for this PI System Web API instance.
    rpc GetSystemStatus(google.protobuf.Empty) returns (SystemStatus) {
      option (google.api.http) = {
        get: "/piwebapi/system/status"
      };
    }
    // Get information about the Windows identity used to fulfill the request. This depends on the service's authentication method and the credentials passed by the client. The impersonation level of the Windows identity is included.
    rpc GetSystemUserinfo(google.protobuf.Empty) returns (UserInfo) {
      option (google.api.http) = {
        get: "/piwebapi/system/userinfo"
      };
    }
    // Get the current versions of the PI Web API instance and all external plugins.
    rpc GetSystemVersions(google.protobuf.Empty) returns (GetSystemVersionsResponse) {
      option (google.api.http) = {
        get: "/piwebapi/system/versions"
      };
    }
    // Retrieve a table category by path.
    // 
    // This method returns a Table Category based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetTablecategories(GetTablecategoriesRequest) returns (TableCategory) {
      option (google.api.http) = {
        get: "/piwebapi/tablecategories"
      };
    }
    // Retrieve a table category.
    rpc GetTablecategoriesWebId(GetTablecategoriesWebIdRequest) returns (TableCategory) {
      option (google.api.http) = {
        get: "/piwebapi/tablecategories/{webId}"
      };
    }
    // Delete a table category.
    rpc DeleteTablecategoriesWebId(DeleteTablecategoriesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/tablecategories/{webId}"
      };
    }
    // Get the security information of the specified security item associated with the table category for a specified user.
    rpc GetTablecategoriesWebIdSecurity(GetTablecategoriesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/tablecategories/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the table category based on the specified criteria. By default, all security entries for this table category are returned.
    rpc GetTablecategoriesWebIdSecurityentries(GetTablecategoriesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/tablecategories/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the table category.
    rpc PostTablecategoriesWebIdSecurityentries(PostTablecategoriesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/tablecategories/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the table category with the specified name.
    rpc GetTablecategoriesWebIdSecurityentriesName(GetTablecategoriesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/tablecategories/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the table category.
    rpc PutTablecategoriesWebIdSecurityentriesName(PutTablecategoriesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/tablecategories/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the table category.
    rpc DeleteTablecategoriesWebIdSecurityentriesName(DeleteTablecategoriesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/tablecategories/{webId}/securityentries/{name}"
      };
    }
    // Retrieve a table by path.
    rpc GetTables(GetTablesRequest) returns (Table) {
      option (google.api.http) = {
        get: "/piwebapi/tables"
      };
    }
    // Retrieve a table.
    rpc GetTablesWebId(GetTablesWebIdRequest) returns (Table) {
      option (google.api.http) = {
        get: "/piwebapi/tables/{webId}"
      };
    }
    // Delete a table.
    rpc DeleteTablesWebId(DeleteTablesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/tables/{webId}"
      };
    }
    // Get a table's categories.
    rpc GetTablesWebIdCategories(GetTablesWebIdCategoriesRequest) returns (Items[TableCategory]) {
      option (google.api.http) = {
        get: "/piwebapi/tables/{webId}/categories"
      };
    }
    // Get the table's data.
    rpc GetTablesWebIdData(GetTablesWebIdDataRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/piwebapi/tables/{webId}/data"
      };
    }
    // Update the table's data.
    rpc PutTablesWebIdData(PutTablesWebIdDataRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/tables/{webId}/data"
        body: "data"
      };
    }
    // Get the security information of the specified security item associated with the table for a specified user.
    rpc GetTablesWebIdSecurity(GetTablesWebIdSecurityRequest) returns (Items[SecurityRights]) {
      option (google.api.http) = {
        get: "/piwebapi/tables/{webId}/security"
      };
    }
    // Retrieve the security entries associated with the table based on the specified criteria. By default, all security entries for this table are returned.
    rpc GetTablesWebIdSecurityentries(GetTablesWebIdSecurityentriesRequest) returns (Items[SecurityEntry]) {
      option (google.api.http) = {
        get: "/piwebapi/tables/{webId}/securityentries"
      };
    }
    // Create a security entry owned by the table.
    rpc PostTablesWebIdSecurityentries(PostTablesWebIdSecurityentriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/tables/{webId}/securityentries"
        body: "securityEntry"
      };
    }
    // Retrieve the security entry associated with the table with the specified name.
    rpc GetTablesWebIdSecurityentriesName(GetTablesWebIdSecurityentriesNameRequest) returns (SecurityEntry) {
      option (google.api.http) = {
        get: "/piwebapi/tables/{webId}/securityentries/{name}"
      };
    }
    // Update a security entry owned by the table.
    rpc PutTablesWebIdSecurityentriesName(PutTablesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/piwebapi/tables/{webId}/securityentries/{name}"
        body: "securityEntry"
      };
    }
    // Delete a security entry owned by the table.
    rpc DeleteTablesWebIdSecurityentriesName(DeleteTablesWebIdSecurityentriesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/tables/{webId}/securityentries/{name}"
      };
    }
    // Retrieve a Time Rule Plug-in by path.
    // 
    // This method returns a Time Rule Plug-in based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetTimeruleplugins(GetTimerulepluginsRequest) returns (TimeRulePlugIn) {
      option (google.api.http) = {
        get: "/piwebapi/timeruleplugins"
      };
    }
    // Retrieve a Time Rule Plug-in.
    rpc GetTimerulepluginsWebId(GetTimerulepluginsWebIdRequest) returns (TimeRulePlugIn) {
      option (google.api.http) = {
        get: "/piwebapi/timeruleplugins/{webId}"
      };
    }
    // Retrieve a Time Rule by path.
    // 
    // This method returns a Time Rule based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
    rpc GetTimerules(GetTimerulesRequest) returns (TimeRule) {
      option (google.api.http) = {
        get: "/piwebapi/timerules"
      };
    }
    // Retrieve a Time Rule.
    rpc GetTimerulesWebId(GetTimerulesWebIdRequest) returns (TimeRule) {
      option (google.api.http) = {
        get: "/piwebapi/timerules/{webId}"
      };
    }
    // Delete a Time Rule.
    rpc DeleteTimerulesWebId(DeleteTimerulesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/timerules/{webId}"
      };
    }
    // Retrieve a unit class by path.
    rpc GetUnitclasses(GetUnitclassesRequest) returns (UnitClass) {
      option (google.api.http) = {
        get: "/piwebapi/unitclasses"
      };
    }
    // Retrieve a unit class.
    rpc GetUnitclassesWebId(GetUnitclassesWebIdRequest) returns (UnitClass) {
      option (google.api.http) = {
        get: "/piwebapi/unitclasses/{webId}"
      };
    }
    // Delete a unit class.
    rpc DeleteUnitclassesWebId(DeleteUnitclassesWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/unitclasses/{webId}"
      };
    }
    // Get the canonical unit of a unit class.
    rpc GetUnitclassesWebIdCanonicalunit(GetUnitclassesWebIdCanonicalunitRequest) returns (Unit) {
      option (google.api.http) = {
        get: "/piwebapi/unitclasses/{webId}/canonicalunit"
      };
    }
    // Get a list of all units belonging to the unit class.
    rpc GetUnitclassesWebIdUnits(GetUnitclassesWebIdUnitsRequest) returns (Unit) {
      option (google.api.http) = {
        get: "/piwebapi/unitclasses/{webId}/units"
      };
    }
    // Create a unit in the specified Unit Class.
    rpc PostUnitclassesWebIdUnits(PostUnitclassesWebIdUnitsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/piwebapi/unitclasses/{webId}/units"
        body: "unitDTO"
      };
    }
    // Retrieve a unit by path.
    rpc GetUnits(GetUnitsRequest) returns (Unit) {
      option (google.api.http) = {
        get: "/piwebapi/units"
      };
    }
    // Retrieve a unit.
    rpc GetUnitsWebId(GetUnitsWebIdRequest) returns (Unit) {
      option (google.api.http) = {
        get: "/piwebapi/units/{webId}"
      };
    }
    // Delete a unit.
    rpc DeleteUnitsWebId(DeleteUnitsWebIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/piwebapi/units/{webId}"
      };
    }
}

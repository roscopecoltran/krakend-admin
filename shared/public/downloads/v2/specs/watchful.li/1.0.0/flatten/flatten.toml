basePath = "/api/v1"
"definitions.Audit.properties.id.description" = "Unique identifier for the audit"
"definitions.Audit.properties.id.format" = "int64"
"definitions.Audit.properties.id.type" = "integer"
"definitions.Audit.required.length" = 1
"definitions.Audit.required[0]" = "id"
"definitions.Audits.items.$ref" = "#/definitions/Audit"
"definitions.Audits.type" = "array"
"definitions.Extension.properties.date.description" = "Date of release"
"definitions.Extension.properties.date.type" = "string"
"definitions.Extension.properties.ext_name.description" = "Extension name"
"definitions.Extension.properties.ext_name.type" = "string"
"definitions.Extension.properties.idx_site.description" = "Unique identifier for the site"
"definitions.Extension.properties.idx_site.format" = "int64"
"definitions.Extension.properties.idx_site.type" = "integer"
"definitions.Extension.properties.newVersion.description" = "New version"
"definitions.Extension.properties.newVersion.type" = "string"
"definitions.Extension.properties.type.description" = "Datetime of the log"
"definitions.Extension.properties.type.format" = "date-format"
"definitions.Extension.properties.type.type" = "string"
"definitions.Extension.properties.url.description" = "Author URL"
"definitions.Extension.properties.url.type" = "string"
"definitions.Extension.properties.vUpdate.description" = "Update is available"
"definitions.Extension.properties.vUpdate.type" = "integer"
"definitions.Extension.properties.version.description" = "Extension version"
"definitions.Extension.properties.version.type" = "string"
"definitions.Extension.required.length" = 2
"definitions.Extension.required[0]" = "idx_site"
"definitions.Extension.required[1]" = "type"
"definitions.Feedback.properties.id.description" = "Unique identifier for the feedback"
"definitions.Feedback.properties.id.format" = "int64"
"definitions.Feedback.properties.id.type" = "integer"
"definitions.Feedback.required.length" = 1
"definitions.Feedback.required[0]" = "id"
"definitions.Log.properties.Site name.description" = "Name of the site / readyonly"
"definitions.Log.properties.Site name.type" = "string"
"definitions.Log.properties.id_log.description" = "Unique identifier for the log"
"definitions.Log.properties.id_log.format" = "int64"
"definitions.Log.properties.id_log.type" = "integer"
"definitions.Log.properties.idx_site.description" = "Unique identifier for the site"
"definitions.Log.properties.idx_site.format" = "int64"
"definitions.Log.properties.idx_site.type" = "integer"
"definitions.Log.properties.log_date.description" = "Datetime of the log"
"definitions.Log.properties.log_date.format" = "date-format"
"definitions.Log.properties.log_date.type" = "string"
"definitions.Log.properties.log_entry.description" = "Log information"
"definitions.Log.properties.log_entry.type" = "string"
"definitions.Log.properties.log_level.description" = "Level of log"
"definitions.Log.properties.log_level.format" = "int64"
"definitions.Log.properties.log_level.type" = "integer"
"definitions.Log.properties.log_type.description" = "Type of log"
"definitions.Log.properties.log_type.type" = "string"
"definitions.Log.properties.userid.description" = "Unique identifier for the user"
"definitions.Log.properties.userid.format" = "int64"
"definitions.Log.properties.userid.type" = "integer"
"definitions.Log.required.length" = 6
"definitions.Log.required[0]" = "id_log"
"definitions.Log.required[1]" = "idx_site"
"definitions.Log.required[2]" = "log_date"
"definitions.Log.required[3]" = "log_entry"
"definitions.Log.required[4]" = "log_level"
"definitions.Log.required[5]" = "userid"
"definitions.PostLog.properties.log_date.description" = "Datetime of the log"
"definitions.PostLog.properties.log_date.format" = "date-format"
"definitions.PostLog.properties.log_date.type" = "string"
"definitions.PostLog.properties.log_entry.description" = "Log information"
"definitions.PostLog.properties.log_entry.type" = "string"
"definitions.PostLog.properties.log_level.description" = "Level of log"
"definitions.PostLog.properties.log_level.format" = "int64"
"definitions.PostLog.properties.log_level.type" = "integer"
"definitions.PostLog.required.length" = 2
"definitions.PostLog.required[0]" = "log_entry"
"definitions.PostLog.required[1]" = "log_level"
"definitions.PostSite.properties.access_url.description" = "URL of the site"
"definitions.PostSite.properties.access_url.type" = "string"
"definitions.PostSite.properties.admin_url.description" = "Adminsitration URL"
"definitions.PostSite.properties.admin_url.type" = "string"
"definitions.PostSite.properties.akeebaProfile.description" = "Akeeba Profile"
"definitions.PostSite.properties.akeebaProfile.format" = "date-format"
"definitions.PostSite.properties.akeebaProfile.type" = "string"
"definitions.PostSite.properties.backupSchedule.description" = "Backup Schedule"
"definitions.PostSite.properties.backupSchedule.type" = "string"
"definitions.PostSite.properties.dateBackup.description" = "Date backup"
"definitions.PostSite.properties.dateBackup.format" = "date-format"
"definitions.PostSite.properties.dateBackup.type" = "string"
"definitions.PostSite.properties.name.description" = "Friendly name for the site"
"definitions.PostSite.properties.name.type" = "string"
"definitions.PostSite.properties.notes.description" = "Personnal note for the site"
"definitions.PostSite.properties.notes.type" = "string"
"definitions.PostSite.properties.published.description" = "Published status of site"
"definitions.PostSite.properties.published.type" = "boolean"
"definitions.PostSite.properties.secret_word.description" = "Watchful secret word"
"definitions.PostSite.properties.secret_word.type" = "string"
"definitions.PostSite.properties.tags.description" = "JSON encoded array of tags for the site (e.g. [{<q>name</q>:<q>mytag</q>},{<q>name</q>:<q>anothertag</q>}])"
"definitions.PostSite.properties.tags.format" = "json"
"definitions.PostSite.properties.tags.type" = "string"
"definitions.PostSite.properties.word_akeeba.description" = "Akeeba backup word"
"definitions.PostSite.properties.word_akeeba.type" = "string"
"definitions.PostSite.properties.word_check.description" = "Word checked for uptime"
"definitions.PostSite.properties.word_check.type" = "string"
"definitions.PostSite.required.length" = 1
"definitions.PostSite.required[0]" = "access_url"
"definitions.Site.properties.access_url.description" = "URL of the site"
"definitions.Site.properties.access_url.type" = "string"
"definitions.Site.properties.admin_url.description" = "Adminsitration URL"
"definitions.Site.properties.admin_url.type" = "string"
"definitions.Site.properties.akeebaProfile.description" = "Akeeba Profile"
"definitions.Site.properties.akeebaProfile.format" = "date-format"
"definitions.Site.properties.akeebaProfile.type" = "string"
"definitions.Site.properties.backupSchedule.description" = "Backup Schedule"
"definitions.Site.properties.backupSchedule.type" = "string"
"definitions.Site.properties.canBackup.description" = "Site can be backuped"
"definitions.Site.properties.canBackup.type" = "boolean"
"definitions.Site.properties.canUpdate.description" = "Site can use remote installer"
"definitions.Site.properties.canUpdate.type" = "boolean"
"definitions.Site.properties.dateBackup.description" = "Date backup"
"definitions.Site.properties.dateBackup.format" = "date-format"
"definitions.Site.properties.dateBackup.type" = "string"
"definitions.Site.properties.date_last_check.description" = "Watchful Last check"
"definitions.Site.properties.date_last_check.format" = "date-format"
"definitions.Site.properties.date_last_check.type" = "string"
"definitions.Site.properties.error.description" = "Error status of site"
"definitions.Site.properties.error.type" = "boolean"
"definitions.Site.properties.ip.description" = "server IP"
"definitions.Site.properties.ip.type" = "string"
"definitions.Site.properties.jUpdate.description" = "?"
"definitions.Site.properties.jUpdate.type" = "boolean"
"definitions.Site.properties.j_version.description" = "Joomla site version"
"definitions.Site.properties.j_version.type" = "string"
"definitions.Site.properties.monitorid.description" = "Id of the associated UptimeRobot monitor"
"definitions.Site.properties.monitorid.type" = "boolean"
"definitions.Site.properties.name.description" = "Friendly name for the site"
"definitions.Site.properties.name.type" = "string"
"definitions.Site.properties.nbUpdates.description" = "Number of updates"
"definitions.Site.properties.nbUpdates.format" = "date-format"
"definitions.Site.properties.nbUpdates.type" = "string"
"definitions.Site.properties.new_j_version.description" = "Joomla site version"
"definitions.Site.properties.new_j_version.type" = "string"
"definitions.Site.properties.notes.description" = "Personnal note for the site"
"definitions.Site.properties.notes.type" = "string"
"definitions.Site.properties.published.description" = "Published status of site"
"definitions.Site.properties.published.type" = "boolean"
"definitions.Site.properties.secret_word.description" = "Watchful secret word"
"definitions.Site.properties.secret_word.type" = "string"
"definitions.Site.properties.siteid.description" = "Unique identifier for the site"
"definitions.Site.properties.siteid.format" = "int64"
"definitions.Site.properties.siteid.type" = "integer"
"definitions.Site.properties.tags.description" = "List of tags for this site"
"definitions.Site.properties.tags.type" = "array"
"definitions.Site.properties.up.description" = "Site status"
"definitions.Site.properties.up.type" = "boolean"
"definitions.Site.properties.word_akeeba.description" = "Akeeba backup word"
"definitions.Site.properties.word_akeeba.type" = "string"
"definitions.Site.properties.word_check.description" = "Word checked for uptime"
"definitions.Site.properties.word_check.type" = "string"
"definitions.Site.required.length" = 1
"definitions.Site.required[0]" = "siteid"
"definitions.SsoUsers.properties.email.description" = "Email of the SSO User"
"definitions.SsoUsers.properties.email.type" = "string"
"definitions.SsoUsers.properties.groupid.description" = "Security Joomla group ID"
"definitions.SsoUsers.properties.groupid.format" = "int64"
"definitions.SsoUsers.properties.groupid.type" = "integer"
"definitions.SsoUsers.properties.id.description" = "Unique identifier for the SSO User"
"definitions.SsoUsers.properties.id.format" = "int64"
"definitions.SsoUsers.properties.id.type" = "integer"
"definitions.SsoUsers.properties.lastLoginDate.description" = "Last login date on remote site"
"definitions.SsoUsers.properties.lastLoginDate.format" = "date-time"
"definitions.SsoUsers.properties.lastLoginDate.type" = "string"
"definitions.SsoUsers.properties.lastLoginSite.description" = "Site Id of the last remote login"
"definitions.SsoUsers.properties.lastLoginSite.format" = "int64"
"definitions.SsoUsers.properties.lastLoginSite.type" = "integer"
"definitions.SsoUsers.properties.name.description" = "Account display name"
"definitions.SsoUsers.properties.name.type" = "string"
"definitions.SsoUsers.properties.password.description" = "Password of the SSO User"
"definitions.SsoUsers.properties.password.type" = "string"
"definitions.SsoUsers.properties.userid.description" = "Watchful user account"
"definitions.SsoUsers.properties.userid.format" = "int64"
"definitions.SsoUsers.properties.userid.type" = "integer"
"definitions.SsoUsers.properties.username.description" = "Username of the SSO User"
"definitions.SsoUsers.properties.username.type" = "string"
"definitions.SsoUsers.required.length" = 7
"definitions.SsoUsers.required[0]" = "email"
"definitions.SsoUsers.required[1]" = "groupid"
"definitions.SsoUsers.required[2]" = "id"
"definitions.SsoUsers.required[3]" = "name"
"definitions.SsoUsers.required[4]" = "password"
"definitions.SsoUsers.required[5]" = "userid"
"definitions.SsoUsers.required[6]" = "username"
"definitions.Tag.properties.id.description" = "Unique identifier for the tag"
"definitions.Tag.properties.id.format" = "int64"
"definitions.Tag.properties.id.type" = "integer"
"definitions.Tag.properties.name.description" = "Friendly name for the tag"
"definitions.Tag.properties.name.type" = "string"
"definitions.Tag.properties.nbSites.description" = "Number of sites use this tag (required field id)"
"definitions.Tag.properties.nbSites.type" = "integer"
"definitions.Tag.properties.type.default" = "default"
"definitions.Tag.properties.type.description" = "Bootstrap color of the tag"
"definitions.Tag.properties.type.enum.length" = 6
"definitions.Tag.properties.type.enum[0]" = "default"
"definitions.Tag.properties.type.enum[1]" = "success"
"definitions.Tag.properties.type.enum[2]" = "warning"
"definitions.Tag.properties.type.enum[3]" = "important"
"definitions.Tag.properties.type.enum[4]" = "info"
"definitions.Tag.properties.type.enum[5]" = "inverse"
"definitions.Tag.properties.type.type" = "string"
"definitions.Tag.required.length" = 2
"definitions.Tag.required[0]" = "id"
"definitions.Tag.required[1]" = "name"
"externalDocs.url" = "https://watchful.li/faqs/tools/watchful-rest-api.html"
host = "watchful.li"
"info.title" = "watchful.li"
"info.version" = "1.0.0"
"info.x-logo.backgroundColor" = "#1B4E65"
"info.x-logo.url" = "https://api.apis.guru/v2/cache/logo/https_d2071nnd6m4201.cloudfront.net_templates_balloon_images_logo.svg"
"info.x-origin.length" = 1
"info.x-origin[0].converter.url" = "https://github.com/lucybot/api-spec-converter"
"info.x-origin[0].converter.version" = "2.0.1"
"info.x-origin[0].format" = "swagger"
"info.x-origin[0].url" = "https://watchful.li/api/v1/api-docs/"
"info.x-origin[0].version" = "1.2"
"info.x-preferred" = true
"info.x-providerName" = "watchful.li"
"paths./audits.get.description" = "Returns a list of audits"
"paths./audits.get.operationId" = "getAudits"
"paths./audits.get.parameters.length" = 3
"paths./audits.get.parameters[0].description" = "Number of object to return (max 100, default 25)"
"paths./audits.get.parameters[0].format" = "int64"
"paths./audits.get.parameters[0].in" = "query"
"paths./audits.get.parameters[0].minimum" = 1.0
"paths./audits.get.parameters[0].name" = "limit"
"paths./audits.get.parameters[0].required" = false
"paths./audits.get.parameters[0].type" = "integer"
"paths./audits.get.parameters[1].description" = "Start of the return (default 0)"
"paths./audits.get.parameters[1].format" = "int64"
"paths./audits.get.parameters[1].in" = "query"
"paths./audits.get.parameters[1].minimum" = 0.0
"paths./audits.get.parameters[1].name" = "limitstart"
"paths./audits.get.parameters[1].required" = false
"paths./audits.get.parameters[1].type" = "integer"
"paths./audits.get.parameters[2].description" = "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-"
"paths./audits.get.parameters[2].in" = "query"
"paths./audits.get.parameters[2].name" = "order"
"paths./audits.get.parameters[2].required" = false
"paths./audits.get.parameters[2].type" = "string"
"paths./audits.get.produces.length" = 3
"paths./audits.get.produces[0]" = "application/json"
"paths./audits.get.produces[1]" = "application/xml"
"paths./audits.get.produces[2]" = "text/plain"
"paths./audits.get.responses.200.description" = "No response was specified"
"paths./audits.get.responses.200.schema.$ref" = "#/definitions/Audit"
"paths./audits.get.responses.403.description" = "Invalid API Key"
"paths./audits.get.summary" = "Get a list of audits"
"paths./audits.get.tags.length" = 1
"paths./audits.get.tags[0]" = "audits"
"paths./audits.post.description" = "Create a audit"
"paths./audits.post.operationId" = "CreateAudits"
"paths./audits.post.parameters.length" = 1
"paths./audits.post.parameters[0].description" = "JSON object Audit"
"paths./audits.post.parameters[0].in" = "body"
"paths./audits.post.parameters[0].name" = "body"
"paths./audits.post.parameters[0].required" = true
"paths./audits.post.parameters[0].schema.$ref" = "#/definitions/Audit"
"paths./audits.post.produces.length" = 3
"paths./audits.post.produces[0]" = "application/json"
"paths./audits.post.produces[1]" = "application/xml"
"paths./audits.post.produces[2]" = "text/plain"
"paths./audits.post.responses.200.description" = "No response was specified"
"paths./audits.post.responses.200.schema.$ref" = "#/definitions/Audit"
"paths./audits.post.responses.201.description" = "Saved successfully"
"paths./audits.post.responses.400.description" = "Invalid data"
"paths./audits.post.responses.403.description" = "Invalid API Key"
"paths./audits.post.responses.404.description" = "Not saved"
"paths./audits.post.summary" = "Create a audit"
"paths./audits.post.tags.length" = 1
"paths./audits.post.tags[0]" = "audits"
"paths./audits/metadata.get.description" = "Returns a list of fields"
"paths./audits/metadata.get.operationId" = "getFieldsAudits"
"paths./audits/metadata.get.produces.length" = 3
"paths./audits/metadata.get.produces[0]" = "application/json"
"paths./audits/metadata.get.produces[1]" = "application/xml"
"paths./audits/metadata.get.produces[2]" = "/plain"
"paths./audits/metadata.get.responses.200.description" = "No response was specified"
"paths./audits/metadata.get.responses.200.schema.type" = "string"
"paths./audits/metadata.get.summary" = "Get the list of fields"
"paths./audits/metadata.get.tags.length" = 1
"paths./audits/metadata.get.tags[0]" = "versions"
"paths./audits/{id}.delete.description" = "Delete a specific audit"
"paths./audits/{id}.delete.operationId" = "deleteAuditById"
"paths./audits/{id}.delete.parameters.length" = 1
"paths./audits/{id}.delete.parameters[0].description" = "ID of audit that needs to be deleted"
"paths./audits/{id}.delete.parameters[0].format" = "int64"
"paths./audits/{id}.delete.parameters[0].in" = "path"
"paths./audits/{id}.delete.parameters[0].minimum" = 1.0
"paths./audits/{id}.delete.parameters[0].name" = "id"
"paths./audits/{id}.delete.parameters[0].required" = true
"paths./audits/{id}.delete.parameters[0].type" = "integer"
"paths./audits/{id}.delete.produces.length" = 3
"paths./audits/{id}.delete.produces[0]" = "application/json"
"paths./audits/{id}.delete.produces[1]" = "application/xml"
"paths./audits/{id}.delete.produces[2]" = "text/plain"
"paths./audits/{id}.delete.responses.200.description" = "Audit correctly deleted"
"paths./audits/{id}.delete.responses.200.schema.type" = "string"
"paths./audits/{id}.delete.responses.403.description" = "Invalid API Key"
"paths./audits/{id}.delete.responses.404.description" = "Invalid ID"
"paths./audits/{id}.delete.summary" = "Delete a specific audit"
"paths./audits/{id}.delete.tags.length" = 1
"paths./audits/{id}.delete.tags[0]" = "audits"
"paths./audits/{id}.get.description" = "Returns a audit based on ID"
"paths./audits/{id}.get.operationId" = "getAuditById"
"paths./audits/{id}.get.parameters.length" = 2
"paths./audits/{id}.get.parameters[0].description" = "ID of audit that needs to be fetched"
"paths./audits/{id}.get.parameters[0].format" = "int64"
"paths./audits/{id}.get.parameters[0].in" = "path"
"paths./audits/{id}.get.parameters[0].minimum" = 1.0
"paths./audits/{id}.get.parameters[0].name" = "id"
"paths./audits/{id}.get.parameters[0].required" = true
"paths./audits/{id}.get.parameters[0].type" = "integer"
"paths./audits/{id}.get.parameters[1].description" = "Fields to return separate by comas: name,id"
"paths./audits/{id}.get.parameters[1].in" = "query"
"paths./audits/{id}.get.parameters[1].name" = "fields"
"paths./audits/{id}.get.parameters[1].required" = false
"paths./audits/{id}.get.parameters[1].type" = "string"
"paths./audits/{id}.get.produces.length" = 3
"paths./audits/{id}.get.produces[0]" = "application/json"
"paths./audits/{id}.get.produces[1]" = "application/xml"
"paths./audits/{id}.get.produces[2]" = "text/plain"
"paths./audits/{id}.get.responses.200.description" = "No response was specified"
"paths./audits/{id}.get.responses.200.schema.$ref" = "#/definitions/Audit"
"paths./audits/{id}.get.responses.400.description" = "Invalid ID"
"paths./audits/{id}.get.responses.403.description" = "Invalid API Key"
"paths./audits/{id}.get.summary" = "Find audit by ID"
"paths./audits/{id}.get.tags.length" = 1
"paths./audits/{id}.get.tags[0]" = "audits"
"paths./extensions.get.description" = "Returns a list Extensions"
"paths./extensions.get.operationId" = "getExtensions"
"paths./extensions.get.parameters.length" = 9
"paths./extensions.get.parameters[0].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./extensions.get.parameters[0].in" = "query"
"paths./extensions.get.parameters[0].name" = "ext_name"
"paths./extensions.get.parameters[0].required" = false
"paths./extensions.get.parameters[0].type" = "string"
"paths./extensions.get.parameters[1].description" = "List of sites id separated by comma"
"paths./extensions.get.parameters[1].in" = "query"
"paths./extensions.get.parameters[1].name" = "siteids"
"paths./extensions.get.parameters[1].required" = false
"paths./extensions.get.parameters[1].type" = "string"
"paths./extensions.get.parameters[2].description" = "Do a 'LIKE' search, you can also use '%'. technical name of the extension com_xxxx"
"paths./extensions.get.parameters[2].in" = "query"
"paths./extensions.get.parameters[2].name" = "ext_prefix"
"paths./extensions.get.parameters[2].required" = false
"paths./extensions.get.parameters[2].type" = "string"
"paths./extensions.get.parameters[3].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./extensions.get.parameters[3].in" = "query"
"paths./extensions.get.parameters[3].name" = "version"
"paths./extensions.get.parameters[3].required" = false
"paths./extensions.get.parameters[3].type" = "string"
"paths./extensions.get.parameters[4].description" = "update available for this extension"
"paths./extensions.get.parameters[4].enum.length" = 2
"paths./extensions.get.parameters[4].enum[0]" = 1.0
"paths./extensions.get.parameters[4].enum[1]" = 0.0
"paths./extensions.get.parameters[4].in" = "query"
"paths./extensions.get.parameters[4].name" = "vUpdate"
"paths./extensions.get.parameters[4].required" = false
"paths./extensions.get.parameters[4].type" = "integer"
"paths./extensions.get.parameters[5].description" = "Fields to return separate by comas: name,id"
"paths./extensions.get.parameters[5].in" = "query"
"paths./extensions.get.parameters[5].name" = "fields"
"paths./extensions.get.parameters[5].required" = false
"paths./extensions.get.parameters[5].type" = "string"
"paths./extensions.get.parameters[6].description" = "Number of object to return (max 100, default 25)"
"paths./extensions.get.parameters[6].format" = "int64"
"paths./extensions.get.parameters[6].in" = "query"
"paths./extensions.get.parameters[6].minimum" = 1.0
"paths./extensions.get.parameters[6].name" = "limit"
"paths./extensions.get.parameters[6].required" = false
"paths./extensions.get.parameters[6].type" = "integer"
"paths./extensions.get.parameters[7].description" = "Start of the return (default 0)"
"paths./extensions.get.parameters[7].format" = "int64"
"paths./extensions.get.parameters[7].in" = "query"
"paths./extensions.get.parameters[7].minimum" = 0.0
"paths./extensions.get.parameters[7].name" = "limitstart"
"paths./extensions.get.parameters[7].required" = false
"paths./extensions.get.parameters[7].type" = "integer"
"paths./extensions.get.parameters[8].description" = "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-"
"paths./extensions.get.parameters[8].in" = "query"
"paths./extensions.get.parameters[8].name" = "order"
"paths./extensions.get.parameters[8].required" = false
"paths./extensions.get.parameters[8].type" = "string"
"paths./extensions.get.produces.length" = 3
"paths./extensions.get.produces[0]" = "application/json"
"paths./extensions.get.produces[1]" = "application/xml"
"paths./extensions.get.produces[2]" = "text/plain"
"paths./extensions.get.responses.200.description" = "No response was specified"
"paths./extensions.get.responses.200.schema.$ref" = "#/definitions/Extension"
"paths./extensions.get.responses.403.description" = "Invalid API Key"
"paths./extensions.get.responses.404.description" = "Invalid"
"paths./extensions.get.summary" = "Get a list Extensions"
"paths./extensions.get.tags.length" = 1
"paths./extensions.get.tags[0]" = "extensions"
"paths./extensions/metadata.get.description" = "Returns a list of fields"
"paths./extensions/metadata.get.operationId" = "getFieldsExtensions"
"paths./extensions/metadata.get.produces.length" = 3
"paths./extensions/metadata.get.produces[0]" = "application/json"
"paths./extensions/metadata.get.produces[1]" = "application/xml"
"paths./extensions/metadata.get.produces[2]" = "text/plain"
"paths./extensions/metadata.get.responses.200.description" = "No response was specified"
"paths./extensions/metadata.get.responses.200.schema.type" = "string"
"paths./extensions/metadata.get.summary" = "Get the list of fields"
"paths./extensions/metadata.get.tags.length" = 1
"paths./extensions/metadata.get.tags[0]" = "extensions"
"paths./extensions/{id}/ignore.post.description" = "Set 'ignore updates' for a given extension / site_id"
"paths./extensions/{id}/ignore.post.operationId" = "ignoreExtensionUpdate"
"paths./extensions/{id}/ignore.post.parameters.length" = 1
"paths./extensions/{id}/ignore.post.parameters[0].description" = "ID of the extension"
"paths./extensions/{id}/ignore.post.parameters[0].format" = "int64"
"paths./extensions/{id}/ignore.post.parameters[0].in" = "path"
"paths./extensions/{id}/ignore.post.parameters[0].minimum" = 1.0
"paths./extensions/{id}/ignore.post.parameters[0].name" = "id"
"paths./extensions/{id}/ignore.post.parameters[0].required" = true
"paths./extensions/{id}/ignore.post.parameters[0].type" = "integer"
"paths./extensions/{id}/ignore.post.produces.length" = 3
"paths./extensions/{id}/ignore.post.produces[0]" = "application/json"
"paths./extensions/{id}/ignore.post.produces[1]" = "application/xml"
"paths./extensions/{id}/ignore.post.produces[2]" = "text/plain"
"paths./extensions/{id}/ignore.post.responses.200.description" = "Extension successfully updated"
"paths./extensions/{id}/ignore.post.responses.200.schema.type" = "string"
"paths./extensions/{id}/ignore.post.responses.404.description" = "Update not found for the given extension"
"paths./extensions/{id}/ignore.post.summary" = "Set 'ignore updates' for a given extension / site_id"
"paths./extensions/{id}/ignore.post.tags.length" = 1
"paths./extensions/{id}/ignore.post.tags[0]" = "extensions"
"paths./extensions/{id}/unignore.post.description" = "Remove 'ignore updates' for a given extension"
"paths./extensions/{id}/unignore.post.operationId" = "unignoreExtensionUpdate"
"paths./extensions/{id}/unignore.post.parameters.length" = 1
"paths./extensions/{id}/unignore.post.parameters[0].description" = "ID of the extension"
"paths./extensions/{id}/unignore.post.parameters[0].format" = "int64"
"paths./extensions/{id}/unignore.post.parameters[0].in" = "path"
"paths./extensions/{id}/unignore.post.parameters[0].minimum" = 1.0
"paths./extensions/{id}/unignore.post.parameters[0].name" = "id"
"paths./extensions/{id}/unignore.post.parameters[0].required" = true
"paths./extensions/{id}/unignore.post.parameters[0].type" = "integer"
"paths./extensions/{id}/unignore.post.produces.length" = 3
"paths./extensions/{id}/unignore.post.produces[0]" = "application/json"
"paths./extensions/{id}/unignore.post.produces[1]" = "application/xml"
"paths./extensions/{id}/unignore.post.produces[2]" = "text/plain"
"paths./extensions/{id}/unignore.post.responses.200.description" = "Extension successfully updated"
"paths./extensions/{id}/unignore.post.responses.200.schema.type" = "string"
"paths./extensions/{id}/unignore.post.responses.404.description" = "Update not found for the given extension"
"paths./extensions/{id}/unignore.post.summary" = "Remove 'ignore updates' for a given extension"
"paths./extensions/{id}/unignore.post.tags.length" = 1
"paths./extensions/{id}/unignore.post.tags[0]" = "extensions"
"paths./extensions/{id}/update.post.description" = "Update the extension on the remote site"
"paths./extensions/{id}/update.post.operationId" = "updateExtension"
"paths./extensions/{id}/update.post.parameters.length" = 1
"paths./extensions/{id}/update.post.parameters[0].description" = "ID of the extension"
"paths./extensions/{id}/update.post.parameters[0].format" = "int64"
"paths./extensions/{id}/update.post.parameters[0].in" = "path"
"paths./extensions/{id}/update.post.parameters[0].minimum" = 1.0
"paths./extensions/{id}/update.post.parameters[0].name" = "id"
"paths./extensions/{id}/update.post.parameters[0].required" = true
"paths./extensions/{id}/update.post.parameters[0].type" = "integer"
"paths./extensions/{id}/update.post.produces.length" = 3
"paths./extensions/{id}/update.post.produces[0]" = "application/json"
"paths./extensions/{id}/update.post.produces[1]" = "application/xml"
"paths./extensions/{id}/update.post.produces[2]" = "text/plain"
"paths./extensions/{id}/update.post.responses.200.description" = "Extension successfully updated"
"paths./extensions/{id}/update.post.responses.200.schema.type" = "string"
"paths./extensions/{id}/update.post.responses.404.description" = "Update not found for the given extension"
"paths./extensions/{id}/update.post.summary" = "Update the extension on the remote site"
"paths./extensions/{id}/update.post.tags.length" = 1
"paths./extensions/{id}/update.post.tags[0]" = "extensions"
"paths./feedbacks.get.description" = "Returns a list of feedbacks"
"paths./feedbacks.get.operationId" = "getFeedbacks"
"paths./feedbacks.get.parameters.length" = 1
"paths./feedbacks.get.parameters[0].description" = "Fields to return separate by comas (es. name,id)"
"paths./feedbacks.get.parameters[0].in" = "query"
"paths./feedbacks.get.parameters[0].name" = "fields"
"paths./feedbacks.get.parameters[0].required" = false
"paths./feedbacks.get.parameters[0].type" = "string"
"paths./feedbacks.get.produces.length" = 3
"paths./feedbacks.get.produces[0]" = "application/json"
"paths./feedbacks.get.produces[1]" = "application/xml"
"paths./feedbacks.get.produces[2]" = "/plain"
"paths./feedbacks.get.responses.200.description" = "No response was specified"
"paths./feedbacks.get.responses.200.schema.$ref" = "#/definitions/Feedback"
"paths./feedbacks.get.responses.403.description" = "Invalid API Key"
"paths./feedbacks.get.summary" = "Get feedbacks"
"paths./feedbacks.get.tags.length" = 1
"paths./feedbacks.get.tags[0]" = "feedbacks"
"paths./feedbacks.post.description" = "Create a feedback"
"paths./feedbacks.post.operationId" = "createFeedbacks"
"paths./feedbacks.post.parameters.length" = 1
"paths./feedbacks.post.parameters[0].description" = "JSON object Feedback"
"paths./feedbacks.post.parameters[0].in" = "body"
"paths./feedbacks.post.parameters[0].name" = "body"
"paths./feedbacks.post.parameters[0].required" = true
"paths./feedbacks.post.parameters[0].schema.$ref" = "#/definitions/Feedback"
"paths./feedbacks.post.produces.length" = 3
"paths./feedbacks.post.produces[0]" = "application/json"
"paths./feedbacks.post.produces[1]" = "application/xml"
"paths./feedbacks.post.produces[2]" = "/plain"
"paths./feedbacks.post.responses.200.description" = "No response was specified"
"paths./feedbacks.post.responses.200.schema.$ref" = "#/definitions/Audit"
"paths./feedbacks.post.responses.201.description" = "Saved successfully"
"paths./feedbacks.post.responses.400.description" = "Invalid data"
"paths./feedbacks.post.responses.403.description" = "Invalid API Key"
"paths./feedbacks.post.responses.404.description" = "Not saved"
"paths./feedbacks.post.summary" = "Create a feedback"
"paths./feedbacks.post.tags.length" = 1
"paths./feedbacks.post.tags[0]" = "feedbacks"
"paths./feedbacks/metadata.get.description" = "Returns a list of fields"
"paths./feedbacks/metadata.get.operationId" = "getFieldsFeedbacks"
"paths./feedbacks/metadata.get.produces.length" = 3
"paths./feedbacks/metadata.get.produces[0]" = "application/json"
"paths./feedbacks/metadata.get.produces[1]" = "application/xml"
"paths./feedbacks/metadata.get.produces[2]" = "/plain"
"paths./feedbacks/metadata.get.responses.200.description" = "No response was specified"
"paths./feedbacks/metadata.get.responses.200.schema.type" = "string"
"paths./feedbacks/metadata.get.summary" = "Get the list of fields"
"paths./feedbacks/metadata.get.tags.length" = 1
"paths./feedbacks/metadata.get.tags[0]" = "feedbacks"
"paths./logs.get.description" = "Returns a list of logs"
"paths./logs.get.parameters.length" = 8
"paths./logs.get.parameters[0].description" = "Type of the log"
"paths./logs.get.parameters[0].enum.length" = 12
"paths./logs.get.parameters[0].enum[0]" = ""
"paths./logs.get.parameters[0].enum[10]" = "modified_value_files"
"paths./logs.get.parameters[0].enum[11]" = "custom"
"paths./logs.get.parameters[0].enum[1]" = "plugin_sends_error"
"paths./logs.get.parameters[0].enum[2]" = "curlerror"
"paths./logs.get.parameters[0].enum[3]" = "modified_file"
"paths./logs.get.parameters[0].enum[4]" = "word_not_in_homepage"
"paths./logs.get.parameters[0].enum[5]" = "file_not_exists"
"paths./logs.get.parameters[0].enum[6]" = "update_available"
"paths./logs.get.parameters[0].enum[7]" = "new_extension"
"paths./logs.get.parameters[0].enum[8]" = "deleted_extension"
"paths./logs.get.parameters[0].enum[9]" = "extension_not_saved"
"paths./logs.get.parameters[0].in" = "query"
"paths./logs.get.parameters[0].name" = "log_type"
"paths./logs.get.parameters[0].type" = "string"
"paths./logs.get.parameters[1].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./logs.get.parameters[1].in" = "query"
"paths./logs.get.parameters[1].name" = "log_entry"
"paths./logs.get.parameters[1].required" = false
"paths./logs.get.parameters[1].type" = "string"
"paths./logs.get.parameters[2].description" = "Logs after this date, format YYYY-MM-DD HH:MM:SS"
"paths./logs.get.parameters[2].in" = "query"
"paths./logs.get.parameters[2].name" = "from"
"paths./logs.get.parameters[2].required" = false
"paths./logs.get.parameters[2].type" = "string"
"paths./logs.get.parameters[3].description" = "Logs before this date, format YYYY-MM-DD HH:MM:SS"
"paths./logs.get.parameters[3].in" = "query"
"paths./logs.get.parameters[3].name" = "to"
"paths./logs.get.parameters[3].required" = false
"paths./logs.get.parameters[3].type" = "string"
"paths./logs.get.parameters[4].description" = "Fields to return separate by comas: name,id"
"paths./logs.get.parameters[4].in" = "query"
"paths./logs.get.parameters[4].name" = "fields"
"paths./logs.get.parameters[4].required" = false
"paths./logs.get.parameters[4].type" = "string"
"paths./logs.get.parameters[5].description" = "Number of object to return (max 100, default 25)"
"paths./logs.get.parameters[5].format" = "int64"
"paths./logs.get.parameters[5].in" = "query"
"paths./logs.get.parameters[5].minimum" = 1.0
"paths./logs.get.parameters[5].name" = "limit"
"paths./logs.get.parameters[5].required" = false
"paths./logs.get.parameters[5].type" = "integer"
"paths./logs.get.parameters[6].description" = "Start of the return (default 0)"
"paths./logs.get.parameters[6].format" = "int64"
"paths./logs.get.parameters[6].in" = "query"
"paths./logs.get.parameters[6].minimum" = 0.0
"paths./logs.get.parameters[6].name" = "limitstart"
"paths./logs.get.parameters[6].required" = false
"paths./logs.get.parameters[6].type" = "integer"
"paths./logs.get.parameters[7].description" = "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-"
"paths./logs.get.parameters[7].in" = "query"
"paths./logs.get.parameters[7].name" = "order"
"paths./logs.get.parameters[7].required" = false
"paths./logs.get.parameters[7].type" = "string"
"paths./logs.get.produces.length" = 3
"paths./logs.get.produces[0]" = "application/json"
"paths./logs.get.produces[1]" = "application/xml"
"paths./logs.get.produces[2]" = "text/plain"
"paths./logs.get.responses.200.description" = "No response was specified"
"paths./logs.get.responses.200.schema.$ref" = "#/definitions/Log"
"paths./logs.get.responses.403.description" = "Invalid API Key"
"paths./logs.get.summary" = "Get a list of logs"
"paths./logs.get.tags.length" = 1
"paths./logs.get.tags[0]" = "logs"
"paths./logs/export.get.description" = "Returns a file contain the list of logs"
"paths./logs/export.get.operationId" = "getExportLogs"
"paths./logs/export.get.parameters.length" = 8
"paths./logs/export.get.parameters[0].description" = "Format of exported file (PDF or CSV)"
"paths./logs/export.get.parameters[0].enum.length" = 2
"paths./logs/export.get.parameters[0].enum[0]" = "csv"
"paths./logs/export.get.parameters[0].enum[1]" = "pdf"
"paths./logs/export.get.parameters[0].in" = "query"
"paths./logs/export.get.parameters[0].name" = "format"
"paths./logs/export.get.parameters[0].required" = true
"paths./logs/export.get.parameters[0].type" = "string"
"paths./logs/export.get.parameters[1].description" = "Site id of the log"
"paths./logs/export.get.parameters[1].format" = "int64"
"paths./logs/export.get.parameters[1].in" = "query"
"paths./logs/export.get.parameters[1].name" = "site"
"paths./logs/export.get.parameters[1].required" = false
"paths./logs/export.get.parameters[1].type" = "integer"
"paths./logs/export.get.parameters[2].description" = "Type of the log"
"paths./logs/export.get.parameters[2].enum.length" = 12
"paths./logs/export.get.parameters[2].enum[0]" = ""
"paths./logs/export.get.parameters[2].enum[10]" = "modified_value_files"
"paths./logs/export.get.parameters[2].enum[11]" = "custom"
"paths./logs/export.get.parameters[2].enum[1]" = "plugin_sends_error"
"paths./logs/export.get.parameters[2].enum[2]" = "curlerror"
"paths./logs/export.get.parameters[2].enum[3]" = "modified_file"
"paths./logs/export.get.parameters[2].enum[4]" = "word_not_in_homepage"
"paths./logs/export.get.parameters[2].enum[5]" = "file_not_exists"
"paths./logs/export.get.parameters[2].enum[6]" = "update_available"
"paths./logs/export.get.parameters[2].enum[7]" = "new_extension"
"paths./logs/export.get.parameters[2].enum[8]" = "deleted_extension"
"paths./logs/export.get.parameters[2].enum[9]" = "extension_not_saved"
"paths./logs/export.get.parameters[2].in" = "query"
"paths./logs/export.get.parameters[2].name" = "filter_type"
"paths./logs/export.get.parameters[2].type" = "string"
"paths./logs/export.get.parameters[3].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./logs/export.get.parameters[3].in" = "query"
"paths./logs/export.get.parameters[3].name" = "search"
"paths./logs/export.get.parameters[3].required" = false
"paths./logs/export.get.parameters[3].type" = "string"
"paths./logs/export.get.parameters[4].description" = "Logs after this date, format YYYY-MM-DD HH:MM:SS"
"paths./logs/export.get.parameters[4].in" = "query"
"paths./logs/export.get.parameters[4].name" = "startdate"
"paths./logs/export.get.parameters[4].required" = false
"paths./logs/export.get.parameters[4].type" = "string"
"paths./logs/export.get.parameters[5].description" = "Logs before this date, format YYYY-MM-DD HH:MM:SS"
"paths./logs/export.get.parameters[5].in" = "query"
"paths./logs/export.get.parameters[5].name" = "enddate"
"paths./logs/export.get.parameters[5].required" = false
"paths./logs/export.get.parameters[5].type" = "string"
"paths./logs/export.get.parameters[6].description" = "Number of object to return (max 100, default 25)"
"paths./logs/export.get.parameters[6].format" = "int64"
"paths./logs/export.get.parameters[6].in" = "query"
"paths./logs/export.get.parameters[6].minimum" = 1.0
"paths./logs/export.get.parameters[6].name" = "limit"
"paths./logs/export.get.parameters[6].required" = false
"paths./logs/export.get.parameters[6].type" = "integer"
"paths./logs/export.get.parameters[7].description" = "Start of the return (default 0)"
"paths./logs/export.get.parameters[7].format" = "int64"
"paths./logs/export.get.parameters[7].in" = "query"
"paths./logs/export.get.parameters[7].minimum" = 0.0
"paths./logs/export.get.parameters[7].name" = "startid"
"paths./logs/export.get.parameters[7].required" = false
"paths./logs/export.get.parameters[7].type" = "integer"
"paths./logs/export.get.produces.length" = 3
"paths./logs/export.get.produces[0]" = "application/json"
"paths./logs/export.get.produces[1]" = "application/xml"
"paths./logs/export.get.produces[2]" = "text/plain"
"paths./logs/export.get.responses.200.description" = "No response was specified"
"paths./logs/export.get.responses.403.description" = "Invalid API Key"
"paths./logs/export.get.summary" = "Get a CSV or PDF file contain the list of logs"
"paths./logs/export.get.tags.length" = 1
"paths./logs/export.get.tags[0]" = "logs"
"paths./logs/metadata.get.description" = "Returns a list of fields"
"paths./logs/metadata.get.operationId" = "getFieldsLogs"
"paths./logs/metadata.get.produces.length" = 3
"paths./logs/metadata.get.produces[0]" = "application/json"
"paths./logs/metadata.get.produces[1]" = "application/xml"
"paths./logs/metadata.get.produces[2]" = "text/plain"
"paths./logs/metadata.get.responses.200.description" = "No response was specified"
"paths./logs/metadata.get.responses.200.schema.type" = "string"
"paths./logs/metadata.get.summary" = "Get the list of fields"
"paths./logs/metadata.get.tags.length" = 1
"paths./logs/metadata.get.tags[0]" = "logs"
"paths./logs/types.get.description" = "Returns a list of log types"
"paths./logs/types.get.operationId" = "getTypesLogs"
"paths./logs/types.get.produces.length" = 3
"paths./logs/types.get.produces[0]" = "application/json"
"paths./logs/types.get.produces[1]" = "application/xml"
"paths./logs/types.get.produces[2]" = "text/plain"
"paths./logs/types.get.responses.200.description" = "No response was specified"
"paths./logs/types.get.responses.200.schema.type" = "string"
"paths./logs/types.get.summary" = "Get the list of log types"
"paths./logs/types.get.tags.length" = 1
"paths./logs/types.get.tags[0]" = "logs"
"paths./logs/{id}.delete.description" = "Delete a specific log"
"paths./logs/{id}.delete.operationId" = "deleteLogById"
"paths./logs/{id}.delete.parameters.length" = 1
"paths./logs/{id}.delete.parameters[0].description" = "ID of log that needs to be deleted"
"paths./logs/{id}.delete.parameters[0].format" = "int64"
"paths./logs/{id}.delete.parameters[0].in" = "path"
"paths./logs/{id}.delete.parameters[0].minimum" = 1.0
"paths./logs/{id}.delete.parameters[0].name" = "id"
"paths./logs/{id}.delete.parameters[0].required" = true
"paths./logs/{id}.delete.parameters[0].type" = "integer"
"paths./logs/{id}.delete.produces.length" = 3
"paths./logs/{id}.delete.produces[0]" = "application/json"
"paths./logs/{id}.delete.produces[1]" = "application/xml"
"paths./logs/{id}.delete.produces[2]" = "text/plain"
"paths./logs/{id}.delete.responses.200.description" = "Log correctly deleted"
"paths./logs/{id}.delete.responses.200.schema.type" = "string"
"paths./logs/{id}.delete.responses.403.description" = "Invalid API Key"
"paths./logs/{id}.delete.responses.404.description" = "Invalid ID"
"paths./logs/{id}.delete.summary" = "Delete a specific log"
"paths./logs/{id}.delete.tags.length" = 1
"paths./logs/{id}.delete.tags[0]" = "logs"
"paths./packages.post.consumes.length" = 1
"paths./packages.post.consumes[0]" = "application/x-www-form-urlencoded"
"paths./packages.post.description" = "Upload a ZIP package"
"paths./packages.post.operationId" = "uploadZipPackage"
"paths./packages.post.parameters.length" = 1
"paths./packages.post.parameters[0].description" = "ZIP package"
"paths./packages.post.parameters[0].in" = "formData"
"paths./packages.post.parameters[0].name" = "file"
"paths./packages.post.parameters[0].required" = true
"paths./packages.post.parameters[0].type" = "file"
"paths./packages.post.produces.length" = 3
"paths./packages.post.produces[0]" = "application/json"
"paths./packages.post.produces[1]" = "application/xml"
"paths./packages.post.produces[2]" = "text/plain"
"paths./packages.post.responses.200.description" = "No response was specified"
"paths./packages.post.responses.200.schema.$ref" = "#/definitions/Tag"
"paths./packages.post.responses.201.description" = "Saved successfully"
"paths./packages.post.responses.400.description" = "Invalid data"
"paths./packages.post.responses.403.description" = "Invalid API Key"
"paths./packages.post.responses.404.description" = "Not saved"
"paths./packages.post.summary" = "Upload a ZIP package"
"paths./packages.post.tags.length" = 1
"paths./packages.post.tags[0]" = "packages"
"paths./reports/sites/{id}.get.description" = "Returns a PDF report based on a site ID"
"paths./reports/sites/{id}.get.parameters.length" = 6
"paths./reports/sites/{id}.get.parameters[0].description" = "ID that needs to be fetched"
"paths./reports/sites/{id}.get.parameters[0].format" = "int64"
"paths./reports/sites/{id}.get.parameters[0].in" = "path"
"paths./reports/sites/{id}.get.parameters[0].minimum" = 1.0
"paths./reports/sites/{id}.get.parameters[0].name" = "id"
"paths./reports/sites/{id}.get.parameters[0].required" = true
"paths./reports/sites/{id}.get.parameters[0].type" = "integer"
"paths./reports/sites/{id}.get.parameters[1].description" = "Start of the report, format YYYY-MM-DD, default today-30day "
"paths./reports/sites/{id}.get.parameters[1].in" = "query"
"paths./reports/sites/{id}.get.parameters[1].name" = "from"
"paths./reports/sites/{id}.get.parameters[1].required" = false
"paths./reports/sites/{id}.get.parameters[1].type" = "string"
"paths./reports/sites/{id}.get.parameters[2].description" = "End of the report, format YYYY-MM-DD, default today"
"paths./reports/sites/{id}.get.parameters[2].in" = "query"
"paths./reports/sites/{id}.get.parameters[2].name" = "to"
"paths./reports/sites/{id}.get.parameters[2].required" = false
"paths./reports/sites/{id}.get.parameters[2].type" = "string"
"paths./reports/sites/{id}.get.parameters[3].description" = "Type of reports separate by comas: Ga,Logs,Uptime"
"paths./reports/sites/{id}.get.parameters[3].in" = "query"
"paths./reports/sites/{id}.get.parameters[3].name" = "reports"
"paths./reports/sites/{id}.get.parameters[3].required" = false
"paths./reports/sites/{id}.get.parameters[3].type" = "string"
"paths./reports/sites/{id}.get.parameters[4].description" = "Type of the log to show in the report"
"paths./reports/sites/{id}.get.parameters[4].enum.length" = 11
"paths./reports/sites/{id}.get.parameters[4].enum[0]" = ""
"paths./reports/sites/{id}.get.parameters[4].enum[10]" = "modified_value_files"
"paths./reports/sites/{id}.get.parameters[4].enum[1]" = "plugin_sends_error"
"paths./reports/sites/{id}.get.parameters[4].enum[2]" = "curlerror"
"paths./reports/sites/{id}.get.parameters[4].enum[3]" = "modified_file"
"paths./reports/sites/{id}.get.parameters[4].enum[4]" = "word_not_in_homepage"
"paths./reports/sites/{id}.get.parameters[4].enum[5]" = "file_not_exists"
"paths./reports/sites/{id}.get.parameters[4].enum[6]" = "update_available"
"paths./reports/sites/{id}.get.parameters[4].enum[7]" = "new_extension"
"paths./reports/sites/{id}.get.parameters[4].enum[8]" = "deleted_extension"
"paths./reports/sites/{id}.get.parameters[4].enum[9]" = "extension_not_saved"
"paths./reports/sites/{id}.get.parameters[4].in" = "query"
"paths./reports/sites/{id}.get.parameters[4].name" = "log_type"
"paths./reports/sites/{id}.get.parameters[4].type" = "string"
"paths./reports/sites/{id}.get.parameters[5].description" = "Define if you want show previous values in Google Analytics graph"
"paths./reports/sites/{id}.get.parameters[5].enum.length" = 2
"paths./reports/sites/{id}.get.parameters[5].enum[0]" = 0.0
"paths./reports/sites/{id}.get.parameters[5].enum[1]" = 1.0
"paths./reports/sites/{id}.get.parameters[5].in" = "query"
"paths./reports/sites/{id}.get.parameters[5].name" = "compare"
"paths./reports/sites/{id}.get.parameters[5].type" = "integer"
"paths./reports/sites/{id}.get.produces.length" = 1
"paths./reports/sites/{id}.get.produces[0]" = "application/pdf"
"paths./reports/sites/{id}.get.responses.200.description" = "No response was specified"
"paths./reports/sites/{id}.get.responses.200.schema.$ref" = "#/definitions/Reports"
"paths./reports/sites/{id}.get.responses.403.description" = "Invalid API Key"
"paths./reports/sites/{id}.get.responses.404.description" = "Invalid ID"
"paths./reports/sites/{id}.get.summary" = "Returns a PDF report for a specific site"
"paths./reports/sites/{id}.get.tags.length" = 1
"paths./reports/sites/{id}.get.tags[0]" = "reports"
"paths./reports/tags/{id}.get.description" = "Returns a report based on a site ID"
"paths./reports/tags/{id}.get.parameters.length" = 6
"paths./reports/tags/{id}.get.parameters[0].description" = "ID that needs to be fetched"
"paths./reports/tags/{id}.get.parameters[0].format" = "int64"
"paths./reports/tags/{id}.get.parameters[0].in" = "path"
"paths./reports/tags/{id}.get.parameters[0].minimum" = 1.0
"paths./reports/tags/{id}.get.parameters[0].name" = "id"
"paths./reports/tags/{id}.get.parameters[0].required" = true
"paths./reports/tags/{id}.get.parameters[0].type" = "integer"
"paths./reports/tags/{id}.get.parameters[1].description" = "Start of the report, format YYYY-MM-DD, default today-30day "
"paths./reports/tags/{id}.get.parameters[1].in" = "query"
"paths./reports/tags/{id}.get.parameters[1].name" = "from"
"paths./reports/tags/{id}.get.parameters[1].required" = false
"paths./reports/tags/{id}.get.parameters[1].type" = "string"
"paths./reports/tags/{id}.get.parameters[2].description" = "End of the report, format YYYY-MM-DD, default today"
"paths./reports/tags/{id}.get.parameters[2].in" = "query"
"paths./reports/tags/{id}.get.parameters[2].name" = "to"
"paths./reports/tags/{id}.get.parameters[2].required" = false
"paths./reports/tags/{id}.get.parameters[2].type" = "string"
"paths./reports/tags/{id}.get.parameters[3].description" = "Type of reports separate by comas: Ga,Logs,Uptime"
"paths./reports/tags/{id}.get.parameters[3].in" = "query"
"paths./reports/tags/{id}.get.parameters[3].name" = "reports"
"paths./reports/tags/{id}.get.parameters[3].required" = false
"paths./reports/tags/{id}.get.parameters[3].type" = "string"
"paths./reports/tags/{id}.get.parameters[4].description" = "Type of the log to show in the report"
"paths./reports/tags/{id}.get.parameters[4].enum.length" = 11
"paths./reports/tags/{id}.get.parameters[4].enum[0]" = ""
"paths./reports/tags/{id}.get.parameters[4].enum[10]" = "modified_value_files"
"paths./reports/tags/{id}.get.parameters[4].enum[1]" = "plugin_sends_error"
"paths./reports/tags/{id}.get.parameters[4].enum[2]" = "curlerror"
"paths./reports/tags/{id}.get.parameters[4].enum[3]" = "modified_file"
"paths./reports/tags/{id}.get.parameters[4].enum[4]" = "word_not_in_homepage"
"paths./reports/tags/{id}.get.parameters[4].enum[5]" = "file_not_exists"
"paths./reports/tags/{id}.get.parameters[4].enum[6]" = "update_available"
"paths./reports/tags/{id}.get.parameters[4].enum[7]" = "new_extension"
"paths./reports/tags/{id}.get.parameters[4].enum[8]" = "deleted_extension"
"paths./reports/tags/{id}.get.parameters[4].enum[9]" = "extension_not_saved"
"paths./reports/tags/{id}.get.parameters[4].in" = "query"
"paths./reports/tags/{id}.get.parameters[4].name" = "log_type"
"paths./reports/tags/{id}.get.parameters[4].type" = "string"
"paths./reports/tags/{id}.get.parameters[5].description" = "Define if you want show previous values in Google Analytics graph"
"paths./reports/tags/{id}.get.parameters[5].enum.length" = 2
"paths./reports/tags/{id}.get.parameters[5].enum[0]" = 0.0
"paths./reports/tags/{id}.get.parameters[5].enum[1]" = 1.0
"paths./reports/tags/{id}.get.parameters[5].in" = "query"
"paths./reports/tags/{id}.get.parameters[5].name" = "compare"
"paths./reports/tags/{id}.get.parameters[5].type" = "integer"
"paths./reports/tags/{id}.get.produces.length" = 1
"paths./reports/tags/{id}.get.produces[0]" = "application/pdf"
"paths./reports/tags/{id}.get.responses.200.description" = "No response was specified"
"paths./reports/tags/{id}.get.responses.200.schema.$ref" = "#/definitions/Reports"
"paths./reports/tags/{id}.get.responses.403.description" = "Invalid API Key"
"paths./reports/tags/{id}.get.responses.404.description" = "Invalid ID"
"paths./reports/tags/{id}.get.summary" = "Find sites by ID"
"paths./reports/tags/{id}.get.tags.length" = 1
"paths./reports/tags/{id}.get.tags[0]" = "reports"
"paths./sites.get.description" = "Returns a list of Sites"
"paths./sites.get.operationId" = "getSites"
"paths./sites.get.parameters.length" = 15
"paths./sites.get.parameters[0].description" = "List of sites id separated by comma"
"paths./sites.get.parameters[0].in" = "query"
"paths./sites.get.parameters[0].name" = "siteids"
"paths./sites.get.parameters[0].required" = false
"paths./sites.get.parameters[0].type" = "string"
"paths./sites.get.parameters[10].description" = "Is online"
"paths./sites.get.parameters[10].enum.length" = 2
"paths./sites.get.parameters[10].enum[0]" = 1.0
"paths./sites.get.parameters[10].enum[1]" = 0.0
"paths./sites.get.parameters[10].in" = "query"
"paths./sites.get.parameters[10].name" = "up"
"paths./sites.get.parameters[10].required" = false
"paths./sites.get.parameters[10].type" = "integer"
"paths./sites.get.parameters[11].description" = "Fields to return separated by commas (e.g. name,id)"
"paths./sites.get.parameters[11].in" = "query"
"paths./sites.get.parameters[11].name" = "fields"
"paths./sites.get.parameters[11].required" = false
"paths./sites.get.parameters[11].type" = "string"
"paths./sites.get.parameters[12].description" = "Number of objects to return (max 100, default 25)"
"paths./sites.get.parameters[12].format" = "int64"
"paths./sites.get.parameters[12].in" = "query"
"paths./sites.get.parameters[12].minimum" = 1.0
"paths./sites.get.parameters[12].name" = "limit"
"paths./sites.get.parameters[12].required" = false
"paths./sites.get.parameters[12].type" = "integer"
"paths./sites.get.parameters[13].description" = "Start of the return (default 0)"
"paths./sites.get.parameters[13].format" = "int64"
"paths./sites.get.parameters[13].in" = "query"
"paths./sites.get.parameters[13].minimum" = 0.0
"paths./sites.get.parameters[13].name" = "limitstart"
"paths./sites.get.parameters[13].required" = false
"paths./sites.get.parameters[13].type" = "integer"
"paths./sites.get.parameters[14].description" = "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-"
"paths./sites.get.parameters[14].in" = "query"
"paths./sites.get.parameters[14].name" = "order"
"paths./sites.get.parameters[14].required" = false
"paths./sites.get.parameters[14].type" = "string"
"paths./sites.get.parameters[1].description" = "Site name. Do a 'LIKE' search, you can also use '%'"
"paths./sites.get.parameters[1].in" = "query"
"paths./sites.get.parameters[1].name" = "name"
"paths./sites.get.parameters[1].required" = false
"paths./sites.get.parameters[1].type" = "string"
"paths./sites.get.parameters[2].description" = "Access URL. Do a 'LIKE' search, you can also use '%'"
"paths./sites.get.parameters[2].in" = "query"
"paths./sites.get.parameters[2].name" = "access_url"
"paths./sites.get.parameters[2].required" = false
"paths./sites.get.parameters[2].type" = "string"
"paths./sites.get.parameters[3].description" = "Joomla version. Do a 'LIKE' search, you can also use '%'"
"paths./sites.get.parameters[3].in" = "query"
"paths./sites.get.parameters[3].name" = "j_version"
"paths./sites.get.parameters[3].required" = false
"paths./sites.get.parameters[3].type" = "string"
"paths./sites.get.parameters[4].description" = "Ip address. Do a 'LIKE' search, you can also use '%'"
"paths./sites.get.parameters[4].in" = "query"
"paths./sites.get.parameters[4].name" = "ip"
"paths./sites.get.parameters[4].required" = false
"paths./sites.get.parameters[4].type" = "string"
"paths./sites.get.parameters[5].description" = "Joomla core update status (1: update required, 0: update not required)"
"paths./sites.get.parameters[5].enum.length" = 2
"paths./sites.get.parameters[5].enum[0]" = 1.0
"paths./sites.get.parameters[5].enum[1]" = 0.0
"paths./sites.get.parameters[5].in" = "query"
"paths./sites.get.parameters[5].name" = "jUpdate"
"paths./sites.get.parameters[5].type" = "integer"
"paths./sites.get.parameters[6].description" = "canUpdate"
"paths./sites.get.parameters[6].enum.length" = 2
"paths./sites.get.parameters[6].enum[0]" = 1.0
"paths./sites.get.parameters[6].enum[1]" = 0.0
"paths./sites.get.parameters[6].in" = "query"
"paths./sites.get.parameters[6].name" = "canUpdate"
"paths./sites.get.parameters[6].type" = "integer"
"paths./sites.get.parameters[7].description" = "Is published"
"paths./sites.get.parameters[7].enum.length" = 2
"paths./sites.get.parameters[7].enum[0]" = 1.0
"paths./sites.get.parameters[7].enum[1]" = 0.0
"paths./sites.get.parameters[7].in" = "query"
"paths./sites.get.parameters[7].name" = "published"
"paths./sites.get.parameters[7].required" = false
"paths./sites.get.parameters[7].type" = "integer"
"paths./sites.get.parameters[8].description" = "Has errors"
"paths./sites.get.parameters[8].in" = "query"
"paths./sites.get.parameters[8].name" = "error"
"paths./sites.get.parameters[8].required" = false
"paths./sites.get.parameters[8].type" = "string"
"paths./sites.get.parameters[9].in" = "query"
"paths./sites.get.parameters[9].name" = "nbUpdates"
"paths./sites.get.parameters[9].required" = false
"paths./sites.get.parameters[9].type" = "string"
"paths./sites.get.produces.length" = 3
"paths./sites.get.produces[0]" = "application/json"
"paths./sites.get.produces[1]" = "application/xml"
"paths./sites.get.produces[2]" = "text/plain"
"paths./sites.get.responses.200.description" = "No response was specified"
"paths./sites.get.responses.200.schema.$ref" = "#/definitions/Site"
"paths./sites.get.responses.403.description" = "Invalid API Key"
"paths./sites.get.responses.404.description" = "Invalid ID"
"paths./sites.get.summary" = "Get a list of Sites"
"paths./sites.get.tags.length" = 1
"paths./sites.get.tags[0]" = "sites"
"paths./sites.post.description" = "Create a site"
"paths./sites.post.operationId" = "createSite"
"paths./sites.post.parameters.length" = 1
"paths./sites.post.parameters[0].description" = "JSON object Site"
"paths./sites.post.parameters[0].in" = "body"
"paths./sites.post.parameters[0].name" = "body"
"paths./sites.post.parameters[0].required" = true
"paths./sites.post.parameters[0].schema.$ref" = "#/definitions/PostSite"
"paths./sites.post.produces.length" = 3
"paths./sites.post.produces[0]" = "application/json"
"paths./sites.post.produces[1]" = "application/xml"
"paths./sites.post.produces[2]" = "text/plain"
"paths./sites.post.responses.200.description" = "No response was specified"
"paths./sites.post.responses.200.schema.$ref" = "#/definitions/Site"
"paths./sites.post.responses.201.description" = "Saved successfully"
"paths./sites.post.responses.400.description" = "Invalid data"
"paths./sites.post.responses.403.description" = "Not allowed to add sites"
"paths./sites.post.responses.404.description" = "Not saved"
"paths./sites.post.summary" = "Create a site"
"paths./sites.post.tags.length" = 1
"paths./sites.post.tags[0]" = "sites"
"paths./sites/metadata.get.description" = "Returns a list of fields"
"paths./sites/metadata.get.produces.length" = 3
"paths./sites/metadata.get.produces[0]" = "application/json"
"paths./sites/metadata.get.produces[1]" = "application/xml"
"paths./sites/metadata.get.produces[2]" = "text/plain"
"paths./sites/metadata.get.responses.200.description" = "No response was specified"
"paths./sites/metadata.get.responses.200.schema.type" = "string"
"paths./sites/metadata.get.summary" = "Get the list of fields"
"paths./sites/metadata.get.tags.length" = 1
"paths./sites/metadata.get.tags[0]" = "sites"
"paths./sites/{id}.delete.description" = "Delete a specific Site"
"paths./sites/{id}.delete.parameters.length" = 1
"paths./sites/{id}.delete.parameters[0].description" = "ID of Site that needs to be deleted"
"paths./sites/{id}.delete.parameters[0].format" = "int64"
"paths./sites/{id}.delete.parameters[0].in" = "path"
"paths./sites/{id}.delete.parameters[0].minimum" = 1.0
"paths./sites/{id}.delete.parameters[0].name" = "id"
"paths./sites/{id}.delete.parameters[0].required" = true
"paths./sites/{id}.delete.parameters[0].type" = "integer"
"paths./sites/{id}.delete.produces.length" = 3
"paths./sites/{id}.delete.produces[0]" = "application/json"
"paths./sites/{id}.delete.produces[1]" = "application/xml"
"paths./sites/{id}.delete.produces[2]" = "text/plain"
"paths./sites/{id}.delete.responses.200.description" = "Deleted successfully"
"paths./sites/{id}.delete.responses.200.schema.type" = "string"
"paths./sites/{id}.delete.responses.403.description" = "Invalid API Key"
"paths./sites/{id}.delete.responses.404.description" = "Invalid ID"
"paths./sites/{id}.delete.summary" = "Delete a specific Site"
"paths./sites/{id}.delete.tags.length" = 1
"paths./sites/{id}.delete.tags[0]" = "sites"
"paths./sites/{id}.get.description" = "Return a site based on ID"
"paths./sites/{id}.get.operationId" = "getSiteById"
"paths./sites/{id}.get.parameters.length" = 2
"paths./sites/{id}.get.parameters[0].description" = "ID that needs to be fetched"
"paths./sites/{id}.get.parameters[0].format" = "int64"
"paths./sites/{id}.get.parameters[0].in" = "path"
"paths./sites/{id}.get.parameters[0].minimum" = 1.0
"paths./sites/{id}.get.parameters[0].name" = "id"
"paths./sites/{id}.get.parameters[0].required" = true
"paths./sites/{id}.get.parameters[0].type" = "integer"
"paths./sites/{id}.get.parameters[1].description" = "Fields to return separate by comas: name,id"
"paths./sites/{id}.get.parameters[1].in" = "query"
"paths./sites/{id}.get.parameters[1].name" = "fields"
"paths./sites/{id}.get.parameters[1].required" = false
"paths./sites/{id}.get.parameters[1].type" = "string"
"paths./sites/{id}.get.produces.length" = 3
"paths./sites/{id}.get.produces[0]" = "application/json"
"paths./sites/{id}.get.produces[1]" = "application/xml"
"paths./sites/{id}.get.produces[2]" = "text/plain"
"paths./sites/{id}.get.responses.200.description" = "No response was specified"
"paths./sites/{id}.get.responses.200.schema.$ref" = "#/definitions/Site"
"paths./sites/{id}.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}.get.summary" = "Find sites by ID"
"paths./sites/{id}.get.tags.length" = 1
"paths./sites/{id}.get.tags[0]" = "sites"
"paths./sites/{id}.put.description" = "Update a site"
"paths./sites/{id}.put.parameters.length" = 2
"paths./sites/{id}.put.parameters[0].description" = "ID of the website that needs to be update"
"paths./sites/{id}.put.parameters[0].format" = "int64"
"paths./sites/{id}.put.parameters[0].in" = "path"
"paths./sites/{id}.put.parameters[0].minimum" = 1.0
"paths./sites/{id}.put.parameters[0].name" = "id"
"paths./sites/{id}.put.parameters[0].required" = true
"paths./sites/{id}.put.parameters[0].type" = "integer"
"paths./sites/{id}.put.parameters[1].description" = "JSON object Site"
"paths./sites/{id}.put.parameters[1].in" = "body"
"paths./sites/{id}.put.parameters[1].name" = "body"
"paths./sites/{id}.put.parameters[1].required" = true
"paths./sites/{id}.put.parameters[1].schema.$ref" = "#/definitions/PostSite"
"paths./sites/{id}.put.produces.length" = 3
"paths./sites/{id}.put.produces[0]" = "application/json"
"paths./sites/{id}.put.produces[1]" = "application/xml"
"paths./sites/{id}.put.produces[2]" = "text/plain"
"paths./sites/{id}.put.responses.200.description" = "Updated successfully"
"paths./sites/{id}.put.responses.200.schema.$ref" = "#/definitions/Site"
"paths./sites/{id}.put.responses.400.description" = "Invalid data"
"paths./sites/{id}.put.responses.403.description" = "Invalid API Key"
"paths./sites/{id}.put.responses.404.description" = "Invalid ID"
"paths./sites/{id}.put.summary" = "Update a site"
"paths./sites/{id}.put.tags.length" = 1
"paths./sites/{id}.put.tags[0]" = "sites"
"paths./sites/{id}/audits.get.description" = "Return audits for a specific website"
"paths./sites/{id}/audits.get.operationId" = "getSiteAudits"
"paths./sites/{id}/audits.get.parameters.length" = 5
"paths./sites/{id}/audits.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/audits.get.parameters[0].format" = "int64"
"paths./sites/{id}/audits.get.parameters[0].in" = "path"
"paths./sites/{id}/audits.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/audits.get.parameters[0].name" = "id"
"paths./sites/{id}/audits.get.parameters[0].required" = true
"paths./sites/{id}/audits.get.parameters[0].type" = "integer"
"paths./sites/{id}/audits.get.parameters[1].description" = "Fields to return separate by comas: name,id"
"paths./sites/{id}/audits.get.parameters[1].in" = "query"
"paths./sites/{id}/audits.get.parameters[1].name" = "fields"
"paths./sites/{id}/audits.get.parameters[1].required" = false
"paths./sites/{id}/audits.get.parameters[1].type" = "string"
"paths./sites/{id}/audits.get.parameters[2].description" = "Number of object to return (max 100, default 25)"
"paths./sites/{id}/audits.get.parameters[2].format" = "int64"
"paths./sites/{id}/audits.get.parameters[2].in" = "query"
"paths./sites/{id}/audits.get.parameters[2].minimum" = 1.0
"paths./sites/{id}/audits.get.parameters[2].name" = "limit"
"paths./sites/{id}/audits.get.parameters[2].required" = false
"paths./sites/{id}/audits.get.parameters[2].type" = "integer"
"paths./sites/{id}/audits.get.parameters[3].description" = "Start of the return (default 0)"
"paths./sites/{id}/audits.get.parameters[3].format" = "int64"
"paths./sites/{id}/audits.get.parameters[3].in" = "query"
"paths./sites/{id}/audits.get.parameters[3].minimum" = 0.0
"paths./sites/{id}/audits.get.parameters[3].name" = "limitstart"
"paths./sites/{id}/audits.get.parameters[3].required" = false
"paths./sites/{id}/audits.get.parameters[3].type" = "integer"
"paths./sites/{id}/audits.get.parameters[4].description" = "ORDER by this field"
"paths./sites/{id}/audits.get.parameters[4].in" = "query"
"paths./sites/{id}/audits.get.parameters[4].name" = "order"
"paths./sites/{id}/audits.get.parameters[4].required" = false
"paths./sites/{id}/audits.get.parameters[4].type" = "string"
"paths./sites/{id}/audits.get.produces.length" = 3
"paths./sites/{id}/audits.get.produces[0]" = "application/json"
"paths./sites/{id}/audits.get.produces[1]" = "application/xml"
"paths./sites/{id}/audits.get.produces[2]" = "text/plain"
"paths./sites/{id}/audits.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/audits.get.responses.200.schema.$ref" = "#/definitions/Audits"
"paths./sites/{id}/audits.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/audits.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/audits.get.summary" = "Return audits for a specific website"
"paths./sites/{id}/audits.get.tags.length" = 1
"paths./sites/{id}/audits.get.tags[0]" = "sites"
"paths./sites/{id}/audits.post.description" = "Create an audit for the site"
"paths./sites/{id}/audits.post.operationId" = "createAudits"
"paths./sites/{id}/audits.post.parameters.length" = 1
"paths./sites/{id}/audits.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/audits.post.parameters[0].format" = "int64"
"paths./sites/{id}/audits.post.parameters[0].in" = "path"
"paths./sites/{id}/audits.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/audits.post.parameters[0].name" = "id"
"paths./sites/{id}/audits.post.parameters[0].required" = true
"paths./sites/{id}/audits.post.parameters[0].type" = "integer"
"paths./sites/{id}/audits.post.produces.length" = 3
"paths./sites/{id}/audits.post.produces[0]" = "application/json"
"paths./sites/{id}/audits.post.produces[1]" = "application/xml"
"paths./sites/{id}/audits.post.produces[2]" = "text/plain"
"paths./sites/{id}/audits.post.responses.200.description" = "No response was specified"
"paths./sites/{id}/audits.post.responses.200.schema.$ref" = "#/definitions/Audit"
"paths./sites/{id}/audits.post.responses.201.description" = "Saved successfully"
"paths./sites/{id}/audits.post.responses.400.description" = "Invalid data"
"paths./sites/{id}/audits.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/audits.post.responses.404.description" = "Not saved"
"paths./sites/{id}/audits.post.summary" = "Create an audit for the site"
"paths./sites/{id}/audits.post.tags.length" = 1
"paths./sites/{id}/audits.post.tags[0]" = "sites"
"paths./sites/{id}/backupnow.post.description" = "Add the site to the backup queue"
"paths./sites/{id}/backupnow.post.operationId" = "addSiteToBackupQueue"
"paths./sites/{id}/backupnow.post.parameters.length" = 1
"paths./sites/{id}/backupnow.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/backupnow.post.parameters[0].format" = "int64"
"paths./sites/{id}/backupnow.post.parameters[0].in" = "path"
"paths./sites/{id}/backupnow.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/backupnow.post.parameters[0].name" = "id"
"paths./sites/{id}/backupnow.post.parameters[0].required" = true
"paths./sites/{id}/backupnow.post.parameters[0].type" = "integer"
"paths./sites/{id}/backupnow.post.produces.length" = 3
"paths./sites/{id}/backupnow.post.produces[0]" = "application/json"
"paths./sites/{id}/backupnow.post.produces[1]" = "application/xml"
"paths./sites/{id}/backupnow.post.produces[2]" = "text/plain"
"paths./sites/{id}/backupnow.post.responses.200.description" = "No response was specified"
"paths./sites/{id}/backupnow.post.responses.200.schema.$ref" = "#/definitions/Site"
"paths./sites/{id}/backupnow.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/backupnow.post.responses.404.description" = "Invalid ID"
"paths./sites/{id}/backupnow.post.summary" = "Add the site to the backup queue"
"paths./sites/{id}/backupnow.post.tags.length" = 1
"paths./sites/{id}/backupnow.post.tags[0]" = "sites"
"paths./sites/{id}/backupprofiles.get.description" = "Return backup profile"
"paths./sites/{id}/backupprofiles.get.operationId" = "getBackupProfiles"
"paths./sites/{id}/backupprofiles.get.parameters.length" = 1
"paths./sites/{id}/backupprofiles.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/backupprofiles.get.parameters[0].format" = "int64"
"paths./sites/{id}/backupprofiles.get.parameters[0].in" = "path"
"paths./sites/{id}/backupprofiles.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/backupprofiles.get.parameters[0].name" = "id"
"paths./sites/{id}/backupprofiles.get.parameters[0].required" = true
"paths./sites/{id}/backupprofiles.get.parameters[0].type" = "integer"
"paths./sites/{id}/backupprofiles.get.produces.length" = 3
"paths./sites/{id}/backupprofiles.get.produces[0]" = "application/json"
"paths./sites/{id}/backupprofiles.get.produces[1]" = "application/xml"
"paths./sites/{id}/backupprofiles.get.produces[2]" = "text/plain"
"paths./sites/{id}/backupprofiles.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/backupprofiles.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/backupprofiles.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/backupprofiles.get.summary" = "Return backup profile"
"paths./sites/{id}/backupprofiles.get.tags.length" = 1
"paths./sites/{id}/backupprofiles.get.tags[0]" = "sites"
"paths./sites/{id}/backups.get.description" = "List of latest backups"
"paths./sites/{id}/backups.get.operationId" = "getListBackups"
"paths./sites/{id}/backups.get.parameters.length" = 1
"paths./sites/{id}/backups.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/backups.get.parameters[0].format" = "int64"
"paths./sites/{id}/backups.get.parameters[0].in" = "path"
"paths./sites/{id}/backups.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/backups.get.parameters[0].name" = "id"
"paths./sites/{id}/backups.get.parameters[0].required" = true
"paths./sites/{id}/backups.get.parameters[0].type" = "integer"
"paths./sites/{id}/backups.get.produces.length" = 3
"paths./sites/{id}/backups.get.produces[0]" = "application/json"
"paths./sites/{id}/backups.get.produces[1]" = "application/xml"
"paths./sites/{id}/backups.get.produces[2]" = "text/plain"
"paths./sites/{id}/backups.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/backups.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/backups.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/backups.get.summary" = "List of latest backups"
"paths./sites/{id}/backups.get.tags.length" = 1
"paths./sites/{id}/backups.get.tags[0]" = "sites"
"paths./sites/{id}/backupstart.post.description" = "Start a remote backup for the site"
"paths./sites/{id}/backupstart.post.operationId" = "startSiteBackup"
"paths./sites/{id}/backupstart.post.parameters.length" = 1
"paths./sites/{id}/backupstart.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/backupstart.post.parameters[0].format" = "int64"
"paths./sites/{id}/backupstart.post.parameters[0].in" = "path"
"paths./sites/{id}/backupstart.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/backupstart.post.parameters[0].name" = "id"
"paths./sites/{id}/backupstart.post.parameters[0].required" = true
"paths./sites/{id}/backupstart.post.parameters[0].type" = "integer"
"paths./sites/{id}/backupstart.post.produces.length" = 3
"paths./sites/{id}/backupstart.post.produces[0]" = "application/json"
"paths./sites/{id}/backupstart.post.produces[1]" = "application/xml"
"paths./sites/{id}/backupstart.post.produces[2]" = "text/plain"
"paths./sites/{id}/backupstart.post.responses.200.description" = "No response was specified"
"paths./sites/{id}/backupstart.post.responses.200.schema.$ref" = "#/definitions/Site"
"paths./sites/{id}/backupstart.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/backupstart.post.responses.404.description" = "Invalid ID"
"paths./sites/{id}/backupstart.post.summary" = "Start a remote backup for the site"
"paths./sites/{id}/backupstart.post.tags.length" = 1
"paths./sites/{id}/backupstart.post.tags[0]" = "sites"
"paths./sites/{id}/backupstep.post.description" = "Step (continue) a remote backup for the site"
"paths./sites/{id}/backupstep.post.operationId" = "stepSiteBackup"
"paths./sites/{id}/backupstep.post.parameters.length" = 1
"paths./sites/{id}/backupstep.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/backupstep.post.parameters[0].format" = "int64"
"paths./sites/{id}/backupstep.post.parameters[0].in" = "path"
"paths./sites/{id}/backupstep.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/backupstep.post.parameters[0].name" = "id"
"paths./sites/{id}/backupstep.post.parameters[0].required" = true
"paths./sites/{id}/backupstep.post.parameters[0].type" = "integer"
"paths./sites/{id}/backupstep.post.produces.length" = 3
"paths./sites/{id}/backupstep.post.produces[0]" = "application/json"
"paths./sites/{id}/backupstep.post.produces[1]" = "application/xml"
"paths./sites/{id}/backupstep.post.produces[2]" = "text/plain"
"paths./sites/{id}/backupstep.post.responses.200.description" = "No response was specified"
"paths./sites/{id}/backupstep.post.responses.200.schema.$ref" = "#/definitions/Site"
"paths./sites/{id}/backupstep.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/backupstep.post.responses.404.description" = "Invalid ID"
"paths./sites/{id}/backupstep.post.summary" = "Step (continue) a remote backup for the site"
"paths./sites/{id}/backupstep.post.tags.length" = 1
"paths./sites/{id}/backupstep.post.tags[0]" = "sites"
"paths./sites/{id}/extensions.get.description" = "Get extensions for a site"
"paths./sites/{id}/extensions.get.parameters.length" = 5
"paths./sites/{id}/extensions.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/extensions.get.parameters[0].format" = "int64"
"paths./sites/{id}/extensions.get.parameters[0].in" = "path"
"paths./sites/{id}/extensions.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/extensions.get.parameters[0].name" = "id"
"paths./sites/{id}/extensions.get.parameters[0].required" = true
"paths./sites/{id}/extensions.get.parameters[0].type" = "integer"
"paths./sites/{id}/extensions.get.parameters[1].description" = "Fields to return separate by comas: name,id"
"paths./sites/{id}/extensions.get.parameters[1].in" = "query"
"paths./sites/{id}/extensions.get.parameters[1].name" = "fields"
"paths./sites/{id}/extensions.get.parameters[1].required" = false
"paths./sites/{id}/extensions.get.parameters[1].type" = "string"
"paths./sites/{id}/extensions.get.parameters[2].description" = "Number of object to return (max 100, default 25)"
"paths./sites/{id}/extensions.get.parameters[2].format" = "int64"
"paths./sites/{id}/extensions.get.parameters[2].in" = "query"
"paths./sites/{id}/extensions.get.parameters[2].minimum" = 1.0
"paths./sites/{id}/extensions.get.parameters[2].name" = "limit"
"paths./sites/{id}/extensions.get.parameters[2].required" = false
"paths./sites/{id}/extensions.get.parameters[2].type" = "integer"
"paths./sites/{id}/extensions.get.parameters[3].description" = "Start of the return (default 0)"
"paths./sites/{id}/extensions.get.parameters[3].format" = "int64"
"paths./sites/{id}/extensions.get.parameters[3].in" = "query"
"paths./sites/{id}/extensions.get.parameters[3].minimum" = 0.0
"paths./sites/{id}/extensions.get.parameters[3].name" = "limitstart"
"paths./sites/{id}/extensions.get.parameters[3].required" = false
"paths./sites/{id}/extensions.get.parameters[3].type" = "integer"
"paths./sites/{id}/extensions.get.parameters[4].description" = "ORDER by this field"
"paths./sites/{id}/extensions.get.parameters[4].in" = "query"
"paths./sites/{id}/extensions.get.parameters[4].name" = "order"
"paths./sites/{id}/extensions.get.parameters[4].required" = false
"paths./sites/{id}/extensions.get.parameters[4].type" = "string"
"paths./sites/{id}/extensions.get.produces.length" = 3
"paths./sites/{id}/extensions.get.produces[0]" = "application/json"
"paths./sites/{id}/extensions.get.produces[1]" = "application/xml"
"paths./sites/{id}/extensions.get.produces[2]" = "text/plain"
"paths./sites/{id}/extensions.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/extensions.get.responses.200.schema.$ref" = "#/definitions/Extension"
"paths./sites/{id}/extensions.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/extensions.get.responses.404.description" = "Invalid"
"paths./sites/{id}/extensions.get.summary" = "Get extensions for a site"
"paths./sites/{id}/extensions.get.tags.length" = 1
"paths./sites/{id}/extensions.get.tags[0]" = "sites"
"paths./sites/{id}/extensions.post.operationId" = "installExtension"
"paths./sites/{id}/extensions.post.parameters.length" = 2
"paths./sites/{id}/extensions.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/extensions.post.parameters[0].format" = "int64"
"paths./sites/{id}/extensions.post.parameters[0].in" = "path"
"paths./sites/{id}/extensions.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/extensions.post.parameters[0].name" = "id"
"paths./sites/{id}/extensions.post.parameters[0].required" = true
"paths./sites/{id}/extensions.post.parameters[0].type" = "integer"
"paths./sites/{id}/extensions.post.parameters[1].description" = "URL to install the extension from"
"paths./sites/{id}/extensions.post.parameters[1].format" = "url"
"paths./sites/{id}/extensions.post.parameters[1].in" = "query"
"paths./sites/{id}/extensions.post.parameters[1].name" = "url"
"paths./sites/{id}/extensions.post.parameters[1].required" = true
"paths./sites/{id}/extensions.post.parameters[1].type" = "string"
"paths./sites/{id}/extensions.post.produces.length" = 3
"paths./sites/{id}/extensions.post.produces[0]" = "application/json"
"paths./sites/{id}/extensions.post.produces[1]" = "application/xml"
"paths./sites/{id}/extensions.post.produces[2]" = "text/plain"
"paths./sites/{id}/extensions.post.responses.200.description" = "No response was specified"
"paths./sites/{id}/extensions.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/extensions.post.responses.404.description" = "Invalid ID"
"paths./sites/{id}/extensions.post.summary" = "Install extension"
"paths./sites/{id}/extensions.post.tags.length" = 1
"paths./sites/{id}/extensions.post.tags[0]" = "sites"
"paths./sites/{id}/logs.get.description" = "Return logs for a specific website"
"paths./sites/{id}/logs.get.parameters.length" = 9
"paths./sites/{id}/logs.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/logs.get.parameters[0].format" = "int64"
"paths./sites/{id}/logs.get.parameters[0].in" = "path"
"paths./sites/{id}/logs.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/logs.get.parameters[0].name" = "id"
"paths./sites/{id}/logs.get.parameters[0].required" = true
"paths./sites/{id}/logs.get.parameters[0].type" = "integer"
"paths./sites/{id}/logs.get.parameters[1].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./sites/{id}/logs.get.parameters[1].in" = "query"
"paths./sites/{id}/logs.get.parameters[1].name" = "log_entry"
"paths./sites/{id}/logs.get.parameters[1].required" = false
"paths./sites/{id}/logs.get.parameters[1].type" = "string"
"paths./sites/{id}/logs.get.parameters[2].description" = "Type of the log"
"paths./sites/{id}/logs.get.parameters[2].enum.length" = 11
"paths./sites/{id}/logs.get.parameters[2].enum[0]" = ""
"paths./sites/{id}/logs.get.parameters[2].enum[10]" = "modified_value_files"
"paths./sites/{id}/logs.get.parameters[2].enum[1]" = "plugin_sends_error"
"paths./sites/{id}/logs.get.parameters[2].enum[2]" = "curlerror"
"paths./sites/{id}/logs.get.parameters[2].enum[3]" = "modified_file"
"paths./sites/{id}/logs.get.parameters[2].enum[4]" = "word_not_in_homepage"
"paths./sites/{id}/logs.get.parameters[2].enum[5]" = "file_not_exists"
"paths./sites/{id}/logs.get.parameters[2].enum[6]" = "update_available"
"paths./sites/{id}/logs.get.parameters[2].enum[7]" = "new_extension"
"paths./sites/{id}/logs.get.parameters[2].enum[8]" = "deleted_extension"
"paths./sites/{id}/logs.get.parameters[2].enum[9]" = "extension_not_saved"
"paths./sites/{id}/logs.get.parameters[2].in" = "query"
"paths./sites/{id}/logs.get.parameters[2].name" = "log_type"
"paths./sites/{id}/logs.get.parameters[2].type" = "string"
"paths./sites/{id}/logs.get.parameters[3].description" = "Logs after this date, format YYYY-MM-DD HH:MM:SS"
"paths./sites/{id}/logs.get.parameters[3].in" = "query"
"paths./sites/{id}/logs.get.parameters[3].name" = "from"
"paths./sites/{id}/logs.get.parameters[3].required" = false
"paths./sites/{id}/logs.get.parameters[3].type" = "string"
"paths./sites/{id}/logs.get.parameters[4].description" = "Logs before this date, format YYYY-MM-DD HH:MM:SS"
"paths./sites/{id}/logs.get.parameters[4].in" = "query"
"paths./sites/{id}/logs.get.parameters[4].name" = "to"
"paths./sites/{id}/logs.get.parameters[4].required" = false
"paths./sites/{id}/logs.get.parameters[4].type" = "string"
"paths./sites/{id}/logs.get.parameters[5].description" = "Fields to return separate by comas: name,id"
"paths./sites/{id}/logs.get.parameters[5].in" = "query"
"paths./sites/{id}/logs.get.parameters[5].name" = "fields"
"paths./sites/{id}/logs.get.parameters[5].required" = false
"paths./sites/{id}/logs.get.parameters[5].type" = "string"
"paths./sites/{id}/logs.get.parameters[6].description" = "Number of object to return (max 100, default 25)"
"paths./sites/{id}/logs.get.parameters[6].format" = "int64"
"paths./sites/{id}/logs.get.parameters[6].in" = "query"
"paths./sites/{id}/logs.get.parameters[6].minimum" = 1.0
"paths./sites/{id}/logs.get.parameters[6].name" = "limit"
"paths./sites/{id}/logs.get.parameters[6].required" = false
"paths./sites/{id}/logs.get.parameters[6].type" = "integer"
"paths./sites/{id}/logs.get.parameters[7].description" = "Start of the return (default 0)"
"paths./sites/{id}/logs.get.parameters[7].format" = "int64"
"paths./sites/{id}/logs.get.parameters[7].in" = "query"
"paths./sites/{id}/logs.get.parameters[7].minimum" = 0.0
"paths./sites/{id}/logs.get.parameters[7].name" = "limitstart"
"paths./sites/{id}/logs.get.parameters[7].required" = false
"paths./sites/{id}/logs.get.parameters[7].type" = "integer"
"paths./sites/{id}/logs.get.parameters[8].description" = "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-"
"paths./sites/{id}/logs.get.parameters[8].in" = "query"
"paths./sites/{id}/logs.get.parameters[8].name" = "order"
"paths./sites/{id}/logs.get.parameters[8].required" = false
"paths./sites/{id}/logs.get.parameters[8].type" = "string"
"paths./sites/{id}/logs.get.produces.length" = 3
"paths./sites/{id}/logs.get.produces[0]" = "application/json"
"paths./sites/{id}/logs.get.produces[1]" = "application/xml"
"paths./sites/{id}/logs.get.produces[2]" = "text/plain"
"paths./sites/{id}/logs.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/logs.get.responses.200.schema.$ref" = "#/definitions/Log"
"paths./sites/{id}/logs.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/logs.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/logs.get.summary" = "Return logs for a specific website"
"paths./sites/{id}/logs.get.tags.length" = 1
"paths./sites/{id}/logs.get.tags[0]" = "sites"
"paths./sites/{id}/logs.post.description" = "Create a custom log for a specific website"
"paths./sites/{id}/logs.post.operationId" = "CreateLog"
"paths./sites/{id}/logs.post.parameters.length" = 2
"paths./sites/{id}/logs.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/logs.post.parameters[0].format" = "int64"
"paths./sites/{id}/logs.post.parameters[0].in" = "path"
"paths./sites/{id}/logs.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/logs.post.parameters[0].name" = "id"
"paths./sites/{id}/logs.post.parameters[0].required" = true
"paths./sites/{id}/logs.post.parameters[0].type" = "integer"
"paths./sites/{id}/logs.post.parameters[1].description" = "JSON object Log (only type custom)"
"paths./sites/{id}/logs.post.parameters[1].in" = "body"
"paths./sites/{id}/logs.post.parameters[1].name" = "body"
"paths./sites/{id}/logs.post.parameters[1].required" = true
"paths./sites/{id}/logs.post.parameters[1].schema.$ref" = "#/definitions/PostLog"
"paths./sites/{id}/logs.post.produces.length" = 3
"paths./sites/{id}/logs.post.produces[0]" = "application/json"
"paths./sites/{id}/logs.post.produces[1]" = "application/xml"
"paths./sites/{id}/logs.post.produces[2]" = "text/plain"
"paths./sites/{id}/logs.post.responses.200.description" = "No response was specified"
"paths./sites/{id}/logs.post.responses.200.schema.$ref" = "#/definitions/Log"
"paths./sites/{id}/logs.post.responses.201.description" = "Saved successfully"
"paths./sites/{id}/logs.post.responses.400.description" = "Invalid data"
"paths./sites/{id}/logs.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/logs.post.responses.404.description" = "Not saved"
"paths./sites/{id}/logs.post.summary" = "Create a custom log for a specific website"
"paths./sites/{id}/logs.post.tags.length" = 1
"paths./sites/{id}/logs.post.tags[0]" = "sites"
"paths./sites/{id}/monitor.delete.description" = "Return boolean"
"paths./sites/{id}/monitor.delete.operationId" = "deleteMonitor"
"paths./sites/{id}/monitor.delete.parameters.length" = 1
"paths./sites/{id}/monitor.delete.parameters[0].description" = "ID of the website"
"paths./sites/{id}/monitor.delete.parameters[0].format" = "int64"
"paths./sites/{id}/monitor.delete.parameters[0].in" = "path"
"paths./sites/{id}/monitor.delete.parameters[0].minimum" = 1.0
"paths./sites/{id}/monitor.delete.parameters[0].name" = "id"
"paths./sites/{id}/monitor.delete.parameters[0].required" = true
"paths./sites/{id}/monitor.delete.parameters[0].type" = "integer"
"paths./sites/{id}/monitor.delete.produces.length" = 3
"paths./sites/{id}/monitor.delete.produces[0]" = "application/json"
"paths./sites/{id}/monitor.delete.produces[1]" = "application/xml"
"paths./sites/{id}/monitor.delete.produces[2]" = "text/plain"
"paths./sites/{id}/monitor.delete.responses.200.description" = "No response was specified"
"paths./sites/{id}/monitor.delete.responses.200.schema.$ref" = "#/definitions/Monitor"
"paths./sites/{id}/monitor.delete.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/monitor.delete.responses.404.description" = "Invalid ID"
"paths./sites/{id}/monitor.delete.summary" = "Delete uptime monitor"
"paths./sites/{id}/monitor.delete.tags.length" = 1
"paths./sites/{id}/monitor.delete.tags[0]" = "sites"
"paths./sites/{id}/monitor.post.description" = "Return boolean"
"paths./sites/{id}/monitor.post.operationId" = "postMonitor"
"paths./sites/{id}/monitor.post.parameters.length" = 1
"paths./sites/{id}/monitor.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/monitor.post.parameters[0].format" = "int64"
"paths./sites/{id}/monitor.post.parameters[0].in" = "path"
"paths./sites/{id}/monitor.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/monitor.post.parameters[0].name" = "id"
"paths./sites/{id}/monitor.post.parameters[0].required" = true
"paths./sites/{id}/monitor.post.parameters[0].type" = "integer"
"paths./sites/{id}/monitor.post.produces.length" = 3
"paths./sites/{id}/monitor.post.produces[0]" = "application/json"
"paths./sites/{id}/monitor.post.produces[1]" = "application/xml"
"paths./sites/{id}/monitor.post.produces[2]" = "text/plain"
"paths./sites/{id}/monitor.post.responses.200.description" = "No response was specified"
"paths./sites/{id}/monitor.post.responses.200.schema.$ref" = "#/definitions/Monitor"
"paths./sites/{id}/monitor.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/monitor.post.responses.404.description" = "Invalid ID"
"paths./sites/{id}/monitor.post.summary" = "Post uptime monitor"
"paths./sites/{id}/monitor.post.tags.length" = 1
"paths./sites/{id}/monitor.post.tags[0]" = "sites"
"paths./sites/{id}/scanner.get.description" = "Scan the site for malware"
"paths./sites/{id}/scanner.get.operationId" = "scanner"
"paths./sites/{id}/scanner.get.parameters.length" = 1
"paths./sites/{id}/scanner.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/scanner.get.parameters[0].format" = "int64"
"paths./sites/{id}/scanner.get.parameters[0].in" = "path"
"paths./sites/{id}/scanner.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/scanner.get.parameters[0].name" = "id"
"paths./sites/{id}/scanner.get.parameters[0].required" = true
"paths./sites/{id}/scanner.get.parameters[0].type" = "integer"
"paths./sites/{id}/scanner.get.produces.length" = 3
"paths./sites/{id}/scanner.get.produces[0]" = "application/json"
"paths./sites/{id}/scanner.get.produces[1]" = "application/xml"
"paths./sites/{id}/scanner.get.produces[2]" = "text/plain"
"paths./sites/{id}/scanner.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/scanner.get.responses.200.schema.type" = "string"
"paths./sites/{id}/scanner.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/scanner.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/scanner.get.summary" = "Scan the site for malware"
"paths./sites/{id}/scanner.get.tags.length" = 1
"paths./sites/{id}/scanner.get.tags[0]" = "sites"
"paths./sites/{id}/tags.get.description" = "Return tags for a specific website"
"paths./sites/{id}/tags.get.parameters.length" = 7
"paths./sites/{id}/tags.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/tags.get.parameters[0].format" = "int64"
"paths./sites/{id}/tags.get.parameters[0].in" = "path"
"paths./sites/{id}/tags.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/tags.get.parameters[0].name" = "id"
"paths./sites/{id}/tags.get.parameters[0].required" = true
"paths./sites/{id}/tags.get.parameters[0].type" = "integer"
"paths./sites/{id}/tags.get.parameters[1].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./sites/{id}/tags.get.parameters[1].in" = "query"
"paths./sites/{id}/tags.get.parameters[1].name" = "name"
"paths./sites/{id}/tags.get.parameters[1].required" = false
"paths./sites/{id}/tags.get.parameters[1].type" = "string"
"paths./sites/{id}/tags.get.parameters[2].description" = "Bootstrap color of the tag"
"paths./sites/{id}/tags.get.parameters[2].enum.length" = 7
"paths./sites/{id}/tags.get.parameters[2].enum[0]" = ""
"paths./sites/{id}/tags.get.parameters[2].enum[1]" = "default"
"paths./sites/{id}/tags.get.parameters[2].enum[2]" = "success"
"paths./sites/{id}/tags.get.parameters[2].enum[3]" = "warning"
"paths./sites/{id}/tags.get.parameters[2].enum[4]" = "important"
"paths./sites/{id}/tags.get.parameters[2].enum[5]" = "info"
"paths./sites/{id}/tags.get.parameters[2].enum[6]" = "inverse"
"paths./sites/{id}/tags.get.parameters[2].in" = "query"
"paths./sites/{id}/tags.get.parameters[2].name" = "type"
"paths./sites/{id}/tags.get.parameters[2].type" = "string"
"paths./sites/{id}/tags.get.parameters[3].description" = "Fields to return separate by comas: name,id"
"paths./sites/{id}/tags.get.parameters[3].in" = "query"
"paths./sites/{id}/tags.get.parameters[3].name" = "fields"
"paths./sites/{id}/tags.get.parameters[3].required" = false
"paths./sites/{id}/tags.get.parameters[3].type" = "string"
"paths./sites/{id}/tags.get.parameters[4].description" = "Number of object to return (max 100, default 25)"
"paths./sites/{id}/tags.get.parameters[4].format" = "int64"
"paths./sites/{id}/tags.get.parameters[4].in" = "query"
"paths./sites/{id}/tags.get.parameters[4].minimum" = 1.0
"paths./sites/{id}/tags.get.parameters[4].name" = "limit"
"paths./sites/{id}/tags.get.parameters[4].required" = false
"paths./sites/{id}/tags.get.parameters[4].type" = "integer"
"paths./sites/{id}/tags.get.parameters[5].description" = "Start of the return (default 0)"
"paths./sites/{id}/tags.get.parameters[5].format" = "int64"
"paths./sites/{id}/tags.get.parameters[5].in" = "query"
"paths./sites/{id}/tags.get.parameters[5].minimum" = 0.0
"paths./sites/{id}/tags.get.parameters[5].name" = "limitstart"
"paths./sites/{id}/tags.get.parameters[5].required" = false
"paths./sites/{id}/tags.get.parameters[5].type" = "integer"
"paths./sites/{id}/tags.get.parameters[6].description" = "ORDER by this field"
"paths./sites/{id}/tags.get.parameters[6].in" = "query"
"paths./sites/{id}/tags.get.parameters[6].name" = "order"
"paths./sites/{id}/tags.get.parameters[6].required" = false
"paths./sites/{id}/tags.get.parameters[6].type" = "string"
"paths./sites/{id}/tags.get.produces.length" = 3
"paths./sites/{id}/tags.get.produces[0]" = "application/json"
"paths./sites/{id}/tags.get.produces[1]" = "application/xml"
"paths./sites/{id}/tags.get.produces[2]" = "text/plain"
"paths./sites/{id}/tags.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/tags.get.responses.200.schema.$ref" = "#/definitions/Tag"
"paths./sites/{id}/tags.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/tags.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/tags.get.summary" = "Return tags for a specific website"
"paths./sites/{id}/tags.get.tags.length" = 1
"paths./sites/{id}/tags.get.tags[0]" = "sites"
"paths./sites/{id}/tags.post.description" = "Add tags for a specific website"
"paths./sites/{id}/tags.post.operationId" = "postTags"
"paths./sites/{id}/tags.post.parameters.length" = 2
"paths./sites/{id}/tags.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/tags.post.parameters[0].format" = "int64"
"paths./sites/{id}/tags.post.parameters[0].in" = "path"
"paths./sites/{id}/tags.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/tags.post.parameters[0].name" = "id"
"paths./sites/{id}/tags.post.parameters[0].required" = true
"paths./sites/{id}/tags.post.parameters[0].type" = "integer"
"paths./sites/{id}/tags.post.parameters[1].description" = "JSON object Tag"
"paths./sites/{id}/tags.post.parameters[1].in" = "body"
"paths./sites/{id}/tags.post.parameters[1].name" = "body"
"paths./sites/{id}/tags.post.parameters[1].required" = true
"paths./sites/{id}/tags.post.parameters[1].schema.$ref" = "#/definitions/Tag"
"paths./sites/{id}/tags.post.produces.length" = 3
"paths./sites/{id}/tags.post.produces[0]" = "application/json"
"paths./sites/{id}/tags.post.produces[1]" = "application/xml"
"paths./sites/{id}/tags.post.produces[2]" = "text/plain"
"paths./sites/{id}/tags.post.responses.200.description" = "No response was specified"
"paths./sites/{id}/tags.post.responses.200.schema.$ref" = "#/definitions/Site"
"paths./sites/{id}/tags.post.responses.201.description" = "Saved successfully"
"paths./sites/{id}/tags.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/tags.post.responses.404.description" = "Invalid ID"
"paths./sites/{id}/tags.post.summary" = "Add tags for a specific website"
"paths./sites/{id}/tags.post.tags.length" = 1
"paths./sites/{id}/tags.post.tags[0]" = "sites"
"paths./sites/{id}/updatejoomla.post.description" = "Update Joomla core on the remote site"
"paths./sites/{id}/updatejoomla.post.operationId" = "updateJoomla"
"paths./sites/{id}/updatejoomla.post.parameters.length" = 1
"paths./sites/{id}/updatejoomla.post.parameters[0].description" = "ID of the website"
"paths./sites/{id}/updatejoomla.post.parameters[0].format" = "int64"
"paths./sites/{id}/updatejoomla.post.parameters[0].in" = "path"
"paths./sites/{id}/updatejoomla.post.parameters[0].minimum" = 1.0
"paths./sites/{id}/updatejoomla.post.parameters[0].name" = "id"
"paths./sites/{id}/updatejoomla.post.parameters[0].required" = true
"paths./sites/{id}/updatejoomla.post.parameters[0].type" = "integer"
"paths./sites/{id}/updatejoomla.post.produces.length" = 3
"paths./sites/{id}/updatejoomla.post.produces[0]" = "application/json"
"paths./sites/{id}/updatejoomla.post.produces[1]" = "application/xml"
"paths./sites/{id}/updatejoomla.post.produces[2]" = "text/plain"
"paths./sites/{id}/updatejoomla.post.responses.200.description" = "Joomla core successfully updated"
"paths./sites/{id}/updatejoomla.post.responses.200.schema.type" = "string"
"paths./sites/{id}/updatejoomla.post.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/updatejoomla.post.responses.404.description" = "Invalid ID or Joomla Update not found"
"paths./sites/{id}/updatejoomla.post.summary" = "Update Joomla core on the remote site"
"paths./sites/{id}/updatejoomla.post.tags.length" = 1
"paths./sites/{id}/updatejoomla.post.tags[0]" = "sites"
"paths./sites/{id}/uptime.get.description" = "Return uptime data"
"paths./sites/{id}/uptime.get.operationId" = "getUptime"
"paths./sites/{id}/uptime.get.parameters.length" = 1
"paths./sites/{id}/uptime.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/uptime.get.parameters[0].format" = "int64"
"paths./sites/{id}/uptime.get.parameters[0].in" = "path"
"paths./sites/{id}/uptime.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/uptime.get.parameters[0].name" = "id"
"paths./sites/{id}/uptime.get.parameters[0].required" = true
"paths./sites/{id}/uptime.get.parameters[0].type" = "integer"
"paths./sites/{id}/uptime.get.produces.length" = 3
"paths./sites/{id}/uptime.get.produces[0]" = "application/json"
"paths./sites/{id}/uptime.get.produces[1]" = "application/xml"
"paths./sites/{id}/uptime.get.produces[2]" = "text/plain"
"paths./sites/{id}/uptime.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/uptime.get.responses.200.schema.$ref" = "#/definitions/Uptime"
"paths./sites/{id}/uptime.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/uptime.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/uptime.get.summary" = "Return uptime data"
"paths./sites/{id}/uptime.get.tags.length" = 1
"paths./sites/{id}/uptime.get.tags[0]" = "sites"
"paths./sites/{id}/validate.get.description" = "validate the site"
"paths./sites/{id}/validate.get.operationId" = "validateSite"
"paths./sites/{id}/validate.get.parameters.length" = 1
"paths./sites/{id}/validate.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/validate.get.parameters[0].format" = "int64"
"paths./sites/{id}/validate.get.parameters[0].in" = "path"
"paths./sites/{id}/validate.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/validate.get.parameters[0].name" = "id"
"paths./sites/{id}/validate.get.parameters[0].required" = true
"paths./sites/{id}/validate.get.parameters[0].type" = "integer"
"paths./sites/{id}/validate.get.produces.length" = 3
"paths./sites/{id}/validate.get.produces[0]" = "application/json"
"paths./sites/{id}/validate.get.produces[1]" = "application/xml"
"paths./sites/{id}/validate.get.produces[2]" = "text/plain"
"paths./sites/{id}/validate.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/validate.get.responses.200.schema.$ref" = "#/definitions/Log"
"paths./sites/{id}/validate.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/validate.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/validate.get.summary" = "validate the site, return the new logs"
"paths./sites/{id}/validate.get.tags.length" = 1
"paths./sites/{id}/validate.get.tags[0]" = "sites"
"paths./sites/{id}/validatedebug.get.operationId" = "validateDebugSite"
"paths./sites/{id}/validatedebug.get.parameters.length" = 1
"paths./sites/{id}/validatedebug.get.parameters[0].description" = "ID of the website"
"paths./sites/{id}/validatedebug.get.parameters[0].format" = "int64"
"paths./sites/{id}/validatedebug.get.parameters[0].in" = "path"
"paths./sites/{id}/validatedebug.get.parameters[0].minimum" = 1.0
"paths./sites/{id}/validatedebug.get.parameters[0].name" = "id"
"paths./sites/{id}/validatedebug.get.parameters[0].required" = true
"paths./sites/{id}/validatedebug.get.parameters[0].type" = "integer"
"paths./sites/{id}/validatedebug.get.produces.length" = 3
"paths./sites/{id}/validatedebug.get.produces[0]" = "application/json"
"paths./sites/{id}/validatedebug.get.produces[1]" = "application/xml"
"paths./sites/{id}/validatedebug.get.produces[2]" = "text/plain"
"paths./sites/{id}/validatedebug.get.responses.200.description" = "No response was specified"
"paths./sites/{id}/validatedebug.get.responses.200.schema.$ref" = "#/definitions/Log"
"paths./sites/{id}/validatedebug.get.responses.403.description" = "Invalid API Key"
"paths./sites/{id}/validatedebug.get.responses.404.description" = "Invalid ID"
"paths./sites/{id}/validatedebug.get.summary" = "validate the site, return the debug information"
"paths./sites/{id}/validatedebug.get.tags.length" = 1
"paths./sites/{id}/validatedebug.get.tags[0]" = "sites"
"paths./ssousers.get.description" = "Returns a list of SSO Users"
"paths./ssousers.get.operationId" = "getSsoUsers"
"paths./ssousers.get.produces.length" = 3
"paths./ssousers.get.produces[0]" = "application/json"
"paths./ssousers.get.produces[1]" = "application/xml"
"paths./ssousers.get.produces[2]" = "text/plain"
"paths./ssousers.get.responses.200.description" = "No response was specified"
"paths./ssousers.get.responses.200.schema.$ref" = "#/definitions/SsoUsers"
"paths./ssousers.get.responses.403.description" = "Invalid API Key"
"paths./ssousers.get.summary" = "Get a list of SSO Users"
"paths./ssousers.get.tags.length" = 1
"paths./ssousers.get.tags[0]" = "ssousers"
"paths./ssousers.post.description" = "Create a SSO User"
"paths./ssousers.post.operationId" = "CreateSsoUsers"
"paths./ssousers.post.parameters.length" = 1
"paths./ssousers.post.parameters[0].description" = "JSON object SsoUsers"
"paths./ssousers.post.parameters[0].in" = "body"
"paths./ssousers.post.parameters[0].name" = "body"
"paths./ssousers.post.parameters[0].required" = true
"paths./ssousers.post.parameters[0].schema.$ref" = "#/definitions/SsoUsers"
"paths./ssousers.post.produces.length" = 3
"paths./ssousers.post.produces[0]" = "application/json"
"paths./ssousers.post.produces[1]" = "application/xml"
"paths./ssousers.post.produces[2]" = "text/plain"
"paths./ssousers.post.responses.200.description" = "No response was specified"
"paths./ssousers.post.responses.200.schema.$ref" = "#/definitions/SsoUsers"
"paths./ssousers.post.responses.201.description" = "Saved successfully"
"paths./ssousers.post.responses.400.description" = "Invalid data"
"paths./ssousers.post.responses.403.description" = "Invalid API Key"
"paths./ssousers.post.responses.404.description" = "Not saved"
"paths./ssousers.post.summary" = "Create a SSO User"
"paths./ssousers.post.tags.length" = 1
"paths./ssousers.post.tags[0]" = "ssousers"
"paths./ssousers/{id}.delete.description" = "Delete a specific SSO User"
"paths./ssousers/{id}.delete.operationId" = "deleteSsoUserById"
"paths./ssousers/{id}.delete.parameters.length" = 1
"paths./ssousers/{id}.delete.parameters[0].description" = "ID of SSO User that needs to be deleted"
"paths./ssousers/{id}.delete.parameters[0].format" = "int64"
"paths./ssousers/{id}.delete.parameters[0].in" = "path"
"paths./ssousers/{id}.delete.parameters[0].minimum" = 1.0
"paths./ssousers/{id}.delete.parameters[0].name" = "id"
"paths./ssousers/{id}.delete.parameters[0].required" = true
"paths./ssousers/{id}.delete.parameters[0].type" = "integer"
"paths./ssousers/{id}.delete.produces.length" = 3
"paths./ssousers/{id}.delete.produces[0]" = "application/json"
"paths./ssousers/{id}.delete.produces[1]" = "application/xml"
"paths./ssousers/{id}.delete.produces[2]" = "text/plain"
"paths./ssousers/{id}.delete.responses.200.description" = "SSO User correctly deleted"
"paths./ssousers/{id}.delete.responses.200.schema.type" = "string"
"paths./ssousers/{id}.delete.responses.403.description" = "Invalid API Key"
"paths./ssousers/{id}.delete.responses.404.description" = "Invalid ID"
"paths./ssousers/{id}.delete.summary" = "Delete a specific SSO User"
"paths./ssousers/{id}.delete.tags.length" = 1
"paths./ssousers/{id}.delete.tags[0]" = "ssousers"
"paths./ssousers/{id}.get.description" = "Returns a SSO User based on ID"
"paths./ssousers/{id}.get.operationId" = "getSsoUsersById"
"paths./ssousers/{id}.get.parameters.length" = 2
"paths./ssousers/{id}.get.parameters[0].description" = "ID of SSO User that needs to be fetched"
"paths./ssousers/{id}.get.parameters[0].format" = "int64"
"paths./ssousers/{id}.get.parameters[0].in" = "path"
"paths./ssousers/{id}.get.parameters[0].minimum" = 1.0
"paths./ssousers/{id}.get.parameters[0].name" = "id"
"paths./ssousers/{id}.get.parameters[0].required" = true
"paths./ssousers/{id}.get.parameters[0].type" = "integer"
"paths./ssousers/{id}.get.parameters[1].description" = "Fields to return separate by comas: name,id"
"paths./ssousers/{id}.get.parameters[1].in" = "query"
"paths./ssousers/{id}.get.parameters[1].name" = "fields"
"paths./ssousers/{id}.get.parameters[1].required" = false
"paths./ssousers/{id}.get.parameters[1].type" = "string"
"paths./ssousers/{id}.get.produces.length" = 3
"paths./ssousers/{id}.get.produces[0]" = "application/json"
"paths./ssousers/{id}.get.produces[1]" = "application/xml"
"paths./ssousers/{id}.get.produces[2]" = "text/plain"
"paths./ssousers/{id}.get.responses.200.description" = "No response was specified"
"paths./ssousers/{id}.get.responses.200.schema.$ref" = "#/definitions/SsoUsers"
"paths./ssousers/{id}.get.responses.400.description" = "Invalid ID"
"paths./ssousers/{id}.get.responses.403.description" = "Invalid API Key"
"paths./ssousers/{id}.get.summary" = "Find SSO User by ID"
"paths./ssousers/{id}.get.tags.length" = 1
"paths./ssousers/{id}.get.tags[0]" = "ssousers"
"paths./ssousers/{id}.put.description" = "Update a SSO User"
"paths./ssousers/{id}.put.operationId" = "UpdateSsoUsers"
"paths./ssousers/{id}.put.parameters.length" = 2
"paths./ssousers/{id}.put.parameters[0].description" = "ID of SSO User that needs to be updated"
"paths./ssousers/{id}.put.parameters[0].format" = "int64"
"paths./ssousers/{id}.put.parameters[0].in" = "path"
"paths./ssousers/{id}.put.parameters[0].minimum" = 1.0
"paths./ssousers/{id}.put.parameters[0].name" = "id"
"paths./ssousers/{id}.put.parameters[0].required" = true
"paths./ssousers/{id}.put.parameters[0].type" = "integer"
"paths./ssousers/{id}.put.parameters[1].description" = "JSON object SsoUsers"
"paths./ssousers/{id}.put.parameters[1].in" = "body"
"paths./ssousers/{id}.put.parameters[1].name" = "body"
"paths./ssousers/{id}.put.parameters[1].required" = true
"paths./ssousers/{id}.put.parameters[1].schema.$ref" = "#/definitions/SsoUsers"
"paths./ssousers/{id}.put.produces.length" = 3
"paths./ssousers/{id}.put.produces[0]" = "application/json"
"paths./ssousers/{id}.put.produces[1]" = "application/xml"
"paths./ssousers/{id}.put.produces[2]" = "text/plain"
"paths./ssousers/{id}.put.responses.200.description" = "No response was specified"
"paths./ssousers/{id}.put.responses.200.schema.$ref" = "#/definitions/SsoUsers"
"paths./ssousers/{id}.put.responses.201.description" = "Updated successfully"
"paths./ssousers/{id}.put.responses.400.description" = "Invalid data"
"paths./ssousers/{id}.put.responses.403.description" = "Invalid API Key"
"paths./ssousers/{id}.put.responses.404.description" = "Not saved"
"paths./ssousers/{id}.put.summary" = "Update a SSO User"
"paths./ssousers/{id}.put.tags.length" = 1
"paths./ssousers/{id}.put.tags[0]" = "ssousers"
"paths./tags.get.description" = "Returns a list of tags"
"paths./tags.get.parameters.length" = 6
"paths./tags.get.parameters[0].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./tags.get.parameters[0].in" = "query"
"paths./tags.get.parameters[0].name" = "name"
"paths./tags.get.parameters[0].required" = false
"paths./tags.get.parameters[0].type" = "string"
"paths./tags.get.parameters[1].description" = "Bootstrap color of the tag"
"paths./tags.get.parameters[1].enum.length" = 7
"paths./tags.get.parameters[1].enum[0]" = ""
"paths./tags.get.parameters[1].enum[1]" = "default"
"paths./tags.get.parameters[1].enum[2]" = "success"
"paths./tags.get.parameters[1].enum[3]" = "warning"
"paths./tags.get.parameters[1].enum[4]" = "important"
"paths./tags.get.parameters[1].enum[5]" = "info"
"paths./tags.get.parameters[1].enum[6]" = "inverse"
"paths./tags.get.parameters[1].in" = "query"
"paths./tags.get.parameters[1].name" = "type"
"paths./tags.get.parameters[1].type" = "string"
"paths./tags.get.parameters[2].description" = "Fields to return separate by comas: name,id"
"paths./tags.get.parameters[2].in" = "query"
"paths./tags.get.parameters[2].name" = "fields"
"paths./tags.get.parameters[2].required" = false
"paths./tags.get.parameters[2].type" = "string"
"paths./tags.get.parameters[3].description" = "Number of object to return (max 100, default 25)"
"paths./tags.get.parameters[3].format" = "int64"
"paths./tags.get.parameters[3].in" = "query"
"paths./tags.get.parameters[3].minimum" = 1.0
"paths./tags.get.parameters[3].name" = "limit"
"paths./tags.get.parameters[3].required" = false
"paths./tags.get.parameters[3].type" = "integer"
"paths./tags.get.parameters[4].description" = "Start of the return (default 0)"
"paths./tags.get.parameters[4].format" = "int64"
"paths./tags.get.parameters[4].in" = "query"
"paths./tags.get.parameters[4].minimum" = 0.0
"paths./tags.get.parameters[4].name" = "limitstart"
"paths./tags.get.parameters[4].required" = false
"paths./tags.get.parameters[4].type" = "integer"
"paths./tags.get.parameters[5].description" = "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-"
"paths./tags.get.parameters[5].in" = "query"
"paths./tags.get.parameters[5].name" = "order"
"paths./tags.get.parameters[5].required" = false
"paths./tags.get.parameters[5].type" = "string"
"paths./tags.get.produces.length" = 3
"paths./tags.get.produces[0]" = "application/json"
"paths./tags.get.produces[1]" = "application/xml"
"paths./tags.get.produces[2]" = "text/plain"
"paths./tags.get.responses.200.description" = "No response was specified"
"paths./tags.get.responses.200.schema.$ref" = "#/definitions/Tag"
"paths./tags.get.responses.403.description" = "Invalid API Key"
"paths./tags.get.summary" = "Get a list of tags"
"paths./tags.get.tags.length" = 1
"paths./tags.get.tags[0]" = "tags"
"paths./tags.post.description" = "Create a tag"
"paths./tags.post.operationId" = "CreateTags"
"paths./tags.post.parameters.length" = 1
"paths./tags.post.parameters[0].description" = "JSON object Tag"
"paths./tags.post.parameters[0].in" = "body"
"paths./tags.post.parameters[0].name" = "body"
"paths./tags.post.parameters[0].required" = true
"paths./tags.post.parameters[0].schema.$ref" = "#/definitions/Tag"
"paths./tags.post.produces.length" = 3
"paths./tags.post.produces[0]" = "application/json"
"paths./tags.post.produces[1]" = "application/xml"
"paths./tags.post.produces[2]" = "text/plain"
"paths./tags.post.responses.200.description" = "No response was specified"
"paths./tags.post.responses.200.schema.$ref" = "#/definitions/Tag"
"paths./tags.post.responses.201.description" = "Saved successfully"
"paths./tags.post.responses.400.description" = "Invalid data"
"paths./tags.post.responses.403.description" = "Invalid API Key"
"paths./tags.post.responses.404.description" = "Not saved"
"paths./tags.post.summary" = "Create a tag"
"paths./tags.post.tags.length" = 1
"paths./tags.post.tags[0]" = "tags"
"paths./tags/metadata.get.description" = "Returns a list of fields"
"paths./tags/metadata.get.produces.length" = 3
"paths./tags/metadata.get.produces[0]" = "application/json"
"paths./tags/metadata.get.produces[1]" = "application/xml"
"paths./tags/metadata.get.produces[2]" = "text/plain"
"paths./tags/metadata.get.responses.200.description" = "No response was specified"
"paths./tags/metadata.get.responses.200.schema.type" = "string"
"paths./tags/metadata.get.summary" = "Get the list of fields"
"paths./tags/metadata.get.tags.length" = 1
"paths./tags/metadata.get.tags[0]" = "tags"
"paths./tags/{id}.delete.description" = "Delete a specific tag"
"paths./tags/{id}.delete.parameters.length" = 1
"paths./tags/{id}.delete.parameters[0].description" = "ID of tag that needs to be deleted"
"paths./tags/{id}.delete.parameters[0].format" = "int64"
"paths./tags/{id}.delete.parameters[0].in" = "path"
"paths./tags/{id}.delete.parameters[0].minimum" = 1.0
"paths./tags/{id}.delete.parameters[0].name" = "id"
"paths./tags/{id}.delete.parameters[0].required" = true
"paths./tags/{id}.delete.parameters[0].type" = "integer"
"paths./tags/{id}.delete.produces.length" = 3
"paths./tags/{id}.delete.produces[0]" = "application/json"
"paths./tags/{id}.delete.produces[1]" = "application/xml"
"paths./tags/{id}.delete.produces[2]" = "text/plain"
"paths./tags/{id}.delete.responses.200.description" = "Tag correctly deleted"
"paths./tags/{id}.delete.responses.200.schema.type" = "string"
"paths./tags/{id}.delete.responses.403.description" = "Invalid API Key"
"paths./tags/{id}.delete.responses.404.description" = "Invalid ID"
"paths./tags/{id}.delete.summary" = "Delete a specific tag"
"paths./tags/{id}.delete.tags.length" = 1
"paths./tags/{id}.delete.tags[0]" = "tags"
"paths./tags/{id}.get.description" = "Returns a tag based on ID"
"paths./tags/{id}.get.operationId" = "getTagById"
"paths./tags/{id}.get.parameters.length" = 2
"paths./tags/{id}.get.parameters[0].description" = "ID of tag that needs to be fetched"
"paths./tags/{id}.get.parameters[0].format" = "int64"
"paths./tags/{id}.get.parameters[0].in" = "path"
"paths./tags/{id}.get.parameters[0].minimum" = 1.0
"paths./tags/{id}.get.parameters[0].name" = "id"
"paths./tags/{id}.get.parameters[0].required" = true
"paths./tags/{id}.get.parameters[0].type" = "integer"
"paths./tags/{id}.get.parameters[1].description" = "Fields to return separate by comas: name,id"
"paths./tags/{id}.get.parameters[1].in" = "query"
"paths./tags/{id}.get.parameters[1].name" = "fields"
"paths./tags/{id}.get.parameters[1].required" = false
"paths./tags/{id}.get.parameters[1].type" = "string"
"paths./tags/{id}.get.produces.length" = 3
"paths./tags/{id}.get.produces[0]" = "application/json"
"paths./tags/{id}.get.produces[1]" = "application/xml"
"paths./tags/{id}.get.produces[2]" = "text/plain"
"paths./tags/{id}.get.responses.200.description" = "No response was specified"
"paths./tags/{id}.get.responses.200.schema.$ref" = "#/definitions/Tag"
"paths./tags/{id}.get.responses.400.description" = "Invalid ID"
"paths./tags/{id}.get.responses.403.description" = "Invalid API Key"
"paths./tags/{id}.get.summary" = "Find tag by ID"
"paths./tags/{id}.get.tags.length" = 1
"paths./tags/{id}.get.tags[0]" = "tags"
"paths./tags/{id}.put.description" = "Update a tag"
"paths./tags/{id}.put.operationId" = "UpdateTag"
"paths./tags/{id}.put.parameters.length" = 2
"paths./tags/{id}.put.parameters[0].description" = "ID of tag"
"paths./tags/{id}.put.parameters[0].format" = "int64"
"paths./tags/{id}.put.parameters[0].in" = "path"
"paths./tags/{id}.put.parameters[0].minimum" = 1.0
"paths./tags/{id}.put.parameters[0].name" = "id"
"paths./tags/{id}.put.parameters[0].required" = true
"paths./tags/{id}.put.parameters[0].type" = "integer"
"paths./tags/{id}.put.parameters[1].description" = "JSON object of the updated tag"
"paths./tags/{id}.put.parameters[1].in" = "body"
"paths./tags/{id}.put.parameters[1].name" = "body"
"paths./tags/{id}.put.parameters[1].required" = true
"paths./tags/{id}.put.parameters[1].schema.$ref" = "#/definitions/Tag"
"paths./tags/{id}.put.produces.length" = 3
"paths./tags/{id}.put.produces[0]" = "application/json"
"paths./tags/{id}.put.produces[1]" = "application/xml"
"paths./tags/{id}.put.produces[2]" = "text/plain"
"paths./tags/{id}.put.responses.200.description" = "Updated successfully"
"paths./tags/{id}.put.responses.200.schema.$ref" = "#/definitions/Tag"
"paths./tags/{id}.put.responses.400.description" = "Invalid data"
"paths./tags/{id}.put.responses.403.description" = "Invalid API Key"
"paths./tags/{id}.put.responses.404.description" = "Invalid ID"
"paths./tags/{id}.put.summary" = "Update a tag"
"paths./tags/{id}.put.tags.length" = 1
"paths./tags/{id}.put.tags[0]" = "tags"
"paths./tags/{id}/sites.get.description" = "Returns a list of sites based with a specific tag id"
"paths./tags/{id}/sites.get.operationId" = "getSitesByTags"
"paths./tags/{id}/sites.get.parameters.length" = 14
"paths./tags/{id}/sites.get.parameters[0].description" = "ID of tag that needs to be fetched"
"paths./tags/{id}/sites.get.parameters[0].format" = "int64"
"paths./tags/{id}/sites.get.parameters[0].in" = "path"
"paths./tags/{id}/sites.get.parameters[0].minimum" = 1.0
"paths./tags/{id}/sites.get.parameters[0].name" = "id"
"paths./tags/{id}/sites.get.parameters[0].required" = true
"paths./tags/{id}/sites.get.parameters[0].type" = "integer"
"paths./tags/{id}/sites.get.parameters[10].description" = "Fields to return separate by comas: name,id"
"paths./tags/{id}/sites.get.parameters[10].in" = "query"
"paths./tags/{id}/sites.get.parameters[10].name" = "fields"
"paths./tags/{id}/sites.get.parameters[10].required" = false
"paths./tags/{id}/sites.get.parameters[10].type" = "string"
"paths./tags/{id}/sites.get.parameters[11].description" = "Number of object to return (max 100, default 25)"
"paths./tags/{id}/sites.get.parameters[11].format" = "int64"
"paths./tags/{id}/sites.get.parameters[11].in" = "query"
"paths./tags/{id}/sites.get.parameters[11].minimum" = 1.0
"paths./tags/{id}/sites.get.parameters[11].name" = "limit"
"paths./tags/{id}/sites.get.parameters[11].required" = false
"paths./tags/{id}/sites.get.parameters[11].type" = "integer"
"paths./tags/{id}/sites.get.parameters[12].description" = "Start of the return (default 0)"
"paths./tags/{id}/sites.get.parameters[12].format" = "int64"
"paths./tags/{id}/sites.get.parameters[12].in" = "query"
"paths./tags/{id}/sites.get.parameters[12].minimum" = 0.0
"paths./tags/{id}/sites.get.parameters[12].name" = "limitstart"
"paths./tags/{id}/sites.get.parameters[12].required" = false
"paths./tags/{id}/sites.get.parameters[12].type" = "integer"
"paths./tags/{id}/sites.get.parameters[13].description" = "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-"
"paths./tags/{id}/sites.get.parameters[13].in" = "query"
"paths./tags/{id}/sites.get.parameters[13].name" = "order"
"paths./tags/{id}/sites.get.parameters[13].required" = false
"paths./tags/{id}/sites.get.parameters[13].type" = "string"
"paths./tags/{id}/sites.get.parameters[1].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./tags/{id}/sites.get.parameters[1].in" = "query"
"paths./tags/{id}/sites.get.parameters[1].name" = "name"
"paths./tags/{id}/sites.get.parameters[1].required" = false
"paths./tags/{id}/sites.get.parameters[1].type" = "string"
"paths./tags/{id}/sites.get.parameters[2].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./tags/{id}/sites.get.parameters[2].in" = "query"
"paths./tags/{id}/sites.get.parameters[2].name" = "access_url"
"paths./tags/{id}/sites.get.parameters[2].required" = false
"paths./tags/{id}/sites.get.parameters[2].type" = "string"
"paths./tags/{id}/sites.get.parameters[3].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./tags/{id}/sites.get.parameters[3].in" = "query"
"paths./tags/{id}/sites.get.parameters[3].name" = "j_version"
"paths./tags/{id}/sites.get.parameters[3].required" = false
"paths./tags/{id}/sites.get.parameters[3].type" = "string"
"paths./tags/{id}/sites.get.parameters[4].description" = "Do a 'LIKE' search, you can also use '%'"
"paths./tags/{id}/sites.get.parameters[4].in" = "query"
"paths./tags/{id}/sites.get.parameters[4].name" = "ip"
"paths./tags/{id}/sites.get.parameters[4].required" = false
"paths./tags/{id}/sites.get.parameters[4].type" = "string"
"paths./tags/{id}/sites.get.parameters[5].description" = "Joomla core update"
"paths./tags/{id}/sites.get.parameters[5].enum.length" = 2
"paths./tags/{id}/sites.get.parameters[5].enum[0]" = 1.0
"paths./tags/{id}/sites.get.parameters[5].enum[1]" = 0.0
"paths./tags/{id}/sites.get.parameters[5].in" = "query"
"paths./tags/{id}/sites.get.parameters[5].name" = "jUpdate"
"paths./tags/{id}/sites.get.parameters[5].type" = "integer"
"paths./tags/{id}/sites.get.parameters[6].description" = "is published"
"paths./tags/{id}/sites.get.parameters[6].enum.length" = 2
"paths./tags/{id}/sites.get.parameters[6].enum[0]" = 1.0
"paths./tags/{id}/sites.get.parameters[6].enum[1]" = 0.0
"paths./tags/{id}/sites.get.parameters[6].in" = "query"
"paths./tags/{id}/sites.get.parameters[6].name" = "published"
"paths./tags/{id}/sites.get.parameters[6].required" = false
"paths./tags/{id}/sites.get.parameters[6].type" = "integer"
"paths./tags/{id}/sites.get.parameters[7].description" = "have errors"
"paths./tags/{id}/sites.get.parameters[7].in" = "query"
"paths./tags/{id}/sites.get.parameters[7].name" = "error"
"paths./tags/{id}/sites.get.parameters[7].required" = false
"paths./tags/{id}/sites.get.parameters[7].type" = "string"
"paths./tags/{id}/sites.get.parameters[8].in" = "query"
"paths./tags/{id}/sites.get.parameters[8].name" = "nbUpdates"
"paths./tags/{id}/sites.get.parameters[8].required" = false
"paths./tags/{id}/sites.get.parameters[8].type" = "string"
"paths./tags/{id}/sites.get.parameters[9].description" = "is the website online"
"paths./tags/{id}/sites.get.parameters[9].enum.length" = 2
"paths./tags/{id}/sites.get.parameters[9].enum[0]" = 1.0
"paths./tags/{id}/sites.get.parameters[9].enum[1]" = 0.0
"paths./tags/{id}/sites.get.parameters[9].in" = "query"
"paths./tags/{id}/sites.get.parameters[9].name" = "up"
"paths./tags/{id}/sites.get.parameters[9].required" = false
"paths./tags/{id}/sites.get.parameters[9].type" = "integer"
"paths./tags/{id}/sites.get.produces.length" = 3
"paths./tags/{id}/sites.get.produces[0]" = "application/json"
"paths./tags/{id}/sites.get.produces[1]" = "application/xml"
"paths./tags/{id}/sites.get.produces[2]" = "text/plain"
"paths./tags/{id}/sites.get.responses.200.description" = "No response was specified"
"paths./tags/{id}/sites.get.responses.200.schema.$ref" = "#/definitions/Site"
"paths./tags/{id}/sites.get.responses.403.description" = "Invalid API Key"
"paths./tags/{id}/sites.get.responses.404.description" = "Invalid ID"
"paths./tags/{id}/sites.get.summary" = "Find sites by tag ID"
"paths./tags/{id}/sites.get.tags.length" = 1
"paths./tags/{id}/sites.get.tags[0]" = "tags"
"paths./versions.get.operationId" = "getVersions"
"paths./versions.get.parameters.length" = 1
"paths./versions.get.parameters[0].description" = "Fields to return separate by comas: name,id"
"paths./versions.get.parameters[0].in" = "query"
"paths./versions.get.parameters[0].name" = "fields"
"paths./versions.get.parameters[0].required" = false
"paths./versions.get.parameters[0].type" = "string"
"paths./versions.get.produces.length" = 3
"paths./versions.get.produces[0]" = "application/json"
"paths./versions.get.produces[1]" = "application/xml"
"paths./versions.get.produces[2]" = "/plain"
"paths./versions.get.responses.200.description" = "No response was specified"
"paths./versions.get.responses.200.schema.$ref" = "#/definitions/Version"
"paths./versions.get.summary" = "Get list of versions"
"paths./versions.get.tags.length" = 1
"paths./versions.get.tags[0]" = "versions"
"paths./versions/{id}.get.operationId" = "getVersion"
"paths./versions/{id}.get.parameters.length" = 2
"paths./versions/{id}.get.parameters[0].description" = "ID of version that needs to be fetched"
"paths./versions/{id}.get.parameters[0].format" = "int64"
"paths./versions/{id}.get.parameters[0].in" = "path"
"paths./versions/{id}.get.parameters[0].minimum" = 1.0
"paths./versions/{id}.get.parameters[0].name" = "id"
"paths./versions/{id}.get.parameters[0].required" = true
"paths./versions/{id}.get.parameters[0].type" = "integer"
"paths./versions/{id}.get.parameters[1].description" = "Fields to return separate by commas: name,id"
"paths./versions/{id}.get.parameters[1].in" = "query"
"paths./versions/{id}.get.parameters[1].name" = "fields"
"paths./versions/{id}.get.parameters[1].required" = false
"paths./versions/{id}.get.parameters[1].type" = "string"
"paths./versions/{id}.get.produces.length" = 3
"paths./versions/{id}.get.produces[0]" = "application/json"
"paths./versions/{id}.get.produces[1]" = "application/xml"
"paths./versions/{id}.get.produces[2]" = "/plain"
"paths./versions/{id}.get.responses.200.description" = "No response was specified"
"paths./versions/{id}.get.responses.200.schema.$ref" = "#/definitions/Version"
"paths./versions/{id}.get.summary" = "Find a version by ID"
"paths./versions/{id}.get.tags.length" = 1
"paths./versions/{id}.get.tags[0]" = "versions"
"schemes.length" = 1
"schemes[0]" = "https"
swagger = "2.0"
"tags.length" = 10
"tags[0].description" = "Operations about audits"
"tags[0].name" = "audits"
"tags[1].description" = "Operations about extensions"
"tags[1].name" = "extensions"
"tags[2].description" = "Operations about feedbacks"
"tags[2].name" = "feedbacks"
"tags[3].description" = "Operations about logs"
"tags[3].name" = "logs"
"tags[4].description" = "Operations about packages"
"tags[4].name" = "packages"
"tags[5].description" = "Create reports in PDF"
"tags[5].name" = "reports"
"tags[6].description" = "Operations about sites"
"tags[6].name" = "sites"
"tags[7].description" = "Operations about SsoUser"
"tags[7].name" = "ssousers"
"tags[8].description" = "Operations about tags"
"tags[8].name" = "tags"
"tags[9].description" = "Operations about versions"
"tags[9].name" = "versions"

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package gitlab;

message PutV3ApplicationSettingsRequest {
    // Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area.
    string admin_notification_email = 1;
    // We will redirect users to this page after they sign out
    string after_sign_out_path = 2;
    // Text shown after sign up
    string after_sign_up_text = 3;
    // Generate API key at http://www.akismet.com
    string akismet_api_key = 4;
    // Helps prevent bots from creating issues
    bool akismet_enabled = 5;
    // Authorization token duration (minutes)
    int32 container_registry_token_expire_delay = 6;
    // Determine if developers can push to master
    int32 default_branch_protection = 7;
    // The default group visibility
    int32 default_group_visibility = 8;
    // The default project visibility
    int32 default_project_visibility = 9;
    // The maximum number of personal projects
    int32 default_projects_limit = 10;
    // The default snippet visibility
    int32 default_snippet_visibility = 11;
    // Disable certain OAuth sign-in sources
    repeated string disabled_oauth_sign_in_sources = 12;
    // Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com
    string domain_blacklist = 13;
    // Enable domain blacklist for sign ups
    bool domain_blacklist_enabled = 14;
    // ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com
    string domain_whitelist = 15;
    // Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
    bool email_author_in_body = 16;
    // Allow only the selected protocols to be used for Git access.
    enum PutV3ApplicationSettingsRequest_Enabled_git_access_protocol {
        PUTV3APPLICATIONSETTINGSREQUEST_ENABLED_GIT_ACCESS_PROTOCOL_SSH = 0;
        PUTV3APPLICATIONSETTINGSREQUEST_ENABLED_GIT_ACCESS_PROTOCOL_HTTP = 1;
        PUTV3APPLICATIONSETTINGSREQUEST_ENABLED_GIT_ACCESS_PROTOCOL_NIL = 2;
    }
    PutV3ApplicationSettingsRequest_Enabled_git_access_protocol enabled_git_access_protocol = 17;
    // Flag indicating if the Gravatar service is enabled
    bool gravatar_enabled = 18;
    // Custom text displayed on the help page
    string help_page_text = 19;
    // We will redirect non-logged in users to this page
    string home_page_url = 20;
    // Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate 'git clone' performance.
    bool housekeeping_bitmaps_enabled = 21;
    // Enable automatic repository housekeeping (git repack, git gc)
    bool housekeeping_enabled = 22;
    // Number of Git pushes after which a full 'git repack' is run.
    int32 housekeeping_full_repack_period = 23;
    // Number of Git pushes after which 'git gc' is run.
    int32 housekeeping_gc_period = 24;
    // Number of Git pushes after which an incremental 'git repack' is run.
    int32 housekeeping_incremental_repack_period = 25;
    // By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format.
    bool html_emails_enabled = 26;
    // Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com
    repeated string import_sources = 27;
    // Enable Koding
    bool koding_enabled = 28;
    // The Koding team URL
    string koding_url = 29;
    // Set the maximum file size each build's artifacts can have
    int32 max_artifacts_size = 30;
    // Maximum attachment size in MB
    int32 max_attachment_size = 31;
    // Enable the InfluxDB metrics
    bool metrics_enabled = 32;
    // The InfluxDB host
    string metrics_host = 33;
    // A method call is only tracked when it takes longer to complete than the given amount of milliseconds.
    int32 metrics_method_call_threshold = 34;
    // The amount of points to store in a single UDP packet
    int32 metrics_packet_size = 35;
    // The amount of InfluxDB connections to open
    int32 metrics_pool_size = 36;
    // The UDP port to use for connecting to InfluxDB
    int32 metrics_port = 37;
    // The sampling interval in seconds
    int32 metrics_sample_interval = 38;
    // The amount of seconds after which an InfluxDB connection will time out
    int32 metrics_timeout = 39;
    // Enable PlantUML
    bool plantuml_enabled = 40;
    // The PlantUML server URL
    string plantuml_url = 41;
    // Helps prevent bots from creating accounts
    bool recaptcha_enabled = 42;
    // Generate private key at http://www.google.com/recaptcha
    string recaptcha_private_key = 43;
    // Generate site key at http://www.google.com/recaptcha
    string recaptcha_site_key = 44;
    // GitLab will periodically run 'git fsck' in all project and wiki repositories to look for silent disk corruption issues.
    bool repository_checks_enabled = 45;
    // Storage paths for new projects
    string repository_storage = 46;
    // Require all users to setup Two-factor authentication
    bool require_two_factor_authentication = 47;
    // Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users.
    repeated string restricted_visibility_levels = 48;
    // Send confirmation email on sign-up
    bool send_user_confirmation_email = 49;
    // Sentry Data Source Name
    string sentry_dsn = 50;
    // Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com
    bool sentry_enabled = 51;
    // Session duration in minutes. GitLab restart is required to apply changes.
    int32 session_expire_delay = 52;
    // Enable shared runners for new projects
    bool shared_runners_enabled = 53;
    // Shared runners text
    string shared_runners_text = 54;
    // Enable Sidekiq Job Throttling
    bool sidekiq_throttling_enabled = 55;
    // The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive.
    float sidekiq_throttling_factor = 56;
    // Choose which queues you wish to throttle
    repeated string sidekiq_throttling_queus = 57;
    // The sign in text of the GitLab application
    string sign_in_text = 58;
    // Flag indicating if sign in is enabled
    bool signin_enabled = 59;
    // Flag indicating if sign up is enabled
    bool signup_enabled = 60;
    // Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication
    int32 two_factor_grace_period = 61;
    // Newly registered users will by default be external
    bool user_default_external = 62;
    // Allow users to register any application to use GitLab as an OAuth provider
    bool user_oauth_applications = 63;
    // Let GitLab inform you when an update is available.
    bool version_check_enabled = 64;
}

message PostV3CiLintRequest {
    // Content of .gitlab-ci.yml
    string content = 1;
}

message GetV3DockerfilesNameRequest {
    // The name of the template
    string name = 1;
}

message GetV3GitignoresNameRequest {
    // The name of the template
    string name = 1;
}

message GetV3Gitlab_ci_ymlsNameRequest {
    // The name of the template
    string name = 1;
}

message GetV3GroupsRequest {
    // Show all group that you have access to
    bool all_available = 1;
    // Order by name or path
    enum GetV3GroupsRequest_Order_by {
        GETV3GROUPSREQUEST_ORDER_BY_NAME = 0;
        GETV3GROUPSREQUEST_ORDER_BY_PATH = 1;
    }
    GetV3GroupsRequest_Order_by order_by = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
    // Search for a specific group
    string search = 5;
    // Array of group ids to exclude from list
    repeated int32 skip_groups = 6;
    // Sort by asc (ascending) or desc (descending)
    enum GetV3GroupsRequest_Sort {
        GETV3GROUPSREQUEST_SORT_ASC = 0;
        GETV3GROUPSREQUEST_SORT_DESC = 1;
    }
    GetV3GroupsRequest_Sort sort = 7;
    // Include project statistics
    bool statistics = 8;
}

message PostV3GroupsRequest {
    // The description of the group
    string description = 1;
    // Enable/disable LFS for the projects in this group
    bool lfs_enabled = 2;
    // The name of the group
    string name = 3;
    // The path of the group
    string path = 4;
    // Allow users to request member access
    bool request_access_enabled = 5;
    // The visibility level of the group
    int32 visibility_level = 6;
}

message GetV3GroupsOwnedRequest {
    // Current page number
    int32 page = 1;
    // Number of items per page
    int32 per_page = 2;
    // Include project statistics
    bool statistics = 3;
}

message GetV3GroupsIdRequest {
    // The ID of a group
    string id = 1;
}

message PutV3GroupsIdRequest {
    // The description of the group
    string description = 1;
    // The ID of a group
    string id = 2;
    // Enable/disable LFS for the projects in this group
    bool lfs_enabled = 3;
    // The name of the group
    string name = 4;
    // The path of the group
    string path = 5;
    // Allow users to request member access
    bool request_access_enabled = 6;
    // The visibility level of the group
    int32 visibility_level = 7;
}

message DeleteV3GroupsIdRequest {
    // The ID of a group
    string id = 1;
}

message GetV3GroupsIdAccess_requestsRequest {
    // The group ID
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message PostV3GroupsIdAccess_requestsRequest {
    // The group ID
    string id = 1;
}

message DeleteV3GroupsIdAccess_requestsUser_idRequest {
    // The group ID
    string id = 1;
    // The user ID of the access requester
    int32 user_id = 2;
}

message PutV3GroupsIdAccess_requestsUser_idApproveRequest {
    // A valid access level (defaults: `30`, developer access level)
    int32 access_level = 1;
    // The group ID
    string id = 2;
    // The user ID of the access requester
    int32 user_id = 3;
}

message GetV3GroupsIdIssuesRequest {
    // The ID of a group
    string id = 1;
    // Comma-separated list of label names
    string labels = 2;
    // Return issues for a specific milestone
    string milestone = 3;
    // Return issues ordered by `created_at` or `updated_at` fields.
    enum GetV3GroupsIdIssuesRequest_Order_by {
        GETV3GROUPSIDISSUESREQUEST_ORDER_BY_CREATED_AT = 0;
        GETV3GROUPSIDISSUESREQUEST_ORDER_BY_UPDATED_AT = 1;
    }
    GetV3GroupsIdIssuesRequest_Order_by order_by = 4;
    // Current page number
    int32 page = 5;
    // Number of items per page
    int32 per_page = 6;
    // Return issues sorted in `asc` or `desc` order.
    enum GetV3GroupsIdIssuesRequest_Sort {
        GETV3GROUPSIDISSUESREQUEST_SORT_ASC = 0;
        GETV3GROUPSIDISSUESREQUEST_SORT_DESC = 1;
    }
    GetV3GroupsIdIssuesRequest_Sort sort = 7;
    // Return opened, closed, or all issues
    enum GetV3GroupsIdIssuesRequest_State {
        GETV3GROUPSIDISSUESREQUEST_STATE_OPENED = 0;
        GETV3GROUPSIDISSUESREQUEST_STATE_CLOSED = 1;
        GETV3GROUPSIDISSUESREQUEST_STATE_ALL = 2;
    }
    GetV3GroupsIdIssuesRequest_State state = 8;
}

message GetV3GroupsIdMembersRequest {
    // The group ID
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // A query string to search for members
    string query = 4;
}

message PostV3GroupsIdMembersRequest {
    // A valid access level (defaults: `30`, developer access level)
    int32 access_level = 1;
    // Date string in the format YEAR-MONTH-DAY
    string expires_at = 2;
    // The group ID
    string id = 3;
    // The user ID of the new member
    int32 user_id = 4;
}

message GetV3GroupsIdMembersUser_idRequest {
    // The group ID
    string id = 1;
    // The user ID of the member
    int32 user_id = 2;
}

message PutV3GroupsIdMembersUser_idRequest {
    // A valid access level
    int32 access_level = 1;
    // Date string in the format YEAR-MONTH-DAY
    string expires_at = 2;
    // The group ID
    string id = 3;
    // The user ID of the new member
    int32 user_id = 4;
}

message DeleteV3GroupsIdMembersUser_idRequest {
    // The group ID
    string id = 1;
    // The user ID of the member
    int32 user_id = 2;
}

message GetV3GroupsIdNotification_settingsRequest {
    // The group ID or project ID or project NAMESPACE/PROJECT_NAME
    string id = 1;
}

message PutV3GroupsIdNotification_settingsRequest {
    // Enable/disable this notification
    bool close_issue = 1;
    // Enable/disable this notification
    bool close_merge_request = 2;
    // Enable/disable this notification
    bool failed_pipeline = 3;
    // The group ID or project ID or project NAMESPACE/PROJECT_NAME
    string id = 4;
    // The group notification level
    string level = 5;
    // Enable/disable this notification
    bool merge_merge_request = 6;
    // Enable/disable this notification
    bool new_issue = 7;
    // Enable/disable this notification
    bool new_merge_request = 8;
    // Enable/disable this notification
    bool new_note = 9;
    // Enable/disable this notification
    bool reassign_issue = 10;
    // Enable/disable this notification
    bool reassign_merge_request = 11;
    // Enable/disable this notification
    bool reopen_issue = 12;
    // Enable/disable this notification
    bool reopen_merge_request = 13;
    // Enable/disable this notification
    bool success_pipeline = 14;
}

message GetV3GroupsIdProjectsRequest {
    // Limit by archived status
    bool archived = 1;
    // The ID of a group
    string id = 2;
    // Return projects ordered by field
    enum GetV3GroupsIdProjectsRequest_Order_by {
        GETV3GROUPSIDPROJECTSREQUEST_ORDER_BY_ID = 0;
        GETV3GROUPSIDPROJECTSREQUEST_ORDER_BY_NAME = 1;
        GETV3GROUPSIDPROJECTSREQUEST_ORDER_BY_PATH = 2;
        GETV3GROUPSIDPROJECTSREQUEST_ORDER_BY_CREATED_AT = 3;
        GETV3GROUPSIDPROJECTSREQUEST_ORDER_BY_UPDATED_AT = 4;
        GETV3GROUPSIDPROJECTSREQUEST_ORDER_BY_LAST_ACTIVITY_AT = 5;
    }
    GetV3GroupsIdProjectsRequest_Order_by order_by = 3;
    // Current page number
    int32 page = 4;
    // Number of items per page
    int32 per_page = 5;
    // Return list of authorized projects matching the search criteria
    string search = 6;
    // Return only the ID, URL, name, and path of each project
    bool simple = 7;
    // Return projects sorted in ascending and descending order
    enum GetV3GroupsIdProjectsRequest_Sort {
        GETV3GROUPSIDPROJECTSREQUEST_SORT_ASC = 0;
        GETV3GROUPSIDPROJECTSREQUEST_SORT_DESC = 1;
    }
    GetV3GroupsIdProjectsRequest_Sort sort = 8;
    // Limit by visibility
    enum GetV3GroupsIdProjectsRequest_Visibility {
        GETV3GROUPSIDPROJECTSREQUEST_VISIBILITY_PUBLIC = 0;
        GETV3GROUPSIDPROJECTSREQUEST_VISIBILITY_INTERNAL = 1;
        GETV3GROUPSIDPROJECTSREQUEST_VISIBILITY_PRIVATE = 2;
    }
    GetV3GroupsIdProjectsRequest_Visibility visibility = 9;
}

message PostV3GroupsIdProjectsProject_idRequest {
    // The ID of a group
    string id = 1;
    // The ID or path of the project
    string project_id = 2;
}

message PostV3HooksRequest {
    // Do SSL verification when triggering the hook
    bool enable_ssl_verification = 1;
    // Trigger hook on push events
    bool push_events = 2;
    // Trigger hook on tag push events
    bool tag_push_events = 3;
    // The token used to validate payloads
    string token = 4;
    // The URL to send the request to
    string url = 5;
}

message GetV3HooksIdRequest {
    // The ID of the system hook
    int32 id = 1;
}

message DeleteV3HooksIdRequest {
    // The ID of the system hook
    int32 id = 1;
}

message GetV3IssuesRequest {
    // Comma-separated list of label names
    string labels = 1;
    // Return issues for a specific milestone
    string milestone = 2;
    // Return issues ordered by `created_at` or `updated_at` fields.
    enum GetV3IssuesRequest_Order_by {
        GETV3ISSUESREQUEST_ORDER_BY_CREATED_AT = 0;
        GETV3ISSUESREQUEST_ORDER_BY_UPDATED_AT = 1;
    }
    GetV3IssuesRequest_Order_by order_by = 3;
    // Current page number
    int32 page = 4;
    // Number of items per page
    int32 per_page = 5;
    // Return issues sorted in `asc` or `desc` order.
    enum GetV3IssuesRequest_Sort {
        GETV3ISSUESREQUEST_SORT_ASC = 0;
        GETV3ISSUESREQUEST_SORT_DESC = 1;
    }
    GetV3IssuesRequest_Sort sort = 6;
    // Return opened, closed, or all issues
    enum GetV3IssuesRequest_State {
        GETV3ISSUESREQUEST_STATE_OPENED = 0;
        GETV3ISSUESREQUEST_STATE_CLOSED = 1;
        GETV3ISSUESREQUEST_STATE_ALL = 2;
    }
    GetV3IssuesRequest_State state = 7;
}

message GetV3KeysIdRequest {
    int32 id = 1;
}

message GetV3LicensesRequest {
    // If passed, returns only popular licenses
    bool popular = 1;
}

message GetV3LicensesNameRequest {
    // The name of the template
    string name = 1;
}

message GetV3NamespacesRequest {
    // Current page number
    int32 page = 1;
    // Number of items per page
    int32 per_page = 2;
    // Search query for namespaces
    string search = 3;
}

message PutV3Notification_settingsRequest {
    // Enable/disable this notification
    bool close_issue = 1;
    // Enable/disable this notification
    bool close_merge_request = 2;
    // Enable/disable this notification
    bool failed_pipeline = 3;
    // The global notification level
    string level = 4;
    // Enable/disable this notification
    bool merge_merge_request = 5;
    // Enable/disable this notification
    bool new_issue = 6;
    // Enable/disable this notification
    bool new_merge_request = 7;
    // Enable/disable this notification
    bool new_note = 8;
    // The email address to send notifications
    string notification_email = 9;
    // Enable/disable this notification
    bool reassign_issue = 10;
    // Enable/disable this notification
    bool reassign_merge_request = 11;
    // Enable/disable this notification
    bool reopen_issue = 12;
    // Enable/disable this notification
    bool reopen_merge_request = 13;
    // Enable/disable this notification
    bool success_pipeline = 14;
}

message GetV3ProjectsRequest {
    // Limit by archived status
    bool archived = 1;
    // Return projects ordered by field
    enum GetV3ProjectsRequest_Order_by {
        GETV3PROJECTSREQUEST_ORDER_BY_ID = 0;
        GETV3PROJECTSREQUEST_ORDER_BY_NAME = 1;
        GETV3PROJECTSREQUEST_ORDER_BY_PATH = 2;
        GETV3PROJECTSREQUEST_ORDER_BY_CREATED_AT = 3;
        GETV3PROJECTSREQUEST_ORDER_BY_UPDATED_AT = 4;
        GETV3PROJECTSREQUEST_ORDER_BY_LAST_ACTIVITY_AT = 5;
    }
    GetV3ProjectsRequest_Order_by order_by = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
    // Return list of authorized projects matching the search criteria
    string search = 5;
    // Return only the ID, URL, name, and path of each project
    bool simple = 6;
    // Return projects sorted in ascending and descending order
    enum GetV3ProjectsRequest_Sort {
        GETV3PROJECTSREQUEST_SORT_ASC = 0;
        GETV3PROJECTSREQUEST_SORT_DESC = 1;
    }
    GetV3ProjectsRequest_Sort sort = 7;
    // Limit by visibility
    enum GetV3ProjectsRequest_Visibility {
        GETV3PROJECTSREQUEST_VISIBILITY_PUBLIC = 0;
        GETV3PROJECTSREQUEST_VISIBILITY_INTERNAL = 1;
        GETV3PROJECTSREQUEST_VISIBILITY_PRIVATE = 2;
    }
    GetV3ProjectsRequest_Visibility visibility = 8;
}

message PostV3ProjectsRequest {
    // Flag indication if builds are enabled
    bool builds_enabled = 1;
    // Flag indication if the container registry is enabled for that project
    bool container_registry_enabled = 2;
    // The description of the project
    string description = 3;
    // URL from which the project is imported
    string import_url = 4;
    // Flag indication if the issue tracker is enabled
    bool issues_enabled = 5;
    // Flag indication if Git LFS is enabled for that project
    bool lfs_enabled = 6;
    // Flag indication if merge requests are enabled
    bool merge_requests_enabled = 7;
    // The name of the project
    string name = 8;
    // Namespace ID for the new project. Default to the user namespace.
    int32 namespace_id = 9;
    // Only allow to merge if all discussions are resolved
    bool only_allow_merge_if_all_discussions_are_resolved = 10;
    // Only allow to merge if builds succeed
    bool only_allow_merge_if_build_succeeds = 11;
    // The path of the repository
    string path = 12;
    // Create a public project. The same as visibility_level = 20.
    bool public = 13;
    // Perform public builds
    bool public_builds = 14;
    // Allow users to request member access
    bool request_access_enabled = 15;
    // Flag indication if shared runners are enabled for that project
    bool shared_runners_enabled = 16;
    // Flag indication if snippets are enabled
    bool snippets_enabled = 17;
    // Create a public project. The same as visibility_level = 20.
    int32 visibility_level = 18;
    // Flag indication if the wiki is enabled
    bool wiki_enabled = 19;
}

message GetV3ProjectsAllRequest {
    // Limit by archived status
    bool archived = 1;
    // Return projects ordered by field
    enum GetV3ProjectsAllRequest_Order_by {
        GETV3PROJECTSALLREQUEST_ORDER_BY_ID = 0;
        GETV3PROJECTSALLREQUEST_ORDER_BY_NAME = 1;
        GETV3PROJECTSALLREQUEST_ORDER_BY_PATH = 2;
        GETV3PROJECTSALLREQUEST_ORDER_BY_CREATED_AT = 3;
        GETV3PROJECTSALLREQUEST_ORDER_BY_UPDATED_AT = 4;
        GETV3PROJECTSALLREQUEST_ORDER_BY_LAST_ACTIVITY_AT = 5;
    }
    GetV3ProjectsAllRequest_Order_by order_by = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
    // Return list of authorized projects matching the search criteria
    string search = 5;
    // Return only the ID, URL, name, and path of each project
    bool simple = 6;
    // Return projects sorted in ascending and descending order
    enum GetV3ProjectsAllRequest_Sort {
        GETV3PROJECTSALLREQUEST_SORT_ASC = 0;
        GETV3PROJECTSALLREQUEST_SORT_DESC = 1;
    }
    GetV3ProjectsAllRequest_Sort sort = 7;
    // Include project statistics
    bool statistics = 8;
    // Limit by visibility
    enum GetV3ProjectsAllRequest_Visibility {
        GETV3PROJECTSALLREQUEST_VISIBILITY_PUBLIC = 0;
        GETV3PROJECTSALLREQUEST_VISIBILITY_INTERNAL = 1;
        GETV3PROJECTSALLREQUEST_VISIBILITY_PRIVATE = 2;
    }
    GetV3ProjectsAllRequest_Visibility visibility = 9;
}

message PostV3ProjectsForkIdRequest {
    // The ID of a project
    string id = 1;
    // The ID or name of the namespace that the project will be forked into
    string namespace = 2;
}

message GetV3ProjectsOwnedRequest {
    // Limit by archived status
    bool archived = 1;
    // Return projects ordered by field
    enum GetV3ProjectsOwnedRequest_Order_by {
        GETV3PROJECTSOWNEDREQUEST_ORDER_BY_ID = 0;
        GETV3PROJECTSOWNEDREQUEST_ORDER_BY_NAME = 1;
        GETV3PROJECTSOWNEDREQUEST_ORDER_BY_PATH = 2;
        GETV3PROJECTSOWNEDREQUEST_ORDER_BY_CREATED_AT = 3;
        GETV3PROJECTSOWNEDREQUEST_ORDER_BY_UPDATED_AT = 4;
        GETV3PROJECTSOWNEDREQUEST_ORDER_BY_LAST_ACTIVITY_AT = 5;
    }
    GetV3ProjectsOwnedRequest_Order_by order_by = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
    // Return list of authorized projects matching the search criteria
    string search = 5;
    // Return only the ID, URL, name, and path of each project
    bool simple = 6;
    // Return projects sorted in ascending and descending order
    enum GetV3ProjectsOwnedRequest_Sort {
        GETV3PROJECTSOWNEDREQUEST_SORT_ASC = 0;
        GETV3PROJECTSOWNEDREQUEST_SORT_DESC = 1;
    }
    GetV3ProjectsOwnedRequest_Sort sort = 7;
    // Include project statistics
    bool statistics = 8;
    // Limit by visibility
    enum GetV3ProjectsOwnedRequest_Visibility {
        GETV3PROJECTSOWNEDREQUEST_VISIBILITY_PUBLIC = 0;
        GETV3PROJECTSOWNEDREQUEST_VISIBILITY_INTERNAL = 1;
        GETV3PROJECTSOWNEDREQUEST_VISIBILITY_PRIVATE = 2;
    }
    GetV3ProjectsOwnedRequest_Visibility visibility = 9;
}

message GetV3ProjectsSearchQueryRequest {
    // Return projects ordered by field
    enum GetV3ProjectsSearchQueryRequest_Order_by {
        GETV3PROJECTSSEARCHQUERYREQUEST_ORDER_BY_ID = 0;
        GETV3PROJECTSSEARCHQUERYREQUEST_ORDER_BY_NAME = 1;
        GETV3PROJECTSSEARCHQUERYREQUEST_ORDER_BY_PATH = 2;
        GETV3PROJECTSSEARCHQUERYREQUEST_ORDER_BY_CREATED_AT = 3;
        GETV3PROJECTSSEARCHQUERYREQUEST_ORDER_BY_UPDATED_AT = 4;
        GETV3PROJECTSSEARCHQUERYREQUEST_ORDER_BY_LAST_ACTIVITY_AT = 5;
    }
    GetV3ProjectsSearchQueryRequest_Order_by order_by = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // The project name to be searched
    string query = 4;
    // Return projects sorted in ascending and descending order
    enum GetV3ProjectsSearchQueryRequest_Sort {
        GETV3PROJECTSSEARCHQUERYREQUEST_SORT_ASC = 0;
        GETV3PROJECTSSEARCHQUERYREQUEST_SORT_DESC = 1;
    }
    GetV3ProjectsSearchQueryRequest_Sort sort = 5;
}

message GetV3ProjectsStarredRequest {
    // Limit by archived status
    bool archived = 1;
    // Return projects ordered by field
    enum GetV3ProjectsStarredRequest_Order_by {
        GETV3PROJECTSSTARREDREQUEST_ORDER_BY_ID = 0;
        GETV3PROJECTSSTARREDREQUEST_ORDER_BY_NAME = 1;
        GETV3PROJECTSSTARREDREQUEST_ORDER_BY_PATH = 2;
        GETV3PROJECTSSTARREDREQUEST_ORDER_BY_CREATED_AT = 3;
        GETV3PROJECTSSTARREDREQUEST_ORDER_BY_UPDATED_AT = 4;
        GETV3PROJECTSSTARREDREQUEST_ORDER_BY_LAST_ACTIVITY_AT = 5;
    }
    GetV3ProjectsStarredRequest_Order_by order_by = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
    // Return list of authorized projects matching the search criteria
    string search = 5;
    // Return only the ID, URL, name, and path of each project
    bool simple = 6;
    // Return projects sorted in ascending and descending order
    enum GetV3ProjectsStarredRequest_Sort {
        GETV3PROJECTSSTARREDREQUEST_SORT_ASC = 0;
        GETV3PROJECTSSTARREDREQUEST_SORT_DESC = 1;
    }
    GetV3ProjectsStarredRequest_Sort sort = 7;
    // Limit by visibility
    enum GetV3ProjectsStarredRequest_Visibility {
        GETV3PROJECTSSTARREDREQUEST_VISIBILITY_PUBLIC = 0;
        GETV3PROJECTSSTARREDREQUEST_VISIBILITY_INTERNAL = 1;
        GETV3PROJECTSSTARREDREQUEST_VISIBILITY_PRIVATE = 2;
    }
    GetV3ProjectsStarredRequest_Visibility visibility = 8;
}

message PostV3ProjectsUserUser_idRequest {
    // Flag indication if builds are enabled
    bool builds_enabled = 1;
    // Flag indication if the container registry is enabled for that project
    bool container_registry_enabled = 2;
    // The default branch of the project
    string default_branch = 3;
    // The description of the project
    string description = 4;
    // URL from which the project is imported
    string import_url = 5;
    // Flag indication if the issue tracker is enabled
    bool issues_enabled = 6;
    // Flag indication if Git LFS is enabled for that project
    bool lfs_enabled = 7;
    // Flag indication if merge requests are enabled
    bool merge_requests_enabled = 8;
    // The name of the project
    string name = 9;
    // Namespace ID for the new project. Default to the user namespace.
    int32 namespace_id = 10;
    // Only allow to merge if all discussions are resolved
    bool only_allow_merge_if_all_discussions_are_resolved = 11;
    // Only allow to merge if builds succeed
    bool only_allow_merge_if_build_succeeds = 12;
    // Create a public project. The same as visibility_level = 20.
    bool public = 13;
    // Perform public builds
    bool public_builds = 14;
    // Allow users to request member access
    bool request_access_enabled = 15;
    // Flag indication if shared runners are enabled for that project
    bool shared_runners_enabled = 16;
    // Flag indication if snippets are enabled
    bool snippets_enabled = 17;
    // The ID of a user
    int32 user_id = 18;
    // Create a public project. The same as visibility_level = 20.
    int32 visibility_level = 19;
    // Flag indication if the wiki is enabled
    bool wiki_enabled = 20;
}

message GetV3ProjectsVisibleRequest {
    // Limit by archived status
    bool archived = 1;
    // Return projects ordered by field
    enum GetV3ProjectsVisibleRequest_Order_by {
        GETV3PROJECTSVISIBLEREQUEST_ORDER_BY_ID = 0;
        GETV3PROJECTSVISIBLEREQUEST_ORDER_BY_NAME = 1;
        GETV3PROJECTSVISIBLEREQUEST_ORDER_BY_PATH = 2;
        GETV3PROJECTSVISIBLEREQUEST_ORDER_BY_CREATED_AT = 3;
        GETV3PROJECTSVISIBLEREQUEST_ORDER_BY_UPDATED_AT = 4;
        GETV3PROJECTSVISIBLEREQUEST_ORDER_BY_LAST_ACTIVITY_AT = 5;
    }
    GetV3ProjectsVisibleRequest_Order_by order_by = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
    // Return list of authorized projects matching the search criteria
    string search = 5;
    // Return only the ID, URL, name, and path of each project
    bool simple = 6;
    // Return projects sorted in ascending and descending order
    enum GetV3ProjectsVisibleRequest_Sort {
        GETV3PROJECTSVISIBLEREQUEST_SORT_ASC = 0;
        GETV3PROJECTSVISIBLEREQUEST_SORT_DESC = 1;
    }
    GetV3ProjectsVisibleRequest_Sort sort = 7;
    // Limit by visibility
    enum GetV3ProjectsVisibleRequest_Visibility {
        GETV3PROJECTSVISIBLEREQUEST_VISIBILITY_PUBLIC = 0;
        GETV3PROJECTSVISIBLEREQUEST_VISIBILITY_INTERNAL = 1;
        GETV3PROJECTSVISIBLEREQUEST_VISIBILITY_PRIVATE = 2;
    }
    GetV3ProjectsVisibleRequest_Visibility visibility = 8;
}

message GetV3ProjectsIdRequest {
    // The ID of a project
    string id = 1;
}

message PutV3ProjectsIdRequest {
    // Flag indication if builds are enabled
    bool builds_enabled = 1;
    // Flag indication if the container registry is enabled for that project
    bool container_registry_enabled = 2;
    // The default branch of the project
    string default_branch = 3;
    // The description of the project
    string description = 4;
    // The ID of a project
    string id = 5;
    // Flag indication if the issue tracker is enabled
    bool issues_enabled = 6;
    // Flag indication if Git LFS is enabled for that project
    bool lfs_enabled = 7;
    // Flag indication if merge requests are enabled
    bool merge_requests_enabled = 8;
    // The name of the project
    string name = 9;
    // Only allow to merge if all discussions are resolved
    bool only_allow_merge_if_all_discussions_are_resolved = 10;
    // Only allow to merge if builds succeed
    bool only_allow_merge_if_build_succeeds = 11;
    // The path of the repository
    string path = 12;
    // Create a public project. The same as visibility_level = 20.
    bool public = 13;
    // Perform public builds
    bool public_builds = 14;
    // Allow users to request member access
    bool request_access_enabled = 15;
    // Flag indication if shared runners are enabled for that project
    bool shared_runners_enabled = 16;
    // Flag indication if snippets are enabled
    bool snippets_enabled = 17;
    // Create a public project. The same as visibility_level = 20.
    int32 visibility_level = 18;
    // Flag indication if the wiki is enabled
    bool wiki_enabled = 19;
}

message DeleteV3ProjectsIdRequest {
    // The ID of a project
    string id = 1;
}

message PostV3ProjectsIdRefRefTriggerBuildsRequest {
    // The ID of a project
    string id = 1;
    // The commit sha or name of a branch or tag
    string ref = 2;
    // The unique token of trigger
    string token = 3;
}

message GetV3ProjectsIdAccess_requestsRequest {
    // The project ID
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message PostV3ProjectsIdAccess_requestsRequest {
    // The project ID
    string id = 1;
}

message DeleteV3ProjectsIdAccess_requestsUser_idRequest {
    // The project ID
    string id = 1;
    // The user ID of the access requester
    int32 user_id = 2;
}

message PutV3ProjectsIdAccess_requestsUser_idApproveRequest {
    // A valid access level (defaults: `30`, developer access level)
    int32 access_level = 1;
    // The project ID
    string id = 2;
    // The user ID of the access requester
    int32 user_id = 3;
}

message PostV3ProjectsIdArchiveRequest {
    // The ID of a project
    string id = 1;
}

message GetV3ProjectsIdBoardsRequest {
    // The ID of a project
    string id = 1;
}

message GetV3ProjectsIdBoardsBoard_idListsRequest {
    // The ID of a board
    int32 board_id = 1;
    // The ID of a project
    string id = 2;
}

message PostV3ProjectsIdBoardsBoard_idListsRequest {
    // The ID of a board
    int32 board_id = 1;
    // The ID of a project
    string id = 2;
    // The ID of an existing label
    int32 label_id = 3;
}

message GetV3ProjectsIdBoardsBoard_idListsList_idRequest {
    // The ID of a board
    int32 board_id = 1;
    // The ID of a project
    string id = 2;
    // The ID of a list
    int32 list_id = 3;
}

message PutV3ProjectsIdBoardsBoard_idListsList_idRequest {
    // The ID of a board
    int32 board_id = 1;
    // The ID of a project
    string id = 2;
    // The ID of a list
    int32 list_id = 3;
    // The position of the list
    int32 position = 4;
}

message DeleteV3ProjectsIdBoardsBoard_idListsList_idRequest {
    // The ID of a board
    int32 board_id = 1;
    // The ID of a project
    string id = 2;
    // The ID of a board list
    int32 list_id = 3;
}

message GetV3ProjectsIdBuildsRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // The scope of builds to show
    enum GetV3ProjectsIdBuildsRequest_Scope {
        GETV3PROJECTSIDBUILDSREQUEST_SCOPE_PENDING = 0;
        GETV3PROJECTSIDBUILDSREQUEST_SCOPE_RUNNING = 1;
        GETV3PROJECTSIDBUILDSREQUEST_SCOPE_FAILED = 2;
        GETV3PROJECTSIDBUILDSREQUEST_SCOPE_SUCCESS = 3;
        GETV3PROJECTSIDBUILDSREQUEST_SCOPE_CANCELED = 4;
    }
    GetV3ProjectsIdBuildsRequest_Scope scope = 4;
}

message GetV3ProjectsIdBuildsArtifactsRef_nameDownloadRequest {
    // The ID of a project
    string id = 1;
    // The name for the build
    string job = 2;
    // The ref from repository
    string ref_name = 3;
}

message GetV3ProjectsIdBuildsBuild_idRequest {
    // The ID of a build
    int32 build_id = 1;
    // The ID of a project
    string id = 2;
}

message GetV3ProjectsIdBuildsBuild_idArtifactsRequest {
    // The ID of a build
    int32 build_id = 1;
    // The ID of a project
    string id = 2;
}

message PostV3ProjectsIdBuildsBuild_idArtifactsKeepRequest {
    // The ID of a build
    int32 build_id = 1;
    // The ID of a project
    string id = 2;
}

message PostV3ProjectsIdBuildsBuild_idCancelRequest {
    // The ID of a build
    int32 build_id = 1;
    // The ID of a project
    string id = 2;
}

message PostV3ProjectsIdBuildsBuild_idEraseRequest {
    // The ID of a build
    int32 build_id = 1;
    // The ID of a project
    string id = 2;
}

message PostV3ProjectsIdBuildsBuild_idPlayRequest {
    // The ID of a Build
    int32 build_id = 1;
    // The ID of a project
    string id = 2;
}

message PostV3ProjectsIdBuildsBuild_idRetryRequest {
    // The ID of a build
    int32 build_id = 1;
    // The ID of a project
    string id = 2;
}

message GetV3ProjectsIdBuildsBuild_idTraceRequest {
    // The ID of a build
    int32 build_id = 1;
    // The ID of a project
    string id = 2;
}

message GetV3ProjectsIdDeploy_keysRequest {
    // The ID of the project
    string id = 1;
}

message PostV3ProjectsIdDeploy_keysRequest {
    // The ID of the project
    string id = 1;
    // The new deploy key
    string key = 2;
    // The name of the deploy key
    string title = 3;
}

message GetV3ProjectsIdDeploy_keysKey_idRequest {
    // The ID of the project
    string id = 1;
    // The ID of the deploy key
    int32 key_id = 2;
}

message DeleteV3ProjectsIdDeploy_keysKey_idRequest {
    // The ID of the project
    string id = 1;
    // The ID of the deploy key
    int32 key_id = 2;
}

message DeleteV3ProjectsIdDeploy_keysKey_idDisableRequest {
    // The ID of the project
    string id = 1;
    // The ID of the deploy key
    int32 key_id = 2;
}

message PostV3ProjectsIdDeploy_keysKey_idEnableRequest {
    // The ID of the project
    string id = 1;
    // The ID of the deploy key
    int32 key_id = 2;
}

message GetV3ProjectsIdDeploymentsRequest {
    // The project ID
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message GetV3ProjectsIdDeploymentsDeployment_idRequest {
    // The deployment ID
    int32 deployment_id = 1;
    // The project ID
    string id = 2;
}

message GetV3ProjectsIdEnvironmentsRequest {
    // The project ID
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message PostV3ProjectsIdEnvironmentsRequest {
    // URL on which this deployment is viewable
    string external_url = 1;
    // The project ID
    string id = 2;
    // The name of the environment to be created
    string name = 3;
    string slug = 4;
}

message PutV3ProjectsIdEnvironmentsEnvironment_idRequest {
    // The environment ID
    int32 environment_id = 1;
    // The new URL on which this deployment is viewable
    string external_url = 2;
    // The project ID
    string id = 3;
    // The new environment name
    string name = 4;
    string slug = 5;
}

message DeleteV3ProjectsIdEnvironmentsEnvironment_idRequest {
    // The environment ID
    int32 environment_id = 1;
    // The project ID
    string id = 2;
}

message GetV3ProjectsIdEventsRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message DeleteV3ProjectsIdForkRequest {
    // The ID of a project
    string id = 1;
}

message PostV3ProjectsIdForkForked_from_idRequest {
    // The ID of the project it was forked from
    string forked_from_id = 1;
    // The ID of a project
    string id = 2;
}

message GetV3ProjectsIdHooksRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message PostV3ProjectsIdHooksRequest {
    // Trigger hook on build events
    bool build_events = 1;
    // Do SSL verification when triggering the hook
    bool enable_ssl_verification = 2;
    // The ID of a project
    string id = 3;
    // Trigger hook on issues events
    bool issues_events = 4;
    // Trigger hook on merge request events
    bool merge_requests_events = 5;
    // Trigger hook on note(comment) events
    bool note_events = 6;
    // Trigger hook on pipeline events
    bool pipeline_events = 7;
    // Trigger hook on push events
    bool push_events = 8;
    // Trigger hook on tag push events
    bool tag_push_events = 9;
    // Secret token to validate received payloads; this will not be returned in the response
    string token = 10;
    // The URL to send the request to
    string url = 11;
    // Trigger hook on wiki events
    bool wiki_page_events = 12;
}

message GetV3ProjectsIdHooksHook_idRequest {
    // The ID of a project hook
    int32 hook_id = 1;
    // The ID of a project
    string id = 2;
}

message PutV3ProjectsIdHooksHook_idRequest {
    // Trigger hook on build events
    bool build_events = 1;
    // Do SSL verification when triggering the hook
    bool enable_ssl_verification = 2;
    // The ID of the hook to update
    int32 hook_id = 3;
    // The ID of a project
    string id = 4;
    // Trigger hook on issues events
    bool issues_events = 5;
    // Trigger hook on merge request events
    bool merge_requests_events = 6;
    // Trigger hook on note(comment) events
    bool note_events = 7;
    // Trigger hook on pipeline events
    bool pipeline_events = 8;
    // Trigger hook on push events
    bool push_events = 9;
    // Trigger hook on tag push events
    bool tag_push_events = 10;
    // Secret token to validate received payloads; this will not be returned in the response
    string token = 11;
    // The URL to send the request to
    string url = 12;
    // Trigger hook on wiki events
    bool wiki_page_events = 13;
}

message DeleteV3ProjectsIdHooksHook_idRequest {
    // The ID of the hook to delete
    int32 hook_id = 1;
    // The ID of a project
    string id = 2;
}

message GetV3ProjectsIdIssuesRequest {
    // The ID of a project
    string id = 1;
    // Return the issue having the given `iid`
    int32 iid = 2;
    // Comma-separated list of label names
    string labels = 3;
    // Return issues for a specific milestone
    string milestone = 4;
    // Return issues ordered by `created_at` or `updated_at` fields.
    enum GetV3ProjectsIdIssuesRequest_Order_by {
        GETV3PROJECTSIDISSUESREQUEST_ORDER_BY_CREATED_AT = 0;
        GETV3PROJECTSIDISSUESREQUEST_ORDER_BY_UPDATED_AT = 1;
    }
    GetV3ProjectsIdIssuesRequest_Order_by order_by = 5;
    // Current page number
    int32 page = 6;
    // Number of items per page
    int32 per_page = 7;
    // Return issues sorted in `asc` or `desc` order.
    enum GetV3ProjectsIdIssuesRequest_Sort {
        GETV3PROJECTSIDISSUESREQUEST_SORT_ASC = 0;
        GETV3PROJECTSIDISSUESREQUEST_SORT_DESC = 1;
    }
    GetV3ProjectsIdIssuesRequest_Sort sort = 8;
    // Return opened, closed, or all issues
    enum GetV3ProjectsIdIssuesRequest_State {
        GETV3PROJECTSIDISSUESREQUEST_STATE_OPENED = 0;
        GETV3PROJECTSIDISSUESREQUEST_STATE_CLOSED = 1;
        GETV3PROJECTSIDISSUESREQUEST_STATE_ALL = 2;
    }
    GetV3ProjectsIdIssuesRequest_State state = 9;
}

message PostV3ProjectsIdIssuesRequest {
    // The ID of a user to assign issue
    int32 assignee_id = 1;
    // Boolean parameter if the issue should be confidential
    bool confidential = 2;
    // Date time when the issue was created. Available only for admins and project owners.
    string created_at = 3;
    // The description of an issue
    string description = 4;
    // Date time string in the format YEAR-MONTH-DAY
    string due_date = 5;
    // The ID of a project
    string id = 6;
    // Comma-separated list of label names
    string labels = 7;
    // The IID of a merge request for which to resolve discussions
    int32 merge_request_for_resolving_discussions = 8;
    // The ID of a milestone to assign issue
    int32 milestone_id = 9;
    // The title of an issue
    string title = 10;
}

message GetV3ProjectsIdIssuesIssue_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project issue
    int32 issue_id = 2;
}

message PutV3ProjectsIdIssuesIssue_idRequest {
    // The ID of a user to assign issue
    int32 assignee_id = 1;
    // Boolean parameter if the issue should be confidential
    bool confidential = 2;
    string created_at = 3;
    // The description of an issue
    string description = 4;
    // Date time string in the format YEAR-MONTH-DAY
    string due_date = 5;
    // The ID of a project
    string id = 6;
    // The ID of a project issue
    int32 issue_id = 7;
    // Comma-separated list of label names
    string labels = 8;
    // The ID of a milestone to assign issue
    int32 milestone_id = 9;
    // State of the issue
    enum PutV3ProjectsIdIssuesIssue_idRequest_State_event {
        PUTV3PROJECTSIDISSUESISSUE_IDREQUEST_STATE_EVENT_REOPEN = 0;
        PUTV3PROJECTSIDISSUESISSUE_IDREQUEST_STATE_EVENT_CLOSE = 1;
    }
    PutV3ProjectsIdIssuesIssue_idRequest_State_event state_event = 10;
    // The title of an issue
    string title = 11;
    // Date time when the issue was updated. Available only for admins and project owners.
    string updated_at = 12;
}

message DeleteV3ProjectsIdIssuesIssue_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project issue
    int32 issue_id = 2;
}

message PostV3ProjectsIdIssuesIssue_idAdd_spent_timeRequest {
    // The duration to be parsed
    string duration = 1;
    // The ID of a project
    string id = 2;
    // The ID of a project issue
    int32 issue_id = 3;
}

message GetV3ProjectsIdIssuesIssue_idAward_emojiRequest {
    // The ID of a project
    string id = 1;
    // The ID of an Issue, Merge Request or Snippet
    int32 issue_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message PostV3ProjectsIdIssuesIssue_idAward_emojiRequest {
    int32 id = 1;
    int32 issue_id = 2;
    // The name of a award_emoji (without colons)
    string name = 3;
}

message GetV3ProjectsIdIssuesIssue_idAward_emojiAward_idRequest {
    // The ID of the award
    int32 award_id = 1;
    int32 id = 2;
    int32 issue_id = 3;
}

message DeleteV3ProjectsIdIssuesIssue_idAward_emojiAward_idRequest {
    // The ID of an award emoji
    int32 award_id = 1;
    int32 id = 2;
    int32 issue_id = 3;
}

message PostV3ProjectsIdIssuesIssue_idMoveRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project issue
    int32 issue_id = 2;
    // The ID of the new project
    int32 to_project_id = 3;
}

message GetV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiRequest {
    int32 id = 1;
    int32 issue_id = 2;
    int32 note_id = 3;
    // Current page number
    int32 page = 4;
    // Number of items per page
    int32 per_page = 5;
}

message PostV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiRequest {
    int32 id = 1;
    int32 issue_id = 2;
    // The name of a award_emoji (without colons)
    string name = 3;
    int32 note_id = 4;
}

message GetV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiAward_idRequest {
    // The ID of the award
    int32 award_id = 1;
    int32 id = 2;
    int32 issue_id = 3;
    int32 note_id = 4;
}

message DeleteV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiAward_idRequest {
    // The ID of an award emoji
    int32 award_id = 1;
    int32 id = 2;
    int32 issue_id = 3;
    int32 note_id = 4;
}

message PostV3ProjectsIdIssuesIssue_idReset_spent_timeRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project issue
    int32 issue_id = 2;
}

message PostV3ProjectsIdIssuesIssue_idReset_time_estimateRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project issue
    int32 issue_id = 2;
}

message PostV3ProjectsIdIssuesIssue_idTime_estimateRequest {
    // The duration to be parsed
    string duration = 1;
    // The ID of a project
    string id = 2;
    // The ID of a project issue
    int32 issue_id = 3;
}

message GetV3ProjectsIdIssuesIssue_idTime_statsRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project issue
    int32 issue_id = 2;
}

message PostV3ProjectsIdIssuesIssue_idTodoRequest {
    // The ID of a project
    string id = 1;
    // The ID of an issuable
    int32 issue_id = 2;
}

message GetV3ProjectsIdIssuesNoteable_idNotesRequest {
    // The ID of a project
    string id = 1;
    // The ID of the noteable
    int32 noteable_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message PostV3ProjectsIdIssuesNoteable_idNotesRequest {
    // The content of a note
    string body = 1;
    // The creation date of the note
    string created_at = 2;
    // The ID of a project
    string id = 3;
    // The ID of the noteable
    int32 noteable_id = 4;
}

message GetV3ProjectsIdIssuesNoteable_idNotesNote_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a note
    int32 note_id = 2;
    // The ID of the noteable
    int32 noteable_id = 3;
}

message PutV3ProjectsIdIssuesNoteable_idNotesNote_idRequest {
    // The content of a note
    string body = 1;
    // The ID of a project
    string id = 2;
    // The ID of a note
    int32 note_id = 3;
    // The ID of the noteable
    int32 noteable_id = 4;
}

message DeleteV3ProjectsIdIssuesNoteable_idNotesNote_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a note
    int32 note_id = 2;
    // The ID of the noteable
    int32 noteable_id = 3;
}

message PostV3ProjectsIdIssuesSubscribable_idSubscriptionRequest {
    // The ID of a project
    string id = 1;
    // The ID of a resource
    string subscribable_id = 2;
}

message DeleteV3ProjectsIdIssuesSubscribable_idSubscriptionRequest {
    // The ID of a project
    string id = 1;
    // The ID of a resource
    string subscribable_id = 2;
}

message GetV3ProjectsIdKeysRequest {
    // The ID of the project
    string id = 1;
}

message PostV3ProjectsIdKeysRequest {
    // The ID of the project
    string id = 1;
    // The new deploy key
    string key = 2;
    // The name of the deploy key
    string title = 3;
}

message GetV3ProjectsIdKeysKey_idRequest {
    // The ID of the project
    string id = 1;
    // The ID of the deploy key
    int32 key_id = 2;
}

message DeleteV3ProjectsIdKeysKey_idRequest {
    // The ID of the project
    string id = 1;
    // The ID of the deploy key
    int32 key_id = 2;
}

message DeleteV3ProjectsIdKeysKey_idDisableRequest {
    // The ID of the project
    string id = 1;
    // The ID of the deploy key
    int32 key_id = 2;
}

message PostV3ProjectsIdKeysKey_idEnableRequest {
    // The ID of the project
    string id = 1;
    // The ID of the deploy key
    int32 key_id = 2;
}

message GetV3ProjectsIdLabelsRequest {
    // The ID of a project
    string id = 1;
}

message PutV3ProjectsIdLabelsRequest {
    // The new color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)
    string color = 1;
    // The new description of label
    string description = 2;
    // The ID of a project
    string id = 3;
    // The name of the label to be updated
    string name = 4;
    // The new name of the label
    string new_name = 5;
    // The priority of the label
    int32 priority = 6;
}

message PostV3ProjectsIdLabelsRequest {
    // The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)
    string color = 1;
    // The description of label to be created
    string description = 2;
    // The ID of a project
    string id = 3;
    // The name of the label to be created
    string name = 4;
    // The priority of the label
    int32 priority = 5;
}

message DeleteV3ProjectsIdLabelsRequest {
    // The ID of a project
    string id = 1;
    // The name of the label to be deleted
    string name = 2;
}

message PostV3ProjectsIdLabelsSubscribable_idSubscriptionRequest {
    // The ID of a project
    string id = 1;
    // The ID of a resource
    string subscribable_id = 2;
}

message DeleteV3ProjectsIdLabelsSubscribable_idSubscriptionRequest {
    // The ID of a project
    string id = 1;
    // The ID of a resource
    string subscribable_id = 2;
}

message GetV3ProjectsIdMembersRequest {
    // The project ID
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // A query string to search for members
    string query = 4;
}

message PostV3ProjectsIdMembersRequest {
    // A valid access level (defaults: `30`, developer access level)
    int32 access_level = 1;
    // Date string in the format YEAR-MONTH-DAY
    string expires_at = 2;
    // The project ID
    string id = 3;
    // The user ID of the new member
    int32 user_id = 4;
}

message GetV3ProjectsIdMembersUser_idRequest {
    // The project ID
    string id = 1;
    // The user ID of the member
    int32 user_id = 2;
}

message PutV3ProjectsIdMembersUser_idRequest {
    // A valid access level
    int32 access_level = 1;
    // Date string in the format YEAR-MONTH-DAY
    string expires_at = 2;
    // The project ID
    string id = 3;
    // The user ID of the new member
    int32 user_id = 4;
}

message DeleteV3ProjectsIdMembersUser_idRequest {
    // The project ID
    string id = 1;
    // The user ID of the member
    int32 user_id = 2;
}

message GetV3ProjectsIdMerge_requestMerge_request_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a merge request
    int32 merge_request_id = 2;
}

message PutV3ProjectsIdMerge_requestMerge_request_idRequest {
    // The ID of a user to assign the merge request
    int32 assignee_id = 1;
    // The description of the merge request
    string description = 2;
    // The ID of a project
    string id = 3;
    // Comma-separated list of label names
    string labels = 4;
    int32 merge_request_id = 5;
    // The ID of a milestone to assign the merge request
    int32 milestone_id = 6;
    // Remove source branch when merging
    bool remove_source_branch = 7;
    // Status of the merge request
    enum PutV3ProjectsIdMerge_requestMerge_request_idRequest_State_event {
        PUTV3PROJECTSIDMERGE_REQUESTMERGE_REQUEST_IDREQUEST_STATE_EVENT_CLOSE = 0;
        PUTV3PROJECTSIDMERGE_REQUESTMERGE_REQUEST_IDREQUEST_STATE_EVENT_REOPEN = 1;
        PUTV3PROJECTSIDMERGE_REQUESTMERGE_REQUEST_IDREQUEST_STATE_EVENT_MERGE = 2;
    }
    PutV3ProjectsIdMerge_requestMerge_request_idRequest_State_event state_event = 8;
    // The target branch
    string target_branch = 9;
    // The title of the merge request
    string title = 10;
}

message PostV3ProjectsIdMerge_requestMerge_request_idCancel_merge_when_build_succeedsRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
}

message GetV3ProjectsIdMerge_requestMerge_request_idChangesRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
}

message GetV3ProjectsIdMerge_requestMerge_request_idCloses_issuesRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message GetV3ProjectsIdMerge_requestMerge_request_idCommentsRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message PostV3ProjectsIdMerge_requestMerge_request_idCommentsRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
    // The text of the comment
    string note = 3;
}

message GetV3ProjectsIdMerge_requestMerge_request_idCommitsRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
}

message PutV3ProjectsIdMerge_requestMerge_request_idMergeRequest {
    // The ID of a project
    string id = 1;
    // Custom merge commit message
    string merge_commit_message = 2;
    int32 merge_request_id = 3;
    // When true, this merge request will be merged when the pipeline succeeds
    bool merge_when_build_succeeds = 4;
    // When present, must have the HEAD SHA of the source branch
    string sha = 5;
    // When true, the source branch will be deleted if possible
    bool should_remove_source_branch = 6;
}

message PostV3ProjectsIdMerge_requestSubscribable_idSubscriptionRequest {
    // The ID of a project
    string id = 1;
    // The ID of a resource
    string subscribable_id = 2;
}

message DeleteV3ProjectsIdMerge_requestSubscribable_idSubscriptionRequest {
    // The ID of a project
    string id = 1;
    // The ID of a resource
    string subscribable_id = 2;
}

message GetV3ProjectsIdMerge_requestsRequest {
    // The ID of a project
    string id = 1;
    // The IID of the merge requests
    repeated int32 iid = 2;
    // Return merge requests ordered by `created_at` or `updated_at` fields.
    enum GetV3ProjectsIdMerge_requestsRequest_Order_by {
        GETV3PROJECTSIDMERGE_REQUESTSREQUEST_ORDER_BY_CREATED_AT = 0;
        GETV3PROJECTSIDMERGE_REQUESTSREQUEST_ORDER_BY_UPDATED_AT = 1;
    }
    GetV3ProjectsIdMerge_requestsRequest_Order_by order_by = 3;
    // Current page number
    int32 page = 4;
    // Number of items per page
    int32 per_page = 5;
    // Return merge requests sorted in `asc` or `desc` order.
    enum GetV3ProjectsIdMerge_requestsRequest_Sort {
        GETV3PROJECTSIDMERGE_REQUESTSREQUEST_SORT_ASC = 0;
        GETV3PROJECTSIDMERGE_REQUESTSREQUEST_SORT_DESC = 1;
    }
    GetV3ProjectsIdMerge_requestsRequest_Sort sort = 6;
    // Return opened, closed, merged, or all merge requests
    enum GetV3ProjectsIdMerge_requestsRequest_State {
        GETV3PROJECTSIDMERGE_REQUESTSREQUEST_STATE_OPENED = 0;
        GETV3PROJECTSIDMERGE_REQUESTSREQUEST_STATE_CLOSED = 1;
        GETV3PROJECTSIDMERGE_REQUESTSREQUEST_STATE_MERGED = 2;
        GETV3PROJECTSIDMERGE_REQUESTSREQUEST_STATE_ALL = 3;
    }
    GetV3ProjectsIdMerge_requestsRequest_State state = 7;
}

message PostV3ProjectsIdMerge_requestsRequest {
    // The ID of a user to assign the merge request
    int32 assignee_id = 1;
    // The description of the merge request
    string description = 2;
    // The ID of a project
    string id = 3;
    // Comma-separated list of label names
    string labels = 4;
    // The ID of a milestone to assign the merge request
    int32 milestone_id = 5;
    // Remove source branch when merging
    bool remove_source_branch = 6;
    // The source branch
    string source_branch = 7;
    // The target branch
    string target_branch = 8;
    // The target project of the merge request defaults to the :id of the project
    int32 target_project_id = 9;
    // The title of the merge request
    string title = 10;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
}

message PutV3ProjectsIdMerge_requestsMerge_request_idRequest {
    // The ID of a user to assign the merge request
    int32 assignee_id = 1;
    // The description of the merge request
    string description = 2;
    // The ID of a project
    string id = 3;
    // Comma-separated list of label names
    string labels = 4;
    int32 merge_request_id = 5;
    // The ID of a milestone to assign the merge request
    int32 milestone_id = 6;
    // Remove source branch when merging
    bool remove_source_branch = 7;
    // Status of the merge request
    enum PutV3ProjectsIdMerge_requestsMerge_request_idRequest_State_event {
        PUTV3PROJECTSIDMERGE_REQUESTSMERGE_REQUEST_IDREQUEST_STATE_EVENT_CLOSE = 0;
        PUTV3PROJECTSIDMERGE_REQUESTSMERGE_REQUEST_IDREQUEST_STATE_EVENT_REOPEN = 1;
        PUTV3PROJECTSIDMERGE_REQUESTSMERGE_REQUEST_IDREQUEST_STATE_EVENT_MERGE = 2;
    }
    PutV3ProjectsIdMerge_requestsMerge_request_idRequest_State_event state_event = 8;
    // The target branch
    string target_branch = 9;
    // The title of the merge request
    string title = 10;
}

message DeleteV3ProjectsIdMerge_requestsMerge_request_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a merge request
    int32 merge_request_id = 2;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idAdd_spent_timeRequest {
    // The duration to be parsed
    string duration = 1;
    // The ID of a project
    string id = 2;
    // The ID of a project merge_request
    int32 merge_request_id = 3;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idAward_emojiRequest {
    // The ID of a project
    string id = 1;
    // The ID of an Issue, Merge Request or Snippet
    int32 merge_request_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idAward_emojiRequest {
    int32 id = 1;
    int32 merge_request_id = 2;
    // The name of a award_emoji (without colons)
    string name = 3;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idAward_emojiAward_idRequest {
    // The ID of the award
    int32 award_id = 1;
    int32 id = 2;
    int32 merge_request_id = 3;
}

message DeleteV3ProjectsIdMerge_requestsMerge_request_idAward_emojiAward_idRequest {
    // The ID of an award emoji
    int32 award_id = 1;
    int32 id = 2;
    int32 merge_request_id = 3;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idCancel_merge_when_build_succeedsRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idChangesRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idCloses_issuesRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idCommentsRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idCommentsRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
    // The text of the comment
    string note = 3;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idCommitsRequest {
    // The ID of a project
    string id = 1;
    int32 merge_request_id = 2;
}

message PutV3ProjectsIdMerge_requestsMerge_request_idMergeRequest {
    // The ID of a project
    string id = 1;
    // Custom merge commit message
    string merge_commit_message = 2;
    int32 merge_request_id = 3;
    // When true, this merge request will be merged when the pipeline succeeds
    bool merge_when_build_succeeds = 4;
    // When present, must have the HEAD SHA of the source branch
    string sha = 5;
    // When true, the source branch will be deleted if possible
    bool should_remove_source_branch = 6;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiRequest {
    int32 id = 1;
    int32 merge_request_id = 2;
    int32 note_id = 3;
    // Current page number
    int32 page = 4;
    // Number of items per page
    int32 per_page = 5;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiRequest {
    int32 id = 1;
    int32 merge_request_id = 2;
    // The name of a award_emoji (without colons)
    string name = 3;
    int32 note_id = 4;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiAward_idRequest {
    // The ID of the award
    int32 award_id = 1;
    int32 id = 2;
    int32 merge_request_id = 3;
    int32 note_id = 4;
}

message DeleteV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiAward_idRequest {
    // The ID of an award emoji
    int32 award_id = 1;
    int32 id = 2;
    int32 merge_request_id = 3;
    int32 note_id = 4;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idReset_spent_timeRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project merge_request
    int32 merge_request_id = 2;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idReset_time_estimateRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project merge_request
    int32 merge_request_id = 2;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idTime_estimateRequest {
    // The duration to be parsed
    string duration = 1;
    // The ID of a project
    string id = 2;
    // The ID of a project merge_request
    int32 merge_request_id = 3;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idTime_statsRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project merge_request
    int32 merge_request_id = 2;
}

message PostV3ProjectsIdMerge_requestsMerge_request_idTodoRequest {
    // The ID of a project
    string id = 1;
    // The ID of an issuable
    int32 merge_request_id = 2;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idVersionsRequest {
    // The ID of a project
    string id = 1;
    // The ID of a merge request
    int32 merge_request_id = 2;
}

message GetV3ProjectsIdMerge_requestsMerge_request_idVersionsVersion_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a merge request
    int32 merge_request_id = 2;
    // The ID of a merge request diff version
    int32 version_id = 3;
}

message GetV3ProjectsIdMerge_requestsNoteable_idNotesRequest {
    // The ID of a project
    string id = 1;
    // The ID of the noteable
    int32 noteable_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message PostV3ProjectsIdMerge_requestsNoteable_idNotesRequest {
    // The content of a note
    string body = 1;
    // The creation date of the note
    string created_at = 2;
    // The ID of a project
    string id = 3;
    // The ID of the noteable
    int32 noteable_id = 4;
}

message GetV3ProjectsIdMerge_requestsNoteable_idNotesNote_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a note
    int32 note_id = 2;
    // The ID of the noteable
    int32 noteable_id = 3;
}

message PutV3ProjectsIdMerge_requestsNoteable_idNotesNote_idRequest {
    // The content of a note
    string body = 1;
    // The ID of a project
    string id = 2;
    // The ID of a note
    int32 note_id = 3;
    // The ID of the noteable
    int32 noteable_id = 4;
}

message DeleteV3ProjectsIdMerge_requestsNoteable_idNotesNote_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a note
    int32 note_id = 2;
    // The ID of the noteable
    int32 noteable_id = 3;
}

message PostV3ProjectsIdMerge_requestsSubscribable_idSubscriptionRequest {
    // The ID of a project
    string id = 1;
    // The ID of a resource
    string subscribable_id = 2;
}

message DeleteV3ProjectsIdMerge_requestsSubscribable_idSubscriptionRequest {
    // The ID of a project
    string id = 1;
    // The ID of a resource
    string subscribable_id = 2;
}

message GetV3ProjectsIdMilestonesRequest {
    // The ID of a project
    string id = 1;
    // The IID of the milestone
    repeated int32 iid = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
    // Return "active", "closed", or "all" milestones
    enum GetV3ProjectsIdMilestonesRequest_State {
        GETV3PROJECTSIDMILESTONESREQUEST_STATE_ACTIVE = 0;
        GETV3PROJECTSIDMILESTONESREQUEST_STATE_CLOSED = 1;
        GETV3PROJECTSIDMILESTONESREQUEST_STATE_ALL = 2;
    }
    GetV3ProjectsIdMilestonesRequest_State state = 5;
}

message PostV3ProjectsIdMilestonesRequest {
    // The description of the milestone
    string description = 1;
    // The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)
    string due_date = 2;
    // The ID of a project
    string id = 3;
    // The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)
    string start_date = 4;
    // The title of the milestone
    string title = 5;
}

message GetV3ProjectsIdMilestonesMilestone_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project milestone
    int32 milestone_id = 2;
}

message PutV3ProjectsIdMilestonesMilestone_idRequest {
    // The description of the milestone
    string description = 1;
    // The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)
    string due_date = 2;
    // The ID of a project
    string id = 3;
    // The ID of a project milestone
    int32 milestone_id = 4;
    // The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)
    string start_date = 5;
    // The state event of the milestone
    enum PutV3ProjectsIdMilestonesMilestone_idRequest_State_event {
        PUTV3PROJECTSIDMILESTONESMILESTONE_IDREQUEST_STATE_EVENT_CLOSE = 0;
        PUTV3PROJECTSIDMILESTONESMILESTONE_IDREQUEST_STATE_EVENT_ACTIVATE = 1;
    }
    PutV3ProjectsIdMilestonesMilestone_idRequest_State_event state_event = 6;
    // The title of the milestone
    string title = 7;
}

message GetV3ProjectsIdMilestonesMilestone_idIssuesRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project milestone
    int32 milestone_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message GetV3ProjectsIdNotification_settingsRequest {
    // The group ID or project ID or project NAMESPACE/PROJECT_NAME
    string id = 1;
}

message PutV3ProjectsIdNotification_settingsRequest {
    // Enable/disable this notification
    bool close_issue = 1;
    // Enable/disable this notification
    bool close_merge_request = 2;
    // Enable/disable this notification
    bool failed_pipeline = 3;
    // The group ID or project ID or project NAMESPACE/PROJECT_NAME
    string id = 4;
    // The project notification level
    string level = 5;
    // Enable/disable this notification
    bool merge_merge_request = 6;
    // Enable/disable this notification
    bool new_issue = 7;
    // Enable/disable this notification
    bool new_merge_request = 8;
    // Enable/disable this notification
    bool new_note = 9;
    // Enable/disable this notification
    bool reassign_issue = 10;
    // Enable/disable this notification
    bool reassign_merge_request = 11;
    // Enable/disable this notification
    bool reopen_issue = 12;
    // Enable/disable this notification
    bool reopen_merge_request = 13;
    // Enable/disable this notification
    bool success_pipeline = 14;
}

message PostV3ProjectsIdPipelineRequest {
    // The project ID
    string id = 1;
    // Reference
    string ref = 2;
}

message GetV3ProjectsIdPipelinesRequest {
    // The project ID
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // Either running, branches, or tags
    enum GetV3ProjectsIdPipelinesRequest_Scope {
        GETV3PROJECTSIDPIPELINESREQUEST_SCOPE_RUNNING = 0;
        GETV3PROJECTSIDPIPELINESREQUEST_SCOPE_BRANCHES = 1;
        GETV3PROJECTSIDPIPELINESREQUEST_SCOPE_TAGS = 2;
    }
    GetV3ProjectsIdPipelinesRequest_Scope scope = 4;
}

message GetV3ProjectsIdPipelinesPipeline_idRequest {
    // The project ID
    string id = 1;
    // The pipeline ID
    int32 pipeline_id = 2;
}

message PostV3ProjectsIdPipelinesPipeline_idCancelRequest {
    // The project ID
    string id = 1;
    // The pipeline ID
    int32 pipeline_id = 2;
}

message PostV3ProjectsIdPipelinesPipeline_idRetryRequest {
    // The project ID
    string id = 1;
    // The pipeline ID
    int32 pipeline_id = 2;
}

message GetV3ProjectsIdRepositoryArchiveRequest {
    // The archive format
    string format = 1;
    // The ID of a project
    string id = 2;
    // The commit sha of the archive to be downloaded
    string sha = 3;
}

message GetV3ProjectsIdRepositoryBlobsShaRequest {
    // The path to the file to display
    string filepath = 1;
    // The ID of a project
    string id = 2;
    // The commit, branch name, or tag name
    string sha = 3;
}

message GetV3ProjectsIdRepositoryBranchesRequest {
    // The ID of a project
    string id = 1;
}

message PostV3ProjectsIdRepositoryBranchesRequest {
    // The name of the branch
    string branch_name = 1;
    // The ID of a project
    string id = 2;
    // Create branch from commit sha or existing branch
    string ref = 3;
}

message GetV3ProjectsIdRepositoryBranchesBranchRequest {
    // The name of the branch
    string branch = 1;
    // The ID of a project
    string id = 2;
}

message DeleteV3ProjectsIdRepositoryBranchesBranchRequest {
    // The name of the branch
    string branch = 1;
    // The ID of a project
    string id = 2;
}

message PutV3ProjectsIdRepositoryBranchesBranchProtectRequest {
    // The name of the branch
    string branch = 1;
    // Flag if developers can merge to that branch
    bool developers_can_merge = 2;
    // Flag if developers can push to that branch
    bool developers_can_push = 3;
    // The ID of a project
    string id = 4;
}

message PutV3ProjectsIdRepositoryBranchesBranchUnprotectRequest {
    // The name of the branch
    string branch = 1;
    // The ID of a project
    string id = 2;
}

message GetV3ProjectsIdRepositoryCommitsRequest {
    // The ID of a project
    string id = 1;
    // The page for pagination
    int32 page = 2;
    // The file path
    string path = 3;
    // The number of results per page
    int32 per_page = 4;
    // The name of a repository branch or tag, if not given the default branch is used
    string ref_name = 5;
    // Only commits after or in this date will be returned
    string since = 6;
    // Only commits before or in this date will be returned
    string until = 7;
}

message PostV3ProjectsIdRepositoryCommitsRequest {
    // Actions to perform in commit
    message Action {
    }
    repeated Action actions = 1;
    // Author email for commit
    string author_email = 2;
    // Author name for commit
    string author_name = 3;
    // The name of branch
    string branch_name = 4;
    // Commit message
    string commit_message = 5;
    // The ID of a project
    string id = 6;
}

message GetV3ProjectsIdRepositoryCommitsShaRequest {
    // The ID of a project
    string id = 1;
    // A commit sha, or the name of a branch or tag
    string sha = 2;
}

message GetV3ProjectsIdRepositoryCommitsShaBlobRequest {
    // The path to the file to display
    string filepath = 1;
    // The ID of a project
    string id = 2;
    // The commit, branch name, or tag name
    string sha = 3;
}

message GetV3ProjectsIdRepositoryCommitsShaBuildsRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // The scope of builds to show
    enum GetV3ProjectsIdRepositoryCommitsShaBuildsRequest_Scope {
        GETV3PROJECTSIDREPOSITORYCOMMITSSHABUILDSREQUEST_SCOPE_PENDING = 0;
        GETV3PROJECTSIDREPOSITORYCOMMITSSHABUILDSREQUEST_SCOPE_RUNNING = 1;
        GETV3PROJECTSIDREPOSITORYCOMMITSSHABUILDSREQUEST_SCOPE_FAILED = 2;
        GETV3PROJECTSIDREPOSITORYCOMMITSSHABUILDSREQUEST_SCOPE_SUCCESS = 3;
        GETV3PROJECTSIDREPOSITORYCOMMITSSHABUILDSREQUEST_SCOPE_CANCELED = 4;
    }
    GetV3ProjectsIdRepositoryCommitsShaBuildsRequest_Scope scope = 4;
    // The SHA id of a commit
    string sha = 5;
}

message PostV3ProjectsIdRepositoryCommitsShaCherry_pickRequest {
    // The name of the branch
    string branch = 1;
    // The ID of a project
    string id = 2;
    // A commit sha to be cherry picked
    string sha = 3;
}

message GetV3ProjectsIdRepositoryCommitsShaCommentsRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // A commit sha, or the name of a branch or tag
    string sha = 4;
}

message PostV3ProjectsIdRepositoryCommitsShaCommentsRequest {
    // The ID of a project
    string id = 1;
    // The line number
    int32 line = 2;
    // The type of the line
    enum PostV3ProjectsIdRepositoryCommitsShaCommentsRequest_Line_type {
        POSTV3PROJECTSIDREPOSITORYCOMMITSSHACOMMENTSREQUEST_LINE_TYPE_NEW = 0;
        POSTV3PROJECTSIDREPOSITORYCOMMITSSHACOMMENTSREQUEST_LINE_TYPE_OLD = 1;
    }
    PostV3ProjectsIdRepositoryCommitsShaCommentsRequest_Line_type line_type = 3;
    // The text of the comment
    string note = 4;
    // The file path
    string path = 5;
    // The commit's SHA
    string sha = 6;
}

message GetV3ProjectsIdRepositoryCommitsShaDiffRequest {
    // The ID of a project
    string id = 1;
    // A commit sha, or the name of a branch or tag
    string sha = 2;
}

message GetV3ProjectsIdRepositoryCommitsShaStatusesRequest {
    // Show all statuses, default: false
    string all = 1;
    // The ID of a project
    string id = 2;
    // The name
    string name = 3;
    // Current page number
    int32 page = 4;
    // Number of items per page
    int32 per_page = 5;
    // The ref
    string ref = 6;
    // The commit hash
    string sha = 7;
    // The stage
    string stage = 8;
}

message GetV3ProjectsIdRepositoryCompareRequest {
    // The commit, branch name, or tag name to start comparison
    string from = 1;
    // The ID of a project
    string id = 2;
    // The commit, branch name, or tag name to stop comparison
    string to = 3;
}

message GetV3ProjectsIdRepositoryContributorsRequest {
    // The ID of a project
    string id = 1;
}

message GetV3ProjectsIdRepositoryFilesRequest {
    // The path to the file. Ex. lib/class.rb
    string file_path = 1;
    // The project ID
    string id = 2;
    // The name of branch, tag, or commit
    string ref = 3;
}

message PutV3ProjectsIdRepositoryFilesRequest {
    // The email of the author
    string author_email = 1;
    // The name of the author
    string author_name = 2;
    // The name of branch
    string branch_name = 3;
    // Commit Message
    string commit_message = 4;
    // File content
    string content = 5;
    // File encoding
    enum PutV3ProjectsIdRepositoryFilesRequest_Encoding {
        PUTV3PROJECTSIDREPOSITORYFILESREQUEST_ENCODING_BASE64 = 0;
    }
    PutV3ProjectsIdRepositoryFilesRequest_Encoding encoding = 6;
    // The path to new file. Ex. lib/class.rb
    string file_path = 7;
    // The project ID
    string id = 8;
}

message PostV3ProjectsIdRepositoryFilesRequest {
    // The email of the author
    string author_email = 1;
    // The name of the author
    string author_name = 2;
    // The name of branch
    string branch_name = 3;
    // Commit Message
    string commit_message = 4;
    // File content
    string content = 5;
    // File encoding
    enum PostV3ProjectsIdRepositoryFilesRequest_Encoding {
        POSTV3PROJECTSIDREPOSITORYFILESREQUEST_ENCODING_BASE64 = 0;
    }
    PostV3ProjectsIdRepositoryFilesRequest_Encoding encoding = 6;
    // The path to new file. Ex. lib/class.rb
    string file_path = 7;
    // The project ID
    string id = 8;
}

message DeleteV3ProjectsIdRepositoryFilesRequest {
    // The email of the author
    string author_email = 1;
    // The name of the author
    string author_name = 2;
    // The name of branch
    string branch_name = 3;
    // Commit Message
    string commit_message = 4;
    // The path to new file. Ex. lib/class.rb
    string file_path = 5;
    // The project ID
    string id = 6;
}

message DeleteV3ProjectsIdRepositoryMerged_branchesRequest {
    // The ID of a project
    string id = 1;
}

message GetV3ProjectsIdRepositoryRaw_blobsShaRequest {
    // The ID of a project
    string id = 1;
    // The commit, branch name, or tag name
    string sha = 2;
}

message GetV3ProjectsIdRepositoryTagsRequest {
    // The ID of a project
    string id = 1;
}

message PostV3ProjectsIdRepositoryTagsRequest {
    // The ID of a project
    string id = 1;
    // Specifying a message creates an annotated tag
    string message = 2;
    // The commit sha or branch name
    string ref = 3;
    // Specifying release notes stored in the GitLab database
    string release_description = 4;
    // The name of the tag
    string tag_name = 5;
}

message GetV3ProjectsIdRepositoryTagsTag_nameRequest {
    // The ID of a project
    string id = 1;
    // The name of the tag
    string tag_name = 2;
}

message DeleteV3ProjectsIdRepositoryTagsTag_nameRequest {
    // The ID of a project
    string id = 1;
    // The name of the tag
    string tag_name = 2;
}

message PutV3ProjectsIdRepositoryTagsTag_nameReleaseRequest {
    // Release notes with markdown support
    string description = 1;
    // The ID of a project
    string id = 2;
    // The name of the tag
    string tag_name = 3;
}

message PostV3ProjectsIdRepositoryTagsTag_nameReleaseRequest {
    // Release notes with markdown support
    string description = 1;
    // The ID of a project
    string id = 2;
    // The name of the tag
    string tag_name = 3;
}

message GetV3ProjectsIdRepositoryTreeRequest {
    // The ID of a project
    string id = 1;
    // The path of the tree
    string path = 2;
    // Used to get a recursive tree
    bool recursive = 3;
    // The name of a repository branch or tag, if not given the default branch is used
    string ref_name = 4;
}

message GetV3ProjectsIdRunnersRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // The scope of specific runners to show
    enum GetV3ProjectsIdRunnersRequest_Scope {
        GETV3PROJECTSIDRUNNERSREQUEST_SCOPE_ACTIVE = 0;
        GETV3PROJECTSIDRUNNERSREQUEST_SCOPE_PAUSED = 1;
        GETV3PROJECTSIDRUNNERSREQUEST_SCOPE_ONLINE = 2;
        GETV3PROJECTSIDRUNNERSREQUEST_SCOPE_SPECIFIC = 3;
        GETV3PROJECTSIDRUNNERSREQUEST_SCOPE_SHARED = 4;
    }
    GetV3ProjectsIdRunnersRequest_Scope scope = 4;
}

message PostV3ProjectsIdRunnersRequest {
    // The ID of a project
    string id = 1;
    // The ID of the runner
    int32 runner_id = 2;
}

message DeleteV3ProjectsIdRunnersRunner_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of the runner
    int32 runner_id = 2;
}

message PutV3ProjectsIdServicesAsanaRequest {
    // User API token
    string api_key = 1;
    int32 id = 2;
    // Event will be triggered by a push to the repository
    string push_events = 3;
    // Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches
    string restrict_to_branch = 4;
}

message PutV3ProjectsIdServicesAssemblaRequest {
    int32 id = 1;
    // Event will be triggered by a push to the repository
    string push_events = 2;
    // Subdomain setting
    string subdomain = 3;
    // The authentication token
    string token = 4;
}

message PutV3ProjectsIdServicesBambooRequest {
    // Bamboo root URL like https://bamboo.example.com
    string bamboo_url = 1;
    // Bamboo build plan key like
    string build_key = 2;
    int32 id = 3;
    // Passord of the user
    string password = 4;
    // Event will be triggered by a push to the repository
    string push_events = 5;
    // A user with API access, if applicable
    string username = 6;
}

message PutV3ProjectsIdServicesBugzillaRequest {
    // Description
    string description = 1;
    int32 id = 2;
    // Issues URL
    string issues_url = 3;
    // New issue URL
    string new_issue_url = 4;
    // Project URL
    string project_url = 5;
    // Event will be triggered by a push to the repository
    string push_events = 6;
    // Title
    string title = 7;
}

message PutV3ProjectsIdServicesBuildkiteRequest {
    // Enable SSL verification for communication
    bool enable_ssl_verification = 1;
    int32 id = 2;
    // The buildkite project URL
    string project_url = 3;
    // Event will be triggered by a push to the repository
    string push_events = 4;
    // Buildkite project GitLab token
    string token = 5;
}

message PutV3ProjectsIdServicesBuildsEmailRequest {
    // Add pusher to recipients list
    bool add_pusher = 1;
    // Event will be triggered when a build status changes
    string build_events = 2;
    int32 id = 3;
    // Notify only broken builds
    bool notify_only_broken_builds = 4;
    // Comma-separated list of recipient email addresses
    string recipients = 5;
}

message PutV3ProjectsIdServicesCampfireRequest {
    int32 id = 1;
    // Event will be triggered by a push to the repository
    string push_events = 2;
    // Campfire room
    string room = 3;
    // Campfire subdomain
    string subdomain = 4;
    // Campfire token
    string token = 5;
}

message PutV3ProjectsIdServicesCustomIssueTrackerRequest {
    // Description
    string description = 1;
    int32 id = 2;
    // Issues URL
    string issues_url = 3;
    // New issue URL
    string new_issue_url = 4;
    // Project URL
    string project_url = 5;
    // Event will be triggered by a push to the repository
    string push_events = 6;
    // Title
    string title = 7;
}

message PutV3ProjectsIdServicesDroneCiRequest {
    // Drone CI URL
    string drone_url = 1;
    // Enable SSL verification for communication
    bool enable_ssl_verification = 2;
    int32 id = 3;
    // Event will be triggered when a merge request is created/updated/merged
    string merge_request_events = 4;
    // Event will be triggered by a push to the repository
    string push_events = 5;
    // Event will be triggered when a new tag is pushed to the repository
    string tag_push_events = 6;
    // Drone CI token
    string token = 7;
}

message PutV3ProjectsIdServicesEmailsOnPushRequest {
    // Disable code diffs
    bool disable_diffs = 1;
    int32 id = 2;
    // Event will be triggered by a push to the repository
    string push_events = 3;
    // Comma-separated list of recipient email addresses
    string recipients = 4;
    // Send from committer
    bool send_from_committer_email = 5;
    // Event will be triggered when a new tag is pushed to the repository
    string tag_push_events = 6;
}

message PutV3ProjectsIdServicesExternalWikiRequest {
    // The URL of the external Wiki
    string external_wiki_url = 1;
    int32 id = 2;
}

message PutV3ProjectsIdServicesFlowdockRequest {
    int32 id = 1;
    // Event will be triggered by a push to the repository
    string push_events = 2;
    // Flowdock token
    string token = 3;
}

message PutV3ProjectsIdServicesGemnasiumRequest {
    // Your personal API key on gemnasium.com
    string api_key = 1;
    int32 id = 2;
    // Event will be triggered by a push to the repository
    string push_events = 3;
    // The project's slug on gemnasium.com
    string token = 4;
}

message PutV3ProjectsIdServicesHipchatRequest {
    // Leave blank for default (v2)
    string api_version = 1;
    // Event will be triggered when a build status changes
    string build_events = 2;
    // The room color
    string color = 3;
    // Event will be triggered when a confidential issue is created/updated/closed
    string confidential_issue_events = 4;
    int32 id = 5;
    // Event will be triggered when an issue is created/updated/closed
    string issue_events = 6;
    // Event will be triggered when a merge request is created/updated/merged
    string merge_request_events = 7;
    // Event will be triggered when someone adds a comment
    string note_events = 8;
    // Enable notifications
    bool notify = 9;
    // Event will be triggered by a push to the repository
    string push_events = 10;
    // The room name or ID
    string room = 11;
    // Leave blank for default. https://hipchat.example.com
    string server = 12;
    // Event will be triggered when a new tag is pushed to the repository
    string tag_push_events = 13;
    // The room token
    string token = 14;
}

message PutV3ProjectsIdServicesIrkerRequest {
    // Colorize messages
    bool colorize_messages = 1;
    // Default: irc://irc.network.net:6697
    string default_irc_uri = 2;
    int32 id = 3;
    // Event will be triggered by a push to the repository
    string push_events = 4;
    // Recipients/channels separated by whitespaces
    string recipients = 5;
    // Server host. Default localhost
    string server_host = 6;
    // Server port. Default 6659
    int32 server_port = 7;
}

message PutV3ProjectsIdServicesJiraRequest {
    // Event will be triggered when a commit is created/updated
    string commit_events = 1;
    int32 id = 2;
    // The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`
    int32 jira_issue_transition_id = 3;
    // Event will be triggered when a merge request is created/updated/merged
    string merge_request_events = 4;
    // The password of the user created to be used with GitLab/JIRA
    string password = 5;
    // The short identifier for your JIRA project, all uppercase, e.g., PROJ
    string project_key = 6;
    // The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com
    string url = 7;
    // The username of the user created to be used with GitLab/JIRA
    string username = 8;
}

message PutV3ProjectsIdServicesKubernetesRequest {
    // The URL to the Kubernetes cluster API, e.g., https://kubernetes.example.com
    string api_url = 1;
    // A custom certificate authority bundle to verify the Kubernetes cluster with (PEM format)
    string ca_pem = 2;
    int32 id = 3;
    // The Kubernetes namespace to use
    string namespace = 4;
    // The service token to authenticate against the Kubernetes cluster with
    string token = 5;
}

message PutV3ProjectsIdServicesMattermostRequest {
    // Event will be triggered when a build status changes
    string build_events = 1;
    // Event will be triggered when a confidential issue is created/updated/closed
    string confidential_issue_events = 2;
    int32 id = 3;
    // Event will be triggered when an issue is created/updated/closed
    string issue_events = 4;
    // Event will be triggered when a merge request is created/updated/merged
    string merge_request_events = 5;
    // Event will be triggered when someone adds a comment
    string note_events = 6;
    string pipeline_events = 7;
    // Event will be triggered by a push to the repository
    string push_events = 8;
    // Event will be triggered when a new tag is pushed to the repository
    string tag_push_events = 9;
    // The Mattermost webhook. e.g. http://mattermost_host/hooks/...
    string webhook = 10;
    // Event will be triggered when a wiki page is created/updated
    string wiki_page_events = 11;
}

message PutV3ProjectsIdServicesMattermostSlashCommandsRequest {
    int32 id = 1;
    // The Mattermost token
    string token = 2;
}

message PostV3ProjectsIdServicesMattermost_slash_commandsTriggerRequest {
    // The ID of a project
    string id = 1;
    // The Mattermost token
    string token = 2;
}

message PutV3ProjectsIdServicesPipelinesEmailRequest {
    int32 id = 1;
    // Notify only broken builds
    bool notify_only_broken_builds = 2;
    string pipeline_events = 3;
    // Comma-separated list of recipient email addresses
    string recipients = 4;
}

message PutV3ProjectsIdServicesPivotaltrackerRequest {
    int32 id = 1;
    // Event will be triggered by a push to the repository
    string push_events = 2;
    // Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches.
    string restrict_to_branch = 3;
    // The Pivotaltracker token
    string token = 4;
}

message PutV3ProjectsIdServicesPushoverRequest {
    // The application key
    string api_key = 1;
    // Leave blank for all active devices
    string device = 2;
    int32 id = 3;
    // The priority
    string priority = 4;
    // Event will be triggered by a push to the repository
    string push_events = 5;
    // The sound of the notification
    string sound = 6;
    // The user key
    string user_key = 7;
}

message PutV3ProjectsIdServicesRedmineRequest {
    // The description of the tracker
    string description = 1;
    int32 id = 2;
    // The issues URL
    string issues_url = 3;
    // The new issue URL
    string new_issue_url = 4;
    // The project URL
    string project_url = 5;
    // Event will be triggered by a push to the repository
    string push_events = 6;
}

message PutV3ProjectsIdServicesSlackRequest {
    // Event will be triggered when a build status changes
    string build_events = 1;
    // The channel name
    string channel = 2;
    // Event will be triggered when a confidential issue is created/updated/closed
    string confidential_issue_events = 3;
    int32 id = 4;
    // Event will be triggered when an issue is created/updated/closed
    string issue_events = 5;
    // Event will be triggered when a merge request is created/updated/merged
    string merge_request_events = 6;
    // The user name
    string new_issue_url = 7;
    // Event will be triggered when someone adds a comment
    string note_events = 8;
    string pipeline_events = 9;
    // Event will be triggered by a push to the repository
    string push_events = 10;
    // Event will be triggered when a new tag is pushed to the repository
    string tag_push_events = 11;
    // The Slack webhook. e.g. https://hooks.slack.com/services/...
    string webhook = 12;
    // Event will be triggered when a wiki page is created/updated
    string wiki_page_events = 13;
}

message PutV3ProjectsIdServicesSlackSlashCommandsRequest {
    int32 id = 1;
    // The Slack token
    string token = 2;
}

message PostV3ProjectsIdServicesSlack_slash_commandsTriggerRequest {
    // The ID of a project
    string id = 1;
    // The Slack token
    string token = 2;
}

message PutV3ProjectsIdServicesTeamcityRequest {
    // Build configuration ID
    string build_type = 1;
    int32 id = 2;
    // The password of the user
    string password = 3;
    // Event will be triggered by a push to the repository
    string push_events = 4;
    // TeamCity root URL like https://teamcity.example.com
    string teamcity_url = 5;
    // A user with permissions to trigger a manual build
    string username = 6;
}

message GetV3ProjectsIdServicesService_slugRequest {
    int32 id = 1;
    // The name of the service
    enum GetV3ProjectsIdServicesService_slugRequest_Service_slug {
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_ASANA = 0;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_ASSEMBLA = 1;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_BAMBOO = 2;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_BUGZILLA = 3;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_BUILDKITE = 4;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_BUILDSEMAIL = 5;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_CAMPFIRE = 6;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_CUSTOMISSUETRACKER = 7;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_DRONECI = 8;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_EMAILSONPUSH = 9;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_EXTERNALWIKI = 10;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_FLOWDOCK = 11;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_GEMNASIUM = 12;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_HIPCHAT = 13;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_IRKER = 14;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_JIRA = 15;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_KUBERNETES = 16;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_MATTERMOSTSLASHCOMMANDS = 17;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_SLACKSLASHCOMMANDS = 18;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_PIPELINESEMAIL = 19;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_PIVOTALTRACKER = 20;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_PUSHOVER = 21;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_REDMINE = 22;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_SLACK = 23;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_MATTERMOST = 24;
        GETV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_TEAMCITY = 25;
    }
    GetV3ProjectsIdServicesService_slugRequest_Service_slug service_slug = 2;
}

message DeleteV3ProjectsIdServicesService_slugRequest {
    int32 id = 1;
    // The name of the service
    enum DeleteV3ProjectsIdServicesService_slugRequest_Service_slug {
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_ASANA = 0;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_ASSEMBLA = 1;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_BAMBOO = 2;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_BUGZILLA = 3;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_BUILDKITE = 4;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_BUILDSEMAIL = 5;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_CAMPFIRE = 6;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_CUSTOMISSUETRACKER = 7;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_DRONECI = 8;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_EMAILSONPUSH = 9;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_EXTERNALWIKI = 10;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_FLOWDOCK = 11;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_GEMNASIUM = 12;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_HIPCHAT = 13;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_IRKER = 14;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_JIRA = 15;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_KUBERNETES = 16;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_MATTERMOSTSLASHCOMMANDS = 17;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_SLACKSLASHCOMMANDS = 18;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_PIPELINESEMAIL = 19;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_PIVOTALTRACKER = 20;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_PUSHOVER = 21;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_REDMINE = 22;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_SLACK = 23;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_MATTERMOST = 24;
        DELETEV3PROJECTSIDSERVICESSERVICE_SLUGREQUEST_SERVICE_SLUG_TEAMCITY = 25;
    }
    DeleteV3ProjectsIdServicesService_slugRequest_Service_slug service_slug = 2;
}

message PostV3ProjectsIdShareRequest {
    // Share expiration date
    string expires_at = 1;
    // The group access level
    int32 group_access = 2;
    // The ID of a group
    int32 group_id = 3;
    // The ID of a project
    string id = 4;
}

message DeleteV3ProjectsIdShareGroup_idRequest {
    // The ID of the group
    int32 group_id = 1;
    // The ID of a project
    string id = 2;
}

message GetV3ProjectsIdSnippetsRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message PostV3ProjectsIdSnippetsRequest {
    // The content of the snippet
    string code = 1;
    // The file name of the snippet
    string file_name = 2;
    // The ID of a project
    string id = 3;
    // The title of the snippet
    string title = 4;
    // The visibility level of the snippet
    int32 visibility_level = 5;
}

message GetV3ProjectsIdSnippetsNoteable_idNotesRequest {
    // The ID of a project
    string id = 1;
    // The ID of the noteable
    int32 noteable_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
}

message PostV3ProjectsIdSnippetsNoteable_idNotesRequest {
    // The content of a note
    string body = 1;
    // The creation date of the note
    string created_at = 2;
    // The ID of a project
    string id = 3;
    // The ID of the noteable
    int32 noteable_id = 4;
}

message GetV3ProjectsIdSnippetsNoteable_idNotesNote_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a note
    int32 note_id = 2;
    // The ID of the noteable
    int32 noteable_id = 3;
}

message PutV3ProjectsIdSnippetsNoteable_idNotesNote_idRequest {
    // The content of a note
    string body = 1;
    // The ID of a project
    string id = 2;
    // The ID of a note
    int32 note_id = 3;
    // The ID of the noteable
    int32 noteable_id = 4;
}

message DeleteV3ProjectsIdSnippetsNoteable_idNotesNote_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a note
    int32 note_id = 2;
    // The ID of the noteable
    int32 noteable_id = 3;
}

message GetV3ProjectsIdSnippetsSnippet_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project snippet
    int32 snippet_id = 2;
}

message PutV3ProjectsIdSnippetsSnippet_idRequest {
    // The content of the snippet
    string code = 1;
    // The file name of the snippet
    string file_name = 2;
    // The ID of a project
    string id = 3;
    // The ID of a project snippet
    int32 snippet_id = 4;
    // The title of the snippet
    string title = 5;
    // The visibility level of the snippet
    int32 visibility_level = 6;
}

message DeleteV3ProjectsIdSnippetsSnippet_idRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project snippet
    int32 snippet_id = 2;
}

message GetV3ProjectsIdSnippetsSnippet_idAward_emojiRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // The ID of an Issue, Merge Request or Snippet
    int32 snippet_id = 4;
}

message PostV3ProjectsIdSnippetsSnippet_idAward_emojiRequest {
    int32 id = 1;
    // The name of a award_emoji (without colons)
    string name = 2;
    int32 snippet_id = 3;
}

message GetV3ProjectsIdSnippetsSnippet_idAward_emojiAward_idRequest {
    // The ID of the award
    int32 award_id = 1;
    int32 id = 2;
    int32 snippet_id = 3;
}

message DeleteV3ProjectsIdSnippetsSnippet_idAward_emojiAward_idRequest {
    // The ID of an award emoji
    int32 award_id = 1;
    int32 id = 2;
    int32 snippet_id = 3;
}

message GetV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiRequest {
    int32 id = 1;
    int32 note_id = 2;
    // Current page number
    int32 page = 3;
    // Number of items per page
    int32 per_page = 4;
    int32 snippet_id = 5;
}

message PostV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiRequest {
    int32 id = 1;
    // The name of a award_emoji (without colons)
    string name = 2;
    int32 note_id = 3;
    int32 snippet_id = 4;
}

message GetV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiAward_idRequest {
    // The ID of the award
    int32 award_id = 1;
    int32 id = 2;
    int32 note_id = 3;
    int32 snippet_id = 4;
}

message DeleteV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiAward_idRequest {
    // The ID of an award emoji
    int32 award_id = 1;
    int32 id = 2;
    int32 note_id = 3;
    int32 snippet_id = 4;
}

message GetV3ProjectsIdSnippetsSnippet_idRawRequest {
    // The ID of a project
    string id = 1;
    // The ID of a project snippet
    int32 snippet_id = 2;
}

message PostV3ProjectsIdStarRequest {
    // The ID of a project
    string id = 1;
}

message DeleteV3ProjectsIdStarRequest {
    // The ID of a project
    string id = 1;
}

message PostV3ProjectsIdStatusesShaRequest {
    // A string label to differentiate this status from the status of other systems. Default: "default"
    string context = 1;
    // A short description of the status
    string description = 2;
    // The ID of a project
    string id = 3;
    // A string label to differentiate this status from the status of other systems. Default: "default"
    string name = 4;
    // The ref
    string ref = 5;
    // The commit hash
    string sha = 6;
    // The state of the status
    enum PostV3ProjectsIdStatusesShaRequest_State {
        POSTV3PROJECTSIDSTATUSESSHAREQUEST_STATE_PENDING = 0;
        POSTV3PROJECTSIDSTATUSESSHAREQUEST_STATE_RUNNING = 1;
        POSTV3PROJECTSIDSTATUSESSHAREQUEST_STATE_SUCCESS = 2;
        POSTV3PROJECTSIDSTATUSESSHAREQUEST_STATE_FAILED = 3;
        POSTV3PROJECTSIDSTATUSESSHAREQUEST_STATE_CANCELED = 4;
    }
    PostV3ProjectsIdStatusesShaRequest_State state = 7;
    // The target URL to associate with this status
    string target_url = 8;
}

message GetV3ProjectsIdTriggersRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message PostV3ProjectsIdTriggersRequest {
    // The ID of a project
    string id = 1;
}

message GetV3ProjectsIdTriggersTokenRequest {
    // The ID of a project
    string id = 1;
    // The unique token of trigger
    string token = 2;
}

message DeleteV3ProjectsIdTriggersTokenRequest {
    // The ID of a project
    string id = 1;
    // The unique token of trigger
    string token = 2;
}

message PostV3ProjectsIdUnarchiveRequest {
    // The ID of a project
    string id = 1;
}

message PostV3ProjectsIdUploadsRequest {
    // The file to be uploaded
    ;
    // The ID of a project
    string id = 2;
}

message GetV3ProjectsIdUsersRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
    // Return list of users matching the search criteria
    string search = 4;
}

message GetV3ProjectsIdVariablesRequest {
    // The ID of a project
    string id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message PostV3ProjectsIdVariablesRequest {
    // The ID of a project
    string id = 1;
    // The key of the variable
    string key = 2;
    // The value of the variable
    string value = 3;
}

message GetV3ProjectsIdVariablesKeyRequest {
    // The ID of a project
    string id = 1;
    // The key of the variable
    string key = 2;
}

message PutV3ProjectsIdVariablesKeyRequest {
    // The ID of a project
    string id = 1;
    // The key of the variable
    string key = 2;
    // The value of the variable
    string value = 3;
}

message DeleteV3ProjectsIdVariablesKeyRequest {
    // The ID of a project
    string id = 1;
    // The key of the variable
    string key = 2;
}

message GetV3RunnersRequest {
    // Current page number
    int32 page = 1;
    // Number of items per page
    int32 per_page = 2;
    // The scope of specific runners to show
    enum GetV3RunnersRequest_Scope {
        GETV3RUNNERSREQUEST_SCOPE_ACTIVE = 0;
        GETV3RUNNERSREQUEST_SCOPE_PAUSED = 1;
        GETV3RUNNERSREQUEST_SCOPE_ONLINE = 2;
    }
    GetV3RunnersRequest_Scope scope = 3;
}

message GetV3RunnersAllRequest {
    // Current page number
    int32 page = 1;
    // Number of items per page
    int32 per_page = 2;
    // The scope of specific runners to show
    enum GetV3RunnersAllRequest_Scope {
        GETV3RUNNERSALLREQUEST_SCOPE_ACTIVE = 0;
        GETV3RUNNERSALLREQUEST_SCOPE_PAUSED = 1;
        GETV3RUNNERSALLREQUEST_SCOPE_ONLINE = 2;
        GETV3RUNNERSALLREQUEST_SCOPE_SPECIFIC = 3;
        GETV3RUNNERSALLREQUEST_SCOPE_SHARED = 4;
    }
    GetV3RunnersAllRequest_Scope scope = 3;
}

message GetV3RunnersIdRequest {
    // The ID of the runner
    int32 id = 1;
}

message PutV3RunnersIdRequest {
    // The state of a runner
    bool active = 1;
    // The description of the runner
    string description = 2;
    // The ID of the runner
    int32 id = 3;
    // Flag indicating the runner is locked
    bool locked = 4;
    // Flag indicating the runner can execute untagged jobs
    bool run_untagged = 5;
    // The list of tags for a runner
    repeated string tag_list = 6;
}

message DeleteV3RunnersIdRequest {
    // The ID of the runner
    int32 id = 1;
}

message PostV3SessionRequest {
    // The email of the user
    string email = 1;
    // The username
    string login = 2;
    // The password of the user
    string password = 3;
}

message GetV3SnippetsRequest {
    // Current page number
    int32 page = 1;
    // Number of items per page
    int32 per_page = 2;
}

message PostV3SnippetsRequest {
    // The content of a snippet
    string content = 1;
    // The name of a snippet file
    string file_name = 2;
    // The title of a snippet
    string title = 3;
    // The visibility level of the snippet
    int32 visibility_level = 4;
}

message GetV3SnippetsPublicRequest {
    // Current page number
    int32 page = 1;
    // Number of items per page
    int32 per_page = 2;
}

message GetV3SnippetsIdRequest {
    // The ID of a snippet
    int32 id = 1;
}

message PutV3SnippetsIdRequest {
    // The content of a snippet
    string content = 1;
    // The name of a snippet file
    string file_name = 2;
    // The ID of a snippet
    int32 id = 3;
    // The title of a snippet
    string title = 4;
    // The visibility level of the snippet
    int32 visibility_level = 5;
}

message DeleteV3SnippetsIdRequest {
    // The ID of a snippet
    int32 id = 1;
}

message GetV3SnippetsIdRawRequest {
    // The ID of a snippet
    int32 id = 1;
}

message GetV3TemplatesDockerfilesNameRequest {
    // The name of the template
    string name = 1;
}

message GetV3TemplatesGitignoresNameRequest {
    // The name of the template
    string name = 1;
}

message GetV3TemplatesGitlab_ci_ymlsNameRequest {
    // The name of the template
    string name = 1;
}

message GetV3TemplatesLicensesRequest {
    // If passed, returns only popular licenses
    bool popular = 1;
}

message GetV3TemplatesLicensesNameRequest {
    // The name of the template
    string name = 1;
}

message GetV3TodosRequest {
    // Current page number
    int32 page = 1;
    // Number of items per page
    int32 per_page = 2;
}

message DeleteV3TodosIdRequest {
    // The ID of the todo being marked as done
    int32 id = 1;
}

message PostV3UserEmailsRequest {
    // The new email
    string email = 1;
}

message GetV3UserEmailsEmail_idRequest {
    // The ID of the email
    int32 email_id = 1;
}

message DeleteV3UserEmailsEmail_idRequest {
    // The ID of the email
    int32 email_id = 1;
}

message PostV3UserKeysRequest {
    // The new SSH key
    string key = 1;
    // The title of the new SSH key
    string title = 2;
}

message GetV3UserKeysKey_idRequest {
    // The ID of the SSH key
    int32 key_id = 1;
}

message DeleteV3UserKeysKey_idRequest {
    // The ID of the SSH key
    int32 key_id = 1;
}

message GetV3UsersRequest {
    // Filters only active users
    bool active = 1;
    // Filters only blocked users
    bool blocked = 2;
    // Filters only external users
    bool external = 3;
    // Current page number
    int32 page = 4;
    // Number of items per page
    int32 per_page = 5;
    // Search for a username
    string search = 6;
    // Get a single user with a specific username
    string username = 7;
}

message PostV3UsersRequest {
    // Flag indicating the user is an administrator
    bool admin = 1;
    // The biography of the user
    string bio = 2;
    // Flag indicating the user can create groups
    bool can_create_group = 3;
    // Flag indicating the account needs to be confirmed
    bool confirm = 4;
    // The email of the user
    string email = 5;
    // The external authentication provider UID
    string extern_uid = 6;
    // Flag indicating the user is an external user
    bool external = 7;
    // The LinkedIn username
    string linkedin = 8;
    // The location of the user
    string location = 9;
    // The name of the user
    string name = 10;
    // The organization of the user
    string organization = 11;
    // The password of the new user
    string password = 12;
    // The number of projects a user can create
    int32 projects_limit = 13;
    // The external provider
    string provider = 14;
    // The Skype username
    string skype = 15;
    // The Twitter username
    string twitter = 16;
    // The username of the user
    string username = 17;
    // The website of the user
    string website_url = 18;
}

message GetV3UsersIdRequest {
    // The ID of the user
    int32 id = 1;
}

message PutV3UsersIdRequest {
    // Flag indicating the user is an administrator
    bool admin = 1;
    // The biography of the user
    string bio = 2;
    // Flag indicating the user can create groups
    bool can_create_group = 3;
    // Flag indicating the account needs to be confirmed
    bool confirm = 4;
    // The email of the user
    string email = 5;
    // The external authentication provider UID
    string extern_uid = 6;
    // Flag indicating the user is an external user
    bool external = 7;
    // The ID of the user
    int32 id = 8;
    // The LinkedIn username
    string linkedin = 9;
    // The location of the user
    string location = 10;
    // The name of the user
    string name = 11;
    // The organization of the user
    string organization = 12;
    // The password of the new user
    string password = 13;
    // The number of projects a user can create
    int32 projects_limit = 14;
    // The external provider
    string provider = 15;
    // The Skype username
    string skype = 16;
    // The Twitter username
    string twitter = 17;
    // The username of the user
    string username = 18;
    // The website of the user
    string website_url = 19;
}

message DeleteV3UsersIdRequest {
    // The ID of the user
    int32 id = 1;
}

message PutV3UsersIdBlockRequest {
    // The ID of the user
    int32 id = 1;
}

message GetV3UsersIdEmailsRequest {
    // The ID of the user
    int32 id = 1;
}

message PostV3UsersIdEmailsRequest {
    // The email of the user
    string email = 1;
    // The ID of the user
    int32 id = 2;
}

message DeleteV3UsersIdEmailsEmail_idRequest {
    // The ID of the email
    int32 email_id = 1;
    // The ID of the user
    int32 id = 2;
}

message GetV3UsersIdEventsRequest {
    // The ID of the user
    int32 id = 1;
    // Current page number
    int32 page = 2;
    // Number of items per page
    int32 per_page = 3;
}

message GetV3UsersIdKeysRequest {
    // The ID of the user
    int32 id = 1;
}

message PostV3UsersIdKeysRequest {
    // The ID of the user
    int32 id = 1;
    // The new SSH key
    string key = 2;
    // The title of the new SSH key
    string title = 3;
}

message DeleteV3UsersIdKeysKey_idRequest {
    // The ID of the user
    int32 id = 1;
    // The ID of the SSH key
    int32 key_id = 2;
}

message PutV3UsersIdUnblockRequest {
    // The ID of the user
    int32 id = 1;
}

message AccessRequester {
    string avatar_url = 1;
    string id = 2;
    string name = 3;
    string requested_at = 4;
    string state = 5;
    string username = 6;
    string web_url = 7;
}

message ApplicationSetting {
    string after_sign_out_path = 1;
    string after_sign_up_text = 2;
    string container_registry_token_expire_delay = 3;
    string created_at = 4;
    string default_branch_protection = 5;
    string default_group_visibility = 6;
    string default_project_visibility = 7;
    string default_projects_limit = 8;
    string default_snippet_visibility = 9;
    string domain_blacklist = 10;
    string domain_blacklist_enabled = 11;
    string domain_whitelist = 12;
    string gravatar_enabled = 13;
    string home_page_url = 14;
    string id = 15;
    string koding_enabled = 16;
    string koding_url = 17;
    string max_attachment_size = 18;
    string plantuml_enabled = 19;
    string plantuml_url = 20;
    string repository_storage = 21;
    string repository_storages = 22;
    string restricted_visibility_levels = 23;
    string session_expire_delay = 24;
    string sign_in_text = 25;
    string signin_enabled = 26;
    string signup_enabled = 27;
    string updated_at = 28;
    string user_oauth_applications = 29;
}

message AwardEmoji {
    string awardable_id = 1;
    string awardable_type = 2;
    string created_at = 3;
    string id = 4;
    string name = 5;
    string updated_at = 6;
    UserBasic user = 7;
}

message BasicProjectDetails {
    string http_url_to_repo = 1;
    string id = 2;
    string name = 3;
    string name_with_namespace = 4;
    string path = 5;
    string path_with_namespace = 6;
    string web_url = 7;
}

message Board {
    string id = 1;
    List lists = 2;
}

message Build {
    BuildArtifactFile artifacts_file = 1;
    RepoCommit commit = 2;
    string coverage = 3;
    string created_at = 4;
    string finished_at = 5;
    string id = 6;
    string name = 7;
    PipelineBasic pipeline = 8;
    string ref = 9;
    Runner runner = 10;
    string stage = 11;
    string started_at = 12;
    string status = 13;
    string tag = 14;
    User user = 15;
}

message BuildArtifactFile {
    string filename = 1;
    string size = 2;
}

message CommitNote {
    UserBasic author = 1;
    string created_at = 2;
    string line = 3;
    string line_type = 4;
    string note = 5;
    string path = 6;
}

message CommitStatus {
    string allow_failure = 1;
    UserBasic author = 2;
    string created_at = 3;
    string description = 4;
    string finished_at = 5;
    string id = 6;
    string name = 7;
    string ref = 8;
    string sha = 9;
    string started_at = 10;
    string status = 11;
    string target_url = 12;
}

message Compare {
    RepoCommit commit = 1;
    RepoCommit commits = 2;
    string compare_same_ref = 3;
    string compare_timeout = 4;
    RepoDiff diffs = 5;
}

message Contributor {
    string additions = 1;
    string commits = 2;
    string deletions = 3;
    string email = 4;
    string name = 5;
}

message Deployment {
    string created_at = 1;
    Build deployable = 2;
    EnvironmentBasic environment = 3;
    string id = 4;
    string iid = 5;
    string ref = 6;
    string sha = 7;
    UserBasic user = 8;
}

message Email {
    string email = 1;
    string id = 2;
}

message Environment {
    string external_url = 1;
    string id = 2;
    string name = 3;
    Project project = 4;
    string slug = 5;
}

message EnvironmentBasic {
    string external_url = 1;
    string id = 2;
    string name = 3;
    string slug = 4;
}

message Event {
    string action_name = 1;
    UserBasic author = 2;
    string author_id = 3;
    string author_username = 4;
    string created_at = 5;
    string data = 6;
    Note note = 7;
    string project_id = 8;
    string target_id = 9;
    string target_title = 10;
    string target_type = 11;
    string title = 12;
}

message GlobalNotificationSetting {
    string events = 1;
    string level = 2;
    string notification_email = 3;
}

message Group {
    string avatar_url = 1;
    string description = 2;
    string id = 3;
    string lfs_enabled = 4;
    string name = 5;
    string path = 6;
    string request_access_enabled = 7;
    string statistics = 8;
    string visibility_level = 9;
    string web_url = 10;
}

message GroupDetail {
    string avatar_url = 1;
    string description = 2;
    string id = 3;
    string lfs_enabled = 4;
    string name = 5;
    string path = 6;
    Project projects = 7;
    string request_access_enabled = 8;
    Project shared_projects = 9;
    string statistics = 10;
    string visibility_level = 11;
    string web_url = 12;
}

message Hook {
    string created_at = 1;
    string enable_ssl_verification = 2;
    string id = 3;
    string push_events = 4;
    string tag_push_events = 5;
    string url = 6;
}

message Identity {
    string extern_uid = 1;
    string provider = 2;
}

message Issue {
    UserBasic assignee = 1;
    UserBasic author = 2;
    string confidential = 3;
    string created_at = 4;
    string description = 5;
    string downvotes = 6;
    string due_date = 7;
    string id = 8;
    string iid = 9;
    string labels = 10;
    Milestone milestone = 11;
    string project_id = 12;
    string state = 13;
    string subscribed = 14;
    string title = 15;
    string updated_at = 16;
    string upvotes = 17;
    string user_notes_count = 18;
    string web_url = 19;
}

message Label {
    string closed_issues_count = 1;
    string color = 2;
    string description = 3;
    string id = 4;
    string name = 5;
    string open_issues_count = 6;
    string open_merge_requests_count = 7;
    string priority = 8;
    string subscribed = 9;
}

message LabelBasic {
    string color = 1;
    string description = 2;
    string id = 3;
    string name = 4;
}

message List {
    string id = 1;
    LabelBasic label = 2;
    string position = 3;
}

message MRNote {
    UserBasic author = 1;
    string note = 2;
}

message Member {
    string access_level = 1;
    string avatar_url = 2;
    string expires_at = 3;
    string id = 4;
    string name = 5;
    string state = 6;
    string username = 7;
    string web_url = 8;
}

message MergeRequest {
    UserBasic assignee = 1;
    UserBasic author = 2;
    string created_at = 3;
    string description = 4;
    string downvotes = 5;
    string force_remove_source_branch = 6;
    string id = 7;
    string iid = 8;
    string labels = 9;
    string merge_commit_sha = 10;
    string merge_status = 11;
    string merge_when_build_succeeds = 12;
    Milestone milestone = 13;
    string project_id = 14;
    string sha = 15;
    string should_remove_source_branch = 16;
    string source_branch = 17;
    string source_project_id = 18;
    string state = 19;
    string subscribed = 20;
    string target_branch = 21;
    string target_project_id = 22;
    string title = 23;
    string updated_at = 24;
    string upvotes = 25;
    string user_notes_count = 26;
    string web_url = 27;
    string work_in_progress = 28;
}

message MergeRequestChanges {
    UserBasic assignee = 1;
    UserBasic author = 2;
    RepoDiff changes = 3;
    string created_at = 4;
    string description = 5;
    string downvotes = 6;
    string force_remove_source_branch = 7;
    string id = 8;
    string iid = 9;
    string labels = 10;
    string merge_commit_sha = 11;
    string merge_status = 12;
    string merge_when_build_succeeds = 13;
    Milestone milestone = 14;
    string project_id = 15;
    string sha = 16;
    string should_remove_source_branch = 17;
    string source_branch = 18;
    string source_project_id = 19;
    string state = 20;
    string subscribed = 21;
    string target_branch = 22;
    string target_project_id = 23;
    string title = 24;
    string updated_at = 25;
    string upvotes = 26;
    string user_notes_count = 27;
    string web_url = 28;
    string work_in_progress = 29;
}

message MergeRequestDiff {
    string base_commit_sha = 1;
    string created_at = 2;
    string head_commit_sha = 3;
    string id = 4;
    string merge_request_id = 5;
    string real_size = 6;
    string start_commit_sha = 7;
    string state = 8;
}

message MergeRequestDiffFull {
    string base_commit_sha = 1;
    RepoCommit commits = 2;
    string created_at = 3;
    RepoDiff diffs = 4;
    string head_commit_sha = 5;
    string id = 6;
    string merge_request_id = 7;
    string real_size = 8;
    string start_commit_sha = 9;
    string state = 10;
}

message Milestone {
    string created_at = 1;
    string description = 2;
    string due_date = 3;
    string id = 4;
    string iid = 5;
    string project_id = 6;
    string start_date = 7;
    string state = 8;
    string title = 9;
    string updated_at = 10;
}

message Namespace {
    string id = 1;
    string kind = 2;
    string name = 3;
    string path = 4;
}

message Note {
    string attachment = 1;
    UserBasic author = 2;
    string body = 3;
    string created_at = 4;
    string downvote? = 5;
    string id = 6;
    string noteable_id = 7;
    string noteable_type = 8;
    string system = 9;
    string updated_at = 10;
    string upvote? = 11;
}

message NotificationSetting {
    string events = 1;
    string level = 2;
}

message PersonalSnippet {
    UserBasic author = 1;
    string created_at = 2;
    string file_name = 3;
    string id = 4;
    string raw_url = 5;
    string title = 6;
    string updated_at = 7;
    string web_url = 8;
}

message Pipeline {
    string before_sha = 1;
    string committed_at = 2;
    string coverage = 3;
    string created_at = 4;
    string duration = 5;
    string finished_at = 6;
    string id = 7;
    string ref = 8;
    string sha = 9;
    string started_at = 10;
    string status = 11;
    string tag = 12;
    string updated_at = 13;
    UserBasic user = 14;
    string yaml_errors = 15;
}

message PipelineBasic {
    string id = 1;
    string ref = 2;
    string sha = 3;
    string status = 4;
}

message Project {
    string archived = 1;
    string avatar_url = 2;
    string builds_enabled = 3;
    string container_registry_enabled = 4;
    string created_at = 5;
    string creator_id = 6;
    string default_branch = 7;
    string description = 8;
    BasicProjectDetails forked_from_project = 9;
    string forks_count = 10;
    string http_url_to_repo = 11;
    string id = 12;
    string issues_enabled = 13;
    string last_activity_at = 14;
    string lfs_enabled = 15;
    string merge_requests_enabled = 16;
    string name = 17;
    string name_with_namespace = 18;
    Namespace namespace = 19;
    string only_allow_merge_if_all_discussions_are_resolved = 20;
    string only_allow_merge_if_build_succeeds = 21;
    string open_issues_count = 22;
    UserBasic owner = 23;
    string path = 24;
    string path_with_namespace = 25;
    string public = 26;
    string public_builds = 27;
    string request_access_enabled = 28;
    string runners_token = 29;
    string shared_runners_enabled = 30;
    string shared_with_groups = 31;
    string snippets_enabled = 32;
    string ssh_url_to_repo = 33;
    string star_count = 34;
    ProjectStatistics statistics = 35;
    string tag_list = 36;
    string visibility_level = 37;
    string web_url = 38;
    string wiki_enabled = 39;
}

message ProjectGroupLink {
    string expires_at = 1;
    string group_access = 2;
    string group_id = 3;
    string id = 4;
    string project_id = 5;
}

message ProjectHook {
    string build_events = 1;
    string created_at = 2;
    string enable_ssl_verification = 3;
    string id = 4;
    string issues_events = 5;
    string merge_requests_events = 6;
    string note_events = 7;
    string pipeline_events = 8;
    string project_id = 9;
    string push_events = 10;
    string tag_push_events = 11;
    string url = 12;
    string wiki_page_events = 13;
}

message ProjectService {
    string active = 1;
    string build_events = 2;
    string created_at = 3;
    string id = 4;
    string issues_events = 5;
    string merge_requests_events = 6;
    string note_events = 7;
    string pipeline_events = 8;
    string properties = 9;
    string push_events = 10;
    string tag_push_events = 11;
    string title = 12;
    string updated_at = 13;
}

message ProjectSnippet {
    UserBasic author = 1;
    string created_at = 2;
    string expires_at = 3;
    string file_name = 4;
    string id = 5;
    string title = 6;
    string updated_at = 7;
    string web_url = 8;
}

message ProjectStatistics {
    string build_artifacts_size = 1;
    string commit_count = 2;
    string lfs_objects_size = 3;
    string repository_size = 4;
    string storage_size = 5;
}

message ProjectWithAccess {
    string archived = 1;
    string avatar_url = 2;
    string builds_enabled = 3;
    string container_registry_enabled = 4;
    string created_at = 5;
    string creator_id = 6;
    string default_branch = 7;
    string description = 8;
    BasicProjectDetails forked_from_project = 9;
    string forks_count = 10;
    string http_url_to_repo = 11;
    string id = 12;
    string issues_enabled = 13;
    string last_activity_at = 14;
    string lfs_enabled = 15;
    string merge_requests_enabled = 16;
    string name = 17;
    string name_with_namespace = 18;
    Namespace namespace = 19;
    string only_allow_merge_if_all_discussions_are_resolved = 20;
    string only_allow_merge_if_build_succeeds = 21;
    string open_issues_count = 22;
    UserBasic owner = 23;
    string path = 24;
    string path_with_namespace = 25;
    string permissions = 26;
    string public = 27;
    string public_builds = 28;
    string request_access_enabled = 29;
    string runners_token = 30;
    string shared_runners_enabled = 31;
    string shared_with_groups = 32;
    string snippets_enabled = 33;
    string ssh_url_to_repo = 34;
    string star_count = 35;
    ProjectStatistics statistics = 36;
    string tag_list = 37;
    string visibility_level = 38;
    string web_url = 39;
    string wiki_enabled = 40;
}

message Release {
    string description = 1;
    string tag_name = 2;
}

message RepoBranch {
    string commit = 1;
    string developers_can_merge = 2;
    string developers_can_push = 3;
    string merged = 4;
    string name = 5;
    string protected = 6;
}

message RepoCommit {
    string author_email = 1;
    string author_name = 2;
    string committer_email = 3;
    string committer_name = 4;
    string created_at = 5;
    string id = 6;
    string message = 7;
    string short_id = 8;
    string title = 9;
}

message RepoCommitDetail {
    string author_email = 1;
    string author_name = 2;
    string authored_date = 3;
    string committed_date = 4;
    string committer_email = 5;
    string committer_name = 6;
    string created_at = 7;
    string id = 8;
    string message = 9;
    string parent_ids = 10;
    string short_id = 11;
    RepoCommitStats stats = 12;
    string status = 13;
    string title = 14;
}

message RepoCommitStats {
    string additions = 1;
    string deletions = 2;
    string total = 3;
}

message RepoDiff {
    string a_mode = 1;
    string b_mode = 2;
    string deleted_file = 3;
    string diff = 4;
    string new_file = 5;
    string new_path = 6;
    string old_path = 7;
    string renamed_file = 8;
}

message RepoLicense {
    string conditions = 1;
    string content = 2;
    string description = 3;
    string html_url = 4;
    string key = 5;
    string limitations = 6;
    string name = 7;
    string nickname = 8;
    string permissions = 9;
    string popular = 10;
    string source_url = 11;
}

message RepoTag {
    string commit = 1;
    string message = 2;
    string name = 3;
    Release release = 4;
}

message RepoTreeObject {
    string id = 1;
    string mode = 2;
    string name = 3;
    string path = 4;
    string type = 5;
}

message Runner {
    string active = 1;
    string description = 2;
    string id = 3;
    string is_shared = 4;
    string name = 5;
}

message RunnerDetails {
    string active = 1;
    string architecture = 2;
    string contacted_at = 3;
    string description = 4;
    string id = 5;
    string is_shared = 6;
    string locked = 7;
    string name = 8;
    string platform = 9;
    BasicProjectDetails projects = 10;
    string revision = 11;
    string run_untagged = 12;
    string tag_list = 13;
    string token = 14;
    string version = 15;
}

message SSHKey {
    string can_push = 1;
    string created_at = 2;
    string id = 3;
    string key = 4;
    string title = 5;
}

message SSHKeyWithUser {
    string can_push = 1;
    string created_at = 2;
    string id = 3;
    string key = 4;
    string title = 5;
    UserPublic user = 6;
}

message Template {
    string content = 1;
    string name = 2;
}

message TemplatesList {
    string name = 1;
}

message Todo {
    string action_name = 1;
    UserBasic author = 2;
    string body = 3;
    string created_at = 4;
    string id = 5;
    BasicProjectDetails project = 6;
    string state = 7;
    string target = 8;
    string target_type = 9;
    string target_url = 10;
}

message Trigger {
    string created_at = 1;
    string deleted_at = 2;
    string last_used = 3;
    string token = 4;
    string updated_at = 5;
}

message TriggerRequest {
    string id = 1;
    string variables = 2;
}

message User {
    string avatar_url = 1;
    string bio = 2;
    string created_at = 3;
    string id = 4;
    string is_admin = 5;
    string linkedin = 6;
    string location = 7;
    string name = 8;
    string organization = 9;
    string skype = 10;
    string state = 11;
    string twitter = 12;
    string username = 13;
    string web_url = 14;
    string website_url = 15;
}

message UserBasic {
    string avatar_url = 1;
    string id = 2;
    string name = 3;
    string state = 4;
    string username = 5;
    string web_url = 6;
}

message UserPublic {
    string avatar_url = 1;
    string bio = 2;
    string can_create_group = 3;
    string can_create_project = 4;
    string color_scheme_id = 5;
    string confirmed_at = 6;
    string created_at = 7;
    string current_sign_in_at = 8;
    string email = 9;
    string external = 10;
    string id = 11;
    Identity identities = 12;
    string is_admin = 13;
    string last_sign_in_at = 14;
    string linkedin = 15;
    string location = 16;
    string name = 17;
    string organization = 18;
    string projects_limit = 19;
    string skype = 20;
    string state = 21;
    string theme_id = 22;
    string twitter = 23;
    string two_factor_enabled = 24;
    string username = 25;
    string web_url = 26;
    string website_url = 27;
}

message UserWithPrivateToken {
    string avatar_url = 1;
    string bio = 2;
    string can_create_group = 3;
    string can_create_project = 4;
    string color_scheme_id = 5;
    string confirmed_at = 6;
    string created_at = 7;
    string current_sign_in_at = 8;
    string email = 9;
    string external = 10;
    string id = 11;
    Identity identities = 12;
    string is_admin = 13;
    string last_sign_in_at = 14;
    string linkedin = 15;
    string location = 16;
    string name = 17;
    string organization = 18;
    string private_token = 19;
    string projects_limit = 20;
    string skype = 21;
    string state = 22;
    string theme_id = 23;
    string twitter = 24;
    string two_factor_enabled = 25;
    string username = 26;
    string web_url = 27;
    string website_url = 28;
}

message Variable {
    string key = 1;
    string value = 2;
}

service GitlabService {
    // Get the current application settings
    // 
    // Get the current application settings
    rpc GetV3ApplicationSettings(google.protobuf.Empty) returns (ApplicationSetting) {
      option (google.api.http) = {
        get: "/api/v3/application/settings"
      };
    }
    // Modify application settings
    // 
    // Modify application settings
    rpc PutV3ApplicationSettings(PutV3ApplicationSettingsRequest) returns (ApplicationSetting) {
      option (google.api.http) = {
        put: "/api/v3/application/settings"
      };
    }
    // Validation of .gitlab-ci.yml content
    // 
    // Validation of .gitlab-ci.yml content
    rpc PostV3CiLint(PostV3CiLintRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/ci/lint"
      };
    }
    rpc GetV3Deploy_keys(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/deploy_keys"
      };
    }
    // Get the list of the available template
    // 
    // This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3Dockerfiles(google.protobuf.Empty) returns (TemplatesList) {
      option (google.api.http) = {
        get: "/api/v3/dockerfiles"
      };
    }
    // Get the text for a specific template present in local filesystem
    // 
    // This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3DockerfilesName(GetV3DockerfilesNameRequest) returns (Template) {
      option (google.api.http) = {
        get: "/api/v3/dockerfiles/{name}"
      };
    }
    // Get the list of the available template
    // 
    // This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3Gitignores(google.protobuf.Empty) returns (TemplatesList) {
      option (google.api.http) = {
        get: "/api/v3/gitignores"
      };
    }
    // Get the text for a specific template present in local filesystem
    // 
    // This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3GitignoresName(GetV3GitignoresNameRequest) returns (Template) {
      option (google.api.http) = {
        get: "/api/v3/gitignores/{name}"
      };
    }
    // Get the list of the available template
    // 
    // This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3Gitlab_ci_ymls(google.protobuf.Empty) returns (TemplatesList) {
      option (google.api.http) = {
        get: "/api/v3/gitlab_ci_ymls"
      };
    }
    // Get the text for a specific template present in local filesystem
    // 
    // This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3Gitlab_ci_ymlsName(GetV3Gitlab_ci_ymlsNameRequest) returns (Template) {
      option (google.api.http) = {
        get: "/api/v3/gitlab_ci_ymls/{name}"
      };
    }
    // Get a groups list
    // 
    // Get a groups list
    rpc GetV3Groups(GetV3GroupsRequest) returns (Group) {
      option (google.api.http) = {
        get: "/api/v3/groups"
      };
    }
    // Create a group. Available only for users who can create groups.
    // 
    // Create a group. Available only for users who can create groups.
    rpc PostV3Groups(PostV3GroupsRequest) returns (Group) {
      option (google.api.http) = {
        post: "/api/v3/groups"
      };
    }
    // Get list of owned groups for authenticated user
    // 
    // Get list of owned groups for authenticated user
    rpc GetV3GroupsOwned(GetV3GroupsOwnedRequest) returns (Group) {
      option (google.api.http) = {
        get: "/api/v3/groups/owned"
      };
    }
    // Get a single group, with containing projects.
    // 
    // Get a single group, with containing projects.
    rpc GetV3GroupsId(GetV3GroupsIdRequest) returns (GroupDetail) {
      option (google.api.http) = {
        get: "/api/v3/groups/{id}"
      };
    }
    // Update a group. Available only for users who can administrate groups.
    // 
    // Update a group. Available only for users who can administrate groups.
    rpc PutV3GroupsId(PutV3GroupsIdRequest) returns (Group) {
      option (google.api.http) = {
        put: "/api/v3/groups/{id}"
      };
    }
    // Remove a group.
    // 
    // Remove a group.
    rpc DeleteV3GroupsId(DeleteV3GroupsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/groups/{id}"
      };
    }
    // Gets a list of access requests for a group.
    // 
    // This feature was introduced in GitLab 8.11.
    rpc GetV3GroupsIdAccess_requests(GetV3GroupsIdAccess_requestsRequest) returns (AccessRequester) {
      option (google.api.http) = {
        get: "/api/v3/groups/{id}/access_requests"
      };
    }
    // Requests access for the authenticated user to a group.
    // 
    // This feature was introduced in GitLab 8.11.
    rpc PostV3GroupsIdAccess_requests(PostV3GroupsIdAccess_requestsRequest) returns (AccessRequester) {
      option (google.api.http) = {
        post: "/api/v3/groups/{id}/access_requests"
      };
    }
    // Denies an access request for the given user.
    // 
    // This feature was introduced in GitLab 8.11.
    rpc DeleteV3GroupsIdAccess_requestsUser_id(DeleteV3GroupsIdAccess_requestsUser_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/groups/{id}/access_requests/{user_id}"
      };
    }
    // Approves an access request for the given user.
    // 
    // This feature was introduced in GitLab 8.11.
    rpc PutV3GroupsIdAccess_requestsUser_idApprove(PutV3GroupsIdAccess_requestsUser_idApproveRequest) returns (Member) {
      option (google.api.http) = {
        put: "/api/v3/groups/{id}/access_requests/{user_id}/approve"
      };
    }
    // Get a list of group issues
    // 
    // Get a list of group issues
    rpc GetV3GroupsIdIssues(GetV3GroupsIdIssuesRequest) returns (Issue) {
      option (google.api.http) = {
        get: "/api/v3/groups/{id}/issues"
      };
    }
    // Gets a list of group or project members viewable by the authenticated user.
    // 
    // Gets a list of group or project members viewable by the authenticated user.
    rpc GetV3GroupsIdMembers(GetV3GroupsIdMembersRequest) returns (Member) {
      option (google.api.http) = {
        get: "/api/v3/groups/{id}/members"
      };
    }
    // Adds a member to a group or project.
    // 
    // Adds a member to a group or project.
    rpc PostV3GroupsIdMembers(PostV3GroupsIdMembersRequest) returns (Member) {
      option (google.api.http) = {
        post: "/api/v3/groups/{id}/members"
      };
    }
    // Gets a member of a group or project.
    // 
    // Gets a member of a group or project.
    rpc GetV3GroupsIdMembersUser_id(GetV3GroupsIdMembersUser_idRequest) returns (Member) {
      option (google.api.http) = {
        get: "/api/v3/groups/{id}/members/{user_id}"
      };
    }
    // Updates a member of a group or project.
    // 
    // Updates a member of a group or project.
    rpc PutV3GroupsIdMembersUser_id(PutV3GroupsIdMembersUser_idRequest) returns (Member) {
      option (google.api.http) = {
        put: "/api/v3/groups/{id}/members/{user_id}"
      };
    }
    // Removes a user from a group or project.
    // 
    // Removes a user from a group or project.
    rpc DeleteV3GroupsIdMembersUser_id(DeleteV3GroupsIdMembersUser_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/groups/{id}/members/{user_id}"
      };
    }
    // Get group level notification level settings, defaults to Global
    // 
    // This feature was introduced in GitLab 8.12
    rpc GetV3GroupsIdNotification_settings(GetV3GroupsIdNotification_settingsRequest) returns (NotificationSetting) {
      option (google.api.http) = {
        get: "/api/v3/groups/{id}/notification_settings"
      };
    }
    // Update group level notification level settings, defaults to Global
    // 
    // This feature was introduced in GitLab 8.12
    rpc PutV3GroupsIdNotification_settings(PutV3GroupsIdNotification_settingsRequest) returns (NotificationSetting) {
      option (google.api.http) = {
        put: "/api/v3/groups/{id}/notification_settings"
      };
    }
    // Get a list of projects in this group.
    // 
    // Get a list of projects in this group.
    rpc GetV3GroupsIdProjects(GetV3GroupsIdProjectsRequest) returns (Project) {
      option (google.api.http) = {
        get: "/api/v3/groups/{id}/projects"
      };
    }
    // Transfer a project to the group namespace. Available only for admin.
    // 
    // Transfer a project to the group namespace. Available only for admin.
    rpc PostV3GroupsIdProjectsProject_id(PostV3GroupsIdProjectsProject_idRequest) returns (GroupDetail) {
      option (google.api.http) = {
        post: "/api/v3/groups/{id}/projects/{project_id}"
      };
    }
    // Get the list of system hooks
    // 
    // Get the list of system hooks
    rpc GetV3Hooks(google.protobuf.Empty) returns (Hook) {
      option (google.api.http) = {
        get: "/api/v3/hooks"
      };
    }
    // Create a new system hook
    // 
    // Create a new system hook
    rpc PostV3Hooks(PostV3HooksRequest) returns (Hook) {
      option (google.api.http) = {
        post: "/api/v3/hooks"
      };
    }
    // Test a hook
    // 
    // Test a hook
    rpc GetV3HooksId(GetV3HooksIdRequest) returns (Hook) {
      option (google.api.http) = {
        get: "/api/v3/hooks/{id}"
      };
    }
    // Delete a hook
    // 
    // Delete a hook
    rpc DeleteV3HooksId(DeleteV3HooksIdRequest) returns (Hook) {
      option (google.api.http) = {
        delete: "/api/v3/hooks/{id}"
      };
    }
    rpc PostV3InternalAllowed(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/internal/allowed"
      };
    }
    rpc GetV3InternalBroadcast_message(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/internal/broadcast_message"
      };
    }
    rpc GetV3InternalCheck(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/internal/check"
      };
    }
    rpc GetV3InternalDiscover(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/internal/discover"
      };
    }
    rpc PostV3InternalLfs_authenticate(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/internal/lfs_authenticate"
      };
    }
    rpc GetV3InternalMerge_request_urls(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/internal/merge_request_urls"
      };
    }
    rpc PostV3InternalTwo_factor_recovery_codes(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/internal/two_factor_recovery_codes"
      };
    }
    // Get currently authenticated user's issues
    // 
    // Get currently authenticated user's issues
    rpc GetV3Issues(GetV3IssuesRequest) returns (Issue) {
      option (google.api.http) = {
        get: "/api/v3/issues"
      };
    }
    // Get single ssh key by id. Only available to admin users
    // 
    // Get single ssh key by id. Only available to admin users
    rpc GetV3KeysId(GetV3KeysIdRequest) returns (SSHKeyWithUser) {
      option (google.api.http) = {
        get: "/api/v3/keys/{id}"
      };
    }
    // Get the list of the available license template
    // 
    // This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3Licenses(GetV3LicensesRequest) returns (RepoLicense) {
      option (google.api.http) = {
        get: "/api/v3/licenses"
      };
    }
    // Get the text for a specific license
    // 
    // This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3LicensesName(GetV3LicensesNameRequest) returns (RepoLicense) {
      option (google.api.http) = {
        get: "/api/v3/licenses/{name}"
      };
    }
    // Get a namespaces list
    // 
    // Get a namespaces list
    rpc GetV3Namespaces(GetV3NamespacesRequest) returns (Namespace) {
      option (google.api.http) = {
        get: "/api/v3/namespaces"
      };
    }
    // Get global notification level settings and email, defaults to Participate
    // 
    // This feature was introduced in GitLab 8.12
    rpc GetV3Notification_settings(google.protobuf.Empty) returns (GlobalNotificationSetting) {
      option (google.api.http) = {
        get: "/api/v3/notification_settings"
      };
    }
    // Update global notification level settings and email, defaults to Participate
    // 
    // This feature was introduced in GitLab 8.12
    rpc PutV3Notification_settings(PutV3Notification_settingsRequest) returns (GlobalNotificationSetting) {
      option (google.api.http) = {
        put: "/api/v3/notification_settings"
      };
    }
    // Get a projects list for authenticated user
    // 
    // Get a projects list for authenticated user
    rpc GetV3Projects(GetV3ProjectsRequest) returns (BasicProjectDetails) {
      option (google.api.http) = {
        get: "/api/v3/projects"
      };
    }
    // Create new project
    // 
    // Create new project
    rpc PostV3Projects(PostV3ProjectsRequest) returns (Project) {
      option (google.api.http) = {
        post: "/api/v3/projects"
      };
    }
    // Get all projects for admin user
    // 
    // Get all projects for admin user
    rpc GetV3ProjectsAll(GetV3ProjectsAllRequest) returns (BasicProjectDetails) {
      option (google.api.http) = {
        get: "/api/v3/projects/all"
      };
    }
    // Fork new project for the current user or provided namespace.
    // 
    // Fork new project for the current user or provided namespace.
    rpc PostV3ProjectsForkId(PostV3ProjectsForkIdRequest) returns (Project) {
      option (google.api.http) = {
        post: "/api/v3/projects/fork/{id}"
      };
    }
    // Get an owned projects list for authenticated user
    // 
    // Get an owned projects list for authenticated user
    rpc GetV3ProjectsOwned(GetV3ProjectsOwnedRequest) returns (BasicProjectDetails) {
      option (google.api.http) = {
        get: "/api/v3/projects/owned"
      };
    }
    // Search for projects the current user has access to
    // 
    // Search for projects the current user has access to
    rpc GetV3ProjectsSearchQuery(GetV3ProjectsSearchQueryRequest) returns (Project) {
      option (google.api.http) = {
        get: "/api/v3/projects/search/{query}"
      };
    }
    // Gets starred project for the authenticated user
    // 
    // Gets starred project for the authenticated user
    rpc GetV3ProjectsStarred(GetV3ProjectsStarredRequest) returns (BasicProjectDetails) {
      option (google.api.http) = {
        get: "/api/v3/projects/starred"
      };
    }
    // Create new project for a specified user. Only available to admin users.
    // 
    // Create new project for a specified user. Only available to admin users.
    rpc PostV3ProjectsUserUser_id(PostV3ProjectsUserUser_idRequest) returns (Project) {
      option (google.api.http) = {
        post: "/api/v3/projects/user/{user_id}"
      };
    }
    // Get a list of visible projects for authenticated user
    // 
    // Get a list of visible projects for authenticated user
    rpc GetV3ProjectsVisible(GetV3ProjectsVisibleRequest) returns (BasicProjectDetails) {
      option (google.api.http) = {
        get: "/api/v3/projects/visible"
      };
    }
    // Get a single project
    // 
    // Get a single project
    rpc GetV3ProjectsId(GetV3ProjectsIdRequest) returns (ProjectWithAccess) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}"
      };
    }
    // Update an existing project
    // 
    // Update an existing project
    rpc PutV3ProjectsId(PutV3ProjectsIdRequest) returns (Project) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}"
      };
    }
    // Remove a project
    // 
    // Remove a project
    rpc DeleteV3ProjectsId(DeleteV3ProjectsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}"
      };
    }
    // Trigger a GitLab project build
    // 
    // Trigger a GitLab project build
    rpc PostV3ProjectsIdRefRefTriggerBuilds(PostV3ProjectsIdRefRefTriggerBuildsRequest) returns (TriggerRequest) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/(ref/{ref}/)trigger/builds"
      };
    }
    // Gets a list of access requests for a project.
    // 
    // This feature was introduced in GitLab 8.11.
    rpc GetV3ProjectsIdAccess_requests(GetV3ProjectsIdAccess_requestsRequest) returns (AccessRequester) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/access_requests"
      };
    }
    // Requests access for the authenticated user to a project.
    // 
    // This feature was introduced in GitLab 8.11.
    rpc PostV3ProjectsIdAccess_requests(PostV3ProjectsIdAccess_requestsRequest) returns (AccessRequester) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/access_requests"
      };
    }
    // Denies an access request for the given user.
    // 
    // This feature was introduced in GitLab 8.11.
    rpc DeleteV3ProjectsIdAccess_requestsUser_id(DeleteV3ProjectsIdAccess_requestsUser_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/access_requests/{user_id}"
      };
    }
    // Approves an access request for the given user.
    // 
    // This feature was introduced in GitLab 8.11.
    rpc PutV3ProjectsIdAccess_requestsUser_idApprove(PutV3ProjectsIdAccess_requestsUser_idApproveRequest) returns (Member) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/access_requests/{user_id}/approve"
      };
    }
    // Archive a project
    // 
    // Archive a project
    rpc PostV3ProjectsIdArchive(PostV3ProjectsIdArchiveRequest) returns (Project) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/archive"
      };
    }
    // Get all project boards
    // 
    // This feature was introduced in 8.13
    rpc GetV3ProjectsIdBoards(GetV3ProjectsIdBoardsRequest) returns (Board) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/boards"
      };
    }
    // Get the lists of a project board
    // 
    // Does not include `backlog` and `done` lists. This feature was introduced in 8.13
    rpc GetV3ProjectsIdBoardsBoard_idLists(GetV3ProjectsIdBoardsBoard_idListsRequest) returns (List) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/boards/{board_id}/lists"
      };
    }
    // Create a new board list
    // 
    // This feature was introduced in 8.13
    rpc PostV3ProjectsIdBoardsBoard_idLists(PostV3ProjectsIdBoardsBoard_idListsRequest) returns (List) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/boards/{board_id}/lists"
      };
    }
    // Get a list of a project board
    // 
    // This feature was introduced in 8.13
    rpc GetV3ProjectsIdBoardsBoard_idListsList_id(GetV3ProjectsIdBoardsBoard_idListsList_idRequest) returns (List) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/boards/{board_id}/lists/{list_id}"
      };
    }
    // Moves a board list to a new position
    // 
    // This feature was introduced in 8.13
    rpc PutV3ProjectsIdBoardsBoard_idListsList_id(PutV3ProjectsIdBoardsBoard_idListsList_idRequest) returns (List) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/boards/{board_id}/lists/{list_id}"
      };
    }
    // Delete a board list
    // 
    // This feature was introduced in 8.13
    rpc DeleteV3ProjectsIdBoardsBoard_idListsList_id(DeleteV3ProjectsIdBoardsBoard_idListsList_idRequest) returns (List) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/boards/{board_id}/lists/{list_id}"
      };
    }
    // Get a project builds
    // 
    // Get a project builds
    rpc GetV3ProjectsIdBuilds(GetV3ProjectsIdBuildsRequest) returns (Build) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/builds"
      };
    }
    // Download the artifacts file from build
    // 
    // This feature was introduced in GitLab 8.10
    rpc GetV3ProjectsIdBuildsArtifactsRef_nameDownload(GetV3ProjectsIdBuildsArtifactsRef_nameDownloadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/builds/artifacts/{ref_name}/download"
      };
    }
    // Get a specific build of a project
    // 
    // Get a specific build of a project
    rpc GetV3ProjectsIdBuildsBuild_id(GetV3ProjectsIdBuildsBuild_idRequest) returns (Build) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/builds/{build_id}"
      };
    }
    // Download the artifacts file from build
    // 
    // This feature was introduced in GitLab 8.5
    rpc GetV3ProjectsIdBuildsBuild_idArtifacts(GetV3ProjectsIdBuildsBuild_idArtifactsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/builds/{build_id}/artifacts"
      };
    }
    // Keep the artifacts to prevent them from being deleted
    // 
    // Keep the artifacts to prevent them from being deleted
    rpc PostV3ProjectsIdBuildsBuild_idArtifactsKeep(PostV3ProjectsIdBuildsBuild_idArtifactsKeepRequest) returns (Build) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/builds/{build_id}/artifacts/keep"
      };
    }
    // Cancel a specific build of a project
    // 
    // Cancel a specific build of a project
    rpc PostV3ProjectsIdBuildsBuild_idCancel(PostV3ProjectsIdBuildsBuild_idCancelRequest) returns (Build) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/builds/{build_id}/cancel"
      };
    }
    // Erase build (remove artifacts and build trace)
    // 
    // Erase build (remove artifacts and build trace)
    rpc PostV3ProjectsIdBuildsBuild_idErase(PostV3ProjectsIdBuildsBuild_idEraseRequest) returns (Build) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/builds/{build_id}/erase"
      };
    }
    // Trigger a manual build
    // 
    // This feature was added in GitLab 8.11
    rpc PostV3ProjectsIdBuildsBuild_idPlay(PostV3ProjectsIdBuildsBuild_idPlayRequest) returns (Build) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/builds/{build_id}/play"
      };
    }
    // Retry a specific build of a project
    // 
    // Retry a specific build of a project
    rpc PostV3ProjectsIdBuildsBuild_idRetry(PostV3ProjectsIdBuildsBuild_idRetryRequest) returns (Build) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/builds/{build_id}/retry"
      };
    }
    // Get a trace of a specific build of a project
    // 
    // Get a trace of a specific build of a project
    rpc GetV3ProjectsIdBuildsBuild_idTrace(GetV3ProjectsIdBuildsBuild_idTraceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/builds/{build_id}/trace"
      };
    }
    // Get a specific project's deploy keys
    // 
    // Get a specific project's deploy keys
    rpc GetV3ProjectsIdDeploy_keys(GetV3ProjectsIdDeploy_keysRequest) returns (SSHKey) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/deploy_keys"
      };
    }
    // Add new deploy key to currently authenticated user
    // 
    // Add new deploy key to currently authenticated user
    rpc PostV3ProjectsIdDeploy_keys(PostV3ProjectsIdDeploy_keysRequest) returns (SSHKey) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/deploy_keys"
      };
    }
    // Get single deploy key
    // 
    // Get single deploy key
    rpc GetV3ProjectsIdDeploy_keysKey_id(GetV3ProjectsIdDeploy_keysKey_idRequest) returns (SSHKey) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/deploy_keys/{key_id}"
      };
    }
    // Delete deploy key for a project
    // 
    // Delete deploy key for a project
    rpc DeleteV3ProjectsIdDeploy_keysKey_id(DeleteV3ProjectsIdDeploy_keysKey_idRequest) returns (SSHKey) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/deploy_keys/{key_id}"
      };
    }
    // Disable a deploy key for a project
    // 
    // This feature was added in GitLab 8.11
    rpc DeleteV3ProjectsIdDeploy_keysKey_idDisable(DeleteV3ProjectsIdDeploy_keysKey_idDisableRequest) returns (SSHKey) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/deploy_keys/{key_id}/disable"
      };
    }
    // Enable a deploy key for a project
    // 
    // This feature was added in GitLab 8.11
    rpc PostV3ProjectsIdDeploy_keysKey_idEnable(PostV3ProjectsIdDeploy_keysKey_idEnableRequest) returns (SSHKey) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/deploy_keys/{key_id}/enable"
      };
    }
    // Get all deployments of the project
    // 
    // This feature was introduced in GitLab 8.11.
    rpc GetV3ProjectsIdDeployments(GetV3ProjectsIdDeploymentsRequest) returns (Deployment) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/deployments"
      };
    }
    // Gets a specific deployment
    // 
    // This feature was introduced in GitLab 8.11.
    rpc GetV3ProjectsIdDeploymentsDeployment_id(GetV3ProjectsIdDeploymentsDeployment_idRequest) returns (Deployment) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/deployments/{deployment_id}"
      };
    }
    // Get all environments of the project
    // 
    // This feature was introduced in GitLab 8.11.
    rpc GetV3ProjectsIdEnvironments(GetV3ProjectsIdEnvironmentsRequest) returns (Environment) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/environments"
      };
    }
    // Creates a new environment
    // 
    // This feature was introduced in GitLab 8.11.
    rpc PostV3ProjectsIdEnvironments(PostV3ProjectsIdEnvironmentsRequest) returns (Environment) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/environments"
      };
    }
    // Updates an existing environment
    // 
    // This feature was introduced in GitLab 8.11.
    rpc PutV3ProjectsIdEnvironmentsEnvironment_id(PutV3ProjectsIdEnvironmentsEnvironment_idRequest) returns (Environment) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/environments/{environment_id}"
      };
    }
    // Deletes an existing environment
    // 
    // This feature was introduced in GitLab 8.11.
    rpc DeleteV3ProjectsIdEnvironmentsEnvironment_id(DeleteV3ProjectsIdEnvironmentsEnvironment_idRequest) returns (Environment) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/environments/{environment_id}"
      };
    }
    // Get events for a single project
    // 
    // Get events for a single project
    rpc GetV3ProjectsIdEvents(GetV3ProjectsIdEventsRequest) returns (Event) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/events"
      };
    }
    // Remove a forked_from relationship
    // 
    // Remove a forked_from relationship
    rpc DeleteV3ProjectsIdFork(DeleteV3ProjectsIdForkRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/fork"
      };
    }
    // Mark this project as forked from another
    // 
    // Mark this project as forked from another
    rpc PostV3ProjectsIdForkForked_from_id(PostV3ProjectsIdForkForked_from_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/fork/{forked_from_id}"
      };
    }
    // Get project hooks
    // 
    // Get project hooks
    rpc GetV3ProjectsIdHooks(GetV3ProjectsIdHooksRequest) returns (ProjectHook) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/hooks"
      };
    }
    // Add hook to project
    // 
    // Add hook to project
    rpc PostV3ProjectsIdHooks(PostV3ProjectsIdHooksRequest) returns (ProjectHook) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/hooks"
      };
    }
    // Get a project hook
    // 
    // Get a project hook
    rpc GetV3ProjectsIdHooksHook_id(GetV3ProjectsIdHooksHook_idRequest) returns (ProjectHook) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/hooks/{hook_id}"
      };
    }
    // Update an existing project hook
    // 
    // Update an existing project hook
    rpc PutV3ProjectsIdHooksHook_id(PutV3ProjectsIdHooksHook_idRequest) returns (ProjectHook) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/hooks/{hook_id}"
      };
    }
    // Deletes project hook
    // 
    // Deletes project hook
    rpc DeleteV3ProjectsIdHooksHook_id(DeleteV3ProjectsIdHooksHook_idRequest) returns (ProjectHook) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/hooks/{hook_id}"
      };
    }
    // Get a list of project issues
    // 
    // Get a list of project issues
    rpc GetV3ProjectsIdIssues(GetV3ProjectsIdIssuesRequest) returns (Issue) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues"
      };
    }
    // Create a new project issue
    // 
    // Create a new project issue
    rpc PostV3ProjectsIdIssues(PostV3ProjectsIdIssuesRequest) returns (Issue) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues"
      };
    }
    // Get a single project issue
    // 
    // Get a single project issue
    rpc GetV3ProjectsIdIssuesIssue_id(GetV3ProjectsIdIssuesIssue_idRequest) returns (Issue) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues/{issue_id}"
      };
    }
    // Update an existing issue
    // 
    // Update an existing issue
    rpc PutV3ProjectsIdIssuesIssue_id(PutV3ProjectsIdIssuesIssue_idRequest) returns (Issue) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/issues/{issue_id}"
      };
    }
    // Delete a project issue
    // 
    // Delete a project issue
    rpc DeleteV3ProjectsIdIssuesIssue_id(DeleteV3ProjectsIdIssuesIssue_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/issues/{issue_id}"
      };
    }
    // Add spent time for a project issue
    // 
    // Add spent time for a project issue
    rpc PostV3ProjectsIdIssuesIssue_idAdd_spent_time(PostV3ProjectsIdIssuesIssue_idAdd_spent_timeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{issue_id}/add_spent_time"
      };
    }
    // Get a list of project +awardable+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdIssuesIssue_idAward_emoji(GetV3ProjectsIdIssuesIssue_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues/{issue_id}/award_emoji"
      };
    }
    // Award a new Emoji
    // 
    // This feature was introduced in 8.9
    rpc PostV3ProjectsIdIssuesIssue_idAward_emoji(PostV3ProjectsIdIssuesIssue_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{issue_id}/award_emoji"
      };
    }
    // Get a specific award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdIssuesIssue_idAward_emojiAward_id(GetV3ProjectsIdIssuesIssue_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}"
      };
    }
    // Delete a +awardables+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc DeleteV3ProjectsIdIssuesIssue_idAward_emojiAward_id(DeleteV3ProjectsIdIssuesIssue_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}"
      };
    }
    // Move an existing issue
    // 
    // Move an existing issue
    rpc PostV3ProjectsIdIssuesIssue_idMove(PostV3ProjectsIdIssuesIssue_idMoveRequest) returns (Issue) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{issue_id}/move"
      };
    }
    // Get a list of project +awardable+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdIssuesIssue_idNotesNote_idAward_emoji(GetV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji"
      };
    }
    // Award a new Emoji
    // 
    // This feature was introduced in 8.9
    rpc PostV3ProjectsIdIssuesIssue_idNotesNote_idAward_emoji(PostV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji"
      };
    }
    // Get a specific award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiAward_id(GetV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}"
      };
    }
    // Delete a +awardables+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc DeleteV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiAward_id(DeleteV3ProjectsIdIssuesIssue_idNotesNote_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}"
      };
    }
    // Reset spent time for a project issue
    // 
    // Reset spent time for a project issue
    rpc PostV3ProjectsIdIssuesIssue_idReset_spent_time(PostV3ProjectsIdIssuesIssue_idReset_spent_timeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{issue_id}/reset_spent_time"
      };
    }
    // Reset the time estimate for a project issue
    // 
    // Reset the time estimate for a project issue
    rpc PostV3ProjectsIdIssuesIssue_idReset_time_estimate(PostV3ProjectsIdIssuesIssue_idReset_time_estimateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{issue_id}/reset_time_estimate"
      };
    }
    // Set a time estimate for a project issue
    // 
    // Set a time estimate for a project issue
    rpc PostV3ProjectsIdIssuesIssue_idTime_estimate(PostV3ProjectsIdIssuesIssue_idTime_estimateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{issue_id}/time_estimate"
      };
    }
    // Show time stats for a project issue
    // 
    // Show time stats for a project issue
    rpc GetV3ProjectsIdIssuesIssue_idTime_stats(GetV3ProjectsIdIssuesIssue_idTime_statsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues/{issue_id}/time_stats"
      };
    }
    // Create a todo on an issuable
    // 
    // Create a todo on an issuable
    rpc PostV3ProjectsIdIssuesIssue_idTodo(PostV3ProjectsIdIssuesIssue_idTodoRequest) returns (Todo) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{issue_id}/todo"
      };
    }
    // Get a list of project +noteable+ notes
    // 
    // Get a list of project +noteable+ notes
    rpc GetV3ProjectsIdIssuesNoteable_idNotes(GetV3ProjectsIdIssuesNoteable_idNotesRequest) returns (Note) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues/{noteable_id}/notes"
      };
    }
    // Create a new +noteable+ note
    // 
    // Create a new +noteable+ note
    rpc PostV3ProjectsIdIssuesNoteable_idNotes(PostV3ProjectsIdIssuesNoteable_idNotesRequest) returns (Note) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{noteable_id}/notes"
      };
    }
    // Get a single +noteable+ note
    // 
    // Get a single +noteable+ note
    rpc GetV3ProjectsIdIssuesNoteable_idNotesNote_id(GetV3ProjectsIdIssuesNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}"
      };
    }
    // Update an existing +noteable+ note
    // 
    // Update an existing +noteable+ note
    rpc PutV3ProjectsIdIssuesNoteable_idNotesNote_id(PutV3ProjectsIdIssuesNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}"
      };
    }
    // Delete a +noteable+ note
    // 
    // Delete a +noteable+ note
    rpc DeleteV3ProjectsIdIssuesNoteable_idNotesNote_id(DeleteV3ProjectsIdIssuesNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}"
      };
    }
    // Subscribe to a resource
    // 
    // Subscribe to a resource
    rpc PostV3ProjectsIdIssuesSubscribable_idSubscription(PostV3ProjectsIdIssuesSubscribable_idSubscriptionRequest) returns (Issue) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/issues/{subscribable_id}/subscription"
      };
    }
    // Unsubscribe from a resource
    // 
    // Unsubscribe from a resource
    rpc DeleteV3ProjectsIdIssuesSubscribable_idSubscription(DeleteV3ProjectsIdIssuesSubscribable_idSubscriptionRequest) returns (Issue) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/issues/{subscribable_id}/subscription"
      };
    }
    // Get a specific project's deploy keys
    // 
    // Get a specific project's deploy keys
    rpc GetV3ProjectsIdKeys(GetV3ProjectsIdKeysRequest) returns (SSHKey) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/keys"
      };
    }
    // Add new deploy key to currently authenticated user
    // 
    // Add new deploy key to currently authenticated user
    rpc PostV3ProjectsIdKeys(PostV3ProjectsIdKeysRequest) returns (SSHKey) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/keys"
      };
    }
    // Get single deploy key
    // 
    // Get single deploy key
    rpc GetV3ProjectsIdKeysKey_id(GetV3ProjectsIdKeysKey_idRequest) returns (SSHKey) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/keys/{key_id}"
      };
    }
    // Delete deploy key for a project
    // 
    // Delete deploy key for a project
    rpc DeleteV3ProjectsIdKeysKey_id(DeleteV3ProjectsIdKeysKey_idRequest) returns (SSHKey) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/keys/{key_id}"
      };
    }
    // Disable a deploy key for a project
    // 
    // This feature was added in GitLab 8.11
    rpc DeleteV3ProjectsIdKeysKey_idDisable(DeleteV3ProjectsIdKeysKey_idDisableRequest) returns (SSHKey) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/keys/{key_id}/disable"
      };
    }
    // Enable a deploy key for a project
    // 
    // This feature was added in GitLab 8.11
    rpc PostV3ProjectsIdKeysKey_idEnable(PostV3ProjectsIdKeysKey_idEnableRequest) returns (SSHKey) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/keys/{key_id}/enable"
      };
    }
    // Get all labels of the project
    // 
    // Get all labels of the project
    rpc GetV3ProjectsIdLabels(GetV3ProjectsIdLabelsRequest) returns (Label) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/labels"
      };
    }
    // Update an existing label. At least one optional parameter is required.
    // 
    // Update an existing label. At least one optional parameter is required.
    rpc PutV3ProjectsIdLabels(PutV3ProjectsIdLabelsRequest) returns (Label) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/labels"
      };
    }
    // Create a new label
    // 
    // Create a new label
    rpc PostV3ProjectsIdLabels(PostV3ProjectsIdLabelsRequest) returns (Label) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/labels"
      };
    }
    // Delete an existing label
    // 
    // Delete an existing label
    rpc DeleteV3ProjectsIdLabels(DeleteV3ProjectsIdLabelsRequest) returns (Label) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/labels"
      };
    }
    // Subscribe to a resource
    // 
    // Subscribe to a resource
    rpc PostV3ProjectsIdLabelsSubscribable_idSubscription(PostV3ProjectsIdLabelsSubscribable_idSubscriptionRequest) returns (Label) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/labels/{subscribable_id}/subscription"
      };
    }
    // Unsubscribe from a resource
    // 
    // Unsubscribe from a resource
    rpc DeleteV3ProjectsIdLabelsSubscribable_idSubscription(DeleteV3ProjectsIdLabelsSubscribable_idSubscriptionRequest) returns (Label) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/labels/{subscribable_id}/subscription"
      };
    }
    // Gets a list of group or project members viewable by the authenticated user.
    // 
    // Gets a list of group or project members viewable by the authenticated user.
    rpc GetV3ProjectsIdMembers(GetV3ProjectsIdMembersRequest) returns (Member) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/members"
      };
    }
    // Adds a member to a group or project.
    // 
    // Adds a member to a group or project.
    rpc PostV3ProjectsIdMembers(PostV3ProjectsIdMembersRequest) returns (Member) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/members"
      };
    }
    // Gets a member of a group or project.
    // 
    // Gets a member of a group or project.
    rpc GetV3ProjectsIdMembersUser_id(GetV3ProjectsIdMembersUser_idRequest) returns (Member) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/members/{user_id}"
      };
    }
    // Updates a member of a group or project.
    // 
    // Updates a member of a group or project.
    rpc PutV3ProjectsIdMembersUser_id(PutV3ProjectsIdMembersUser_idRequest) returns (Member) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/members/{user_id}"
      };
    }
    // Removes a user from a group or project.
    // 
    // Removes a user from a group or project.
    rpc DeleteV3ProjectsIdMembersUser_id(DeleteV3ProjectsIdMembersUser_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/members/{user_id}"
      };
    }
    // Get a single merge request
    // 
    // This endpoint is deprecated and will be removed in GitLab 9.0.
    rpc GetV3ProjectsIdMerge_requestMerge_request_id(GetV3ProjectsIdMerge_requestMerge_request_idRequest) returns (MergeRequest) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_request/{merge_request_id}"
      };
    }
    // Update a merge request
    // 
    // Update a merge request
    rpc PutV3ProjectsIdMerge_requestMerge_request_id(PutV3ProjectsIdMerge_requestMerge_request_idRequest) returns (MergeRequest) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/merge_request/{merge_request_id}"
      };
    }
    // Cancel merge if "Merge When Pipeline Succeeds" is enabled
    // 
    // Cancel merge if "Merge When Pipeline Succeeds" is enabled
    rpc PostV3ProjectsIdMerge_requestMerge_request_idCancel_merge_when_build_succeeds(PostV3ProjectsIdMerge_requestMerge_request_idCancel_merge_when_build_succeedsRequest) returns (MergeRequest) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_request/{merge_request_id}/cancel_merge_when_build_succeeds"
      };
    }
    // Show the merge request changes
    // 
    // Show the merge request changes
    rpc GetV3ProjectsIdMerge_requestMerge_request_idChanges(GetV3ProjectsIdMerge_requestMerge_request_idChangesRequest) returns (MergeRequestChanges) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_request/{merge_request_id}/changes"
      };
    }
    // List issues that will be closed on merge
    // 
    // List issues that will be closed on merge
    rpc GetV3ProjectsIdMerge_requestMerge_request_idCloses_issues(GetV3ProjectsIdMerge_requestMerge_request_idCloses_issuesRequest) returns (MRNote) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_request/{merge_request_id}/closes_issues"
      };
    }
    // Get the comments of a merge request
    // 
    // Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
    rpc GetV3ProjectsIdMerge_requestMerge_request_idComments(GetV3ProjectsIdMerge_requestMerge_request_idCommentsRequest) returns (MRNote) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_request/{merge_request_id}/comments"
      };
    }
    // Post a comment to a merge request
    // 
    // Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
    rpc PostV3ProjectsIdMerge_requestMerge_request_idComments(PostV3ProjectsIdMerge_requestMerge_request_idCommentsRequest) returns (MRNote) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_request/{merge_request_id}/comments"
      };
    }
    // Get the commits of a merge request
    // 
    // Get the commits of a merge request
    rpc GetV3ProjectsIdMerge_requestMerge_request_idCommits(GetV3ProjectsIdMerge_requestMerge_request_idCommitsRequest) returns (RepoCommit) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_request/{merge_request_id}/commits"
      };
    }
    // Merge a merge request
    // 
    // Merge a merge request
    rpc PutV3ProjectsIdMerge_requestMerge_request_idMerge(PutV3ProjectsIdMerge_requestMerge_request_idMergeRequest) returns (MergeRequest) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/merge_request/{merge_request_id}/merge"
      };
    }
    // Subscribe to a resource
    // 
    // Subscribe to a resource
    rpc PostV3ProjectsIdMerge_requestSubscribable_idSubscription(PostV3ProjectsIdMerge_requestSubscribable_idSubscriptionRequest) returns (MergeRequest) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_request/{subscribable_id}/subscription"
      };
    }
    // Unsubscribe from a resource
    // 
    // Unsubscribe from a resource
    rpc DeleteV3ProjectsIdMerge_requestSubscribable_idSubscription(DeleteV3ProjectsIdMerge_requestSubscribable_idSubscriptionRequest) returns (MergeRequest) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/merge_request/{subscribable_id}/subscription"
      };
    }
    // List merge requests
    // 
    // List merge requests
    rpc GetV3ProjectsIdMerge_requests(GetV3ProjectsIdMerge_requestsRequest) returns (MergeRequest) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests"
      };
    }
    // Create a merge request
    // 
    // Create a merge request
    rpc PostV3ProjectsIdMerge_requests(PostV3ProjectsIdMerge_requestsRequest) returns (MergeRequest) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests"
      };
    }
    // Get a single merge request
    // 
    // Get a single merge request
    rpc GetV3ProjectsIdMerge_requestsMerge_request_id(GetV3ProjectsIdMerge_requestsMerge_request_idRequest) returns (MergeRequest) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}"
      };
    }
    // Update a merge request
    // 
    // Update a merge request
    rpc PutV3ProjectsIdMerge_requestsMerge_request_id(PutV3ProjectsIdMerge_requestsMerge_request_idRequest) returns (MergeRequest) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/merge_requests/{merge_request_id}"
      };
    }
    // Delete a merge request
    // 
    // Delete a merge request
    rpc DeleteV3ProjectsIdMerge_requestsMerge_request_id(DeleteV3ProjectsIdMerge_requestsMerge_request_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/merge_requests/{merge_request_id}"
      };
    }
    // Add spent time for a project merge_request
    // 
    // Add spent time for a project merge_request
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idAdd_spent_time(PostV3ProjectsIdMerge_requestsMerge_request_idAdd_spent_timeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/add_spent_time"
      };
    }
    // Get a list of project +awardable+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idAward_emoji(GetV3ProjectsIdMerge_requestsMerge_request_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji"
      };
    }
    // Award a new Emoji
    // 
    // This feature was introduced in 8.9
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idAward_emoji(PostV3ProjectsIdMerge_requestsMerge_request_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji"
      };
    }
    // Get a specific award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idAward_emojiAward_id(GetV3ProjectsIdMerge_requestsMerge_request_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}"
      };
    }
    // Delete a +awardables+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc DeleteV3ProjectsIdMerge_requestsMerge_request_idAward_emojiAward_id(DeleteV3ProjectsIdMerge_requestsMerge_request_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}"
      };
    }
    // Cancel merge if "Merge When Pipeline Succeeds" is enabled
    // 
    // Cancel merge if "Merge When Pipeline Succeeds" is enabled
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idCancel_merge_when_build_succeeds(PostV3ProjectsIdMerge_requestsMerge_request_idCancel_merge_when_build_succeedsRequest) returns (MergeRequest) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/cancel_merge_when_build_succeeds"
      };
    }
    // Show the merge request changes
    // 
    // Show the merge request changes
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idChanges(GetV3ProjectsIdMerge_requestsMerge_request_idChangesRequest) returns (MergeRequestChanges) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/changes"
      };
    }
    // List issues that will be closed on merge
    // 
    // List issues that will be closed on merge
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idCloses_issues(GetV3ProjectsIdMerge_requestsMerge_request_idCloses_issuesRequest) returns (MRNote) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/closes_issues"
      };
    }
    // Get the comments of a merge request
    // 
    // Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idComments(GetV3ProjectsIdMerge_requestsMerge_request_idCommentsRequest) returns (MRNote) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/comments"
      };
    }
    // Post a comment to a merge request
    // 
    // Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idComments(PostV3ProjectsIdMerge_requestsMerge_request_idCommentsRequest) returns (MRNote) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/comments"
      };
    }
    // Get the commits of a merge request
    // 
    // Get the commits of a merge request
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idCommits(GetV3ProjectsIdMerge_requestsMerge_request_idCommitsRequest) returns (RepoCommit) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/commits"
      };
    }
    // Merge a merge request
    // 
    // Merge a merge request
    rpc PutV3ProjectsIdMerge_requestsMerge_request_idMerge(PutV3ProjectsIdMerge_requestsMerge_request_idMergeRequest) returns (MergeRequest) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/merge"
      };
    }
    // Get a list of project +awardable+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emoji(GetV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji"
      };
    }
    // Award a new Emoji
    // 
    // This feature was introduced in 8.9
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emoji(PostV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji"
      };
    }
    // Get a specific award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiAward_id(GetV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}"
      };
    }
    // Delete a +awardables+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc DeleteV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiAward_id(DeleteV3ProjectsIdMerge_requestsMerge_request_idNotesNote_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}"
      };
    }
    // Reset spent time for a project merge_request
    // 
    // Reset spent time for a project merge_request
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idReset_spent_time(PostV3ProjectsIdMerge_requestsMerge_request_idReset_spent_timeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/reset_spent_time"
      };
    }
    // Reset the time estimate for a project merge_request
    // 
    // Reset the time estimate for a project merge_request
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idReset_time_estimate(PostV3ProjectsIdMerge_requestsMerge_request_idReset_time_estimateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/reset_time_estimate"
      };
    }
    // Set a time estimate for a project merge_request
    // 
    // Set a time estimate for a project merge_request
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idTime_estimate(PostV3ProjectsIdMerge_requestsMerge_request_idTime_estimateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/time_estimate"
      };
    }
    // Show time stats for a project merge_request
    // 
    // Show time stats for a project merge_request
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idTime_stats(GetV3ProjectsIdMerge_requestsMerge_request_idTime_statsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/time_stats"
      };
    }
    // Create a todo on an issuable
    // 
    // Create a todo on an issuable
    rpc PostV3ProjectsIdMerge_requestsMerge_request_idTodo(PostV3ProjectsIdMerge_requestsMerge_request_idTodoRequest) returns (Todo) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/todo"
      };
    }
    // Get a list of merge request diff versions
    // 
    // This feature was introduced in GitLab 8.12.
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idVersions(GetV3ProjectsIdMerge_requestsMerge_request_idVersionsRequest) returns (MergeRequestDiff) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/versions"
      };
    }
    // Get a single merge request diff version
    // 
    // This feature was introduced in GitLab 8.12.
    rpc GetV3ProjectsIdMerge_requestsMerge_request_idVersionsVersion_id(GetV3ProjectsIdMerge_requestsMerge_request_idVersionsVersion_idRequest) returns (MergeRequestDiffFull) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{merge_request_id}/versions/{version_id}"
      };
    }
    // Get a list of project +noteable+ notes
    // 
    // Get a list of project +noteable+ notes
    rpc GetV3ProjectsIdMerge_requestsNoteable_idNotes(GetV3ProjectsIdMerge_requestsNoteable_idNotesRequest) returns (Note) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{noteable_id}/notes"
      };
    }
    // Create a new +noteable+ note
    // 
    // Create a new +noteable+ note
    rpc PostV3ProjectsIdMerge_requestsNoteable_idNotes(PostV3ProjectsIdMerge_requestsNoteable_idNotesRequest) returns (Note) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{noteable_id}/notes"
      };
    }
    // Get a single +noteable+ note
    // 
    // Get a single +noteable+ note
    rpc GetV3ProjectsIdMerge_requestsNoteable_idNotesNote_id(GetV3ProjectsIdMerge_requestsNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}"
      };
    }
    // Update an existing +noteable+ note
    // 
    // Update an existing +noteable+ note
    rpc PutV3ProjectsIdMerge_requestsNoteable_idNotesNote_id(PutV3ProjectsIdMerge_requestsNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}"
      };
    }
    // Delete a +noteable+ note
    // 
    // Delete a +noteable+ note
    rpc DeleteV3ProjectsIdMerge_requestsNoteable_idNotesNote_id(DeleteV3ProjectsIdMerge_requestsNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}"
      };
    }
    // Subscribe to a resource
    // 
    // Subscribe to a resource
    rpc PostV3ProjectsIdMerge_requestsSubscribable_idSubscription(PostV3ProjectsIdMerge_requestsSubscribable_idSubscriptionRequest) returns (MergeRequest) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/merge_requests/{subscribable_id}/subscription"
      };
    }
    // Unsubscribe from a resource
    // 
    // Unsubscribe from a resource
    rpc DeleteV3ProjectsIdMerge_requestsSubscribable_idSubscription(DeleteV3ProjectsIdMerge_requestsSubscribable_idSubscriptionRequest) returns (MergeRequest) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/merge_requests/{subscribable_id}/subscription"
      };
    }
    // Get a list of project milestones
    // 
    // Get a list of project milestones
    rpc GetV3ProjectsIdMilestones(GetV3ProjectsIdMilestonesRequest) returns (Milestone) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/milestones"
      };
    }
    // Create a new project milestone
    // 
    // Create a new project milestone
    rpc PostV3ProjectsIdMilestones(PostV3ProjectsIdMilestonesRequest) returns (Milestone) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/milestones"
      };
    }
    // Get a single project milestone
    // 
    // Get a single project milestone
    rpc GetV3ProjectsIdMilestonesMilestone_id(GetV3ProjectsIdMilestonesMilestone_idRequest) returns (Milestone) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/milestones/{milestone_id}"
      };
    }
    // Update an existing project milestone
    // 
    // Update an existing project milestone
    rpc PutV3ProjectsIdMilestonesMilestone_id(PutV3ProjectsIdMilestonesMilestone_idRequest) returns (Milestone) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/milestones/{milestone_id}"
      };
    }
    // Get all issues for a single project milestone
    // 
    // Get all issues for a single project milestone
    rpc GetV3ProjectsIdMilestonesMilestone_idIssues(GetV3ProjectsIdMilestonesMilestone_idIssuesRequest) returns (Issue) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/milestones/{milestone_id}/issues"
      };
    }
    // Get project level notification level settings, defaults to Global
    // 
    // This feature was introduced in GitLab 8.12
    rpc GetV3ProjectsIdNotification_settings(GetV3ProjectsIdNotification_settingsRequest) returns (NotificationSetting) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/notification_settings"
      };
    }
    // Update project level notification level settings, defaults to Global
    // 
    // This feature was introduced in GitLab 8.12
    rpc PutV3ProjectsIdNotification_settings(PutV3ProjectsIdNotification_settingsRequest) returns (NotificationSetting) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/notification_settings"
      };
    }
    // Create a new pipeline
    // 
    // This feature was introduced in GitLab 8.14
    rpc PostV3ProjectsIdPipeline(PostV3ProjectsIdPipelineRequest) returns (Pipeline) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/pipeline"
      };
    }
    // Get all Pipelines of the project
    // 
    // This feature was introduced in GitLab 8.11.
    rpc GetV3ProjectsIdPipelines(GetV3ProjectsIdPipelinesRequest) returns (Pipeline) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/pipelines"
      };
    }
    // Gets a specific pipeline for the project
    // 
    // This feature was introduced in GitLab 8.11
    rpc GetV3ProjectsIdPipelinesPipeline_id(GetV3ProjectsIdPipelinesPipeline_idRequest) returns (Pipeline) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/pipelines/{pipeline_id}"
      };
    }
    // Cancel all builds in the pipeline
    // 
    // This feature was introduced in GitLab 8.11.
    rpc PostV3ProjectsIdPipelinesPipeline_idCancel(PostV3ProjectsIdPipelinesPipeline_idCancelRequest) returns (Pipeline) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/pipelines/{pipeline_id}/cancel"
      };
    }
    // Retry failed builds in the pipeline
    // 
    // This feature was introduced in GitLab 8.11.
    rpc PostV3ProjectsIdPipelinesPipeline_idRetry(PostV3ProjectsIdPipelinesPipeline_idRetryRequest) returns (Pipeline) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/pipelines/{pipeline_id}/retry"
      };
    }
    // Get an archive of the repository
    // 
    // Get an archive of the repository
    rpc GetV3ProjectsIdRepositoryArchive(GetV3ProjectsIdRepositoryArchiveRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/archive"
      };
    }
    // Get a raw file contents
    // 
    // Get a raw file contents
    rpc GetV3ProjectsIdRepositoryBlobsSha(GetV3ProjectsIdRepositoryBlobsShaRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/blobs/{sha}"
      };
    }
    // Get a project repository branches
    // 
    // Get a project repository branches
    rpc GetV3ProjectsIdRepositoryBranches(GetV3ProjectsIdRepositoryBranchesRequest) returns (RepoBranch) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/branches"
      };
    }
    // Create branch
    // 
    // Create branch
    rpc PostV3ProjectsIdRepositoryBranches(PostV3ProjectsIdRepositoryBranchesRequest) returns (RepoBranch) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/repository/branches"
      };
    }
    // Get a single branch
    // 
    // Get a single branch
    rpc GetV3ProjectsIdRepositoryBranchesBranch(GetV3ProjectsIdRepositoryBranchesBranchRequest) returns (RepoBranch) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/branches/{branch}"
      };
    }
    // Delete a branch
    // 
    // Delete a branch
    rpc DeleteV3ProjectsIdRepositoryBranchesBranch(DeleteV3ProjectsIdRepositoryBranchesBranchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/repository/branches/{branch}"
      };
    }
    // Protect a single branch
    // 
    // Protect a single branch
    rpc PutV3ProjectsIdRepositoryBranchesBranchProtect(PutV3ProjectsIdRepositoryBranchesBranchProtectRequest) returns (RepoBranch) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/repository/branches/{branch}/protect"
      };
    }
    // Unprotect a single branch
    // 
    // Unprotect a single branch
    rpc PutV3ProjectsIdRepositoryBranchesBranchUnprotect(PutV3ProjectsIdRepositoryBranchesBranchUnprotectRequest) returns (RepoBranch) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/repository/branches/{branch}/unprotect"
      };
    }
    // Get a project repository commits
    // 
    // Get a project repository commits
    rpc GetV3ProjectsIdRepositoryCommits(GetV3ProjectsIdRepositoryCommitsRequest) returns (RepoCommit) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/commits"
      };
    }
    // Commit multiple file changes as one commit
    // 
    // This feature was introduced in GitLab 8.13
    rpc PostV3ProjectsIdRepositoryCommits(PostV3ProjectsIdRepositoryCommitsRequest) returns (RepoCommitDetail) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/repository/commits"
      };
    }
    // Get a specific commit of a project
    // 
    // Get a specific commit of a project
    rpc GetV3ProjectsIdRepositoryCommitsSha(GetV3ProjectsIdRepositoryCommitsShaRequest) returns (RepoCommitDetail) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/commits/{sha}"
      };
    }
    // Get a raw file contents
    // 
    // Get a raw file contents
    rpc GetV3ProjectsIdRepositoryCommitsShaBlob(GetV3ProjectsIdRepositoryCommitsShaBlobRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/commits/{sha}/blob"
      };
    }
    // Get builds for a specific commit of a project
    // 
    // Get builds for a specific commit of a project
    rpc GetV3ProjectsIdRepositoryCommitsShaBuilds(GetV3ProjectsIdRepositoryCommitsShaBuildsRequest) returns (Build) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/commits/{sha}/builds"
      };
    }
    // Cherry pick commit into a branch
    // 
    // This feature was introduced in GitLab 8.15
    rpc PostV3ProjectsIdRepositoryCommitsShaCherry_pick(PostV3ProjectsIdRepositoryCommitsShaCherry_pickRequest) returns (RepoCommit) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/repository/commits/{sha}/cherry_pick"
      };
    }
    // Get a commit's comments
    // 
    // Get a commit's comments
    rpc GetV3ProjectsIdRepositoryCommitsShaComments(GetV3ProjectsIdRepositoryCommitsShaCommentsRequest) returns (CommitNote) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/commits/{sha}/comments"
      };
    }
    // Post comment to commit
    // 
    // Post comment to commit
    rpc PostV3ProjectsIdRepositoryCommitsShaComments(PostV3ProjectsIdRepositoryCommitsShaCommentsRequest) returns (CommitNote) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/repository/commits/{sha}/comments"
      };
    }
    // Get the diff for a specific commit of a project
    // 
    // Get the diff for a specific commit of a project
    rpc GetV3ProjectsIdRepositoryCommitsShaDiff(GetV3ProjectsIdRepositoryCommitsShaDiffRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/commits/{sha}/diff"
      };
    }
    // Get a commit's statuses
    // 
    // Get a commit's statuses
    rpc GetV3ProjectsIdRepositoryCommitsShaStatuses(GetV3ProjectsIdRepositoryCommitsShaStatusesRequest) returns (CommitStatus) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/commits/{sha}/statuses"
      };
    }
    // Compare two branches, tags, or commits
    // 
    // Compare two branches, tags, or commits
    rpc GetV3ProjectsIdRepositoryCompare(GetV3ProjectsIdRepositoryCompareRequest) returns (Compare) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/compare"
      };
    }
    // Get repository contributors
    // 
    // Get repository contributors
    rpc GetV3ProjectsIdRepositoryContributors(GetV3ProjectsIdRepositoryContributorsRequest) returns (Contributor) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/contributors"
      };
    }
    // Get a file from repository
    // 
    // Get a file from repository
    rpc GetV3ProjectsIdRepositoryFiles(GetV3ProjectsIdRepositoryFilesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/files"
      };
    }
    // Update existing file in repository
    // 
    // Update existing file in repository
    rpc PutV3ProjectsIdRepositoryFiles(PutV3ProjectsIdRepositoryFilesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/repository/files"
      };
    }
    // Create new file in repository
    // 
    // Create new file in repository
    rpc PostV3ProjectsIdRepositoryFiles(PostV3ProjectsIdRepositoryFilesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/repository/files"
      };
    }
    // Delete an existing file in repository
    // 
    // Delete an existing file in repository
    rpc DeleteV3ProjectsIdRepositoryFiles(DeleteV3ProjectsIdRepositoryFilesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/repository/files"
      };
    }
    rpc DeleteV3ProjectsIdRepositoryMerged_branches(DeleteV3ProjectsIdRepositoryMerged_branchesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/repository/merged_branches"
      };
    }
    // Get a raw blob contents by blob sha
    // 
    // Get a raw blob contents by blob sha
    rpc GetV3ProjectsIdRepositoryRaw_blobsSha(GetV3ProjectsIdRepositoryRaw_blobsShaRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/raw_blobs/{sha}"
      };
    }
    // Get a project repository tags
    // 
    // Get a project repository tags
    rpc GetV3ProjectsIdRepositoryTags(GetV3ProjectsIdRepositoryTagsRequest) returns (RepoTag) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/tags"
      };
    }
    // Create a new repository tag
    // 
    // Create a new repository tag
    rpc PostV3ProjectsIdRepositoryTags(PostV3ProjectsIdRepositoryTagsRequest) returns (RepoTag) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/repository/tags"
      };
    }
    // Get a single repository tag
    // 
    // Get a single repository tag
    rpc GetV3ProjectsIdRepositoryTagsTag_name(GetV3ProjectsIdRepositoryTagsTag_nameRequest) returns (RepoTag) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/tags/{tag_name}"
      };
    }
    // Delete a repository tag
    // 
    // Delete a repository tag
    rpc DeleteV3ProjectsIdRepositoryTagsTag_name(DeleteV3ProjectsIdRepositoryTagsTag_nameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/repository/tags/{tag_name}"
      };
    }
    // Update a tag's release note
    // 
    // Update a tag's release note
    rpc PutV3ProjectsIdRepositoryTagsTag_nameRelease(PutV3ProjectsIdRepositoryTagsTag_nameReleaseRequest) returns (Release) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/repository/tags/{tag_name}/release"
      };
    }
    // Add a release note to a tag
    // 
    // Add a release note to a tag
    rpc PostV3ProjectsIdRepositoryTagsTag_nameRelease(PostV3ProjectsIdRepositoryTagsTag_nameReleaseRequest) returns (Release) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/repository/tags/{tag_name}/release"
      };
    }
    // Get a project repository tree
    // 
    // Get a project repository tree
    rpc GetV3ProjectsIdRepositoryTree(GetV3ProjectsIdRepositoryTreeRequest) returns (RepoTreeObject) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/repository/tree"
      };
    }
    // Get runners available for project
    // 
    // Get runners available for project
    rpc GetV3ProjectsIdRunners(GetV3ProjectsIdRunnersRequest) returns (Runner) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/runners"
      };
    }
    // Enable a runner for a project
    // 
    // Enable a runner for a project
    rpc PostV3ProjectsIdRunners(PostV3ProjectsIdRunnersRequest) returns (Runner) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/runners"
      };
    }
    // Disable project's runner
    // 
    // Disable project's runner
    rpc DeleteV3ProjectsIdRunnersRunner_id(DeleteV3ProjectsIdRunnersRunner_idRequest) returns (Runner) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/runners/{runner_id}"
      };
    }
    // Set asana service for project
    // 
    // Set asana service for project
    rpc PutV3ProjectsIdServicesAsana(PutV3ProjectsIdServicesAsanaRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/asana"
      };
    }
    // Set assembla service for project
    // 
    // Set assembla service for project
    rpc PutV3ProjectsIdServicesAssembla(PutV3ProjectsIdServicesAssemblaRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/assembla"
      };
    }
    // Set bamboo service for project
    // 
    // Set bamboo service for project
    rpc PutV3ProjectsIdServicesBamboo(PutV3ProjectsIdServicesBambooRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/bamboo"
      };
    }
    // Set bugzilla service for project
    // 
    // Set bugzilla service for project
    rpc PutV3ProjectsIdServicesBugzilla(PutV3ProjectsIdServicesBugzillaRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/bugzilla"
      };
    }
    // Set buildkite service for project
    // 
    // Set buildkite service for project
    rpc PutV3ProjectsIdServicesBuildkite(PutV3ProjectsIdServicesBuildkiteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/buildkite"
      };
    }
    // Set builds-email service for project
    // 
    // Set builds-email service for project
    rpc PutV3ProjectsIdServicesBuildsEmail(PutV3ProjectsIdServicesBuildsEmailRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/builds-email"
      };
    }
    // Set campfire service for project
    // 
    // Set campfire service for project
    rpc PutV3ProjectsIdServicesCampfire(PutV3ProjectsIdServicesCampfireRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/campfire"
      };
    }
    // Set custom-issue-tracker service for project
    // 
    // Set custom-issue-tracker service for project
    rpc PutV3ProjectsIdServicesCustomIssueTracker(PutV3ProjectsIdServicesCustomIssueTrackerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/custom-issue-tracker"
      };
    }
    // Set drone-ci service for project
    // 
    // Set drone-ci service for project
    rpc PutV3ProjectsIdServicesDroneCi(PutV3ProjectsIdServicesDroneCiRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/drone-ci"
      };
    }
    // Set emails-on-push service for project
    // 
    // Set emails-on-push service for project
    rpc PutV3ProjectsIdServicesEmailsOnPush(PutV3ProjectsIdServicesEmailsOnPushRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/emails-on-push"
      };
    }
    // Set external-wiki service for project
    // 
    // Set external-wiki service for project
    rpc PutV3ProjectsIdServicesExternalWiki(PutV3ProjectsIdServicesExternalWikiRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/external-wiki"
      };
    }
    // Set flowdock service for project
    // 
    // Set flowdock service for project
    rpc PutV3ProjectsIdServicesFlowdock(PutV3ProjectsIdServicesFlowdockRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/flowdock"
      };
    }
    // Set gemnasium service for project
    // 
    // Set gemnasium service for project
    rpc PutV3ProjectsIdServicesGemnasium(PutV3ProjectsIdServicesGemnasiumRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/gemnasium"
      };
    }
    // Set hipchat service for project
    // 
    // Set hipchat service for project
    rpc PutV3ProjectsIdServicesHipchat(PutV3ProjectsIdServicesHipchatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/hipchat"
      };
    }
    // Set irker service for project
    // 
    // Set irker service for project
    rpc PutV3ProjectsIdServicesIrker(PutV3ProjectsIdServicesIrkerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/irker"
      };
    }
    // Set jira service for project
    // 
    // Set jira service for project
    rpc PutV3ProjectsIdServicesJira(PutV3ProjectsIdServicesJiraRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/jira"
      };
    }
    // Set kubernetes service for project
    // 
    // Set kubernetes service for project
    rpc PutV3ProjectsIdServicesKubernetes(PutV3ProjectsIdServicesKubernetesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/kubernetes"
      };
    }
    // Set mattermost service for project
    // 
    // Set mattermost service for project
    rpc PutV3ProjectsIdServicesMattermost(PutV3ProjectsIdServicesMattermostRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/mattermost"
      };
    }
    // Set mattermost-slash-commands service for project
    // 
    // Set mattermost-slash-commands service for project
    rpc PutV3ProjectsIdServicesMattermostSlashCommands(PutV3ProjectsIdServicesMattermostSlashCommandsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/mattermost-slash-commands"
      };
    }
    // Trigger a slash command for mattermost-slash-commands
    // 
    // Added in GitLab 8.13
    rpc PostV3ProjectsIdServicesMattermost_slash_commandsTrigger(PostV3ProjectsIdServicesMattermost_slash_commandsTriggerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/services/mattermost_slash_commands/trigger"
      };
    }
    // Set pipelines-email service for project
    // 
    // Set pipelines-email service for project
    rpc PutV3ProjectsIdServicesPipelinesEmail(PutV3ProjectsIdServicesPipelinesEmailRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/pipelines-email"
      };
    }
    // Set pivotaltracker service for project
    // 
    // Set pivotaltracker service for project
    rpc PutV3ProjectsIdServicesPivotaltracker(PutV3ProjectsIdServicesPivotaltrackerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/pivotaltracker"
      };
    }
    // Set pushover service for project
    // 
    // Set pushover service for project
    rpc PutV3ProjectsIdServicesPushover(PutV3ProjectsIdServicesPushoverRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/pushover"
      };
    }
    // Set redmine service for project
    // 
    // Set redmine service for project
    rpc PutV3ProjectsIdServicesRedmine(PutV3ProjectsIdServicesRedmineRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/redmine"
      };
    }
    // Set slack service for project
    // 
    // Set slack service for project
    rpc PutV3ProjectsIdServicesSlack(PutV3ProjectsIdServicesSlackRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/slack"
      };
    }
    // Set slack-slash-commands service for project
    // 
    // Set slack-slash-commands service for project
    rpc PutV3ProjectsIdServicesSlackSlashCommands(PutV3ProjectsIdServicesSlackSlashCommandsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/slack-slash-commands"
      };
    }
    // Trigger a slash command for slack-slash-commands
    // 
    // Added in GitLab 8.13
    rpc PostV3ProjectsIdServicesSlack_slash_commandsTrigger(PostV3ProjectsIdServicesSlack_slash_commandsTriggerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/services/slack_slash_commands/trigger"
      };
    }
    // Set teamcity service for project
    // 
    // Set teamcity service for project
    rpc PutV3ProjectsIdServicesTeamcity(PutV3ProjectsIdServicesTeamcityRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/services/teamcity"
      };
    }
    // Get the service settings for project
    // 
    // Get the service settings for project
    rpc GetV3ProjectsIdServicesService_slug(GetV3ProjectsIdServicesService_slugRequest) returns (ProjectService) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/services/{service_slug}"
      };
    }
    // Delete a service for project
    // 
    // Delete a service for project
    rpc DeleteV3ProjectsIdServicesService_slug(DeleteV3ProjectsIdServicesService_slugRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/services/{service_slug}"
      };
    }
    // Share the project with a group
    // 
    // Share the project with a group
    rpc PostV3ProjectsIdShare(PostV3ProjectsIdShareRequest) returns (ProjectGroupLink) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/share"
      };
    }
    rpc DeleteV3ProjectsIdShareGroup_id(DeleteV3ProjectsIdShareGroup_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/share/{group_id}"
      };
    }
    // Get all project snippets
    // 
    // Get all project snippets
    rpc GetV3ProjectsIdSnippets(GetV3ProjectsIdSnippetsRequest) returns (ProjectSnippet) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets"
      };
    }
    // Create a new project snippet
    // 
    // Create a new project snippet
    rpc PostV3ProjectsIdSnippets(PostV3ProjectsIdSnippetsRequest) returns (ProjectSnippet) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/snippets"
      };
    }
    // Get a list of project +noteable+ notes
    // 
    // Get a list of project +noteable+ notes
    rpc GetV3ProjectsIdSnippetsNoteable_idNotes(GetV3ProjectsIdSnippetsNoteable_idNotesRequest) returns (Note) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets/{noteable_id}/notes"
      };
    }
    // Create a new +noteable+ note
    // 
    // Create a new +noteable+ note
    rpc PostV3ProjectsIdSnippetsNoteable_idNotes(PostV3ProjectsIdSnippetsNoteable_idNotesRequest) returns (Note) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/snippets/{noteable_id}/notes"
      };
    }
    // Get a single +noteable+ note
    // 
    // Get a single +noteable+ note
    rpc GetV3ProjectsIdSnippetsNoteable_idNotesNote_id(GetV3ProjectsIdSnippetsNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}"
      };
    }
    // Update an existing +noteable+ note
    // 
    // Update an existing +noteable+ note
    rpc PutV3ProjectsIdSnippetsNoteable_idNotesNote_id(PutV3ProjectsIdSnippetsNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}"
      };
    }
    // Delete a +noteable+ note
    // 
    // Delete a +noteable+ note
    rpc DeleteV3ProjectsIdSnippetsNoteable_idNotesNote_id(DeleteV3ProjectsIdSnippetsNoteable_idNotesNote_idRequest) returns (Note) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}"
      };
    }
    // Get a single project snippet
    // 
    // Get a single project snippet
    rpc GetV3ProjectsIdSnippetsSnippet_id(GetV3ProjectsIdSnippetsSnippet_idRequest) returns (ProjectSnippet) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets/{snippet_id}"
      };
    }
    // Update an existing project snippet
    // 
    // Update an existing project snippet
    rpc PutV3ProjectsIdSnippetsSnippet_id(PutV3ProjectsIdSnippetsSnippet_idRequest) returns (ProjectSnippet) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/snippets/{snippet_id}"
      };
    }
    // Delete a project snippet
    // 
    // Delete a project snippet
    rpc DeleteV3ProjectsIdSnippetsSnippet_id(DeleteV3ProjectsIdSnippetsSnippet_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/snippets/{snippet_id}"
      };
    }
    // Get a list of project +awardable+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdSnippetsSnippet_idAward_emoji(GetV3ProjectsIdSnippetsSnippet_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets/{snippet_id}/award_emoji"
      };
    }
    // Award a new Emoji
    // 
    // This feature was introduced in 8.9
    rpc PostV3ProjectsIdSnippetsSnippet_idAward_emoji(PostV3ProjectsIdSnippetsSnippet_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/snippets/{snippet_id}/award_emoji"
      };
    }
    // Get a specific award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdSnippetsSnippet_idAward_emojiAward_id(GetV3ProjectsIdSnippetsSnippet_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}"
      };
    }
    // Delete a +awardables+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc DeleteV3ProjectsIdSnippetsSnippet_idAward_emojiAward_id(DeleteV3ProjectsIdSnippetsSnippet_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}"
      };
    }
    // Get a list of project +awardable+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emoji(GetV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji"
      };
    }
    // Award a new Emoji
    // 
    // This feature was introduced in 8.9
    rpc PostV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emoji(PostV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji"
      };
    }
    // Get a specific award emoji
    // 
    // This feature was introduced in 8.9
    rpc GetV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiAward_id(GetV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}"
      };
    }
    // Delete a +awardables+ award emoji
    // 
    // This feature was introduced in 8.9
    rpc DeleteV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiAward_id(DeleteV3ProjectsIdSnippetsSnippet_idNotesNote_idAward_emojiAward_idRequest) returns (AwardEmoji) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}"
      };
    }
    // Get a raw project snippet
    // 
    // Get a raw project snippet
    rpc GetV3ProjectsIdSnippetsSnippet_idRaw(GetV3ProjectsIdSnippetsSnippet_idRawRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/snippets/{snippet_id}/raw"
      };
    }
    // Star a project
    // 
    // Star a project
    rpc PostV3ProjectsIdStar(PostV3ProjectsIdStarRequest) returns (Project) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/star"
      };
    }
    // Unstar a project
    // 
    // Unstar a project
    rpc DeleteV3ProjectsIdStar(DeleteV3ProjectsIdStarRequest) returns (Project) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/star"
      };
    }
    // Post status to a commit
    // 
    // Post status to a commit
    rpc PostV3ProjectsIdStatusesSha(PostV3ProjectsIdStatusesShaRequest) returns (CommitStatus) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/statuses/{sha}"
      };
    }
    // Get triggers list
    // 
    // Get triggers list
    rpc GetV3ProjectsIdTriggers(GetV3ProjectsIdTriggersRequest) returns (Trigger) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/triggers"
      };
    }
    // Create a trigger
    // 
    // Create a trigger
    rpc PostV3ProjectsIdTriggers(PostV3ProjectsIdTriggersRequest) returns (Trigger) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/triggers"
      };
    }
    // Get specific trigger of a project
    // 
    // Get specific trigger of a project
    rpc GetV3ProjectsIdTriggersToken(GetV3ProjectsIdTriggersTokenRequest) returns (Trigger) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/triggers/{token}"
      };
    }
    // Delete a trigger
    // 
    // Delete a trigger
    rpc DeleteV3ProjectsIdTriggersToken(DeleteV3ProjectsIdTriggersTokenRequest) returns (Trigger) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/triggers/{token}"
      };
    }
    // Unarchive a project
    // 
    // Unarchive a project
    rpc PostV3ProjectsIdUnarchive(PostV3ProjectsIdUnarchiveRequest) returns (Project) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/unarchive"
      };
    }
    // Upload a file
    // 
    // Upload a file
    rpc PostV3ProjectsIdUploads(PostV3ProjectsIdUploadsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/uploads"
      };
    }
    // Get the users list of a project
    // 
    // Get the users list of a project
    rpc GetV3ProjectsIdUsers(GetV3ProjectsIdUsersRequest) returns (UserBasic) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/users"
      };
    }
    // Get project variables
    // 
    // Get project variables
    rpc GetV3ProjectsIdVariables(GetV3ProjectsIdVariablesRequest) returns (Variable) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/variables"
      };
    }
    // Create a new variable in a project
    // 
    // Create a new variable in a project
    rpc PostV3ProjectsIdVariables(PostV3ProjectsIdVariablesRequest) returns (Variable) {
      option (google.api.http) = {
        post: "/api/v3/projects/{id}/variables"
      };
    }
    // Get a specific variable from a project
    // 
    // Get a specific variable from a project
    rpc GetV3ProjectsIdVariablesKey(GetV3ProjectsIdVariablesKeyRequest) returns (Variable) {
      option (google.api.http) = {
        get: "/api/v3/projects/{id}/variables/{key}"
      };
    }
    // Update an existing variable from a project
    // 
    // Update an existing variable from a project
    rpc PutV3ProjectsIdVariablesKey(PutV3ProjectsIdVariablesKeyRequest) returns (Variable) {
      option (google.api.http) = {
        put: "/api/v3/projects/{id}/variables/{key}"
      };
    }
    // Delete an existing variable from a project
    // 
    // Delete an existing variable from a project
    rpc DeleteV3ProjectsIdVariablesKey(DeleteV3ProjectsIdVariablesKeyRequest) returns (Variable) {
      option (google.api.http) = {
        delete: "/api/v3/projects/{id}/variables/{key}"
      };
    }
    // Get runners available for user
    // 
    // Get runners available for user
    rpc GetV3Runners(GetV3RunnersRequest) returns (Runner) {
      option (google.api.http) = {
        get: "/api/v3/runners"
      };
    }
    // Get all runners - shared and specific
    // 
    // Get all runners - shared and specific
    rpc GetV3RunnersAll(GetV3RunnersAllRequest) returns (Runner) {
      option (google.api.http) = {
        get: "/api/v3/runners/all"
      };
    }
    // Get runner's details
    // 
    // Get runner's details
    rpc GetV3RunnersId(GetV3RunnersIdRequest) returns (RunnerDetails) {
      option (google.api.http) = {
        get: "/api/v3/runners/{id}"
      };
    }
    // Update runner's details
    // 
    // Update runner's details
    rpc PutV3RunnersId(PutV3RunnersIdRequest) returns (RunnerDetails) {
      option (google.api.http) = {
        put: "/api/v3/runners/{id}"
      };
    }
    // Remove a runner
    // 
    // Remove a runner
    rpc DeleteV3RunnersId(DeleteV3RunnersIdRequest) returns (Runner) {
      option (google.api.http) = {
        delete: "/api/v3/runners/{id}"
      };
    }
    // Login to get token
    // 
    // Login to get token
    rpc PostV3Session(PostV3SessionRequest) returns (UserWithPrivateToken) {
      option (google.api.http) = {
        post: "/api/v3/session"
      };
    }
    // Get the Sidekiq Compound metrics. Includes queue, process, and job statistics
    // 
    // Get the Sidekiq Compound metrics. Includes queue, process, and job statistics
    rpc GetV3SidekiqCompound_metrics(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/sidekiq/compound_metrics"
      };
    }
    // Get the Sidekiq job statistics
    // 
    // Get the Sidekiq job statistics
    rpc GetV3SidekiqJob_stats(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/sidekiq/job_stats"
      };
    }
    // Get the Sidekiq process metrics
    // 
    // Get the Sidekiq process metrics
    rpc GetV3SidekiqProcess_metrics(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/sidekiq/process_metrics"
      };
    }
    // Get the Sidekiq queue metrics
    // 
    // Get the Sidekiq queue metrics
    rpc GetV3SidekiqQueue_metrics(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/sidekiq/queue_metrics"
      };
    }
    // Get a snippets list for authenticated user
    // 
    // This feature was introduced in GitLab 8.15.
    rpc GetV3Snippets(GetV3SnippetsRequest) returns (PersonalSnippet) {
      option (google.api.http) = {
        get: "/api/v3/snippets"
      };
    }
    // Create new snippet
    // 
    // This feature was introduced in GitLab 8.15.
    rpc PostV3Snippets(PostV3SnippetsRequest) returns (PersonalSnippet) {
      option (google.api.http) = {
        post: "/api/v3/snippets"
      };
    }
    // List all public snippets current_user has access to
    // 
    // This feature was introduced in GitLab 8.15.
    rpc GetV3SnippetsPublic(GetV3SnippetsPublicRequest) returns (PersonalSnippet) {
      option (google.api.http) = {
        get: "/api/v3/snippets/public"
      };
    }
    // Get a single snippet
    // 
    // This feature was introduced in GitLab 8.15.
    rpc GetV3SnippetsId(GetV3SnippetsIdRequest) returns (PersonalSnippet) {
      option (google.api.http) = {
        get: "/api/v3/snippets/{id}"
      };
    }
    // Update an existing snippet
    // 
    // This feature was introduced in GitLab 8.15.
    rpc PutV3SnippetsId(PutV3SnippetsIdRequest) returns (PersonalSnippet) {
      option (google.api.http) = {
        put: "/api/v3/snippets/{id}"
      };
    }
    // Remove snippet
    // 
    // This feature was introduced in GitLab 8.15.
    rpc DeleteV3SnippetsId(DeleteV3SnippetsIdRequest) returns (PersonalSnippet) {
      option (google.api.http) = {
        delete: "/api/v3/snippets/{id}"
      };
    }
    // Get a raw snippet
    // 
    // This feature was introduced in GitLab 8.15.
    rpc GetV3SnippetsIdRaw(GetV3SnippetsIdRawRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/snippets/{id}/raw"
      };
    }
    // Get the list of the available template
    // 
    // This feature was introduced in GitLab 8.15.
    rpc GetV3TemplatesDockerfiles(google.protobuf.Empty) returns (TemplatesList) {
      option (google.api.http) = {
        get: "/api/v3/templates/dockerfiles"
      };
    }
    // Get the text for a specific template present in local filesystem
    // 
    // This feature was introduced in GitLab 8.15.
    rpc GetV3TemplatesDockerfilesName(GetV3TemplatesDockerfilesNameRequest) returns (Template) {
      option (google.api.http) = {
        get: "/api/v3/templates/dockerfiles/{name}"
      };
    }
    // Get the list of the available template
    // 
    // This feature was introduced in GitLab 8.8.
    rpc GetV3TemplatesGitignores(google.protobuf.Empty) returns (TemplatesList) {
      option (google.api.http) = {
        get: "/api/v3/templates/gitignores"
      };
    }
    // Get the text for a specific template present in local filesystem
    // 
    // This feature was introduced in GitLab 8.8.
    rpc GetV3TemplatesGitignoresName(GetV3TemplatesGitignoresNameRequest) returns (Template) {
      option (google.api.http) = {
        get: "/api/v3/templates/gitignores/{name}"
      };
    }
    // Get the list of the available template
    // 
    // This feature was introduced in GitLab 8.9.
    rpc GetV3TemplatesGitlab_ci_ymls(google.protobuf.Empty) returns (TemplatesList) {
      option (google.api.http) = {
        get: "/api/v3/templates/gitlab_ci_ymls"
      };
    }
    // Get the text for a specific template present in local filesystem
    // 
    // This feature was introduced in GitLab 8.9.
    rpc GetV3TemplatesGitlab_ci_ymlsName(GetV3TemplatesGitlab_ci_ymlsNameRequest) returns (Template) {
      option (google.api.http) = {
        get: "/api/v3/templates/gitlab_ci_ymls/{name}"
      };
    }
    // Get the list of the available license template
    // 
    // This feature was introduced in GitLab 8.7.
    rpc GetV3TemplatesLicenses(GetV3TemplatesLicensesRequest) returns (RepoLicense) {
      option (google.api.http) = {
        get: "/api/v3/templates/licenses"
      };
    }
    // Get the text for a specific license
    // 
    // This feature was introduced in GitLab 8.7.
    rpc GetV3TemplatesLicensesName(GetV3TemplatesLicensesNameRequest) returns (RepoLicense) {
      option (google.api.http) = {
        get: "/api/v3/templates/licenses/{name}"
      };
    }
    // Get a todo list
    // 
    // Get a todo list
    rpc GetV3Todos(GetV3TodosRequest) returns (Todo) {
      option (google.api.http) = {
        get: "/api/v3/todos"
      };
    }
    // Mark all todos as done
    // 
    // Mark all todos as done
    rpc DeleteV3Todos(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/todos"
      };
    }
    // Mark a todo as done
    // 
    // Mark a todo as done
    rpc DeleteV3TodosId(DeleteV3TodosIdRequest) returns (Todo) {
      option (google.api.http) = {
        delete: "/api/v3/todos/{id}"
      };
    }
    // Get the currently authenticated user
    // 
    // Get the currently authenticated user
    rpc GetV3User(google.protobuf.Empty) returns (UserPublic) {
      option (google.api.http) = {
        get: "/api/v3/user"
      };
    }
    // Get the currently authenticated user's email addresses
    // 
    // Get the currently authenticated user's email addresses
    rpc GetV3UserEmails(google.protobuf.Empty) returns (Email) {
      option (google.api.http) = {
        get: "/api/v3/user/emails"
      };
    }
    // Add new email address to the currently authenticated user
    // 
    // Add new email address to the currently authenticated user
    rpc PostV3UserEmails(PostV3UserEmailsRequest) returns (Email) {
      option (google.api.http) = {
        post: "/api/v3/user/emails"
      };
    }
    // Get a single email address owned by the currently authenticated user
    // 
    // Get a single email address owned by the currently authenticated user
    rpc GetV3UserEmailsEmail_id(GetV3UserEmailsEmail_idRequest) returns (Email) {
      option (google.api.http) = {
        get: "/api/v3/user/emails/{email_id}"
      };
    }
    // Delete an email address from the currently authenticated user
    // 
    // Delete an email address from the currently authenticated user
    rpc DeleteV3UserEmailsEmail_id(DeleteV3UserEmailsEmail_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v3/user/emails/{email_id}"
      };
    }
    // Get the currently authenticated user's SSH keys
    // 
    // Get the currently authenticated user's SSH keys
    rpc GetV3UserKeys(google.protobuf.Empty) returns (SSHKey) {
      option (google.api.http) = {
        get: "/api/v3/user/keys"
      };
    }
    // Add a new SSH key to the currently authenticated user
    // 
    // Add a new SSH key to the currently authenticated user
    rpc PostV3UserKeys(PostV3UserKeysRequest) returns (SSHKey) {
      option (google.api.http) = {
        post: "/api/v3/user/keys"
      };
    }
    // Get a single key owned by currently authenticated user
    // 
    // Get a single key owned by currently authenticated user
    rpc GetV3UserKeysKey_id(GetV3UserKeysKey_idRequest) returns (SSHKey) {
      option (google.api.http) = {
        get: "/api/v3/user/keys/{key_id}"
      };
    }
    // Delete an SSH key from the currently authenticated user
    // 
    // Delete an SSH key from the currently authenticated user
    rpc DeleteV3UserKeysKey_id(DeleteV3UserKeysKey_idRequest) returns (SSHKey) {
      option (google.api.http) = {
        delete: "/api/v3/user/keys/{key_id}"
      };
    }
    // Get the list of users
    // 
    // Get the list of users
    rpc GetV3Users(GetV3UsersRequest) returns (UserBasic) {
      option (google.api.http) = {
        get: "/api/v3/users"
      };
    }
    // Create a user. Available only for admins.
    // 
    // Create a user. Available only for admins.
    rpc PostV3Users(PostV3UsersRequest) returns (UserPublic) {
      option (google.api.http) = {
        post: "/api/v3/users"
      };
    }
    // Get a single user
    // 
    // Get a single user
    rpc GetV3UsersId(GetV3UsersIdRequest) returns (UserBasic) {
      option (google.api.http) = {
        get: "/api/v3/users/{id}"
      };
    }
    // Update a user. Available only for admins.
    // 
    // Update a user. Available only for admins.
    rpc PutV3UsersId(PutV3UsersIdRequest) returns (UserPublic) {
      option (google.api.http) = {
        put: "/api/v3/users/{id}"
      };
    }
    // Delete a user. Available only for admins.
    // 
    // Delete a user. Available only for admins.
    rpc DeleteV3UsersId(DeleteV3UsersIdRequest) returns (Email) {
      option (google.api.http) = {
        delete: "/api/v3/users/{id}"
      };
    }
    // Block a user. Available only for admins.
    // 
    // Block a user. Available only for admins.
    rpc PutV3UsersIdBlock(PutV3UsersIdBlockRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/users/{id}/block"
      };
    }
    // Get the emails addresses of a specified user. Available only for admins.
    // 
    // Get the emails addresses of a specified user. Available only for admins.
    rpc GetV3UsersIdEmails(GetV3UsersIdEmailsRequest) returns (Email) {
      option (google.api.http) = {
        get: "/api/v3/users/{id}/emails"
      };
    }
    // Add an email address to a specified user. Available only for admins.
    // 
    // Add an email address to a specified user. Available only for admins.
    rpc PostV3UsersIdEmails(PostV3UsersIdEmailsRequest) returns (Email) {
      option (google.api.http) = {
        post: "/api/v3/users/{id}/emails"
      };
    }
    // Delete an email address of a specified user. Available only for admins.
    // 
    // Delete an email address of a specified user. Available only for admins.
    rpc DeleteV3UsersIdEmailsEmail_id(DeleteV3UsersIdEmailsEmail_idRequest) returns (Email) {
      option (google.api.http) = {
        delete: "/api/v3/users/{id}/emails/{email_id}"
      };
    }
    // Get the contribution events of a specified user
    // 
    // This feature was introduced in GitLab 8.13.
    rpc GetV3UsersIdEvents(GetV3UsersIdEventsRequest) returns (Event) {
      option (google.api.http) = {
        get: "/api/v3/users/{id}/events"
      };
    }
    // Get the SSH keys of a specified user. Available only for admins.
    // 
    // Get the SSH keys of a specified user. Available only for admins.
    rpc GetV3UsersIdKeys(GetV3UsersIdKeysRequest) returns (SSHKey) {
      option (google.api.http) = {
        get: "/api/v3/users/{id}/keys"
      };
    }
    // Add an SSH key to a specified user. Available only for admins.
    // 
    // Add an SSH key to a specified user. Available only for admins.
    rpc PostV3UsersIdKeys(PostV3UsersIdKeysRequest) returns (SSHKey) {
      option (google.api.http) = {
        post: "/api/v3/users/{id}/keys"
      };
    }
    // Delete an existing SSH key from a specified user. Available only for admins.
    // 
    // Delete an existing SSH key from a specified user. Available only for admins.
    rpc DeleteV3UsersIdKeysKey_id(DeleteV3UsersIdKeysKey_idRequest) returns (SSHKey) {
      option (google.api.http) = {
        delete: "/api/v3/users/{id}/keys/{key_id}"
      };
    }
    // Unblock a user. Available only for admins.
    // 
    // Unblock a user. Available only for admins.
    rpc PutV3UsersIdUnblock(PutV3UsersIdUnblockRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/api/v3/users/{id}/unblock"
      };
    }
    // Get the version information of the GitLab instance.
    // 
    // This feature was introduced in GitLab 8.13.
    rpc GetV3Version(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v3/version"
      };
    }
}

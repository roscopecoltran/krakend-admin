backends:
- group: rebilly-2-1
  url_pattern: /v2.1/3dsecure
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-3dsecure
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/3dsecure/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - amount
  - cavv
  - currency
  - eci
  - enrolled
  - enrollmentEci
  - payerAuthResponseStatus
  - signatureVerification
  - xid
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-3dsecure-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      amount: amount
      cavv: cavv
      currency: currency
      eci: eci
      enrolled: enrolled
      enrollmentEci: enrollmentEci
      payerAuthResponseStatus: payerAuthResponseStatus
      signatureVerification: signatureVerification
      xid: xid
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/activation/{token}
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-activation-token
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/api-keys
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-api-keys
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/api-keys/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - apiUser
  - datetimeFormat
  - description
  - secretKey
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-api-keys-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      apiUser: apiUser
      datetimeFormat: datetimeFormat
      description: description
      secretKey: secretKey
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/attachments
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-attachments
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/attachments/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - description
  - fileId
  - name
  - relatedId
  - relatedType
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-attachments-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      description: description
      fileId: fileId
      name: name
      relatedId: relatedId
      relatedType: relatedType
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/authentication-options
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-authentication-options
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/authentication-tokens
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-authentication-tokens
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/authentication-tokens/{token}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - expiredTime
  - password
  - token
  - username
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-authentication-tokens-token
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      expiredTime: expiredTime
      password: password
      token: token
      username: username
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/bank-accounts
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-bank-accounts
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/bank-accounts/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - accountNumber
  - accountType
  - bankName
  - routingNumber
  - status
  - token
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-bank-accounts-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      accountNumber: accountNumber
      accountType: accountType
      bankName: bankName
      routingNumber: routingNumber
      status: status
      token: token
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/bank-accounts/{id}/deactivation
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-bank-accounts-id-deactivation
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/blacklists
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-blacklists
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/blacklists/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - expiredTime
  - value
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-blacklists-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      expiredTime: expiredTime
      value: value
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/checkout-pages
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-checkout-pages
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/checkout-pages/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - allowCustomCustomerId
  - isActive
  - name
  - planId
  - redirectTimeout
  - redirectUrl
  - uriPath
  - websiteId
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-checkout-pages-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      allowCustomCustomerId: allowCustomCustomerId
      isActive: isActive
      name: name
      planId: planId
      redirectTimeout: redirectTimeout
      redirectUrl: redirectUrl
      uriPath: uriPath
      websiteId: websiteId
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/contacts
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-contacts
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/contacts/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - address
  - address2
  - city
  - country
  - firstName
  - isOutdated
  - lastName
  - organization
  - postalCode
  - region
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-contacts-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      address: address
      address2: address2
      city: city
      country: country
      firstName: firstName
      isOutdated: isOutdated
      lastName: lastName
      organization: organization
      postalCode: postalCode
      region: region
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/coupons-redemptions
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-coupons-redemptions
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/coupons-redemptions/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - additionalRestrictions
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-coupons-redemptions-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      additionalRestrictions: additionalRestrictions
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/coupons-redemptions/{id}/cancel
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-coupons-redemptions-id-cancel
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/coupons
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-coupons
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/coupons/{redemptionCode}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - description
  - expiredTime
  - issuedTime
  - redemptionsCount
  - restrictions
  - status
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-coupons-redemptioncode
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      description: description
      expiredTime: expiredTime
      issuedTime: issuedTime
      redemptionsCount: redemptionsCount
      restrictions: restrictions
      status: status
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/coupons/{redemptionCode}/expiration
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-coupons-redemptioncode-expiration
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/credential-hashes/emails
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-credential-hashes-emails
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/credential-hashes/emails/{hash}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - encryption
  - host
  - port
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-credential-hashes-emails-hash
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      encryption: encryption
      host: host
      port: port
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/credential-hashes/webhooks
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-credential-hashes-webhooks
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/credential-hashes/webhooks/{hash}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - host
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-credential-hashes-webhooks-hash
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      host: host
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/credentials
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-credentials
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/credentials/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - customerId
  - expiredTime
  - password
  - username
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-credentials-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      customerId: customerId
      expiredTime: expiredTime
      password: password
      username: username
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/custom-events
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-custom-events
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/custom-events/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - chronology
  - description
  - eventType
  - rulesCount
  - title
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-custom-events-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      chronology: chronology
      description: description
      eventType: eventType
      rulesCount: rulesCount
      title: title
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/custom-events/{id}/rules
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - rules
  - version
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-custom-events-id-rules
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      rules: rules
      version: version
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/custom-events/{id}/rules/history
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-custom-events-id-rules-history
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/custom-events/{id}/rules/history/{version}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - version
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-custom-events-id-rules-history-version
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      version: version
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/custom-events/{id}/rules/versions/{version}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - rules
  - version
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-custom-events-id-rules-versions-version
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      rules: rules
      version: version
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/custom-fields/{resource}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-custom-fields-resource
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/custom-fields/{resource}/{name}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - description
  - isUsed
  - name
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-custom-fields-resource-name
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      description: description
      isUsed: isUsed
      name: name
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/customers
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-customers
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/customers/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-customers-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/customers/{id}/lead-source
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - affiliate
  - amount
  - campaign
  - clickId
  - content
  - currency
  - ipAddress
  - medium
  - path
  - salesAgent
  - source
  - subAffiliate
  - term
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-customers-id-lead-source
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      affiliate: affiliate
      amount: amount
      campaign: campaign
      clickId: clickId
      content: content
      currency: currency
      ipAddress: ipAddress
      medium: medium
      path: path
      salesAgent: salesAgent
      source: source
      subAffiliate: subAffiliate
      term: term
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/disputes
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-disputes
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/disputes/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - acquirerReferenceNumber
  - amount
  - category
  - currency
  - customerId
  - deadlineTime
  - postedTime
  - rawResponse
  - reasonCode
  - status
  - transactionId
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-disputes-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      acquirerReferenceNumber: acquirerReferenceNumber
      amount: amount
      category: category
      currency: currency
      customerId: customerId
      deadlineTime: deadlineTime
      postedTime: postedTime
      rawResponse: rawResponse
      reasonCode: reasonCode
      status: status
      transactionId: transactionId
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/events
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-events
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/events/{eventType}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - description
  - rulesCount
  - title
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-events-eventtype
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      description: description
      rulesCount: rulesCount
      title: title
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/events/{eventType}/rules
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - rules
  - version
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-events-eventtype-rules
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      rules: rules
      version: version
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/events/{eventType}/rules/history
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-events-eventtype-rules-history
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/events/{eventType}/rules/history/{version}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - version
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-events-eventtype-rules-history-version
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      version: version
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/events/{eventType}/rules/versions/{version}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - rules
  - version
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-events-eventtype-rules-versions-version
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      rules: rules
      version: version
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/files
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-files
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/files/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - description
  - extension
  - height
  - mime
  - name
  - sha1
  - size
  - tags
  - url
  - width
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-files-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      description: description
      extension: extension
      height: height
      mime: mime
      name: name
      sha1: sha1
      size: size
      tags: tags
      url: url
      width: width
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/files/{id}/download
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-files-id-download
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/files/{id}/download{extension}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-files-id-download-extension
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/forgot-password
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-forgot-password
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/gateway-accounts
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-gateway-accounts
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/gateway-accounts/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - acceptedCurrencies
  - cityField
  - dccMarkup
  - descriptor
  - downtimeEnd
  - downtimeStart
  - dynamicDescriptor
  - excludedDccQuoteCurrencies
  - merchantCategoryCode
  - monthlyLimit
  - paymentCardSchemes
  - status
  - threeDSecure
  - websites
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-gateway-accounts-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      acceptedCurrencies: acceptedCurrencies
      cityField: cityField
      dccMarkup: dccMarkup
      descriptor: descriptor
      downtimeEnd: downtimeEnd
      downtimeStart: downtimeStart
      dynamicDescriptor: dynamicDescriptor
      excludedDccQuoteCurrencies: excludedDccQuoteCurrencies
      merchantCategoryCode: merchantCategoryCode
      monthlyLimit: monthlyLimit
      paymentCardSchemes: paymentCardSchemes
      status: status
      threeDSecure: threeDSecure
      websites: websites
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/invoices
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-invoices
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/invoices/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - amount
  - collectionPeriod
  - currency
  - delinquentCollectionPeriod
  - discounts
  - items
  - notes
  - shippingAmount
  - status
  - taxes
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-invoices-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      amount: amount
      collectionPeriod: collectionPeriod
      currency: currency
      delinquentCollectionPeriod: delinquentCollectionPeriod
      discounts: discounts
      items: items
      notes: notes
      shippingAmount: shippingAmount
      status: status
      taxes: taxes
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/invoices/{id}/abandon
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-invoices-id-abandon
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/invoices/{id}/issue
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-invoices-id-issue
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/invoices/{id}/items
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-invoices-id-items
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/invoices/{id}/lead-source
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - affiliate
  - amount
  - campaign
  - clickId
  - content
  - currency
  - ipAddress
  - medium
  - path
  - salesAgent
  - source
  - subAffiliate
  - term
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-invoices-id-lead-source
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      affiliate: affiliate
      amount: amount
      campaign: campaign
      clickId: clickId
      content: content
      currency: currency
      ipAddress: ipAddress
      medium: medium
      path: path
      salesAgent: salesAgent
      source: source
      subAffiliate: subAffiliate
      term: term
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/invoices/{id}/void
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-invoices-id-void
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/layouts
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-layouts
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/layouts/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - items
  - name
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-layouts-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      items: items
      name: name
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/lists
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-lists
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/lists/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - name
  - values
  - version
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-lists-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      name: name
      values: values
      version: version
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/lists/{id}/{version}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - name
  - values
  - version
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-lists-id-version
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      name: name
      values: values
      version: version
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/notes
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-notes
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/notes/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - archived
  - content
  - createdBy
  - relatedType
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-notes-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      archived: archived
      content: content
      createdBy: createdBy
      relatedType: relatedType
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/organizations
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-organizations
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/organizations/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - address
  - address2
  - city
  - country
  - name
  - postalCode
  - region
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-organizations-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      address: address
      address2: address2
      city: city
      country: country
      name: name
      postalCode: postalCode
      region: region
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/password-tokens
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-password-tokens
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/password-tokens/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - credential
  - expiredTime
  - password
  - token
  - username
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-password-tokens-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      credential: credential
      expiredTime: expiredTime
      password: password
      token: token
      username: username
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/payment-cards-migrations
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-payment-cards-migrations
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/payment-cards-migrations/migrate
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-payment-cards-migrations-migrate
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/payment-cards
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-payment-cards
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/payment-cards/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - bankCountry
  - bankName
  - bin
  - brand
  - cvv
  - expMonth
  - expYear
  - last4
  - pan
  - safeHash
  - status
  - token
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-payment-cards-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      bankCountry: bankCountry
      bankName: bankName
      bin: bin
      brand: brand
      cvv: cvv
      expMonth: expMonth
      expYear: expYear
      last4: last4
      pan: pan
      safeHash: safeHash
      status: status
      token: token
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/payment-cards/{id}/authorization
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-payment-cards-id-authorization
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/payment-cards/{id}/deactivation
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-payment-cards-id-deactivation
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/payments
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-payments
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/payments/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - amount
  - createdBy
  - currency
  - description
  - invoiceIds
  - result
  - retryNumber
  - scheduledTime
  - status
  - updatedBy
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-payments-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      amount: amount
      createdBy: createdBy
      currency: currency
      description: description
      invoiceIds: invoiceIds
      result: result
      retryNumber: retryNumber
      scheduledTime: scheduledTime
      status: status
      updatedBy: updatedBy
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/paypal-accounts
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-paypal-accounts
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/paypal-accounts/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - status
  - username
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-paypal-accounts-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      status: status
      username: username
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/paypal-accounts/{id}/activation
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-paypal-accounts-id-activation
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/paypal-accounts/{id}/deactivation
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-paypal-accounts-id-deactivation
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/plans
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-plans
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/plans/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - contractTermLength
  - contractTermUnit
  - currency
  - currencySign
  - description
  - expiredTime
  - isActive
  - maxQuantity
  - minQuantity
  - name
  - recurringAmount
  - recurringPeriodLength
  - recurringPeriodLimit
  - recurringPeriodUnit
  - richDescription
  - setupAmount
  - trialAmount
  - trialPeriodLength
  - trialPeriodUnit
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-plans-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      contractTermLength: contractTermLength
      contractTermUnit: contractTermUnit
      currency: currency
      currencySign: currencySign
      description: description
      expiredTime: expiredTime
      isActive: isActive
      maxQuantity: maxQuantity
      minQuantity: minQuantity
      name: name
      recurringAmount: recurringAmount
      recurringPeriodLength: recurringPeriodLength
      recurringPeriodLimit: recurringPeriodLimit
      recurringPeriodUnit: recurringPeriodUnit
      richDescription: richDescription
      setupAmount: setupAmount
      trialAmount: trialAmount
      trialPeriodLength: trialPeriodLength
      trialPeriodUnit: trialPeriodUnit
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/previews/rule-actions/send-email
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-previews-rule-actions-send-email
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/previews/rule-actions/trigger-webhook
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-previews-rule-actions-trigger-webhook
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/previews/webhooks
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-previews-webhooks
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/products
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-products
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/products/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - accountingCode
  - description
  - name
  - requiresShipping
  - taxCategoryId
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-products-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      accountingCode: accountingCode
      description: description
      name: name
      requiresShipping: requiresShipping
      taxCategoryId: taxCategoryId
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/profile
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - availableCurrencies
  - businessPhone
  - country
  - email
  - firstName
  - lastName
  - mobilePhone
  - preferences
  - reportingCurrency
  - totpRequired
  - totpSecret
  - totpUrl
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-profile
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      availableCurrencies: availableCurrencies
      businessPhone: businessPhone
      country: country
      email: email
      firstName: firstName
      lastName: lastName
      mobilePhone: mobilePhone
      preferences: preferences
      reportingCurrency: reportingCurrency
      totpRequired: totpRequired
      totpSecret: totpSecret
      totpUrl: totpUrl
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/profile/password
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-profile-password
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/profile/totp-reset
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-profile-totp-reset
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/queue/custom-events
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-queue-custom-events
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/queue/custom-events/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - chronology
  - description
  - eventType
  - rulesCount
  - title
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-queue-custom-events-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      chronology: chronology
      description: description
      eventType: eventType
      rulesCount: rulesCount
      title: title
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/queue/payments
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-queue-payments
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/queue/payments/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - amount
  - createdBy
  - currency
  - description
  - invoiceIds
  - result
  - retryNumber
  - scheduledTime
  - status
  - updatedBy
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-queue-payments-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      amount: amount
      createdBy: createdBy
      currency: currency
      description: description
      invoiceIds: invoiceIds
      result: result
      retryNumber: retryNumber
      scheduledTime: scheduledTime
      status: status
      updatedBy: updatedBy
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/sessions
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-sessions
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/sessions/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - expiredTime
  - token
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-sessions-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      expiredTime: expiredTime
      token: token
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/shipping-zones
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-shipping-zones
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/shipping-zones/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - countries
  - name
  - rates
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-shipping-zones-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      countries: countries
      name: name
      rates: rates
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/signin
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-signin
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/signup
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-signup
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/status
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - status
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-status
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      status: status
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/subscriptions
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-subscriptions
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/subscriptions/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - autopay
  - cancelCategory
  - cancelDescription
  - canceledBy
  - inTrial
  - quantity
  - rebillNumber
  - renewalTime
  - startTime
  - status
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-subscriptions-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      autopay: autopay
      cancelCategory: cancelCategory
      cancelDescription: cancelDescription
      canceledBy: canceledBy
      inTrial: inTrial
      quantity: quantity
      rebillNumber: rebillNumber
      renewalTime: renewalTime
      startTime: startTime
      status: status
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/subscriptions/{id}/cancel
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-subscriptions-id-cancel
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/subscriptions/{id}/lead-source
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - affiliate
  - amount
  - campaign
  - clickId
  - content
  - currency
  - ipAddress
  - medium
  - path
  - salesAgent
  - source
  - subAffiliate
  - term
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-subscriptions-id-lead-source
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      affiliate: affiliate
      amount: amount
      campaign: campaign
      clickId: clickId
      content: content
      currency: currency
      ipAddress: ipAddress
      medium: medium
      path: path
      salesAgent: salesAgent
      source: source
      subAffiliate: subAffiliate
      term: term
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/subscriptions/{id}/switch
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-subscriptions-id-switch
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tax-categories
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tax-categories
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tokens
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tokens
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tokens/{token}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - fingerprint
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tokens-token
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      fingerprint: fingerprint
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tokens/{token}/expiration
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tokens-token-expiration
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/api
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-api
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/api/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - duration
  - method
  - request
  - requestHeaders
  - requestHeaders.additionalProperties
  - response
  - responseHeaders
  - responseHeaders.additionalProperties
  - status
  - url
  - user
  - user.email
  - user.fingerprint
  - user.firstName
  - user.ipAddress
  - user.isSupport
  - user.lastName
  - user.userAgent
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-api-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      duration: duration
      method: method
      request: request
      requestHeaders: requestHeaders
      requestHeaders.additionalProperties: requestHeaders.additionalProperties
      response: response
      responseHeaders: responseHeaders
      responseHeaders.additionalProperties: responseHeaders.additionalProperties
      status: status
      url: url
      user: user
      user.email: user.email
      user.fingerprint: user.fingerprint
      user.firstName: user.firstName
      user.ipAddress: user.ipAddress
      user.isSupport: user.isSupport
      user.lastName: user.lastName
      user.userAgent: user.userAgent
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/lists
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-lists
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/subscriptions
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-subscriptions
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/subscriptions/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - message
  - result
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-subscriptions-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      message: message
      result: result
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/webhooks
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-webhooks
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/webhooks/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - headers
  - headers.additionalProperties
  - method
  - payload
  - responseBody
  - responseCode
  - url
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-webhooks-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      headers: headers
      headers.additionalProperties: headers.additionalProperties
      method: method
      payload: payload
      responseBody: responseBody
      responseCode: responseCode
      url: url
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/website-webhooks
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-website-webhooks
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/tracking/website-webhooks/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - eventName
  - pushData
  - response
  - status
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-tracking-website-webhooks-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      eventName: eventName
      pushData: pushData
      response: response
      status: status
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/transactions
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-transactions
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/transactions/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - acquirerName
  - amount
  - bin
  - childTransactions
  - currency
  - dcc
  - dcc.base
  - dcc.base.amount
  - dcc.base.currency
  - dcc.outcome
  - dcc.quote
  - dcc.quote.amount
  - dcc.quote.currency
  - dcc.usdMarkup
  - description
  - gateway
  - gateway.avsResponse
  - gateway.avsResponse.code
  - gateway.avsResponse.message
  - gateway.cvvResponse
  - gateway.cvvResponse.code
  - gateway.cvvResponse.message
  - gateway.response
  - gateway.response.code
  - gateway.response.message
  - gateway.response.originalCode
  - gateway.response.originalMessage
  - gatewayName
  - has3ds
  - hasDcc
  - invoiceIds
  - isDisputed
  - isRebill
  - rebillNumber
  - result
  - retryNumber
  - riskScore
  - scheduledTime
  - status
  - subscriptionIds
  - velocity
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-transactions-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      acquirerName: acquirerName
      amount: amount
      bin: bin
      childTransactions: childTransactions
      currency: currency
      dcc: dcc
      dcc.base: dcc.base
      dcc.base.amount: dcc.base.amount
      dcc.base.currency: dcc.base.currency
      dcc.outcome: dcc.outcome
      dcc.quote: dcc.quote
      dcc.quote.amount: dcc.quote.amount
      dcc.quote.currency: dcc.quote.currency
      dcc.usdMarkup: dcc.usdMarkup
      description: description
      gateway: gateway
      gateway.avsResponse: gateway.avsResponse
      gateway.avsResponse.code: gateway.avsResponse.code
      gateway.avsResponse.message: gateway.avsResponse.message
      gateway.cvvResponse: gateway.cvvResponse
      gateway.cvvResponse.code: gateway.cvvResponse.code
      gateway.cvvResponse.message: gateway.cvvResponse.message
      gateway.response: gateway.response
      gateway.response.code: gateway.response.code
      gateway.response.message: gateway.response.message
      gateway.response.originalCode: gateway.response.originalCode
      gateway.response.originalMessage: gateway.response.originalMessage
      gatewayName: gatewayName
      has3ds: has3ds
      hasDcc: hasDcc
      invoiceIds: invoiceIds
      isDisputed: isDisputed
      isRebill: isRebill
      rebillNumber: rebillNumber
      result: result
      retryNumber: retryNumber
      riskScore: riskScore
      scheduledTime: scheduledTime
      status: status
      subscriptionIds: subscriptionIds
      velocity: velocity
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/transactions/{id}/cancel
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-transactions-id-cancel
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/transactions/{id}/gateway-logs
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - duration
  - headers
  - request
  - response
  - url
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-transactions-id-gateway-logs
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      duration: duration
      headers: headers
      request: request
      response: response
      url: url
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/transactions/{id}/lead-source
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - affiliate
  - amount
  - campaign
  - clickId
  - content
  - currency
  - ipAddress
  - medium
  - path
  - salesAgent
  - source
  - subAffiliate
  - term
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-transactions-id-lead-source
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      affiliate: affiliate
      amount: amount
      campaign: campaign
      clickId: clickId
      content: content
      currency: currency
      ipAddress: ipAddress
      medium: medium
      path: path
      salesAgent: salesAgent
      source: source
      subAffiliate: subAffiliate
      term: term
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/transactions/{id}/refund
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-transactions-id-refund
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/users
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-users
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/users/reset-password/{token}
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-users-reset-password-token
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/users/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - availableCurrencies
  - businessPhone
  - country
  - email
  - firstName
  - lastName
  - mobilePhone
  - password
  - preferences
  - reportingCurrency
  - status
  - totpRequired
  - totpSecret
  - totpUrl
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-users-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      availableCurrencies: availableCurrencies
      businessPhone: businessPhone
      country: country
      email: email
      firstName: firstName
      lastName: lastName
      mobilePhone: mobilePhone
      password: password
      preferences: preferences
      reportingCurrency: reportingCurrency
      status: status
      totpRequired: totpRequired
      totpSecret: totpSecret
      totpUrl: totpUrl
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/users/{id}/password
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-users-id-password
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/users/{id}/totp-reset
  method: POST
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-users-id-totp-reset
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/webhooks
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-webhooks
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/webhooks/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - credentialHash
  - eventsFilter
  - headers
  - method
  - url
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-webhooks-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      credentialHash: credentialHash
      eventsFilter: eventsFilter
      headers: headers
      method: method
      url: url
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/websites
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-websites
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/websites/{id}
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - _links
  - checkoutPageUri
  - name
  - serviceEmail
  - servicePhone
  - url
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-websites-id
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      _links: _links
      checkoutPageUri: checkoutPageUri
      name: name
      serviceEmail: serviceEmail
      servicePhone: servicePhone
      url: url
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment
- group: rebilly-2-1
  url_pattern: /v2.1/websites/{id}/webhook
  method: GET
  encoding: json
  host:
  - https://api.rebilly.com
  whitelist:
  - webHookPassword
  - webHookUrl
  - webHookUsername
  concurrent_calls: 1
  extra_config:
    provider: rebilly.com
    description: |
      # Introduction
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

      # Authentication
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

      <!-- ReDoc-Inject: <security-definitions> -->

      # PHP SDK
      For all PHP SDK examples provided in this spec you will need to configure `$client`.
      You may do it like this:

      ```php
      $client = new Rebilly\Client([
          'apiKey' => 'YourApiKeyHere',
          'baseUrl' => 'https://api.rebilly.com',
      ]);
      ```
    version: "2.1"
    slug: rebilly-2-1-v2-1-websites-id-webhook
    schemes:
    - https
    consumes:
    - json
    produces:
    - json
    mapping:
      webHookPassword: webHookPassword
      webHookUrl: webHookUrl
      webHookUsername: webHookUsername
    hosts:
    - https://api.rebilly.com
    topics:
    - ecommerce
    - payment

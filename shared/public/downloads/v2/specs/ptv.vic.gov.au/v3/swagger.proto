syntax = "proto3";

import "google/api/annotations.proto";

package ptvtimetableapi-version3;

message GetV3DeparturesRoute_typeRoute_typeStopStop_idRequest {
    // Filter by the date and time of the request (ISO 8601 UTC format)
    string date_utc = 1;
    // Your developer id
    string devid = 2;
    // Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
    int32 direction_id = 3;
    // List objects to be returned in full (i.e. expanded) - options include: all, stop, route, run, direction, disruption
    repeated string expand = 4;
    // Indicates that stop_id parameter will accept "GTFS stop_id" data
    bool gtfs = 5;
    // Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
    bool include_cancelled = 6;
    // Maximum number of results returned
    int32 max_results = 7;
    // Filter by platform number at stop
    repeated int32 platform_numbers = 8;
    // Number identifying transport mode; values returned via RouteTypes API
    int32 route_type = 9;
    // Authentication signature for request
    string signature = 10;
    // Identifier of stop; values returned by Stops API
    int32 stop_id = 11;
    // Please ignore
    string token = 12;
}

message GetV3DeparturesRoute_typeRoute_typeStopStop_idRouteRoute_idRequest {
    // Filter by the date and time of the request (ISO 8601 UTC format)
    string date_utc = 1;
    // Your developer id
    string devid = 2;
    // Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
    int32 direction_id = 3;
    // List objects to be returned in full (i.e. expanded) - options include: all, stop, route, run, direction, disruption
    repeated string expand = 4;
    // Indicates that stop_id parameter will accept "GTFS stop_id" data
    bool gtfs = 5;
    // Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
    bool include_cancelled = 6;
    // Maximum number of results returned
    int32 max_results = 7;
    // Identifier of route; values returned by Routes API - v3/routes
    string route_id = 8;
    // Number identifying transport mode; values returned via RouteTypes API
    int32 route_type = 9;
    // Authentication signature for request
    string signature = 10;
    // Identifier of stop; values returned by Stops API
    int32 stop_id = 11;
    // Please ignore
    string token = 12;
}

message GetV3DirectionsRouteRoute_idRequest {
    // Your developer id
    string devid = 1;
    // Identifier of route; values returned by Routes API - v3/routes
    int32 route_id = 2;
    // Authentication signature for request
    string signature = 3;
    // Please ignore
    string token = 4;
}

message GetV3DirectionsDirection_idRequest {
    // Your developer id
    string devid = 1;
    // Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
    int32 direction_id = 2;
    // Authentication signature for request
    string signature = 3;
    // Please ignore
    string token = 4;
}

message GetV3DirectionsDirection_idRoute_typeRoute_typeRequest {
    // Your developer id
    string devid = 1;
    // Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
    int32 direction_id = 2;
    // Number identifying transport mode; values returned via RouteTypes API
    int32 route_type = 3;
    // Authentication signature for request
    string signature = 4;
    // Please ignore
    string token = 5;
}

message GetV3DisruptionsRequest {
    // Your developer id
    string devid = 1;
    // Filter by status of disruption
    enum GetV3DisruptionsRequest_Disruption_statu {
        GETV3DISRUPTIONSREQUEST_DISRUPTION_STATU_CURRENT = 0;
        GETV3DISRUPTIONSREQUEST_DISRUPTION_STATU_PLANNED = 1;
    }
    GetV3DisruptionsRequest_Disruption_statu disruption_status = 2;
    // Filter by route_type; values returned via RouteTypes API
    repeated int32 route_types = 3;
    // Authentication signature for request
    string signature = 4;
    // Please ignore
    string token = 5;
}

message GetV3DisruptionsRouteRoute_idRequest {
    // Your developer id
    string devid = 1;
    // Filter by status of disruption
    enum GetV3DisruptionsRouteRoute_idRequest_Disruption_statu {
        GETV3DISRUPTIONSROUTEROUTE_IDREQUEST_DISRUPTION_STATU_CURRENT = 0;
        GETV3DISRUPTIONSROUTEROUTE_IDREQUEST_DISRUPTION_STATU_PLANNED = 1;
    }
    GetV3DisruptionsRouteRoute_idRequest_Disruption_statu disruption_status = 2;
    // Identifier of route; values returned by Routes API - v3/routes
    int32 route_id = 3;
    // Authentication signature for request
    string signature = 4;
    // Please ignore
    string token = 5;
}

message GetV3DisruptionsDisruption_idRequest {
    // Your developer id
    string devid = 1;
    // Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}
    int64 disruption_id = 2;
    // Authentication signature for request
    string signature = 3;
    // Please ignore
    string token = 4;
}

message GetV3PatternRunRun_idRoute_typeRoute_typeRequest {
    // Filter by the date and time of the request (ISO 8601 UTC format)
    string date_utc = 1;
    // Your developer id
    string devid = 2;
    // Number identifying transport mode; values returned via RouteTypes API
    int32 route_type = 3;
    // Identifier of a trip/service run; values returned by Runs API - /v3/route/{route_id} and Departures API
    int32 run_id = 4;
    // Authentication signature for request
    string signature = 5;
    // Filter by stop_id; values returned by Stops API
    int32 stop_id = 6;
    // Please ignore
    string token = 7;
}

message GetV3Route_typesRequest {
    // Your developer id
    string devid = 1;
    // Authentication signature for request
    string signature = 2;
    // Please ignore
    string token = 3;
}

message GetV3RoutesRequest {
    // Your developer id
    string devid = 1;
    // Filter by name  of route (accepts partial route name matches)
    string route_name = 2;
    // Filter by route_type; values returned via RouteTypes API
    repeated int32 route_types = 3;
    // Authentication signature for request
    string signature = 4;
    // Please ignore
    string token = 5;
}

message GetV3RoutesRoute_idRequest {
    // Your developer id
    string devid = 1;
    // Identifier of route; values returned by Departures, Directions and Disruptions APIs
    int32 route_id = 2;
    // Authentication signature for request
    string signature = 3;
    // Please ignore
    string token = 4;
}

message GetV3RunsRouteRoute_idRequest {
    // Your developer id
    string devid = 1;
    // Identifier of route; values returned by Routes API - v3/routes.
    int32 route_id = 2;
    // Authentication signature for request
    string signature = 3;
    // Please ignore
    string token = 4;
}

message GetV3RunsRun_idRequest {
    // Your developer id
    string devid = 1;
    // Identifier of a trip/service run; values returned by Runs API - /v3/route/{route_id} and Departures API
    int32 run_id = 2;
    // Authentication signature for request
    string signature = 3;
    // Please ignore
    string token = 4;
}

message GetV3RunsRun_idRoute_typeRoute_typeRequest {
    // Your developer id
    string devid = 1;
    // Number identifying transport mode; values returned via RouteTypes API
    int32 route_type = 2;
    // Identifier of a trip/service run; values returned by Runs API - /v3/route/{route_id} and Departures API
    int32 run_id = 3;
    // Authentication signature for request
    string signature = 4;
    // Please ignore
    string token = 5;
}

message GetV3SearchSearch_termRequest {
    // Your developer id
    string devid = 1;
    // Placeholder for future development; currently unavailable
    bool include_addresses = 2;
    // Indicates if outlets will be returned in response (default = true)
    bool include_outlets = 3;
    // Filter by geographic coordinate of latitude
    float latitude = 4;
    // Filter by geographic coordinate of longitude
    float longitude = 5;
    // Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
    float max_distance = 6;
    // Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
    repeated int32 route_types = 7;
    // Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
    string search_term = 8;
    // Authentication signature for request
    string signature = 9;
    // Please ignore
    string token = 10;
}

message GetV3StopsLocationLatitude,LongitudeRequest {
    // Your developer id
    string devid = 1;
    // Geographic coordinate of latitude
    float latitude = 2;
    // Geographic coordinate of longitude
    float longitude = 3;
    // Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)
    double max_distance = 4;
    // Maximum number of results returned (default = 30)
    int32 max_results = 5;
    // Filter by route_type; values returned via RouteTypes API
    repeated int32 route_types = 6;
    // Authentication signature for request
    string signature = 7;
    // Please ignore
    string token = 8;
}

message GetV3StopsRouteRoute_idRoute_typeRoute_typeRequest {
    // Your developer id
    string devid = 1;
    // Identifier of route; values returned by Routes API - v3/routes
    int32 route_id = 2;
    // Number identifying transport mode; values returned via RouteTypes API
    int32 route_type = 3;
    // Authentication signature for request
    string signature = 4;
    // Please ignore
    string token = 5;
}

message GetV3StopsStop_idRoute_typeRoute_typeRequest {
    // Your developer id
    string devid = 1;
    // Number identifying transport mode; values returned via RouteTypes API
    int32 route_type = 2;
    // Authentication signature for request
    string signature = 3;
    // Indicates if stop accessibility information will be returned (default = false)
    bool stop_accessibility = 4;
    // Indicates if stop amenity information will be returned (default = false)
    bool stop_amenities = 5;
    // Placeholder for future development; currently unavailable
    bool stop_contact = 6;
    // Identifier of stop; values returned by Stops API
    int32 stop_id = 7;
    // Indicates if stop location information will be returned (default = false)
    bool stop_location = 8;
    // Placeholder for future development; currently unavailable
    bool stop_ticket = 9;
    // Please ignore
    string token = 10;
}

message V2.Object {
}

message V3.Departure {
    // Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
    bool at_platform = 1;
    // Direction of travel identifier
    int32 direction_id = 2;
    // Disruption information identifier(s)
    repeated int32 disruption_ids = 3;
    // Real-time estimate of departure time and date in ISO 8601 UTC format
    string estimated_departure_utc = 4;
    // Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
    string flags = 5;
    // Platform number at stop (metropolitan train only; returns null for other modes)
    string platform_number = 6;
    // Route identifier
    int32 route_id = 7;
    // Trip/service run identifier
    int32 run_id = 8;
    // Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
    string scheduled_departure_utc = 9;
    // Stop identifier
    int32 stop_id = 10;
}

message V3.DeparturesBroadParameters {
    // Filter by the date and time of the request (ISO 8601 UTC format)
    string date_utc = 1;
    // Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
    int32 direction_id = 2;
    // List objects to be returned in full (i.e. expanded) - options include: all, stop, route, run, direction, disruption
    repeated string expand = 3;
    // Indicates that stop_id parameter will accept "GTFS stop_id" data
    bool gtfs = 4;
    // Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
    bool include_cancelled = 5;
    // Maximum number of results returned
    int32 max_results = 6;
    // Filter by platform number at stop
    repeated int32 platform_numbers = 7;
}

message V3.DeparturesResponse {
    // Timetabled and real-time service departures
    repeated V3.Departure departures = 1;
    // Directions of travel of route
    map<string, V3.Direction> directions = 2;
    // Disruption information applicable to relevant routes or stops
    map<string, V3.Disruption> disruptions = 3;
    // Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
    map<string, V3.Route> routes = 4;
    // Individual trips/services of a route
    map<string, V3.Run> runs = 5;
    // API Status / Metadata
    V3.Status status = 6;
    // A train station, tram stop, bus stop, regional coach stop or Night Bus stop
    map<string, V3.ResultStop> stops = 7;
}

message V3.DeparturesSpecificParameters {
    // Filter by the date and time of the request (ISO 8601 UTC format)
    string date_utc = 1;
    // Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
    int32 direction_id = 2;
    // List objects to be returned in full (i.e. expanded) - options include: all, stop, route, run, direction, disruption
    repeated string expand = 3;
    // Indicates that stop_id parameter will accept "GTFS stop_id" data
    bool gtfs = 4;
    // Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
    bool include_cancelled = 5;
    // Maximum number of results returned
    int32 max_results = 6;
}

message V3.Direction {
    // Direction of travel identifier
    int32 direction_id = 1;
    // Name of direction of travel
    string direction_name = 2;
    // Route identifier
    int32 route_id = 3;
    // Transport mode identifier
    int32 route_type = 4;
}

message V3.DirectionsResponse {
    // Directions of travel of route
    repeated V3.Direction directions = 1;
    // API Status / Metadata
    V3.Status status = 2;
}

message V3.Disruption {
    // Description of the disruption
    string description = 1;
    // Disruption information identifier
    int64 disruption_id = 2;
    // Status of the disruption (e.g. "Planned", "Current")
    string disruption_status = 3;
    // Type of disruption
    string disruption_type = 4;
    // Date and time at which disruption begins, in ISO 8601 UTC format
    string from_date = 5;
    // Date and time disruption information was last updated by PTV, in ISO 8601 UTC format
    string last_updated = 6;
    // Date and time disruption information is published on PTV website, in ISO 8601 UTC format
    string published_on = 7;
    // Route relevant to a disruption (if applicable)
    repeated V3.DisruptionRoute routes = 8;
    // Headline title summarising disruption information
    string title = 9;
    // Date and time at which disruption ends, in ISO 8601 UTC format (returns null if unknown)
    string to_date = 10;
    // URL of relevant article on PTV website
    string url = 11;
}

message V3.DisruptionDirection {
    // Direction of travel identifier
    int32 direction_id = 1;
    // Name of direction of travel
    string direction_name = 2;
    // Route and direction of travel combination identifier
    int32 route_direction_id = 3;
    // Time of service to which disruption applies, in 24 hour clock format (HH:MM:SS) AEDT/AEST; returns null if disruption applies to multiple (or no) services
    string service_time = 4;
}

message V3.DisruptionResponse {
    // Disruption information applicable to relevant routes or stops
    V3.Disruption disruption = 1;
    // API Status / Metadata
    V3.Status status = 2;
}

message V3.DisruptionRoute {
    // Direction of travel relevant to a disruption (if applicable)
    V3.DisruptionDirection direction = 1;
    // Route identifier
    int32 route_id = 2;
    // Name of route
    string route_name = 3;
    // Route number presented to public (i.e. not route_id)
    string route_number = 4;
    // Transport mode identifier
    int32 route_type = 5;
}

message V3.Disruptions {
    // Subset of disruption information applicable to multiple route_types
    repeated V3.Disruption general = 1;
    // Subset of disruption information applicable to metropolitan bus
    repeated V3.Disruption metro_bus = 2;
    // Subset of disruption information applicable to metropolitan train
    repeated V3.Disruption metro_train = 3;
    // Subset of disruption information applicable to metropolitan tram
    repeated V3.Disruption metro_tram = 4;
    // Subset of disruption information applicable to regional bus
    repeated V3.Disruption regional_bus = 5;
    // Subset of disruption information applicable to V/Line coach
    repeated V3.Disruption regional_coach = 6;
    // Subset of disruption information applicable to V/Line train
    repeated V3.Disruption regional_train = 7;
}

message V3.DisruptionsResponse {
    // Disruption information applicable to relevant routes or stops
    V3.Disruptions disruptions = 1;
    // API Status / Metadata
    V3.Status status = 2;
}

message V3.ErrorResponse {
    // Error message
    string message = 1;
    // API Status / Metadata
    V3.Status status = 2;
}

message V3.ResultOutlet {
    // The business name of the outlet
    string outlet_business = 1;
    // Distance of outlet from input location (in metres); returns 0 if no location is input
    float outlet_distance = 2;
    // Geographic coordinate of latitude at outlet
    float outlet_latitude = 3;
    // Geographic coordinate of longitude at outlet
    float outlet_longitude = 4;
    // The location name of the outlet
    string outlet_name = 5;
    // The suburb the outlet is in
    string outlet_suburb = 6;
}

message V3.ResultRoute {
    // Route identifier
    int32 route_id = 1;
    // Name of route
    string route_name = 2;
    // Route number presented to public (nb. not route_id)
    string route_number = 3;
    // Transport mode identifier
    int32 route_type = 4;
}

message V3.ResultStop {
    // Transport mode identifier
    int32 route_type = 1;
    // Distance of stop from input location (in metres); returns 0 if no location is input
    float stop_distance = 2;
    // Stop identifier
    int32 stop_id = 3;
    // Geographic coordinate of latitude at stop
    float stop_latitude = 4;
    // Geographic coordinate of longitude at stop
    float stop_longitude = 5;
    // Name of stop
    string stop_name = 6;
}

message V3.Route {
    // Route identifier
    int32 route_id = 1;
    // Name of route
    string route_name = 2;
    // Route number presented to public (nb. not route_id)
    string route_number = 3;
    // Transport mode identifier
    int32 route_type = 4;
}

message V3.RouteResponse {
    // Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
    V3.Route route = 1;
    // API Status / Metadata
    V3.Status status = 2;
}

message V3.RouteType {
    // Transport mode identifier
    int32 route_type = 1;
    // Name of transport mode
    string route_type_name = 2;
}

message V3.RouteTypesResponse {
    // Transport mode identifiers
    repeated V3.RouteType route_types = 1;
    // API Status / Metadata
    V3.Status status = 2;
}

message V3.Run {
    // Name of destination of run
    string destination_name = 1;
    // stop_id of final stop of run
    int32 final_stop_id = 2;
    // Route identifier
    int32 route_id = 3;
    // Transport mode identifier
    int32 route_type = 4;
    // Trip/service run identifier
    int32 run_id = 5;
    // Status of metropolitan train run; returns "scheduled" for other modes
    string status = 6;
}

message V3.RunResponse {
    // Individual trip/service of a route
    V3.Run run = 1;
    // API Status / Metadata
    V3.Status status = 2;
}

message V3.RunsResponse {
    // Individual trips/services of a route
    repeated V3.Run runs = 1;
    // API Status / Metadata
    V3.Status status = 2;
}

message V3.SearchParameters {
    // Placeholder for future development; currently unavailable
    bool include_addresses = 1;
    // Indicates if outlets will be returned in response (default = true)
    bool include_outlets = 2;
    // Filter by geographic coordinate of latitude
    float latitude = 3;
    // Filter by geographic coordinate of longitude
    float longitude = 4;
    // Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
    float max_distance = 5;
    // Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
    repeated int32 route_types = 6;
}

message V3.SearchResult {
    // myki ticket outlets
    repeated V3.ResultOutlet outlets = 1;
    // Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
    repeated V3.ResultRoute routes = 2;
    // API Status / Metadata
    V3.Status status = 3;
    // Train stations, tram stops, bus stops, regional coach stops or Night Bus stops
    repeated V3.ResultStop stops = 4;
}

message V3.Status {
    // API system health status (0=offline, 1=online)
    int32 health = 1;
    // API Version number
    string version = 2;
}

message V3.StopAccessibility {
    // Indicates if there is an escalator at the stop
    bool escalator = 1;
    // Indicates if there is a hearing loop facility at the stop
    bool hearing_loop = 2;
    // Indicates if there is an elevator at the stop
    bool lifts = 3;
    // Indicates if there is lighting at the stop
    bool lighting = 4;
    // Indicates if there are stairs at the stop
    bool stairs = 5;
    // Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop
    bool tactile_tiles = 6;
    // Facilities relating to the accessibility of the stop by wheelchair
    V3.StopAccessibilityWheelchair wheelchair = 7;
}

message V3.StopAccessibilityWheelchair {
    // Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
    bool accessible_parking = 1;
    // Indicates if there is an accessible public telephone at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
    bool accessible_phone = 2;
    // Indicates if there is a ramp at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
    bool accessible_ramp = 3;
    // Indicates if there is an accessible public toilet at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
    bool accessible_toilet = 4;
}

message V3.StopAmenityDetails {
    // The number of free car parking spots at the stop
    string car_parking = 1;
    // Indicates if there are CCTV (i.e. closed circuit television) cameras at the stop
    bool cctv = 2;
    // Indicates if there is a taxi rank at or near the stop
    bool taxi_rank = 3;
    // Indicates if there is a public toilet at or near the stop
    bool toilet = 4;
}

message V3.StopBase {
    // Stop identifier
    int32 stop_id = 1;
    // Name of stop
    string stop_name = 2;
}

message V3.StopDetails {
    // Transport mode identifier
    int32 route_type = 1;
    // The definition applicable to the station_type; returns null for V/Line train
    string station_description = 2;
    // Type of metropolitan train station (i.e. "Premium", "Host" or "Unstaffed" station); returns null for V/Line train
    string station_type = 3;
    // Facilities relating to the accessibility of the stop
    V3.StopAccessibility stop_accessibility = 4;
    // Amenity and facility details at the stop
    V3.StopAmenityDetails stop_amenities = 5;
    // Stop identifier
    int32 stop_id = 6;
    // Location details of the stop
    V3.StopLocation stop_location = 7;
    // Name of stop
    string stop_name = 8;
}

message V3.StopGeosearch {
    // Transport mode identifier
    int32 route_type = 1;
    // Distance of stop from input location (in metres); returns 0 if no location is input
    float stop_distance = 2;
    // Stop identifier
    int32 stop_id = 3;
    // Geographic coordinate of latitude at stop
    float stop_latitude = 4;
    // Geographic coordinate of longitude at stop
    float stop_longitude = 5;
    // Name of stop
    string stop_name = 6;
}

message V3.StopGps {
    // Geographic coordinate of latitude at stop
    float latitude = 1;
    // Geographic coordinate of longitude at stop
    float longitude = 2;
}

message V3.StopLocation {
    // GPS coordinates of the stop
    V3.StopGps gps = 1;
}

message V3.StopOnRoute {
    // Transport mode identifier
    int32 route_type = 1;
    // Stop identifier
    int32 stop_id = 2;
    // Geographic coordinate of latitude at stop
    float stop_latitude = 3;
    // Geographic coordinate of longitude at stop
    float stop_longitude = 4;
    // Name of stop
    string stop_name = 5;
}

message V3.StopResponse {
    // API Status / Metadata
    V3.Status status = 1;
    // A metropolitan or V/Line train station
    V3.StopDetails stop = 2;
}

message V3.StoppingPattern {
    // Timetabled and real-time service departures
    repeated V3.Departure departures = 1;
    // Disruption information applicable to relevant routes or stops
    repeated V3.Disruption disruptions = 2;
    // API Status / Metadata
    V3.Status status = 3;
}

message V3.StopsByDistanceResponse {
    // API Status / Metadata
    V3.Status status = 1;
    // Train stations, tram stops, bus stops, regional coach stops or Night Bus stops
    repeated V3.StopGeosearch stops = 2;
}

message V3.StopsOnRouteResponse {
    // API Status / Metadata
    V3.Status status = 1;
    // Train stations, tram stops, bus stops, regional coach stops or Night Bus stops
    repeated V3.StopOnRoute stops = 2;
}

service PTVTimetableAPI-Version3Service {
    // View departures for all routes from a stop
    rpc GetV3DeparturesRoute_typeRoute_typeStopStop_id(GetV3DeparturesRoute_typeRoute_typeStopStop_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/departures/route_type/{route_type}/stop/{stop_id}"
      };
    }
    // View departures for a specific route from a stop
    rpc GetV3DeparturesRoute_typeRoute_typeStopStop_idRouteRoute_id(GetV3DeparturesRoute_typeRoute_typeStopStop_idRouteRoute_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}"
      };
    }
    // View directions that a route travels in
    rpc GetV3DirectionsRouteRoute_id(GetV3DirectionsRouteRoute_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/directions/route/{route_id}"
      };
    }
    // View all routes for a direction of travel
    rpc GetV3DirectionsDirection_id(GetV3DirectionsDirection_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/directions/{direction_id}"
      };
    }
    // View all routes of a particular type for a direction of travel
    rpc GetV3DirectionsDirection_idRoute_typeRoute_type(GetV3DirectionsDirection_idRoute_typeRoute_typeRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/directions/{direction_id}/route_type/{route_type}"
      };
    }
    // View all disruptions for all route types
    rpc GetV3Disruptions(GetV3DisruptionsRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/disruptions"
      };
    }
    // View all disruptions for a particular route
    rpc GetV3DisruptionsRouteRoute_id(GetV3DisruptionsRouteRoute_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/disruptions/route/{route_id}"
      };
    }
    // View a specific disruption
    rpc GetV3DisruptionsDisruption_id(GetV3DisruptionsDisruption_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/disruptions/{disruption_id}"
      };
    }
    // View the stopping pattern for a specific trip/service run
    rpc GetV3PatternRunRun_idRoute_typeRoute_type(GetV3PatternRunRun_idRoute_typeRoute_typeRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/pattern/run/{run_id}/route_type/{route_type}"
      };
    }
    // View all route types and their names
    rpc GetV3Route_types(GetV3Route_typesRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/route_types"
      };
    }
    // View route names and numbers for all routes
    rpc GetV3Routes(GetV3RoutesRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/routes"
      };
    }
    // View route name and number for specific route ID
    rpc GetV3RoutesRoute_id(GetV3RoutesRoute_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/routes/{route_id}"
      };
    }
    // View all trip/service runs for a specific route ID
    rpc GetV3RunsRouteRoute_id(GetV3RunsRouteRoute_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/runs/route/{route_id}"
      };
    }
    // View all trip/service runs for a specific run ID
    rpc GetV3RunsRun_id(GetV3RunsRun_idRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/runs/{run_id}"
      };
    }
    // View the trip/service run for a specific run ID and route type
    rpc GetV3RunsRun_idRoute_typeRoute_type(GetV3RunsRun_idRoute_typeRoute_typeRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/runs/{run_id}/route_type/{route_type}"
      };
    }
    // View stops, routes and myki ticket outlets that match the search term
    rpc GetV3SearchSearch_term(GetV3SearchSearch_termRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/search/{search_term}"
      };
    }
    // View all stops near a specific location
    rpc GetV3StopsLocationLatitude,Longitude(GetV3StopsLocationLatitude,LongitudeRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/stops/location/{latitude},{longitude}"
      };
    }
    // View all stops on a specific route
    rpc GetV3StopsRouteRoute_idRoute_typeRoute_type(GetV3StopsRouteRoute_idRoute_typeRoute_typeRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/stops/route/{route_id}/route_type/{route_type}"
      };
    }
    // View facilities at a specific stop (Metro and V/Line stations only)
    rpc GetV3StopsStop_idRoute_typeRoute_type(GetV3StopsStop_idRoute_typeRoute_typeRequest) returns (V3) {
      option (google.api.http) = {
        get: "/v3/stops/{stop_id}/route_type/{route_type}"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package bufferapp;

message GetInfoConfigurationmediaTypeExtensionRequest {
    enum GetInfoConfigurationmediaTypeExtensionRequest_MediaTypeExtension {
        GETINFOCONFIGURATIONMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetInfoConfigurationmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 1;
}

message GetLinksSharesmediaTypeExtensionRequest {
    enum GetLinksSharesmediaTypeExtensionRequest_MediaTypeExtension {
        GETLINKSSHARESMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetLinksSharesmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 1;
    // URL-encoded URL of the page for which the number of shares is requested.
    string url = 2;
}

message PostProfilesIdSchedulesUpdatemediaTypeExtensionRequest {
    string id = 1;
    enum PostProfilesIdSchedulesUpdatemediaTypeExtensionRequest_MediaTypeExtension {
        POSTPROFILESIDSCHEDULESUPDATEMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    PostProfilesIdSchedulesUpdatemediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message GetProfilesIdSchedulesmediaTypeExtensionRequest {
    string id = 1;
    enum GetProfilesIdSchedulesmediaTypeExtensionRequest_MediaTypeExtension {
        GETPROFILESIDSCHEDULESMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetProfilesIdSchedulesmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message GetProfilesIdUpdatesPendingmediaTypeExtensionRequest {
    // Specifies the number of status updates to receive. If provided, must be between 1 and 100.
    int32 count = 1;
    string id = 2;
    enum GetProfilesIdUpdatesPendingmediaTypeExtensionRequest_MediaTypeExtension {
        GETPROFILESIDUPDATESPENDINGMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetProfilesIdUpdatesPendingmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 3;
    // Specifies the page of status updates to receive. If not specified the first page of results will be returned.
    int32 page = 4;
    // Specifies a unix timestamp which only status updates created after this time will be retrieved.
    string since = 5;
    // If utc is set times will be returned relative to UTC rather than the users associated timezone.
    bool utc = 6;
}

message PostProfilesIdUpdatesReordermediaTypeExtensionRequest {
    string id = 1;
    enum PostProfilesIdUpdatesReordermediaTypeExtensionRequest_MediaTypeExtension {
        POSTPROFILESIDUPDATESREORDERMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    PostProfilesIdUpdatesReordermediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message GetProfilesIdUpdatesSentmediaTypeExtensionRequest {
    // Specifies the number of status updates to receive. If provided, must be between 1 and 100.
    int32 count = 1;
    string id = 2;
    enum GetProfilesIdUpdatesSentmediaTypeExtensionRequest_MediaTypeExtension {
        GETPROFILESIDUPDATESSENTMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetProfilesIdUpdatesSentmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 3;
    // Specifies the page of status updates to receive. If not specified the first page of results will be returned.
    int32 page = 4;
    // Specifies a unix timestamp which only status updates created after this time will be retrieved.
    string since = 5;
    // If utc is set times will be returned relative to UTC rather than the users associated timezone.
    bool utc = 6;
}

message PostProfilesIdUpdatesShufflemediaTypeExtensionRequest {
    string id = 1;
    enum PostProfilesIdUpdatesShufflemediaTypeExtensionRequest_MediaTypeExtension {
        POSTPROFILESIDUPDATESSHUFFLEMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    PostProfilesIdUpdatesShufflemediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message GetProfilesIdmediaTypeExtensionRequest {
    string id = 1;
    enum GetProfilesIdmediaTypeExtensionRequest_MediaTypeExtension {
        GETPROFILESIDMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetProfilesIdmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message GetProfilesmediaTypeExtensionRequest {
    enum GetProfilesmediaTypeExtensionRequest_MediaTypeExtension {
        GETPROFILESMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetProfilesmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 1;
}

message PostUpdatesCreatemediaTypeExtensionRequest {
    enum PostUpdatesCreatemediaTypeExtensionRequest_MediaTypeExtension {
        POSTUPDATESCREATEMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    PostUpdatesCreatemediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 1;
}

message PostUpdatesIdDestroymediaTypeExtensionRequest {
    string id = 1;
    enum PostUpdatesIdDestroymediaTypeExtensionRequest_MediaTypeExtension {
        POSTUPDATESIDDESTROYMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    PostUpdatesIdDestroymediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message GetUpdatesIdInteractionsmediaTypeExtensionRequest {
    // Specifies the number of status updates to receive. If provided, must be between 1 and 100.
    int32 count = 1;
    // Specifies a type of event to be retrieved, for example "retweet", "like", "comment", "mention" or "reshare". They can also be plural (e.g., "reshares"). Plurality has no effect other than visual semantics. See /info/configuration for more information on supported interaction events.
    string event = 2;
    string id = 3;
    enum GetUpdatesIdInteractionsmediaTypeExtensionRequest_MediaTypeExtension {
        GETUPDATESIDINTERACTIONSMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetUpdatesIdInteractionsmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 4;
    // Specifies the page of status updates to receive. If not specified the first page of results will be returned.
    int32 page = 5;
}

message PostUpdatesIdMove_to_topmediaTypeExtensionRequest {
    string id = 1;
    enum PostUpdatesIdMove_to_topmediaTypeExtensionRequest_MediaTypeExtension {
        POSTUPDATESIDMOVE_TO_TOPMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    PostUpdatesIdMove_to_topmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message PostUpdatesIdSharemediaTypeExtensionRequest {
    string id = 1;
    enum PostUpdatesIdSharemediaTypeExtensionRequest_MediaTypeExtension {
        POSTUPDATESIDSHAREMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    PostUpdatesIdSharemediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message PostUpdatesIdUpdatemediaTypeExtensionRequest {
    string id = 1;
    enum PostUpdatesIdUpdatemediaTypeExtensionRequest_MediaTypeExtension {
        POSTUPDATESIDUPDATEMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    PostUpdatesIdUpdatemediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message GetUpdatesIdmediaTypeExtensionRequest {
    string id = 1;
    enum GetUpdatesIdmediaTypeExtensionRequest_MediaTypeExtension {
        GETUPDATESIDMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetUpdatesIdmediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 2;
}

message GetUsermediaTypeExtensionRequest {
    enum GetUsermediaTypeExtensionRequest_MediaTypeExtension {
        GETUSERMEDIATYPEEXTENSIONREQUEST_MEDIATYPEEXTENSION_JSON = 0;
    }
    GetUsermediaTypeExtensionRequest_MediaTypeExtension mediaTypeExtension = 1;
}

message Configuration {
    message Media {
        repeated string picture_filetypes = 1;
        int32 picture_size_max = 2;
        int32 picture_size_min = 3;
    }
    Media media = 1;
    message Services {
        message Appdotnet {
            message Types {
                message Profile {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    message Supported_interaction {
                    }
                    repeated Supported_interaction supported_interactions = 6;
                }
                Profile profile = 1;
            }
            Types types = 1;
            message Urls {
                string hashtag = 1;
                string user = 2;
            }
            Urls urls = 2;
        }
        Appdotnet appdotnet = 1;
        message Facebook {
            message Types {
                message Group {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Group group = 1;
                message Page {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Page page = 2;
                message Profile {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Profile profile = 3;
            }
            Types types = 1;
            message Urls {
                string user = 1;
            }
            Urls urls = 2;
        }
        Facebook facebook = 2;
        message Google {
            message Types {
                message Page {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Page page = 1;
                message Profile {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Profile profile = 2;
            }
            Types types = 1;
            message Urls {
                string user = 1;
            }
            Urls urls = 2;
        }
        Google google = 3;
        message Linkedin {
            message Types {
                message Group {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Group group = 1;
                message Page {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Page page = 2;
                message Profile {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Profile profile = 3;
            }
            Types types = 1;
            message Urls {
                string user = 1;
            }
            Urls urls = 2;
        }
        Linkedin linkedin = 4;
        message Twitter {
            message Types {
                message Profile {
                    int32 character_limit = 1;
                    message Icons {
                        string 16 = 1;
                        string 32 = 2;
                        string 64 = 3;
                    }
                    Icons icons = 2;
                    bool link_attachments = 3;
                    string name = 4;
                    int32 schedule_limit = 5;
                    repeated string supported_interactions = 6;
                }
                Profile profile = 1;
            }
            Types types = 1;
            message Urls {
                string cashtag = 1;
                string hashtag = 2;
                string user = 3;
            }
            Urls urls = 2;
        }
        Twitter twitter = 5;
    }
    Services services = 2;
}

message Individual_update {
    int32 buffer_count = 1;
    int32 buffer_percentage = 2;
    bool success = 3;
    message Update {
        string client_id = 1;
        int32 created_at = 2;
        string day = 3;
        int32 due_at = 4;
        string due_time = 5;
        string id = 6;
        message Media {
            string description = 1;
            string link = 2;
            string title = 3;
        }
        Media media = 7;
        string profile_id = 8;
        string profile_service = 9;
        string status = 10;
        string text = 11;
        string text_formatted = 12;
        string user_id = 13;
        string via = 14;
    }
    Update update = 4;
}

message Interactions {
    message Interaction {
        string _id = 1;
        int32 created_at = 2;
        string event = 3;
        string id = 4;
        string interaction_id = 5;
        message User {
            string avatar = 1;
            string avatar_https = 2;
            int32 followers = 3;
            string twitter_id = 4;
            string username = 5;
        }
        User user = 6;
    }
    repeated Interaction interactions = 1;
    int32 total = 2;
}

message NewUpdate {
    int32 buffer_count = 1;
    int32 buffer_percentage = 2;
    bool success = 3;
    message Update {
        int32 created_at = 1;
        string day = 2;
        int32 due_at = 3;
        string due_time = 4;
        string id = 5;
        message Media {
            string description = 1;
            string link = 2;
            string title = 3;
        }
        Media media = 6;
        string profile_id = 7;
        string profile_service = 8;
        string status = 9;
        string text = 10;
        string text_formatted = 11;
        string user_id = 12;
        string via = 13;
    }
    repeated Update updates = 4;
}

message Profile {
    string avatar = 1;
    int32 created_at = 2;
    bool default = 3;
    string formatted_username = 4;
    string id = 5;
    message Schedule {
        repeated string days = 1;
        repeated string times = 2;
    }
    repeated Schedule schedules = 6;
    string service = 7;
    string service_id = 8;
    string service_username = 9;
    message Statistics {
        int32 followers = 1;
    }
    Statistics statistics = 10;
    repeated string team_members = 11;
    string timezone = 12;
    string user_id = 13;
}

message Profile {
    string _id = 1;
    string avatar = 2;
    string avatar_https = 3;
    message Counts {
        int32 daily_suggestions = 1;
        int32 drafts = 2;
        int32 pending = 3;
        int32 sent = 4;
    }
    Counts counts = 4;
    string cover_photo = 5;
    bool default = 6;
    message Disabled_feature {
    }
    repeated Disabled_feature disabled_features = 7;
    string disconnected = 8;
    string formatted_service = 9;
    string formatted_username = 10;
    bool has_used_suggestions = 11;
    string id = 12;
    message Schedule {
        repeated string days = 1;
        message Time {
        }
        repeated Time times = 2;
    }
    repeated Schedule schedules = 13;
    string service = 14;
    string service_id = 15;
    string service_type = 16;
    string service_username = 17;
    message Shortener {
        string domain = 1;
    }
    Shortener shortener = 18;
    message Statistics {
        int32 connections = 1;
    }
    Statistics statistics = 19;
    string timezone = 20;
    string user_id = 21;
    string utm_tracking = 22;
    string verb = 23;
}
repeated Profile profiles = 1

message Reorder {
    bool success = 1;
    message Update {
        int32 created_at = 1;
        string day = 2;
        int32 due_at = 3;
        string due_time = 4;
        string id = 5;
        string profile_id = 6;
        string profile_service = 7;
        string status = 8;
        string text = 9;
        string text_formatted = 10;
        string user_id = 11;
        string via = 12;
    }
    repeated Update updates = 2;
}

message Schedules {
    repeated string days = 1;
    repeated string times = 2;
}

message Schedules_update {
    bool success = 1;
}

message Share {
    bool success = 1;
}

message Shares {
    int32 shares = 1;
}

message Shuffle {
    bool success = 1;
    message Update {
        int32 created_at = 1;
        string day = 2;
        int32 due_at = 3;
        string due_time = 4;
        string id = 5;
        string profile_id = 6;
        string profile_service = 7;
        string status = 8;
        string text = 9;
        string text_formatted = 10;
        string user_id = 11;
        string via = 12;
    }
    repeated Update updates = 2;
}

message Success {
    bool success = 1;
}

message Update {
    int32 created_at = 1;
    string day = 2;
    int32 due_at = 3;
    string due_time = 4;
    string id = 5;
    string profile_id = 6;
    string profile_service = 7;
    int32 sent_at = 8;
    string service_update_id = 9;
    message Statistics {
        int32 clicks = 1;
        int32 favorites = 2;
        int32 mentions = 3;
        int32 reach = 4;
        int32 retweets = 5;
    }
    Statistics statistics = 10;
    string status = 11;
    string text = 12;
    string text_formatted = 13;
    string user_id = 14;
    string via = 15;
}

message Updates_array {
    int32 total = 1;
    message Update {
        int32 created_at = 1;
        string day = 2;
        int32 due_at = 3;
        string due_time = 4;
        string id = 5;
        string profile_id = 6;
        string profile_service = 7;
        string status = 8;
        string text = 9;
        string text_formatted = 10;
        string user_id = 11;
        string via = 12;
    }
    repeated Update updates = 2;
}

message User {
    string _id = 1;
    int32 activity_at = 2;
    int32 created_at = 3;
    string id = 4;
    string plan = 5;
    string referral_link = 6;
    string referral_token = 7;
    string secret_email = 8;
    string timezone = 9;
}

service BufferappService {
    // Returns an object with the current configuration that Buffer is using, including supported services, their icons and the varying limits of character and schedules.
    rpc GetInfoConfigurationmediaTypeExtension(GetInfoConfigurationmediaTypeExtensionRequest) returns (Configuration) {
      option (google.api.http) = {
        get: "/1//info/configuration{mediaTypeExtension}"
      };
    }
    // Returns an object with a the numbers of shares a link has had using Buffer.
    rpc GetLinksSharesmediaTypeExtension(GetLinksSharesmediaTypeExtensionRequest) returns (Shares) {
      option (google.api.http) = {
        get: "/1//links/shares{mediaTypeExtension}"
      };
    }
    // "Set the posting schedules for the specified social media profile.
    rpc PostProfilesIdSchedulesUpdatemediaTypeExtension(PostProfilesIdSchedulesUpdatemediaTypeExtensionRequest) returns (Success) {
      option (google.api.http) = {
        post: "/1//profiles/{id}/schedules/update{mediaTypeExtension}"
      };
    }
    // Returns details of the posting schedules associated with a social media profile.
    rpc GetProfilesIdSchedulesmediaTypeExtension(GetProfilesIdSchedulesmediaTypeExtensionRequest) returns (Schedules) {
      option (google.api.http) = {
        get: "/1//profiles/{id}/schedules{mediaTypeExtension}"
      };
    }
    // "Returns an array of updates that are currently in the buffer for an individual social media profile.
    rpc GetProfilesIdUpdatesPendingmediaTypeExtension(GetProfilesIdUpdatesPendingmediaTypeExtensionRequest) returns (Updates-Array) {
      option (google.api.http) = {
        get: "/1//profiles/{id}/updates/pending{mediaTypeExtension}"
      };
    }
    // Edit the order at which statuses for the specified social media profile will be sent out of the buffer.
    rpc PostProfilesIdUpdatesReordermediaTypeExtension(PostProfilesIdUpdatesReordermediaTypeExtensionRequest) returns (Shuffle) {
      option (google.api.http) = {
        post: "/1//profiles/{id}/updates/reorder{mediaTypeExtension}"
      };
    }
    // Returns an array of updates that have been sent from the buffer for an individual social media profile.
    rpc GetProfilesIdUpdatesSentmediaTypeExtension(GetProfilesIdUpdatesSentmediaTypeExtensionRequest) returns (Updates-Array) {
      option (google.api.http) = {
        get: "/1//profiles/{id}/updates/sent{mediaTypeExtension}"
      };
    }
    // Randomize the order at which statuses for the specified social media profile will be sent out of the buffer.
    rpc PostProfilesIdUpdatesShufflemediaTypeExtension(PostProfilesIdUpdatesShufflemediaTypeExtensionRequest) returns (Shuffle) {
      option (google.api.http) = {
        post: "/1//profiles/{id}/updates/shuffle{mediaTypeExtension}"
      };
    }
    // Returns details of the single specified social media profile.
    rpc GetProfilesIdmediaTypeExtension(GetProfilesIdmediaTypeExtensionRequest) returns (Profile) {
      option (google.api.http) = {
        get: "/1//profiles/{id}{mediaTypeExtension}"
      };
    }
    // Returns an array of social media profiles connected to a users account.
    rpc GetProfilesmediaTypeExtension(GetProfilesmediaTypeExtensionRequest) returns (Profiles) {
      option (google.api.http) = {
        get: "/1//profiles{mediaTypeExtension}"
      };
    }
    // Create one or more new status updates.
    rpc PostUpdatesCreatemediaTypeExtension(PostUpdatesCreatemediaTypeExtensionRequest) returns (NewUpdate) {
      option (google.api.http) = {
        post: "/1//updates/create{mediaTypeExtension}"
      };
    }
    // Permanently delete an existing status update.
    rpc PostUpdatesIdDestroymediaTypeExtension(PostUpdatesIdDestroymediaTypeExtensionRequest) returns (Success) {
      option (google.api.http) = {
        post: "/1//updates/{id}/destroy{mediaTypeExtension}"
      };
    }
    // Returns the detailed information on individual interactions with the social media update such as favorites, retweets and likes.
    rpc GetUpdatesIdInteractionsmediaTypeExtension(GetUpdatesIdInteractionsmediaTypeExtensionRequest) returns (Interactions) {
      option (google.api.http) = {
        get: "/1//updates/{id}/interactions{mediaTypeExtension}"
      };
    }
    // Move an existing status update to the top of the queue and recalculate times for all updates in the queue. Returns the update with its new posting time.
    rpc PostUpdatesIdMove_to_topmediaTypeExtension(PostUpdatesIdMove_to_topmediaTypeExtensionRequest) returns (Update) {
      option (google.api.http) = {
        post: "/1//updates/{id}/move_to_top{mediaTypeExtension}"
      };
    }
    // Immediately shares a single pending update and recalculates times for updates remaining in the queue.
    rpc PostUpdatesIdSharemediaTypeExtension(PostUpdatesIdSharemediaTypeExtensionRequest) returns (Success) {
      option (google.api.http) = {
        post: "/1//updates/{id}/share{mediaTypeExtension}"
      };
    }
    // Edit an existing, individual status update.
    rpc PostUpdatesIdUpdatemediaTypeExtension(PostUpdatesIdUpdatemediaTypeExtensionRequest) returns (Individual-Update) {
      option (google.api.http) = {
        post: "/1//updates/{id}/update{mediaTypeExtension}"
      };
    }
    // Returns a single social media update.
    rpc GetUpdatesIdmediaTypeExtension(GetUpdatesIdmediaTypeExtensionRequest) returns (Update) {
      option (google.api.http) = {
        get: "/1//updates/{id}{mediaTypeExtension}"
      };
    }
    // Returns a single user.
    rpc GetUsermediaTypeExtension(GetUsermediaTypeExtensionRequest) returns (User) {
      option (google.api.http) = {
        get: "/1//user{mediaTypeExtension}"
      };
    }
}

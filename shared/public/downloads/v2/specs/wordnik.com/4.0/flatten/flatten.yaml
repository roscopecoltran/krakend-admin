basePath: /v4
definitions.ApiTokenStatus.properties.expiresInMillis.format: int64
definitions.ApiTokenStatus.properties.expiresInMillis.type: integer
definitions.ApiTokenStatus.properties.remainingCalls.format: int64
definitions.ApiTokenStatus.properties.remainingCalls.type: integer
definitions.ApiTokenStatus.properties.resetsInMillis.format: int64
definitions.ApiTokenStatus.properties.resetsInMillis.type: integer
definitions.ApiTokenStatus.properties.token.type: string
definitions.ApiTokenStatus.properties.totalRequests.format: int64
definitions.ApiTokenStatus.properties.totalRequests.type: integer
definitions.ApiTokenStatus.properties.valid.type: boolean
definitions.AudioFile.properties.attributionText.type: string
definitions.AudioFile.properties.attributionUrl.type: string
definitions.AudioFile.properties.audioType.type: string
definitions.AudioFile.properties.commentCount.format: int32
definitions.AudioFile.properties.commentCount.type: integer
definitions.AudioFile.properties.createdAt.format: date
definitions.AudioFile.properties.createdAt.type: string
definitions.AudioFile.properties.createdBy.type: string
definitions.AudioFile.properties.description.type: string
definitions.AudioFile.properties.duration.format: double
definitions.AudioFile.properties.duration.type: number
definitions.AudioFile.properties.fileUrl.type: string
definitions.AudioFile.properties.id.format: int64
definitions.AudioFile.properties.id.type: integer
definitions.AudioFile.properties.voteAverage.format: float
definitions.AudioFile.properties.voteAverage.type: number
definitions.AudioFile.properties.voteCount.format: int32
definitions.AudioFile.properties.voteCount.type: integer
definitions.AudioFile.properties.voteWeightedAverage.format: float
definitions.AudioFile.properties.voteWeightedAverage.type: number
definitions.AudioFile.properties.word.type: string
definitions.AudioFile.required.length: 1
definitions.AudioFile.required[0]: id
definitions.AudioType.properties.id.format: int32
definitions.AudioType.properties.id.type: integer
definitions.AudioType.properties.name.type: string
definitions.AuthenticationToken.properties.token.type: string
definitions.AuthenticationToken.properties.userId.format: int64
definitions.AuthenticationToken.properties.userId.type: integer
definitions.AuthenticationToken.properties.userSignature.type: string
definitions.Bigram.properties.count.format: int64
definitions.Bigram.properties.count.type: integer
definitions.Bigram.properties.gram1.type: string
definitions.Bigram.properties.gram2.type: string
definitions.Bigram.properties.mi.format: double
definitions.Bigram.properties.mi.type: number
definitions.Bigram.properties.wlmi.format: double
definitions.Bigram.properties.wlmi.type: number
definitions.Category.properties.id.format: int64
definitions.Category.properties.id.type: integer
definitions.Category.properties.name.type: string
definitions.Category.required.length: 1
definitions.Category.required[0]: id
definitions.Citation.properties.cite.type: string
definitions.Citation.properties.source.type: string
definitions.ContentProvider.properties.id.format: int32
definitions.ContentProvider.properties.id.type: integer
definitions.ContentProvider.properties.name.type: string
definitions.Definition.properties.attributionText.type: string
definitions.Definition.properties.attributionUrl.type: string
definitions.Definition.properties.citations.items.$ref: '#/definitions/Citation'
definitions.Definition.properties.citations.type: array
definitions.Definition.properties.exampleUses.items.$ref: '#/definitions/ExampleUsage'
definitions.Definition.properties.exampleUses.type: array
definitions.Definition.properties.extendedText.type: string
definitions.Definition.properties.labels.items.$ref: '#/definitions/Label'
definitions.Definition.properties.labels.type: array
definitions.Definition.properties.notes.items.$ref: '#/definitions/Note'
definitions.Definition.properties.notes.type: array
definitions.Definition.properties.partOfSpeech.type: string
definitions.Definition.properties.relatedWords.items.$ref: '#/definitions/Related'
definitions.Definition.properties.relatedWords.type: array
definitions.Definition.properties.score.format: float
definitions.Definition.properties.score.type: number
definitions.Definition.properties.seqString.type: string
definitions.Definition.properties.sequence.type: string
definitions.Definition.properties.sourceDictionary.type: string
definitions.Definition.properties.text.type: string
definitions.Definition.properties.textProns.items.$ref: '#/definitions/TextPron'
definitions.Definition.properties.textProns.type: array
definitions.Definition.properties.word.type: string
definitions.DefinitionSearchResults.properties.results.items.$ref: '#/definitions/Definition'
definitions.DefinitionSearchResults.properties.results.type: array
definitions.DefinitionSearchResults.properties.totalResults.format: int32
definitions.DefinitionSearchResults.properties.totalResults.type: integer
definitions.Example.properties.documentId.format: int64
definitions.Example.properties.documentId.type: integer
definitions.Example.properties.exampleId.format: int64
definitions.Example.properties.exampleId.type: integer
definitions.Example.properties.id.format: int64
definitions.Example.properties.id.type: integer
definitions.Example.properties.provider.$ref: '#/definitions/ContentProvider'
definitions.Example.properties.rating.format: float
definitions.Example.properties.rating.type: number
definitions.Example.properties.score.$ref: '#/definitions/ScoredWord'
definitions.Example.properties.sentence.$ref: '#/definitions/Sentence'
definitions.Example.properties.text.type: string
definitions.Example.properties.title.type: string
definitions.Example.properties.url.type: string
definitions.Example.properties.word.type: string
definitions.Example.properties.year.format: int32
definitions.Example.properties.year.type: integer
definitions.ExampleSearchResults.properties.examples.items.$ref: '#/definitions/Example'
definitions.ExampleSearchResults.properties.examples.type: array
definitions.ExampleSearchResults.properties.facets.items.$ref: '#/definitions/Facet'
definitions.ExampleSearchResults.properties.facets.type: array
definitions.ExampleUsage.properties.text.type: string
definitions.Facet.properties.facetValues.items.$ref: '#/definitions/FacetValue'
definitions.Facet.properties.facetValues.type: array
definitions.Facet.properties.name.type: string
definitions.FacetValue.properties.count.format: int64
definitions.FacetValue.properties.count.type: integer
definitions.FacetValue.properties.value.type: string
definitions.Frequency.properties.count.format: int64
definitions.Frequency.properties.count.type: integer
definitions.Frequency.properties.year.format: int32
definitions.Frequency.properties.year.type: integer
definitions.FrequencySummary.properties.frequency.items.$ref: '#/definitions/Frequency'
definitions.FrequencySummary.properties.frequency.type: array
definitions.FrequencySummary.properties.frequencyString.type: string
definitions.FrequencySummary.properties.totalCount.format: int64
definitions.FrequencySummary.properties.totalCount.type: integer
definitions.FrequencySummary.properties.unknownYearCount.format: int32
definitions.FrequencySummary.properties.unknownYearCount.type: integer
definitions.FrequencySummary.properties.word.type: string
definitions.Label.properties.text.type: string
definitions.Label.properties.type.type: string
definitions.Note.properties.appliesTo.items.type: string
definitions.Note.properties.appliesTo.type: array
definitions.Note.properties.noteType.type: string
definitions.Note.properties.pos.format: int32
definitions.Note.properties.pos.type: integer
definitions.Note.properties.value.type: string
definitions.PartOfSpeech.properties.allCategories.items.$ref: '#/definitions/Category'
definitions.PartOfSpeech.properties.allCategories.type: array
definitions.PartOfSpeech.properties.roots.items.$ref: '#/definitions/Root'
definitions.PartOfSpeech.properties.roots.type: array
definitions.PartOfSpeech.properties.storageAbbr.items.type: string
definitions.PartOfSpeech.properties.storageAbbr.type: array
definitions.Related.properties.gram.type: string
definitions.Related.properties.label1.type: string
definitions.Related.properties.label2.type: string
definitions.Related.properties.label3.type: string
definitions.Related.properties.label4.type: string
definitions.Related.properties.relationshipType.type: string
definitions.Related.properties.words.items.type: string
definitions.Related.properties.words.type: array
definitions.Root.properties.categories.items.$ref: '#/definitions/Category'
definitions.Root.properties.categories.type: array
definitions.Root.properties.id.format: int64
definitions.Root.properties.id.type: integer
definitions.Root.properties.name.type: string
definitions.Root.required.length: 1
definitions.Root.required[0]: id
definitions.ScoredWord.properties.baseWordScore.format: double
definitions.ScoredWord.properties.baseWordScore.type: number
definitions.ScoredWord.properties.docTermCount.format: int32
definitions.ScoredWord.properties.docTermCount.type: integer
definitions.ScoredWord.properties.id.format: int64
definitions.ScoredWord.properties.id.type: integer
definitions.ScoredWord.properties.lemma.type: string
definitions.ScoredWord.properties.partOfSpeech.type: string
definitions.ScoredWord.properties.position.format: int32
definitions.ScoredWord.properties.position.type: integer
definitions.ScoredWord.properties.score.format: float
definitions.ScoredWord.properties.score.type: number
definitions.ScoredWord.properties.sentenceId.format: int64
definitions.ScoredWord.properties.sentenceId.type: integer
definitions.ScoredWord.properties.stopword.type: boolean
definitions.ScoredWord.properties.word.type: string
definitions.ScoredWord.properties.wordType.type: string
definitions.Sentence.properties.display.type: string
definitions.Sentence.properties.documentMetadataId.format: int64
definitions.Sentence.properties.documentMetadataId.type: integer
definitions.Sentence.properties.hasScoredWords.type: boolean
definitions.Sentence.properties.id.format: int64
definitions.Sentence.properties.id.type: integer
definitions.Sentence.properties.rating.format: int32
definitions.Sentence.properties.rating.type: integer
definitions.Sentence.properties.scoredWords.items.$ref: '#/definitions/ScoredWord'
definitions.Sentence.properties.scoredWords.type: array
definitions.SimpleDefinition.properties.note.type: string
definitions.SimpleDefinition.properties.partOfSpeech.type: string
definitions.SimpleDefinition.properties.source.type: string
definitions.SimpleDefinition.properties.text.type: string
definitions.SimpleExample.properties.id.format: int64
definitions.SimpleExample.properties.id.type: integer
definitions.SimpleExample.properties.text.type: string
definitions.SimpleExample.properties.title.type: string
definitions.SimpleExample.properties.url.type: string
definitions.StringValue.properties.word.type: string
definitions.Syllable.properties.seq.format: int32
definitions.Syllable.properties.seq.type: integer
definitions.Syllable.properties.text.type: string
definitions.Syllable.properties.type.type: string
definitions.TextPron.properties.raw.type: string
definitions.TextPron.properties.rawType.type: string
definitions.TextPron.properties.seq.format: int32
definitions.TextPron.properties.seq.type: integer
definitions.User.properties.displayName.type: string
definitions.User.properties.email.type: string
definitions.User.properties.faceBookId.type: string
definitions.User.properties.id.format: int64
definitions.User.properties.id.type: integer
definitions.User.properties.password.type: string
definitions.User.properties.status.format: int32
definitions.User.properties.status.type: integer
definitions.User.properties.userName.type: string
definitions.User.properties.username.type: string
definitions.WordList.properties.createdAt.format: date
definitions.WordList.properties.createdAt.type: string
definitions.WordList.properties.description.type: string
definitions.WordList.properties.id.format: int64
definitions.WordList.properties.id.type: integer
definitions.WordList.properties.lastActivityAt.format: date
definitions.WordList.properties.lastActivityAt.type: string
definitions.WordList.properties.name.type: string
definitions.WordList.properties.numberWordsInList.format: int64
definitions.WordList.properties.numberWordsInList.type: integer
definitions.WordList.properties.permalink.type: string
definitions.WordList.properties.type.type: string
definitions.WordList.properties.updatedAt.format: date
definitions.WordList.properties.updatedAt.type: string
definitions.WordList.properties.userId.format: int64
definitions.WordList.properties.userId.type: integer
definitions.WordList.properties.username.type: string
definitions.WordListWord.properties.createdAt.format: date
definitions.WordListWord.properties.createdAt.type: string
definitions.WordListWord.properties.id.format: int64
definitions.WordListWord.properties.id.type: integer
definitions.WordListWord.properties.numberCommentsOnWord.format: int64
definitions.WordListWord.properties.numberCommentsOnWord.type: integer
definitions.WordListWord.properties.numberLists.format: int64
definitions.WordListWord.properties.numberLists.type: integer
definitions.WordListWord.properties.userId.format: int64
definitions.WordListWord.properties.userId.type: integer
definitions.WordListWord.properties.username.type: string
definitions.WordListWord.properties.word.type: string
definitions.WordListWord.required.length: 1
definitions.WordListWord.required[0]: id
definitions.WordObject.properties.canonicalForm.type: string
definitions.WordObject.properties.id.format: int64
definitions.WordObject.properties.id.type: integer
definitions.WordObject.properties.originalWord.type: string
definitions.WordObject.properties.suggestions.items.type: string
definitions.WordObject.properties.suggestions.type: array
definitions.WordObject.properties.vulgar.type: string
definitions.WordObject.properties.word.type: string
definitions.WordObject.required.length: 1
definitions.WordObject.required[0]: id
definitions.WordOfTheDay.properties.category.type: string
definitions.WordOfTheDay.properties.contentProvider.$ref: '#/definitions/ContentProvider'
definitions.WordOfTheDay.properties.createdAt.format: date
definitions.WordOfTheDay.properties.createdAt.type: string
definitions.WordOfTheDay.properties.createdBy.type: string
definitions.WordOfTheDay.properties.definitions.items.$ref: '#/definitions/SimpleDefinition'
definitions.WordOfTheDay.properties.definitions.type: array
definitions.WordOfTheDay.properties.examples.items.$ref: '#/definitions/SimpleExample'
definitions.WordOfTheDay.properties.examples.type: array
definitions.WordOfTheDay.properties.htmlExtra.type: string
definitions.WordOfTheDay.properties.id.format: int64
definitions.WordOfTheDay.properties.id.type: integer
definitions.WordOfTheDay.properties.note.type: string
definitions.WordOfTheDay.properties.parentId.type: string
definitions.WordOfTheDay.properties.publishDate.format: date
definitions.WordOfTheDay.properties.publishDate.type: string
definitions.WordOfTheDay.properties.word.type: string
definitions.WordOfTheDay.required.length: 1
definitions.WordOfTheDay.required[0]: id
definitions.WordSearchResult.properties.count.format: int64
definitions.WordSearchResult.properties.count.type: integer
definitions.WordSearchResult.properties.lexicality.format: double
definitions.WordSearchResult.properties.lexicality.type: number
definitions.WordSearchResult.properties.word.type: string
definitions.WordSearchResults.properties.searchResults.items.$ref: '#/definitions/WordSearchResult'
definitions.WordSearchResults.properties.searchResults.type: array
definitions.WordSearchResults.properties.totalResults.format: int32
definitions.WordSearchResults.properties.totalResults.type: integer
externalDocs.url: http://developer.wordnik.com/
host: api.wordnik.com
info.description: |
  Wordnik is the world's biggest online English dictionary, by number of words
info.title: Wordnik
info.version: "4.0"
info.x-apisguru-categories.length: 1
info.x-apisguru-categories[0]: text
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_wordnik.com_img_logo-wordnik-home.png
info.x-origin.length: 1
info.x-origin[0].converter.url: https://github.com/lucybot/api-spec-converter
info.x-origin[0].converter.version: 2.5.0
info.x-origin[0].format: swagger
info.x-origin[0].url: http://developer.wordnik.com/v4/resources.json
info.x-origin[0].version: "1.1"
info.x-preferred: true
info.x-providerName: wordnik.com
paths./account.json/apiTokenStatus.get.operationId: getApiTokenStatus
paths./account.json/apiTokenStatus.get.parameters.length: 1
paths./account.json/apiTokenStatus.get.parameters[0].description: Wordnik authentication
  token
paths./account.json/apiTokenStatus.get.parameters[0].in: header
paths./account.json/apiTokenStatus.get.parameters[0].name: api_key
paths./account.json/apiTokenStatus.get.parameters[0].required: false
paths./account.json/apiTokenStatus.get.parameters[0].type: string
paths./account.json/apiTokenStatus.get.responses.200.description: No response was
  specified
paths./account.json/apiTokenStatus.get.responses.200.schema.$ref: '#/definitions/ApiTokenStatus'
paths./account.json/apiTokenStatus.get.summary: Returns usage statistics for the API
  account.
paths./account.json/apiTokenStatus.get.tags.length: 1
paths./account.json/apiTokenStatus.get.tags[0]: account
paths./account.json/authenticate/{username}.get.operationId: authenticate
paths./account.json/authenticate/{username}.get.parameters.length: 2
paths./account.json/authenticate/{username}.get.parameters[0].description: A confirmed
  Wordnik username
paths./account.json/authenticate/{username}.get.parameters[0].in: path
paths./account.json/authenticate/{username}.get.parameters[0].name: username
paths./account.json/authenticate/{username}.get.parameters[0].required: true
paths./account.json/authenticate/{username}.get.parameters[0].type: string
paths./account.json/authenticate/{username}.get.parameters[1].description: The user's
  password
paths./account.json/authenticate/{username}.get.parameters[1].in: query
paths./account.json/authenticate/{username}.get.parameters[1].name: password
paths./account.json/authenticate/{username}.get.parameters[1].required: true
paths./account.json/authenticate/{username}.get.parameters[1].type: string
paths./account.json/authenticate/{username}.get.responses.200.description: No response
  was specified
paths./account.json/authenticate/{username}.get.responses.200.schema.$ref: '#/definitions/AuthenticationToken'
paths./account.json/authenticate/{username}.get.summary: Authenticates a User
paths./account.json/authenticate/{username}.get.tags.length: 1
paths./account.json/authenticate/{username}.get.tags[0]: account
paths./account.json/authenticate/{username}.post.operationId: authenticatePost
paths./account.json/authenticate/{username}.post.parameters.length: 2
paths./account.json/authenticate/{username}.post.parameters[0].description: A confirmed
  Wordnik username
paths./account.json/authenticate/{username}.post.parameters[0].in: path
paths./account.json/authenticate/{username}.post.parameters[0].name: username
paths./account.json/authenticate/{username}.post.parameters[0].required: true
paths./account.json/authenticate/{username}.post.parameters[0].type: string
paths./account.json/authenticate/{username}.post.parameters[1].description: The user's
  password
paths./account.json/authenticate/{username}.post.parameters[1].in: body
paths./account.json/authenticate/{username}.post.parameters[1].name: body
paths./account.json/authenticate/{username}.post.parameters[1].required: true
paths./account.json/authenticate/{username}.post.parameters[1].schema.type: string
paths./account.json/authenticate/{username}.post.responses.200.description: No response
  was specified
paths./account.json/authenticate/{username}.post.responses.200.schema.$ref: '#/definitions/AuthenticationToken'
paths./account.json/authenticate/{username}.post.summary: Authenticates a user
paths./account.json/authenticate/{username}.post.tags.length: 1
paths./account.json/authenticate/{username}.post.tags[0]: account
paths./account.json/user.get.description: Requires a valid auth_token to be set.
paths./account.json/user.get.operationId: getLoggedInUser
paths./account.json/user.get.parameters.length: 1
paths./account.json/user.get.parameters[0].description: The auth token of the logged-in
  user, obtained by calling /account.{format}/authenticate/{username} (described above)
paths./account.json/user.get.parameters[0].in: header
paths./account.json/user.get.parameters[0].name: auth_token
paths./account.json/user.get.parameters[0].required: true
paths./account.json/user.get.parameters[0].type: string
paths./account.json/user.get.responses.200.description: No response was specified
paths./account.json/user.get.responses.200.schema.$ref: '#/definitions/User'
paths./account.json/user.get.summary: Returns the logged-in User
paths./account.json/user.get.tags.length: 1
paths./account.json/user.get.tags[0]: account
paths./account.json/wordLists.get.operationId: getWordListsForLoggedInUser
paths./account.json/wordLists.get.parameters.length: 3
paths./account.json/wordLists.get.parameters[0].description: auth_token of logged-in
  user
paths./account.json/wordLists.get.parameters[0].in: header
paths./account.json/wordLists.get.parameters[0].name: auth_token
paths./account.json/wordLists.get.parameters[0].required: true
paths./account.json/wordLists.get.parameters[0].type: string
paths./account.json/wordLists.get.parameters[1].default: 0
paths./account.json/wordLists.get.parameters[1].description: Results to skip
paths./account.json/wordLists.get.parameters[1].format: int32
paths./account.json/wordLists.get.parameters[1].in: query
paths./account.json/wordLists.get.parameters[1].name: skip
paths./account.json/wordLists.get.parameters[1].required: false
paths./account.json/wordLists.get.parameters[1].type: integer
paths./account.json/wordLists.get.parameters[2].default: 50
paths./account.json/wordLists.get.parameters[2].description: Maximum number of results
  to return
paths./account.json/wordLists.get.parameters[2].format: int32
paths./account.json/wordLists.get.parameters[2].in: query
paths./account.json/wordLists.get.parameters[2].name: limit
paths./account.json/wordLists.get.parameters[2].required: false
paths./account.json/wordLists.get.parameters[2].type: integer
paths./account.json/wordLists.get.responses.200.description: No response was specified
paths./account.json/wordLists.get.responses.200.schema.items.$ref: '#/definitions/WordList'
paths./account.json/wordLists.get.responses.200.schema.type: array
paths./account.json/wordLists.get.summary: Fetches WordList objects for the logged-in
  user.
paths./account.json/wordLists.get.tags.length: 1
paths./account.json/wordLists.get.tags[0]: account
paths./word.json/{word}.get.operationId: getWord
paths./word.json/{word}.get.parameters.length: 3
paths./word.json/{word}.get.parameters[0].description: String value of WordObject
  to return
paths./word.json/{word}.get.parameters[0].in: path
paths./word.json/{word}.get.parameters[0].name: word
paths./word.json/{word}.get.parameters[0].required: true
paths./word.json/{word}.get.parameters[0].type: string
paths./word.json/{word}.get.parameters[1].default: "false"
paths./word.json/{word}.get.parameters[1].description: If true will try to return
  the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
paths./word.json/{word}.get.parameters[1].in: query
paths./word.json/{word}.get.parameters[1].name: useCanonical
paths./word.json/{word}.get.parameters[1].required: false
paths./word.json/{word}.get.parameters[1].type: string
paths./word.json/{word}.get.parameters[2].default: "true"
paths./word.json/{word}.get.parameters[2].description: Return suggestions (for correct
  spelling, case variants, etc.)
paths./word.json/{word}.get.parameters[2].in: query
paths./word.json/{word}.get.parameters[2].name: includeSuggestions
paths./word.json/{word}.get.parameters[2].required: false
paths./word.json/{word}.get.parameters[2].type: string
paths./word.json/{word}.get.responses.200.description: No response was specified
paths./word.json/{word}.get.responses.200.schema.$ref: '#/definitions/WordObject'
paths./word.json/{word}.get.summary: Given a word as a string, returns the WordObject
  that represents it
paths./word.json/{word}.get.tags.length: 1
paths./word.json/{word}.get.tags[0]: word
paths./word.json/{word}/audio.get.description: The metadata includes a time-expiring
  fileUrl which allows reading the audio file directly from the API.  Currently only
  audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
paths./word.json/{word}/audio.get.operationId: getAudio
paths./word.json/{word}/audio.get.parameters.length: 3
paths./word.json/{word}/audio.get.parameters[0].description: Word to get audio for.
paths./word.json/{word}/audio.get.parameters[0].in: path
paths./word.json/{word}/audio.get.parameters[0].name: word
paths./word.json/{word}/audio.get.parameters[0].required: true
paths./word.json/{word}/audio.get.parameters[0].type: string
paths./word.json/{word}/audio.get.parameters[1].default: "false"
paths./word.json/{word}/audio.get.parameters[1].description: Use the canonical form
  of the word
paths./word.json/{word}/audio.get.parameters[1].in: query
paths./word.json/{word}/audio.get.parameters[1].name: useCanonical
paths./word.json/{word}/audio.get.parameters[1].required: false
paths./word.json/{word}/audio.get.parameters[1].type: string
paths./word.json/{word}/audio.get.parameters[2].default: 50
paths./word.json/{word}/audio.get.parameters[2].description: Maximum number of results
  to return
paths./word.json/{word}/audio.get.parameters[2].format: int32
paths./word.json/{word}/audio.get.parameters[2].in: query
paths./word.json/{word}/audio.get.parameters[2].name: limit
paths./word.json/{word}/audio.get.parameters[2].required: false
paths./word.json/{word}/audio.get.parameters[2].type: integer
paths./word.json/{word}/audio.get.responses.200.description: No response was specified
paths./word.json/{word}/audio.get.responses.200.schema.items.$ref: '#/definitions/AudioFile'
paths./word.json/{word}/audio.get.responses.200.schema.type: array
paths./word.json/{word}/audio.get.summary: Fetches audio metadata for a word.
paths./word.json/{word}/audio.get.tags.length: 1
paths./word.json/{word}/audio.get.tags[0]: word
paths./word.json/{word}/definitions.get.operationId: getDefinitions
paths./word.json/{word}/definitions.get.parameters.length: 7
paths./word.json/{word}/definitions.get.parameters[0].description: Word to return
  definitions for
paths./word.json/{word}/definitions.get.parameters[0].in: path
paths./word.json/{word}/definitions.get.parameters[0].name: word
paths./word.json/{word}/definitions.get.parameters[0].required: true
paths./word.json/{word}/definitions.get.parameters[0].type: string
paths./word.json/{word}/definitions.get.parameters[1].default: 200
paths./word.json/{word}/definitions.get.parameters[1].description: Maximum number
  of results to return
paths./word.json/{word}/definitions.get.parameters[1].format: int32
paths./word.json/{word}/definitions.get.parameters[1].in: query
paths./word.json/{word}/definitions.get.parameters[1].name: limit
paths./word.json/{word}/definitions.get.parameters[1].required: false
paths./word.json/{word}/definitions.get.parameters[1].type: integer
paths./word.json/{word}/definitions.get.parameters[2].description: CSV list of part-of-speech
  types
paths./word.json/{word}/definitions.get.parameters[2].in: query
paths./word.json/{word}/definitions.get.parameters[2].name: partOfSpeech
paths./word.json/{word}/definitions.get.parameters[2].required: false
paths./word.json/{word}/definitions.get.parameters[2].type: string
paths./word.json/{word}/definitions.get.parameters[3].default: "false"
paths./word.json/{word}/definitions.get.parameters[3].description: Return related
  words with definitions
paths./word.json/{word}/definitions.get.parameters[3].in: query
paths./word.json/{word}/definitions.get.parameters[3].name: includeRelated
paths./word.json/{word}/definitions.get.parameters[3].required: false
paths./word.json/{word}/definitions.get.parameters[3].type: string
paths./word.json/{word}/definitions.get.parameters[4].description: 'Source dictionary
  to return definitions from.  If ''all'' is received, results are returned from all
  sources. If multiple values are received (e.g. ''century,wiktionary''), results
  are returned from the first specified dictionary that has definitions. If left blank,
  results are returned from the first dictionary that has definitions. By default,
  dictionaries are searched in this order: ahd, wiktionary, webster, century, wordnet'
paths./word.json/{word}/definitions.get.parameters[4].in: query
paths./word.json/{word}/definitions.get.parameters[4].items.type: string
paths./word.json/{word}/definitions.get.parameters[4].name: sourceDictionaries
paths./word.json/{word}/definitions.get.parameters[4].required: false
paths./word.json/{word}/definitions.get.parameters[4].type: array
paths./word.json/{word}/definitions.get.parameters[5].default: "false"
paths./word.json/{word}/definitions.get.parameters[5].description: If true will try
  to return the correct word root ('cats' -> 'cat'). If false returns exactly what
  was requested.
paths./word.json/{word}/definitions.get.parameters[5].in: query
paths./word.json/{word}/definitions.get.parameters[5].name: useCanonical
paths./word.json/{word}/definitions.get.parameters[5].required: false
paths./word.json/{word}/definitions.get.parameters[5].type: string
paths./word.json/{word}/definitions.get.parameters[6].default: "false"
paths./word.json/{word}/definitions.get.parameters[6].description: Return a closed
  set of XML tags in response
paths./word.json/{word}/definitions.get.parameters[6].in: query
paths./word.json/{word}/definitions.get.parameters[6].name: includeTags
paths./word.json/{word}/definitions.get.parameters[6].required: false
paths./word.json/{word}/definitions.get.parameters[6].type: string
paths./word.json/{word}/definitions.get.responses.200.description: No response was
  specified
paths./word.json/{word}/definitions.get.responses.200.schema.items.$ref: '#/definitions/Definition'
paths./word.json/{word}/definitions.get.responses.200.schema.type: array
paths./word.json/{word}/definitions.get.summary: Return definitions for a word
paths./word.json/{word}/definitions.get.tags.length: 1
paths./word.json/{word}/definitions.get.tags[0]: word
paths./word.json/{word}/etymologies.get.operationId: getEtymologies
paths./word.json/{word}/etymologies.get.parameters.length: 2
paths./word.json/{word}/etymologies.get.parameters[0].description: Word to return
paths./word.json/{word}/etymologies.get.parameters[0].in: path
paths./word.json/{word}/etymologies.get.parameters[0].name: word
paths./word.json/{word}/etymologies.get.parameters[0].required: true
paths./word.json/{word}/etymologies.get.parameters[0].type: string
paths./word.json/{word}/etymologies.get.parameters[1].description: If true will try
  to return the correct word root ('cats' -> 'cat'). If false returns exactly what
  was requested.
paths./word.json/{word}/etymologies.get.parameters[1].in: query
paths./word.json/{word}/etymologies.get.parameters[1].name: useCanonical
paths./word.json/{word}/etymologies.get.parameters[1].required: false
paths./word.json/{word}/etymologies.get.parameters[1].type: string
paths./word.json/{word}/etymologies.get.responses.200.description: No response was
  specified
paths./word.json/{word}/etymologies.get.responses.200.schema.items.type: string
paths./word.json/{word}/etymologies.get.responses.200.schema.type: array
paths./word.json/{word}/etymologies.get.summary: Fetches etymology data
paths./word.json/{word}/etymologies.get.tags.length: 1
paths./word.json/{word}/etymologies.get.tags[0]: word
paths./word.json/{word}/examples.get.operationId: getExamples
paths./word.json/{word}/examples.get.parameters.length: 5
paths./word.json/{word}/examples.get.parameters[0].description: Word to return examples
  for
paths./word.json/{word}/examples.get.parameters[0].in: path
paths./word.json/{word}/examples.get.parameters[0].name: word
paths./word.json/{word}/examples.get.parameters[0].required: true
paths./word.json/{word}/examples.get.parameters[0].type: string
paths./word.json/{word}/examples.get.parameters[1].default: "false"
paths./word.json/{word}/examples.get.parameters[1].description: Show duplicate examples
  from different sources
paths./word.json/{word}/examples.get.parameters[1].in: query
paths./word.json/{word}/examples.get.parameters[1].name: includeDuplicates
paths./word.json/{word}/examples.get.parameters[1].required: false
paths./word.json/{word}/examples.get.parameters[1].type: string
paths./word.json/{word}/examples.get.parameters[2].default: "false"
paths./word.json/{word}/examples.get.parameters[2].description: If true will try to
  return the correct word root ('cats' -> 'cat'). If false returns exactly what was
  requested.
paths./word.json/{word}/examples.get.parameters[2].in: query
paths./word.json/{word}/examples.get.parameters[2].name: useCanonical
paths./word.json/{word}/examples.get.parameters[2].required: false
paths./word.json/{word}/examples.get.parameters[2].type: string
paths./word.json/{word}/examples.get.parameters[3].default: 0
paths./word.json/{word}/examples.get.parameters[3].description: Results to skip
paths./word.json/{word}/examples.get.parameters[3].format: int32
paths./word.json/{word}/examples.get.parameters[3].in: query
paths./word.json/{word}/examples.get.parameters[3].name: skip
paths./word.json/{word}/examples.get.parameters[3].required: false
paths./word.json/{word}/examples.get.parameters[3].type: integer
paths./word.json/{word}/examples.get.parameters[4].default: 5
paths./word.json/{word}/examples.get.parameters[4].description: Maximum number of
  results to return
paths./word.json/{word}/examples.get.parameters[4].format: int32
paths./word.json/{word}/examples.get.parameters[4].in: query
paths./word.json/{word}/examples.get.parameters[4].name: limit
paths./word.json/{word}/examples.get.parameters[4].required: false
paths./word.json/{word}/examples.get.parameters[4].type: integer
paths./word.json/{word}/examples.get.responses.200.description: No response was specified
paths./word.json/{word}/examples.get.responses.200.schema.$ref: '#/definitions/ExampleSearchResults'
paths./word.json/{word}/examples.get.summary: Returns examples for a word
paths./word.json/{word}/examples.get.tags.length: 1
paths./word.json/{word}/examples.get.tags[0]: word
paths./word.json/{word}/frequency.get.operationId: getWordFrequency
paths./word.json/{word}/frequency.get.parameters.length: 4
paths./word.json/{word}/frequency.get.parameters[0].description: Word to return
paths./word.json/{word}/frequency.get.parameters[0].in: path
paths./word.json/{word}/frequency.get.parameters[0].name: word
paths./word.json/{word}/frequency.get.parameters[0].required: true
paths./word.json/{word}/frequency.get.parameters[0].type: string
paths./word.json/{word}/frequency.get.parameters[1].default: "false"
paths./word.json/{word}/frequency.get.parameters[1].description: If true will try
  to return the correct word root ('cats' -> 'cat'). If false returns exactly what
  was requested.
paths./word.json/{word}/frequency.get.parameters[1].in: query
paths./word.json/{word}/frequency.get.parameters[1].name: useCanonical
paths./word.json/{word}/frequency.get.parameters[1].required: false
paths./word.json/{word}/frequency.get.parameters[1].type: string
paths./word.json/{word}/frequency.get.parameters[2].default: 1800
paths./word.json/{word}/frequency.get.parameters[2].description: Starting Year
paths./word.json/{word}/frequency.get.parameters[2].format: int32
paths./word.json/{word}/frequency.get.parameters[2].in: query
paths./word.json/{word}/frequency.get.parameters[2].name: startYear
paths./word.json/{word}/frequency.get.parameters[2].required: false
paths./word.json/{word}/frequency.get.parameters[2].type: integer
paths./word.json/{word}/frequency.get.parameters[3].default: 2012
paths./word.json/{word}/frequency.get.parameters[3].description: Ending Year
paths./word.json/{word}/frequency.get.parameters[3].format: int32
paths./word.json/{word}/frequency.get.parameters[3].in: query
paths./word.json/{word}/frequency.get.parameters[3].name: endYear
paths./word.json/{word}/frequency.get.parameters[3].required: false
paths./word.json/{word}/frequency.get.parameters[3].type: integer
paths./word.json/{word}/frequency.get.responses.200.description: No response was specified
paths./word.json/{word}/frequency.get.responses.200.schema.$ref: '#/definitions/FrequencySummary'
paths./word.json/{word}/frequency.get.summary: Returns word usage over time
paths./word.json/{word}/frequency.get.tags.length: 1
paths./word.json/{word}/frequency.get.tags[0]: word
paths./word.json/{word}/hyphenation.get.operationId: getHyphenation
paths./word.json/{word}/hyphenation.get.parameters.length: 4
paths./word.json/{word}/hyphenation.get.parameters[0].description: Word to get syllables
  for
paths./word.json/{word}/hyphenation.get.parameters[0].in: path
paths./word.json/{word}/hyphenation.get.parameters[0].name: word
paths./word.json/{word}/hyphenation.get.parameters[0].required: true
paths./word.json/{word}/hyphenation.get.parameters[0].type: string
paths./word.json/{word}/hyphenation.get.parameters[1].default: "false"
paths./word.json/{word}/hyphenation.get.parameters[1].description: If true will try
  to return a correct word root ('cats' -> 'cat'). If false returns exactly what was
  requested.
paths./word.json/{word}/hyphenation.get.parameters[1].in: query
paths./word.json/{word}/hyphenation.get.parameters[1].name: useCanonical
paths./word.json/{word}/hyphenation.get.parameters[1].required: false
paths./word.json/{word}/hyphenation.get.parameters[1].type: string
paths./word.json/{word}/hyphenation.get.parameters[2].description: 'Get from a single
  dictionary. Valid options: ahd, century, wiktionary, webster, and wordnet.'
paths./word.json/{word}/hyphenation.get.parameters[2].in: query
paths./word.json/{word}/hyphenation.get.parameters[2].name: sourceDictionary
paths./word.json/{word}/hyphenation.get.parameters[2].required: false
paths./word.json/{word}/hyphenation.get.parameters[2].type: string
paths./word.json/{word}/hyphenation.get.parameters[3].default: 50
paths./word.json/{word}/hyphenation.get.parameters[3].description: Maximum number
  of results to return
paths./word.json/{word}/hyphenation.get.parameters[3].format: int32
paths./word.json/{word}/hyphenation.get.parameters[3].in: query
paths./word.json/{word}/hyphenation.get.parameters[3].name: limit
paths./word.json/{word}/hyphenation.get.parameters[3].required: false
paths./word.json/{word}/hyphenation.get.parameters[3].type: integer
paths./word.json/{word}/hyphenation.get.responses.200.description: No response was
  specified
paths./word.json/{word}/hyphenation.get.responses.200.schema.items.$ref: '#/definitions/Syllable'
paths./word.json/{word}/hyphenation.get.responses.200.schema.type: array
paths./word.json/{word}/hyphenation.get.summary: Returns syllable information for
  a word
paths./word.json/{word}/hyphenation.get.tags.length: 1
paths./word.json/{word}/hyphenation.get.tags[0]: word
paths./word.json/{word}/phrases.get.operationId: getPhrases
paths./word.json/{word}/phrases.get.parameters.length: 4
paths./word.json/{word}/phrases.get.parameters[0].description: Word to fetch phrases
  for
paths./word.json/{word}/phrases.get.parameters[0].in: path
paths./word.json/{word}/phrases.get.parameters[0].name: word
paths./word.json/{word}/phrases.get.parameters[0].required: true
paths./word.json/{word}/phrases.get.parameters[0].type: string
paths./word.json/{word}/phrases.get.parameters[1].default: 5
paths./word.json/{word}/phrases.get.parameters[1].description: Maximum number of results
  to return
paths./word.json/{word}/phrases.get.parameters[1].format: int32
paths./word.json/{word}/phrases.get.parameters[1].in: query
paths./word.json/{word}/phrases.get.parameters[1].name: limit
paths./word.json/{word}/phrases.get.parameters[1].required: false
paths./word.json/{word}/phrases.get.parameters[1].type: integer
paths./word.json/{word}/phrases.get.parameters[2].default: 0
paths./word.json/{word}/phrases.get.parameters[2].description: Minimum WLMI for the
  phrase
paths./word.json/{word}/phrases.get.parameters[2].format: int32
paths./word.json/{word}/phrases.get.parameters[2].in: query
paths./word.json/{word}/phrases.get.parameters[2].name: wlmi
paths./word.json/{word}/phrases.get.parameters[2].required: false
paths./word.json/{word}/phrases.get.parameters[2].type: integer
paths./word.json/{word}/phrases.get.parameters[3].default: "false"
paths./word.json/{word}/phrases.get.parameters[3].description: If true will try to
  return the correct word root ('cats' -> 'cat'). If false returns exactly what was
  requested.
paths./word.json/{word}/phrases.get.parameters[3].in: query
paths./word.json/{word}/phrases.get.parameters[3].name: useCanonical
paths./word.json/{word}/phrases.get.parameters[3].required: false
paths./word.json/{word}/phrases.get.parameters[3].type: string
paths./word.json/{word}/phrases.get.responses.200.description: No response was specified
paths./word.json/{word}/phrases.get.responses.200.schema.items.$ref: '#/definitions/Bigram'
paths./word.json/{word}/phrases.get.responses.200.schema.type: array
paths./word.json/{word}/phrases.get.summary: Fetches bi-gram phrases for a word
paths./word.json/{word}/phrases.get.tags.length: 1
paths./word.json/{word}/phrases.get.tags[0]: word
paths./word.json/{word}/pronunciations.get.operationId: getTextPronunciations
paths./word.json/{word}/pronunciations.get.parameters.length: 5
paths./word.json/{word}/pronunciations.get.parameters[0].description: Word to get
  pronunciations for
paths./word.json/{word}/pronunciations.get.parameters[0].in: path
paths./word.json/{word}/pronunciations.get.parameters[0].name: word
paths./word.json/{word}/pronunciations.get.parameters[0].required: true
paths./word.json/{word}/pronunciations.get.parameters[0].type: string
paths./word.json/{word}/pronunciations.get.parameters[1].default: "false"
paths./word.json/{word}/pronunciations.get.parameters[1].description: If true will
  try to return a correct word root ('cats' -> 'cat'). If false returns exactly what
  was requested.
paths./word.json/{word}/pronunciations.get.parameters[1].in: query
paths./word.json/{word}/pronunciations.get.parameters[1].name: useCanonical
paths./word.json/{word}/pronunciations.get.parameters[1].required: false
paths./word.json/{word}/pronunciations.get.parameters[1].type: string
paths./word.json/{word}/pronunciations.get.parameters[2].description: Get from a single
  dictionary
paths./word.json/{word}/pronunciations.get.parameters[2].in: query
paths./word.json/{word}/pronunciations.get.parameters[2].name: sourceDictionary
paths./word.json/{word}/pronunciations.get.parameters[2].required: false
paths./word.json/{word}/pronunciations.get.parameters[2].type: string
paths./word.json/{word}/pronunciations.get.parameters[3].description: Text pronunciation
  type
paths./word.json/{word}/pronunciations.get.parameters[3].in: query
paths./word.json/{word}/pronunciations.get.parameters[3].name: typeFormat
paths./word.json/{word}/pronunciations.get.parameters[3].required: false
paths./word.json/{word}/pronunciations.get.parameters[3].type: string
paths./word.json/{word}/pronunciations.get.parameters[4].default: 50
paths./word.json/{word}/pronunciations.get.parameters[4].description: Maximum number
  of results to return
paths./word.json/{word}/pronunciations.get.parameters[4].format: int32
paths./word.json/{word}/pronunciations.get.parameters[4].in: query
paths./word.json/{word}/pronunciations.get.parameters[4].name: limit
paths./word.json/{word}/pronunciations.get.parameters[4].required: false
paths./word.json/{word}/pronunciations.get.parameters[4].type: integer
paths./word.json/{word}/pronunciations.get.responses.200.description: No response
  was specified
paths./word.json/{word}/pronunciations.get.responses.200.schema.items.$ref: '#/definitions/TextPron'
paths./word.json/{word}/pronunciations.get.responses.200.schema.type: array
paths./word.json/{word}/pronunciations.get.summary: Returns text pronunciations for
  a given word
paths./word.json/{word}/pronunciations.get.tags.length: 1
paths./word.json/{word}/pronunciations.get.tags[0]: word
paths./word.json/{word}/relatedWords.get.operationId: getRelatedWords
paths./word.json/{word}/relatedWords.get.parameters.length: 4
paths./word.json/{word}/relatedWords.get.parameters[0].description: Word to fetch
  relationships for
paths./word.json/{word}/relatedWords.get.parameters[0].in: path
paths./word.json/{word}/relatedWords.get.parameters[0].name: word
paths./word.json/{word}/relatedWords.get.parameters[0].required: true
paths./word.json/{word}/relatedWords.get.parameters[0].type: string
paths./word.json/{word}/relatedWords.get.parameters[1].default: "false"
paths./word.json/{word}/relatedWords.get.parameters[1].description: If true will try
  to return the correct word root ('cats' -> 'cat'). If false returns exactly what
  was requested.
paths./word.json/{word}/relatedWords.get.parameters[1].in: query
paths./word.json/{word}/relatedWords.get.parameters[1].name: useCanonical
paths./word.json/{word}/relatedWords.get.parameters[1].required: false
paths./word.json/{word}/relatedWords.get.parameters[1].type: string
paths./word.json/{word}/relatedWords.get.parameters[2].description: Limits the total
  results per type of relationship type
paths./word.json/{word}/relatedWords.get.parameters[2].in: query
paths./word.json/{word}/relatedWords.get.parameters[2].name: relationshipTypes
paths./word.json/{word}/relatedWords.get.parameters[2].required: false
paths./word.json/{word}/relatedWords.get.parameters[2].type: string
paths./word.json/{word}/relatedWords.get.parameters[3].default: 10
paths./word.json/{word}/relatedWords.get.parameters[3].description: Restrict to the
  supplied relationship types
paths./word.json/{word}/relatedWords.get.parameters[3].format: int32
paths./word.json/{word}/relatedWords.get.parameters[3].in: query
paths./word.json/{word}/relatedWords.get.parameters[3].name: limitPerRelationshipType
paths./word.json/{word}/relatedWords.get.parameters[3].required: false
paths./word.json/{word}/relatedWords.get.parameters[3].type: integer
paths./word.json/{word}/relatedWords.get.responses.200.description: No response was
  specified
paths./word.json/{word}/relatedWords.get.responses.200.schema.items.$ref: '#/definitions/Related'
paths./word.json/{word}/relatedWords.get.responses.200.schema.type: array
paths./word.json/{word}/relatedWords.get.summary: Given a word as a string, returns
  relationships from the Word Graph
paths./word.json/{word}/relatedWords.get.tags.length: 1
paths./word.json/{word}/relatedWords.get.tags[0]: word
paths./word.json/{word}/topExample.get.operationId: getTopExample
paths./word.json/{word}/topExample.get.parameters.length: 2
paths./word.json/{word}/topExample.get.parameters[0].description: Word to fetch examples
  for
paths./word.json/{word}/topExample.get.parameters[0].in: path
paths./word.json/{word}/topExample.get.parameters[0].name: word
paths./word.json/{word}/topExample.get.parameters[0].required: true
paths./word.json/{word}/topExample.get.parameters[0].type: string
paths./word.json/{word}/topExample.get.parameters[1].default: "false"
paths./word.json/{word}/topExample.get.parameters[1].description: If true will try
  to return the correct word root ('cats' -> 'cat'). If false returns exactly what
  was requested.
paths./word.json/{word}/topExample.get.parameters[1].in: query
paths./word.json/{word}/topExample.get.parameters[1].name: useCanonical
paths./word.json/{word}/topExample.get.parameters[1].required: false
paths./word.json/{word}/topExample.get.parameters[1].type: string
paths./word.json/{word}/topExample.get.responses.200.description: No response was
  specified
paths./word.json/{word}/topExample.get.responses.200.schema.$ref: '#/definitions/Example'
paths./word.json/{word}/topExample.get.summary: Returns a top example for a word
paths./word.json/{word}/topExample.get.tags.length: 1
paths./word.json/{word}/topExample.get.tags[0]: word
paths./wordList.json/{permalink}.delete.operationId: deleteWordList
paths./wordList.json/{permalink}.delete.parameters.length: 2
paths./wordList.json/{permalink}.delete.parameters[0].description: ID of WordList
  to delete
paths./wordList.json/{permalink}.delete.parameters[0].in: path
paths./wordList.json/{permalink}.delete.parameters[0].name: permalink
paths./wordList.json/{permalink}.delete.parameters[0].required: true
paths./wordList.json/{permalink}.delete.parameters[0].type: string
paths./wordList.json/{permalink}.delete.parameters[1].description: The auth token
  of the logged-in user, obtained by calling /account.{format}/authenticate/{username}
  (described above)
paths./wordList.json/{permalink}.delete.parameters[1].in: header
paths./wordList.json/{permalink}.delete.parameters[1].name: auth_token
paths./wordList.json/{permalink}.delete.parameters[1].required: true
paths./wordList.json/{permalink}.delete.parameters[1].type: string
paths./wordList.json/{permalink}.delete.responses.200.description: No response was
  specified
paths./wordList.json/{permalink}.delete.summary: Deletes an existing WordList
paths./wordList.json/{permalink}.delete.tags.length: 1
paths./wordList.json/{permalink}.delete.tags[0]: wordList
paths./wordList.json/{permalink}.get.operationId: getWordListByPermalink
paths./wordList.json/{permalink}.get.parameters.length: 2
paths./wordList.json/{permalink}.get.parameters[0].description: permalink of WordList
  to fetch
paths./wordList.json/{permalink}.get.parameters[0].in: path
paths./wordList.json/{permalink}.get.parameters[0].name: permalink
paths./wordList.json/{permalink}.get.parameters[0].required: true
paths./wordList.json/{permalink}.get.parameters[0].type: string
paths./wordList.json/{permalink}.get.parameters[1].description: The auth token of
  the logged-in user, obtained by calling /account.{format}/authenticate/{username}
  (described above)
paths./wordList.json/{permalink}.get.parameters[1].in: header
paths./wordList.json/{permalink}.get.parameters[1].name: auth_token
paths./wordList.json/{permalink}.get.parameters[1].required: true
paths./wordList.json/{permalink}.get.parameters[1].type: string
paths./wordList.json/{permalink}.get.responses.200.description: No response was specified
paths./wordList.json/{permalink}.get.responses.200.schema.$ref: '#/definitions/WordList'
paths./wordList.json/{permalink}.get.summary: Fetches a WordList by ID
paths./wordList.json/{permalink}.get.tags.length: 1
paths./wordList.json/{permalink}.get.tags[0]: wordList
paths./wordList.json/{permalink}.put.operationId: updateWordList
paths./wordList.json/{permalink}.put.parameters.length: 3
paths./wordList.json/{permalink}.put.parameters[0].description: permalink of WordList
  to update
paths./wordList.json/{permalink}.put.parameters[0].in: path
paths./wordList.json/{permalink}.put.parameters[0].name: permalink
paths./wordList.json/{permalink}.put.parameters[0].required: true
paths./wordList.json/{permalink}.put.parameters[0].type: string
paths./wordList.json/{permalink}.put.parameters[1].description: Updated WordList
paths./wordList.json/{permalink}.put.parameters[1].in: body
paths./wordList.json/{permalink}.put.parameters[1].name: body
paths./wordList.json/{permalink}.put.parameters[1].required: false
paths./wordList.json/{permalink}.put.parameters[1].schema.$ref: '#/definitions/WordList'
paths./wordList.json/{permalink}.put.parameters[2].description: The auth token of
  the logged-in user, obtained by calling /account.{format}/authenticate/{username}
  (described above)
paths./wordList.json/{permalink}.put.parameters[2].in: header
paths./wordList.json/{permalink}.put.parameters[2].name: auth_token
paths./wordList.json/{permalink}.put.parameters[2].required: true
paths./wordList.json/{permalink}.put.parameters[2].type: string
paths./wordList.json/{permalink}.put.responses.200.description: No response was specified
paths./wordList.json/{permalink}.put.summary: Updates an existing WordList
paths./wordList.json/{permalink}.put.tags.length: 1
paths./wordList.json/{permalink}.put.tags[0]: wordList
paths./wordList.json/{permalink}/deleteWords.post.operationId: deleteWordsFromWordList
paths./wordList.json/{permalink}/deleteWords.post.parameters.length: 3
paths./wordList.json/{permalink}/deleteWords.post.parameters[0].description: permalink
  of WordList to use
paths./wordList.json/{permalink}/deleteWords.post.parameters[0].in: path
paths./wordList.json/{permalink}/deleteWords.post.parameters[0].name: permalink
paths./wordList.json/{permalink}/deleteWords.post.parameters[0].required: true
paths./wordList.json/{permalink}/deleteWords.post.parameters[0].type: string
paths./wordList.json/{permalink}/deleteWords.post.parameters[1].description: Words
  to remove from WordList
paths./wordList.json/{permalink}/deleteWords.post.parameters[1].in: body
paths./wordList.json/{permalink}/deleteWords.post.parameters[1].name: body
paths./wordList.json/{permalink}/deleteWords.post.parameters[1].required: false
paths./wordList.json/{permalink}/deleteWords.post.parameters[1].schema.items.$ref: '#/definitions/StringValue'
paths./wordList.json/{permalink}/deleteWords.post.parameters[1].schema.type: array
paths./wordList.json/{permalink}/deleteWords.post.parameters[2].description: The auth
  token of the logged-in user, obtained by calling /account.{format}/authenticate/{username}
  (described above)
paths./wordList.json/{permalink}/deleteWords.post.parameters[2].in: header
paths./wordList.json/{permalink}/deleteWords.post.parameters[2].name: auth_token
paths./wordList.json/{permalink}/deleteWords.post.parameters[2].required: true
paths./wordList.json/{permalink}/deleteWords.post.parameters[2].type: string
paths./wordList.json/{permalink}/deleteWords.post.responses.200.description: No response
  was specified
paths./wordList.json/{permalink}/deleteWords.post.summary: Removes words from a WordList
paths./wordList.json/{permalink}/deleteWords.post.tags.length: 1
paths./wordList.json/{permalink}/deleteWords.post.tags[0]: wordList
paths./wordList.json/{permalink}/words.get.operationId: getWordListWords
paths./wordList.json/{permalink}/words.get.parameters.length: 6
paths./wordList.json/{permalink}/words.get.parameters[0].description: ID of WordList
  to use
paths./wordList.json/{permalink}/words.get.parameters[0].in: path
paths./wordList.json/{permalink}/words.get.parameters[0].name: permalink
paths./wordList.json/{permalink}/words.get.parameters[0].required: true
paths./wordList.json/{permalink}/words.get.parameters[0].type: string
paths./wordList.json/{permalink}/words.get.parameters[1].default: createDate
paths./wordList.json/{permalink}/words.get.parameters[1].description: Field to sort
  by
paths./wordList.json/{permalink}/words.get.parameters[1].in: query
paths./wordList.json/{permalink}/words.get.parameters[1].name: sortBy
paths./wordList.json/{permalink}/words.get.parameters[1].required: false
paths./wordList.json/{permalink}/words.get.parameters[1].type: string
paths./wordList.json/{permalink}/words.get.parameters[2].default: desc
paths./wordList.json/{permalink}/words.get.parameters[2].description: Direction to
  sort
paths./wordList.json/{permalink}/words.get.parameters[2].in: query
paths./wordList.json/{permalink}/words.get.parameters[2].name: sortOrder
paths./wordList.json/{permalink}/words.get.parameters[2].required: false
paths./wordList.json/{permalink}/words.get.parameters[2].type: string
paths./wordList.json/{permalink}/words.get.parameters[3].default: 0
paths./wordList.json/{permalink}/words.get.parameters[3].description: Results to skip
paths./wordList.json/{permalink}/words.get.parameters[3].format: int32
paths./wordList.json/{permalink}/words.get.parameters[3].in: query
paths./wordList.json/{permalink}/words.get.parameters[3].name: skip
paths./wordList.json/{permalink}/words.get.parameters[3].required: false
paths./wordList.json/{permalink}/words.get.parameters[3].type: integer
paths./wordList.json/{permalink}/words.get.parameters[4].default: 100
paths./wordList.json/{permalink}/words.get.parameters[4].description: Maximum number
  of results to return
paths./wordList.json/{permalink}/words.get.parameters[4].format: int32
paths./wordList.json/{permalink}/words.get.parameters[4].in: query
paths./wordList.json/{permalink}/words.get.parameters[4].name: limit
paths./wordList.json/{permalink}/words.get.parameters[4].required: false
paths./wordList.json/{permalink}/words.get.parameters[4].type: integer
paths./wordList.json/{permalink}/words.get.parameters[5].description: The auth token
  of the logged-in user, obtained by calling /account.{format}/authenticate/{username}
  (described above)
paths./wordList.json/{permalink}/words.get.parameters[5].in: header
paths./wordList.json/{permalink}/words.get.parameters[5].name: auth_token
paths./wordList.json/{permalink}/words.get.parameters[5].required: true
paths./wordList.json/{permalink}/words.get.parameters[5].type: string
paths./wordList.json/{permalink}/words.get.responses.200.description: No response
  was specified
paths./wordList.json/{permalink}/words.get.responses.200.schema.items.$ref: '#/definitions/WordListWord'
paths./wordList.json/{permalink}/words.get.responses.200.schema.type: array
paths./wordList.json/{permalink}/words.get.summary: Fetches words in a WordList
paths./wordList.json/{permalink}/words.get.tags.length: 1
paths./wordList.json/{permalink}/words.get.tags[0]: wordList
paths./wordList.json/{permalink}/words.post.operationId: addWordsToWordList
paths./wordList.json/{permalink}/words.post.parameters.length: 3
paths./wordList.json/{permalink}/words.post.parameters[0].description: permalink of
  WordList to user
paths./wordList.json/{permalink}/words.post.parameters[0].in: path
paths./wordList.json/{permalink}/words.post.parameters[0].name: permalink
paths./wordList.json/{permalink}/words.post.parameters[0].required: true
paths./wordList.json/{permalink}/words.post.parameters[0].type: string
paths./wordList.json/{permalink}/words.post.parameters[1].description: Array of words
  to add to WordList
paths./wordList.json/{permalink}/words.post.parameters[1].in: body
paths./wordList.json/{permalink}/words.post.parameters[1].name: body
paths./wordList.json/{permalink}/words.post.parameters[1].required: false
paths./wordList.json/{permalink}/words.post.parameters[1].schema.items.$ref: '#/definitions/StringValue'
paths./wordList.json/{permalink}/words.post.parameters[1].schema.type: array
paths./wordList.json/{permalink}/words.post.parameters[2].description: The auth token
  of the logged-in user, obtained by calling /account.{format}/authenticate/{username}
  (described above)
paths./wordList.json/{permalink}/words.post.parameters[2].in: header
paths./wordList.json/{permalink}/words.post.parameters[2].name: auth_token
paths./wordList.json/{permalink}/words.post.parameters[2].required: true
paths./wordList.json/{permalink}/words.post.parameters[2].type: string
paths./wordList.json/{permalink}/words.post.responses.200.description: No response
  was specified
paths./wordList.json/{permalink}/words.post.summary: Adds words to a WordList
paths./wordList.json/{permalink}/words.post.tags.length: 1
paths./wordList.json/{permalink}/words.post.tags[0]: wordList
paths./wordLists.json.post.operationId: createWordList
paths./wordLists.json.post.parameters.length: 2
paths./wordLists.json.post.parameters[0].description: WordList to create
paths./wordLists.json.post.parameters[0].in: body
paths./wordLists.json.post.parameters[0].name: body
paths./wordLists.json.post.parameters[0].required: false
paths./wordLists.json.post.parameters[0].schema.$ref: '#/definitions/WordList'
paths./wordLists.json.post.parameters[1].description: The auth token of the logged-in
  user, obtained by calling /account.{format}/authenticate/{username} (described above)
paths./wordLists.json.post.parameters[1].in: header
paths./wordLists.json.post.parameters[1].name: auth_token
paths./wordLists.json.post.parameters[1].required: true
paths./wordLists.json.post.parameters[1].type: string
paths./wordLists.json.post.responses.200.description: No response was specified
paths./wordLists.json.post.responses.200.schema.$ref: '#/definitions/WordList'
paths./wordLists.json.post.summary: Creates a WordList.
paths./wordLists.json.post.tags.length: 1
paths./wordLists.json.post.tags[0]: wordLists
paths./words.json/randomWord.get.operationId: getRandomWord
paths./words.json/randomWord.get.parameters.length: 9
paths./words.json/randomWord.get.parameters[0].default: "true"
paths./words.json/randomWord.get.parameters[0].description: Only return words with
  dictionary definitions
paths./words.json/randomWord.get.parameters[0].in: query
paths./words.json/randomWord.get.parameters[0].name: hasDictionaryDef
paths./words.json/randomWord.get.parameters[0].required: false
paths./words.json/randomWord.get.parameters[0].type: string
paths./words.json/randomWord.get.parameters[1].description: CSV part-of-speech values
  to include
paths./words.json/randomWord.get.parameters[1].in: query
paths./words.json/randomWord.get.parameters[1].name: includePartOfSpeech
paths./words.json/randomWord.get.parameters[1].required: false
paths./words.json/randomWord.get.parameters[1].type: string
paths./words.json/randomWord.get.parameters[2].description: CSV part-of-speech values
  to exclude
paths./words.json/randomWord.get.parameters[2].in: query
paths./words.json/randomWord.get.parameters[2].name: excludePartOfSpeech
paths./words.json/randomWord.get.parameters[2].required: false
paths./words.json/randomWord.get.parameters[2].type: string
paths./words.json/randomWord.get.parameters[3].default: 0
paths./words.json/randomWord.get.parameters[3].description: Minimum corpus frequency
  for terms
paths./words.json/randomWord.get.parameters[3].format: int32
paths./words.json/randomWord.get.parameters[3].in: query
paths./words.json/randomWord.get.parameters[3].name: minCorpusCount
paths./words.json/randomWord.get.parameters[3].required: false
paths./words.json/randomWord.get.parameters[3].type: integer
paths./words.json/randomWord.get.parameters[4].default: -1
paths./words.json/randomWord.get.parameters[4].description: Maximum corpus frequency
  for terms
paths./words.json/randomWord.get.parameters[4].format: int32
paths./words.json/randomWord.get.parameters[4].in: query
paths./words.json/randomWord.get.parameters[4].name: maxCorpusCount
paths./words.json/randomWord.get.parameters[4].required: false
paths./words.json/randomWord.get.parameters[4].type: integer
paths./words.json/randomWord.get.parameters[5].default: 1
paths./words.json/randomWord.get.parameters[5].description: Minimum dictionary count
paths./words.json/randomWord.get.parameters[5].format: int32
paths./words.json/randomWord.get.parameters[5].in: query
paths./words.json/randomWord.get.parameters[5].name: minDictionaryCount
paths./words.json/randomWord.get.parameters[5].required: false
paths./words.json/randomWord.get.parameters[5].type: integer
paths./words.json/randomWord.get.parameters[6].default: -1
paths./words.json/randomWord.get.parameters[6].description: Maximum dictionary count
paths./words.json/randomWord.get.parameters[6].format: int32
paths./words.json/randomWord.get.parameters[6].in: query
paths./words.json/randomWord.get.parameters[6].name: maxDictionaryCount
paths./words.json/randomWord.get.parameters[6].required: false
paths./words.json/randomWord.get.parameters[6].type: integer
paths./words.json/randomWord.get.parameters[7].default: 5
paths./words.json/randomWord.get.parameters[7].description: Minimum word length
paths./words.json/randomWord.get.parameters[7].format: int32
paths./words.json/randomWord.get.parameters[7].in: query
paths./words.json/randomWord.get.parameters[7].name: minLength
paths./words.json/randomWord.get.parameters[7].required: false
paths./words.json/randomWord.get.parameters[7].type: integer
paths./words.json/randomWord.get.parameters[8].default: -1
paths./words.json/randomWord.get.parameters[8].description: Maximum word length
paths./words.json/randomWord.get.parameters[8].format: int32
paths./words.json/randomWord.get.parameters[8].in: query
paths./words.json/randomWord.get.parameters[8].name: maxLength
paths./words.json/randomWord.get.parameters[8].required: false
paths./words.json/randomWord.get.parameters[8].type: integer
paths./words.json/randomWord.get.responses.200.description: No response was specified
paths./words.json/randomWord.get.responses.200.schema.$ref: '#/definitions/WordObject'
paths./words.json/randomWord.get.summary: Returns a single random WordObject
paths./words.json/randomWord.get.tags.length: 1
paths./words.json/randomWord.get.tags[0]: words
paths./words.json/randomWords.get.operationId: getRandomWords
paths./words.json/randomWords.get.parameters.length: 12
paths./words.json/randomWords.get.parameters[0].default: "true"
paths./words.json/randomWords.get.parameters[0].description: Only return words with
  dictionary definitions
paths./words.json/randomWords.get.parameters[0].in: query
paths./words.json/randomWords.get.parameters[0].name: hasDictionaryDef
paths./words.json/randomWords.get.parameters[0].required: false
paths./words.json/randomWords.get.parameters[0].type: string
paths./words.json/randomWords.get.parameters[1].description: CSV part-of-speech values
  to include
paths./words.json/randomWords.get.parameters[1].in: query
paths./words.json/randomWords.get.parameters[1].name: includePartOfSpeech
paths./words.json/randomWords.get.parameters[1].required: false
paths./words.json/randomWords.get.parameters[1].type: string
paths./words.json/randomWords.get.parameters[2].description: CSV part-of-speech values
  to exclude
paths./words.json/randomWords.get.parameters[2].in: query
paths./words.json/randomWords.get.parameters[2].name: excludePartOfSpeech
paths./words.json/randomWords.get.parameters[2].required: false
paths./words.json/randomWords.get.parameters[2].type: string
paths./words.json/randomWords.get.parameters[3].default: 0
paths./words.json/randomWords.get.parameters[3].description: Minimum corpus frequency
  for terms
paths./words.json/randomWords.get.parameters[3].format: int32
paths./words.json/randomWords.get.parameters[3].in: query
paths./words.json/randomWords.get.parameters[3].name: minCorpusCount
paths./words.json/randomWords.get.parameters[3].required: false
paths./words.json/randomWords.get.parameters[3].type: integer
paths./words.json/randomWords.get.parameters[4].default: -1
paths./words.json/randomWords.get.parameters[4].description: Maximum corpus frequency
  for terms
paths./words.json/randomWords.get.parameters[4].format: int32
paths./words.json/randomWords.get.parameters[4].in: query
paths./words.json/randomWords.get.parameters[4].name: maxCorpusCount
paths./words.json/randomWords.get.parameters[4].required: false
paths./words.json/randomWords.get.parameters[4].type: integer
paths./words.json/randomWords.get.parameters[5].default: 1
paths./words.json/randomWords.get.parameters[5].description: Minimum dictionary count
paths./words.json/randomWords.get.parameters[5].format: int32
paths./words.json/randomWords.get.parameters[5].in: query
paths./words.json/randomWords.get.parameters[5].name: minDictionaryCount
paths./words.json/randomWords.get.parameters[5].required: false
paths./words.json/randomWords.get.parameters[5].type: integer
paths./words.json/randomWords.get.parameters[6].default: -1
paths./words.json/randomWords.get.parameters[6].description: Maximum dictionary count
paths./words.json/randomWords.get.parameters[6].format: int32
paths./words.json/randomWords.get.parameters[6].in: query
paths./words.json/randomWords.get.parameters[6].name: maxDictionaryCount
paths./words.json/randomWords.get.parameters[6].required: false
paths./words.json/randomWords.get.parameters[6].type: integer
paths./words.json/randomWords.get.parameters[7].default: 5
paths./words.json/randomWords.get.parameters[7].description: Minimum word length
paths./words.json/randomWords.get.parameters[7].format: int32
paths./words.json/randomWords.get.parameters[7].in: query
paths./words.json/randomWords.get.parameters[7].name: minLength
paths./words.json/randomWords.get.parameters[7].required: false
paths./words.json/randomWords.get.parameters[7].type: integer
paths./words.json/randomWords.get.parameters[8].default: -1
paths./words.json/randomWords.get.parameters[8].description: Maximum word length
paths./words.json/randomWords.get.parameters[8].format: int32
paths./words.json/randomWords.get.parameters[8].in: query
paths./words.json/randomWords.get.parameters[8].name: maxLength
paths./words.json/randomWords.get.parameters[8].required: false
paths./words.json/randomWords.get.parameters[8].type: integer
paths./words.json/randomWords.get.parameters[9].description: Attribute to sort by
paths./words.json/randomWords.get.parameters[9].in: query
paths./words.json/randomWords.get.parameters[9].name: sortBy
paths./words.json/randomWords.get.parameters[9].required: false
paths./words.json/randomWords.get.parameters[9].type: string
paths./words.json/randomWords.get.parameters[10].description: Sort direction
paths./words.json/randomWords.get.parameters[10].in: query
paths./words.json/randomWords.get.parameters[10].name: sortOrder
paths./words.json/randomWords.get.parameters[10].required: false
paths./words.json/randomWords.get.parameters[10].type: string
paths./words.json/randomWords.get.parameters[11].default: 10
paths./words.json/randomWords.get.parameters[11].description: Maximum number of results
  to return
paths./words.json/randomWords.get.parameters[11].format: int32
paths./words.json/randomWords.get.parameters[11].in: query
paths./words.json/randomWords.get.parameters[11].name: limit
paths./words.json/randomWords.get.parameters[11].required: false
paths./words.json/randomWords.get.parameters[11].type: integer
paths./words.json/randomWords.get.responses.200.description: No response was specified
paths./words.json/randomWords.get.responses.200.schema.items.$ref: '#/definitions/WordObject'
paths./words.json/randomWords.get.responses.200.schema.type: array
paths./words.json/randomWords.get.summary: Returns an array of random WordObjects
paths./words.json/randomWords.get.tags.length: 1
paths./words.json/randomWords.get.tags[0]: words
paths./words.json/reverseDictionary.get.operationId: reverseDictionary
paths./words.json/reverseDictionary.get.parameters.length: 16
paths./words.json/reverseDictionary.get.parameters[0].description: Search term
paths./words.json/reverseDictionary.get.parameters[0].in: query
paths./words.json/reverseDictionary.get.parameters[0].name: query
paths./words.json/reverseDictionary.get.parameters[0].required: true
paths./words.json/reverseDictionary.get.parameters[0].type: string
paths./words.json/reverseDictionary.get.parameters[1].description: Restricts words
  and finds closest sense
paths./words.json/reverseDictionary.get.parameters[1].in: query
paths./words.json/reverseDictionary.get.parameters[1].name: findSenseForWord
paths./words.json/reverseDictionary.get.parameters[1].required: false
paths./words.json/reverseDictionary.get.parameters[1].type: string
paths./words.json/reverseDictionary.get.parameters[2].description: Only include these
  comma-delimited source dictionaries
paths./words.json/reverseDictionary.get.parameters[2].in: query
paths./words.json/reverseDictionary.get.parameters[2].name: includeSourceDictionaries
paths./words.json/reverseDictionary.get.parameters[2].required: false
paths./words.json/reverseDictionary.get.parameters[2].type: string
paths./words.json/reverseDictionary.get.parameters[3].description: Exclude these comma-delimited
  source dictionaries
paths./words.json/reverseDictionary.get.parameters[3].in: query
paths./words.json/reverseDictionary.get.parameters[3].name: excludeSourceDictionaries
paths./words.json/reverseDictionary.get.parameters[3].required: false
paths./words.json/reverseDictionary.get.parameters[3].type: string
paths./words.json/reverseDictionary.get.parameters[4].description: Only include these
  comma-delimited parts of speech
paths./words.json/reverseDictionary.get.parameters[4].in: query
paths./words.json/reverseDictionary.get.parameters[4].name: includePartOfSpeech
paths./words.json/reverseDictionary.get.parameters[4].required: false
paths./words.json/reverseDictionary.get.parameters[4].type: string
paths./words.json/reverseDictionary.get.parameters[5].description: Exclude these comma-delimited
  parts of speech
paths./words.json/reverseDictionary.get.parameters[5].in: query
paths./words.json/reverseDictionary.get.parameters[5].name: excludePartOfSpeech
paths./words.json/reverseDictionary.get.parameters[5].required: false
paths./words.json/reverseDictionary.get.parameters[5].type: string
paths./words.json/reverseDictionary.get.parameters[6].default: 5
paths./words.json/reverseDictionary.get.parameters[6].description: Minimum corpus
  frequency for terms
paths./words.json/reverseDictionary.get.parameters[6].format: int32
paths./words.json/reverseDictionary.get.parameters[6].in: query
paths./words.json/reverseDictionary.get.parameters[6].name: minCorpusCount
paths./words.json/reverseDictionary.get.parameters[6].required: false
paths./words.json/reverseDictionary.get.parameters[6].type: integer
paths./words.json/reverseDictionary.get.parameters[7].default: -1
paths./words.json/reverseDictionary.get.parameters[7].description: Maximum corpus
  frequency for terms
paths./words.json/reverseDictionary.get.parameters[7].format: int32
paths./words.json/reverseDictionary.get.parameters[7].in: query
paths./words.json/reverseDictionary.get.parameters[7].name: maxCorpusCount
paths./words.json/reverseDictionary.get.parameters[7].required: false
paths./words.json/reverseDictionary.get.parameters[7].type: integer
paths./words.json/reverseDictionary.get.parameters[8].default: 1
paths./words.json/reverseDictionary.get.parameters[8].description: Minimum word length
paths./words.json/reverseDictionary.get.parameters[8].format: int32
paths./words.json/reverseDictionary.get.parameters[8].in: query
paths./words.json/reverseDictionary.get.parameters[8].name: minLength
paths./words.json/reverseDictionary.get.parameters[8].required: false
paths./words.json/reverseDictionary.get.parameters[8].type: integer
paths./words.json/reverseDictionary.get.parameters[9].default: -1
paths./words.json/reverseDictionary.get.parameters[9].description: Maximum word length
paths./words.json/reverseDictionary.get.parameters[9].format: int32
paths./words.json/reverseDictionary.get.parameters[9].in: query
paths./words.json/reverseDictionary.get.parameters[9].name: maxLength
paths./words.json/reverseDictionary.get.parameters[9].required: false
paths./words.json/reverseDictionary.get.parameters[9].type: integer
paths./words.json/reverseDictionary.get.parameters[10].description: Expand terms
paths./words.json/reverseDictionary.get.parameters[10].in: query
paths./words.json/reverseDictionary.get.parameters[10].name: expandTerms
paths./words.json/reverseDictionary.get.parameters[10].required: false
paths./words.json/reverseDictionary.get.parameters[10].type: string
paths./words.json/reverseDictionary.get.parameters[11].default: "false"
paths./words.json/reverseDictionary.get.parameters[11].description: Return a closed
  set of XML tags in response
paths./words.json/reverseDictionary.get.parameters[11].in: query
paths./words.json/reverseDictionary.get.parameters[11].name: includeTags
paths./words.json/reverseDictionary.get.parameters[11].required: false
paths./words.json/reverseDictionary.get.parameters[11].type: string
paths./words.json/reverseDictionary.get.parameters[12].description: Attribute to sort
  by
paths./words.json/reverseDictionary.get.parameters[12].in: query
paths./words.json/reverseDictionary.get.parameters[12].name: sortBy
paths./words.json/reverseDictionary.get.parameters[12].required: false
paths./words.json/reverseDictionary.get.parameters[12].type: string
paths./words.json/reverseDictionary.get.parameters[13].description: Sort direction
paths./words.json/reverseDictionary.get.parameters[13].in: query
paths./words.json/reverseDictionary.get.parameters[13].name: sortOrder
paths./words.json/reverseDictionary.get.parameters[13].required: false
paths./words.json/reverseDictionary.get.parameters[13].type: string
paths./words.json/reverseDictionary.get.parameters[14].default: "0"
paths./words.json/reverseDictionary.get.parameters[14].description: Results to skip
paths./words.json/reverseDictionary.get.parameters[14].in: query
paths./words.json/reverseDictionary.get.parameters[14].name: skip
paths./words.json/reverseDictionary.get.parameters[14].required: false
paths./words.json/reverseDictionary.get.parameters[14].type: string
paths./words.json/reverseDictionary.get.parameters[15].default: 10
paths./words.json/reverseDictionary.get.parameters[15].description: Maximum number
  of results to return
paths./words.json/reverseDictionary.get.parameters[15].format: int32
paths./words.json/reverseDictionary.get.parameters[15].in: query
paths./words.json/reverseDictionary.get.parameters[15].name: limit
paths./words.json/reverseDictionary.get.parameters[15].required: false
paths./words.json/reverseDictionary.get.parameters[15].type: integer
paths./words.json/reverseDictionary.get.responses.200.description: No response was
  specified
paths./words.json/reverseDictionary.get.responses.200.schema.$ref: '#/definitions/DefinitionSearchResults'
paths./words.json/reverseDictionary.get.summary: Reverse dictionary search
paths./words.json/reverseDictionary.get.tags.length: 1
paths./words.json/reverseDictionary.get.tags[0]: words
paths./words.json/search/{query}.get.operationId: searchWords
paths./words.json/search/{query}.get.parameters.length: 12
paths./words.json/search/{query}.get.parameters[0].description: Search query
paths./words.json/search/{query}.get.parameters[0].in: path
paths./words.json/search/{query}.get.parameters[0].name: query
paths./words.json/search/{query}.get.parameters[0].required: true
paths./words.json/search/{query}.get.parameters[0].type: string
paths./words.json/search/{query}.get.parameters[1].default: "true"
paths./words.json/search/{query}.get.parameters[1].description: Search case sensitive
paths./words.json/search/{query}.get.parameters[1].in: query
paths./words.json/search/{query}.get.parameters[1].name: caseSensitive
paths./words.json/search/{query}.get.parameters[1].required: false
paths./words.json/search/{query}.get.parameters[1].type: string
paths./words.json/search/{query}.get.parameters[2].description: Only include these
  comma-delimited parts of speech
paths./words.json/search/{query}.get.parameters[2].in: query
paths./words.json/search/{query}.get.parameters[2].name: includePartOfSpeech
paths./words.json/search/{query}.get.parameters[2].required: false
paths./words.json/search/{query}.get.parameters[2].type: string
paths./words.json/search/{query}.get.parameters[3].description: Exclude these comma-delimited
  parts of speech
paths./words.json/search/{query}.get.parameters[3].in: query
paths./words.json/search/{query}.get.parameters[3].name: excludePartOfSpeech
paths./words.json/search/{query}.get.parameters[3].required: false
paths./words.json/search/{query}.get.parameters[3].type: string
paths./words.json/search/{query}.get.parameters[4].default: 5
paths./words.json/search/{query}.get.parameters[4].description: Minimum corpus frequency
  for terms
paths./words.json/search/{query}.get.parameters[4].format: int32
paths./words.json/search/{query}.get.parameters[4].in: query
paths./words.json/search/{query}.get.parameters[4].name: minCorpusCount
paths./words.json/search/{query}.get.parameters[4].required: false
paths./words.json/search/{query}.get.parameters[4].type: integer
paths./words.json/search/{query}.get.parameters[5].default: -1
paths./words.json/search/{query}.get.parameters[5].description: Maximum corpus frequency
  for terms
paths./words.json/search/{query}.get.parameters[5].format: int32
paths./words.json/search/{query}.get.parameters[5].in: query
paths./words.json/search/{query}.get.parameters[5].name: maxCorpusCount
paths./words.json/search/{query}.get.parameters[5].required: false
paths./words.json/search/{query}.get.parameters[5].type: integer
paths./words.json/search/{query}.get.parameters[6].default: 1
paths./words.json/search/{query}.get.parameters[6].description: Minimum number of
  dictionary entries for words returned
paths./words.json/search/{query}.get.parameters[6].format: int32
paths./words.json/search/{query}.get.parameters[6].in: query
paths./words.json/search/{query}.get.parameters[6].name: minDictionaryCount
paths./words.json/search/{query}.get.parameters[6].required: false
paths./words.json/search/{query}.get.parameters[6].type: integer
paths./words.json/search/{query}.get.parameters[7].default: -1
paths./words.json/search/{query}.get.parameters[7].description: Maximum dictionary
  definition count
paths./words.json/search/{query}.get.parameters[7].format: int32
paths./words.json/search/{query}.get.parameters[7].in: query
paths./words.json/search/{query}.get.parameters[7].name: maxDictionaryCount
paths./words.json/search/{query}.get.parameters[7].required: false
paths./words.json/search/{query}.get.parameters[7].type: integer
paths./words.json/search/{query}.get.parameters[8].default: 1
paths./words.json/search/{query}.get.parameters[8].description: Minimum word length
paths./words.json/search/{query}.get.parameters[8].format: int32
paths./words.json/search/{query}.get.parameters[8].in: query
paths./words.json/search/{query}.get.parameters[8].name: minLength
paths./words.json/search/{query}.get.parameters[8].required: false
paths./words.json/search/{query}.get.parameters[8].type: integer
paths./words.json/search/{query}.get.parameters[9].default: -1
paths./words.json/search/{query}.get.parameters[9].description: Maximum word length
paths./words.json/search/{query}.get.parameters[9].format: int32
paths./words.json/search/{query}.get.parameters[9].in: query
paths./words.json/search/{query}.get.parameters[9].name: maxLength
paths./words.json/search/{query}.get.parameters[9].required: false
paths./words.json/search/{query}.get.parameters[9].type: integer
paths./words.json/search/{query}.get.parameters[10].default: 0
paths./words.json/search/{query}.get.parameters[10].description: Results to skip
paths./words.json/search/{query}.get.parameters[10].format: int32
paths./words.json/search/{query}.get.parameters[10].in: query
paths./words.json/search/{query}.get.parameters[10].name: skip
paths./words.json/search/{query}.get.parameters[10].required: false
paths./words.json/search/{query}.get.parameters[10].type: integer
paths./words.json/search/{query}.get.parameters[11].default: 10
paths./words.json/search/{query}.get.parameters[11].description: Maximum number of
  results to return
paths./words.json/search/{query}.get.parameters[11].format: int32
paths./words.json/search/{query}.get.parameters[11].in: query
paths./words.json/search/{query}.get.parameters[11].name: limit
paths./words.json/search/{query}.get.parameters[11].required: false
paths./words.json/search/{query}.get.parameters[11].type: integer
paths./words.json/search/{query}.get.responses.200.description: No response was specified
paths./words.json/search/{query}.get.responses.200.schema.$ref: '#/definitions/WordSearchResults'
paths./words.json/search/{query}.get.summary: Searches words
paths./words.json/search/{query}.get.tags.length: 1
paths./words.json/search/{query}.get.tags[0]: words
paths./words.json/wordOfTheDay.get.operationId: getWordOfTheDay
paths./words.json/wordOfTheDay.get.parameters.length: 1
paths./words.json/wordOfTheDay.get.parameters[0].description: Fetches by date in yyyy-MM-dd
paths./words.json/wordOfTheDay.get.parameters[0].in: query
paths./words.json/wordOfTheDay.get.parameters[0].name: date
paths./words.json/wordOfTheDay.get.parameters[0].required: false
paths./words.json/wordOfTheDay.get.parameters[0].type: string
paths./words.json/wordOfTheDay.get.responses.200.description: No response was specified
paths./words.json/wordOfTheDay.get.responses.200.schema.$ref: '#/definitions/WordOfTheDay'
paths./words.json/wordOfTheDay.get.summary: Returns a specific WordOfTheDay
paths./words.json/wordOfTheDay.get.tags.length: 1
paths./words.json/wordOfTheDay.get.tags[0]: words
schemes.length: 1
schemes[0]: http
security.length: 1
security[0].api_key.length: 0
securityDefinitions.api_key.in: query
securityDefinitions.api_key.name: _apikey
securityDefinitions.api_key.type: apiKey
swagger: "2.0"
tags.length: 5
tags[0].name: account
tags[1].name: word
tags[2].name: wordList
tags[3].name: wordLists
tags[4].name: words

basePath: /
externalDocs.description: BC Route Planner Web Site
externalDocs.url: http://www2.gov.bc.ca/gov/content/governments/about-the-bc-government/databc/geographic-data-and-services/route-planner
host: router.api.gov.bc.ca
info.contact.email: DataBCBA@gov.bc.ca
info.contact.name: Data BC
info.contact.url: https://forms.gov.bc.ca/databc-contact-us/
info.description: Finds shortest/fastest route between a start point and one or more
  stop points on British Columbia's public road network. Here are some geocoded addresses
  to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St,
  Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770
  <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808
  Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack
  -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201
  Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500
  (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff
  Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035.<br>   Please
  see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice
  target="_blank">data collection notice</a>
info.license.name: Copyright 2016 Province of British Columbia - Access only
info.license.url: http://www2.gov.bc.ca/gov/content/home/copyright
info.termsOfService: http://www2.gov.bc.ca/gov/content?id=D1EE0A405E584363B205CD4353E02C88
info.title: BC Route Planner
info.version: 1.2.0
info.x-apisguru-categories.length: 1
info.x-apisguru-categories[0]: open_data
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_avatars1.githubusercontent.com_u_916280.jpeg
info.x-origin.length: 1
info.x-origin[0].format: swagger
info.x-origin[0].url: https://raw.githubusercontent.com/bcgov/api-specs/master/router/router.json
info.x-origin[0].version: "2.0"
info.x-preferred: true
info.x-providerName: gov.bc.ca
info.x-serviceName: router
paths./directions.{outputFormat}.get.description: Represents the turn-by-turn directions,
  geometry, distance, and time of the shortest path or fastest path between given
  start and end points
paths./directions.{outputFormat}.get.parameters.length: 6
paths./directions.{outputFormat}.get.parameters[0].default: json
paths./directions.{outputFormat}.get.parameters[0].description: Format of representation
paths./directions.{outputFormat}.get.parameters[0].enum.length: 3
paths./directions.{outputFormat}.get.parameters[0].enum[0]: json
paths./directions.{outputFormat}.get.parameters[0].enum[1]: kml
paths./directions.{outputFormat}.get.parameters[0].enum[2]: html
paths./directions.{outputFormat}.get.parameters[0].in: path
paths./directions.{outputFormat}.get.parameters[0].name: outputFormat
paths./directions.{outputFormat}.get.parameters[0].required: true
paths./directions.{outputFormat}.get.parameters[0].type: string
paths./directions.{outputFormat}.get.parameters[1].description: 'Example: -123.70794,48.77869,-123.53785,48.38200.
  A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#points
  target=''_blank''>points</a>'
paths./directions.{outputFormat}.get.parameters[1].in: query
paths./directions.{outputFormat}.get.parameters[1].name: points
paths./directions.{outputFormat}.get.parameters[1].required: true
paths./directions.{outputFormat}.get.parameters[1].type: string
paths./directions.{outputFormat}.get.parameters[2].default: 4326
paths./directions.{outputFormat}.get.parameters[2].description: The EPSG code of the
  spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#outputSRS
  target="_blank">outputSRS</a>
paths./directions.{outputFormat}.get.parameters[2].enum.length: 8
paths./directions.{outputFormat}.get.parameters[2].enum[0]: 4326
paths./directions.{outputFormat}.get.parameters[2].enum[1]: 4269
paths./directions.{outputFormat}.get.parameters[2].enum[2]: 3005
paths./directions.{outputFormat}.get.parameters[2].enum[3]: 26907
paths./directions.{outputFormat}.get.parameters[2].enum[4]: 26908
paths./directions.{outputFormat}.get.parameters[2].enum[5]: 26909
paths./directions.{outputFormat}.get.parameters[2].enum[6]: 26910
paths./directions.{outputFormat}.get.parameters[2].enum[7]: 26911
paths./directions.{outputFormat}.get.parameters[2].in: query
paths./directions.{outputFormat}.get.parameters[2].name: outputSRS
paths./directions.{outputFormat}.get.parameters[2].required: false
paths./directions.{outputFormat}.get.parameters[2].type: integer
paths./directions.{outputFormat}.get.parameters[3].default: shortest
paths./directions.{outputFormat}.get.parameters[3].description: Routing criteria to
  optimize (e.g., shortest, fastest). Default is shortest.
paths./directions.{outputFormat}.get.parameters[3].enum.length: 2
paths./directions.{outputFormat}.get.parameters[3].enum[0]: shortest
paths./directions.{outputFormat}.get.parameters[3].enum[1]: fastest
paths./directions.{outputFormat}.get.parameters[3].in: query
paths./directions.{outputFormat}.get.parameters[3].name: criteria
paths./directions.{outputFormat}.get.parameters[3].required: false
paths./directions.{outputFormat}.get.parameters[3].type: string
paths./directions.{outputFormat}.get.parameters[4].default: km
paths./directions.{outputFormat}.get.parameters[4].description: distance unit of measure
  (e.g., km, mi). Default is km.
paths./directions.{outputFormat}.get.parameters[4].enum.length: 2
paths./directions.{outputFormat}.get.parameters[4].enum[0]: km
paths./directions.{outputFormat}.get.parameters[4].enum[1]: mi
paths./directions.{outputFormat}.get.parameters[4].in: query
paths./directions.{outputFormat}.get.parameters[4].name: distanceUnit
paths./directions.{outputFormat}.get.parameters[4].required: false
paths./directions.{outputFormat}.get.parameters[4].type: string
paths./directions.{outputFormat}.get.parameters[5].default: Routing results
paths./directions.{outputFormat}.get.parameters[5].description: Route description
  (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
paths./directions.{outputFormat}.get.parameters[5].in: query
paths./directions.{outputFormat}.get.parameters[5].name: routeDescription
paths./directions.{outputFormat}.get.parameters[5].required: false
paths./directions.{outputFormat}.get.parameters[5].type: string
paths./directions.{outputFormat}.get.responses.200.description: turn-by-turn directions,
  geometry, distance, and time of the shortest or fastest route
paths./directions.{outputFormat}.get.summary: Get the directions, path, distance and
  travel time between a series of geographic points
paths./directions.{outputFormat}.get.tags.length: 1
paths./directions.{outputFormat}.get.tags[0]: directions
paths./distance.{outputFormat}.get.description: Represents the distance and time of
  the shortest or fastest path between given start and end points.
paths./distance.{outputFormat}.get.parameters.length: 6
paths./distance.{outputFormat}.get.parameters[0].default: json
paths./distance.{outputFormat}.get.parameters[0].description: Format of representation
paths./distance.{outputFormat}.get.parameters[0].enum.length: 3
paths./distance.{outputFormat}.get.parameters[0].enum[0]: json
paths./distance.{outputFormat}.get.parameters[0].enum[1]: kml
paths./distance.{outputFormat}.get.parameters[0].enum[2]: html
paths./distance.{outputFormat}.get.parameters[0].in: path
paths./distance.{outputFormat}.get.parameters[0].name: outputFormat
paths./distance.{outputFormat}.get.parameters[0].required: true
paths./distance.{outputFormat}.get.parameters[0].type: string
paths./distance.{outputFormat}.get.parameters[1].description: 'Example: -123.70794,48.77869,-123.53785,48.38200.
  A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#points
  target=''_blank''>points</a>'
paths./distance.{outputFormat}.get.parameters[1].in: query
paths./distance.{outputFormat}.get.parameters[1].name: points
paths./distance.{outputFormat}.get.parameters[1].required: true
paths./distance.{outputFormat}.get.parameters[1].type: string
paths./distance.{outputFormat}.get.parameters[2].default: 4326
paths./distance.{outputFormat}.get.parameters[2].description: The EPSG code of the
  spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#outputSRS
  target="_blank">outputSRS</a>
paths./distance.{outputFormat}.get.parameters[2].enum.length: 8
paths./distance.{outputFormat}.get.parameters[2].enum[0]: 4326
paths./distance.{outputFormat}.get.parameters[2].enum[1]: 4269
paths./distance.{outputFormat}.get.parameters[2].enum[2]: 3005
paths./distance.{outputFormat}.get.parameters[2].enum[3]: 26907
paths./distance.{outputFormat}.get.parameters[2].enum[4]: 26908
paths./distance.{outputFormat}.get.parameters[2].enum[5]: 26909
paths./distance.{outputFormat}.get.parameters[2].enum[6]: 26910
paths./distance.{outputFormat}.get.parameters[2].enum[7]: 26911
paths./distance.{outputFormat}.get.parameters[2].in: query
paths./distance.{outputFormat}.get.parameters[2].name: outputSRS
paths./distance.{outputFormat}.get.parameters[2].required: false
paths./distance.{outputFormat}.get.parameters[2].type: integer
paths./distance.{outputFormat}.get.parameters[3].default: shortest
paths./distance.{outputFormat}.get.parameters[3].description: Routing criteria to
  optimize (e.g., shortest, fastest). Default is shortest.
paths./distance.{outputFormat}.get.parameters[3].enum.length: 2
paths./distance.{outputFormat}.get.parameters[3].enum[0]: shortest
paths./distance.{outputFormat}.get.parameters[3].enum[1]: fastest
paths./distance.{outputFormat}.get.parameters[3].in: query
paths./distance.{outputFormat}.get.parameters[3].name: criteria
paths./distance.{outputFormat}.get.parameters[3].required: false
paths./distance.{outputFormat}.get.parameters[3].type: string
paths./distance.{outputFormat}.get.parameters[4].default: km
paths./distance.{outputFormat}.get.parameters[4].description: distance unit of measure
  (e.g., km, mi). Default is km.
paths./distance.{outputFormat}.get.parameters[4].enum.length: 2
paths./distance.{outputFormat}.get.parameters[4].enum[0]: km
paths./distance.{outputFormat}.get.parameters[4].enum[1]: mi
paths./distance.{outputFormat}.get.parameters[4].in: query
paths./distance.{outputFormat}.get.parameters[4].name: distanceUnit
paths./distance.{outputFormat}.get.parameters[4].required: false
paths./distance.{outputFormat}.get.parameters[4].type: string
paths./distance.{outputFormat}.get.parameters[5].default: Routing results
paths./distance.{outputFormat}.get.parameters[5].description: Route description (e.g.,
  Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
paths./distance.{outputFormat}.get.parameters[5].in: query
paths./distance.{outputFormat}.get.parameters[5].name: routeDescription
paths./distance.{outputFormat}.get.parameters[5].required: false
paths./distance.{outputFormat}.get.parameters[5].type: string
paths./distance.{outputFormat}.get.responses.200.description: Distance and time of
  the shortest or fastest route
paths./distance.{outputFormat}.get.summary: Get distance and travel time between two
  geographic points
paths./distance.{outputFormat}.get.tags.length: 1
paths./distance.{outputFormat}.get.tags[0]: distance
paths./distance/betweenPairs.{outputFormat}.get.description: Represents the distance
  and time of the shortest or fastest paths between all pairs of fromPoints and toPoints.
  The number of fromPoints times the number of toPoints should not exceed 100 or the
  request will time out.
paths./distance/betweenPairs.{outputFormat}.get.parameters.length: 7
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].default: json
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].description: Format
  of representation
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].enum.length: 2
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].enum[0]: json
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].enum[1]: html
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].in: path
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].name: outputFormat
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].required: true
paths./distance/betweenPairs.{outputFormat}.get.parameters[0].type: string
paths./distance/betweenPairs.{outputFormat}.get.parameters[1].description: 'Example:
  -123.70794,48.77869,-123.53785,48.38200. A comma-separated list of origin points.  See
  <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#fromPoints
  target=''_blank''>fromPoints</a>'
paths./distance/betweenPairs.{outputFormat}.get.parameters[1].in: query
paths./distance/betweenPairs.{outputFormat}.get.parameters[1].name: fromPoints
paths./distance/betweenPairs.{outputFormat}.get.parameters[1].required: true
paths./distance/betweenPairs.{outputFormat}.get.parameters[1].type: string
paths./distance/betweenPairs.{outputFormat}.get.parameters[2].description: 'Example:
  -124.972951,49.715181,-123.139464,49.704015. A comma-separated list of destination
  points. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#toPoints
  target=''_blank''>toPoints</a>'
paths./distance/betweenPairs.{outputFormat}.get.parameters[2].in: query
paths./distance/betweenPairs.{outputFormat}.get.parameters[2].name: toPoints
paths./distance/betweenPairs.{outputFormat}.get.parameters[2].required: true
paths./distance/betweenPairs.{outputFormat}.get.parameters[2].type: string
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].default: 4326
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].description: The EPSG
  code of the spatial reference system (SRS) to use for output geometries. See <a
  href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#outputSRS
  target="_blank">outputSRS</a>
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum.length: 8
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum[0]: 4326
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum[1]: 4269
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum[2]: 3005
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum[3]: 26907
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum[4]: 26908
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum[5]: 26909
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum[6]: 26910
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].enum[7]: 26911
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].in: query
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].name: outputSRS
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].required: false
paths./distance/betweenPairs.{outputFormat}.get.parameters[3].type: integer
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].default: shortest
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].description: Routing
  criteria to optimize (e.g., shortest, fastest). Default is shortest.
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].enum.length: 2
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].enum[0]: shortest
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].enum[1]: fastest
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].in: query
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].name: criteria
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].required: false
paths./distance/betweenPairs.{outputFormat}.get.parameters[4].type: string
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].default: km
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].description: distance
  unit of measure (e.g., km, mi). Default is km.
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].enum.length: 2
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].enum[0]: km
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].enum[1]: mi
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].in: query
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].name: distanceUnit
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].required: false
paths./distance/betweenPairs.{outputFormat}.get.parameters[5].type: string
paths./distance/betweenPairs.{outputFormat}.get.parameters[6].default: Routing results
paths./distance/betweenPairs.{outputFormat}.get.parameters[6].description: Route description
  (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
paths./distance/betweenPairs.{outputFormat}.get.parameters[6].in: query
paths./distance/betweenPairs.{outputFormat}.get.parameters[6].name: routeDescription
paths./distance/betweenPairs.{outputFormat}.get.parameters[6].required: false
paths./distance/betweenPairs.{outputFormat}.get.parameters[6].type: string
paths./distance/betweenPairs.{outputFormat}.get.responses.200.description: A list
  of routes and their route distances/times.
paths./distance/betweenPairs.{outputFormat}.get.summary: Get distance and travel time
  between each pair of geographic points
paths./distance/betweenPairs.{outputFormat}.get.tags.length: 1
paths./distance/betweenPairs.{outputFormat}.get.tags[0]: distance
paths./route.{outputFormat}.get.description: Represents the geometry, distance, and
  time of the shortest or fastest path between given start and end points.
paths./route.{outputFormat}.get.parameters.length: 6
paths./route.{outputFormat}.get.parameters[0].default: json
paths./route.{outputFormat}.get.parameters[0].description: Format of representation
paths./route.{outputFormat}.get.parameters[0].enum.length: 3
paths./route.{outputFormat}.get.parameters[0].enum[0]: json
paths./route.{outputFormat}.get.parameters[0].enum[1]: kml
paths./route.{outputFormat}.get.parameters[0].enum[2]: html
paths./route.{outputFormat}.get.parameters[0].in: path
paths./route.{outputFormat}.get.parameters[0].name: outputFormat
paths./route.{outputFormat}.get.parameters[0].required: true
paths./route.{outputFormat}.get.parameters[0].type: string
paths./route.{outputFormat}.get.parameters[1].description: 'Example: -123.70794,48.77869,-123.53785,48.38200.
  A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#points
  target=''_blank''>points</a>'
paths./route.{outputFormat}.get.parameters[1].in: query
paths./route.{outputFormat}.get.parameters[1].name: points
paths./route.{outputFormat}.get.parameters[1].required: true
paths./route.{outputFormat}.get.parameters[1].type: string
paths./route.{outputFormat}.get.parameters[2].default: 4326
paths./route.{outputFormat}.get.parameters[2].description: The EPSG code of the spatial
  reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#outputSRS
  target="_blank">outputSRS</a>
paths./route.{outputFormat}.get.parameters[2].enum.length: 8
paths./route.{outputFormat}.get.parameters[2].enum[0]: 4326
paths./route.{outputFormat}.get.parameters[2].enum[1]: 4269
paths./route.{outputFormat}.get.parameters[2].enum[2]: 3005
paths./route.{outputFormat}.get.parameters[2].enum[3]: 26907
paths./route.{outputFormat}.get.parameters[2].enum[4]: 26908
paths./route.{outputFormat}.get.parameters[2].enum[5]: 26909
paths./route.{outputFormat}.get.parameters[2].enum[6]: 26910
paths./route.{outputFormat}.get.parameters[2].enum[7]: 26911
paths./route.{outputFormat}.get.parameters[2].in: query
paths./route.{outputFormat}.get.parameters[2].name: outputSRS
paths./route.{outputFormat}.get.parameters[2].required: false
paths./route.{outputFormat}.get.parameters[2].type: integer
paths./route.{outputFormat}.get.parameters[3].default: shortest
paths./route.{outputFormat}.get.parameters[3].description: Routing criteria to optimize
  (e.g., shortest, fastest). Default is shortest.
paths./route.{outputFormat}.get.parameters[3].enum.length: 2
paths./route.{outputFormat}.get.parameters[3].enum[0]: shortest
paths./route.{outputFormat}.get.parameters[3].enum[1]: fastest
paths./route.{outputFormat}.get.parameters[3].in: query
paths./route.{outputFormat}.get.parameters[3].name: criteria
paths./route.{outputFormat}.get.parameters[3].required: false
paths./route.{outputFormat}.get.parameters[3].type: string
paths./route.{outputFormat}.get.parameters[4].default: km
paths./route.{outputFormat}.get.parameters[4].description: distance unit of measure
  (e.g., km, mi). Default is km.
paths./route.{outputFormat}.get.parameters[4].enum.length: 2
paths./route.{outputFormat}.get.parameters[4].enum[0]: km
paths./route.{outputFormat}.get.parameters[4].enum[1]: mi
paths./route.{outputFormat}.get.parameters[4].in: query
paths./route.{outputFormat}.get.parameters[4].name: distanceUnit
paths./route.{outputFormat}.get.parameters[4].required: false
paths./route.{outputFormat}.get.parameters[4].type: string
paths./route.{outputFormat}.get.parameters[5].default: Routing results
paths./route.{outputFormat}.get.parameters[5].description: Route description (e.g.,
  Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
paths./route.{outputFormat}.get.parameters[5].in: query
paths./route.{outputFormat}.get.parameters[5].name: routeDescription
paths./route.{outputFormat}.get.parameters[5].required: false
paths./route.{outputFormat}.get.parameters[5].type: string
paths./route.{outputFormat}.get.responses.200.description: Geometry, distance, and
  time of the shortest or fastest route
paths./route.{outputFormat}.get.summary: Get the path, distance and travel time between
  a series of geographic points
paths./route.{outputFormat}.get.tags.length: 1
paths./route.{outputFormat}.get.tags[0]: route
produces.length: 3
produces[0]: application/json
produces[1]: application/vnd.google-earth.kml+xml
produces[2]: text/html
schemes.length: 1
schemes[0]: https
security.length: 1
security[0].apikey.length: 0
securityDefinitions.apikey.in: header
securityDefinitions.apikey.name: apikey
securityDefinitions.apikey.type: apiKey
swagger: "2.0"
tags.length: 7
tags[0].name: directions
tags[1].name: routes
tags[2].name: route
tags[3].name: routing
tags[4].name: route planning
tags[5].name: shortest route
tags[6].name: fastest route

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package gatedgeocoder;

message GetAddressesOutputFormatRequest {
    // Examples: 525 Superior Street, Victoria, BC<br>301-780 Blanshard St, Victoria, BC<br>Johnson St and Government St, Victoria, BC.<br> Civic or intersection address as a single string. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#addressString target="_blank">addressString</a>
    string addressString = 1;
    // Example: -126.0792,49.7628,-126.0163,49.7907.  A bounding box (xmin,ymin,xmax,ymax) that limits the search area. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox target="_blank">bbox</a>
    string bbox = 2;
    // Example: -124.01659,49.2296.  The coordinates of a centre point (x,y) used to define a bounding circle that will limit the search area. This parameter must be specified together with 'maxDistance'. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#centre target='_blank'>centre</a>
    string centre = 3;
    // The official number assigned to a site by an address authority. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumber target="_blank">civicNumber</a>
    string civicNumber = 4;
    // A letter or fraction that follows the civic number (e.g., the A in 1039A Bledsoe St). See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumberSuffix target="_blank">civicNumberSuffix</a>
    string civicNumberSuffix = 5;
    // If true, include unmatched address details such as site name in results.
    bool echo = 6;
    // If true, uses supplied parcelPoint to derive an appropriate accessPoint.           See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#extrapolate target="_blank">extrapolate</a>
    bool extrapolate = 7;
    // accessPoint interpolation method. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#interpolation target="_blank">interpolation</a>
    enum GetAddressesOutputFormatRequest_Interpolation {
        GETADDRESSESOUTPUTFORMATREQUEST_INTERPOLATION_ADAPTIVE = 0;
        GETADDRESSESOUTPUTFORMATREQUEST_INTERPOLATION_LINEAR = 1;
        GETADDRESSESOUTPUTFORMATREQUEST_INTERPOLATION_NONE = 2;
    }
    GetAddressesOutputFormatRequest_Interpolation interpolation = 8;
    // A comma separated list of locality names that matched addresses must belong to. For example, setting localities to Nanaimo only returns addresses in Nanaimo
    string localities = 9;
    // The name of the locality assigned to a given site by an address authority. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#localityName target="_blank">localityName</a>
    string localityName = 10;
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetAddressesOutputFormatRequest_LocationDescriptor {
        GETADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetAddressesOutputFormatRequest_LocationDescriptor locationDescriptor = 11;
    // Example: street,locality.  A comma separated list of individual match precision levels to include in results. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecision target="_blank">matchPrecision</a>
    string matchPrecision = 12;
    // Example: street,locality.  A comma separated list of individual match precision levels to exclude from results. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecisionNot target="_blank">matchPrecisionNot</a>
    string matchPrecisionNot = 13;
    // The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
    int32 maxDistance = 14;
    // The maximum number of search results to return.
    int32 maxResults = 15;
    // The minimum score required for a match to be returned. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#minScore target="_blank">minScore</a>
    int32 minScore = 16;
    // A comma-separated list of localities to exclude from the search.
    string notLocalities = 17;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetAddressesOutputFormatRequest_OutputFormat {
        GETADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetAddressesOutputFormatRequest_OutputFormat outputFormat = 18;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 19;
    // The coordinates of a point (x,y) known to be inside the parcel containing a given address. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#parcelPoint target="_blank">parcelPoint</a>
    string parcelPoint = 20;
    // The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
    string provinceCode = 21;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 22;
    // A string containing the name of the building, facility, or institution (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#siteName target="_blank">siteName</a>
    string siteName = 23;
    // The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection target="_blank">streetDirection</a>
    enum GetAddressesOutputFormatRequest_StreetDirection {
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_N = 0;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_S = 1;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_E = 2;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_W = 3;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_O = 4;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_NE = 5;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_NO = 6;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_NW = 7;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_SE = 8;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_SO = 9;
        GETADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_SW = 10;
    }
    GetAddressesOutputFormatRequest_StreetDirection streetDirection = 24;
    // The official name of the street as assigned by an address authority (e.g., the Douglas in 1175 Douglas Street). See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetName target="_blank">streetName</a>
    string streetName = 25;
    // Example: the Bridge in Johnson St Bridge. The qualifier of a street name. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetQulifier target="_blank">streetQualifier</a>
    string streetQualifier = 26;
    // The type of street as assigned by a municipality (e.g., the ST in 1175 DOUGLAS St). See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetType target="_blank">streetType</a>
    string streetType = 27;
    // The type of unit within a house or building. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#unitDesignator target="_blank">unitDesignator</a>
    enum GetAddressesOutputFormatRequest_UnitDesignator {
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_APT = 0;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_BLDG = 1;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_BSMT = 2;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_FLR = 3;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_LOBBY = 4;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_LWR = 5;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_PAD = 6;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_PH = 7;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_REAR = 8;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_RM = 9;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_SIDE = 10;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_SITE = 11;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_SUITE = 12;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_TH = 13;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_UNIT = 14;
        GETADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_UPPR = 15;
    }
    GetAddressesOutputFormatRequest_UnitDesignator unitDesignator = 28;
    // The number of the unit, suite, or apartment within a house or building.
    string unitNumber = 29;
    // A letter that follows the unit number as in Unit 1A or Suite 302B.
    string unitNumberSuffix = 30;
}

message GetIntersectionsNearOutputFormatRequest {
    // The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4.
    int32 maxDegree = 1;
    // The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
    int32 maxDistance = 2;
    // The maximum number of search results to return.
    int32 maxResults = 3;
    // The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1.
    int32 minDegree = 4;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetIntersectionsNearOutputFormatRequest_OutputFormat {
        GETINTERSECTIONSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETINTERSECTIONSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETINTERSECTIONSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETINTERSECTIONSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETINTERSECTIONSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETINTERSECTIONSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETINTERSECTIONSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetIntersectionsNearOutputFormatRequest_OutputFormat outputFormat = 5;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 6;
    // Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
    string point = 7;
}

message GetIntersectionsNearestOutputFormatRequest {
    // The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4.
    int32 maxDegree = 1;
    // The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
    int32 maxDistance = 2;
    // The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1.
    int32 minDegree = 3;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetIntersectionsNearestOutputFormatRequest_OutputFormat {
        GETINTERSECTIONSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETINTERSECTIONSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETINTERSECTIONSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETINTERSECTIONSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETINTERSECTIONSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETINTERSECTIONSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETINTERSECTIONSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetIntersectionsNearestOutputFormatRequest_OutputFormat outputFormat = 4;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 5;
    // Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
    string point = 6;
}

message GetIntersectionsWithinOutputFormatRequest {
    // Example: -119.51,49.48,-119.53,49.50. A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox target="_blank">bbox</a>
    string bbox = 1;
    // The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4.
    int32 maxDegree = 2;
    // The maximum number of search results
    int32 maxResults = 3;
    // The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1.
    int32 minDegree = 4;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormattarget="_blank">outputFormat</a>
    enum GetIntersectionsWithinOutputFormatRequest_OutputFormat {
        GETINTERSECTIONSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETINTERSECTIONSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETINTERSECTIONSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETINTERSECTIONSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETINTERSECTIONSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETINTERSECTIONSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETINTERSECTIONSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetIntersectionsWithinOutputFormatRequest_OutputFormat outputFormat = 5;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 6;
}

message GetIntersectionsIntersectionIDOutputFormatRequest {
    // A unique intersection identifier
    string intersectionID = 1;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetIntersectionsIntersectionIDOutputFormatRequest_OutputFormat {
        GETINTERSECTIONSINTERSECTIONIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETINTERSECTIONSINTERSECTIONIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETINTERSECTIONSINTERSECTIONIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETINTERSECTIONSINTERSECTIONIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETINTERSECTIONSINTERSECTIONIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETINTERSECTIONSINTERSECTIONIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETINTERSECTIONSINTERSECTIONIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetIntersectionsIntersectionIDOutputFormatRequest_OutputFormat outputFormat = 2;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 3;
}

message GetOccupantsAddressesOutputFormatRequest {
    // Examples: Redfish Elementary --<br>Redfish Elementary -- Balfour<br>Redfish Elementary School -- 265 Bryan Rd, Balfour, BC<br>Occupant name followed by a frontGate delimiter ('--') followed by an optional address
    string addressString = 1;
    // Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box (xmin,ymin,xmax,ymax) that limits the search area. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox target="_blank">bbox</a>
    string bbox = 2;
    // Example: -124.0165,49.2296.  The coordinates of a centre point (x,y) used to define a bounding circle that will limit the search area. This parameter must be specified together with 'maxDistance'. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#centre target='_blank'>centre</a>
    string centre = 3;
    // The official number assigned to a site by an address authority. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumber target="_blank">civicNumber</a>
    string civicNumber = 4;
    // A letter or fraction that follows the civic number (e.g., the A in 1039A Bledsoe St). See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumberSuffix target="_blank">civicNumberSuffix</a>
    string civicNumberSuffix = 5;
    // If true, include unmatched address details such as site name in results.
    bool echo = 6;
    // If true, uses supplied parcelPoint to derive an appropriate accessPoint.           See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#extrapolate target="_blank">extrapolate</a>
    bool extrapolate = 7;
    // accessPoint interpolation method. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#interpolation target="_blank">interpolation</a>
    enum GetOccupantsAddressesOutputFormatRequest_Interpolation {
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_INTERPOLATION_ADAPTIVE = 0;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_INTERPOLATION_LINEAR = 1;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_INTERPOLATION_NONE = 2;
    }
    GetOccupantsAddressesOutputFormatRequest_Interpolation interpolation = 8;
    // A comma separated list of locality names that matched addresses must belong to. For example, setting localities to Nanaimo only returns addresses in Nanaimo
    string localities = 9;
    // The name of the locality assigned to a given site by an address authority. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection target="_blank">streetDirection</a>
    string localityName = 10;
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetOccupantsAddressesOutputFormatRequest_LocationDescriptor {
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetOccupantsAddressesOutputFormatRequest_LocationDescriptor locationDescriptor = 11;
    // Example: street,locality.  A comma separated list of individual match precision levels to include in results. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecision target="_blank">matchPrecision</a>
    string matchPrecision = 12;
    // Example: street,locality.  A comma separated list of individual match precision levels to exclude from results. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecisionNot target="_blank">matchPrecisionNot</a>
    string matchPrecisionNot = 13;
    // The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
    int32 maxDistance = 14;
    // The maximum number of search results to return.
    int32 maxResults = 15;
    // The minimum score required for a match to be returned. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#minScore target="_blank">minScore</a>
    int32 minScore = 16;
    // A comma-separated list of localities to exclude from the search.
    string notLocalities = 17;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetOccupantsAddressesOutputFormatRequest_OutputFormat {
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetOccupantsAddressesOutputFormatRequest_OutputFormat outputFormat = 18;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 19;
    // The coordinates of a point (x,y) known to be inside the parcel containing a given address. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#parcelPoint target="_blank">parcelPoint</a>
    string parcelPoint = 20;
    // The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
    string provinceCode = 21;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 22;
    // A string containing the name of the building, facility, or institution (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#siteName target="_blank">siteName</a>
    string siteName = 23;
    // The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection target="_blank">streetDirection</a>
    enum GetOccupantsAddressesOutputFormatRequest_StreetDirection {
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_N = 0;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_S = 1;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_E = 2;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_W = 3;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_O = 4;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_NE = 5;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_NO = 6;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_NW = 7;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_SE = 8;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_SO = 9;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_STREETDIRECTION_SW = 10;
    }
    GetOccupantsAddressesOutputFormatRequest_StreetDirection streetDirection = 24;
    // The official name of the street as assigned by an address authority (e.g., the Douglas in 1175 Douglas Street). See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetName target="_blank">streetName</a>
    string streetName = 25;
    // The qualifier of a street name (e.g., the Bridge in Johnson St Bridge)
    string streetQualifier = 26;
    // The type of street as assigned by a municipality (e.g., the ST in 1175 DOUGLAS St). See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetType target="_blank">streetType</a>
    string streetType = 27;
    // Example: schools;courts;employment<br>A list of tags separated by semicolons.
    string tags = 28;
    // The type of unit within a house or building. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#unitDesignator target="_blank">unitDesignator</a>
    enum GetOccupantsAddressesOutputFormatRequest_UnitDesignator {
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_APT = 0;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_BLDG = 1;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_BSMT = 2;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_FLR = 3;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_LOBBY = 4;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_LWR = 5;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_PAD = 6;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_PH = 7;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_REAR = 8;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_RM = 9;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_SIDE = 10;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_SITE = 11;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_SUITE = 12;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_TH = 13;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_UNIT = 14;
        GETOCCUPANTSADDRESSESOUTPUTFORMATREQUEST_UNITDESIGNATOR_UPPR = 15;
    }
    GetOccupantsAddressesOutputFormatRequest_UnitDesignator unitDesignator = 29;
    // The number of the unit, suite, or apartment within a house or building.
    string unitNumber = 30;
    // A letter that follows the unit number as in Unit 1A or Suite 302B.
    string unitNumberSuffix = 31;
}

message GetOccupantsNearOutputFormatRequest {
    // If true, excludes sites that are units of a parent site
    bool excludeUnits = 1;
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetOccupantsNearOutputFormatRequest_LocationDescriptor {
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetOccupantsNearOutputFormatRequest_LocationDescriptor locationDescriptor = 2;
    // The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
    int32 maxDistance = 3;
    // The maximum number of search results to return.
    int32 maxResults = 4;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetOccupantsNearOutputFormatRequest_OutputFormat {
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETOCCUPANTSNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetOccupantsNearOutputFormatRequest_OutputFormat outputFormat = 5;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 6;
    // Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
    string point = 7;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 8;
    // Example: schools;courts;employment<br>A list of tags separated by semicolons.
    string tags = 9;
}

message GetOccupantsNearestOutputFormatRequest {
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetOccupantsNearestOutputFormatRequest_LocationDescriptor {
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetOccupantsNearestOutputFormatRequest_LocationDescriptor locationDescriptor = 1;
    // The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
    int32 maxDistance = 2;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetOccupantsNearestOutputFormatRequest_OutputFormat {
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETOCCUPANTSNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetOccupantsNearestOutputFormatRequest_OutputFormat outputFormat = 3;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 4;
    // Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
    string point = 5;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 6;
    // Example: schools;courts;employment<br>A list of tags separated by semicolons.
    string tags = 7;
}

message GetOccupantsWithinOutputFormatRequest {
    // Example: -119.51,49.48,-119.53,49.50. A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox target="_blank">bbox</a>
    string bbox = 1;
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetOccupantsWithinOutputFormatRequest_LocationDescriptor {
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetOccupantsWithinOutputFormatRequest_LocationDescriptor locationDescriptor = 2;
    // The maximum number of search results to return.
    int32 maxResults = 3;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetOccupantsWithinOutputFormatRequest_OutputFormat {
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETOCCUPANTSWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetOccupantsWithinOutputFormatRequest_OutputFormat outputFormat = 4;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 5;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 6;
    // Example: schools;courts;employment<br>A list of tags separated by semicolons.
    string tags = 7;
}

message GetOccupantsOccupantIDOutputFormatRequest {
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetOccupantsOccupantIDOutputFormatRequest_LocationDescriptor {
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetOccupantsOccupantIDOutputFormatRequest_LocationDescriptor locationDescriptor = 1;
    // Occupant identifier
    string occupantID = 2;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetOccupantsOccupantIDOutputFormatRequest_OutputFormat {
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETOCCUPANTSOCCUPANTIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetOccupantsOccupantIDOutputFormatRequest_OutputFormat outputFormat = 3;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 4;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 5;
}

message GetSitesNearOutputFormatRequest {
    // If true, excludes sites that are units of a parent site
    bool excludeUnits = 1;
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetSitesNearOutputFormatRequest_LocationDescriptor {
        GETSITESNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETSITESNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETSITESNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETSITESNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETSITESNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETSITESNEAROUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetSitesNearOutputFormatRequest_LocationDescriptor locationDescriptor = 2;
    // The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
    int32 maxDistance = 3;
    // The maximum number of search results to return.
    int32 maxResults = 4;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetSitesNearOutputFormatRequest_OutputFormat {
        GETSITESNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETSITESNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETSITESNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETSITESNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETSITESNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETSITESNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETSITESNEAROUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetSitesNearOutputFormatRequest_OutputFormat outputFormat = 5;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 6;
    // Example: -122.377,50.121  The point (x,y) from which the nearby sites will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
    string point = 7;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 8;
}

message GetSitesNearestOutputFormatRequest {
    // If true, excludes sites that are units of a parent site
    bool excludeUnits = 1;
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetSitesNearestOutputFormatRequest_LocationDescriptor {
        GETSITESNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETSITESNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETSITESNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETSITESNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETSITESNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETSITESNEARESTOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetSitesNearestOutputFormatRequest_LocationDescriptor locationDescriptor = 2;
    // The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
    int32 maxDistance = 3;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetSitesNearestOutputFormatRequest_OutputFormat {
        GETSITESNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETSITESNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETSITESNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETSITESNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETSITESNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETSITESNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETSITESNEARESTOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetSitesNearestOutputFormatRequest_OutputFormat outputFormat = 4;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 5;
    // Example: -122.377,50.121  Centre point of search. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#point target="_blank">point</a>
    string point = 6;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 7;
}

message GetSitesWithinOutputFormatRequest {
    // Example: -119.51,49.48,-119.53,49.50. A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox target="_blank">bbox</a>
    string bbox = 1;
    // If true, excludes sites that are units of a parent site
    bool excludeUnits = 2;
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetSitesWithinOutputFormatRequest_LocationDescriptor {
        GETSITESWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETSITESWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETSITESWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETSITESWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETSITESWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETSITESWITHINOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetSitesWithinOutputFormatRequest_LocationDescriptor locationDescriptor = 3;
    // The maximum number of search results to return.
    int32 maxResults = 4;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetSitesWithinOutputFormatRequest_OutputFormat {
        GETSITESWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETSITESWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETSITESWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETSITESWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETSITESWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETSITESWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETSITESWITHINOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetSitesWithinOutputFormatRequest_OutputFormat outputFormat = 5;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 6;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 7;
}

message GetSitesSiteIDOutputFormatRequest {
    // Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
    enum GetSitesSiteIDOutputFormatRequest_LocationDescriptor {
        GETSITESSITEIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ANY = 0;
        GETSITESSITEIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ACCESSPOINT = 1;
        GETSITESSITEIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_FRONTDOORPOINT = 2;
        GETSITESSITEIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_PARCELPOINT = 3;
        GETSITESSITEIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROOFTOPPOINT = 4;
        GETSITESSITEIDOUTPUTFORMATREQUEST_LOCATIONDESCRIPTOR_ROUTINGPOINT = 5;
    }
    GetSitesSiteIDOutputFormatRequest_LocationDescriptor locationDescriptor = 1;
    // Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
    enum GetSitesSiteIDOutputFormatRequest_OutputFormat {
        GETSITESSITEIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_JSON = 0;
        GETSITESSITEIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_GEOJSON = 1;
        GETSITESSITEIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_XHTML = 2;
        GETSITESSITEIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_KML = 3;
        GETSITESSITEIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_GML = 4;
        GETSITESSITEIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_CSV = 5;
        GETSITESSITEIDOUTPUTFORMATREQUEST_OUTPUTFORMAT_SHPZ = 6;
    }
    GetSitesSiteIDOutputFormatRequest_OutputFormat outputFormat = 2;
    // The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
    int32 outputSRS = 3;
    // The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
    int32 setBack = 4;
    // A unique, but not immutable, site identifier.
    string siteID = 5;
}

service GatedGeocoderService {
    // Geocode an address
    // 
    // Represents the set of geocoded and standardized sites and intersections whose address best matches a given query address.
    rpc GetAddressesOutputFormat(GetAddressesOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//addresses.{outputFormat}"
      };
    }
    // Find intersections near to a geographic point
    // 
    // Represents intersections near a given point
    rpc GetIntersectionsNearOutputFormat(GetIntersectionsNearOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//intersections/near.{outputFormat}"
      };
    }
    // Find nearest intersection to a geographic point
    // 
    // Represents the closest intersection to a given point
    rpc GetIntersectionsNearestOutputFormat(GetIntersectionsNearestOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//intersections/nearest.{outputFormat}"
      };
    }
    // Find intersections in a geographic area
    // 
    // Represents all intersections within a given area
    rpc GetIntersectionsWithinOutputFormat(GetIntersectionsWithinOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//intersections/within.{outputFormat}"
      };
    }
    // Get an intersection by its unique ID
    // 
    // Represents a individual intersection
    rpc GetIntersectionsIntersectionIDOutputFormat(GetIntersectionsIntersectionIDOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//intersections/{intersectionID}.{outputFormat}"
      };
    }
    // Geocode an address and identify site occupants
    // 
    // Represents the set of occupants whose addresses best match a given query address. Every occupant has an associated site which has a standardized address and a coordinate location on the Earth.
    rpc GetOccupantsAddressesOutputFormat(GetOccupantsAddressesOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//occupants/addresses.{outputFormat}"
      };
    }
    // Find occupants of sites near to a geographic point
    // 
    // Represents occupants near a given point in order of closest to farthest
    rpc GetOccupantsNearOutputFormat(GetOccupantsNearOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//occupants/near.{outputFormat}"
      };
    }
    // Find occupants of the site nearest to a geographic point
    // 
    // Represents the closest occupant to a given point
    rpc GetOccupantsNearestOutputFormat(GetOccupantsNearestOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//occupants/nearest.{outputFormat}"
      };
    }
    // Find occupants of sites in a geographic area
    // 
    // Represents all occupants within a given area
    rpc GetOccupantsWithinOutputFormat(GetOccupantsWithinOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//occupants/within.{outputFormat}"
      };
    }
    // Get an occupant (of a site) by its unique ID
    // 
    // Represents an individual occupant
    rpc GetOccupantsOccupantIDOutputFormat(GetOccupantsOccupantIDOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//occupants/{occupantID}.{outputFormat}"
      };
    }
    // Find sites near to a geographic point
    // 
    // Represents sites near a given point in the order of closest to farthest
    rpc GetSitesNearOutputFormat(GetSitesNearOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//sites/near.{outputFormat}"
      };
    }
    // Find the site nearest to a geographic point
    // 
    // Represents the site nearest a given point
    rpc GetSitesNearestOutputFormat(GetSitesNearestOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//sites/nearest.{outputFormat}"
      };
    }
    // Find sites in a geographic area
    // 
    // Represents sites within a given area
    rpc GetSitesWithinOutputFormat(GetSitesWithinOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//sites/within.{outputFormat}"
      };
    }
    // Get a site by its unique ID
    // 
    // Represents an individual site
    rpc GetSitesSiteIDOutputFormat(GetSitesSiteIDOutputFormatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//sites/{siteID}.{outputFormat}"
      };
    }
}

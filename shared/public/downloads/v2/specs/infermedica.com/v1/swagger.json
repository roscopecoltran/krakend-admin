{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.infermedica.com",
  "basePath": "/v1",
  "info": {
    "description": "Empower your healthcare services with intelligent diagnostic insights of Infermedica API.",
    "title": "Infermedica",
    "version": "v1",
    "x-logo": {
      "backgroundColor": "#1576D1",
      "url": "https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_760115506867208192_mwND7blL_400x400.jpg"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://api.infermedica.com/v1/swagger.json",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "infermedica.com"
  },
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "info"
    },
    {
      "name": "risk_factors"
    },
    {
      "name": "diagnosis"
    },
    {
      "name": "conditions"
    },
    {
      "name": "observations"
    },
    {
      "name": "lookup"
    }
  ],
  "paths": {
    "/conditions": {
      "get": {
        "description": "Returns a list of all available conditions.",
        "operationId": "getAllConditions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Condition"
              },
              "type": "array"
            }
          }
        },
        "summary": "List all conditions",
        "tags": [
          "conditions"
        ]
      }
    },
    "/conditions/{id}": {
      "get": {
        "description": "Returns details of a single condition specified by id parameter.",
        "operationId": "getCondition",
        "parameters": [
          {
            "description": "condition id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Condition"
            }
          },
          "400": {
            "description": "Invalid id specified"
          },
          "404": {
            "description": "Condition not found"
          }
        },
        "summary": "Get condition by id",
        "tags": [
          "conditions"
        ]
      }
    },
    "/diagnosis": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Computes possible diagnoses and relevant observations based on provided patient information.",
        "operationId": "computeDiagnosis",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosisRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DiagnosisResponse"
            }
          }
        },
        "summary": "Query diagnostic engine",
        "tags": [
          "diagnosis"
        ]
      }
    },
    "/info": {
      "get": {
        "description": "Returns information about data used by diagnostic engine.",
        "operationId": "getDatabaseInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DatabaseInfo"
            }
          }
        },
        "summary": "Get database information",
        "tags": [
          "info"
        ]
      }
    },
    "/lookup": {
      "get": {
        "description": "Returns details of a single observation if matched by the given phrase.",
        "operationId": "getMatchingObservation",
        "parameters": [
          {
            "description": "phrase to match",
            "in": "query",
            "name": "phrase",
            "required": true,
            "type": "string"
          },
          {
            "description": "sex filter",
            "enum": [
              "female",
              "male"
            ],
            "in": "query",
            "name": "sex",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Observation"
            }
          },
          "400": {
            "description": "Phrase missing or invalid sex specified"
          },
          "404": {
            "description": "No observation matches given phrase"
          }
        },
        "summary": "Find observation matching given phrase",
        "tags": [
          "lookup"
        ]
      }
    },
    "/observations": {
      "get": {
        "description": "Returns a list of all available observations.",
        "operationId": "getAllObservations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Observation"
              },
              "type": "array"
            }
          }
        },
        "summary": "List all observations",
        "tags": [
          "observations"
        ]
      }
    },
    "/observations/{id}": {
      "get": {
        "description": "Returns details of a single observation specified by id parameter.",
        "operationId": "getObservation",
        "parameters": [
          {
            "description": "observation id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Observation"
            }
          },
          "400": {
            "description": "Invalid id specified"
          },
          "404": {
            "description": "Observation not found"
          }
        },
        "summary": "Get observation by id",
        "tags": [
          "observations"
        ]
      }
    },
    "/risk_factors": {
      "get": {
        "description": "Returns a list of all available risk factors.",
        "operationId": "getAllRiskFactors",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RiskFactor"
              },
              "type": "array"
            }
          }
        },
        "summary": "List all risk factors",
        "tags": [
          "risk_factors"
        ]
      }
    },
    "/risk_factors/{id}": {
      "get": {
        "description": "Returns details of a single risk factor specified by id parameter.",
        "operationId": "getRiskFactor",
        "parameters": [
          {
            "description": "risk factor id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RiskFactor"
            }
          },
          "400": {
            "description": "Invalid id specified"
          },
          "404": {
            "description": "Risk factor not found"
          }
        },
        "summary": "Get risk factor by id",
        "tags": [
          "risk_factors"
        ]
      }
    }
  },
  "definitions": {
    "Choice": {
      "properties": {
        "id": {
          "enum": [
            "present",
            "absent",
            "unknown"
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "label"
      ],
      "type": "object"
    },
    "Condition": {
      "properties": {
        "acuteness": {
          "enum": [
            "chronic",
            "chronic_with_exacerbations",
            "acute_potentially_chronic",
            "acute"
          ],
          "type": "string"
        },
        "categories": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "prevalence": {
          "enum": [
            "very_rare",
            "rare",
            "moderate",
            "common"
          ],
          "type": "string"
        },
        "severity": {
          "enum": [
            "mild",
            "moderate",
            "severe"
          ],
          "type": "string"
        },
        "sex_filter": {
          "enum": [
            "female",
            "male",
            "both"
          ],
          "type": "string"
        }
      },
      "required": [
        "categories",
        "id",
        "name",
        "sex_filter"
      ],
      "type": "object"
    },
    "ConditionProbability": {
      "properties": {
        "id": {
          "description": "condition id",
          "type": "string"
        },
        "name": {
          "description": "condition name",
          "type": "string"
        },
        "probability": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "id",
        "name",
        "probability"
      ],
      "type": "object"
    },
    "DatabaseInfo": {
      "properties": {
        "conditions_count": {
          "format": "int32",
          "type": "integer"
        },
        "observations_count": {
          "format": "int32",
          "type": "integer"
        },
        "updated_at": {
          "description": "time of last database update in ISO 8601 format",
          "type": "string"
        }
      },
      "required": [
        "conditions_count",
        "observations_count",
        "updated_at"
      ],
      "type": "object"
    },
    "DiagnosisRequest": {
      "properties": {
        "age": {
          "format": "int32",
          "type": "integer"
        },
        "evaluated_at": {
          "description": "time when diagnosis was evaluated in ISO 8601 format",
          "type": "string"
        },
        "evidence": {
          "items": {
            "$ref": "#/definitions/Evidence"
          },
          "type": "array"
        },
        "extras": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "pursued": {
          "description": "list of ids of pursued conditions",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sex": {
          "enum": [
            "female",
            "male"
          ],
          "type": "string"
        }
      },
      "required": [
        "age",
        "sex"
      ],
      "type": "object"
    },
    "DiagnosisResponse": {
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/ConditionProbability"
          },
          "type": "array"
        },
        "extras": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "question": {
          "$ref": "#/definitions/Question"
        }
      },
      "type": "object"
    },
    "Evidence": {
      "properties": {
        "choice_id": {
          "enum": [
            "present",
            "absent",
            "unknown"
          ],
          "type": "string"
        },
        "id": {
          "description": "id of observation, risk factor or condition",
          "type": "string"
        },
        "observed_at": {
          "description": "time when evidence was observed in ISO 8601 format",
          "type": "string"
        }
      },
      "required": [
        "choice_id",
        "id"
      ],
      "type": "object"
    },
    "Observation": {
      "properties": {
        "category": {
          "type": "string"
        },
        "children": {
          "description": "ids of child observations grouped by their relation with this observation",
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "description": "id of parent observation",
          "type": "string"
        },
        "parent_relation_type": {
          "description": "type of relation with parent observation",
          "enum": [
            "base",
            "duration",
            "severity",
            "character",
            "exacerbating_factor",
            "diminishing_factor",
            "location",
            "radiation"
          ],
          "type": "string"
        },
        "sex_filter": {
          "enum": [
            "female",
            "male",
            "both"
          ],
          "type": "string"
        },
        "valid_for": {
          "description": "number of days that this observation remains valid",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "sex_filter"
      ],
      "type": "object"
    },
    "Question": {
      "properties": {
        "items": {
          "description": "one or more observations to evaluate",
          "items": {
            "$ref": "#/definitions/QuestionItem"
          },
          "type": "array"
        },
        "text": {
          "description": "question text",
          "type": "string"
        },
        "type": {
          "enum": [
            "single",
            "group_single",
            "group_multiple"
          ],
          "type": "string"
        }
      },
      "required": [
        "items",
        "text"
      ],
      "type": "object"
    },
    "QuestionItem": {
      "properties": {
        "choices": {
          "description": "list of available answer choices",
          "items": {
            "$ref": "#/definitions/Choice"
          },
          "type": "array"
        },
        "id": {
          "description": "observation id",
          "type": "string"
        },
        "name": {
          "description": "name or alias of observation",
          "type": "string"
        }
      },
      "required": [
        "choices",
        "id",
        "name"
      ],
      "type": "object"
    },
    "RiskFactor": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    }
  }
}

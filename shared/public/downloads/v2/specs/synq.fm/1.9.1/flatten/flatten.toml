basePath = "/v1"
"consumes.length" = 2
"consumes[0]" = "multipart/form-data"
"consumes[1]" = "application/x-www-form-urlencoded"
"definitions.ErrorObject.example.message" = "A lengthy, human-readable description of the error that has occurred."
"definitions.ErrorObject.example.name" = "Some error occurred."
"definitions.ErrorObject.example.url" = "http://docs.synq.fm/api/v1/error/some_error_code"
"definitions.ErrorObject.properties.details.type" = "object"
"definitions.ErrorObject.properties.message.type" = "string"
"definitions.ErrorObject.properties.name.type" = "string"
"definitions.ErrorObject.properties.url.type" = "string"
"definitions.ErrorObject.required.length" = 3
"definitions.ErrorObject.required[0]" = "url"
"definitions.ErrorObject.required[1]" = "name"
"definitions.ErrorObject.required[2]" = "message"
"definitions.ErrorObject.title" = "ErrorObject"
"definitions.ErrorObject.type" = "object"
"definitions.StreamConfigurationObject.properties.rtmp_host.example" = "ec2-54-171-205-23.eu-west-1.compute.amazonaws.com"
"definitions.StreamConfigurationObject.properties.rtmp_host.type" = "string"
"definitions.StreamConfigurationObject.properties.rtmp_key.example" = "live/ce29d1cb5da48a564d2c9f62be7ade06"
"definitions.StreamConfigurationObject.properties.rtmp_key.type" = "string"
"definitions.StreamConfigurationObject.properties.rtmp_port.example" = "1935"
"definitions.StreamConfigurationObject.properties.rtmp_port.type" = "string"
"definitions.StreamConfigurationObject.properties.rtmp_url.example" = "rtmp://ec2-54-171-205-23.eu-west-1.compute.amazonaws.com:1935/live/ce29d1cb5da48a564d2c9f62be7ade06"
"definitions.StreamConfigurationObject.properties.rtmp_url.type" = "string"
"definitions.StreamConfigurationObject.title" = "StreamConfigurationObject"
"definitions.StreamConfigurationObject.type" = "object"
"definitions.UploadParameterObject.properties.AWSAccessKeyId.type" = "string"
"definitions.UploadParameterObject.properties.Content-Type.type" = "string"
"definitions.UploadParameterObject.properties.Policy.type" = "string"
"definitions.UploadParameterObject.properties.Signature.type" = "string"
"definitions.UploadParameterObject.properties.acl.type" = "string"
"definitions.UploadParameterObject.properties.action.type" = "string"
"definitions.UploadParameterObject.properties.key.type" = "string"
"definitions.UploadParameterObject.title" = "UploadParameterObject"
"definitions.UploadParameterObject.type" = "object"
"definitions.VideoObject.example.created_at" = "2017-03-07T12:03:34.477Z"
"definitions.VideoObject.example.state" = "created"
"definitions.VideoObject.example.updated_at" = "2017-03-07T12:03:34.477Z"
"definitions.VideoObject.example.video_id" = "5747740852d14db58f47a5858f0bbcf7"
"definitions.VideoObject.properties.created_at.type" = "string"
"definitions.VideoObject.properties.input.type" = "object"
"definitions.VideoObject.properties.outputs.type" = "object"
"definitions.VideoObject.properties.state.type" = "string"
"definitions.VideoObject.properties.updated_at.type" = "string"
"definitions.VideoObject.properties.userdata.type" = "object"
"definitions.VideoObject.properties.video_id.type" = "string"
"definitions.VideoObject.required.length" = 5
"definitions.VideoObject.required[0]" = "video_id"
"definitions.VideoObject.required[1]" = "state"
"definitions.VideoObject.required[2]" = "userdata"
"definitions.VideoObject.required[3]" = "created_at"
"definitions.VideoObject.required[4]" = "updated_at"
"definitions.VideoObject.title" = "VideoObject"
"definitions.VideoObject.type" = "object"
host = "api.synq.fm"
"info.description" = "* [Sign up for a developer API key!](https://www.synq.fm/register)\n* [SYNQ API Guide](/)"
"info.title" = "SYNQ Video"
"info.version" = "1.9.1"
"info.x-apisguru-categories.length" = 1
"info.x-apisguru-categories[0]" = "media"
"info.x-logo.url" = "https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_894535623213809664_lp7hTlgk_400x400.jpg"
"info.x-origin.length" = 1
"info.x-origin[0].format" = "swagger"
"info.x-origin[0].url" = "https://docs.synq.fm/swagger/api.json"
"info.x-origin[0].version" = "2.0"
"info.x-preferred" = true
"info.x-providerName" = "synq.fm"
"paths./video/create.post.description" = "Create a new video, optionally setting some metadata fields. You may optionally set some of the metadata associated with the video. Only fields inside the \"userdata\" field can be set."
"paths./video/create.post.operationId" = "create"
"paths./video/create.post.parameters.length" = 2
"paths./video/create.post.parameters[0].in" = "formData"
"paths./video/create.post.parameters[0].name" = "api_key"
"paths./video/create.post.parameters[0].required" = true
"paths./video/create.post.parameters[0].type" = "string"
"paths./video/create.post.parameters[1].description" = "Additional metadata that will be associated with the video"
"paths./video/create.post.parameters[1].in" = "formData"
"paths./video/create.post.parameters[1].name" = "userdata"
"paths./video/create.post.parameters[1].required" = false
"paths./video/create.post.parameters[1].type" = "string"
"paths./video/create.post.produces.length" = 1
"paths./video/create.post.produces[0]" = "application/json"
"paths./video/create.post.responses.200.$ref" = "#/responses/VideoObjectResponse"
"paths./video/create.post.responses.400.$ref" = "#/responses/ErrorResponse"
"paths./video/create.post.summary" = "Create a new video, optionally setting some metadata fields."
"paths./video/create.post.tags.length" = 1
"paths./video/create.post.tags[0]" = "video"
"paths./video/details.post.description" = "Return details about a video. You may optionally request that only some of the metadata fields are returned."
"paths./video/details.post.operationId" = "details"
"paths./video/details.post.parameters.length" = 2
"paths./video/details.post.parameters[0].in" = "formData"
"paths./video/details.post.parameters[0].name" = "api_key"
"paths./video/details.post.parameters[0].required" = true
"paths./video/details.post.parameters[0].type" = "string"
"paths./video/details.post.parameters[1].description" = "ID of the video to retrieve the metadata from"
"paths./video/details.post.parameters[1].in" = "formData"
"paths./video/details.post.parameters[1].name" = "video_id"
"paths./video/details.post.parameters[1].required" = true
"paths./video/details.post.parameters[1].type" = "string"
"paths./video/details.post.produces.length" = 1
"paths./video/details.post.produces[0]" = "application/json"
"paths./video/details.post.responses.200.$ref" = "#/responses/VideoObjectResponse"
"paths./video/details.post.responses.400.$ref" = "#/responses/ErrorResponse"
"paths./video/details.post.summary" = "Return details about a video."
"paths./video/details.post.tags.length" = 1
"paths./video/details.post.tags[0]" = "video"
"paths./video/query.post.description" = "Find videos matching any criteria, by running a JavaScript function over each video object. A detailed tutorial on how to use this functionality is available on the [documentation page](https://www.synq.fm/queries-video-api/)."
"paths./video/query.post.operationId" = "query"
"paths./video/query.post.parameters.length" = 2
"paths./video/query.post.parameters[0].in" = "formData"
"paths./video/query.post.parameters[0].name" = "api_key"
"paths./video/query.post.parameters[0].required" = true
"paths./video/query.post.parameters[0].type" = "string"
"paths./video/query.post.parameters[1].description" = "JavaScript code to be run over each video object, to determine what should be returend."
"paths./video/query.post.parameters[1].in" = "formData"
"paths./video/query.post.parameters[1].name" = "filter"
"paths./video/query.post.parameters[1].required" = true
"paths./video/query.post.parameters[1].type" = "string"
"paths./video/query.post.produces.length" = 1
"paths./video/query.post.produces[0]" = "application/json"
"paths./video/query.post.responses.200.description" = "An array of arbitrary elements, up to one element for each video object"
"paths./video/query.post.responses.200.schema.items.type" = "object"
"paths./video/query.post.responses.200.schema.type" = "array"
"paths./video/query.post.responses.400.$ref" = "#/responses/ErrorResponse"
"paths./video/query.post.summary" = "Perform a JavaScript query to return video objects matching any desired criteria."
"paths./video/query.post.tags.length" = 1
"paths./video/query.post.tags[0]" = "video"
"paths./video/stream.post.description" = "Returns a stream url that you can stream to from your broadcasting software, and a playback url people can use to watch the stream."
"paths./video/stream.post.operationId" = "stream"
"paths./video/stream.post.parameters.length" = 2
"paths./video/stream.post.parameters[0].in" = "formData"
"paths./video/stream.post.parameters[0].name" = "api_key"
"paths./video/stream.post.parameters[0].required" = true
"paths./video/stream.post.parameters[0].type" = "string"
"paths./video/stream.post.parameters[1].description" = "The ID of the video you want to stream to. The video needs to have been previously created."
"paths./video/stream.post.parameters[1].in" = "formData"
"paths./video/stream.post.parameters[1].name" = "video_id"
"paths./video/stream.post.parameters[1].required" = true
"paths./video/stream.post.parameters[1].type" = "string"
"paths./video/stream.post.produces.length" = 1
"paths./video/stream.post.produces[0]" = "text/plain"
"paths./video/stream.post.responses.200.description" = "A JSON object with urls for streaming."
"paths./video/stream.post.responses.200.schema.properties.playback_url.example" = "http://stmr1.synq.fm:8081/abr/58a6657b73039192a1000006/playlist.m3u8"
"paths./video/stream.post.responses.200.schema.properties.playback_url.type" = "string"
"paths./video/stream.post.responses.200.schema.properties.stream_url.example" = "rtmp://stmr1.synq.fm:1935/live/58a6657b73039192a1000006?publishsign=aWQ9NTc4N2I5MDI5MzRjY2RlMjcwMDAwMDA4JnNpZ249VTJCTU84bTRPS0R6OW9NanRUdkVLUT09JmlwPTg5LjE5MS4yNi41Nw=="
"paths./video/stream.post.responses.200.schema.properties.stream_url.type" = "string"
"paths./video/stream.post.responses.200.schema.required.length" = 2
"paths./video/stream.post.responses.200.schema.required[0]" = "stream_url"
"paths./video/stream.post.responses.200.schema.required[1]" = "playback_url"
"paths./video/stream.post.responses.200.schema.title" = "StreamInformationObject"
"paths./video/stream.post.responses.200.schema.type" = "object"
"paths./video/stream.post.responses.400.$ref" = "#/responses/ErrorResponse"
"paths./video/stream.post.summary" = "Returns urls for streaming."
"paths./video/stream.post.tags.length" = 1
"paths./video/stream.post.tags[0]" = "video"
"paths./video/update.post.description" = "Update a video's metadata through JavaScript code. Only fields inside the \"userdata\" object can be set."
"paths./video/update.post.operationId" = "update"
"paths./video/update.post.parameters.length" = 3
"paths./video/update.post.parameters[0].in" = "formData"
"paths./video/update.post.parameters[0].name" = "api_key"
"paths./video/update.post.parameters[0].required" = true
"paths./video/update.post.parameters[0].type" = "string"
"paths./video/update.post.parameters[1].description" = "The ID of the video whose metadata will be updated"
"paths./video/update.post.parameters[1].in" = "formData"
"paths./video/update.post.parameters[1].name" = "video_id"
"paths./video/update.post.parameters[1].required" = true
"paths./video/update.post.parameters[1].type" = "string"
"paths./video/update.post.parameters[2].description" = "JavaScript code to execute on the video object."
"paths./video/update.post.parameters[2].in" = "formData"
"paths./video/update.post.parameters[2].name" = "source"
"paths./video/update.post.parameters[2].required" = true
"paths./video/update.post.parameters[2].type" = "string"
"paths./video/update.post.produces.length" = 1
"paths./video/update.post.produces[0]" = "application/json"
"paths./video/update.post.responses.200.$ref" = "#/responses/VideoObjectResponse"
"paths./video/update.post.responses.400.$ref" = "#/responses/ErrorResponse"
"paths./video/update.post.summary" = "Update a video's metadata."
"paths./video/update.post.tags.length" = 1
"paths./video/update.post.tags[0]" = "video"
"paths./video/upload.post.description" = "Return parameters needed for uploading a video file to Amazon Simple Storage Service. See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html as well as the language-specific code-examples.\n#### *Example request*\n```shell\ncurl -s https://api.synq.fm/v1/video/upload \\\n  -F api_key=${SYNQ_API_KEY} \\\n  -F video_id=2d81c30ce62f4dfdb501dbca96c7ae56\n```\n\n#### *Example response*\n```json\n{\n  \"action\": \"https://synqfm.s3.amazonaws.com/\",\n  \"AWSAccessKeyId\": \"AKIAIP77Y7MMX3ITZMFA\",\n  \"Content-Type\": \"video/mp4\",\n  \"Policy\": \"eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\",\n  \"Signature\": \"ysqDemlKXKr6hKzVFP0hCGgf/cs=\",\n  \"acl\": \"public-read\",\n  \"key\": \"projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\"\n}\n```\n\nTo upload the file, you can then make a multipart POST request to the URL in `action`, and for all the other parameters returned, set them as form parameters.\n\nGiven the parameters above, you would upload a file `test.mp4` using cURL like this:\n\n```shell\ncurl -s https://synqfm.s3.amazonaws.com/ \\\n  -F AWSAccessKeyId=\"AKIAIP77Y7MMX3ITZMFA\" \\\n  -F Content-Type=\"video/mp4\" \\\n  -F Policy=\"eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\" \\\n  -F Signature=\"ysqDemlKXKr6hKzVFP0hCGgf/cs=\" \\\n  -F acl=\"public-read\" \\\n  -F key=\"projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\" \\\n  -F file=\"@my_video_file.mp4\"\n```\n\n"
"paths./video/upload.post.operationId" = "upload"
"paths./video/upload.post.parameters.length" = 2
"paths./video/upload.post.parameters[0].in" = "formData"
"paths./video/upload.post.parameters[0].name" = "api_key"
"paths./video/upload.post.parameters[0].required" = true
"paths./video/upload.post.parameters[0].type" = "string"
"paths./video/upload.post.parameters[1].description" = "The ID of the video you are going to upload into. The video needs to have been previously created."
"paths./video/upload.post.parameters[1].in" = "formData"
"paths./video/upload.post.parameters[1].name" = "video_id"
"paths./video/upload.post.parameters[1].required" = true
"paths./video/upload.post.parameters[1].type" = "string"
"paths./video/upload.post.produces.length" = 1
"paths./video/upload.post.produces[0]" = "application/json"
"paths./video/upload.post.responses.200.description" = "An object containing all parameters needed for uploading the file."
"paths./video/upload.post.responses.200.schema.$ref" = "#/definitions/UploadParameterObject"
"paths./video/upload.post.responses.400.$ref" = "#/responses/ErrorResponse"
"paths./video/upload.post.summary" = "Return parameters needed for uploading a video file."
"paths./video/upload.post.tags.length" = 1
"paths./video/upload.post.tags[0]" = "video"
"paths./video/uploader.post.description" = "Returns an embeddable url, that contains an uploader widget that allows you to easily upload any mp4. Great way to simplify the uploading process for end users."
"paths./video/uploader.post.operationId" = "uploader"
"paths./video/uploader.post.parameters.length" = 3
"paths./video/uploader.post.parameters[0].in" = "formData"
"paths./video/uploader.post.parameters[0].name" = "api_key"
"paths./video/uploader.post.parameters[0].required" = true
"paths./video/uploader.post.parameters[0].type" = "string"
"paths./video/uploader.post.parameters[1].description" = "The ID of the video you are going to upload into. The video needs to have been previously created."
"paths./video/uploader.post.parameters[1].in" = "formData"
"paths./video/uploader.post.parameters[1].name" = "video_id"
"paths./video/uploader.post.parameters[1].required" = true
"paths./video/uploader.post.parameters[1].type" = "string"
"paths./video/uploader.post.parameters[2].default" = "2 hours"
"paths./video/uploader.post.parameters[2].description" = "How long the uploader widget works for. Anything from '30 minutes' to '2 days'."
"paths./video/uploader.post.parameters[2].in" = "formData"
"paths./video/uploader.post.parameters[2].name" = "timeout"
"paths./video/uploader.post.parameters[2].required" = false
"paths./video/uploader.post.parameters[2].type" = "string"
"paths./video/uploader.post.produces.length" = 1
"paths./video/uploader.post.produces[0]" = "text/plain"
"paths./video/uploader.post.responses.200.description" = "A JSON object with an embeddable url to an uploader page/widget."
"paths./video/uploader.post.responses.200.schema.properties.uploader_url.example" = "https://uploader.synq.fm/uploader/5920d3dfe2dc4b36bd83df6f37ae9bc1?token=18d3bfa5aa4046df9202e6b5ac74760a"
"paths./video/uploader.post.responses.200.schema.properties.uploader_url.type" = "string"
"paths./video/uploader.post.responses.200.schema.title" = "UploaderInformationObject"
"paths./video/uploader.post.responses.200.schema.type" = "object"
"paths./video/uploader.post.responses.400.$ref" = "#/responses/ErrorResponse"
"paths./video/uploader.post.summary" = "Return embeddable url to an uploader widget"
"paths./video/uploader.post.tags.length" = 1
"paths./video/uploader.post.tags[0]" = "video"
"responses.ErrorResponse.description" = "An error occurred"
"responses.ErrorResponse.schema.$ref" = "#/definitions/ErrorObject"
"responses.VideoObjectResponse.description" = "A video object, containing all metadata members."
"responses.VideoObjectResponse.schema.$ref" = "#/definitions/VideoObject"
"schemes.length" = 1
"schemes[0]" = "https"
swagger = "2.0"

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package cambase.io;

message GetApiV1ModelsRequest {
    // Sort order
    string order = 1;
    // Page number
    int32 page = 2;
}

message PostApiV1ModelsRequest {
    // UPnP
    string model[audio_in] = 1;
    // UPnP
    string model[audio_out] = 2;
    // Default Password
    string model[default_password] = 3;
    // Default Username
    string model[default_username] = 4;
    // H264 URL
    string model[h264_url] = 5;
    // Infrared
    string model[infrared] = 6;
    // JPEG URL
    string model[jpeg_url] = 7;
    // MJPEG URL
    string model[mjpeg_url] = 8;
    // Model
    string model[model] = 9;
    // ONVIF
    string model[onvif] = 10;
    // PSIA
    string model[psia] = 11;
    // PTZ
    string model[ptz] = 12;
    // Resolution
    string model[resolution] = 13;
    // SD Card
    string model[sd_card] = 14;
    // Shape
    string model[shape] = 15;
    // UPnP
    string model[upnp] = 16;
    // Varifocal
    string model[varifocal] = 17;
    // Vendor ID
    string vendor_id = 18;
}

message GetApiV1ModelsSearchRequest {
    // Page number
    int32 page = 1;
    // Audio In
    string q[audio_in_true] = 2;
    // Audio Out
    string q[audio_out_true] = 3;
    // Infrared
    string q[infrared_true] = 4;
    // Vendor
    string q[manufacturer_name_cont] = 5;
    // Model
    string q[model_cont] = 6;
    // ONVIF
    string q[onvif_true] = 7;
    // PSIA
    string q[psia_true] = 8;
    // PTZ
    string q[ptz_true] = 9;
    // Resolution
    string q[resolution_eq] = 10;
    // SD Card
    string q[sd_card_true] = 11;
    // Shape
    string q[shape_eq] = 12;
    // UPnP
    string q[upnp_true] = 13;
    // Varifocal
    string q[varifocal_true] = 14;
}

message GetApiV1ModelsIdRequest {
    // Model ID
    int32 id = 1;
}

message PutApiV1ModelsIdRequest {
    // Model ID
    string id = 1;
    // Audio In
    string model[audio_in] = 2;
    // Audio Out
    string model[audio_out] = 3;
    // Default Password
    string model[default_password] = 4;
    // Default Username
    string model[default_username] = 5;
    // H264 URL
    string model[h264_url] = 6;
    // Infrared
    string model[infrared] = 7;
    // JPEG URL
    string model[jpeg_url] = 8;
    // MJPEG URL
    string model[mjpeg_url] = 9;
    // Model
    string model[model] = 10;
    // ONVIF
    string model[onvif] = 11;
    // PSIA
    string model[psia] = 12;
    // PTZ
    string model[ptz] = 13;
    // Resolution
    string model[resolution] = 14;
    // SD Card
    string model[sd_card] = 15;
    // Shape
    string model[shape] = 16;
    // UPnP
    string model[upnp] = 17;
    // Varifocal
    string model[varifocal] = 18;
    // Vendor ID
    string vendor_id = 19;
}

message GetApiV1RecordersRequest {
    // Sort order
    string order = 1;
    // Page number
    int32 page = 2;
}

message PostApiV1RecordersRequest {
    // Additional Information
    string recorder[additional_information] = 1;
    // Alarms
    string recorder[alarms] = 2;
    // Audio In
    string recorder[audio_in] = 3;
    // Audio Out
    string recorder[audio_out] = 4;
    // Default Password
    string recorder[default_password] = 5;
    // Default Username
    string recorder[default_username] = 6;
    // Digital I/O
    string recorder[digital_io] = 7;
    // Discontinued
    string recorder[discontinued] = 8;
    // H264 URL
    string recorder[h264_url] = 9;
    // HDMI Support
    string recorder[hdmi] = 10;
    // Hot Swap
    string recorder[hot_swap] = 11;
    // Input Channels
    string recorder[input_channels] = 12;
    // JPEG URL
    string recorder[jpeg_url] = 13;
    // MJPEG URL
    string recorder[mjpeg_url] = 14;
    // Mobile Access
    string recorder[mobile_access] = 15;
    // Model
    string recorder[model] = 16;
    // Name
    string recorder[name] = 17;
    // Official URL
    string recorder[official_url] = 18;
    // ONVIF
    string recorder[onvif] = 19;
    // Playback Channels
    string recorder[playback_channels] = 20;
    // PSIA
    string recorder[psia] = 21;
    // PTZ
    string recorder[ptz] = 22;
    // Raid Support
    string recorder[raid_support] = 23;
    // Type
    string recorder[recorder_type] = 24;
    // Resolution
    string recorder[resolution] = 25;
    // SD Card
    string recorder[sd_card] = 26;
    // SD Card (GB)
    string recorder[sdhc] = 27;
    // Internal Storage
    string recorder[storage] = 28;
    // 3rd pparty Camera Support
    string recorder[support_3rdparty] = 29;
    // UPnP
    string recorder[upnp] = 30;
    // USB Ports
    string recorder[usb] = 31;
    // Vendor ID
    string vendor_id = 32;
}

message GetApiV1RecordersSearchRequest {
    // Page number
    int32 page = 1;
    // Audio In
    string q[audio_in_true] = 2;
    // Audio Out
    string q[audio_out_true] = 3;
    // Digital I/O
    string q[digital_io_true] = 4;
    // HDMI Support
    string q[hdmi_true] = 5;
    // Hot Swap
    string q[hot_swap_true] = 6;
    // Input Channels
    string q[input_channels_eq] = 7;
    // Model
    string q[model_cont] = 8;
    // ONVIF
    string q[onvif_true] = 9;
    // Playback Channels
    string q[playback_channels_eq] = 10;
    // PSIA
    string q[psia_true] = 11;
    // PTZ
    string q[ptz_true] = 12;
    // Resolution
    string q[resolution_eq] = 13;
    // SD Card
    string q[sd_card_true] = 14;
    // SD Card (GB)
    string q[sdhc_eq] = 15;
    // 3rd pparty Camera Support
    string q[support_3rdparty_true] = 16;
    // Type
    string q[type_eq] = 17;
    // UPnP
    string q[upnp_true] = 18;
    // Vendor
    string q[vendor_name_cont] = 19;
}

message GetApiV1RecordersIdRequest {
    // Recorder ID
    int32 id = 1;
}

message PutApiV1RecordersIdRequest {
    // Recorder ID
    string id = 1;
    // Additional Information
    string recorder[additional_information] = 2;
    // Alarms
    string recorder[alarms] = 3;
    // Audio In
    string recorder[audio_in] = 4;
    // Audio Out
    string recorder[audio_out] = 5;
    // Default Password
    string recorder[default_password] = 6;
    // Default Username
    string recorder[default_username] = 7;
    // Digital I/O
    string recorder[digital_io] = 8;
    // Discontinued
    string recorder[discontinued] = 9;
    // H264 URL
    string recorder[h264_url] = 10;
    // HDMI Support
    string recorder[hdmi] = 11;
    // Hot Swap
    string recorder[hot_swap] = 12;
    // Input Channels
    string recorder[input_channels] = 13;
    // JPEG URL
    string recorder[jpeg_url] = 14;
    // MJPEG URL
    string recorder[mjpeg_url] = 15;
    // Mobile Access
    string recorder[mobile_access] = 16;
    // Model
    string recorder[model] = 17;
    // Name
    string recorder[name] = 18;
    // Official URL
    string recorder[official_url] = 19;
    // ONVIF
    string recorder[onvif] = 20;
    // Playback Channels
    string recorder[playback_channels] = 21;
    // PSIA
    string recorder[psia] = 22;
    // PTZ
    string recorder[ptz] = 23;
    // Raid Support
    string recorder[raid_support] = 24;
    // Type
    string recorder[recorder_type] = 25;
    // Resolution
    string recorder[resolution] = 26;
    // SD Card
    string recorder[sd_card] = 27;
    // SD Card (GB)
    string recorder[sdhc] = 28;
    // Internal Storage
    string recorder[storage] = 29;
    // 3rd pparty Camera Support
    string recorder[support_3rdparty] = 30;
    // UPnP
    string recorder[upnp] = 31;
    // USB Ports
    string recorder[usb] = 32;
    // Vendor ID
    string vendor_id = 33;
}

message GetApiV1VendorsRequest {
    // Sort order
    string order = 1;
    // Page number
    int32 page = 2;
}

message PostApiV1VendorsRequest {
    // Info.
    string vendor[info] = 1;
    // MAC
    string vendor[mac] = 2;
    // Name
    string vendor[name] = 3;
    // Website
    string vendor[url] = 4;
}

message GetApiV1VendorsIdRequest {
    // Vendor ID
    string id = 1;
    // Sort order
    string order = 2;
}

message PutApiV1VendorsIdRequest {
    // Vendor ID
    string id = 1;
    // Info.
    string vendor[info] = 2;
    // MAC
    string vendor[mac] = 3;
    // Name
    string vendor[name] = 4;
    // Website
    string vendor[url] = 5;
}

service Cambase.IoService {
    // Fetches all Models
    rpc GetApiV1Models(GetApiV1ModelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//api/v1/models.json"
      };
    }
    // Creates a new Model
    rpc PostApiV1Models(PostApiV1ModelsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//api/v1/models.json"
      };
    }
    // Searches all Models
    rpc GetApiV1ModelsSearch(GetApiV1ModelsSearchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//api/v1/models/search.json"
      };
    }
    // Fetches a single Model
    rpc GetApiV1ModelsId(GetApiV1ModelsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//api/v1/models/{id}.json"
      };
    }
    // Updates an existing Model
    rpc PutApiV1ModelsId(PutApiV1ModelsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//api/v1/models/{id}.json"
      };
    }
    // Fetches all Recorders
    rpc GetApiV1Recorders(GetApiV1RecordersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//api/v1/recorders.json"
      };
    }
    // Creates a new Recorder
    rpc PostApiV1Recorders(PostApiV1RecordersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//api/v1/recorders.json"
      };
    }
    // Searches all Recorders
    rpc GetApiV1RecordersSearch(GetApiV1RecordersSearchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//api/v1/recorders/search.json"
      };
    }
    // Fetches a single Recorder
    rpc GetApiV1RecordersId(GetApiV1RecordersIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//api/v1/recorders/{id}.json"
      };
    }
    // Updates an existing Recorder
    rpc PutApiV1RecordersId(PutApiV1RecordersIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//api/v1/recorders/{id}.json"
      };
    }
    // Fetches all Vendors
    rpc GetApiV1Vendors(GetApiV1VendorsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//api/v1/vendors.json"
      };
    }
    // Creates a new Vendor
    rpc PostApiV1Vendors(PostApiV1VendorsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//api/v1/vendors.json"
      };
    }
    // Fetches a single Vendor
    rpc GetApiV1VendorsId(GetApiV1VendorsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//api/v1/vendors/{id}.json"
      };
    }
    // Updates an existing Vendor
    rpc PutApiV1VendorsId(PutApiV1VendorsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//api/v1/vendors/{id}.json"
      };
    }
}

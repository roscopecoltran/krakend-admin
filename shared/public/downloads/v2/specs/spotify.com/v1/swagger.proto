syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package spotify;

message GetAlbumsRequest {
    // A comma-separated list of IDs
    string ids = 1;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 2;
}

message GetAlbumsResponse {
    repeated album albums = 1;
}

message GetAlbumsIdRequest {
    // The Spotify ID for the album
    string id = 1;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 2;
}

message GetAlbumsIdTracksRequest {
    // The Spotify ID for the album
    string id = 1;
    // The maximum number of items to return
    int32 limit = 2;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 3;
    // The index of the first item to return
    int32 offset = 4;
}

message GetArtistsRequest {
    // A comma-separated list of IDs
    string ids = 1;
}

message GetArtistsResponse {
    repeated artist artists = 1;
}

message GetArtistsIdRequest {
    // The Spotify ID for the artist
    string id = 1;
}

message GetArtistsIdAlbumsRequest {
    // Filter by album types
    string album_type = 1;
    // The Spotify ID for the artist
    string id = 2;
    // The maximum number of items to return
    int32 limit = 3;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 4;
    // The index of the first item to return
    int32 offset = 5;
}

message GetArtistsIdRelatedArtistsRequest {
    // The Spotify ID for the artist
    string id = 1;
}

message GetArtistsIdRelatedArtistsResponse {
    repeated artist artists = 1;
}

message GetArtistsIdTopTracksRequest {
    // The country (an ISO 3166-1 alpha-2 country code)
    string country = 1;
    // The Spotify ID for the artist
    string id = 2;
}

message GetArtistsIdTopTracksResponse {
    repeated track tracks = 1;
}

message GetBrowseCategoriesRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // The country (an ISO 3166-1 alpha-2 country code)
    string country = 2;
    // The maximum number of items to return
    int32 limit = 3;
    // The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
    string locale = 4;
    // The index of the first item to return
    int32 offset = 5;
}

message GetBrowseCategoriesCategory_idRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // The Spotify ID of the category you wish to fetch.
    string category_id = 2;
    // The country (an ISO 3166-1 alpha-2 country code)
    string country = 3;
    // The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
    string locale = 4;
}

message GetBrowseCategoriesCategory_idPlaylistsRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // The Spotify ID of the category you wish to fetch.
    string category_id = 2;
    // The country (an ISO 3166-1 alpha-2 country code)
    string country = 3;
    // The maximum number of items to return
    int32 limit = 4;
    // The index of the first item to return
    int32 offset = 5;
}

message GetBrowseCategoriesCategory_idPlaylistsResponse {
    playlist-simple-page playlists = 1;
}

message GetBrowseFeaturedPlaylistsRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // The country (an ISO 3166-1 alpha-2 country code)
    string country = 2;
    // The maximum number of items to return
    int32 limit = 3;
    // The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
    string locale = 4;
    // The index of the first item to return
    int32 offset = 5;
    // A timestamp in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss) with the user's local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: "2014-10-23T09:00:00" for a user whose local time is 9AM.
    string timestamp = 6;
}

message GetBrowseNewReleasesRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // The country (an ISO 3166-1 alpha-2 country code)
    string country = 2;
    // The maximum number of items to return
    int32 limit = 3;
    // The index of the first item to return
    int32 offset = 4;
}

message GetMeFollowingRequest {
    // The last artist ID retrieved from the previous request.
    string after = 1;
    // The maximum number of items to return
    int32 limit = 2;
    // The ID type, currently only artist is supported.
    enum GetMeFollowingRequest_Type {
        GETMEFOLLOWINGREQUEST_TYPE_ARTIST = 0;
    }
    GetMeFollowingRequest_Type type = 3;
}

message PutMeFollowingRequest {
    // A comma-separated list of the artists or users ids
    string ids = 1;
    // The type to follow.
    enum PutMeFollowingRequest_Type {
        PUTMEFOLLOWINGREQUEST_TYPE_ARTIST = 0;
        PUTMEFOLLOWINGREQUEST_TYPE_USER = 1;
    }
    PutMeFollowingRequest_Type type = 2;
}

message DeleteMeFollowingRequest {
    // A comma-separated list of the artists or users ids
    string ids = 1;
    // The type to unfollow.
    enum DeleteMeFollowingRequest_Type {
        DELETEMEFOLLOWINGREQUEST_TYPE_ARTIST = 0;
        DELETEMEFOLLOWINGREQUEST_TYPE_USER = 1;
    }
    DeleteMeFollowingRequest_Type type = 2;
}

message GetMeFollowingContainsRequest {
    // A comma-separated string of the artists or users ids.
    string ids = 1;
    // The type to follow.
    enum GetMeFollowingContainsRequest_Type {
        GETMEFOLLOWINGCONTAINSREQUEST_TYPE_ARTIST = 0;
        GETMEFOLLOWINGCONTAINSREQUEST_TYPE_USER = 1;
    }
    GetMeFollowingContainsRequest_Type type = 2;
}

message GetMeFollowingContainsResponse {
    repeated bool items = 1;
}

message GetMeTracksRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // The maximum number of items to return
    int32 limit = 2;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 3;
    // The index of the first item to return
    int32 offset = 4;
}

message PutMeTracksRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // A comma-separated list of IDs
    string ids = 2;
}

message DeleteMeTracksRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // A comma-separated list of IDs
    string ids = 2;
}

message GetMeTracksContainsRequest {
    // A comma-separated list of IDs
    string ids = 1;
}

message GetMeTracksContainsResponse {
    repeated bool items = 1;
}

message GetSearchRequest {
    // The maximum number of items to return
    int32 limit = 1;
    // The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.
    string market = 2;
    // The index of the first item to return
    int32 offset = 3;
    // The search query's keywords (and optional field filters). The search is not case-sensitive: 'roadhouse' will match 'Roadhouse', 'roadHouse', etc. Keywords will be matched in any order unless surrounded by quotes, thus q=roadhouse&20blues will match both 'Blues Roadhouse' and 'Roadhouse of the Blues'. Quotation marks can be used to limit the match to a phrase: q=roadhouse&20blues will match 'My Roadhouse Blues' but not 'Roadhouse of the Blues'. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q=album:gold%20artist:abba&type=album will search for albums with the text 'gold' in the album name and the text 'abba' in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q=damian%20genre:reggae-pop&type=artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist's name and/or description.
    string q = 4;
    // A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q=name:abacab&type=album,track will return both albums and tracks with "abacab" in their name.
    string type = 5;
}

message GetTracksRequest {
    // A comma-separated list of IDs
    string ids = 1;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 2;
}

message GetTracksResponse {
    repeated track tracks = 1;
}

message GetTracksIdRequest {
    string id = 1;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 2;
}

message GetUsersUser_idRequest {
    // The user's Spotify user ID.
    string user_id = 1;
}

message GetUsersUser_idPlaylistsRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // The maximum number of items to return
    int32 limit = 2;
    // The index of the first item to return
    int32 offset = 3;
    // The user's Spotify user ID.
    string user_id = 4;
}

message PostUsersUser_idPlaylistsRequest {
    // It is used to set specified media type.
    string Accept = 1;
    message Body {
        string name = 1;
        bool public = 2;
    }
    Body body = 2;
    // The user's Spotify user ID.
    string user_id = 3;
}

message GetUsersUser_idPlaylistsPlaylist_idRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // A comma-separated list of fields to filter query
    string fields = 2;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 3;
    // The Spotify playlist ID.
    string playlist_id = 4;
    // The user's Spotify user ID.
    string user_id = 5;
}

message PutUsersUser_idPlaylistsPlaylist_idRequest {
    // It is used to set specified media type.
    string Accept = 1;
    message Body {
        string name = 1;
        bool public = 2;
    }
    Body body = 2;
    // The Spotify playlist ID.
    string playlist_id = 3;
    // The user's Spotify user ID.
    string user_id = 4;
}

message PutUsersUser_idPlaylistsPlaylist_idFollowersRequest {
    message Body {
        bool public = 1;
    }
    Body body = 1;
    // The Spotify playlist ID.
    string playlist_id = 2;
    // The user's Spotify user ID.
    string user_id = 3;
}

message DeleteUsersUser_idPlaylistsPlaylist_idFollowersRequest {
    // The Spotify playlist ID.
    string playlist_id = 1;
    // The user's Spotify user ID.
    string user_id = 2;
}

message GetUsersUser_idPlaylistsPlaylist_idFollowersContainsRequest {
    // A comma-separated list of users ids
    string ids = 1;
    // The Spotify playlist ID.
    string playlist_id = 2;
    // The user's Spotify user ID.
    string user_id = 3;
}

message GetUsersUser_idPlaylistsPlaylist_idFollowersContainsResponse {
    repeated bool items = 1;
}

message GetUsersUser_idPlaylistsPlaylist_idTracksRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // A comma-separated list of fields to filter query
    string fields = 2;
    // The maximum number of items to return
    int32 limit = 3;
    // The market (an ISO 3166-1 alpha-2 country code)
    string market = 4;
    // The index of the first item to return
    int32 offset = 5;
    // The Spotify playlist ID.
    string playlist_id = 6;
    // The user's Spotify user ID.
    string user_id = 7;
}

message PutUsersUser_idPlaylistsPlaylist_idTracksRequest {
    // It is used to set specified media type.
    string Accept = 1;
    message Body {
        message Uri {
        }
        repeated Uri uris = 1;
    }
    Body body = 2;
    // The Spotify playlist ID.
    string playlist_id = 3;
    // The user's Spotify user ID.
    string user_id = 4;
}

message PostUsersUser_idPlaylistsPlaylist_idTracksRequest {
    // It is used to set specified media type.
    string Accept = 1;
    // The Spotify playlist ID.
    string playlist_id = 2;
    // The position to insert the tracks, a zero-based index
    int32 position = 3;
    // A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.
    string uris = 4;
    // The user's Spotify user ID.
    string user_id = 5;
}

message DeleteUsersUser_idPlaylistsPlaylist_idTracksRequest {
    // It is used to set specified media type.
    string Accept = 1;
    message Body {
        message Track {
        }
        repeated Track tracks = 1;
    }
    Body body = 2;
    // The Spotify playlist ID.
    string playlist_id = 3;
    // The user's Spotify user ID.
    string user_id = 4;
}

message Album {
    // The type of the album: one of 'album', 'single', or 'compilation'.
    string album_type = 1;
    // The artists of the album. Each artist object includes a link in href to more detailed information about the artist.
    repeated artist artists = 2;
    // The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
    repeated string available_markets = 3;
    // The copyright statements of the album.
    message Copyright {
            // The copyright text for this album.
    string text = 1;
            // The type of copyright: C = the copyright, P = the sound recording (performance) copyright.
    string type = 2;
    }
    repeated Copyright copyrights = 4;
    // Known external IDs for this album.
    map<string, string> external_ids = 5;
    // Known external URLs for this album.
    map<string, string> external_urls = 6;
    // A list of the genres used to classify the album. For example: 'Prog Rock', 'Post-Grunge'. (If not yet classified, the array is empty.)
    repeated string genres = 7;
    // A link to the Web API endpoint providing full details of the album.
    string href = 8;
    // The Spotify ID for the album.
    string id = 9;
    // The cover art for the album in various sizes, widest first.
    repeated image images = 10;
    // The name of the album.
    string name = 11;
    // The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album's individual tracks.
    int32 popularity = 12;
    // The date the album was first released, for example '1981-12-15'. Depending on the precision, it might be shown as '1981' or '1981-12'.
    string release_date = 13;
    // The precision with which release_date value is known: 'year', 'month', or 'day'.
    string release_date_precision = 14;
    track-simple-page tracks = 15;
    // The object type: 'album'.
    string type = 16;
    // The Spotify URI for the album.
    string uri = 17;
}

message Album_simple {
    // The type of the album: one of 'album', 'single', or 'compilation'.
    string album_type = 1;
    // The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
    repeated string available_markets = 2;
    // Known external URLs for this album.
    map<string, string> external_urls = 3;
    // A link to the Web API endpoint providing full details of the album.
    string href = 4;
    // The Spotify ID for the album.
    string id = 5;
    // The cover art for the album in various sizes, widest first.
    repeated image images = 6;
    // The name of the album.
    string name = 7;
    // The object type: 'album'.
    string type = 8;
    // The Spotify URI for the album.
    string uri = 9;
}

message Album_simple_page {
    // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
    // The requested data.
    repeated album-simple items = 2;
    // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
    // URL to the next page of items. (null if none)
    string next = 4;
    // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
    // URL to the previous page of items. (null if none)
    string previous = 6;
    // The total number of items available to return.
    int32 total = 7;
}

message Album_track_page {
    // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
    // The requested data.
    repeated track-simple items = 2;
    // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
    // URL to the next page of items. (null if none)
    string next = 4;
    // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
    // URL to the previous page of items. (null if none)
    string previous = 6;
    // The total number of items available to return.
    int32 total = 7;
}

message Artist {
    // Known external URLs for this artist.
    map<string, string> external_urls = 1;
    followers followers = 2;
    // A list of the genres the artist is associated with. For example: 'Prog Rock', 'Post-Grunge'. (If not yet classified, the array is empty.)
    repeated string genres = 3;
    // A link to the Web API endpoint providing full details of the artist.
    string href = 4;
    // The Spotify ID for the artist.
    string id = 5;
    // Images of the artist in various sizes, widest first.
    repeated image images = 6;
    // The name of the artist.
    string name = 7;
    // The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
    int32 popularity = 8;
    // The object type: 'artist'
    string type = 9;
    // The Spotify URI for the artist.
    string uri = 10;
}

message Artist_simple {
    // Known external URLs for this artist.
    map<string, string> external_urls = 1;
    // A link to the Web API endpoint providing full details of the artist.
    string href = 2;
    // The Spotify ID for the artist.
    string id = 3;
    // The name of the artist.
    string name = 4;
    // The object type: 'artist'
    string type = 5;
    // The Spotify URI for the artist.
    string uri = 6;
}

message Category {
    // A link to the Web API endpoint returning full details of the category.
    string href = 1;
    repeated image icons = 2;
    // The Spotify category ID of the category.
    string id = 3;
    // The name of the category.
    string name = 4;
}

message Category_page {
    // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
    // The requested data.
    repeated category items = 2;
    // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
    // URL to the next page of items. (null if none)
    string next = 4;
    // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
    // URL to the previous page of items. (null if none)
    string previous = 6;
    // The total number of items available to return.
    int32 total = 7;
}

message Current_user_profile {
    // The user's date-of-birth. This field is only available when the current user has granted access to the user-read-birthdate scope.
    string birthdate = 1;
    // The country of the user, as set in the user's account profile. An ISO 3166-1 alpha-2 country code. This field is only available when the current user has granted access to the user-read-private scope.
    string country = 2;
    // The name displayed on the user's profile.
    string displayName = 3;
    // The user's email address, as entered by the user when creating their account. This email address is unverified; there is no proof that it actually belongs to the user. This field is only available when the current user has granted access to the user-read-email scope.
    string email = 4;
    // Known external URLs for this user.
    map<string, string> external_urls = 5;
    followers followers = 6;
    // A link to the Web API endpoint for this user.
    string href = 7;
    // The Spotify ID for this user.
    string id = 8;
    // The user's Spotify subscription level: 'premium', 'free', etc. (The subscription level 'open' can be considered the same as 'free'.) This field is only available when the current user has granted access to the user-read-private scope.
    string product = 9;
    // The object type: 'user'
    string type = 10;
    // The Spotify URI for the user.
    string uri = 11;
}

message Featured_playlists {
    // A sentence describing the context for the featured playlists.
    string message = 1;
    playlist-simple-page playlists = 2;
}

message Followers {
    // A link to the Web API endpoint providing full details of the followers; null if not available.
    string href = 1;
    // The total number of followers.
    int32 total = 2;
}

message Image {
    // The image height in pixels. If unknown: null or not returned.
    int32 height = 1;
    // The source URL of the image.
    string url = 2;
    // The image width in pixels. If unknown: null or not returned.
    int32 width = 3;
}

message Playlist {
    // True if the owner allows other users to modify the playlist.
    bool collaborative = 1;
    // The playlist description. Only returned for modified, verified playlists, otherwise null.
    string description = 2;
    // Known external URLs for this album.
    map<string, string> external_urls = 3;
    // Information about the followers of the playlist.
    message Followers {
            // A link to the Web API endpoint providing full details of the followers; null if not available.
    string href = 1;
            // The total number of followers.
    int32 total = 2;
    }
    Followers followers = 4;
    // A link to the Web API endpoint providing full details of the playlist.
    string href = 5;
    // The Spotify ID of the playlist.
    string id = 6;
    // The cover art for the album in various sizes, widest first.
    repeated image images = 7;
    // The name of the playlist.
    string name = 8;
    user-profile owner = 9;
    // The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.
    bool public = 10;
    // The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    string snapshot_id = 11;
    playlist-track-page tracks = 12;
    // The object type: 'playlist'.
    string type = 13;
    // Spotify URI of the playlist.
    string uri = 14;
}

message Playlist_simple {
    // True if the owner allows other users to modify the playlist.
    bool collaborative = 1;
    // Known external URLs for this album.
    map<string, string> external_urls = 2;
    // A link to the Web API endpoint providing full details of the playlist.
    string href = 3;
    // The Spotify ID of the playlist.
    string id = 4;
    // The cover art for the album in various sizes, widest first.
    repeated image images = 5;
    // The name of the playlist.
    string name = 6;
    user-profile owner = 7;
    // The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.
    bool public = 8;
    // The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    string snapshot_id = 9;
    message Tracks {
            // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
            // The total number of tracks available to return.
    int32 total = 2;
    }
    Tracks tracks = 10;
    // The object type: 'playlist'.
    string type = 11;
    // Spotify URI of the playlist.
    string uri = 12;
}

message Playlist_simple_page {
    // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
    // The requested data.
    repeated playlist-simple items = 2;
    // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
    // URL to the next page of items. (null if none)
    string next = 4;
    // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
    // URL to the previous page of items. (null if none)
    string previous = 6;
    // The total number of items available to return.
    int32 total = 7;
}

message Playlist_snapshot {
    // The version identifier for the modified playlist. Can be supplied in other requests to target a specific playlist version.
    string snapshot_id = 1;
}

message Playlist_track {
    // The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.
    string added_at = 1;
    user-profile added_by = 2;
    // Whether this track is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.
    bool is_local = 3;
    track track = 4;
}

message Playlist_track_page {
    // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
    // The requested data.
    repeated playlist-track items = 2;
    // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
    // URL to the next page of items. (null if none)
    string next = 4;
    // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
    // URL to the previous page of items. (null if none)
    string previous = 6;
    // The total number of items available to return.
    int32 total = 7;
}

message Saved_track {
    // The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.
    string added_at = 1;
    track track = 2;
}

message Saved_track_page {
    // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
    // The requested data.
    repeated saved-track items = 2;
    // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
    // URL to the next page of items. (null if none)
    string next = 4;
    // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
    // URL to the previous page of items. (null if none)
    string previous = 6;
    // The total number of items available to return.
    int32 total = 7;
}

message Search {
    // Present if the type of search includes 'album'.
    message Albums {
            // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
            // The requested data.
    repeated album-simple items = 2;
            // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
            // URL to the next page of items. (null if none)
    string next = 4;
            // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
            // URL to the previous page of items. (null if none)
    string previous = 6;
            // The total number of items available to return.
    int32 total = 7;
    }
    Albums albums = 1;
    // Present if the type of search includes 'artist'.
    message Artists {
            // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
            // The requested data.
    repeated artist items = 2;
            // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
            // URL to the next page of items. (null if none)
    string next = 4;
            // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
            // URL to the previous page of items. (null if none)
    string previous = 6;
            // The total number of items available to return.
    int32 total = 7;
    }
    Artists artists = 2;
    // Present if the type of search includes 'track'.
    message Tracks {
            // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
            // The requested data.
    repeated track items = 2;
            // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
            // URL to the next page of items. (null if none)
    string next = 4;
            // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
            // URL to the previous page of items. (null if none)
    string previous = 6;
            // The total number of items available to return.
    int32 total = 7;
    }
    Tracks tracks = 3;
}

message Track {
    album-simple album = 1;
    // The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
    repeated artist-simple artists = 2;
    // A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.
    repeated string available_markets = 3;
    // The disc number (usually 1 unless the album consists of more than one disc).
    int32 disc_number = 4;
    // The track length in milliseconds.
    int32 duration_ms = 5;
    // Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).
    bool explicit = 6;
    // Known external IDs for the track.
    map<string, string> external_ids = 7;
    // Known external URLs for this track.
    map<string, string> external_urls = 8;
    // A link to the Web API endpoint providing full details of the track.
    string href = 9;
    // The Spotify ID for the track.
    string id = 10;
    // Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.
    bool is_playable = 11;
    // Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track.
    message Linked_from {
            // Known external URLs for this track.
    map<string, string> external_urls = 1;
            // A link to the Web API endpoint providing full details of the track.
    string href = 2;
            // The Spotify ID for the track.
    string id = 3;
            // The object type: 'track'.
    string type = 4;
            // The Spotify URI for the track.
    string uri = 5;
    }
    Linked_from linked_from = 12;
    // The name of the track.
    string name = 13;
    // A URL to a 30 second preview (MP3 format) of the track.
    string preview_url = 14;
    // The number of the track. If an album has several discs, the track number is the number on the specified disc.
    int32 track_number = 15;
    // The object type: 'track'.
    string type = 16;
    // The Spotify URI for the track.
    string uri = 17;
}

message Track_simple {
    // The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
    repeated artist-simple artists = 1;
    // A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.
    repeated string available_markets = 2;
    // The disc number (usually 1 unless the album consists of more than one disc).
    int32 disc_number = 3;
    // The track length in milliseconds.
    int32 duration_ms = 4;
    // Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).
    bool explicit = 5;
    // Known external URLs for this track.
    map<string, string> external_urls = 6;
    // A link to the Web API endpoint providing full details of the track.
    string href = 7;
    // The Spotify ID for the track.
    string id = 8;
    // Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.
    bool is_playable = 9;
    // Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track.
    message Linked_from {
            // Known external URLs for this track.
    map<string, string> external_urls = 1;
            // A link to the Web API endpoint providing full details of the track.
    string href = 2;
            // The Spotify ID for the track.
    string id = 3;
            // The object type: 'track'.
    string type = 4;
            // The Spotify URI for the track.
    string uri = 5;
    }
    Linked_from linked_from = 10;
    // The name of the track.
    string name = 11;
    // A URL to a 30 second preview (MP3 format) of the track.
    string preview_url = 12;
    // The number of the track. If an album has several discs, the track number is the number on the specified disc.
    int32 track_number = 13;
    // The object type: 'track'.
    string type = 14;
    // The Spotify URI for the track.
    string uri = 15;
}

message Track_simple_page {
    // A link to the Web API endpoint returning the full result of the request.
    string href = 1;
    // The requested data.
    repeated track-simple items = 2;
    // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 3;
    // URL to the next page of items. (null if none)
    string next = 4;
    // The offset of the items returned (as set in the query or by default).
    int32 offset = 5;
    // URL to the previous page of items. (null if none)
    string previous = 6;
    // The total number of items available to return.
    int32 total = 7;
}

message User_followed {
    // Present if the type of followe items is 'artist'.
    message Artists {
            // The cursors used to find the next set of items.
    message Cursor {
                    // The cursor to use as key to find the next page of items.
    string after = 1;
        }
        Cursor cursor = 1;
            // A link to the Web API endpoint returning the full result of the request.
    string href = 2;
            // The requested data.
    repeated artist items = 3;
            // The maximum number of items in the response (as set in the query or by default).
    int32 limit = 4;
            // URL to the next page of items. (null if none)
    string next = 5;
            // The total number of items available to return.
    int32 total = 6;
    }
    Artists artists = 1;
}

message User_profile {
    // The name displayed on the user's profile.
    string displayName = 1;
    // Known external URLs for this user.
    map<string, string> external_urls = 2;
    followers followers = 3;
    // A link to the Web API endpoint for this user.
    string href = 4;
    // The Spotify ID for this user.
    string id = 5;
    // The object type: 'user'
    string type = 6;
    // The Spotify URI for the user.
    string uri = 7;
}

service SpotifyService {
    // [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/)
    rpc GetAlbums(GetAlbumsRequest) returns (GetAlbumsResponse) {
      option (google.api.http) = {
        get: "/v1/albums"
      };
    }
    // [Get an Album](https://developer.spotify.com/web-api/get-album/)
    rpc GetAlbumsId(GetAlbumsIdRequest) returns (Album) {
      option (google.api.http) = {
        get: "/v1/albums/{id}"
      };
    }
    // [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/)
    rpc GetAlbumsIdTracks(GetAlbumsIdTracksRequest) returns (Track-Simple-Page) {
      option (google.api.http) = {
        get: "/v1/albums/{id}/tracks"
      };
    }
    // [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/)
    rpc GetArtists(GetArtistsRequest) returns (GetArtistsResponse) {
      option (google.api.http) = {
        get: "/v1/artists"
      };
    }
    // [Get an Artist](https://developer.spotify.com/web-api/get-artist/)
    rpc GetArtistsId(GetArtistsIdRequest) returns (Artist) {
      option (google.api.http) = {
        get: "/v1/artists/{id}"
      };
    }
    // [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/)
    rpc GetArtistsIdAlbums(GetArtistsIdAlbumsRequest) returns (Album-Simple-Page) {
      option (google.api.http) = {
        get: "/v1/artists/{id}/albums"
      };
    }
    // [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/)
    rpc GetArtistsIdRelatedArtists(GetArtistsIdRelatedArtistsRequest) returns (GetArtistsIdRelatedArtistsResponse) {
      option (google.api.http) = {
        get: "/v1/artists/{id}/related-artists"
      };
    }
    // [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/)
    rpc GetArtistsIdTopTracks(GetArtistsIdTopTracksRequest) returns (GetArtistsIdTopTracksResponse) {
      option (google.api.http) = {
        get: "/v1/artists/{id}/top-tracks"
      };
    }
    // [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/)
    rpc GetBrowseCategories(GetBrowseCategoriesRequest) returns (Category-Page) {
      option (google.api.http) = {
        get: "/v1/browse/categories"
      };
    }
    // [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/)
    rpc GetBrowseCategoriesCategory_id(GetBrowseCategoriesCategory_idRequest) returns (Category) {
      option (google.api.http) = {
        get: "/v1/browse/categories/{category_id}"
      };
    }
    // [Get a Category's playlists](https://developer.spotify.com/web-api/get-categorys-playlists/)
    rpc GetBrowseCategoriesCategory_idPlaylists(GetBrowseCategoriesCategory_idPlaylistsRequest) returns (GetBrowseCategoriesCategory_idPlaylistsResponse) {
      option (google.api.http) = {
        get: "/v1/browse/categories/{category_id}/playlists"
      };
    }
    // [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/)
    rpc GetBrowseFeaturedPlaylists(GetBrowseFeaturedPlaylistsRequest) returns (Featured-Playlists) {
      option (google.api.http) = {
        get: "/v1/browse/featured-playlists"
      };
    }
    // [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/)
    rpc GetBrowseNewReleases(GetBrowseNewReleasesRequest) returns (Album-Simple-Page) {
      option (google.api.http) = {
        get: "/v1/browse/new-releases"
      };
    }
    // [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/)
    rpc GetMe(google.protobuf.Empty) returns (Current-User-Profile) {
      option (google.api.http) = {
        get: "/v1/me"
      };
    }
    // [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/)
    rpc GetMeFollowing(GetMeFollowingRequest) returns (User-Followed) {
      option (google.api.http) = {
        get: "/v1/me/following"
      };
    }
    // [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/)
    rpc PutMeFollowing(PutMeFollowingRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v1/me/following"
      };
    }
    // [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/)
    rpc DeleteMeFollowing(DeleteMeFollowingRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/me/following"
      };
    }
    // [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/)
    rpc GetMeFollowingContains(GetMeFollowingContainsRequest) returns (GetMeFollowingContainsResponse) {
      option (google.api.http) = {
        get: "/v1/me/following/contains"
      };
    }
    // [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/)
    rpc GetMeTracks(GetMeTracksRequest) returns (Saved-Track-Page) {
      option (google.api.http) = {
        get: "/v1/me/tracks"
      };
    }
    // [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/)
    rpc PutMeTracks(PutMeTracksRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v1/me/tracks"
      };
    }
    // [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/)
    rpc DeleteMeTracks(DeleteMeTracksRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/me/tracks"
      };
    }
    // [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/)
    rpc GetMeTracksContains(GetMeTracksContainsRequest) returns (GetMeTracksContainsResponse) {
      option (google.api.http) = {
        get: "/v1/me/tracks/contains"
      };
    }
    // [Search for an Item](https://developer.spotify.com/web-api/search-item/)
    rpc GetSearch(GetSearchRequest) returns (Search) {
      option (google.api.http) = {
        get: "/v1/search"
      };
    }
    // [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/)
    rpc GetTracks(GetTracksRequest) returns (GetTracksResponse) {
      option (google.api.http) = {
        get: "/v1/tracks"
      };
    }
    // [Get a Track](https://developer.spotify.com/web-api/get-track/)
    rpc GetTracksId(GetTracksIdRequest) returns (Track) {
      option (google.api.http) = {
        get: "/v1/tracks/{id}"
      };
    }
    // [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/)
    rpc GetUsersUser_id(GetUsersUser_idRequest) returns (User-Profile) {
      option (google.api.http) = {
        get: "/v1/users/{user_id}"
      };
    }
    // [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/)
    rpc GetUsersUser_idPlaylists(GetUsersUser_idPlaylistsRequest) returns (Playlist-Simple-Page) {
      option (google.api.http) = {
        get: "/v1/users/{user_id}/playlists"
      };
    }
    // [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/)
    rpc PostUsersUser_idPlaylists(PostUsersUser_idPlaylistsRequest) returns (Playlist) {
      option (google.api.http) = {
        post: "/v1/users/{user_id}/playlists"
        body: "body"
      };
    }
    // [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/)
    rpc GetUsersUser_idPlaylistsPlaylist_id(GetUsersUser_idPlaylistsPlaylist_idRequest) returns (Playlist) {
      option (google.api.http) = {
        get: "/v1/users/{user_id}/playlists/{playlist_id}"
      };
    }
    // [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/)
    rpc PutUsersUser_idPlaylistsPlaylist_id(PutUsersUser_idPlaylistsPlaylist_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v1/users/{user_id}/playlists/{playlist_id}"
        body: "body"
      };
    }
    // [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/)
    rpc PutUsersUser_idPlaylistsPlaylist_idFollowers(PutUsersUser_idPlaylistsPlaylist_idFollowersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v1/users/{user_id}/playlists/{playlist_id}/followers"
        body: "body"
      };
    }
    // [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/)
    rpc DeleteUsersUser_idPlaylistsPlaylist_idFollowers(DeleteUsersUser_idPlaylistsPlaylist_idFollowersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/users/{user_id}/playlists/{playlist_id}/followers"
      };
    }
    // [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/)
    rpc GetUsersUser_idPlaylistsPlaylist_idFollowersContains(GetUsersUser_idPlaylistsPlaylist_idFollowersContainsRequest) returns (GetUsersUser_idPlaylistsPlaylist_idFollowersContainsResponse) {
      option (google.api.http) = {
        get: "/v1/users/{user_id}/playlists/{playlist_id}/followers/contains"
      };
    }
    // [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/)
    rpc GetUsersUser_idPlaylistsPlaylist_idTracks(GetUsersUser_idPlaylistsPlaylist_idTracksRequest) returns (Playlist-Track-Page) {
      option (google.api.http) = {
        get: "/v1/users/{user_id}/playlists/{playlist_id}/tracks"
      };
    }
    // [Reorder or replace a Playlist's Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/)
    rpc PutUsersUser_idPlaylistsPlaylist_idTracks(PutUsersUser_idPlaylistsPlaylist_idTracksRequest) returns (Playlist-Snapshot) {
      option (google.api.http) = {
        put: "/v1/users/{user_id}/playlists/{playlist_id}/tracks"
        body: "body"
      };
    }
    // [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/)
    rpc PostUsersUser_idPlaylistsPlaylist_idTracks(PostUsersUser_idPlaylistsPlaylist_idTracksRequest) returns (Playlist-Snapshot) {
      option (google.api.http) = {
        post: "/v1/users/{user_id}/playlists/{playlist_id}/tracks"
      };
    }
    // [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/)
    rpc DeleteUsersUser_idPlaylistsPlaylist_idTracks(DeleteUsersUser_idPlaylistsPlaylist_idTracksRequest) returns (Playlist-Snapshot) {
      option (google.api.http) = {
        delete: "/v1/users/{user_id}/playlists/{playlist_id}/tracks"
        body: "body"
      };
    }
}

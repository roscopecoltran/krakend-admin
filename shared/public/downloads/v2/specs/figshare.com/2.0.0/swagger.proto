syntax = "proto3";

import "google/protobuf/wrappers.proto";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package figshare;

message GetAccountArticlesRequest {
    // Number of results included on a page. Used for pagination with query
    int64 limit = 1;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 2;
    // Page number. Used for pagination with page_size
    int64 page = 3;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 4;
}

message GetAccountArticlesResponse {
    repeated Article items = 1;
}

message PostAccountArticlesRequest {
    // Article description
    ArticleCreate Article = 1;
}

message PostAccountArticlesSearchRequest {
    // Search Parameters
    PrivateArticleSearch search = 1;
}

message PostAccountArticlesSearchResponse {
    repeated Article items = 1;
}

message GetAccountArticlesArticle_idRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message PutAccountArticlesArticle_idRequest {
    // Article description
    ArticleUpdate Article = 1;
    // Article unique identifier
    int64 article_id = 2;
}

message DeleteAccountArticlesArticle_idRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message GetAccountArticlesArticle_idAuthorsRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message GetAccountArticlesArticle_idAuthorsResponse {
    repeated Author items = 1;
}

message PutAccountArticlesArticle_idAuthorsRequest {
    // Authors description
    AuthorsCreator Authors = 1;
    // Article unique identifier
    int64 article_id = 2;
}

message PostAccountArticlesArticle_idAuthorsRequest {
    // Authors description
    AuthorsCreator Authors = 1;
    // Article unique identifier
    int64 article_id = 2;
}

message DeleteAccountArticlesArticle_idAuthorsAuthor_idRequest {
    // Article unique identifier
    int64 article_id = 1;
    // Article Author unique identifier
    int64 author_id = 2;
}

message GetAccountArticlesArticle_idCategoriesRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message GetAccountArticlesArticle_idCategoriesResponse {
    repeated Category items = 1;
}

message PutAccountArticlesArticle_idCategoriesRequest {
    // Article unique identifier
    int64 article_id = 1;
    CategoriesCreator categories = 2;
}

message PostAccountArticlesArticle_idCategoriesRequest {
    // Article unique identifier
    int64 article_id = 1;
    CategoriesCreator categories = 2;
}

message DeleteAccountArticlesArticle_idCategoriesCategory_idRequest {
    // Article unique identifier
    int64 article_id = 1;
    // Category unique identifier
    int64 category_id = 2;
}

message GetAccountArticlesArticle_idConfidentialityRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message PutAccountArticlesArticle_idConfidentialityRequest {
    // Article unique identifier
    int64 article_id = 1;
    ConfidentialityCreator reason = 2;
}

message DeleteAccountArticlesArticle_idConfidentialityRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message GetAccountArticlesArticle_idEmbargoRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message PutAccountArticlesArticle_idEmbargoRequest {
    // Embargo description
    ArticleEmbargoUpdater Embargo = 1;
    // Article unique identifier
    int64 article_id = 2;
}

message DeleteAccountArticlesArticle_idEmbargoRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message GetAccountArticlesArticle_idFilesRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message GetAccountArticlesArticle_idFilesResponse {
    repeated PrivateFile items = 1;
}

message PostAccountArticlesArticle_idFilesRequest {
    FileCreator File = 1;
    // Article unique identifier
    int64 article_id = 2;
}

message GetAccountArticlesArticle_idFilesFile_idRequest {
    // Article unique identifier
    int64 article_id = 1;
    // File unique identifier
    int64 file_id = 2;
}

message PostAccountArticlesArticle_idFilesFile_idRequest {
    // Article unique identifier
    int64 article_id = 1;
    // File unique identifier
    int64 file_id = 2;
}

message DeleteAccountArticlesArticle_idFilesFile_idRequest {
    // Article unique identifier
    int64 article_id = 1;
    // File unique identifier
    int64 file_id = 2;
}

message GetAccountArticlesArticle_idPrivate_linksRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message GetAccountArticlesArticle_idPrivate_linksResponse {
    repeated PrivateLink items = 1;
}

message PostAccountArticlesArticle_idPrivate_linksRequest {
    // Article unique identifier
    int64 article_id = 1;
    PrivateLinkCreator private_link = 2;
}

message PutAccountArticlesArticle_idPrivate_linksLink_idRequest {
    // Article unique identifier
    int64 article_id = 1;
    // Private link token
    string link_id = 2;
    PrivateLinkCreator private_link = 3;
}

message DeleteAccountArticlesArticle_idPrivate_linksLink_idRequest {
    // Article unique identifier
    int64 article_id = 1;
    // Private link token
    string link_id = 2;
}

message PostAccountArticlesArticle_idPublishRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message PostAccountArticlesArticle_idReserve_doiRequest {
    // Article unique identifier
    int64 article_id = 1;
}

message PostAccountAuthorsSearchRequest {
    // Search Parameters
    PrivateAuthorsSearch search = 1;
}

message PostAccountAuthorsSearchResponse {
    repeated Author items = 1;
}

message GetAccountAuthorsAuthor_idRequest {
    // Author unique identifier
    int64 author_id = 1;
}

message GetAccountCategoriesResponse {
    repeated Category items = 1;
}

message GetAccountCollectionsRequest {
    // Number of results included on a page. Used for pagination with query
    int64 limit = 1;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 2;
    // The field by which to order. Default varies by endpoint/resource.
    enum GetAccountCollectionsRequest_Order {
        GETACCOUNTCOLLECTIONSREQUEST_ORDER_PUBLISHED_DATE = 0;
        GETACCOUNTCOLLECTIONSREQUEST_ORDER_MODIFIED_DATE = 1;
        GETACCOUNTCOLLECTIONSREQUEST_ORDER_VIEWS = 2;
        GETACCOUNTCOLLECTIONSREQUEST_ORDER_SHARES = 3;
        GETACCOUNTCOLLECTIONSREQUEST_ORDER_DOWNLOADS = 4;
        GETACCOUNTCOLLECTIONSREQUEST_ORDER_CITES = 5;
    }
    GetAccountCollectionsRequest_Order order = 3;
    enum GetAccountCollectionsRequest_Order_direction {
        GETACCOUNTCOLLECTIONSREQUEST_ORDER_DIRECTION_ASC = 0;
        GETACCOUNTCOLLECTIONSREQUEST_ORDER_DIRECTION_DESC = 1;
    }
    GetAccountCollectionsRequest_Order_direction order_direction = 4;
    // Page number. Used for pagination with page_size
    int64 page = 5;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 6;
}

message GetAccountCollectionsResponse {
    repeated Collection items = 1;
}

message PostAccountCollectionsRequest {
    // Collection description
    CollectionCreate Collection = 1;
}

message PostAccountCollectionsSearchRequest {
    // Search Parameters
    PrivateCollectionSearch search = 1;
}

message PostAccountCollectionsSearchResponse {
    repeated Collection items = 1;
}

message GetAccountCollectionsCollection_idRequest {
    // Collection Unique identifier
    int64 collection_id = 1;
}

message PutAccountCollectionsCollection_idRequest {
    // Collection description
    CollectionUpdate Collection = 1;
    // Collection Unique identifier
    int64 collection_id = 2;
}

message DeleteAccountCollectionsCollection_idRequest {
    // Collection Unique identifier
    int64 collection_id = 1;
}

message GetAccountCollectionsCollection_idArticlesRequest {
    // Collection unique identifier
    int64 collection_id = 1;
}

message GetAccountCollectionsCollection_idArticlesResponse {
    repeated Article items = 1;
}

message PutAccountCollectionsCollection_idArticlesRequest {
    // Articles List
    ArticlesCreator articles = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message PostAccountCollectionsCollection_idArticlesRequest {
    // Articles list
    ArticlesCreator articles = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message DeleteAccountCollectionsCollection_idArticlesArticle_idRequest {
    // Collection article unique identifier
    int64 article_id = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message GetAccountCollectionsCollection_idAuthorsRequest {
    // Collection unique identifier
    int64 collection_id = 1;
}

message GetAccountCollectionsCollection_idAuthorsResponse {
    repeated Author items = 1;
}

message PutAccountCollectionsCollection_idAuthorsRequest {
    // List of authors
    AuthorsCreator Authors = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message PostAccountCollectionsCollection_idAuthorsRequest {
    // List of authors
    AuthorsCreator Authors = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message DeleteAccountCollectionsCollection_idAuthorsAuthor_idRequest {
    // Collection Author unique identifier
    int64 author_id = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message GetAccountCollectionsCollection_idCategoriesRequest {
    // Collection unique identifier
    int64 collection_id = 1;
}

message GetAccountCollectionsCollection_idCategoriesResponse {
    repeated Category items = 1;
}

message PutAccountCollectionsCollection_idCategoriesRequest {
    // Categories list
    CategoriesCreator categories = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message PostAccountCollectionsCollection_idCategoriesRequest {
    // Categories list
    CategoriesCreator categories = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message DeleteAccountCollectionsCollection_idCategoriesCategory_idRequest {
    // Collection category unique identifier
    int64 category_id = 1;
    // Collection unique identifier
    int64 collection_id = 2;
}

message GetAccountCollectionsCollection_idPrivate_linksRequest {
    // Collection unique identifier
    int64 collection_id = 1;
}

message GetAccountCollectionsCollection_idPrivate_linksResponse {
    repeated PrivateLink items = 1;
}

message PostAccountCollectionsCollection_idPrivate_linksRequest {
    // Collection unique identifier
    int64 collection_id = 1;
    CollectionPrivateLinkCreator private_link = 2;
}

message PutAccountCollectionsCollection_idPrivate_linksLink_idRequest {
    // Collection unique identifier
    int64 collection_id = 1;
    // Private link token
    string link_id = 2;
    CollectionPrivateLinkCreator private_link = 3;
}

message DeleteAccountCollectionsCollection_idPrivate_linksLink_idRequest {
    // Collection unique identifier
    int64 collection_id = 1;
    // Private link token
    string link_id = 2;
}

message PostAccountCollectionsCollection_idPublishRequest {
    // Collection Unique identifier
    int64 collection_id = 1;
}

message PostAccountCollectionsCollection_idReserve_doiRequest {
    // Collection Unique identifier
    int64 collection_id = 1;
}

message GetAccountInstitutionArticlesRequest {
    // Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 12 - Preprint
    int64 item_type = 1;
    // Number of results included on a page. Used for pagination with query
    int64 limit = 2;
    // Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    string modified_since = 3;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 4;
    // The field by which to order. Default varies by endpoint/resource.
    enum GetAccountInstitutionArticlesRequest_Order {
        GETACCOUNTINSTITUTIONARTICLESREQUEST_ORDER_PUBLISHED_DATE = 0;
        GETACCOUNTINSTITUTIONARTICLESREQUEST_ORDER_MODIFIED_DATE = 1;
        GETACCOUNTINSTITUTIONARTICLESREQUEST_ORDER_VIEWS = 2;
        GETACCOUNTINSTITUTIONARTICLESREQUEST_ORDER_SHARES = 3;
        GETACCOUNTINSTITUTIONARTICLESREQUEST_ORDER_DOWNLOADS = 4;
        GETACCOUNTINSTITUTIONARTICLESREQUEST_ORDER_CITES = 5;
    }
    GetAccountInstitutionArticlesRequest_Order order = 5;
    enum GetAccountInstitutionArticlesRequest_Order_direction {
        GETACCOUNTINSTITUTIONARTICLESREQUEST_ORDER_DIRECTION_ASC = 0;
        GETACCOUNTINSTITUTIONARTICLESREQUEST_ORDER_DIRECTION_DESC = 1;
    }
    GetAccountInstitutionArticlesRequest_Order_direction order_direction = 6;
    // Page number. Used for pagination with page_size
    int64 page = 7;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 8;
    // Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    string published_since = 9;
    // only return collections with this resource_doi
    string resource_doi = 10;
    // only return collections with this status
    int64 status = 11;
}

message GetAccountInstitutionArticlesResponse {
    repeated Article items = 1;
}

message GetAccountInstitutionGroupsResponse {
    repeated Group items = 1;
}

message GetAccountLicensesResponse {
    repeated License items = 1;
}

message GetAccountProjectsRequest {
    // Number of results included on a page. Used for pagination with query
    int64 limit = 1;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 2;
    // The field by which to order. Default varies by endpoint/resource.
    enum GetAccountProjectsRequest_Order {
        GETACCOUNTPROJECTSREQUEST_ORDER_PUBLISHED_DATE = 0;
        GETACCOUNTPROJECTSREQUEST_ORDER_MODIFIED_DATE = 1;
        GETACCOUNTPROJECTSREQUEST_ORDER_VIEWS = 2;
        GETACCOUNTPROJECTSREQUEST_ORDER_SHARES = 3;
        GETACCOUNTPROJECTSREQUEST_ORDER_DOWNLOADS = 4;
        GETACCOUNTPROJECTSREQUEST_ORDER_CITES = 5;
    }
    GetAccountProjectsRequest_Order order = 3;
    enum GetAccountProjectsRequest_Order_direction {
        GETACCOUNTPROJECTSREQUEST_ORDER_DIRECTION_ASC = 0;
        GETACCOUNTPROJECTSREQUEST_ORDER_DIRECTION_DESC = 1;
    }
    GetAccountProjectsRequest_Order_direction order_direction = 4;
    // Page number. Used for pagination with page_size
    int64 page = 5;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 6;
    // Any combination of owner, collaborator, viewer separated by comma. Examples: "owner" or "owner,collaborator".
    string roles = 7;
    // only return collections from this institution
    enum GetAccountProjectsRequest_Storage {
        GETACCOUNTPROJECTSREQUEST_STORAGE_GROUP = 0;
        GETACCOUNTPROJECTSREQUEST_STORAGE_INDIVIDUAL = 1;
    }
    GetAccountProjectsRequest_Storage storage = 8;
}

message GetAccountProjectsResponse {
    repeated ProjectPrivate items = 1;
}

message PostAccountProjectsRequest {
    // Project  description
    ProjectCreate Project = 1;
}

message PostAccountProjectsSearchRequest {
    // Search Parameters
    CommonSearch search = 1;
}

message PostAccountProjectsSearchResponse {
    repeated ProjectPrivate items = 1;
}

message GetAccountProjectsProject_idRequest {
    // Project unique identifier
    int64 project_id = 1;
}

message PutAccountProjectsProject_idRequest {
    // Project description
    ProjectUpdate Project = 1;
    // Project unique identifier
    int64 project_id = 2;
}

message DeleteAccountProjectsProject_idRequest {
    // Project unique identifier
    int64 project_id = 1;
}

message GetAccountProjectsProject_idArticlesRequest {
    // Proejct unique identifier
    int64 project_id = 1;
}

message GetAccountProjectsProject_idArticlesResponse {
    repeated Article items = 1;
}

message PostAccountProjectsProject_idArticlesRequest {
    // Article description
    ArticleCreate Article = 1;
    // Proejct unique identifier
    int64 project_id = 2;
}

message GetAccountProjectsProject_idArticlesArticle_idRequest {
    // Project Article unique identifier
    int64 article_id = 1;
    // Project unique identifier
    int64 project_id = 2;
}

message DeleteAccountProjectsProject_idArticlesArticle_idRequest {
    // Project Article unique identifier
    int64 article_id = 1;
    // Project unique identifier
    int64 project_id = 2;
}

message GetAccountProjectsProject_idArticlesArticle_idFilesRequest {
    // Project Article unique identifier
    int64 article_id = 1;
    // Project unique identifier
    int64 project_id = 2;
}

message GetAccountProjectsProject_idArticlesArticle_idFilesResponse {
    repeated PrivateFile items = 1;
}

message GetAccountProjectsProject_idArticlesArticle_idFilesFile_idRequest {
    // Project Article unique identifier
    int64 article_id = 1;
    // File unique identifier
    int64 file_id = 2;
    // Project unique identifier
    int64 project_id = 3;
}

message GetAccountProjectsProject_idCollaboratorsRequest {
    // Project unique identifier
    int64 project_id = 1;
}

message GetAccountProjectsProject_idCollaboratorsResponse {
    repeated ProjectCollaborator items = 1;
}

message PostAccountProjectsProject_idCollaboratorsRequest {
    // viewer or collaborator role. User user_id or email of user
    ProjectCollaboratorInvite Collaborator = 1;
    // Project unique identifier
    int64 project_id = 2;
}

message DeleteAccountProjectsProject_idCollaboratorsUser_idRequest {
    // Project unique identifier
    int64 project_id = 1;
    // User unique identifier
    int64 user_id = 2;
}

message PostAccountProjectsProject_idLeaveRequest {
    // Project unique identifier
    int64 project_id = 1;
}

message GetAccountProjectsProject_idNotesRequest {
    // Number of results included on a page. Used for pagination with query
    int64 limit = 1;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 2;
    // Page number. Used for pagination with page_size
    int64 page = 3;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 4;
    // Project unique identifier
    int64 project_id = 5;
}

message GetAccountProjectsProject_idNotesResponse {
    repeated ProjectNote items = 1;
}

message PostAccountProjectsProject_idNotesRequest {
    // Note message
    ProjectNoteCreate Note = 1;
    // Project unique identifier
    int64 project_id = 2;
}

message GetAccountProjectsProject_idNotesNote_idRequest {
    // Note unique identifier
    int64 note_id = 1;
    // Project unique identifier
    int64 project_id = 2;
}

message PutAccountProjectsProject_idNotesNote_idRequest {
    // Note message
    ProjectNoteCreate Note = 1;
    // Note unique identifier
    int64 note_id = 2;
    // Project unique identifier
    int64 project_id = 3;
}

message DeleteAccountProjectsProject_idNotesNote_idRequest {
    // Note unique identifier
    int64 note_id = 1;
    // Project unique identifier
    int64 project_id = 2;
}

message PostAccountProjectsProject_idPublishRequest {
    // Project unique identifier
    int64 project_id = 1;
}

message GetArticlesRequest {
    // only return collections with this doi
    string doi = 1;
    // only return collections from this group
    int64 group = 2;
    // only return collections from this institution
    int64 institution = 3;
    // Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 12 - Preprint
    int64 item_type = 4;
    // Number of results included on a page. Used for pagination with query
    int64 limit = 5;
    // Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    string modified_since = 6;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 7;
    // The field by which to order. Default varies by endpoint/resource.
    enum GetArticlesRequest_Order {
        GETARTICLESREQUEST_ORDER_PUBLISHED_DATE = 0;
        GETARTICLESREQUEST_ORDER_MODIFIED_DATE = 1;
        GETARTICLESREQUEST_ORDER_VIEWS = 2;
        GETARTICLESREQUEST_ORDER_SHARES = 3;
        GETARTICLESREQUEST_ORDER_DOWNLOADS = 4;
        GETARTICLESREQUEST_ORDER_CITES = 5;
    }
    GetArticlesRequest_Order order = 8;
    enum GetArticlesRequest_Order_direction {
        GETARTICLESREQUEST_ORDER_DIRECTION_ASC = 0;
        GETARTICLESREQUEST_ORDER_DIRECTION_DESC = 1;
    }
    GetArticlesRequest_Order_direction order_direction = 9;
    // Page number. Used for pagination with page_size
    int64 page = 10;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 11;
    // Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    string published_since = 12;
    // only return collections with this resource_doi
    string resource_doi = 13;
}

message GetArticlesResponse {
    repeated Article items = 1;
}

message PostArticlesSearchRequest {
    // Search Parameters
    ArticleSearch search = 1;
}

message PostArticlesSearchResponse {
    repeated Article items = 1;
}

message GetArticlesArticle_idRequest {
    // Article Unique identifier
    int64 article_id = 1;
}

message GetArticlesArticle_idFilesRequest {
    // Article Unique identifier
    int64 article_id = 1;
}

message GetArticlesArticle_idFilesResponse {
    repeated PublicFile items = 1;
}

message GetArticlesArticle_idFilesFile_idRequest {
    // Article Unique identifier
    int64 article_id = 1;
    // File Unique identifier
    int64 file_id = 2;
}

message GetArticlesArticle_idVersionsRequest {
    // Article Unique identifier
    int64 article_id = 1;
}

message GetArticlesArticle_idVersionsResponse {
    repeated Version items = 1;
}

message GetArticlesArticle_idVersionsV_numberRequest {
    // Article Unique identifier
    int64 article_id = 1;
    // Article Version Number
    int64 v_number = 2;
}

message GetArticlesArticle_idVersionsV_numberConfidentialityRequest {
    // Article Unique identifier
    int64 article_id = 1;
    // Version Number
    int64 v_number = 2;
}

message GetArticlesArticle_idVersionsV_numberEmbargoRequest {
    // Article Unique identifier
    int64 article_id = 1;
    // Version Number
    int64 v_number = 2;
}

message GetCategoriesResponse {
    repeated Category items = 1;
}

message GetCollectionsRequest {
    // only return collections with this doi
    string doi = 1;
    // only return collections from this group
    int64 group = 2;
    // only return collections from this institution
    int64 institution = 3;
    // Number of results included on a page. Used for pagination with query
    int64 limit = 4;
    // Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
    string modified_since = 5;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 6;
    // The field by which to order. Default varies by endpoint/resource.
    enum GetCollectionsRequest_Order {
        GETCOLLECTIONSREQUEST_ORDER_PUBLISHED_DATE = 0;
        GETCOLLECTIONSREQUEST_ORDER_MODIFIED_DATE = 1;
        GETCOLLECTIONSREQUEST_ORDER_VIEWS = 2;
        GETCOLLECTIONSREQUEST_ORDER_SHARES = 3;
        GETCOLLECTIONSREQUEST_ORDER_DOWNLOADS = 4;
        GETCOLLECTIONSREQUEST_ORDER_CITES = 5;
    }
    GetCollectionsRequest_Order order = 7;
    enum GetCollectionsRequest_Order_direction {
        GETCOLLECTIONSREQUEST_ORDER_DIRECTION_ASC = 0;
        GETCOLLECTIONSREQUEST_ORDER_DIRECTION_DESC = 1;
    }
    GetCollectionsRequest_Order_direction order_direction = 8;
    // Page number. Used for pagination with page_size
    int64 page = 9;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 10;
    // Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
    string published_since = 11;
    // only return collections with this resource_doi
    string resource_doi = 12;
}

message GetCollectionsResponse {
    repeated Collection items = 1;
}

message PostCollectionsSearchRequest {
    // Search Parameters
    CollectionSearch search = 1;
}

message PostCollectionsSearchResponse {
    repeated Collection items = 1;
}

message GetCollectionsCollection_idRequest {
    // Collection Unique identifier
    int64 collection_id = 1;
}

message GetCollectionsCollection_idArticlesRequest {
    // Collection Unique identifier
    int64 collection_id = 1;
    // Number of results included on a page. Used for pagination with query
    int64 limit = 2;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 3;
    // Page number. Used for pagination with page_size
    int64 page = 4;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 5;
}

message GetCollectionsCollection_idArticlesResponse {
    repeated Article items = 1;
}

message GetCollectionsCollection_idVersionsRequest {
    // Collection Unique identifier
    int64 collection_id = 1;
}

message GetCollectionsCollection_idVersionsResponse {
    repeated Version items = 1;
}

message GetCollectionsCollection_idVersionsVersion_idRequest {
    // Collection Unique identifier
    int64 collection_id = 1;
    // Version Number
    int64 version_id = 2;
}

message GetFileDownloadFile_idRequest {
    int64 file_id = 1;
}

message PostInstitutionHrfeedUploadRequest {
    // You can find an example in the Hr Feed section
    ;
}

message GetInstitutionsInstitution_string_idArticlesFilterByRequest {
    string filename = 1;
    string institution_string_id = 2;
    string resource_id = 3;
}

message GetInstitutionsInstitution_string_idArticlesFilterByResponse {
    repeated Article items = 1;
}

message GetLicensesResponse {
    repeated License items = 1;
}

message GetProjectsRequest {
    // only return collections from this group
    int64 group = 1;
    // only return collections from this institution
    int64 institution = 2;
    // Number of results included on a page. Used for pagination with query
    int64 limit = 3;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 4;
    // The field by which to order. Default varies by endpoint/resource.
    enum GetProjectsRequest_Order {
        GETPROJECTSREQUEST_ORDER_PUBLISHED_DATE = 0;
        GETPROJECTSREQUEST_ORDER_MODIFIED_DATE = 1;
        GETPROJECTSREQUEST_ORDER_VIEWS = 2;
        GETPROJECTSREQUEST_ORDER_SHARES = 3;
        GETPROJECTSREQUEST_ORDER_DOWNLOADS = 4;
        GETPROJECTSREQUEST_ORDER_CITES = 5;
    }
    GetProjectsRequest_Order order = 5;
    enum GetProjectsRequest_Order_direction {
        GETPROJECTSREQUEST_ORDER_DIRECTION_ASC = 0;
        GETPROJECTSREQUEST_ORDER_DIRECTION_DESC = 1;
    }
    GetProjectsRequest_Order_direction order_direction = 6;
    // Page number. Used for pagination with page_size
    int64 page = 7;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 8;
    // Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    string published_since = 9;
}

message GetProjectsResponse {
    repeated Project items = 1;
}

message PostProjectsSearchRequest {
    // Search Parameters
    CommonSearch search = 1;
}

message PostProjectsSearchResponse {
    repeated Project items = 1;
}

message GetProjectsProject_idRequest {
    // Project Unique identifier
    int64 project_id = 1;
}

message GetProjectsProject_idArticlesRequest {
    // Project Unique identifier
    int64 project_id = 1;
}

message GetProjectsProject_idArticlesResponse {
    repeated Article items = 1;
}

message Account {
    // Account activity status
    int64 active = 1;
    // Date when account was created
    string created_date = 2;
    // User email
    string email = 3;
    // First Name
    string first_name = 4;
    // Account id
    int64 id = 5;
    // Account institution
    int64 institution_id = 6;
    // Account institution user id
    string institution_user_id = 7;
    // Last Name
    string last_name = 8;
    // Maximum upload size for account
    int64 maximum_file_size = 9;
    // Date of last account modification
    string modified_date = 10;
    // True if a quota request is pending
    bool pending_quota_request = 11;
    // Account quota
    int64 quota = 12;
    // Account total used quota
    int64 used_quota = 13;
    // Account used private quota
    int64 used_quota_private = 14;
    // Account public used quota
    int64 used_quota_public = 15;
}

message Article {
    // Type of article identificator
    int64 defined_type = 1;
    // DOI
    string doi = 2;
    // Group ID
    google.protobuf.Int32Value group_id = 3;
    // Unique identifier for article
    int64 id = 4;
    // Publishing date
    google.protobuf.StringValue published_date = 5;
    // Thumbnail image
    string thumb = 6;
    // Title of article
    string title = 7;
    // Api endpoint for article
    string url = 8;
    // Private Api endpoint for article
    string url_private_api = 9;
    // Private site endpoint for article
    string url_private_html = 10;
    // Public Api endpoint for article
    string url_public_api = 11;
    // Public site endpoint for article
    string url_public_html = 12;
}

message ArticleComplete {
    // List of article authors
    repeated Author authors = 1;
    // List of custom fields values
    repeated CustomArticleField custom_fields = 2;
    // Article public url
    string figshare_url = 3;
    // List of article files
    repeated PublicFile files = 4;
    // Article DOI
    google.protobuf.StringValue resource_doi = 5;
    // Article resource title
    google.protobuf.StringValue resource_title = 6;
}

message ArticleCompletePrivate {
    // Group resource id
    google.protobuf.StringValue group_resource_id = 1;
}

message ArticleConfidentiality {
    // True if article is confidential
    bool is_confidential = 1;
    // Reason for confidentiality
    string reason = 2;
}

message ArticleCreate {
    // List of authors to be assosciated with the article. The list can contain author ids or author names. No more than 10 authors. For adding more authors use the specific authors endpoint.
    message Author {
    }
    repeated Author authors = 1;
    // List of category ids to be associated with the article(e.g [1, 23, 33, 66])
    repeated int64 categories = 2;
    // List of key, values pairs to be associated with the article
    message Custom_fields {
    }
    Custom_fields custom_fields = 3;
    // Article type
    enum ArticleCreate_Defined_type {
        ARTICLECREATE_DEFINED_TYPE_FIGURE = 0;
        ARTICLECREATE_DEFINED_TYPE_MEDIA = 1;
        ARTICLECREATE_DEFINED_TYPE_DATASET = 2;
        ARTICLECREATE_DEFINED_TYPE_FILESET = 3;
        ARTICLECREATE_DEFINED_TYPE_POSTER = 4;
        ARTICLECREATE_DEFINED_TYPE_PAPER = 5;
        ARTICLECREATE_DEFINED_TYPE_PRESENTATION = 6;
        ARTICLECREATE_DEFINED_TYPE_THESIS = 7;
        ARTICLECREATE_DEFINED_TYPE_CODE = 8;
        ARTICLECREATE_DEFINED_TYPE_METADATA = 9;
        ARTICLECREATE_DEFINED_TYPE_PREPRINT = 10;
    }
    ArticleCreate_Defined_type defined_type = 4;
    // The article description. In a publisher case, usually this is the remote article description
    string description = 5;
    // Not appliable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
    string doi = 6;
    // Grant number or funding authority
    string funding = 7;
    // Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
    int64 group_id = 8;
    // List of tags to be associated with the article. Tags can be used instead
    repeated string keywords = 9;
    // License id for this article.
    int64 license = 10;
    // List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])
    repeated string references = 11;
    // Not applicable to regular users. In a publisher case, this is the publisher article DOI.
    string resource_doi = 12;
    // Not applicable to regular users. In a publisher case, this is the publisher article title.
    string resource_title = 13;
    // List of tags to be associated with the article. Keywords can be used instead
    repeated string tags = 14;
    // Title of article
    string title = 15;
}

message ArticleDOI {
    // Reserved DOI
    string doi = 1;
}

message ArticleEmbargo {
    // Date when embargo lifts
    google.protobuf.StringValue embargo_date = 1;
    // Reason for embargo
    string embargo_reason = 2;
    // Embargo type
    google.protobuf.StringValue embargo_type = 3;
    // True if embargoed
    bool is_embargoed = 4;
}

message ArticleEmbargoUpdater {
    // Date when the embargo expires and the article gets published
    string embargo_date = 1;
    // Reason for setting embargo
    string embargo_reason = 2;
    // Embargo can be enabled at the article or the file level. Possible values: article, file
    enum ArticleEmbargoUpdater_Embargo_type {
        ARTICLEEMBARGOUPDATER_EMBARGO_TYPE_ARTICLE = 0;
        ARTICLEEMBARGOUPDATER_EMBARGO_TYPE_FILE = 1;
    }
    ArticleEmbargoUpdater_Embargo_type embargo_type = 3;
    // Confidentiality status
    bool is_embargoed = 4;
}

message ArticleSearch {
    // only return collections with this doi
    string doi = 1;
    // Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 12 - Preprint
    int64 item_type = 2;
    // only return collections with this resource_doi
    string resource_doi = 3;
}

message ArticleUpdate {
    // List of authors to be assosciated with the article. The list can contain author ids or author names. No more than 10 authors. For adding more authors use the specific authors endpoint.
    message Author {
    }
    repeated Author authors = 1;
    // List of category ids to be associated with the article(e.g [1, 23, 33, 66])
    repeated int64 categories = 2;
    // List of key, values pairs to be associated with the article
    message Custom_fields {
    }
    Custom_fields custom_fields = 3;
    // Article type
    enum ArticleUpdate_Defined_type {
        ARTICLEUPDATE_DEFINED_TYPE_FIGURE = 0;
        ARTICLEUPDATE_DEFINED_TYPE_MEDIA = 1;
        ARTICLEUPDATE_DEFINED_TYPE_DATASET = 2;
        ARTICLEUPDATE_DEFINED_TYPE_FILESET = 3;
        ARTICLEUPDATE_DEFINED_TYPE_POSTER = 4;
        ARTICLEUPDATE_DEFINED_TYPE_PAPER = 5;
        ARTICLEUPDATE_DEFINED_TYPE_PRESENTATION = 6;
        ARTICLEUPDATE_DEFINED_TYPE_THESIS = 7;
        ARTICLEUPDATE_DEFINED_TYPE_CODE = 8;
        ARTICLEUPDATE_DEFINED_TYPE_METADATA = 9;
        ARTICLEUPDATE_DEFINED_TYPE_PREPRINT = 10;
    }
    ArticleUpdate_Defined_type defined_type = 4;
    // The article description. In a publisher case, usually this is the remote article description
    string description = 5;
    // Not appliable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
    string doi = 6;
    // Grant number or funding authority
    string funding = 7;
    // Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
    int64 group_id = 8;
    // List of tags to be associated with the article. Tags can be used instead
    repeated string keywords = 9;
    // License id for this article.
    int64 license = 10;
    // List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])
    repeated string references = 11;
    // Not applicable to regular users. In a publisher case, this is the publisher article DOI.
    string resource_doi = 12;
    // Not applicable to regular users. In a publisher case, this is the publisher article title.
    string resource_title = 13;
    // List of tags to be associated with the article. Keywords can be used instead
    repeated string tags = 14;
    // Title of article
    string title = 15;
}

message ArticlesCreator {
    // List of article ids
    repeated int64 articles = 1;
}

message Author {
    // Author full name
    string full_name = 1;
    // Author id
    int64 id = 2;
    // True if author has published items
    bool is_active = 3;
    // Author Orcid
    string orcid_id = 4;
    // Author url name
    string url_name = 5;
}

message AuthorComplete {
    // First Name
    string first_name = 1;
    // Group id
    int64 group_id = 2;
    // Institution id
    int64 institution_id = 3;
    // if 1 then the author has published items
    int64 is_public = 4;
    // Job title
    string job_title = 5;
    // Last Name
    string last_name = 6;
}

message AuthorsCreator {
    // List of authors to be assosciated with the article. The list can contain author ids or author names [{"id": 12121}, {"id": 34345}, {"name": "John Doe"}]. No more than 10 authors. For adding more authors use the specific authors endpoint.
    message Author {
    }
    repeated Author authors = 1;
}

message CategoriesCreator {
    // List of category ids
    repeated int64 categories = 1;
}

message Category {
    // Category id
    int64 id = 1;
    // Parent category
    int64 parent_id = 2;
    // Category title
    string title = 3;
}

message Collaborator {
    // Collaborator name
    string name = 1;
    // Collaborator role
    string role_name = 2;
    // Collaborator id
    int32 user_id = 3;
}

message Collection {
    // Collection DOI
    string doi = 1;
    // Collection id
    int64 id = 2;
    // Date when collection was published
    google.protobuf.StringValue published_date = 3;
    // Collection title
    string title = 4;
    // Api endpoint
    string url = 5;
}

message CollectionComplete {
    // Number of articles in collection
    int64 articles_count = 1;
    // List of collection authors
    repeated Author authors = 2;
    // List of collection categories
    repeated Category categories = 3;
    // Collection citation
    string citation = 4;
    // Date when collection was created
    string created_date = 5;
    // Collection custom fields
    repeated CustomArticleField custom_fields = 6;
    // Collection description
    string description = 7;
    // Collection group
    int64 group_id = 8;
    // Collection group resource id
    google.protobuf.StringValue group_resource_id = 9;
    // Collection institution
    int64 institution_id = 10;
    // Date when collection was last modified
    string modified_date = 11;
    // True if collection is published
    bool public = 12;
    // List of collection references
    repeated string references = 13;
    // Collection resource doi
    string resource_doi = 14;
    // Collection resource id
    string resource_id = 15;
    // Collection resource link
    string resource_link = 16;
    // Collection resource title
    string resource_title = 17;
    // Collection resource version
    int64 resource_version = 18;
    // List of collection tags
    repeated string tags = 19;
    // Collection version
    int64 version = 20;
}

message CollectionCreate {
    // List of articles to be associated with the collection
    repeated int32 articles = 1;
    // List of authors to be assosciated with the article. The list can contain author ids or author names. No more than 10 authors. For adding more authors use the specific authors endpoint.
    message Author {
    }
    repeated Author authors = 2;
    // List of category ids to be associated with the article(e.g [1, 23, 33, 66])
    repeated int64 categories = 3;
    // List of key, values pairs to be associated with the article
    message Custom_fields {
    }
    Custom_fields custom_fields = 4;
    // The article description. In a publisher case, usually this is the remote article description
    string description = 5;
    // Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
    int64 group_id = 6;
    // List of tags to be associated with the article. Tags can be used instead
    repeated string keywords = 7;
    // List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])
    repeated string references = 8;
    // Not applicable to regular users. In a publisher case, this is the publisher article DOI.
    string resource_doi = 9;
    // Not applicable to regular users. In a publisher case, this is the publisher article id
    string resource_id = 10;
    // Not applicable to regular users. In a publisher case, this is the publisher article link
    string resource_link = 11;
    // Not applicable to regular users. In a publisher case, this is the publisher article title.
    string resource_title = 12;
    // Not applicable to regular users. In a publisher case, this is the publisher article version
    int32 resource_version = 13;
    // List of tags to be associated with the article. Keywords can be used instead
    repeated string tags = 14;
    // Title of article
    string title = 15;
}

message CollectionPrivateLinkCreator {
    // Date when this private link should expire - optional. By default private links expire in 365 days.
    string expires_date = 1;
    // Optional, default true. Set to false to give private link users editing rights for this collection.
    bool read_only = 2;
}

message CollectionSearch {
    // only return collections with this doi
    string doi = 1;
    // only return collections with this resource_doi
    string resource_doi = 2;
}

message CollectionUpdate {
    // List of articles to be associated with the collection
    repeated int32 articles = 1;
    // List of authors to be assosciated with the article. The list can contain author ids or author names. No more than 10 authors. For adding more authors use the specific authors endpoint.
    message Author {
    }
    repeated Author authors = 2;
    // List of category ids to be associated with the article(e.g [1, 23, 33, 66])
    repeated int64 categories = 3;
    // List of key, values pairs to be associated with the article
    message Custom_fields {
    }
    Custom_fields custom_fields = 4;
    // The article description. In a publisher case, usually this is the remote article description
    string description = 5;
    // Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
    int64 group_id = 6;
    // List of tags to be associated with the article. Tags can be used instead
    repeated string keywords = 7;
    // List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])
    repeated string references = 8;
    // Not applicable to regular users. In a publisher case, this is the publisher article DOI.
    string resource_doi = 9;
    // Not applicable to regular users. In a publisher case, this is the publisher article id
    string resource_id = 10;
    // Not applicable to regular users. In a publisher case, this is the publisher article link
    string resource_link = 11;
    // Not applicable to regular users. In a publisher case, this is the publisher article title.
    string resource_title = 12;
    // Not applicable to regular users. In a publisher case, this is the publisher article version
    int32 resource_version = 13;
    // List of tags to be associated with the article. Keywords can be used instead
    repeated string tags = 14;
    // Title of article
    string title = 15;
}

message CommonSearch {
    // only return collections from this group
    int64 group = 1;
    // only return collections from this institution
    int64 institution = 2;
    // Number of results included on a page. Used for pagination with query
    int64 limit = 3;
    // Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    string modified_since = 4;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 5;
    // The field by which to order. Default varies by endpoint/resource.
    enum CommonSearch_Order {
        COMMONSEARCH_ORDER_PUBLISHED_DATE = 0;
        COMMONSEARCH_ORDER_MODIFIED_DATE = 1;
        COMMONSEARCH_ORDER_VIEWS = 2;
        COMMONSEARCH_ORDER_SHARES = 3;
        COMMONSEARCH_ORDER_DOWNLOADS = 4;
        COMMONSEARCH_ORDER_CITES = 5;
    }
    CommonSearch_Order order = 6;
    // Direction of ordering
    enum CommonSearch_Order_direction {
        COMMONSEARCH_ORDER_DIRECTION_ASC = 0;
        COMMONSEARCH_ORDER_DIRECTION_DESC = 1;
    }
    CommonSearch_Order_direction order_direction = 7;
    // Page number. Used for pagination with page_size
    int64 page = 8;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 9;
    // Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    string published_since = 10;
    // Search term
    string search_for = 11;
}

message ConfidentialityCreator {
    // Reason for confidentiality
    string reason = 1;
}

message CustomArticleField {
    // True if field completion is mandatory
    google.protobuf.BoolValue is_mandatory = 1;
    // Custom  metadata name
    string name = 2;
    // Custom metadata value
    string value = 3;
}

message ErrorMessage {
    // A machine friendly error code, used by the dev team to identify the error.
    int64 code = 1;
    // A human friendly message explaining the error.
    string message = 2;
}

message FileCreator {
    // Url for an existing file that will not be uploaded on figshare
    string link = 1;
    // MD5 sum pre computed on the client side
    string md5 = 2;
    // File name including the extension
    string name = 3;
    // File size in bytes
    int64 size = 4;
}

message Group {
    // Group id
    int64 id = 1;
    // Group name
    string name = 2;
    // Parent group if any
    int64 parent_id = 3;
    // Group resource id
    string resource_id = 4;
}

message Institution {
    // Institution domain
    google.protobuf.StringValue domain = 1;
    // Institution id
    int64 id = 2;
    // Institution name
    string name = 3;
}

message License {
    // License name
    string name = 1;
    // License url
    string url = 2;
    // License value
    int64 value = 3;
}

message Location {
    // Url for item
    string location = 1;
}

message PrivateArticleSearch {
    // only return collections with this resource_id
    string resource_id = 1;
}

message PrivateAuthorsSearch {
    // Return only authors in this group or subgroups of the group
    int64 group_id = 1;
    // Return only authors associated to this institution
    int64 institution_id = 2;
    // Return only active authors if True
    bool is_active = 3;
    // Return only authors that have published items if True
    bool is_public = 4;
    // Number of results included on a page. Used for pagination with query
    int64 limit = 5;
    // Where to start the listing(the offset of the first result). Used for pagination with limit
    int64 offset = 6;
    // Orcid of author
    string orcid = 7;
    // The field by which to order. Default varies by endpoint/resource.
    enum PrivateAuthorsSearch_Order {
        PRIVATEAUTHORSSEARCH_ORDER_PUBLISHED_DATE = 0;
        PRIVATEAUTHORSSEARCH_ORDER_MODIFIED_DATE = 1;
        PRIVATEAUTHORSSEARCH_ORDER_VIEWS = 2;
        PRIVATEAUTHORSSEARCH_ORDER_SHARES = 3;
        PRIVATEAUTHORSSEARCH_ORDER_DOWNLOADS = 4;
        PRIVATEAUTHORSSEARCH_ORDER_CITES = 5;
    }
    PrivateAuthorsSearch_Order order = 8;
    // Direction of ordering
    enum PrivateAuthorsSearch_Order_direction {
        PRIVATEAUTHORSSEARCH_ORDER_DIRECTION_ASC = 0;
        PRIVATEAUTHORSSEARCH_ORDER_DIRECTION_DESC = 1;
    }
    PrivateAuthorsSearch_Order_direction order_direction = 9;
    // Page number. Used for pagination with page_size
    int64 page = 10;
    // The number of results included on a page. Used for pagination with page
    int64 page_size = 11;
    // Search term
    string search_for = 12;
}

message PrivateCollectionSearch {
    // only return collections with this resource_id
    string resource_id = 1;
}

message PrivateFile {
    // File computed md5
    string computed_md5 = 1;
    // File preview state
    string preview_state = 2;
    // Status for file upload
    google.protobuf.StringValue status = 3;
    // File supplied md5
    string supplied_md5 = 4;
    // Token for file upload
    string upload_token = 5;
    // Upload url for file
    string upload_url = 6;
    // File viewer type
    string viewer_type = 7;
}

message PrivateLink {
    // Date when link will expire
    string expires_date = 1;
    // Private link id
    string id = 2;
    // True if private link is active
    bool is_active = 3;
}

message PrivateLinkCreator {
    // Date when this private link should expire - optional. By default private links expire in 365 days.
    string expires_date = 1;
}

message Project {
    // Project id
    int64 id = 1;
    // Date when project was published
    google.protobuf.StringValue published_date = 2;
    // Project title
    string title = 3;
    // Api endpoint
    string url = 4;
}

message ProjectArticle {
    // List of categories selected for the article
    repeated Category categories = 1;
    // Article citation
    string citation = 2;
    // Confidentiality reason
    string confidential_reason = 3;
    // Date when article was created
    string created_date = 4;
    // Article description
    string description = 5;
    // Date when embargo lifts
    google.protobuf.StringValue embargo_date = 6;
    // Reason for embargo
    string embargo_reason = 7;
    // Article embargo
    google.protobuf.StringValue embargo_type = 8;
    // Article funding
    string funding = 9;
    // True if any files are linked to the article
    bool has_linked_file = 10;
    // True if article is active
    bool is_active = 11;
    // Article Confidentiality
    bool is_confidential = 12;
    // True if article is embargoed
    bool is_embargoed = 13;
    // True if article has no files
    bool is_metadata_record = 14;
    // True if article is published
    bool is_public = 15;
    // Article selected license
    License license = 16;
    // Article metadata reason
    string metadata_reason = 17;
    // Date when article was last modified
    google.protobuf.StringValue modified_date = 18;
    // List of references
    repeated string references = 19;
    // Article size
    int64 size = 20;
    // Article status
    string status = 21;
    // List of article tags
    repeated string tags = 22;
    // Article version
    int64 version = 23;
}

message ProjectCollaborator {
    // Collaborator name
    string name = 1;
    // Collaborator role
    string role_name = 2;
    // Status of collaborator invitation
    string status = 3;
    // Collaborator id
    int32 user_id = 4;
}

message ProjectCollaboratorInvite {
    // Text sent when inviting the user to the project
    string comment = 1;
    // Collaborator email
    string email = 2;
    // Role of the the collaborator inside the project
    enum ProjectCollaboratorInvite_Role_name {
        PROJECTCOLLABORATORINVITE_ROLE_NAME_VIEWER = 0;
        PROJECTCOLLABORATORINVITE_ROLE_NAME_COLLABORATOR = 1;
    }
    ProjectCollaboratorInvite_Role_name role_name = 3;
    // User id of the collaborator
    int64 user_id = 4;
}

message ProjectComplete {
    // List of project collaborators
    repeated Collaborator collaborators = 1;
    // Project description
    string description = 2;
    // Project public url
    google.protobuf.StringValue figshare_url = 3;
    // Project funding
    string funding = 4;
}

message ProjectCompletePrivate {
    // List of project collaborators
    repeated Collaborator collaborators = 1;
    // Date when project was created
    string created_date = 2;
    // Project description
    string description = 3;
    // Project public url
    google.protobuf.StringValue figshare_url = 4;
    // Project funding
    string funding = 5;
    // Group of project if any
    int64 group_id = 6;
    // Date when project was last modified
    string modified_date = 7;
    // Project quota
    int64 quota = 8;
    // Project used quota
    int64 used_quota = 9;
    // Project private quota used
    int64 used_quota_private = 10;
    // Project public quota used
    int64 used_quota_public = 11;
}

message ProjectCreate {
    // Project description
    string description = 1;
    // Grant number or organization(s) that funded this project. Up to 2000 characters permitted.
    string funding = 2;
    // Only if project type is group.
    int64 group_id = 3;
    // The title for this project - mandatory. 3 - 500 characters.
    string title = 4;
}

message ProjectNote {
    // Note Abstract - short/truncated content
    string abstract = 1;
    // Date when note was created
    string created_date = 2;
    // Project note id
    int64 id = 3;
    // Date when note was last modified
    string modified_date = 4;
    // User who wrote the note
    int64 user_id = 5;
    // Username of the one who wrote the note
    string user_name = 6;
}

message ProjectNoteCreate {
    // Text of the note
    string text = 1;
}

message ProjectNotePrivate {
    // Full text of note
    string text = 1;
}

message ProjectPrivate {
    // Role inside this project
    enum ProjectPrivate_Role {
        PROJECTPRIVATE_ROLE_OWNER = 0;
        PROJECTPRIVATE_ROLE_COLLABORATOR = 1;
        PROJECTPRIVATE_ROLE_VIEWER = 2;
    }
    ProjectPrivate_Role role = 1;
    // Project storage type
    enum ProjectPrivate_Storage {
        PROJECTPRIVATE_STORAGE_INDIVIDUAL = 0;
        PROJECTPRIVATE_STORAGE_GROUP = 1;
    }
    ProjectPrivate_Storage storage = 2;
}

message ProjectUpdate {
    // Project description
    string description = 1;
    // Grant number or organization(s) that funded this project. Up to 2000 characters permitted.
    string funding = 2;
    // The title for this project - mandatory. 3 - 500 characters.
    string title = 3;
}

message PublicFile {
    // Url for file download
    string download_url = 1;
    // File id
    int64 id = 2;
    // True if file is hosted somewhere else
    bool is_link_only = 3;
    // File name
    string name = 4;
    // File size
    int64 size = 5;
}

message ResponseMessage {
    // Response message text
    string message = 1;
}

message UploadFilePart {
    // Indexes on byte range. zero-based and inclusive
    int64 endOffset = 1;
    // When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.
    bool locked = 2;
    // File part id
    int64 partNo = 3;
    // Indexes on byte range. zero-based and inclusive
    int64 startOffset = 4;
    // part status
    enum UploadFilePart_Statu {
        UPLOADFILEPART_STATU_PENDING = 0;
        UPLOADFILEPART_STATU_COMPLETE = 1;
    }
    UploadFilePart_Statu status = 5;
}

message UploadInfo {
    // md5 provided on upload initialization
    string md5 = 1;
    // name of file on upload server
    string name = 2;
    // Uploads parts
    repeated UploadFilePart parts = 3;
    // size of file in bytes
    int64 size = 4;
    // Upload status
    enum UploadInfo_Statu {
        UPLOADINFO_STATU_PENDING = 0;
        UPLOADINFO_STATU_COMPLETED = 1;
        UPLOADINFO_STATU_ABORTED = 2;
    }
    UploadInfo_Statu status = 5;
    // token received after initializing a file upload
    string token = 6;
}

message Version {
    // Version number
    int64 id = 1;
    // Api endpoint for the item version
    string url = 2;
}

service FigshareService {
    // Private Account information
    // 
    // Account information for token/personal token
    rpc GetAccount(google.protobuf.Empty) returns (Account) {
      option (google.api.http) = {
        get: "/v2/account"
      };
    }
    // Private Articles
    // 
    // Get Own Articles
    rpc GetAccountArticles(GetAccountArticlesRequest) returns (GetAccountArticlesResponse) {
      option (google.api.http) = {
        get: "/v2/account/articles"
      };
    }
    // Create new Article
    // 
    // Create a new Article by sending article information
    rpc PostAccountArticles(PostAccountArticlesRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/articles"
        body: "Article"
      };
    }
    // Private Articles search
    // 
    // Returns a list of private articles filtered by the search parameters
    rpc PostAccountArticlesSearch(PostAccountArticlesSearchRequest) returns (PostAccountArticlesSearchResponse) {
      option (google.api.http) = {
        post: "/v2/account/articles/search"
        body: "search"
      };
    }
    // Article details
    // 
    // View a private article
    rpc GetAccountArticlesArticle_id(GetAccountArticlesArticle_idRequest) returns (ArticleCompletePrivate) {
      option (google.api.http) = {
        get: "/v2/account/articles/{article_id}"
      };
    }
    // Update article
    // 
    // Updating an article by passing body parameters
    rpc PutAccountArticlesArticle_id(PutAccountArticlesArticle_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/articles/{article_id}"
        body: "Article"
      };
    }
    // Delete article
    // 
    // Delete an article
    rpc DeleteAccountArticlesArticle_id(DeleteAccountArticlesArticle_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/articles/{article_id}"
      };
    }
    // List article authors
    // 
    // List article authors
    rpc GetAccountArticlesArticle_idAuthors(GetAccountArticlesArticle_idAuthorsRequest) returns (GetAccountArticlesArticle_idAuthorsResponse) {
      option (google.api.http) = {
        get: "/v2/account/articles/{article_id}/authors"
      };
    }
    // Replace article authors
    // 
    // Associate new authors with the article. This will remove all already associated authors and add these new ones
    rpc PutAccountArticlesArticle_idAuthors(PutAccountArticlesArticle_idAuthorsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/articles/{article_id}/authors"
        body: "Authors"
      };
    }
    // Add article authors
    // 
    // Associate new authors with the article. This will add new authors to the list of already associated authors
    rpc PostAccountArticlesArticle_idAuthors(PostAccountArticlesArticle_idAuthorsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/v2/account/articles/{article_id}/authors"
        body: "Authors"
      };
    }
    // Delete article author
    // 
    // De-associate author from article
    rpc DeleteAccountArticlesArticle_idAuthorsAuthor_id(DeleteAccountArticlesArticle_idAuthorsAuthor_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/articles/{article_id}/authors/{author_id}"
      };
    }
    // List article categories
    // 
    // List article categories
    rpc GetAccountArticlesArticle_idCategories(GetAccountArticlesArticle_idCategoriesRequest) returns (GetAccountArticlesArticle_idCategoriesResponse) {
      option (google.api.http) = {
        get: "/v2/account/articles/{article_id}/categories"
      };
    }
    // Replace article categories
    // 
    // Associate new categories with the article. This will remove all already associated categories and add these new ones
    rpc PutAccountArticlesArticle_idCategories(PutAccountArticlesArticle_idCategoriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/articles/{article_id}/categories"
        body: "categories"
      };
    }
    // Add article categories
    // 
    // Associate new categories with the article. This will add new categories to the list of already associated categories
    rpc PostAccountArticlesArticle_idCategories(PostAccountArticlesArticle_idCategoriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/v2/account/articles/{article_id}/categories"
        body: "categories"
      };
    }
    // Delete article category
    // 
    // De-associate category from article
    rpc DeleteAccountArticlesArticle_idCategoriesCategory_id(DeleteAccountArticlesArticle_idCategoriesCategory_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/articles/{article_id}/categories/{category_id}"
      };
    }
    // Article confidentiality details
    // 
    // View confidentiality settings
    rpc GetAccountArticlesArticle_idConfidentiality(GetAccountArticlesArticle_idConfidentialityRequest) returns (ArticleConfidentiality) {
      option (google.api.http) = {
        get: "/v2/account/articles/{article_id}/confidentiality"
      };
    }
    // Update article confidentiality
    // 
    // Update confidentiality settings
    rpc PutAccountArticlesArticle_idConfidentiality(PutAccountArticlesArticle_idConfidentialityRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/articles/{article_id}/confidentiality"
        body: "reason"
      };
    }
    // Delete article confidentiality
    // 
    // Delete confidentiality settings
    rpc DeleteAccountArticlesArticle_idConfidentiality(DeleteAccountArticlesArticle_idConfidentialityRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/articles/{article_id}/confidentiality"
      };
    }
    // Article Embargo Details
    // 
    // View a private article embargo details
    rpc GetAccountArticlesArticle_idEmbargo(GetAccountArticlesArticle_idEmbargoRequest) returns (ArticleEmbargo) {
      option (google.api.http) = {
        get: "/v2/account/articles/{article_id}/embargo"
      };
    }
    // Update Article Embargo
    // 
    // Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
    rpc PutAccountArticlesArticle_idEmbargo(PutAccountArticlesArticle_idEmbargoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/articles/{article_id}/embargo"
        body: "Embargo"
      };
    }
    // Delete Article Embargo
    // 
    // Will lift the embargo for the specified article
    rpc DeleteAccountArticlesArticle_idEmbargo(DeleteAccountArticlesArticle_idEmbargoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/articles/{article_id}/embargo"
      };
    }
    // List article files
    // 
    // List private files
    rpc GetAccountArticlesArticle_idFiles(GetAccountArticlesArticle_idFilesRequest) returns (GetAccountArticlesArticle_idFilesResponse) {
      option (google.api.http) = {
        get: "/v2/account/articles/{article_id}/files"
      };
    }
    // Initiate Upload
    // 
    // Initiate new file upload within the article. Either use link to provide only an existing file that will not be uploaded on figshare or use the other 3 parameters(md5, name, size)
    rpc PostAccountArticlesArticle_idFiles(PostAccountArticlesArticle_idFilesRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/articles/{article_id}/files"
        body: "File"
      };
    }
    // Single File
    // 
    // View details of file for specified article
    rpc GetAccountArticlesArticle_idFilesFile_id(GetAccountArticlesArticle_idFilesFile_idRequest) returns (PrivateFile) {
      option (google.api.http) = {
        get: "/v2/account/articles/{article_id}/files/{file_id}"
      };
    }
    // Complete Upload
    // 
    // Complete file upload
    rpc PostAccountArticlesArticle_idFilesFile_id(PostAccountArticlesArticle_idFilesFile_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/v2/account/articles/{article_id}/files/{file_id}"
      };
    }
    // File Delete
    // 
    // Complete file upload
    rpc DeleteAccountArticlesArticle_idFilesFile_id(DeleteAccountArticlesArticle_idFilesFile_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/articles/{article_id}/files/{file_id}"
      };
    }
    // List private links
    // 
    // List private links
    rpc GetAccountArticlesArticle_idPrivate_links(GetAccountArticlesArticle_idPrivate_linksRequest) returns (GetAccountArticlesArticle_idPrivate_linksResponse) {
      option (google.api.http) = {
        get: "/v2/account/articles/{article_id}/private_links"
      };
    }
    // Create private link
    // 
    // Create new private link for this article
    rpc PostAccountArticlesArticle_idPrivate_links(PostAccountArticlesArticle_idPrivate_linksRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/articles/{article_id}/private_links"
        body: "private_link"
      };
    }
    // Update private link
    // 
    // Update existing private link for this article
    rpc PutAccountArticlesArticle_idPrivate_linksLink_id(PutAccountArticlesArticle_idPrivate_linksLink_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/articles/{article_id}/private_links/{link_id}"
        body: "private_link"
      };
    }
    // Disable private link
    // 
    // Disable/delete private link for this article
    rpc DeleteAccountArticlesArticle_idPrivate_linksLink_id(DeleteAccountArticlesArticle_idPrivate_linksLink_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/articles/{article_id}/private_links/{link_id}"
      };
    }
    // Private Article Publish
    // 
    // - If the whole article is under embargo, it will not be published immediatly, but when the embargo expires or is lifted.
    // - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
    rpc PostAccountArticlesArticle_idPublish(PostAccountArticlesArticle_idPublishRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/articles/{article_id}/publish"
      };
    }
    // Private Article Reserve DOI
    // 
    // Reserve DOI for article
    rpc PostAccountArticlesArticle_idReserve_doi(PostAccountArticlesArticle_idReserve_doiRequest) returns (ArticleDOI) {
      option (google.api.http) = {
        post: "/v2/account/articles/{article_id}/reserve_doi"
      };
    }
    // Search Authors
    // 
    // Search for authors
    rpc PostAccountAuthorsSearch(PostAccountAuthorsSearchRequest) returns (PostAccountAuthorsSearchResponse) {
      option (google.api.http) = {
        post: "/v2/account/authors/search"
        body: "search"
      };
    }
    // Author details
    // 
    // View author details
    rpc GetAccountAuthorsAuthor_id(GetAccountAuthorsAuthor_idRequest) returns (AuthorComplete) {
      option (google.api.http) = {
        get: "/v2/account/authors/{author_id}"
      };
    }
    // Private Account Categories
    // 
    // List institution categories (including parent Categories)
    rpc GetAccountCategories(google.protobuf.Empty) returns (GetAccountCategoriesResponse) {
      option (google.api.http) = {
        get: "/v2/account/categories"
      };
    }
    // Private Collections List
    // 
    // List private collections
    rpc GetAccountCollections(GetAccountCollectionsRequest) returns (GetAccountCollectionsResponse) {
      option (google.api.http) = {
        get: "/v2/account/collections"
      };
    }
    // Create collection
    // 
    // Create a new Collection by sending collection information
    rpc PostAccountCollections(PostAccountCollectionsRequest) returns (CollectionComplete) {
      option (google.api.http) = {
        post: "/v2/account/collections"
        body: "Collection"
      };
    }
    // Private Collections Search
    // 
    // Returns a list of private Collections
    rpc PostAccountCollectionsSearch(PostAccountCollectionsSearchRequest) returns (PostAccountCollectionsSearchResponse) {
      option (google.api.http) = {
        post: "/v2/account/collections/search"
        body: "search"
      };
    }
    // Collection details
    // 
    // View a collection
    rpc GetAccountCollectionsCollection_id(GetAccountCollectionsCollection_idRequest) returns (CollectionComplete) {
      option (google.api.http) = {
        get: "/v2/account/collections/{collection_id}"
      };
    }
    // Update collection
    // 
    // Update collection details
    rpc PutAccountCollectionsCollection_id(PutAccountCollectionsCollection_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/collections/{collection_id}"
        body: "Collection"
      };
    }
    // Delete collection
    // 
    // Delete n collection
    rpc DeleteAccountCollectionsCollection_id(DeleteAccountCollectionsCollection_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/collections/{collection_id}"
      };
    }
    // List collection articles
    // 
    // List collection articles
    rpc GetAccountCollectionsCollection_idArticles(GetAccountCollectionsCollection_idArticlesRequest) returns (GetAccountCollectionsCollection_idArticlesResponse) {
      option (google.api.http) = {
        get: "/v2/account/collections/{collection_id}/articles"
      };
    }
    // Replace collection articles
    // 
    // Associate new articles with the collection. This will remove all already associated articles and add these new ones
    rpc PutAccountCollectionsCollection_idArticles(PutAccountCollectionsCollection_idArticlesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/collections/{collection_id}/articles"
        body: "articles"
      };
    }
    // Add collection articles
    // 
    // Associate new articles with the collection. This will add new articles to the list of already associated articles
    rpc PostAccountCollectionsCollection_idArticles(PostAccountCollectionsCollection_idArticlesRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/collections/{collection_id}/articles"
        body: "articles"
      };
    }
    // Delete collection article
    // 
    // De-associate article from collection
    rpc DeleteAccountCollectionsCollection_idArticlesArticle_id(DeleteAccountCollectionsCollection_idArticlesArticle_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/collections/{collection_id}/articles/{article_id}"
      };
    }
    // List collection authors
    // 
    // List collection authors
    rpc GetAccountCollectionsCollection_idAuthors(GetAccountCollectionsCollection_idAuthorsRequest) returns (GetAccountCollectionsCollection_idAuthorsResponse) {
      option (google.api.http) = {
        get: "/v2/account/collections/{collection_id}/authors"
      };
    }
    // Replace collection authors
    // 
    // Associate new authors with the collection. This will remove all already associated authors and add these new ones
    rpc PutAccountCollectionsCollection_idAuthors(PutAccountCollectionsCollection_idAuthorsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/collections/{collection_id}/authors"
        body: "Authors"
      };
    }
    // Add collection authors
    // 
    // Associate new authors with the collection. This will add new authors to the list of already associated authors
    rpc PostAccountCollectionsCollection_idAuthors(PostAccountCollectionsCollection_idAuthorsRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/collections/{collection_id}/authors"
        body: "Authors"
      };
    }
    // Delete collection author
    // 
    // Delete collection author
    rpc DeleteAccountCollectionsCollection_idAuthorsAuthor_id(DeleteAccountCollectionsCollection_idAuthorsAuthor_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/collections/{collection_id}/authors/{author_id}"
      };
    }
    // List collection categories
    // 
    // List collection categories
    rpc GetAccountCollectionsCollection_idCategories(GetAccountCollectionsCollection_idCategoriesRequest) returns (GetAccountCollectionsCollection_idCategoriesResponse) {
      option (google.api.http) = {
        get: "/v2/account/collections/{collection_id}/categories"
      };
    }
    // Replace collection categories
    // 
    // Associate new categories with the collection. This will remove all already associated categories and add these new ones
    rpc PutAccountCollectionsCollection_idCategories(PutAccountCollectionsCollection_idCategoriesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/collections/{collection_id}/categories"
        body: "categories"
      };
    }
    // Add collection categories
    // 
    // Associate new categories with the collection. This will add new categories to the list of already associated categories
    rpc PostAccountCollectionsCollection_idCategories(PostAccountCollectionsCollection_idCategoriesRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/collections/{collection_id}/categories"
        body: "categories"
      };
    }
    // Delete collection category
    // 
    // De-associate category from collection
    rpc DeleteAccountCollectionsCollection_idCategoriesCategory_id(DeleteAccountCollectionsCollection_idCategoriesCategory_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/collections/{collection_id}/categories/{category_id}"
      };
    }
    // List collection private links
    // 
    // List article private links
    rpc GetAccountCollectionsCollection_idPrivate_links(GetAccountCollectionsCollection_idPrivate_linksRequest) returns (GetAccountCollectionsCollection_idPrivate_linksResponse) {
      option (google.api.http) = {
        get: "/v2/account/collections/{collection_id}/private_links"
      };
    }
    // Create collection private link
    // 
    // Create new private link
    rpc PostAccountCollectionsCollection_idPrivate_links(PostAccountCollectionsCollection_idPrivate_linksRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/collections/{collection_id}/private_links"
        body: "private_link"
      };
    }
    // Update collection private link
    // 
    // Update existing private link for this collection
    rpc PutAccountCollectionsCollection_idPrivate_linksLink_id(PutAccountCollectionsCollection_idPrivate_linksLink_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/collections/{collection_id}/private_links/{link_id}"
        body: "private_link"
      };
    }
    // Disable private link
    // 
    // Disable/delete private link for this collection
    rpc DeleteAccountCollectionsCollection_idPrivate_linksLink_id(DeleteAccountCollectionsCollection_idPrivate_linksLink_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/collections/{collection_id}/private_links/{link_id}"
      };
    }
    // Private Collection Publish
    // 
    // When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
    rpc PostAccountCollectionsCollection_idPublish(PostAccountCollectionsCollection_idPublishRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/collections/{collection_id}/publish"
      };
    }
    // Private Collection Reserve DOI
    // 
    // Reserve DOI for collection
    rpc PostAccountCollectionsCollection_idReserve_doi(PostAccountCollectionsCollection_idReserve_doiRequest) returns (ArticleDOI) {
      option (google.api.http) = {
        post: "/v2/account/collections/{collection_id}/reserve_doi"
      };
    }
    // Private Account Institutions
    // 
    // Account institution details
    rpc GetAccountInstitution(google.protobuf.Empty) returns (Institution) {
      option (google.api.http) = {
        get: "/v2/account/institution"
      };
    }
    // Private Institution Articles
    // 
    // Get Articles from own institution. User must be administrator of the institution
    rpc GetAccountInstitutionArticles(GetAccountInstitutionArticlesRequest) returns (GetAccountInstitutionArticlesResponse) {
      option (google.api.http) = {
        get: "/v2/account/institution/articles"
      };
    }
    // Private Account Institution Groups
    // 
    // Returns the groups for which the account has administrative privileges (assigned and inherited).
    rpc GetAccountInstitutionGroups(google.protobuf.Empty) returns (GetAccountInstitutionGroupsResponse) {
      option (google.api.http) = {
        get: "/v2/account/institution/groups"
      };
    }
    // Private Account Licenses
    // 
    // This is a private endpoint that requires OAuth. It will return a list with figshare public licenses AND licenses defined for account's institution.
    rpc GetAccountLicenses(google.protobuf.Empty) returns (GetAccountLicensesResponse) {
      option (google.api.http) = {
        get: "/v2/account/licenses"
      };
    }
    // Private Projects
    // 
    // List private projects
    rpc GetAccountProjects(GetAccountProjectsRequest) returns (GetAccountProjectsResponse) {
      option (google.api.http) = {
        get: "/v2/account/projects"
      };
    }
    // Create project
    // 
    // Create a new project
    rpc PostAccountProjects(PostAccountProjectsRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/projects"
        body: "Project"
      };
    }
    // Private Projects search
    // 
    // Search inside the private projects
    rpc PostAccountProjectsSearch(PostAccountProjectsSearchRequest) returns (PostAccountProjectsSearchResponse) {
      option (google.api.http) = {
        post: "/v2/account/projects/search"
        body: "search"
      };
    }
    // View project details
    // 
    // View a private project
    rpc GetAccountProjectsProject_id(GetAccountProjectsProject_idRequest) returns (ProjectCompletePrivate) {
      option (google.api.http) = {
        get: "/v2/account/projects/{project_id}"
      };
    }
    // Update project
    // 
    // Updating an project by passing body parameters
    rpc PutAccountProjectsProject_id(PutAccountProjectsProject_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/projects/{project_id}"
        body: "Project"
      };
    }
    // Delete project
    // 
    // A project can be deleted only if: - it is not public - it does not have public articles.
    // 
    // When an individual project is deleted, all the articles are moved to my data of each owner.
    // 
    // When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project.
    rpc DeleteAccountProjectsProject_id(DeleteAccountProjectsProject_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/projects/{project_id}"
      };
    }
    // List project articles
    // 
    // List project articles
    rpc GetAccountProjectsProject_idArticles(GetAccountProjectsProject_idArticlesRequest) returns (GetAccountProjectsProject_idArticlesResponse) {
      option (google.api.http) = {
        get: "/v2/account/projects/{project_id}/articles"
      };
    }
    // Create project article
    // 
    // Create a new Article and associate it with this project
    rpc PostAccountProjectsProject_idArticles(PostAccountProjectsProject_idArticlesRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/projects/{project_id}/articles"
        body: "Article"
      };
    }
    // Project article details
    // 
    // Project article details
    rpc GetAccountProjectsProject_idArticlesArticle_id(GetAccountProjectsProject_idArticlesArticle_idRequest) returns (ProjectArticle) {
      option (google.api.http) = {
        get: "/v2/account/projects/{project_id}/articles/{article_id}"
      };
    }
    // Delete project article
    // 
    // Delete project article
    rpc DeleteAccountProjectsProject_idArticlesArticle_id(DeleteAccountProjectsProject_idArticlesArticle_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/projects/{project_id}/articles/{article_id}"
      };
    }
    // Project article list files
    // 
    // List article files
    rpc GetAccountProjectsProject_idArticlesArticle_idFiles(GetAccountProjectsProject_idArticlesArticle_idFilesRequest) returns (GetAccountProjectsProject_idArticlesArticle_idFilesResponse) {
      option (google.api.http) = {
        get: "/v2/account/projects/{project_id}/articles/{article_id}/files"
      };
    }
    // Project article file details
    // 
    // Project article file details
    rpc GetAccountProjectsProject_idArticlesArticle_idFilesFile_id(GetAccountProjectsProject_idArticlesArticle_idFilesFile_idRequest) returns (PrivateFile) {
      option (google.api.http) = {
        get: "/v2/account/projects/{project_id}/articles/{article_id}/files/{file_id}"
      };
    }
    // List project collaborators
    // 
    // List Project collaborators and invited users
    rpc GetAccountProjectsProject_idCollaborators(GetAccountProjectsProject_idCollaboratorsRequest) returns (GetAccountProjectsProject_idCollaboratorsResponse) {
      option (google.api.http) = {
        get: "/v2/account/projects/{project_id}/collaborators"
      };
    }
    // Invite project collaborators
    // 
    // Invite users to collaborate on project or view the project
    rpc PostAccountProjectsProject_idCollaborators(PostAccountProjectsProject_idCollaboratorsRequest) returns (ResponseMessage) {
      option (google.api.http) = {
        post: "/v2/account/projects/{project_id}/collaborators"
        body: "Collaborator"
      };
    }
    // Remove project collaborator
    // 
    // Remove project collaborator
    rpc DeleteAccountProjectsProject_idCollaboratorsUser_id(DeleteAccountProjectsProject_idCollaboratorsUser_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/projects/{project_id}/collaborators/{user_id}"
      };
    }
    // Private Project Leave
    // 
    // Please note: project's owner cannot leave the project.
    rpc PostAccountProjectsProject_idLeave(PostAccountProjectsProject_idLeaveRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/v2/account/projects/{project_id}/leave"
      };
    }
    // List project notes
    // 
    // List project notes
    rpc GetAccountProjectsProject_idNotes(GetAccountProjectsProject_idNotesRequest) returns (GetAccountProjectsProject_idNotesResponse) {
      option (google.api.http) = {
        get: "/v2/account/projects/{project_id}/notes"
      };
    }
    // Create project note
    // 
    // Create a new project note
    rpc PostAccountProjectsProject_idNotes(PostAccountProjectsProject_idNotesRequest) returns (Location) {
      option (google.api.http) = {
        post: "/v2/account/projects/{project_id}/notes"
        body: "Note"
      };
    }
    // Project note details
    rpc GetAccountProjectsProject_idNotesNote_id(GetAccountProjectsProject_idNotesNote_idRequest) returns (ProjectNotePrivate) {
      option (google.api.http) = {
        get: "/v2/account/projects/{project_id}/notes/{note_id}"
      };
    }
    // Update project note
    rpc PutAccountProjectsProject_idNotesNote_id(PutAccountProjectsProject_idNotesNote_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v2/account/projects/{project_id}/notes/{note_id}"
        body: "Note"
      };
    }
    // Delete project note
    rpc DeleteAccountProjectsProject_idNotesNote_id(DeleteAccountProjectsProject_idNotesNote_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v2/account/projects/{project_id}/notes/{note_id}"
      };
    }
    // Private Project Publish
    // 
    // Publish a project. Possible after all items inside it are public
    rpc PostAccountProjectsProject_idPublish(PostAccountProjectsProject_idPublishRequest) returns (ResponseMessage) {
      option (google.api.http) = {
        post: "/v2/account/projects/{project_id}/publish"
      };
    }
    // Public Articles
    // 
    // Returns a list of public articles
    rpc GetArticles(GetArticlesRequest) returns (GetArticlesResponse) {
      option (google.api.http) = {
        get: "/v2/articles"
      };
    }
    // Public Articles Search
    // 
    // Returns a list of public articles, filtered by the search parameters
    rpc PostArticlesSearch(PostArticlesSearchRequest) returns (PostArticlesSearchResponse) {
      option (google.api.http) = {
        post: "/v2/articles/search"
        body: "search"
      };
    }
    // View article details
    // 
    // View an article
    rpc GetArticlesArticle_id(GetArticlesArticle_idRequest) returns (ArticleComplete) {
      option (google.api.http) = {
        get: "/v2/articles/{article_id}"
      };
    }
    // List article files
    // 
    // Files list for article
    rpc GetArticlesArticle_idFiles(GetArticlesArticle_idFilesRequest) returns (GetArticlesArticle_idFilesResponse) {
      option (google.api.http) = {
        get: "/v2/articles/{article_id}/files"
      };
    }
    // Article file details
    // 
    // File by id
    rpc GetArticlesArticle_idFilesFile_id(GetArticlesArticle_idFilesFile_idRequest) returns (PublicFile) {
      option (google.api.http) = {
        get: "/v2/articles/{article_id}/files/{file_id}"
      };
    }
    // List article versions
    // 
    // List public article versions
    rpc GetArticlesArticle_idVersions(GetArticlesArticle_idVersionsRequest) returns (GetArticlesArticle_idVersionsResponse) {
      option (google.api.http) = {
        get: "/v2/articles/{article_id}/versions"
      };
    }
    // Article details for version
    // 
    // Article with specified version
    rpc GetArticlesArticle_idVersionsV_number(GetArticlesArticle_idVersionsV_numberRequest) returns (ArticleComplete) {
      option (google.api.http) = {
        get: "/v2/articles/{article_id}/versions/{v_number}"
      };
    }
    // Public Article Confidentiality for article version
    // 
    // Confidentiality for article version
    rpc GetArticlesArticle_idVersionsV_numberConfidentiality(GetArticlesArticle_idVersionsV_numberConfidentialityRequest) returns (ArticleConfidentiality) {
      option (google.api.http) = {
        get: "/v2/articles/{article_id}/versions/{v_number}/confidentiality"
      };
    }
    // Public Article Embargo for article version
    // 
    // Embargo for article version
    rpc GetArticlesArticle_idVersionsV_numberEmbargo(GetArticlesArticle_idVersionsV_numberEmbargoRequest) returns (ArticleEmbargo) {
      option (google.api.http) = {
        get: "/v2/articles/{article_id}/versions/{v_number}/embargo"
      };
    }
    // Public Categories
    // 
    // Returns a list of public categories
    rpc GetCategories(google.protobuf.Empty) returns (GetCategoriesResponse) {
      option (google.api.http) = {
        get: "/v2/categories"
      };
    }
    // Public Collections
    // 
    // Returns a list of public collections
    rpc GetCollections(GetCollectionsRequest) returns (GetCollectionsResponse) {
      option (google.api.http) = {
        get: "/v2/collections"
      };
    }
    // Public Collections Search
    // 
    // Returns a list of public collections
    rpc PostCollectionsSearch(PostCollectionsSearchRequest) returns (PostCollectionsSearchResponse) {
      option (google.api.http) = {
        post: "/v2/collections/search"
        body: "search"
      };
    }
    // Collection details
    // 
    // View a collection
    rpc GetCollectionsCollection_id(GetCollectionsCollection_idRequest) returns (CollectionComplete) {
      option (google.api.http) = {
        get: "/v2/collections/{collection_id}"
      };
    }
    // Public Collection Articles
    // 
    // Returns a list of public collection articles
    rpc GetCollectionsCollection_idArticles(GetCollectionsCollection_idArticlesRequest) returns (GetCollectionsCollection_idArticlesResponse) {
      option (google.api.http) = {
        get: "/v2/collections/{collection_id}/articles"
      };
    }
    // Collection Versions list
    // 
    // Returns a list of public collection Versions
    rpc GetCollectionsCollection_idVersions(GetCollectionsCollection_idVersionsRequest) returns (GetCollectionsCollection_idVersionsResponse) {
      option (google.api.http) = {
        get: "/v2/collections/{collection_id}/versions"
      };
    }
    // Collection Version details
    // 
    // View details for a certain version of a collection
    rpc GetCollectionsCollection_idVersionsVersion_id(GetCollectionsCollection_idVersionsVersion_idRequest) returns (CollectionComplete) {
      option (google.api.http) = {
        get: "/v2/collections/{collection_id}/versions/{version_id}"
      };
    }
    // Public File Download
    // 
    // Starts the download of a file
    rpc GetFileDownloadFile_id(GetFileDownloadFile_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v2/file/download/{file_id}"
      };
    }
    // Private Institution HRfeed Upload
    // 
    // More info in the <a href="#hr_feed">HR Feed section</a>
    rpc PostInstitutionHrfeedUpload(PostInstitutionHrfeedUploadRequest) returns (ResponseMessage) {
      option (google.api.http) = {
        post: "/v2/institution/hrfeed/upload"
      };
    }
    // Public Licenses
    // 
    // Returns a list of articles belonging to the institution
    rpc GetInstitutionsInstitution_string_idArticlesFilterBy(GetInstitutionsInstitution_string_idArticlesFilterByRequest) returns (GetInstitutionsInstitution_string_idArticlesFilterByResponse) {
      option (google.api.http) = {
        get: "/v2/institutions/{institution_string_id}/articles/filter-by"
      };
    }
    // Public Licenses
    // 
    // Returns a list of public licenses
    rpc GetLicenses(google.protobuf.Empty) returns (GetLicensesResponse) {
      option (google.api.http) = {
        get: "/v2/licenses"
      };
    }
    // Public Projects
    // 
    // Returns a list of public projects
    rpc GetProjects(GetProjectsRequest) returns (GetProjectsResponse) {
      option (google.api.http) = {
        get: "/v2/projects"
      };
    }
    // Public Projects Search
    // 
    // Returns a list of public articles
    rpc PostProjectsSearch(PostProjectsSearchRequest) returns (PostProjectsSearchResponse) {
      option (google.api.http) = {
        post: "/v2/projects/search"
        body: "search"
      };
    }
    // Public Project
    // 
    // View a project
    rpc GetProjectsProject_id(GetProjectsProject_idRequest) returns (ProjectComplete) {
      option (google.api.http) = {
        get: "/v2/projects/{project_id}"
      };
    }
    // Public Project Articles
    // 
    // List articles in project
    rpc GetProjectsProject_idArticles(GetProjectsProject_idArticlesRequest) returns (GetProjectsProject_idArticlesResponse) {
      option (google.api.http) = {
        get: "/v2/projects/{project_id}/articles"
      };
    }
}

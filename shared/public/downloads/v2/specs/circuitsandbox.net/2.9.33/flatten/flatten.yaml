basePath: /rest/v2
definitions.Attachment.properties.creationTime.description: not available
definitions.Attachment.properties.creationTime.format: int64
definitions.Attachment.properties.creationTime.type: number
definitions.Attachment.properties.creatorId.description: not available
definitions.Attachment.properties.creatorId.type: string
definitions.Attachment.properties.deleteUrl.description: not available
definitions.Attachment.properties.deleteUrl.type: string
definitions.Attachment.properties.fileId.description: not available
definitions.Attachment.properties.fileId.type: string
definitions.Attachment.properties.fileName.description: not available
definitions.Attachment.properties.fileName.type: string
definitions.Attachment.properties.itemId.description: not available
definitions.Attachment.properties.itemId.type: string
definitions.Attachment.properties.mimeType.description: not available
definitions.Attachment.properties.mimeType.type: string
definitions.Attachment.properties.modificationTime.description: not available
definitions.Attachment.properties.modificationTime.format: int64
definitions.Attachment.properties.modificationTime.type: number
definitions.Attachment.properties.size.description: not available
definitions.Attachment.properties.size.format: int64
definitions.Attachment.properties.size.type: number
definitions.Attachment.properties.url.description: not available
definitions.Attachment.properties.url.type: string
definitions.BridgeNumber.properties.bridgeNumber.description: The number that has
  to be called to join the real time session of a conversation
definitions.BridgeNumber.properties.bridgeNumber.type: string
definitions.BridgeNumber.properties.country.description: The country where the bridge
  is hosted
definitions.BridgeNumber.properties.country.type: string
definitions.BridgeNumber.properties.locale.description: The locale of the bridge
definitions.BridgeNumber.properties.locale.type: string
definitions.BridgeNumber.properties.name.description: The name / identifier of the
  bridge
definitions.BridgeNumber.properties.name.type: string
definitions.BridgeNumber.properties.type.description: Information of the billing for
  the call, i.e. if the caller has to pay or not for the call
definitions.BridgeNumber.properties.type.type: string
definitions.Conversation.properties.avatar.description: The URL of the small avatar
  image of the conversation
definitions.Conversation.properties.avatar.type: string
definitions.Conversation.properties.avatarLarge.description: The URL of the large
  avatar image of the conversation
definitions.Conversation.properties.avatarLarge.type: string
definitions.Conversation.properties.convId.description: The ID of the conversation
definitions.Conversation.properties.convId.type: string
definitions.Conversation.properties.creationTime.description: UTC timestamp when the
  conversation was created
definitions.Conversation.properties.creationTime.format: int64
definitions.Conversation.properties.creationTime.type: number
definitions.Conversation.properties.creatorId.description: The ID of the user who
  created the conversation
definitions.Conversation.properties.creatorId.type: string
definitions.Conversation.properties.creatorTenantId.description: The ID of the Circuit
  domain (tenant) where the creator of the conversation belongs to
definitions.Conversation.properties.creatorTenantId.type: string
definitions.Conversation.properties.description.description: The description of the
  conversation. This field is available only for conversations with type COMMUNITY
definitions.Conversation.properties.description.type: string
definitions.Conversation.properties.isGuestAccessDisabled.description: Indicates whether
  guest access to the conversation is disabled or not
definitions.Conversation.properties.isGuestAccessDisabled.type: boolean
definitions.Conversation.properties.isModerated.description: Indicates whether the
  conversation is moderated or not. In a moderated conversation only participants
  who have been assigned the role of a moderator are allowed to add or remove participants
  into the conversation
definitions.Conversation.properties.isModerated.type: boolean
definitions.Conversation.properties.modificationTime.description: UTC timestamp when
  the conversation was modified. A conversation is modified when any of the conversation
  object fields change but not when conversation items are added or edited
definitions.Conversation.properties.modificationTime.format: int64
definitions.Conversation.properties.modificationTime.type: number
definitions.Conversation.properties.participants.description: Array of active participants
definitions.Conversation.properties.participants.items.type: string
definitions.Conversation.properties.participants.type: array
definitions.Conversation.properties.topic.description: The title of the conversation.
  Conversations of type DIRECT cannot have a title
definitions.Conversation.properties.topic.type: string
definitions.Conversation.properties.type.description: 'The type of the conversation.
  It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE'
definitions.Conversation.properties.type.type: string
definitions.ConversationDetails.properties.bridgeNumbers.description: A list of bridge
  numbers which can be used to dial in to the real time session via phone
definitions.ConversationDetails.properties.bridgeNumbers.items.$ref: '#/definitions/BridgeNumber'
definitions.ConversationDetails.properties.bridgeNumbers.type: array
definitions.ConversationDetails.properties.conversationCreatorId.description: The
  user ID of the conversation creator
definitions.ConversationDetails.properties.conversationCreatorId.type: string
definitions.ConversationDetails.properties.isModerationAllowed.description: Indicates
  if the conversation is allowed to be moderated
definitions.ConversationDetails.properties.isModerationAllowed.type: boolean
definitions.ConversationDetails.properties.isRecordingAllowed.description: Indicates
  if the conversation is allowed to be recorded
definitions.ConversationDetails.properties.isRecordingAllowed.type: boolean
definitions.ConversationDetails.properties.link.description: A link that can be used
  in a browser to join the session
definitions.ConversationDetails.properties.link.type: string
definitions.ConversationDetails.properties.pin.description: The PIN to join a real
  time session via phone
definitions.ConversationDetails.properties.pin.type: string
definitions.ConversationItem.properties.attachments.description: Array of files attached
  to the item
definitions.ConversationItem.properties.attachments.items.$ref: '#/definitions/Attachment'
definitions.ConversationItem.properties.attachments.type: array
definitions.ConversationItem.properties.convId.description: The ID of the conversation
  the item belongs to
definitions.ConversationItem.properties.convId.type: string
definitions.ConversationItem.properties.creationTime.description: UTC timestamp when
  the item was created
definitions.ConversationItem.properties.creationTime.format: int64
definitions.ConversationItem.properties.creationTime.type: number
definitions.ConversationItem.properties.creatorId.description: The ID of the user
  who created the conversation item
definitions.ConversationItem.properties.creatorId.type: string
definitions.ConversationItem.properties.includeInUnreadCount.description: Indicates
  whether the item is included in the unread message count
definitions.ConversationItem.properties.includeInUnreadCount.type: boolean
definitions.ConversationItem.properties.itemId.description: The ID of the item
definitions.ConversationItem.properties.itemId.type: string
definitions.ConversationItem.properties.modificationTime.description: UTC timestamp
  when the conversation was modified
definitions.ConversationItem.properties.modificationTime.format: int64
definitions.ConversationItem.properties.modificationTime.type: number
definitions.ConversationItem.properties.rtc.$ref: '#/definitions/RtcItem'
definitions.ConversationItem.properties.system.$ref: '#/definitions/SystemItem'
definitions.ConversationItem.properties.text.$ref: '#/definitions/ConversationTextItem'
definitions.ConversationItem.properties.type.description: The type of the conversation
  item. It can be one of the following TEXT, SYSTEM or RTC
definitions.ConversationItem.properties.type.type: string
definitions.ConversationSearchResult.properties.matchingConversations.description: A
  list of result items for conversations that match the search term.
definitions.ConversationSearchResult.properties.matchingConversations.items.$ref: '#/definitions/ConversationSearchResultItem'
definitions.ConversationSearchResult.properties.matchingConversations.type: array
definitions.ConversationSearchResultItem.properties.convId.description: The ID of
  the conversation to which the matching items belong.
definitions.ConversationSearchResultItem.properties.convId.type: string
definitions.ConversationSearchResultItem.properties.itemIds.description: The conversation
  items which contain the search result. The list maybe empty in case a hit was found
  for the conversation related data like topic or participants.
definitions.ConversationSearchResultItem.properties.itemIds.items.type: string
definitions.ConversationSearchResultItem.properties.itemIds.type: array
definitions.ConversationTextItem.properties.content.description: The content of the
  text item
definitions.ConversationTextItem.properties.content.type: string
definitions.ConversationTextItem.properties.contentType.description: 'The type of
  the text item. It can be one of the following: RICH (with HTML content) or PLAIN
  (only text)'
definitions.ConversationTextItem.properties.contentType.type: string
definitions.ConversationTextItem.properties.likedUserIds.description: Array of IDs
  of the users who liked the item
definitions.ConversationTextItem.properties.likedUserIds.items.type: string
definitions.ConversationTextItem.properties.likedUserIds.type: array
definitions.ConversationTextItem.properties.parentId.description: The ID of the parent
  item of the text item. This field is optional and can be used for thread views
definitions.ConversationTextItem.properties.parentId.type: string
definitions.ConversationTextItem.properties.preview.$ref: '#/definitions/Preview'
definitions.ConversationTextItem.properties.state.description: 'The state of the text
  item. It can be one of the following: CREATED (which denotes that it was not modified
  since its creation), EDITED (which denotes that the creator of this item modified
  the item) or DELETED (which denotes that the item itself exists but its content
  was removed)'
definitions.ConversationTextItem.properties.state.type: string
definitions.ConversationTextItem.properties.subject.description: TThe subject of the
  text item. This field is optional and maybe filled when creating the text item
definitions.ConversationTextItem.properties.subject.type: string
definitions.Label.properties.labelId.description: not available
definitions.Label.properties.labelId.type: string
definitions.Label.properties.value.description: The clear text value
definitions.Label.properties.value.type: string
definitions.OAuthClientId.properties.accessTokenURL.description: The URL to fetch
  the access token for an authorization code
definitions.OAuthClientId.properties.accessTokenURL.type: string
definitions.OAuthClientId.properties.applicationName.description: A free text identifier
  of the application that uses the client ID
definitions.OAuthClientId.properties.applicationName.type: string
definitions.OAuthClientId.properties.authorizationURL.description: The URL to redirect
  a user for Circuit authentication
definitions.OAuthClientId.properties.authorizationURL.type: string
definitions.OAuthClientId.properties.clientId.description: The client ID
definitions.OAuthClientId.properties.clientId.type: string
definitions.OAuthClientId.properties.domains.description: The valid domains for the
  client ID
definitions.OAuthClientId.properties.domains.items.type: string
definitions.OAuthClientId.properties.domains.type: array
definitions.OAuthClientId.properties.grantTypes.description: A list of grant types
  which are supported by this client ID
definitions.OAuthClientId.properties.grantTypes.items.type: string
definitions.OAuthClientId.properties.grantTypes.type: array
definitions.OAuthClientId.properties.scopes.description: The available scopes for
  OAUTH 2.0 access
definitions.OAuthClientId.properties.scopes.items.type: string
definitions.OAuthClientId.properties.scopes.type: array
definitions.OAuthClientId.properties.ttl.description: The TTL for a token generated
  with this client ID
definitions.OAuthClientId.properties.ttl.type: string
definitions.OAuthClientId.properties.userId.description: The ID of the user who owns
  a token
definitions.OAuthClientId.properties.userId.type: string
definitions.Presence.properties.dndUntil.description: Timestamp until the DND state
  of the user is active
definitions.Presence.properties.dndUntil.format: int64
definitions.Presence.properties.dndUntil.type: number
definitions.Presence.properties.isOptedOut.description: Indicates whether the user
  has opted out of their presence
definitions.Presence.properties.isOptedOut.type: boolean
definitions.Presence.properties.latitude.description: The latitude of the geo location
  of the user
definitions.Presence.properties.latitude.format: float
definitions.Presence.properties.latitude.type: number
definitions.Presence.properties.locationText.description: The geo location of the
  user in clear text
definitions.Presence.properties.locationText.type: string
definitions.Presence.properties.longitude.description: The longitude of the geo location
  of the user
definitions.Presence.properties.longitude.format: float
definitions.Presence.properties.longitude.type: number
definitions.Presence.properties.mobile.description: Identifies whether the presence
  state is based on the state information of a mobile device or not
definitions.Presence.properties.mobile.type: boolean
definitions.Presence.properties.poor.description: n/a
definitions.Presence.properties.poor.type: boolean
definitions.Presence.properties.state.description: 'The presence state of the user.
  It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)'
definitions.Presence.properties.state.type: string
definitions.Presence.properties.statusMessage.description: A free formed status message
  of the user
definitions.Presence.properties.statusMessage.type: string
definitions.Presence.properties.timeZoneOffset.description: The timezone offset of
  the user compared to UTC
definitions.Presence.properties.timeZoneOffset.format: int32
definitions.Presence.properties.timeZoneOffset.type: number
definitions.Presence.properties.userId.description: The ID of the user
definitions.Presence.properties.userId.type: string
definitions.Preview.properties.imageURI.description: n/a
definitions.Preview.properties.imageURI.type: string
definitions.Preview.properties.srcURL.description: n/a
definitions.Preview.properties.srcURL.type: string
definitions.Preview.properties.title.description: n/a
definitions.Preview.properties.title.type: string
definitions.Preview.properties.type.description: n/a
definitions.Preview.properties.type.type: string
definitions.RtcItem.properties.missed.description: Indicates a missed call
definitions.RtcItem.properties.missed.type: string
definitions.RtcItem.properties.type.description: The type of the RTC item
definitions.RtcItem.properties.type.type: string
definitions.SystemItem.properties.affectedParticipants.description: not available
definitions.SystemItem.properties.affectedParticipants.items.type: string
definitions.SystemItem.properties.affectedParticipants.type: array
definitions.SystemItem.properties.newTopic.description: not available
definitions.SystemItem.properties.newTopic.type: string
definitions.SystemItem.properties.oldTopic.description: not available
definitions.SystemItem.properties.oldTopic.type: string
definitions.SystemItem.properties.type.description: The type of the system item
definitions.SystemItem.properties.type.type: string
definitions.User.properties.company.description: The name of the user's company
definitions.User.properties.company.type: string
definitions.User.properties.displayName.description: The user's display name
definitions.User.properties.displayName.type: string
definitions.User.properties.emailAddress.description: The primary email address of
  the user
definitions.User.properties.emailAddress.type: string
definitions.User.properties.firstName.description: The first name of the user
definitions.User.properties.firstName.type: string
definitions.User.properties.jobTitle.description: The job title of the user
definitions.User.properties.jobTitle.type: string
definitions.User.properties.lastName.description: The last name of the user
definitions.User.properties.lastName.type: string
definitions.User.properties.locale.description: The locale of the user. (E.g. en-US,
  de-DE)
definitions.User.properties.locale.type: string
definitions.User.properties.userId.description: The ID of the user
definitions.User.properties.userId.type: string
definitions.User.properties.userPresenceState.$ref: '#/definitions/Presence'
definitions.ValidateAccessToken.properties.accessToken.description: The access token
  issued by the authorization server
definitions.ValidateAccessToken.properties.accessToken.type: string
definitions.ValidateAccessToken.properties.clientId.description: The client ID used
  to generate the access token
definitions.ValidateAccessToken.properties.clientId.type: string
definitions.ValidateAccessToken.properties.expirationTime.description: The date when
  the token expires
definitions.ValidateAccessToken.properties.expirationTime.format: int64
definitions.ValidateAccessToken.properties.expirationTime.type: number
definitions.ValidateAccessToken.properties.scopes.description: Array of the scopes
  of the access token
definitions.ValidateAccessToken.properties.scopes.items.type: string
definitions.ValidateAccessToken.properties.scopes.type: array
definitions.WebHook.properties.creationTime.description: The time when this WebHook
  was created. This does not necessary mean the time when an manifest file was created.
definitions.WebHook.properties.creationTime.format: int64
definitions.WebHook.properties.creationTime.type: number
definitions.WebHook.properties.filter.description: An optional list of filter parameters
  for this webhook.
definitions.WebHook.properties.filter.items.type: string
definitions.WebHook.properties.filter.type: array
definitions.WebHook.properties.id.description: The unique identifier for this webhook.
  Can be used later to unregister the webhook.
definitions.WebHook.properties.id.type: string
definitions.WebHook.properties.subscriptionIds.description: The optional list of userids
  for which this webhook is subscribed, i.e. presence events for the user are forwarded
  to the WebHook callback URL.
definitions.WebHook.properties.subscriptionIds.items.type: string
definitions.WebHook.properties.subscriptionIds.type: array
definitions.WebHook.properties.type.description: The type of a WebHook. This can either
  be MANUAL or EXTENSION. While manual WebHooks are only temporary and for development
  only use, permanent ones (EXTENSION) will bemanaged by the system.
definitions.WebHook.properties.type.type: string
definitions.WebHook.properties.url.description: The callback URL of this webhook.
definitions.WebHook.properties.url.type: string
definitions.WebHook.properties.userId.description: The user ID for which this webhook
  is subscribed, i.e. events for this user are forwarded to the WebHook callback URL.
definitions.WebHook.properties.userId.type: string
host: circuitsandbox.net
info.description: |-
  Circuit REST API to interact with the Circuit system.

  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
info.title: REST API Version 2
info.version: 2.9.33
info.x-apisguru-categories.length: 1
info.x-apisguru-categories[0]: messaging
info.x-logo.backgroundColor: '#FFFFFF'
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_463690034235731970_0fImzk_g_400x400.png
info.x-origin.length: 1
info.x-origin[0].format: swagger
info.x-origin[0].url: https://circuitsandbox.net/rest/v2/swagger
info.x-origin[0].version: "2.0"
info.x-preferred: true
info.x-providerName: circuitsandbox.net
paths./conversations.get.consumes.length: 1
paths./conversations.get.consumes[0]: application/x-www-form-urlencoded
paths./conversations.get.description: Gets a list of conversations and communities
  the authenticated user participates in.
paths./conversations.get.operationId: getConversations
paths./conversations.get.parameters.length: 3
paths./conversations.get.parameters[0].description: The modification time of the conversation
  in UTC format. During the query the conversations before (<i>default</i>) or after
  this timestamp are returned. In case no timestamp is specified the current server
  time in UTC is used, i.e. the last 25 modified conversations are returned
paths./conversations.get.parameters[0].format: date-time
paths./conversations.get.parameters[0].in: query
paths./conversations.get.parameters[0].name: modTime
paths./conversations.get.parameters[0].required: false
paths./conversations.get.parameters[0].type: string
paths./conversations.get.parameters[1].default: BEFORE
paths./conversations.get.parameters[1].description: The direction of the search based
  on the modification time. Valid values are either BEFORE (default) or AFTER
paths./conversations.get.parameters[1].enum.length: 2
paths./conversations.get.parameters[1].enum[0]: BEFORE
paths./conversations.get.parameters[1].enum[1]: AFTER
paths./conversations.get.parameters[1].in: query
paths./conversations.get.parameters[1].maxLength: 255
paths./conversations.get.parameters[1].name: direction
paths./conversations.get.parameters[1].required: false
paths./conversations.get.parameters[1].type: string
paths./conversations.get.parameters[2].default: 25
paths./conversations.get.parameters[2].description: The maximum number of returned
  results (default 25). The maximum allowed value is 100.
paths./conversations.get.parameters[2].format: int32
paths./conversations.get.parameters[2].in: query
paths./conversations.get.parameters[2].maximum: 100
paths./conversations.get.parameters[2].minimum: 1
paths./conversations.get.parameters[2].name: results
paths./conversations.get.parameters[2].required: false
paths./conversations.get.parameters[2].type: number
paths./conversations.get.produces.length: 2
paths./conversations.get.produces[0]: application/json
paths./conversations.get.produces[1]: application/xml
paths./conversations.get.responses.200.description: The matching conversations
paths./conversations.get.responses.200.schema.items.$ref: '#/definitions/Conversation'
paths./conversations.get.responses.200.schema.type: array
paths./conversations.get.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>a field constraint is violated</li></ul>'
paths./conversations.get.responses.401.description: The authentication was not successful
paths./conversations.get.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./conversations.get.responses.503.description: The server is currently unable
  to receive requests.
paths./conversations.get.security.length: 1
paths./conversations.get.security[0].oauth.length: 2
paths./conversations.get.security[0].oauth[0]: ALL
paths./conversations.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./conversations.get.summary: Gets a list of conversations
paths./conversations.get.tags.length: 1
paths./conversations.get.tags[0]: Conversation Queries
paths./conversations/{convId}.get.consumes.length: 1
paths./conversations/{convId}.get.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}.get.description: Gets a conversation based on the given
  ID.
paths./conversations/{convId}.get.operationId: getConversationbyId
paths./conversations/{convId}.get.parameters.length: 1
paths./conversations/{convId}.get.parameters[0].description: The ID of the conversation
  which should be updated
paths./conversations/{convId}.get.parameters[0].in: path
paths./conversations/{convId}.get.parameters[0].maxLength: 255
paths./conversations/{convId}.get.parameters[0].name: convId
paths./conversations/{convId}.get.parameters[0].required: true
paths./conversations/{convId}.get.parameters[0].type: string
paths./conversations/{convId}.get.produces.length: 2
paths./conversations/{convId}.get.produces[0]: application/json
paths./conversations/{convId}.get.produces[1]: application/xml
paths./conversations/{convId}.get.responses.200.description: Gets the conversation
  object
paths./conversations/{convId}.get.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/{convId}.get.responses.400.description: 'The request cannot be
  fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>a field
  constraint is violated</li></ul>'
paths./conversations/{convId}.get.responses.401.description: The authentication was
  not successful
paths./conversations/{convId}.get.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/{convId}.get.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/{convId}.get.security.length: 1
paths./conversations/{convId}.get.security[0].oauth.length: 2
paths./conversations/{convId}.get.security[0].oauth[0]: ALL
paths./conversations/{convId}.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./conversations/{convId}.get.summary: Gets a conversation
paths./conversations/{convId}.get.tags.length: 1
paths./conversations/{convId}.get.tags[0]: Conversation Queries
paths./conversations/{convId}/conversationdetails.get.consumes.length: 1
paths./conversations/{convId}/conversationdetails.get.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/conversationdetails.get.description: Gets the conference
  details of the given conversation. Conference details include the URL, which is
  used to join the conference through a web or mobile application, as well as the
  dial-in phone numbers and conference PIN, which are used to join the conference
  by phone.
paths./conversations/{convId}/conversationdetails.get.operationId: getJoinDetails
paths./conversations/{convId}/conversationdetails.get.parameters.length: 1
paths./conversations/{convId}/conversationdetails.get.parameters[0].description: The
  ID of the conversation for which the join details should be returned
paths./conversations/{convId}/conversationdetails.get.parameters[0].in: path
paths./conversations/{convId}/conversationdetails.get.parameters[0].maxLength: 255
paths./conversations/{convId}/conversationdetails.get.parameters[0].name: convId
paths./conversations/{convId}/conversationdetails.get.parameters[0].required: true
paths./conversations/{convId}/conversationdetails.get.parameters[0].type: string
paths./conversations/{convId}/conversationdetails.get.produces.length: 2
paths./conversations/{convId}/conversationdetails.get.produces[0]: application/json
paths./conversations/{convId}/conversationdetails.get.produces[1]: application/xml
paths./conversations/{convId}/conversationdetails.get.responses.200.description: The
  join details.
paths./conversations/{convId}/conversationdetails.get.responses.200.schema.$ref: '#/definitions/ConversationDetails'
paths./conversations/{convId}/conversationdetails.get.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not
  exist</li></ul>'
paths./conversations/{convId}/conversationdetails.get.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/conversationdetails.get.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/conversationdetails.get.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/conversationdetails.get.security.length: 1
paths./conversations/{convId}/conversationdetails.get.security[0].oauth.length: 2
paths./conversations/{convId}/conversationdetails.get.security[0].oauth[0]: ALL
paths./conversations/{convId}/conversationdetails.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./conversations/{convId}/conversationdetails.get.summary: Gets the conference
  details of a conversation
paths./conversations/{convId}/conversationdetails.get.tags.length: 1
paths./conversations/{convId}/conversationdetails.get.tags[0]: Conversation Management
paths./conversations/{convId}/favorite.delete.consumes.length: 1
paths./conversations/{convId}/favorite.delete.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/favorite.delete.description: Removes a conversation
  from favorites. Favorites can be displayed in a separate side tab inside of the
  Circuit client to have a better overview of important conversations.
paths./conversations/{convId}/favorite.delete.operationId: deleteFavorite
paths./conversations/{convId}/favorite.delete.parameters.length: 1
paths./conversations/{convId}/favorite.delete.parameters[0].description: The ID of
  the conversation which will be unmarked as favorite
paths./conversations/{convId}/favorite.delete.parameters[0].in: path
paths./conversations/{convId}/favorite.delete.parameters[0].maxLength: 255
paths./conversations/{convId}/favorite.delete.parameters[0].name: convId
paths./conversations/{convId}/favorite.delete.parameters[0].required: true
paths./conversations/{convId}/favorite.delete.parameters[0].type: string
paths./conversations/{convId}/favorite.delete.produces.length: 2
paths./conversations/{convId}/favorite.delete.produces[0]: application/json
paths./conversations/{convId}/favorite.delete.produces[1]: application/xml
paths./conversations/{convId}/favorite.delete.responses.200.description: The conversation
  was successfully unmarked
paths./conversations/{convId}/favorite.delete.responses.400.description: 'The request
  cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the
  user is no participant of the conversation</li><li>a field constraint is violated</li><li>the
  conversation was not marked before</li></ul>'
paths./conversations/{convId}/favorite.delete.responses.401.description: The authentication
  was not successful
paths./conversations/{convId}/favorite.delete.responses.500.description: The server
  encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/favorite.delete.responses.503.description: The server
  is currently unable to receive requests.
paths./conversations/{convId}/favorite.delete.security.length: 1
paths./conversations/{convId}/favorite.delete.security[0].oauth.length: 2
paths./conversations/{convId}/favorite.delete.security[0].oauth[0]: ALL
paths./conversations/{convId}/favorite.delete.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/favorite.delete.summary: Removes a conversation from
  favorites
paths./conversations/{convId}/favorite.delete.tags.length: 1
paths./conversations/{convId}/favorite.delete.tags[0]: Messaging (Advanced)
paths./conversations/{convId}/favorite.post.consumes.length: 1
paths./conversations/{convId}/favorite.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/favorite.post.description: Adds a conversation to the
  favorites. Favorites can be displayed in a separate side tab inside of the Circuit
  client to have a better overview of important conversations.
paths./conversations/{convId}/favorite.post.operationId: addFavorite
paths./conversations/{convId}/favorite.post.parameters.length: 1
paths./conversations/{convId}/favorite.post.parameters[0].description: The ID of the
  conversation which will be marked as favorite
paths./conversations/{convId}/favorite.post.parameters[0].in: path
paths./conversations/{convId}/favorite.post.parameters[0].maxLength: 255
paths./conversations/{convId}/favorite.post.parameters[0].name: convId
paths./conversations/{convId}/favorite.post.parameters[0].required: true
paths./conversations/{convId}/favorite.post.parameters[0].type: string
paths./conversations/{convId}/favorite.post.produces.length: 2
paths./conversations/{convId}/favorite.post.produces[0]: application/json
paths./conversations/{convId}/favorite.post.produces[1]: application/xml
paths./conversations/{convId}/favorite.post.responses.200.description: The conversation
  was successfully marked
paths./conversations/{convId}/favorite.post.responses.400.description: 'The request
  cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the
  user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/favorite.post.responses.401.description: The authentication
  was not successful
paths./conversations/{convId}/favorite.post.responses.500.description: The server
  encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/favorite.post.responses.503.description: The server
  is currently unable to receive requests.
paths./conversations/{convId}/favorite.post.security.length: 1
paths./conversations/{convId}/favorite.post.security[0].oauth.length: 2
paths./conversations/{convId}/favorite.post.security[0].oauth[0]: ALL
paths./conversations/{convId}/favorite.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/favorite.post.summary: Adds a conversation to the favorites
paths./conversations/{convId}/favorite.post.tags.length: 1
paths./conversations/{convId}/favorite.post.tags[0]: Messaging (Advanced)
paths./conversations/{convId}/items.get.consumes.length: 1
paths./conversations/{convId}/items.get.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/items.get.description: Gets a list of conversation items.
paths./conversations/{convId}/items.get.operationId: getConversationItems
paths./conversations/{convId}/items.get.parameters.length: 4
paths./conversations/{convId}/items.get.parameters[0].description: The ID of the conversation
  to which the items belong
paths./conversations/{convId}/items.get.parameters[0].in: path
paths./conversations/{convId}/items.get.parameters[0].maxLength: 255
paths./conversations/{convId}/items.get.parameters[0].name: convId
paths./conversations/{convId}/items.get.parameters[0].required: true
paths./conversations/{convId}/items.get.parameters[0].type: string
paths./conversations/{convId}/items.get.parameters[1].description: The modification
  time of the item in UTC format. During the query the items before (default) or after
  this timestamps are returned. In case no timestamp is specified the current server
  time in UTC is used, i.e. the last 25 modified items are returned
paths./conversations/{convId}/items.get.parameters[1].format: date-time
paths./conversations/{convId}/items.get.parameters[1].in: query
paths./conversations/{convId}/items.get.parameters[1].name: modTime
paths./conversations/{convId}/items.get.parameters[1].required: false
paths./conversations/{convId}/items.get.parameters[1].type: string
paths./conversations/{convId}/items.get.parameters[2].default: BEFORE
paths./conversations/{convId}/items.get.parameters[2].description: The direction of
  the search based on the modification time. Valid values are either BEFORE (default)
  or AFTER
paths./conversations/{convId}/items.get.parameters[2].enum.length: 2
paths./conversations/{convId}/items.get.parameters[2].enum[0]: BEFORE
paths./conversations/{convId}/items.get.parameters[2].enum[1]: AFTER
paths./conversations/{convId}/items.get.parameters[2].in: query
paths./conversations/{convId}/items.get.parameters[2].maxLength: 255
paths./conversations/{convId}/items.get.parameters[2].name: direction
paths./conversations/{convId}/items.get.parameters[2].required: false
paths./conversations/{convId}/items.get.parameters[2].type: string
paths./conversations/{convId}/items.get.parameters[3].default: 25
paths./conversations/{convId}/items.get.parameters[3].description: The maximum number
  of returned results (default 25). The maximum allowed value is 100.
paths./conversations/{convId}/items.get.parameters[3].format: int32
paths./conversations/{convId}/items.get.parameters[3].in: query
paths./conversations/{convId}/items.get.parameters[3].maximum: 100
paths./conversations/{convId}/items.get.parameters[3].minimum: 1
paths./conversations/{convId}/items.get.parameters[3].name: results
paths./conversations/{convId}/items.get.parameters[3].required: false
paths./conversations/{convId}/items.get.parameters[3].type: number
paths./conversations/{convId}/items.get.produces.length: 2
paths./conversations/{convId}/items.get.produces[0]: application/json
paths./conversations/{convId}/items.get.produces[1]: application/xml
paths./conversations/{convId}/items.get.responses.200.description: The matching conversation
  items
paths./conversations/{convId}/items.get.responses.200.schema.items.$ref: '#/definitions/ConversationItem'
paths./conversations/{convId}/items.get.responses.200.schema.type: array
paths./conversations/{convId}/items.get.responses.400.description: 'The request cannot
  be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/items.get.responses.401.description: The authentication
  was not successful
paths./conversations/{convId}/items.get.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/{convId}/items.get.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/{convId}/items.get.security.length: 1
paths./conversations/{convId}/items.get.security[0].oauth.length: 2
paths./conversations/{convId}/items.get.security[0].oauth[0]: ALL
paths./conversations/{convId}/items.get.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/items.get.summary: Gets a list of conversation items
paths./conversations/{convId}/items.get.tags.length: 1
paths./conversations/{convId}/items.get.tags[0]: Messaging (Basic)
paths./conversations/{convId}/label.post.consumes.length: 1
paths./conversations/{convId}/label.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/label.post.description: Adds a label to a conversation,
  you can search and organize your conversations based on these labels
paths./conversations/{convId}/label.post.operationId: assignLabel
paths./conversations/{convId}/label.post.parameters.length: 2
paths./conversations/{convId}/label.post.parameters[0].description: The ID of the
  conversation to which the label is added
paths./conversations/{convId}/label.post.parameters[0].in: path
paths./conversations/{convId}/label.post.parameters[0].maxLength: 255
paths./conversations/{convId}/label.post.parameters[0].name: convId
paths./conversations/{convId}/label.post.parameters[0].required: true
paths./conversations/{convId}/label.post.parameters[0].type: string
paths./conversations/{convId}/label.post.parameters[1].description: 'The actual label '
paths./conversations/{convId}/label.post.parameters[1].in: formData
paths./conversations/{convId}/label.post.parameters[1].maxLength: 255
paths./conversations/{convId}/label.post.parameters[1].name: label
paths./conversations/{convId}/label.post.parameters[1].required: true
paths./conversations/{convId}/label.post.parameters[1].type: string
paths./conversations/{convId}/label.post.produces.length: 2
paths./conversations/{convId}/label.post.produces[0]: application/json
paths./conversations/{convId}/label.post.produces[1]: application/xml
paths./conversations/{convId}/label.post.responses.200.description: The label was
  successfully added
paths./conversations/{convId}/label.post.responses.200.schema.$ref: '#/definitions/Label'
paths./conversations/{convId}/label.post.responses.400.description: 'The request cannot
  be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li><li>you
  reached the maximum of 250 labels</li></ul>'
paths./conversations/{convId}/label.post.responses.401.description: The authentication
  was not successful
paths./conversations/{convId}/label.post.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/{convId}/label.post.responses.503.description: The server is
  currently unable to receive requests.
paths./conversations/{convId}/label.post.security.length: 1
paths./conversations/{convId}/label.post.security[0].oauth.length: 2
paths./conversations/{convId}/label.post.security[0].oauth[0]: ALL
paths./conversations/{convId}/label.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/label.post.summary: Adds a label to a conversation
paths./conversations/{convId}/label.post.tags.length: 1
paths./conversations/{convId}/label.post.tags[0]: Conversation Management
paths./conversations/{convId}/label/{labelId}.delete.consumes.length: 1
paths./conversations/{convId}/label/{labelId}.delete.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/label/{labelId}.delete.description: Removes a label
  from a conversation, you can search and organize your conversations based on these
  labels
paths./conversations/{convId}/label/{labelId}.delete.operationId: unassignLabel
paths./conversations/{convId}/label/{labelId}.delete.parameters.length: 2
paths./conversations/{convId}/label/{labelId}.delete.parameters[0].description: The
  ID of the conversation from which the label is removed
paths./conversations/{convId}/label/{labelId}.delete.parameters[0].in: path
paths./conversations/{convId}/label/{labelId}.delete.parameters[0].maxLength: 255
paths./conversations/{convId}/label/{labelId}.delete.parameters[0].name: convId
paths./conversations/{convId}/label/{labelId}.delete.parameters[0].required: true
paths./conversations/{convId}/label/{labelId}.delete.parameters[0].type: string
paths./conversations/{convId}/label/{labelId}.delete.parameters[1].description: not
  available
paths./conversations/{convId}/label/{labelId}.delete.parameters[1].in: path
paths./conversations/{convId}/label/{labelId}.delete.parameters[1].maxLength: 255
paths./conversations/{convId}/label/{labelId}.delete.parameters[1].name: labelId
paths./conversations/{convId}/label/{labelId}.delete.parameters[1].required: true
paths./conversations/{convId}/label/{labelId}.delete.parameters[1].type: string
paths./conversations/{convId}/label/{labelId}.delete.produces.length: 2
paths./conversations/{convId}/label/{labelId}.delete.produces[0]: application/json
paths./conversations/{convId}/label/{labelId}.delete.produces[1]: application/xml
paths./conversations/{convId}/label/{labelId}.delete.responses.200.description: The
  label was successfully removed
paths./conversations/{convId}/label/{labelId}.delete.responses.200.schema.$ref: '#/definitions/Label'
paths./conversations/{convId}/label/{labelId}.delete.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li><li>the
  label was not assigned to the conversation</li></ul>'
paths./conversations/{convId}/label/{labelId}.delete.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/label/{labelId}.delete.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/label/{labelId}.delete.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/label/{labelId}.delete.security.length: 1
paths./conversations/{convId}/label/{labelId}.delete.security[0].oauth.length: 2
paths./conversations/{convId}/label/{labelId}.delete.security[0].oauth[0]: ALL
paths./conversations/{convId}/label/{labelId}.delete.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/label/{labelId}.delete.summary: Removes a label from
  a conversation
paths./conversations/{convId}/label/{labelId}.delete.tags.length: 1
paths./conversations/{convId}/label/{labelId}.delete.tags[0]: Conversation Management
paths./conversations/{convId}/messages.post.consumes.length: 1
paths./conversations/{convId}/messages.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages.post.description: Adds a message to the given
  conversation. This operation can be only performed on behalf of a user who is already
  a member of the conversation.
paths./conversations/{convId}/messages.post.operationId: addTextItem
paths./conversations/{convId}/messages.post.parameters.length: 4
paths./conversations/{convId}/messages.post.parameters[0].description: The ID of the
  conversation to which the new item has to be added
paths./conversations/{convId}/messages.post.parameters[0].in: path
paths./conversations/{convId}/messages.post.parameters[0].maxLength: 255
paths./conversations/{convId}/messages.post.parameters[0].name: convId
paths./conversations/{convId}/messages.post.parameters[0].required: true
paths./conversations/{convId}/messages.post.parameters[0].type: string
paths./conversations/{convId}/messages.post.parameters[1].description: The actual
  content of the item, is mandatory unless an attachment is added
paths./conversations/{convId}/messages.post.parameters[1].in: formData
paths./conversations/{convId}/messages.post.parameters[1].maxLength: 2048
paths./conversations/{convId}/messages.post.parameters[1].name: content
paths./conversations/{convId}/messages.post.parameters[1].required: false
paths./conversations/{convId}/messages.post.parameters[1].type: string
paths./conversations/{convId}/messages.post.parameters[2].collectionFormat: multi
paths./conversations/{convId}/messages.post.parameters[2].description: A comma separated
  list of attachment IDs from the file API.
paths./conversations/{convId}/messages.post.parameters[2].in: formData
paths./conversations/{convId}/messages.post.parameters[2].items.maxLength: 4096
paths./conversations/{convId}/messages.post.parameters[2].items.type: string
paths./conversations/{convId}/messages.post.parameters[2].name: attachments
paths./conversations/{convId}/messages.post.parameters[2].required: false
paths./conversations/{convId}/messages.post.parameters[2].type: array
paths./conversations/{convId}/messages.post.parameters[3].description: The subject
  (headline) of the new text item
paths./conversations/{convId}/messages.post.parameters[3].in: formData
paths./conversations/{convId}/messages.post.parameters[3].maxLength: 255
paths./conversations/{convId}/messages.post.parameters[3].name: subject
paths./conversations/{convId}/messages.post.parameters[3].required: false
paths./conversations/{convId}/messages.post.parameters[3].type: string
paths./conversations/{convId}/messages.post.produces.length: 2
paths./conversations/{convId}/messages.post.produces[0]: application/json
paths./conversations/{convId}/messages.post.produces[1]: application/xml
paths./conversations/{convId}/messages.post.responses.200.description: Gets the new
  text item object
paths./conversations/{convId}/messages.post.responses.200.schema.$ref: '#/definitions/ConversationItem'
paths./conversations/{convId}/messages.post.responses.400.description: 'The request
  cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the
  user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/messages.post.responses.401.description: The authentication
  was not successful
paths./conversations/{convId}/messages.post.responses.500.description: The server
  encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages.post.responses.503.description: The server
  is currently unable to receive requests.
paths./conversations/{convId}/messages.post.security.length: 1
paths./conversations/{convId}/messages.post.security[0].oauth.length: 2
paths./conversations/{convId}/messages.post.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/messages.post.summary: Adds a message to a conversation
paths./conversations/{convId}/messages.post.tags.length: 1
paths./conversations/{convId}/messages.post.tags[0]: Messaging (Basic)
paths./conversations/{convId}/messages/{itemId}.delete.consumes.length: 1
paths./conversations/{convId}/messages/{itemId}.delete.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages/{itemId}.delete.description: Marks a message
  in the given conversation as deleted. Deleted messages are still part of the conversation,
  but their content is no more visible. This operation can only be performed on behalf
  of the message's creator.
paths./conversations/{convId}/messages/{itemId}.delete.operationId: deleteTextItem
paths./conversations/{convId}/messages/{itemId}.delete.parameters.length: 2
paths./conversations/{convId}/messages/{itemId}.delete.parameters[0].description: The
  ID of the conversation to which the item belongs
paths./conversations/{convId}/messages/{itemId}.delete.parameters[0].in: path
paths./conversations/{convId}/messages/{itemId}.delete.parameters[0].maxLength: 255
paths./conversations/{convId}/messages/{itemId}.delete.parameters[0].name: convId
paths./conversations/{convId}/messages/{itemId}.delete.parameters[0].required: true
paths./conversations/{convId}/messages/{itemId}.delete.parameters[0].type: string
paths./conversations/{convId}/messages/{itemId}.delete.parameters[1].description: The
  ID of the item that will be deleted
paths./conversations/{convId}/messages/{itemId}.delete.parameters[1].in: path
paths./conversations/{convId}/messages/{itemId}.delete.parameters[1].maxLength: 255
paths./conversations/{convId}/messages/{itemId}.delete.parameters[1].name: itemId
paths./conversations/{convId}/messages/{itemId}.delete.parameters[1].required: true
paths./conversations/{convId}/messages/{itemId}.delete.parameters[1].type: string
paths./conversations/{convId}/messages/{itemId}.delete.produces.length: 2
paths./conversations/{convId}/messages/{itemId}.delete.produces[0]: application/json
paths./conversations/{convId}/messages/{itemId}.delete.produces[1]: application/xml
paths./conversations/{convId}/messages/{itemId}.delete.responses.200.description: Gets
  the deleted text item object
paths./conversations/{convId}/messages/{itemId}.delete.responses.200.schema.$ref: '#/definitions/ConversationItem'
paths./conversations/{convId}/messages/{itemId}.delete.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not
  exist</li><li>the item does not exist</li><li>the user is no participant of the
  conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/messages/{itemId}.delete.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/messages/{itemId}.delete.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages/{itemId}.delete.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/messages/{itemId}.delete.security.length: 1
paths./conversations/{convId}/messages/{itemId}.delete.security[0].oauth.length: 2
paths./conversations/{convId}/messages/{itemId}.delete.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages/{itemId}.delete.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/messages/{itemId}.delete.summary: Deletes a message
  from a conversation
paths./conversations/{convId}/messages/{itemId}.delete.tags.length: 1
paths./conversations/{convId}/messages/{itemId}.delete.tags[0]: Messaging (Basic)
paths./conversations/{convId}/messages/{itemId}.post.consumes.length: 1
paths./conversations/{convId}/messages/{itemId}.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages/{itemId}.post.description: Adds a message to
  the existing item. The added message will be a child item of the message with the
  given itemId.
paths./conversations/{convId}/messages/{itemId}.post.operationId: addTextItemWithParent
paths./conversations/{convId}/messages/{itemId}.post.parameters.length: 5
paths./conversations/{convId}/messages/{itemId}.post.parameters[0].description: The
  ID of the conversation to which the new item has to be added
paths./conversations/{convId}/messages/{itemId}.post.parameters[0].in: path
paths./conversations/{convId}/messages/{itemId}.post.parameters[0].maxLength: 255
paths./conversations/{convId}/messages/{itemId}.post.parameters[0].name: convId
paths./conversations/{convId}/messages/{itemId}.post.parameters[0].required: true
paths./conversations/{convId}/messages/{itemId}.post.parameters[0].type: string
paths./conversations/{convId}/messages/{itemId}.post.parameters[1].description: The
  ID of the item to which the new one has to be added as child
paths./conversations/{convId}/messages/{itemId}.post.parameters[1].in: path
paths./conversations/{convId}/messages/{itemId}.post.parameters[1].maxLength: 255
paths./conversations/{convId}/messages/{itemId}.post.parameters[1].name: itemId
paths./conversations/{convId}/messages/{itemId}.post.parameters[1].required: true
paths./conversations/{convId}/messages/{itemId}.post.parameters[1].type: string
paths./conversations/{convId}/messages/{itemId}.post.parameters[2].description: The
  actual content of the item
paths./conversations/{convId}/messages/{itemId}.post.parameters[2].in: formData
paths./conversations/{convId}/messages/{itemId}.post.parameters[2].maxLength: 2048
paths./conversations/{convId}/messages/{itemId}.post.parameters[2].name: content
paths./conversations/{convId}/messages/{itemId}.post.parameters[2].required: false
paths./conversations/{convId}/messages/{itemId}.post.parameters[2].type: string
paths./conversations/{convId}/messages/{itemId}.post.parameters[3].collectionFormat: multi
paths./conversations/{convId}/messages/{itemId}.post.parameters[3].description: not
  available
paths./conversations/{convId}/messages/{itemId}.post.parameters[3].in: formData
paths./conversations/{convId}/messages/{itemId}.post.parameters[3].items.maxLength: 4096
paths./conversations/{convId}/messages/{itemId}.post.parameters[3].items.type: string
paths./conversations/{convId}/messages/{itemId}.post.parameters[3].name: attachments
paths./conversations/{convId}/messages/{itemId}.post.parameters[3].required: false
paths./conversations/{convId}/messages/{itemId}.post.parameters[3].type: array
paths./conversations/{convId}/messages/{itemId}.post.parameters[4].description: The
  subject (headline) of the new text item
paths./conversations/{convId}/messages/{itemId}.post.parameters[4].in: formData
paths./conversations/{convId}/messages/{itemId}.post.parameters[4].maxLength: 255
paths./conversations/{convId}/messages/{itemId}.post.parameters[4].name: subject
paths./conversations/{convId}/messages/{itemId}.post.parameters[4].required: false
paths./conversations/{convId}/messages/{itemId}.post.parameters[4].type: string
paths./conversations/{convId}/messages/{itemId}.post.produces.length: 2
paths./conversations/{convId}/messages/{itemId}.post.produces[0]: application/json
paths./conversations/{convId}/messages/{itemId}.post.produces[1]: application/xml
paths./conversations/{convId}/messages/{itemId}.post.responses.200.description: Gets
  the new text item object
paths./conversations/{convId}/messages/{itemId}.post.responses.200.schema.$ref: '#/definitions/ConversationItem'
paths./conversations/{convId}/messages/{itemId}.post.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not
  exist</li><li>the parent item does not exist</li><li>the user is no participant
  of the conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/messages/{itemId}.post.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/messages/{itemId}.post.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages/{itemId}.post.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/messages/{itemId}.post.security.length: 1
paths./conversations/{convId}/messages/{itemId}.post.security[0].oauth.length: 2
paths./conversations/{convId}/messages/{itemId}.post.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages/{itemId}.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/messages/{itemId}.post.summary: Adds a message to an
  item
paths./conversations/{convId}/messages/{itemId}.post.tags.length: 1
paths./conversations/{convId}/messages/{itemId}.post.tags[0]: Messaging (Basic)
paths./conversations/{convId}/messages/{itemId}.put.consumes.length: 1
paths./conversations/{convId}/messages/{itemId}.put.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages/{itemId}.put.description: Updates the content
  or subject of the existing message. Only the creator of the message is allowed to
  perform this operation.
paths./conversations/{convId}/messages/{itemId}.put.operationId: updateTextItem
paths./conversations/{convId}/messages/{itemId}.put.parameters.length: 4
paths./conversations/{convId}/messages/{itemId}.put.parameters[0].description: The
  ID of the conversation to which the item belongs
paths./conversations/{convId}/messages/{itemId}.put.parameters[0].in: path
paths./conversations/{convId}/messages/{itemId}.put.parameters[0].maxLength: 255
paths./conversations/{convId}/messages/{itemId}.put.parameters[0].name: convId
paths./conversations/{convId}/messages/{itemId}.put.parameters[0].required: true
paths./conversations/{convId}/messages/{itemId}.put.parameters[0].type: string
paths./conversations/{convId}/messages/{itemId}.put.parameters[1].description: The
  ID of the item to update
paths./conversations/{convId}/messages/{itemId}.put.parameters[1].in: path
paths./conversations/{convId}/messages/{itemId}.put.parameters[1].maxLength: 255
paths./conversations/{convId}/messages/{itemId}.put.parameters[1].name: itemId
paths./conversations/{convId}/messages/{itemId}.put.parameters[1].required: true
paths./conversations/{convId}/messages/{itemId}.put.parameters[1].type: string
paths./conversations/{convId}/messages/{itemId}.put.parameters[2].description: The
  actual content of the item
paths./conversations/{convId}/messages/{itemId}.put.parameters[2].in: formData
paths./conversations/{convId}/messages/{itemId}.put.parameters[2].maxLength: 2048
paths./conversations/{convId}/messages/{itemId}.put.parameters[2].name: content
paths./conversations/{convId}/messages/{itemId}.put.parameters[2].required: false
paths./conversations/{convId}/messages/{itemId}.put.parameters[2].type: string
paths./conversations/{convId}/messages/{itemId}.put.parameters[3].description: The
  subject (headline) of the new text item
paths./conversations/{convId}/messages/{itemId}.put.parameters[3].in: formData
paths./conversations/{convId}/messages/{itemId}.put.parameters[3].maxLength: 255
paths./conversations/{convId}/messages/{itemId}.put.parameters[3].name: subject
paths./conversations/{convId}/messages/{itemId}.put.parameters[3].required: false
paths./conversations/{convId}/messages/{itemId}.put.parameters[3].type: string
paths./conversations/{convId}/messages/{itemId}.put.produces.length: 2
paths./conversations/{convId}/messages/{itemId}.put.produces[0]: application/json
paths./conversations/{convId}/messages/{itemId}.put.produces[1]: application/xml
paths./conversations/{convId}/messages/{itemId}.put.responses.200.description: Gets
  the modified text item object
paths./conversations/{convId}/messages/{itemId}.put.responses.200.schema.$ref: '#/definitions/ConversationItem'
paths./conversations/{convId}/messages/{itemId}.put.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not
  exist</li><li>the user is no participant of the conversation</li><li>a field constraint
  is violated</li></ul>'
paths./conversations/{convId}/messages/{itemId}.put.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/messages/{itemId}.put.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages/{itemId}.put.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/messages/{itemId}.put.security.length: 1
paths./conversations/{convId}/messages/{itemId}.put.security[0].oauth.length: 2
paths./conversations/{convId}/messages/{itemId}.put.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages/{itemId}.put.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/messages/{itemId}.put.summary: Updates a message
paths./conversations/{convId}/messages/{itemId}.put.tags.length: 1
paths./conversations/{convId}/messages/{itemId}.put.tags[0]: Messaging (Basic)
paths./conversations/{convId}/messages/{itemId}/flag.delete.consumes.length: 1
paths./conversations/{convId}/messages/{itemId}/flag.delete.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages/{itemId}/flag.delete.description: Removes the
  flag from a given message that is posted to the given conversation.
paths./conversations/{convId}/messages/{itemId}/flag.delete.operationId: unFlagItem
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters.length: 2
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[0].description: The
  ID of the conversation to which the item belongs
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[0].in: path
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[0].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[0].name: convId
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[0].required: true
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[0].type: string
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[1].description: The
  ID of the item that will be flagged
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[1].in: path
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[1].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[1].name: itemId
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[1].required: true
paths./conversations/{convId}/messages/{itemId}/flag.delete.parameters[1].type: string
paths./conversations/{convId}/messages/{itemId}/flag.delete.produces.length: 2
paths./conversations/{convId}/messages/{itemId}/flag.delete.produces[0]: application/json
paths./conversations/{convId}/messages/{itemId}/flag.delete.produces[1]: application/xml
paths./conversations/{convId}/messages/{itemId}/flag.delete.responses.200.description: The
  flagged state of item was successfully removed
paths./conversations/{convId}/messages/{itemId}/flag.delete.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not
  exist</li><li>the item does not exist</li><li>the user is no participant of the
  conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/messages/{itemId}/flag.delete.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/messages/{itemId}/flag.delete.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages/{itemId}/flag.delete.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/messages/{itemId}/flag.delete.security.length: 1
paths./conversations/{convId}/messages/{itemId}/flag.delete.security[0].oauth.length: 2
paths./conversations/{convId}/messages/{itemId}/flag.delete.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages/{itemId}/flag.delete.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/messages/{itemId}/flag.delete.summary: Removes the flag
  from a message
paths./conversations/{convId}/messages/{itemId}/flag.delete.tags.length: 1
paths./conversations/{convId}/messages/{itemId}/flag.delete.tags[0]: Messaging (Advanced)
paths./conversations/{convId}/messages/{itemId}/flag.post.consumes.length: 1
paths./conversations/{convId}/messages/{itemId}/flag.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages/{itemId}/flag.post.description: Adds a flag
  to the given message in the given conversation.
paths./conversations/{convId}/messages/{itemId}/flag.post.operationId: flagItem
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters.length: 4
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[0].description: The
  ID of the conversation to which the item belongs
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[0].in: path
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[0].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[0].name: convId
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[0].required: true
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[0].type: string
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[1].description: The
  ID of the item that will be flagged
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[1].in: path
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[1].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[1].name: itemId
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[1].required: true
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[1].type: string
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[2].description: The
  time when the item was created
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[2].in: formData
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[2].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[2].name: itemCreationTime
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[2].required: false
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[2].type: string
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[3].description: The
  ID of the item's parent
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[3].in: formData
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[3].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[3].name: parentId
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[3].required: false
paths./conversations/{convId}/messages/{itemId}/flag.post.parameters[3].type: string
paths./conversations/{convId}/messages/{itemId}/flag.post.produces.length: 2
paths./conversations/{convId}/messages/{itemId}/flag.post.produces[0]: application/json
paths./conversations/{convId}/messages/{itemId}/flag.post.produces[1]: application/xml
paths./conversations/{convId}/messages/{itemId}/flag.post.responses.200.description: The
  item was successful flagged
paths./conversations/{convId}/messages/{itemId}/flag.post.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not
  exist</li><li>the item does not exist</li><li>the user is no participant of the
  conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/messages/{itemId}/flag.post.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/messages/{itemId}/flag.post.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages/{itemId}/flag.post.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/messages/{itemId}/flag.post.security.length: 1
paths./conversations/{convId}/messages/{itemId}/flag.post.security[0].oauth.length: 2
paths./conversations/{convId}/messages/{itemId}/flag.post.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages/{itemId}/flag.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/messages/{itemId}/flag.post.summary: Adds a flag to
  a message in a conversation
paths./conversations/{convId}/messages/{itemId}/flag.post.tags.length: 1
paths./conversations/{convId}/messages/{itemId}/flag.post.tags[0]: Messaging (Advanced)
paths./conversations/{convId}/messages/{itemId}/like.delete.consumes.length: 1
paths./conversations/{convId}/messages/{itemId}/like.delete.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages/{itemId}/like.delete.description: Removes a
  "like" from the given message in the given conversation
paths./conversations/{convId}/messages/{itemId}/like.delete.operationId: unlikeItem
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters.length: 2
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[0].description: The
  ID of the conversation to which the item belongs
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[0].in: path
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[0].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[0].name: convId
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[0].required: true
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[0].type: string
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[1].description: The
  ID of the item that will be unliked
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[1].in: path
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[1].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[1].name: itemId
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[1].required: true
paths./conversations/{convId}/messages/{itemId}/like.delete.parameters[1].type: string
paths./conversations/{convId}/messages/{itemId}/like.delete.produces.length: 2
paths./conversations/{convId}/messages/{itemId}/like.delete.produces[0]: application/json
paths./conversations/{convId}/messages/{itemId}/like.delete.produces[1]: application/xml
paths./conversations/{convId}/messages/{itemId}/like.delete.responses.200.description: The
  item was successful unliked
paths./conversations/{convId}/messages/{itemId}/like.delete.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not
  exist</li><li>the item does not exist</li><li>the user is no participant of the
  conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/messages/{itemId}/like.delete.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/messages/{itemId}/like.delete.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages/{itemId}/like.delete.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/messages/{itemId}/like.delete.security.length: 1
paths./conversations/{convId}/messages/{itemId}/like.delete.security[0].oauth.length: 2
paths./conversations/{convId}/messages/{itemId}/like.delete.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages/{itemId}/like.delete.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/messages/{itemId}/like.delete.summary: Removes a "like"
  from a message
paths./conversations/{convId}/messages/{itemId}/like.delete.tags.length: 1
paths./conversations/{convId}/messages/{itemId}/like.delete.tags[0]: Messaging (Advanced)
paths./conversations/{convId}/messages/{itemId}/like.post.consumes.length: 1
paths./conversations/{convId}/messages/{itemId}/like.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages/{itemId}/like.post.description: Adds a "like"
  to the given message in the given conversation
paths./conversations/{convId}/messages/{itemId}/like.post.operationId: likeItem
paths./conversations/{convId}/messages/{itemId}/like.post.parameters.length: 2
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[0].description: The
  ID of the conversation to which the item belongs
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[0].in: path
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[0].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[0].name: convId
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[0].required: true
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[0].type: string
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[1].description: The
  ID of the item that will be liked
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[1].in: path
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[1].maxLength: 255
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[1].name: itemId
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[1].required: true
paths./conversations/{convId}/messages/{itemId}/like.post.parameters[1].type: string
paths./conversations/{convId}/messages/{itemId}/like.post.produces.length: 2
paths./conversations/{convId}/messages/{itemId}/like.post.produces[0]: application/json
paths./conversations/{convId}/messages/{itemId}/like.post.produces[1]: application/xml
paths./conversations/{convId}/messages/{itemId}/like.post.responses.200.description: The
  item was successful liked
paths./conversations/{convId}/messages/{itemId}/like.post.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not
  exist</li><li>the item does not exist</li><li>the user is no participant of the
  conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/{convId}/messages/{itemId}/like.post.responses.401.description: The
  authentication was not successful
paths./conversations/{convId}/messages/{itemId}/like.post.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages/{itemId}/like.post.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/{convId}/messages/{itemId}/like.post.security.length: 1
paths./conversations/{convId}/messages/{itemId}/like.post.security[0].oauth.length: 2
paths./conversations/{convId}/messages/{itemId}/like.post.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages/{itemId}/like.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/{convId}/messages/{itemId}/like.post.summary: Adds a "like" to
  a message
paths./conversations/{convId}/messages/{itemId}/like.post.tags.length: 1
paths./conversations/{convId}/messages/{itemId}/like.post.tags[0]: Messaging (Advanced)
paths./conversations/{convId}/messages/flag.get.consumes.length: 1
paths./conversations/{convId}/messages/flag.get.consumes[0]: application/x-www-form-urlencoded
paths./conversations/{convId}/messages/flag.get.description: Gets a list of all the
  flagged messages in the given conversation.
paths./conversations/{convId}/messages/flag.get.operationId: getFlagItem
paths./conversations/{convId}/messages/flag.get.parameters.length: 1
paths./conversations/{convId}/messages/flag.get.parameters[0].description: The ID
  of the conversation to which the item belongs
paths./conversations/{convId}/messages/flag.get.parameters[0].in: path
paths./conversations/{convId}/messages/flag.get.parameters[0].maxLength: 255
paths./conversations/{convId}/messages/flag.get.parameters[0].name: convId
paths./conversations/{convId}/messages/flag.get.parameters[0].required: true
paths./conversations/{convId}/messages/flag.get.parameters[0].type: string
paths./conversations/{convId}/messages/flag.get.produces.length: 2
paths./conversations/{convId}/messages/flag.get.produces[0]: application/json
paths./conversations/{convId}/messages/flag.get.produces[1]: application/xml
paths./conversations/{convId}/messages/flag.get.responses.200.description: Gets the
  list of flagged items
paths./conversations/{convId}/messages/flag.get.responses.200.schema.items.$ref: '#/definitions/ConversationItem'
paths./conversations/{convId}/messages/flag.get.responses.200.schema.type: array
paths./conversations/{convId}/messages/flag.get.responses.400.description: 'The request
  cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>a
  field constraint is violated</li></ul>'
paths./conversations/{convId}/messages/flag.get.responses.401.description: The authentication
  was not successful
paths./conversations/{convId}/messages/flag.get.responses.500.description: The server
  encountered an internal error and the operation could not be completed.
paths./conversations/{convId}/messages/flag.get.responses.503.description: The server
  is currently unable to receive requests.
paths./conversations/{convId}/messages/flag.get.security.length: 1
paths./conversations/{convId}/messages/flag.get.security[0].oauth.length: 2
paths./conversations/{convId}/messages/flag.get.security[0].oauth[0]: ALL
paths./conversations/{convId}/messages/flag.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./conversations/{convId}/messages/flag.get.summary: Gets a list of the flagged
  messages of a conversation
paths./conversations/{convId}/messages/flag.get.tags.length: 1
paths./conversations/{convId}/messages/flag.get.tags[0]: Messaging (Advanced)
paths./conversations/community.get.consumes.length: 1
paths./conversations/community.get.consumes[0]: application/x-www-form-urlencoded
paths./conversations/community.get.description: Gets a list of communities. This endpoint
  can be used to explore the communities the authenticated user could join.
paths./conversations/community.get.operationId: getCommunityConversations
paths./conversations/community.get.parameters.length: 5
paths./conversations/community.get.parameters[0].default: ALPHABETICALLY
paths./conversations/community.get.parameters[0].description: Defines the type of
  sorting for the community conversations (default is alphabetical)
paths./conversations/community.get.parameters[0].enum.length: 3
paths./conversations/community.get.parameters[0].enum[0]: ALPHABETICALLY
paths./conversations/community.get.parameters[0].enum[1]: RECENT_ACTIVITY
paths./conversations/community.get.parameters[0].enum[2]: POPULARITY
paths./conversations/community.get.parameters[0].in: query
paths./conversations/community.get.parameters[0].maxLength: 255
paths./conversations/community.get.parameters[0].name: sort
paths./conversations/community.get.parameters[0].required: false
paths./conversations/community.get.parameters[0].type: string
paths./conversations/community.get.parameters[1].default: ASCENDING
paths./conversations/community.get.parameters[1].description: Defines the ordering
  of the conversations (default is ascending)
paths./conversations/community.get.parameters[1].enum.length: 2
paths./conversations/community.get.parameters[1].enum[0]: ASCENDING
paths./conversations/community.get.parameters[1].enum[1]: DESCENDING
paths./conversations/community.get.parameters[1].in: query
paths./conversations/community.get.parameters[1].maxLength: 255
paths./conversations/community.get.parameters[1].name: order
paths./conversations/community.get.parameters[1].required: false
paths./conversations/community.get.parameters[1].type: string
paths./conversations/community.get.parameters[2].default: false
paths./conversations/community.get.parameters[2].description: If set to false only
  conversations are returned where the user is no member of, otherwise all community
  conversations are returned
paths./conversations/community.get.parameters[2].in: query
paths./conversations/community.get.parameters[2].name: includeOwn
paths./conversations/community.get.parameters[2].required: false
paths./conversations/community.get.parameters[2].type: boolean
paths./conversations/community.get.parameters[3].default: 0
paths./conversations/community.get.parameters[3].description: The index of the conversation
  that is the first one that has to be returned. E.g. if a request starts with startIndex
  40 and results 20 the conversations 40 to 60 are returned
paths./conversations/community.get.parameters[3].format: int32
paths./conversations/community.get.parameters[3].in: query
paths./conversations/community.get.parameters[3].maximum: 255
paths./conversations/community.get.parameters[3].minimum: 0
paths./conversations/community.get.parameters[3].name: startIndex
paths./conversations/community.get.parameters[3].required: false
paths./conversations/community.get.parameters[3].type: number
paths./conversations/community.get.parameters[4].default: 25
paths./conversations/community.get.parameters[4].description: The maximum number of
  returned results (default 25). The maximum allowed value is 100.
paths./conversations/community.get.parameters[4].format: int32
paths./conversations/community.get.parameters[4].in: query
paths./conversations/community.get.parameters[4].maximum: 100
paths./conversations/community.get.parameters[4].minimum: 1
paths./conversations/community.get.parameters[4].name: results
paths./conversations/community.get.parameters[4].required: false
paths./conversations/community.get.parameters[4].type: number
paths./conversations/community.get.produces.length: 2
paths./conversations/community.get.produces[0]: application/json
paths./conversations/community.get.produces[1]: application/xml
paths./conversations/community.get.responses.200.description: The matching conversations
paths./conversations/community.get.responses.200.schema.items.$ref: '#/definitions/Conversation'
paths./conversations/community.get.responses.200.schema.type: array
paths./conversations/community.get.responses.400.description: 'The request cannot
  be fulfilled due to bad syntax: <ul>a field constraint is violated</ul>'
paths./conversations/community.get.responses.401.description: The authentication was
  not successful
paths./conversations/community.get.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/community.get.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/community.get.security.length: 1
paths./conversations/community.get.security[0].oauth.length: 2
paths./conversations/community.get.security[0].oauth[0]: ALL
paths./conversations/community.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./conversations/community.get.summary: Gets a list of communities
paths./conversations/community.get.tags.length: 1
paths./conversations/community.get.tags[0]: Conversation Queries
paths./conversations/community.post.consumes.length: 1
paths./conversations/community.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/community.post.description: Creates a community. Communities
  are open conversations that anyone in a Circuit domain (tenant) can join without
  having to be added by another user.
paths./conversations/community.post.operationId: createCommunityConversation
paths./conversations/community.post.parameters.length: 3
paths./conversations/community.post.parameters[0].collectionFormat: multi
paths./conversations/community.post.parameters[0].description: list of participants
  that will be part of this conversation, specified by the Circuit user ID or the
  unique email address. At least one participant needs to be added
paths./conversations/community.post.parameters[0].in: formData
paths./conversations/community.post.parameters[0].items.maxLength: 255
paths./conversations/community.post.parameters[0].items.type: string
paths./conversations/community.post.parameters[0].name: participants
paths./conversations/community.post.parameters[0].required: false
paths./conversations/community.post.parameters[0].type: array
paths./conversations/community.post.parameters[1].description: An optional description
  for the community conversation
paths./conversations/community.post.parameters[1].in: formData
paths./conversations/community.post.parameters[1].maxLength: 255
paths./conversations/community.post.parameters[1].name: description
paths./conversations/community.post.parameters[1].required: false
paths./conversations/community.post.parameters[1].type: string
paths./conversations/community.post.parameters[2].description: An optional topic of
  the conversation. If not set the Circuit client will render the names of the participants
  as topic of the conversation (the first 4 names will be used)
paths./conversations/community.post.parameters[2].in: formData
paths./conversations/community.post.parameters[2].maxLength: 255
paths./conversations/community.post.parameters[2].name: topic
paths./conversations/community.post.parameters[2].required: true
paths./conversations/community.post.parameters[2].type: string
paths./conversations/community.post.produces.length: 2
paths./conversations/community.post.produces[0]: application/json
paths./conversations/community.post.produces[1]: application/xml
paths./conversations/community.post.responses.200.description: The conversation was
  created successfully and can be accessed via the conversation ID
paths./conversations/community.post.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/community.post.responses.400.description: 'The request cannot
  be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not
  provided in the correct format</li><li> or an valid email address</li><li>or one
  or more of the user do not exist</li><li>a field constraint is violated</li></ul>'
paths./conversations/community.post.responses.401.description: The authentication
  was not successful
paths./conversations/community.post.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/community.post.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/community.post.security.length: 1
paths./conversations/community.post.security[0].oauth.length: 2
paths./conversations/community.post.security[0].oauth[0]: ALL
paths./conversations/community.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/community.post.summary: Creates a community conversation
paths./conversations/community.post.tags.length: 1
paths./conversations/community.post.tags[0]: Conversation Creation
paths./conversations/community/{convId}.put.consumes.length: 1
paths./conversations/community/{convId}.put.consumes[0]: application/x-www-form-urlencoded
paths./conversations/community/{convId}.put.description: Updates the information of
  the given community.
paths./conversations/community/{convId}.put.operationId: updateConversationCommunity
paths./conversations/community/{convId}.put.parameters.length: 3
paths./conversations/community/{convId}.put.parameters[0].description: The ID of the
  conversation which should be updated
paths./conversations/community/{convId}.put.parameters[0].in: path
paths./conversations/community/{convId}.put.parameters[0].maxLength: 255
paths./conversations/community/{convId}.put.parameters[0].name: convId
paths./conversations/community/{convId}.put.parameters[0].required: true
paths./conversations/community/{convId}.put.parameters[0].type: string
paths./conversations/community/{convId}.put.parameters[1].description: An optional
  description for the community conversation
paths./conversations/community/{convId}.put.parameters[1].in: formData
paths./conversations/community/{convId}.put.parameters[1].maxLength: 255
paths./conversations/community/{convId}.put.parameters[1].name: description
paths./conversations/community/{convId}.put.parameters[1].required: false
paths./conversations/community/{convId}.put.parameters[1].type: string
paths./conversations/community/{convId}.put.parameters[2].description: An optional
  topic of the conversation. If not set the Circuit client will render the names of
  the participants as topic of the conversation (the first 4 names will be used)
paths./conversations/community/{convId}.put.parameters[2].in: formData
paths./conversations/community/{convId}.put.parameters[2].maxLength: 255
paths./conversations/community/{convId}.put.parameters[2].name: topic
paths./conversations/community/{convId}.put.parameters[2].required: false
paths./conversations/community/{convId}.put.parameters[2].type: string
paths./conversations/community/{convId}.put.produces.length: 2
paths./conversations/community/{convId}.put.produces[0]: application/json
paths./conversations/community/{convId}.put.produces[1]: application/xml
paths./conversations/community/{convId}.put.responses.200.description: Gets the updated
  conversation object with the new topic / description
paths./conversations/community/{convId}.put.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/community/{convId}.put.responses.400.description: 'The request
  cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the
  conversation is not of type COMMUNITY</li><li>a field constraint is violated</li></ul>'
paths./conversations/community/{convId}.put.responses.401.description: The authentication
  was not successful
paths./conversations/community/{convId}.put.responses.500.description: The server
  encountered an internal error and the operation could not be completed.
paths./conversations/community/{convId}.put.responses.503.description: The server
  is currently unable to receive requests.
paths./conversations/community/{convId}.put.security.length: 1
paths./conversations/community/{convId}.put.security[0].oauth.length: 2
paths./conversations/community/{convId}.put.security[0].oauth[0]: ALL
paths./conversations/community/{convId}.put.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/community/{convId}.put.summary: Updates the information of a
  community
paths./conversations/community/{convId}.put.tags.length: 1
paths./conversations/community/{convId}.put.tags[0]: Conversation Management
paths./conversations/community/{convId}/join.post.consumes.length: 1
paths./conversations/community/{convId}/join.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/community/{convId}/join.post.description: Adds the authenticated
  user to the given community (i.e., allows the user to join this community). Contrary
  to the operation of adding a new participant, this operation can only be performed
  by a user who is not yet a member of the community.
paths./conversations/community/{convId}/join.post.operationId: joinCommunityConversation
paths./conversations/community/{convId}/join.post.parameters.length: 1
paths./conversations/community/{convId}/join.post.parameters[0].description: The ID
  of the conversation which the user will join
paths./conversations/community/{convId}/join.post.parameters[0].in: path
paths./conversations/community/{convId}/join.post.parameters[0].maxLength: 255
paths./conversations/community/{convId}/join.post.parameters[0].name: convId
paths./conversations/community/{convId}/join.post.parameters[0].required: true
paths./conversations/community/{convId}/join.post.parameters[0].type: string
paths./conversations/community/{convId}/join.post.produces.length: 2
paths./conversations/community/{convId}/join.post.produces[0]: application/json
paths./conversations/community/{convId}/join.post.produces[1]: application/xml
paths./conversations/community/{convId}/join.post.responses.200.description: Gets
  the conversation object to which the participants was added
paths./conversations/community/{convId}/join.post.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/community/{convId}/join.post.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter
  are not provided in the correct format</li><li> or an valid email address</li><li>or
  one or more of the user do not exist</li><li>the conversation does not exist</li><li>the
  conversation is not of type COMMUNITY</li><li>a field constraint is violated</li></ul>'
paths./conversations/community/{convId}/join.post.responses.401.description: The authentication
  was not successful
paths./conversations/community/{convId}/join.post.responses.500.description: The server
  encountered an internal error and the operation could not be completed.
paths./conversations/community/{convId}/join.post.responses.503.description: The server
  is currently unable to receive requests.
paths./conversations/community/{convId}/join.post.security.length: 1
paths./conversations/community/{convId}/join.post.security[0].oauth.length: 2
paths./conversations/community/{convId}/join.post.security[0].oauth[0]: ALL
paths./conversations/community/{convId}/join.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/community/{convId}/join.post.summary: Adds the authenticated
  user to a community
paths./conversations/community/{convId}/join.post.tags.length: 1
paths./conversations/community/{convId}/join.post.tags[0]: Conversation Management
paths./conversations/community/{convId}/participants.delete.consumes.length: 1
paths./conversations/community/{convId}/participants.delete.consumes[0]: application/x-www-form-urlencoded
paths./conversations/community/{convId}/participants.delete.description: Removes one
  or more participants from the given community. The last participant of a community
  cannot be removed. This operation can only be performed by a user who is already
  a member of the community.
paths./conversations/community/{convId}/participants.delete.operationId: removeParticipantCommunity
paths./conversations/community/{convId}/participants.delete.parameters.length: 2
paths./conversations/community/{convId}/participants.delete.parameters[0].description: The
  ID of the conversation from which the participant have to be removed
paths./conversations/community/{convId}/participants.delete.parameters[0].in: path
paths./conversations/community/{convId}/participants.delete.parameters[0].maxLength: 255
paths./conversations/community/{convId}/participants.delete.parameters[0].name: convId
paths./conversations/community/{convId}/participants.delete.parameters[0].required: true
paths./conversations/community/{convId}/participants.delete.parameters[0].type: string
paths./conversations/community/{convId}/participants.delete.parameters[1].collectionFormat: multi
paths./conversations/community/{convId}/participants.delete.parameters[1].description: The
  IDs or the unique email addresses of the Circuit users that have to be removed
paths./conversations/community/{convId}/participants.delete.parameters[1].in: query
paths./conversations/community/{convId}/participants.delete.parameters[1].items.maxLength: 6500
paths./conversations/community/{convId}/participants.delete.parameters[1].items.type: string
paths./conversations/community/{convId}/participants.delete.parameters[1].name: participants
paths./conversations/community/{convId}/participants.delete.parameters[1].required: true
paths./conversations/community/{convId}/participants.delete.parameters[1].type: array
paths./conversations/community/{convId}/participants.delete.produces.length: 2
paths./conversations/community/{convId}/participants.delete.produces[0]: application/json
paths./conversations/community/{convId}/participants.delete.produces[1]: application/xml
paths./conversations/community/{convId}/participants.delete.responses.200.description: Gets
  the conversation object from which the participants were removed.
paths./conversations/community/{convId}/participants.delete.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/community/{convId}/participants.delete.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul></li>the userIds passed as parameter
  are not provided in the correct format</li><li> or an valid email address</li><li>or
  one or more of the user do not exist</li><li>the conversation does not exist</li><li>the
  conversation is not of type COMMUNITY</li><li>a field constraint is violated</li></ul>'
paths./conversations/community/{convId}/participants.delete.responses.401.description: The
  authentication was not successful
paths./conversations/community/{convId}/participants.delete.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/community/{convId}/participants.delete.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/community/{convId}/participants.delete.security.length: 1
paths./conversations/community/{convId}/participants.delete.security[0].oauth.length: 2
paths./conversations/community/{convId}/participants.delete.security[0].oauth[0]: ALL
paths./conversations/community/{convId}/participants.delete.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/community/{convId}/participants.delete.summary: Removes participants
  from a community
paths./conversations/community/{convId}/participants.delete.tags.length: 1
paths./conversations/community/{convId}/participants.delete.tags[0]: Conversation
  Management
paths./conversations/community/{convId}/participants.post.consumes.length: 1
paths./conversations/community/{convId}/participants.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/community/{convId}/participants.post.description: Adds one or
  more participants to the given community. This operation can only be performed by
  a user who is already a member of the community.
paths./conversations/community/{convId}/participants.post.operationId: addParticipantCommunity
paths./conversations/community/{convId}/participants.post.parameters.length: 2
paths./conversations/community/{convId}/participants.post.parameters[0].description: The
  ID of the conversation to which the participant has to be added.
paths./conversations/community/{convId}/participants.post.parameters[0].in: path
paths./conversations/community/{convId}/participants.post.parameters[0].maxLength: 255
paths./conversations/community/{convId}/participants.post.parameters[0].name: convId
paths./conversations/community/{convId}/participants.post.parameters[0].required: true
paths./conversations/community/{convId}/participants.post.parameters[0].type: string
paths./conversations/community/{convId}/participants.post.parameters[1].collectionFormat: multi
paths./conversations/community/{convId}/participants.post.parameters[1].description: The
  IDs or the unique email addresses of the Circuit users that should to be added.
paths./conversations/community/{convId}/participants.post.parameters[1].in: formData
paths./conversations/community/{convId}/participants.post.parameters[1].items.maxLength: 6500
paths./conversations/community/{convId}/participants.post.parameters[1].items.type: string
paths./conversations/community/{convId}/participants.post.parameters[1].name: participants
paths./conversations/community/{convId}/participants.post.parameters[1].required: true
paths./conversations/community/{convId}/participants.post.parameters[1].type: array
paths./conversations/community/{convId}/participants.post.produces.length: 2
paths./conversations/community/{convId}/participants.post.produces[0]: application/json
paths./conversations/community/{convId}/participants.post.produces[1]: application/xml
paths./conversations/community/{convId}/participants.post.responses.200.description: Gets
  the conversation object to which the participants were added.
paths./conversations/community/{convId}/participants.post.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/community/{convId}/participants.post.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter
  are not provided in the correct format</li><li> or an valid email address</li><li>or
  one or more of the user do not exist</li><li>the conversation does not exist</li><li>the
  conversation is not of type COMMUNITY</li><li>a field constraint is violated</li></ul>'
paths./conversations/community/{convId}/participants.post.responses.401.description: The
  authentication was not successful
paths./conversations/community/{convId}/participants.post.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/community/{convId}/participants.post.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/community/{convId}/participants.post.security.length: 1
paths./conversations/community/{convId}/participants.post.security[0].oauth.length: 2
paths./conversations/community/{convId}/participants.post.security[0].oauth[0]: ALL
paths./conversations/community/{convId}/participants.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/community/{convId}/participants.post.summary: Adds participants
  to a community
paths./conversations/community/{convId}/participants.post.tags.length: 1
paths./conversations/community/{convId}/participants.post.tags[0]: Conversation Management
paths./conversations/direct.post.consumes.length: 1
paths./conversations/direct.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/direct.post.description: Creates a 1-to-1 conversation between
  the authenticated user and the user with the provided userId. In case there is already
  an existing 1-to-1 conversation between these users, the endpoint returns the existing
  conversation.
paths./conversations/direct.post.operationId: createDirectConversation
paths./conversations/direct.post.parameters.length: 1
paths./conversations/direct.post.parameters[0].description: The participant that will
  be part of this conversation together with the creator, specified by the Circuit
  user ID or the unique email address
paths./conversations/direct.post.parameters[0].in: formData
paths./conversations/direct.post.parameters[0].maxLength: 255
paths./conversations/direct.post.parameters[0].name: participant
paths./conversations/direct.post.parameters[0].required: true
paths./conversations/direct.post.parameters[0].type: string
paths./conversations/direct.post.produces.length: 2
paths./conversations/direct.post.produces[0]: application/json
paths./conversations/direct.post.produces[1]: application/xml
paths./conversations/direct.post.responses.200.description: The conversation was created
  successfully and can be accessed via the conversation ID
paths./conversations/direct.post.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/direct.post.responses.400.description: 'The request cannot be
  fulfilled due to bad syntax: <ul><li>the data format of the passed user does not
  match either a UUID (user primary key)</li><li> or an valid email address</li><li>or
  the user does not exist</li><li>or the user is the same who initiates the request</li></ul>'
paths./conversations/direct.post.responses.401.description: The authentication was
  not successful
paths./conversations/direct.post.responses.409.description: A conversation already
  exists. The response contains this conversation.
paths./conversations/direct.post.responses.409.schema.$ref: '#/definitions/Conversation'
paths./conversations/direct.post.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/direct.post.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/direct.post.security.length: 1
paths./conversations/direct.post.security[0].oauth.length: 2
paths./conversations/direct.post.security[0].oauth[0]: ALL
paths./conversations/direct.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/direct.post.summary: Creates a 1-to-1 conversation
paths./conversations/direct.post.tags.length: 1
paths./conversations/direct.post.tags[0]: Conversation Creation
paths./conversations/favorite.get.description: Gets the conversationIds which are
  marked as favorites.
paths./conversations/favorite.get.operationId: getFavoriteConversations
paths./conversations/favorite.get.responses.200.description: A list of marked conversations
  or an empty response.
paths./conversations/favorite.get.responses.200.schema.items.$ref: '#/definitions/String'
paths./conversations/favorite.get.responses.200.schema.type: array
paths./conversations/favorite.get.responses.400.description: 'The request cannot be
  fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the
  user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
paths./conversations/favorite.get.responses.401.description: The authentication was
  not successful
paths./conversations/favorite.get.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/favorite.get.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/favorite.get.security.length: 1
paths./conversations/favorite.get.security[0].oauth.length: 2
paths./conversations/favorite.get.security[0].oauth[0]: ALL
paths./conversations/favorite.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./conversations/favorite.get.summary: Gets favorite conversations
paths./conversations/favorite.get.tags.length: 1
paths./conversations/favorite.get.tags[0]: Conversation Queries
paths./conversations/group.post.consumes.length: 1
paths./conversations/group.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/group.post.description: Creates a group conversation between
  three or more users. The authenticated user is directly added to this conversation.
paths./conversations/group.post.operationId: createGroupConversation
paths./conversations/group.post.parameters.length: 2
paths./conversations/group.post.parameters[0].collectionFormat: multi
paths./conversations/group.post.parameters[0].description: A list of participants
  that will be part of this conversation, specified by the Circuit user ID or the
  unique email address. At least one participant needs to be added
paths./conversations/group.post.parameters[0].in: formData
paths./conversations/group.post.parameters[0].items.maxLength: 255
paths./conversations/group.post.parameters[0].items.type: string
paths./conversations/group.post.parameters[0].name: participants
paths./conversations/group.post.parameters[0].required: true
paths./conversations/group.post.parameters[0].type: array
paths./conversations/group.post.parameters[1].description: An optional topic of the
  conversation. If not set the Circuit client will render the names of the participants
  as topic of the conversation (the first 4 names will be used)
paths./conversations/group.post.parameters[1].in: formData
paths./conversations/group.post.parameters[1].maxLength: 255
paths./conversations/group.post.parameters[1].name: topic
paths./conversations/group.post.parameters[1].required: false
paths./conversations/group.post.parameters[1].type: string
paths./conversations/group.post.produces.length: 2
paths./conversations/group.post.produces[0]: application/json
paths./conversations/group.post.produces[1]: application/xml
paths./conversations/group.post.responses.200.description: The conversation was created
  successfully and can be accessed via the conversation ID
paths./conversations/group.post.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/group.post.responses.400.description: 'The request cannot be
  fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not provided
  in the correct format</li><li> or an valid email address</li><li>or one or more
  of the user do not exist</li><li>a field constraint is violated</li></ul>'
paths./conversations/group.post.responses.401.description: The authentication was
  not successful
paths./conversations/group.post.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/group.post.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/group.post.security.length: 1
paths./conversations/group.post.security[0].oauth.length: 2
paths./conversations/group.post.security[0].oauth[0]: ALL
paths./conversations/group.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/group.post.summary: Creates a group conversation
paths./conversations/group.post.tags.length: 1
paths./conversations/group.post.tags[0]: Conversation Creation
paths./conversations/group/{convId}.put.consumes.length: 1
paths./conversations/group/{convId}.put.consumes[0]: application/x-www-form-urlencoded
paths./conversations/group/{convId}.put.description: Updates the information of the
  given group conversation.
paths./conversations/group/{convId}.put.operationId: updateConversationGroup
paths./conversations/group/{convId}.put.parameters.length: 2
paths./conversations/group/{convId}.put.parameters[0].description: The ID of the conversation
  which should be updated
paths./conversations/group/{convId}.put.parameters[0].in: path
paths./conversations/group/{convId}.put.parameters[0].maxLength: 255
paths./conversations/group/{convId}.put.parameters[0].name: convId
paths./conversations/group/{convId}.put.parameters[0].required: true
paths./conversations/group/{convId}.put.parameters[0].type: string
paths./conversations/group/{convId}.put.parameters[1].description: An optional topic
  of the conversation. If not set the Circuit client will render the names of the
  participants as topic of the conversation (the first 4 names will be used)
paths./conversations/group/{convId}.put.parameters[1].in: formData
paths./conversations/group/{convId}.put.parameters[1].maxLength: 255
paths./conversations/group/{convId}.put.parameters[1].name: topic
paths./conversations/group/{convId}.put.parameters[1].required: false
paths./conversations/group/{convId}.put.parameters[1].type: string
paths./conversations/group/{convId}.put.produces.length: 2
paths./conversations/group/{convId}.put.produces[0]: application/json
paths./conversations/group/{convId}.put.produces[1]: application/xml
paths./conversations/group/{convId}.put.responses.200.description: Gets the updated
  conversation object with the new topic
paths./conversations/group/{convId}.put.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/group/{convId}.put.responses.400.description: 'The request cannot
  be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the
  conversation is not of type GROUP</li><li>a field constraint is violated</li></ul>'
paths./conversations/group/{convId}.put.responses.401.description: The authentication
  was not successful
paths./conversations/group/{convId}.put.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/group/{convId}.put.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/group/{convId}.put.security.length: 1
paths./conversations/group/{convId}.put.security[0].oauth.length: 2
paths./conversations/group/{convId}.put.security[0].oauth[0]: ALL
paths./conversations/group/{convId}.put.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/group/{convId}.put.summary: Updates the information of a group
  conversation
paths./conversations/group/{convId}.put.tags.length: 1
paths./conversations/group/{convId}.put.tags[0]: Conversation Management
paths./conversations/group/{convId}/participants.delete.consumes.length: 1
paths./conversations/group/{convId}/participants.delete.consumes[0]: application/x-www-form-urlencoded
paths./conversations/group/{convId}/participants.delete.description: Removes one or
  more participants from the given group conversation. The last participant of a group
  conversation cannot be removed. This operation can only be performed on behalf of
  a user who is already a member of the conversation.
paths./conversations/group/{convId}/participants.delete.operationId: removeParticipantGroup
paths./conversations/group/{convId}/participants.delete.parameters.length: 2
paths./conversations/group/{convId}/participants.delete.parameters[0].description: The
  ID of the conversation from which the participant have to be removed
paths./conversations/group/{convId}/participants.delete.parameters[0].in: path
paths./conversations/group/{convId}/participants.delete.parameters[0].maxLength: 255
paths./conversations/group/{convId}/participants.delete.parameters[0].name: convId
paths./conversations/group/{convId}/participants.delete.parameters[0].required: true
paths./conversations/group/{convId}/participants.delete.parameters[0].type: string
paths./conversations/group/{convId}/participants.delete.parameters[1].collectionFormat: multi
paths./conversations/group/{convId}/participants.delete.parameters[1].description: The
  IDs or the unique email addresses of the Circuit users that have to be removed
paths./conversations/group/{convId}/participants.delete.parameters[1].in: query
paths./conversations/group/{convId}/participants.delete.parameters[1].items.maxLength: 6500
paths./conversations/group/{convId}/participants.delete.parameters[1].items.type: string
paths./conversations/group/{convId}/participants.delete.parameters[1].name: participants
paths./conversations/group/{convId}/participants.delete.parameters[1].required: true
paths./conversations/group/{convId}/participants.delete.parameters[1].type: array
paths./conversations/group/{convId}/participants.delete.produces.length: 2
paths./conversations/group/{convId}/participants.delete.produces[0]: application/json
paths./conversations/group/{convId}/participants.delete.produces[1]: application/xml
paths./conversations/group/{convId}/participants.delete.responses.200.description: Gets
  the conversation object from which the participants were removed.
paths./conversations/group/{convId}/participants.delete.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/group/{convId}/participants.delete.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter
  are not provided in the correct format</li><li> or an valid email address</li><li>or
  one or more of the user do not exist</li><li>the conversation does not exist</li><li>the
  conversation is not of type GROUP</li><li>a field constraint is violated</li></ul>'
paths./conversations/group/{convId}/participants.delete.responses.401.description: The
  authentication was not successful
paths./conversations/group/{convId}/participants.delete.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/group/{convId}/participants.delete.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/group/{convId}/participants.delete.security.length: 1
paths./conversations/group/{convId}/participants.delete.security[0].oauth.length: 2
paths./conversations/group/{convId}/participants.delete.security[0].oauth[0]: ALL
paths./conversations/group/{convId}/participants.delete.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/group/{convId}/participants.delete.summary: Removes participants
  from a group conversation
paths./conversations/group/{convId}/participants.delete.tags.length: 1
paths./conversations/group/{convId}/participants.delete.tags[0]: Conversation Management
paths./conversations/group/{convId}/participants.post.consumes.length: 1
paths./conversations/group/{convId}/participants.post.consumes[0]: application/x-www-form-urlencoded
paths./conversations/group/{convId}/participants.post.description: Adds one or more
  participants to the given group conversation. This operation can only be performed
  by a user who is already a member of the conversation.
paths./conversations/group/{convId}/participants.post.operationId: addParticipantGroup
paths./conversations/group/{convId}/participants.post.parameters.length: 2
paths./conversations/group/{convId}/participants.post.parameters[0].description: The
  ID of the conversation to which the participant has to be added.
paths./conversations/group/{convId}/participants.post.parameters[0].in: path
paths./conversations/group/{convId}/participants.post.parameters[0].maxLength: 255
paths./conversations/group/{convId}/participants.post.parameters[0].name: convId
paths./conversations/group/{convId}/participants.post.parameters[0].required: true
paths./conversations/group/{convId}/participants.post.parameters[0].type: string
paths./conversations/group/{convId}/participants.post.parameters[1].collectionFormat: multi
paths./conversations/group/{convId}/participants.post.parameters[1].description: The
  IDs or the unique email addresses of the Circuit users that should to be added.
paths./conversations/group/{convId}/participants.post.parameters[1].in: formData
paths./conversations/group/{convId}/participants.post.parameters[1].items.maxLength: 6500
paths./conversations/group/{convId}/participants.post.parameters[1].items.type: string
paths./conversations/group/{convId}/participants.post.parameters[1].name: participants
paths./conversations/group/{convId}/participants.post.parameters[1].required: true
paths./conversations/group/{convId}/participants.post.parameters[1].type: array
paths./conversations/group/{convId}/participants.post.produces.length: 2
paths./conversations/group/{convId}/participants.post.produces[0]: application/json
paths./conversations/group/{convId}/participants.post.produces[1]: application/xml
paths./conversations/group/{convId}/participants.post.responses.200.description: Gets
  the conversation object to which the participants were added.
paths./conversations/group/{convId}/participants.post.responses.200.schema.$ref: '#/definitions/Conversation'
paths./conversations/group/{convId}/participants.post.responses.400.description: 'The
  request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter
  are not provided in the correct format</li><li> or an valid email address</li><li>or
  one or more of the user do not exist</li><li>the conversation does not exist</li><li>the
  conversation is not of type GROUP</li><li>a field constraint is violated</li></ul>'
paths./conversations/group/{convId}/participants.post.responses.401.description: The
  authentication was not successful
paths./conversations/group/{convId}/participants.post.responses.500.description: The
  server encountered an internal error and the operation could not be completed.
paths./conversations/group/{convId}/participants.post.responses.503.description: The
  server is currently unable to receive requests.
paths./conversations/group/{convId}/participants.post.security.length: 1
paths./conversations/group/{convId}/participants.post.security[0].oauth.length: 2
paths./conversations/group/{convId}/participants.post.security[0].oauth[0]: ALL
paths./conversations/group/{convId}/participants.post.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/group/{convId}/participants.post.summary: Adds participants to
  a group conversation
paths./conversations/group/{convId}/participants.post.tags.length: 1
paths./conversations/group/{convId}/participants.post.tags[0]: Conversation Management
paths./conversations/messages/flag.get.description: Gets a list of all the messages
  the authenticated user has flagged. This endpoint should be used carefully in case
  where the authenticated user has a lot of flagged messages.
paths./conversations/messages/flag.get.operationId: getFlagItemConv
paths./conversations/messages/flag.get.responses.200.description: Gets the list of
  flagged items
paths./conversations/messages/flag.get.responses.200.schema.items.$ref: '#/definitions/ConversationItem'
paths./conversations/messages/flag.get.responses.200.schema.type: array
paths./conversations/messages/flag.get.responses.401.description: The authentication
  was not successful
paths./conversations/messages/flag.get.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/messages/flag.get.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/messages/flag.get.security.length: 1
paths./conversations/messages/flag.get.security[0].oauth.length: 2
paths./conversations/messages/flag.get.security[0].oauth[0]: ALL
paths./conversations/messages/flag.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./conversations/messages/flag.get.summary: Gets a list of the flagged messages
paths./conversations/messages/flag.get.tags.length: 1
paths./conversations/messages/flag.get.tags[0]: Messaging (Advanced)
paths./conversations/search.get.consumes.length: 1
paths./conversations/search.get.consumes[0]: application/x-www-form-urlencoded
paths./conversations/search.get.description: Performs a search for conversation content.
  A maximum of 100 conversations is returned. If you hit this limit you should refine
  the search term.
paths./conversations/search.get.operationId: searchConversations
paths./conversations/search.get.parameters.length: 2
paths./conversations/search.get.parameters[0].description: The search term
paths./conversations/search.get.parameters[0].in: query
paths./conversations/search.get.parameters[0].maxLength: 255
paths./conversations/search.get.parameters[0].name: term
paths./conversations/search.get.parameters[0].required: true
paths./conversations/search.get.parameters[0].type: string
paths./conversations/search.get.parameters[1].default: false
paths./conversations/search.get.parameters[1].description: not available
paths./conversations/search.get.parameters[1].in: query
paths./conversations/search.get.parameters[1].name: includeItemIds
paths./conversations/search.get.parameters[1].required: false
paths./conversations/search.get.parameters[1].type: boolean
paths./conversations/search.get.produces.length: 2
paths./conversations/search.get.produces[0]: application/json
paths./conversations/search.get.produces[1]: application/xml
paths./conversations/search.get.responses.200.description: A list of conversations
  and items that match the term
paths./conversations/search.get.responses.200.schema.$ref: '#/definitions/ConversationSearchResult'
paths./conversations/search.get.responses.400.description: 'The request cannot be
  fulfilled due to bad syntax: <ul><li>the user is no participant of the conversation</li><li>a
  field constraint is violated</li></ul>'
paths./conversations/search.get.responses.401.description: The authentication was
  not successful
paths./conversations/search.get.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./conversations/search.get.responses.503.description: The server is currently
  unable to receive requests.
paths./conversations/search.get.security.length: 1
paths./conversations/search.get.security[0].oauth.length: 2
paths./conversations/search.get.security[0].oauth[0]: ALL
paths./conversations/search.get.security[0].oauth[1]: WRITE_CONVERSATIONS
paths./conversations/search.get.summary: Performs a conversation search
paths./conversations/search.get.tags.length: 1
paths./conversations/search.get.tags[0]: Conversation Queries
paths./oauth/clientId.get.description: Gets a list of the client IDs (applications)
  that were created for this user.
paths./oauth/clientId.get.operationId: oAuthGetClientIds
paths./oauth/clientId.get.responses.200.description: Gets the client IDs that allow
  to request for OAuth access
paths./oauth/clientId.get.responses.200.schema.items.$ref: '#/definitions/OAuthClientId'
paths./oauth/clientId.get.responses.200.schema.type: array
paths./oauth/clientId.get.responses.401.description: The authentication was not successful
paths./oauth/clientId.get.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./oauth/clientId.get.responses.503.description: The server is currently unable
  to receive requests.
paths./oauth/clientId.get.security.length: 1
paths./oauth/clientId.get.security[0].oauth.length: 1
paths./oauth/clientId.get.security[0].oauth[0]: ALL
paths./oauth/clientId.get.summary: Gets a list of client IDs
paths./oauth/clientId.get.tags.length: 1
paths./oauth/clientId.get.tags[0]: OAuth 2.0
paths./oauth/token/{tokenId}.get.consumes.length: 1
paths./oauth/token/{tokenId}.get.consumes[0]: application/x-www-form-urlencoded
paths./oauth/token/{tokenId}.get.description: Gets the access token for the given
  token ID.
paths./oauth/token/{tokenId}.get.operationId: oAuthValidateAccessToken
paths./oauth/token/{tokenId}.get.parameters.length: 1
paths./oauth/token/{tokenId}.get.parameters[0].description: The unique id of the token
  to get the data for.
paths./oauth/token/{tokenId}.get.parameters[0].in: path
paths./oauth/token/{tokenId}.get.parameters[0].maxLength: 255
paths./oauth/token/{tokenId}.get.parameters[0].name: tokenId
paths./oauth/token/{tokenId}.get.parameters[0].required: true
paths./oauth/token/{tokenId}.get.parameters[0].type: string
paths./oauth/token/{tokenId}.get.produces.length: 2
paths./oauth/token/{tokenId}.get.produces[0]: application/json
paths./oauth/token/{tokenId}.get.produces[1]: application/xml
paths./oauth/token/{tokenId}.get.responses.200.description: Gets the access token
paths./oauth/token/{tokenId}.get.responses.200.schema.$ref: '#/definitions/ValidateAccessToken'
paths./oauth/token/{tokenId}.get.responses.401.description: The authentication was
  not successful
paths./oauth/token/{tokenId}.get.responses.404.description: In case the token was
  not found or the requester has no permission to access the token
paths./oauth/token/{tokenId}.get.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./oauth/token/{tokenId}.get.responses.503.description: The server is currently
  unable to receive requests.
paths./oauth/token/{tokenId}.get.security.length: 1
paths./oauth/token/{tokenId}.get.security[0].oauth.length: 2
paths./oauth/token/{tokenId}.get.security[0].oauth[0]: ALL
paths./oauth/token/{tokenId}.get.security[0].oauth[1]: READ_USER_PROFILE
paths./oauth/token/{tokenId}.get.summary: Gets an access token
paths./oauth/token/{tokenId}.get.tags.length: 1
paths./oauth/token/{tokenId}.get.tags[0]: OAuth 2.0
paths./users.get.consumes.length: 1
paths./users.get.consumes[0]: application/x-www-form-urlencoded
paths./users.get.description: Gets a user based on an email address or username. If
  both parameters are defined, the email address will be used.
paths./users.get.operationId: searchUser
paths./users.get.parameters.length: 1
paths./users.get.parameters[0].description: Search for a user by name
paths./users.get.parameters[0].in: query
paths./users.get.parameters[0].maxLength: 255
paths./users.get.parameters[0].name: name
paths./users.get.parameters[0].required: true
paths./users.get.parameters[0].type: string
paths./users.get.produces.length: 2
paths./users.get.produces[0]: application/json
paths./users.get.produces[1]: application/xml
paths./users.get.responses.200.description: The users which match the search criteria
paths./users.get.responses.200.schema.items.$ref: '#/definitions/User'
paths./users.get.responses.200.schema.type: array
paths./users.get.responses.400.description: 'The request cannot be fulfilled due to
  bad syntax: <ul><li>a field constraint is violated</li></ul>'
paths./users.get.responses.401.description: The authentication was not successful
paths./users.get.responses.404.description: The search term did not much any results
paths./users.get.responses.500.description: The server encountered an internal error
  and the operation could not be completed.
paths./users.get.responses.503.description: The server is currently unable to receive
  requests.
paths./users.get.security.length: 1
paths./users.get.security[0].oauth.length: 2
paths./users.get.security[0].oauth[0]: ALL
paths./users.get.security[0].oauth[1]: READ_USER
paths./users.get.summary: Gets a user
paths./users.get.tags.length: 1
paths./users.get.tags[0]: User Management
paths./users/{id}.get.consumes.length: 1
paths./users/{id}.get.consumes[0]: application/x-www-form-urlencoded
paths./users/{id}.get.description: Gets the profile information of the user with the
  given ID.
paths./users/{id}.get.operationId: getUserById
paths./users/{id}.get.parameters.length: 1
paths./users/{id}.get.parameters[0].description: The unique ID or the email address
  of the user to fetch
paths./users/{id}.get.parameters[0].in: path
paths./users/{id}.get.parameters[0].maxLength: 255
paths./users/{id}.get.parameters[0].name: id
paths./users/{id}.get.parameters[0].required: true
paths./users/{id}.get.parameters[0].type: string
paths./users/{id}.get.produces.length: 2
paths./users/{id}.get.produces[0]: application/json
paths./users/{id}.get.produces[1]: application/xml
paths./users/{id}.get.responses.200.description: The operation was successful, the
  user profile is returned
paths./users/{id}.get.responses.200.schema.$ref: '#/definitions/User'
paths./users/{id}.get.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>the data format of the passed user does not match either
  a UUID (user primary key)</li><li> or an valid email address</li><li>or a field
  constraint is violated</li></ul>'
paths./users/{id}.get.responses.401.description: The authentication was not successful
paths./users/{id}.get.responses.404.description: The user does not exist
paths./users/{id}.get.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./users/{id}.get.responses.503.description: The server is currently unable to
  receive requests.
paths./users/{id}.get.security.length: 1
paths./users/{id}.get.security[0].oauth.length: 2
paths./users/{id}.get.security[0].oauth[0]: ALL
paths./users/{id}.get.security[0].oauth[1]: READ_USER
paths./users/{id}.get.summary: Gets the user's profile information
paths./users/{id}.get.tags.length: 1
paths./users/{id}.get.tags[0]: User Management
paths./users/{id}/presence.get.consumes.length: 1
paths./users/{id}/presence.get.consumes[0]: application/x-www-form-urlencoded
paths./users/{id}/presence.get.description: Gets the presence status of the users
  whose ID or email address is given.
paths./users/{id}/presence.get.operationId: getUserPresence
paths./users/{id}/presence.get.parameters.length: 1
paths./users/{id}/presence.get.parameters[0].description: The unique ID or the email
  address of the user to fetch.
paths./users/{id}/presence.get.parameters[0].in: path
paths./users/{id}/presence.get.parameters[0].maxLength: 255
paths./users/{id}/presence.get.parameters[0].name: id
paths./users/{id}/presence.get.parameters[0].required: true
paths./users/{id}/presence.get.parameters[0].type: string
paths./users/{id}/presence.get.produces.length: 2
paths./users/{id}/presence.get.produces[0]: application/json
paths./users/{id}/presence.get.produces[1]: application/xml
paths./users/{id}/presence.get.responses.200.description: The presence state
paths./users/{id}/presence.get.responses.200.schema.$ref: '#/definitions/Presence'
paths./users/{id}/presence.get.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>the data format of the passed user does not match either
  a UUID (user primary key)</li><li> or a valid email address</li><li>or a field constraint
  is violated</li></ul>'
paths./users/{id}/presence.get.responses.401.description: The authentication was not
  successful
paths./users/{id}/presence.get.responses.404.description: The user does not exist
paths./users/{id}/presence.get.responses.500.description: The server encountered an
  internal error and the operation could not be completed.
paths./users/{id}/presence.get.responses.503.description: The server is currently
  unable to receive requests.
paths./users/{id}/presence.get.security.length: 1
paths./users/{id}/presence.get.security[0].oauth.length: 2
paths./users/{id}/presence.get.security[0].oauth[0]: ALL
paths./users/{id}/presence.get.security[0].oauth[1]: READ_USER
paths./users/{id}/presence.get.summary: Gets the presence status
paths./users/{id}/presence.get.tags.length: 1
paths./users/{id}/presence.get.tags[0]: User Management
paths./users/labels.get.description: Returns all labels of the user that were defined
  either explicit or implicit via assignment to conversations.
paths./users/labels.get.operationId: getLabel
paths./users/labels.get.responses.200.description: List of labels
paths./users/labels.get.responses.200.schema.items.$ref: '#/definitions/Label'
paths./users/labels.get.responses.200.schema.type: array
paths./users/labels.get.responses.401.description: The authentication was not successful
paths./users/labels.get.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./users/labels.get.responses.503.description: The server is currently unable
  to receive requests.
paths./users/labels.get.security.length: 1
paths./users/labels.get.security[0].oauth.length: 2
paths./users/labels.get.security[0].oauth[0]: ALL
paths./users/labels.get.security[0].oauth[1]: READ_USER_PROFILE
paths./users/labels.get.summary: Returns all user labels
paths./users/labels.get.tags.length: 1
paths./users/labels.get.tags[0]: User Management
paths./users/labels.post.consumes.length: 1
paths./users/labels.post.consumes[0]: application/x-www-form-urlencoded
paths./users/labels.post.description: Add a label to the list of user labels
paths./users/labels.post.operationId: addLabel
paths./users/labels.post.parameters.length: 1
paths./users/labels.post.parameters[0].description: The label value to add
paths./users/labels.post.parameters[0].in: formData
paths./users/labels.post.parameters[0].maxLength: 255
paths./users/labels.post.parameters[0].name: label
paths./users/labels.post.parameters[0].required: true
paths./users/labels.post.parameters[0].type: string
paths./users/labels.post.produces.length: 2
paths./users/labels.post.produces[0]: application/json
paths./users/labels.post.produces[1]: application/xml
paths./users/labels.post.responses.200.description: The label was successfully added
paths./users/labels.post.responses.200.schema.$ref: '#/definitions/Label'
paths./users/labels.post.responses.401.description: The authentication was not successful
paths./users/labels.post.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./users/labels.post.responses.503.description: The server is currently unable
  to receive requests.
paths./users/labels.post.security.length: 1
paths./users/labels.post.security[0].oauth.length: 2
paths./users/labels.post.security[0].oauth[0]: ALL
paths./users/labels.post.security[0].oauth[1]: WRITE_USER_PROFILE
paths./users/labels.post.summary: Add a user label
paths./users/labels.post.tags.length: 1
paths./users/labels.post.tags[0]: User Management
paths./users/labels/{labelId}.delete.consumes.length: 1
paths./users/labels/{labelId}.delete.consumes[0]: application/x-www-form-urlencoded
paths./users/labels/{labelId}.delete.description: Remove a label from the list of
  user labels
paths./users/labels/{labelId}.delete.operationId: removeLabel
paths./users/labels/{labelId}.delete.parameters.length: 1
paths./users/labels/{labelId}.delete.parameters[0].description: not available
paths./users/labels/{labelId}.delete.parameters[0].in: path
paths./users/labels/{labelId}.delete.parameters[0].maxLength: 255
paths./users/labels/{labelId}.delete.parameters[0].name: labelId
paths./users/labels/{labelId}.delete.parameters[0].required: true
paths./users/labels/{labelId}.delete.parameters[0].type: string
paths./users/labels/{labelId}.delete.produces.length: 2
paths./users/labels/{labelId}.delete.produces[0]: application/json
paths./users/labels/{labelId}.delete.produces[1]: application/xml
paths./users/labels/{labelId}.delete.responses.200.description: The label was successfully
  removed
paths./users/labels/{labelId}.delete.responses.200.schema.$ref: '#/definitions/Label'
paths./users/labels/{labelId}.delete.responses.400.description: 'The request cannot
  be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li><li>the
  label does not exist</li></ul>'
paths./users/labels/{labelId}.delete.responses.401.description: The authentication
  was not successful
paths./users/labels/{labelId}.delete.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./users/labels/{labelId}.delete.responses.503.description: The server is currently
  unable to receive requests.
paths./users/labels/{labelId}.delete.security.length: 1
paths./users/labels/{labelId}.delete.security[0].oauth.length: 2
paths./users/labels/{labelId}.delete.security[0].oauth[0]: ALL
paths./users/labels/{labelId}.delete.security[0].oauth[1]: WRITE_USER_PROFILE
paths./users/labels/{labelId}.delete.summary: Remove a user label
paths./users/labels/{labelId}.delete.tags.length: 1
paths./users/labels/{labelId}.delete.tags[0]: User Management
paths./users/presence.get.consumes.length: 1
paths./users/presence.get.consumes[0]: application/x-www-form-urlencoded
paths./users/presence.get.description: Gets the presence status of the users whose
  IDs or email addresses are given.
paths./users/presence.get.operationId: getPresence
paths./users/presence.get.parameters.length: 1
paths./users/presence.get.parameters[0].collectionFormat: multi
paths./users/presence.get.parameters[0].description: A list of unique user IDs or
  email addresses of the users you want to query the presence state for
paths./users/presence.get.parameters[0].in: query
paths./users/presence.get.parameters[0].items.maxLength: 6500
paths./users/presence.get.parameters[0].items.type: string
paths./users/presence.get.parameters[0].name: userIds
paths./users/presence.get.parameters[0].required: true
paths./users/presence.get.parameters[0].type: array
paths./users/presence.get.produces.length: 2
paths./users/presence.get.produces[0]: application/json
paths./users/presence.get.produces[1]: application/xml
paths./users/presence.get.responses.200.description: The presence states
paths./users/presence.get.responses.200.schema.items.$ref: '#/definitions/Presence'
paths./users/presence.get.responses.200.schema.type: array
paths./users/presence.get.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>the userIds passed as parameter are not provided in the
  correct format</li><li> or a valid email address</li><li>a field constraint is violated</li></ul>'
paths./users/presence.get.responses.401.description: The authentication was not successful
paths./users/presence.get.responses.404.description: One or more of the users do not
  exist
paths./users/presence.get.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./users/presence.get.responses.503.description: The server is currently unable
  to receive requests.
paths./users/presence.get.security.length: 1
paths./users/presence.get.security[0].oauth.length: 2
paths./users/presence.get.security[0].oauth[0]: ALL
paths./users/presence.get.security[0].oauth[1]: READ_USER
paths./users/presence.get.summary: Gets the presence status
paths./users/presence.get.tags.length: 1
paths./users/presence.get.tags[0]: User Management
paths./users/presence.put.consumes.length: 1
paths./users/presence.put.consumes[0]: application/x-www-form-urlencoded
paths./users/presence.put.description: Updates the presence status of the authenticated
  user.
paths./users/presence.put.operationId: setUserPresence
paths./users/presence.put.parameters.length: 3
paths./users/presence.put.parameters[0].description: The user's presence.
paths./users/presence.put.parameters[0].in: formData
paths./users/presence.put.parameters[0].maxLength: 255
paths./users/presence.put.parameters[0].name: state
paths./users/presence.put.parameters[0].required: true
paths./users/presence.put.parameters[0].type: string
paths./users/presence.put.parameters[1].description: Timestamp until the DND state
  of the user is active. This field is mandatory when the state is set to DND.
paths./users/presence.put.parameters[1].format: date-time
paths./users/presence.put.parameters[1].in: formData
paths./users/presence.put.parameters[1].name: dndUntil
paths./users/presence.put.parameters[1].required: false
paths./users/presence.put.parameters[1].type: string
paths./users/presence.put.parameters[2].description: An optional status message that
  is displayed instead of the location
paths./users/presence.put.parameters[2].in: formData
paths./users/presence.put.parameters[2].maxLength: 255
paths./users/presence.put.parameters[2].name: statusMessage
paths./users/presence.put.parameters[2].required: false
paths./users/presence.put.parameters[2].type: string
paths./users/presence.put.produces.length: 2
paths./users/presence.put.produces[0]: application/json
paths./users/presence.put.produces[1]: application/xml
paths./users/presence.put.responses.200.description: The presence states
paths./users/presence.put.responses.200.schema.$ref: '#/definitions/Presence'
paths./users/presence.put.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>the presence state is DND and the data format of the
  passed dndUntil is missing </li><li>a field constraint is violated</li></ul>'
paths./users/presence.put.responses.401.description: The authentication was not successful
paths./users/presence.put.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./users/presence.put.responses.503.description: The server is currently unable
  to receive requests.
paths./users/presence.put.security.length: 1
paths./users/presence.put.security[0].oauth.length: 2
paths./users/presence.put.security[0].oauth[0]: ALL
paths./users/presence.put.security[0].oauth[1]: WRITE_USER_PROFILE
paths./users/presence.put.summary: Updates the presence status
paths./users/presence.put.tags.length: 1
paths./users/presence.put.tags[0]: User Management
paths./users/profile.get.description: Gets the authenticated user's profile information.
paths./users/profile.get.operationId: getProfile
paths./users/profile.get.responses.200.description: Gets the authenticated user's
  profile information
paths./users/profile.get.responses.200.schema.$ref: '#/definitions/User'
paths./users/profile.get.responses.401.description: The authentication was not successful
paths./users/profile.get.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./users/profile.get.responses.503.description: The server is currently unable
  to receive requests.
paths./users/profile.get.security.length: 1
paths./users/profile.get.security[0].oauth.length: 2
paths./users/profile.get.security[0].oauth[0]: ALL
paths./users/profile.get.security[0].oauth[1]: READ_USER_PROFILE
paths./users/profile.get.summary: Gets the authenticated user's profile information
paths./users/profile.get.tags.length: 1
paths./users/profile.get.tags[0]: User Management
paths./users/profile.put.consumes.length: 1
paths./users/profile.put.consumes[0]: application/x-www-form-urlencoded
paths./users/profile.put.description: Updates the user profile of the authenticated
  user
paths./users/profile.put.operationId: updateProfile
paths./users/profile.put.parameters.length: 4
paths./users/profile.put.parameters[0].description: The new firstname of the user
paths./users/profile.put.parameters[0].in: formData
paths./users/profile.put.parameters[0].maxLength: 128
paths./users/profile.put.parameters[0].name: firstname
paths./users/profile.put.parameters[0].required: false
paths./users/profile.put.parameters[0].type: string
paths./users/profile.put.parameters[1].description: The new lastname of the user
paths./users/profile.put.parameters[1].in: formData
paths./users/profile.put.parameters[1].maxLength: 128
paths./users/profile.put.parameters[1].name: lastname
paths./users/profile.put.parameters[1].required: false
paths./users/profile.put.parameters[1].type: string
paths./users/profile.put.parameters[2].description: The new job title of the user
paths./users/profile.put.parameters[2].in: formData
paths./users/profile.put.parameters[2].maxLength: 128
paths./users/profile.put.parameters[2].name: jobTitle
paths./users/profile.put.parameters[2].required: false
paths./users/profile.put.parameters[2].type: string
paths./users/profile.put.parameters[3].description: The new locale of the user. One
  of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN.
paths./users/profile.put.parameters[3].enum.length: 8
paths./users/profile.put.parameters[3].enum[0]: EN_US
paths./users/profile.put.parameters[3].enum[1]: DE_DE
paths./users/profile.put.parameters[3].enum[2]: EN_GB
paths./users/profile.put.parameters[3].enum[3]: ES_ES
paths./users/profile.put.parameters[3].enum[4]: FR_FR
paths./users/profile.put.parameters[3].enum[5]: IT_IT
paths./users/profile.put.parameters[3].enum[6]: RU_RU
paths./users/profile.put.parameters[3].enum[7]: ZH_HANS_CN
paths./users/profile.put.parameters[3].in: formData
paths./users/profile.put.parameters[3].maxLength: 5
paths./users/profile.put.parameters[3].name: locale
paths./users/profile.put.parameters[3].required: false
paths./users/profile.put.parameters[3].type: string
paths./users/profile.put.produces.length: 2
paths./users/profile.put.produces[0]: application/json
paths./users/profile.put.produces[1]: application/xml
paths./users/profile.put.responses.200.description: The modified user object.
paths./users/profile.put.responses.200.schema.$ref: '#/definitions/User'
paths./users/profile.put.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>the user does not exist</li><li>a field constraint is
  violated</li></ul>'
paths./users/profile.put.responses.401.description: The authentication was not successful
paths./users/profile.put.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./users/profile.put.responses.503.description: The server is currently unable
  to receive requests.
paths./users/profile.put.security.length: 1
paths./users/profile.put.security[0].oauth.length: 2
paths./users/profile.put.security[0].oauth[0]: ALL
paths./users/profile.put.security[0].oauth[1]: WRITE_USER_PROFILE
paths./users/profile.put.summary: Updates the user profile
paths./users/profile.put.tags.length: 1
paths./users/profile.put.tags[0]: User Management
paths./webhooks.delete.description: Unregisters all webHooks of the authenticated
  user
paths./webhooks.delete.operationId: removeWebHooks
paths./webhooks.delete.responses.204.description: The operation was successful
paths./webhooks.delete.responses.401.description: The authentication was not successful
paths./webhooks.delete.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./webhooks.delete.responses.503.description: The server is currently unable to
  receive requests.
paths./webhooks.delete.security.length: 1
paths./webhooks.delete.security[0].oauth.length: 3
paths./webhooks.delete.security[0].oauth[0]: ALL
paths./webhooks.delete.security[0].oauth[1]: READ_CONVERSATIONS
paths./webhooks.delete.security[0].oauth[2]: READ_USER
paths./webhooks.delete.summary: Removes all webHooks
paths./webhooks.delete.tags.length: 1
paths./webhooks.delete.tags[0]: Webhooks
paths./webhooks.get.description: Gets the list of webHooks registered for this user
  or API.
paths./webhooks.get.operationId: getWebHook
paths./webhooks.get.responses.200.description: The list of registered webHooks
paths./webhooks.get.responses.200.schema.items.$ref: '#/definitions/WebHook'
paths./webhooks.get.responses.200.schema.type: array
paths./webhooks.get.responses.401.description: The authentication was not successful
paths./webhooks.get.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./webhooks.get.responses.503.description: The server is currently unable to receive
  requests.
paths./webhooks.get.security.length: 1
paths./webhooks.get.security[0].oauth.length: 3
paths./webhooks.get.security[0].oauth[0]: ALL
paths./webhooks.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./webhooks.get.security[0].oauth[2]: READ_USER
paths./webhooks.get.summary: Gets a list of webHooks
paths./webhooks.get.tags.length: 1
paths./webhooks.get.tags[0]: Webhooks
paths./webhooks.post.consumes.length: 1
paths./webhooks.post.consumes[0]: application/x-www-form-urlencoded
paths./webhooks.post.description: Registers the webHook with the given filter and
  callback URL.
paths./webhooks.post.operationId: addWebHook
paths./webhooks.post.parameters.length: 2
paths./webhooks.post.parameters[0].description: WebHook callback URL. Currently only
  HTTP is supported
paths./webhooks.post.parameters[0].in: formData
paths./webhooks.post.parameters[0].maxLength: 255
paths./webhooks.post.parameters[0].name: url
paths./webhooks.post.parameters[0].required: true
paths./webhooks.post.parameters[0].type: string
paths./webhooks.post.parameters[1].collectionFormat: multi
paths./webhooks.post.parameters[1].description: 'A filter for WebHooks that checks
  for a list of configured events. This filter will use a regular expression to determine
  if it is interested in the events or not. The event itself is converted into a string
  of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE'
paths./webhooks.post.parameters[1].in: formData
paths./webhooks.post.parameters[1].items.enum.length: 6
paths./webhooks.post.parameters[1].items.enum[0]: CONVERSATION.CREATE
paths./webhooks.post.parameters[1].items.enum[1]: CONVERSATION.UPDATE
paths./webhooks.post.parameters[1].items.enum[2]: CONVERSATION.ADD_ITEM
paths./webhooks.post.parameters[1].items.enum[3]: CONVERSATION.UPDATE_ITEM
paths./webhooks.post.parameters[1].items.enum[4]: USER.USER_UPDATED
paths./webhooks.post.parameters[1].items.enum[5]: USER.USER_SETTING_UPDATED
paths./webhooks.post.parameters[1].items.maxLength: 255
paths./webhooks.post.parameters[1].items.type: string
paths./webhooks.post.parameters[1].name: filter
paths./webhooks.post.parameters[1].required: true
paths./webhooks.post.parameters[1].type: array
paths./webhooks.post.produces.length: 2
paths./webhooks.post.produces[0]: application/json
paths./webhooks.post.produces[1]: application/xml
paths./webhooks.post.responses.201.description: The webHook was successfully registered
paths./webhooks.post.responses.201.schema.$ref: '#/definitions/WebHook'
paths./webhooks.post.responses.400.description: 'The request cannot be fulfilled due
  to bad syntax: <ul><li>an invalid URL</li><li>an invalid event filter</li><li>an
  unsupported event filter</li><li>a field constraint is violated</li></ul>'
paths./webhooks.post.responses.401.description: The authentication was not successful
paths./webhooks.post.responses.403.description: The maximum number of allowed webHook
  is reached
paths./webhooks.post.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./webhooks.post.responses.503.description: The server is currently unable to
  receive requests.
paths./webhooks.post.security.length: 1
paths./webhooks.post.security[0].oauth.length: 3
paths./webhooks.post.security[0].oauth[0]: ALL
paths./webhooks.post.security[0].oauth[1]: READ_CONVERSATIONS
paths./webhooks.post.security[0].oauth[2]: READ_USER
paths./webhooks.post.summary: Registers a WebHook
paths./webhooks.post.tags.length: 1
paths./webhooks.post.tags[0]: Webhooks
paths./webhooks/{id}.delete.consumes.length: 1
paths./webhooks/{id}.delete.consumes[0]: application/x-www-form-urlencoded
paths./webhooks/{id}.delete.description: Unregisters the webHook with the given ID.
paths./webhooks/{id}.delete.operationId: removeWebHook
paths./webhooks/{id}.delete.parameters.length: 1
paths./webhooks/{id}.delete.parameters[0].description: The unique ID of the webHook
  to remove
paths./webhooks/{id}.delete.parameters[0].in: path
paths./webhooks/{id}.delete.parameters[0].maxLength: 255
paths./webhooks/{id}.delete.parameters[0].name: id
paths./webhooks/{id}.delete.parameters[0].required: true
paths./webhooks/{id}.delete.parameters[0].type: string
paths./webhooks/{id}.delete.produces.length: 2
paths./webhooks/{id}.delete.produces[0]: application/json
paths./webhooks/{id}.delete.produces[1]: application/xml
paths./webhooks/{id}.delete.responses.204.description: The operation was successful
paths./webhooks/{id}.delete.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>the data format of the given id does not match a UUID</li><li>a
  field constraint is violated</li></ul>'
paths./webhooks/{id}.delete.responses.401.description: The authentication was not
  successful
paths./webhooks/{id}.delete.responses.404.description: The webHook does not exist
paths./webhooks/{id}.delete.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./webhooks/{id}.delete.responses.503.description: The server is currently unable
  to receive requests.
paths./webhooks/{id}.delete.security.length: 1
paths./webhooks/{id}.delete.security[0].oauth.length: 3
paths./webhooks/{id}.delete.security[0].oauth[0]: ALL
paths./webhooks/{id}.delete.security[0].oauth[1]: READ_CONVERSATIONS
paths./webhooks/{id}.delete.security[0].oauth[2]: READ_USER
paths./webhooks/{id}.delete.summary: Removes a registered webHook
paths./webhooks/{id}.delete.tags.length: 1
paths./webhooks/{id}.delete.tags[0]: Webhooks
paths./webhooks/{id}.get.consumes.length: 1
paths./webhooks/{id}.get.consumes[0]: application/x-www-form-urlencoded
paths./webhooks/{id}.get.description: Gets the registered webHook with the given ID.
paths./webhooks/{id}.get.operationId: getWebHookById
paths./webhooks/{id}.get.parameters.length: 1
paths./webhooks/{id}.get.parameters[0].description: The unique ID of the webHook to
  fetch
paths./webhooks/{id}.get.parameters[0].in: path
paths./webhooks/{id}.get.parameters[0].maxLength: 255
paths./webhooks/{id}.get.parameters[0].name: id
paths./webhooks/{id}.get.parameters[0].required: true
paths./webhooks/{id}.get.parameters[0].type: string
paths./webhooks/{id}.get.produces.length: 2
paths./webhooks/{id}.get.produces[0]: application/json
paths./webhooks/{id}.get.produces[1]: application/xml
paths./webhooks/{id}.get.responses.200.description: The registered webHook with the
  given ID
paths./webhooks/{id}.get.responses.200.schema.$ref: '#/definitions/WebHook'
paths./webhooks/{id}.get.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>the data format of the given id does not match a UUID</li><li>a
  field constraint is violated</li></ul>'
paths./webhooks/{id}.get.responses.401.description: The authentication was not successful
paths./webhooks/{id}.get.responses.404.description: The webHook does not exist
paths./webhooks/{id}.get.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./webhooks/{id}.get.responses.503.description: The server is currently unable
  to receive requests.
paths./webhooks/{id}.get.security.length: 1
paths./webhooks/{id}.get.security[0].oauth.length: 3
paths./webhooks/{id}.get.security[0].oauth[0]: ALL
paths./webhooks/{id}.get.security[0].oauth[1]: READ_CONVERSATIONS
paths./webhooks/{id}.get.security[0].oauth[2]: READ_USER
paths./webhooks/{id}.get.summary: Gets a webHook
paths./webhooks/{id}.get.tags.length: 1
paths./webhooks/{id}.get.tags[0]: Webhooks
paths./webhooks/{id}.put.consumes.length: 1
paths./webhooks/{id}.put.consumes[0]: application/x-www-form-urlencoded
paths./webhooks/{id}.put.description: Updates a webHook registration with the given
  filter and callback URL.
paths./webhooks/{id}.put.operationId: updateWebHook
paths./webhooks/{id}.put.parameters.length: 3
paths./webhooks/{id}.put.parameters[0].description: The unique ID of the webHook to
  update
paths./webhooks/{id}.put.parameters[0].in: path
paths./webhooks/{id}.put.parameters[0].maxLength: 255
paths./webhooks/{id}.put.parameters[0].name: id
paths./webhooks/{id}.put.parameters[0].required: true
paths./webhooks/{id}.put.parameters[0].type: string
paths./webhooks/{id}.put.parameters[1].description: WebHook callback URL. Currently
  only HTTP is supported
paths./webhooks/{id}.put.parameters[1].in: formData
paths./webhooks/{id}.put.parameters[1].maxLength: 255
paths./webhooks/{id}.put.parameters[1].name: url
paths./webhooks/{id}.put.parameters[1].required: false
paths./webhooks/{id}.put.parameters[1].type: string
paths./webhooks/{id}.put.parameters[2].collectionFormat: multi
paths./webhooks/{id}.put.parameters[2].description: 'A filter for WebHooks that checks
  for a list of configured events. This filter will use a regular expression to determine
  if it is interested in the events or not. The event itself is converted into a string
  of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE'
paths./webhooks/{id}.put.parameters[2].in: formData
paths./webhooks/{id}.put.parameters[2].items.enum.length: 6
paths./webhooks/{id}.put.parameters[2].items.enum[0]: CONVERSATION.CREATE
paths./webhooks/{id}.put.parameters[2].items.enum[1]: CONVERSATION.UPDATE
paths./webhooks/{id}.put.parameters[2].items.enum[2]: CONVERSATION.ADD_ITEM
paths./webhooks/{id}.put.parameters[2].items.enum[3]: CONVERSATION.UPDATE_ITEM
paths./webhooks/{id}.put.parameters[2].items.enum[4]: USER.USER_UPDATED
paths./webhooks/{id}.put.parameters[2].items.enum[5]: USER.USER_SETTING_UPDATED
paths./webhooks/{id}.put.parameters[2].items.maxLength: 255
paths./webhooks/{id}.put.parameters[2].items.type: string
paths./webhooks/{id}.put.parameters[2].name: filter
paths./webhooks/{id}.put.parameters[2].required: false
paths./webhooks/{id}.put.parameters[2].type: array
paths./webhooks/{id}.put.produces.length: 2
paths./webhooks/{id}.put.produces[0]: application/json
paths./webhooks/{id}.put.produces[1]: application/xml
paths./webhooks/{id}.put.responses.200.description: The webHook registration was successfully
  updated
paths./webhooks/{id}.put.responses.200.schema.$ref: '#/definitions/WebHook'
paths./webhooks/{id}.put.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>an invalid URL</li><li>an invalid event filter</li><li>an
  unsupported event filter</li><li>no input parameter is provided</li><li>a field
  constraint is violated</li></ul>'
paths./webhooks/{id}.put.responses.401.description: The authentication was not successful
paths./webhooks/{id}.put.responses.404.description: The webHook does not exist
paths./webhooks/{id}.put.responses.500.description: The server encountered an internal
  error and the operation could not be completed.
paths./webhooks/{id}.put.responses.503.description: The server is currently unable
  to receive requests.
paths./webhooks/{id}.put.security.length: 1
paths./webhooks/{id}.put.security[0].oauth.length: 3
paths./webhooks/{id}.put.security[0].oauth[0]: ALL
paths./webhooks/{id}.put.security[0].oauth[1]: READ_CONVERSATIONS
paths./webhooks/{id}.put.security[0].oauth[2]: READ_USER
paths./webhooks/{id}.put.summary: Updates a WebHook registration
paths./webhooks/{id}.put.tags.length: 1
paths./webhooks/{id}.put.tags[0]: Webhooks
paths./webhooks/presence.post.consumes.length: 1
paths./webhooks/presence.post.consumes[0]: application/x-www-form-urlencoded
paths./webhooks/presence.post.description: Registers a webHook that has a presence
  filter with the given URL and userIds. There is a maximum number of userIds allowed
paths./webhooks/presence.post.operationId: addPresenceWebHook
paths./webhooks/presence.post.parameters.length: 2
paths./webhooks/presence.post.parameters[0].description: WebHook callback URL. Currently
  only HTTP is supported
paths./webhooks/presence.post.parameters[0].in: formData
paths./webhooks/presence.post.parameters[0].maxLength: 255
paths./webhooks/presence.post.parameters[0].name: url
paths./webhooks/presence.post.parameters[0].required: true
paths./webhooks/presence.post.parameters[0].type: string
paths./webhooks/presence.post.parameters[1].collectionFormat: multi
paths./webhooks/presence.post.parameters[1].description: not available
paths./webhooks/presence.post.parameters[1].in: formData
paths./webhooks/presence.post.parameters[1].items.maxLength: 6500
paths./webhooks/presence.post.parameters[1].items.type: string
paths./webhooks/presence.post.parameters[1].name: userIds
paths./webhooks/presence.post.parameters[1].required: true
paths./webhooks/presence.post.parameters[1].type: array
paths./webhooks/presence.post.produces.length: 2
paths./webhooks/presence.post.produces[0]: application/json
paths./webhooks/presence.post.produces[1]: application/xml
paths./webhooks/presence.post.responses.201.description: The webHook was successfully
  registered
paths./webhooks/presence.post.responses.201.schema.$ref: '#/definitions/WebHook'
paths./webhooks/presence.post.responses.400.description: 'The request cannot be fulfilled
  due to bad syntax: <ul><li>an invalid URL</li><li>one or more invalid userIds</li><li>a
  field constraint is violated</li></ul>'
paths./webhooks/presence.post.responses.401.description: The authentication was not
  successful
paths./webhooks/presence.post.responses.403.description: The maximum number of allowed
  userIds is reached or the maximum number of allowed webHook is reached
paths./webhooks/presence.post.responses.500.description: The server encountered an
  internal error and the operation could not be completed.
paths./webhooks/presence.post.responses.503.description: The server is currently unable
  to receive requests.
paths./webhooks/presence.post.security.length: 1
paths./webhooks/presence.post.security[0].oauth.length: 2
paths./webhooks/presence.post.security[0].oauth[0]: ALL
paths./webhooks/presence.post.security[0].oauth[1]: READ_USER
paths./webhooks/presence.post.summary: Registers Presence WebHook registration
paths./webhooks/presence.post.tags.length: 1
paths./webhooks/presence.post.tags[0]: Webhooks
paths./webhooks/presence/{id}.put.consumes.length: 1
paths./webhooks/presence/{id}.put.consumes[0]: application/x-www-form-urlencoded
paths./webhooks/presence/{id}.put.description: Updates a registration of a webHook
  that has a presence filter. The update can be performed either on the URL and/or
  the userIds. The new userIds, if any, will override any existing userIds.
paths./webhooks/presence/{id}.put.operationId: updatePresenceWebHook
paths./webhooks/presence/{id}.put.parameters.length: 3
paths./webhooks/presence/{id}.put.parameters[0].description: The unique ID of the
  webHook to update
paths./webhooks/presence/{id}.put.parameters[0].in: path
paths./webhooks/presence/{id}.put.parameters[0].maxLength: 255
paths./webhooks/presence/{id}.put.parameters[0].name: id
paths./webhooks/presence/{id}.put.parameters[0].required: true
paths./webhooks/presence/{id}.put.parameters[0].type: string
paths./webhooks/presence/{id}.put.parameters[1].description: WebHook callback URL.
  Currently only HTTP is supported
paths./webhooks/presence/{id}.put.parameters[1].in: formData
paths./webhooks/presence/{id}.put.parameters[1].maxLength: 255
paths./webhooks/presence/{id}.put.parameters[1].name: url
paths./webhooks/presence/{id}.put.parameters[1].required: false
paths./webhooks/presence/{id}.put.parameters[1].type: string
paths./webhooks/presence/{id}.put.parameters[2].collectionFormat: multi
paths./webhooks/presence/{id}.put.parameters[2].description: not available
paths./webhooks/presence/{id}.put.parameters[2].in: formData
paths./webhooks/presence/{id}.put.parameters[2].items.maxLength: 6500
paths./webhooks/presence/{id}.put.parameters[2].items.type: string
paths./webhooks/presence/{id}.put.parameters[2].name: userIds
paths./webhooks/presence/{id}.put.parameters[2].required: false
paths./webhooks/presence/{id}.put.parameters[2].type: array
paths./webhooks/presence/{id}.put.produces.length: 2
paths./webhooks/presence/{id}.put.produces[0]: application/json
paths./webhooks/presence/{id}.put.produces[1]: application/xml
paths./webhooks/presence/{id}.put.responses.200.description: The webHook registration
  was successfully updated
paths./webhooks/presence/{id}.put.responses.200.schema.$ref: '#/definitions/WebHook'
paths./webhooks/presence/{id}.put.responses.400.description: 'The request cannot be
  fulfilled due to bad syntax: <ul><li>an invalid URL</li><li>one or more invalid
  userIds</li><li>no input parameter is provided</li><li>a field constraint is violated</li></ul>'
paths./webhooks/presence/{id}.put.responses.401.description: The authentication was
  not successful
paths./webhooks/presence/{id}.put.responses.403.description: The maximum number of
  allowed userIds is reached
paths./webhooks/presence/{id}.put.responses.404.description: The webHook does not
  exist
paths./webhooks/presence/{id}.put.responses.500.description: The server encountered
  an internal error and the operation could not be completed.
paths./webhooks/presence/{id}.put.responses.503.description: The server is currently
  unable to receive requests.
paths./webhooks/presence/{id}.put.security.length: 1
paths./webhooks/presence/{id}.put.security[0].oauth.length: 2
paths./webhooks/presence/{id}.put.security[0].oauth[0]: ALL
paths./webhooks/presence/{id}.put.security[0].oauth[1]: READ_USER
paths./webhooks/presence/{id}.put.summary: Updates a Presence WebHook registration
paths./webhooks/presence/{id}.put.tags.length: 1
paths./webhooks/presence/{id}.put.tags[0]: Webhooks
schemes.length: 1
schemes[0]: https
securityDefinitions.oauth.authorizationUrl: https://circuitsandbox.net/oauth/authorize
securityDefinitions.oauth.flow: implicit
securityDefinitions.oauth.scopes.ALL: allows full access to all functionalities of
  the REST API
securityDefinitions.oauth.scopes.CALLS: allows to start or join real time collaboration
  session
securityDefinitions.oauth.scopes.READ_CONVERSATIONS: allows to read conversations
  of the authenticated user
securityDefinitions.oauth.scopes.READ_USER: allows to read user information for all
  users that belong to the tenant of the authenticated user
securityDefinitions.oauth.scopes.READ_USER_PROFILE: allows to read the user profile
  of the authenticated user
securityDefinitions.oauth.scopes.WRITE_CONVERSATIONS: allows to create and update
  conversations of the authenticated user or to post messages
securityDefinitions.oauth.scopes.WRITE_USER_PROFILE: allows to update the user profile
  of the authenticated user
securityDefinitions.oauth.type: oauth2
swagger: "2.0"

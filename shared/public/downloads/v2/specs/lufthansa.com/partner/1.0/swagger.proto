syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package lhpartner;

message GetBaggageBaggagetripandcontactSearchIDRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Bag tag number, PNR, boarding card or FQTV ID
    string searchID = 2;
}

message GetOffersFaresAllfaresRequest {
    // Mandatory http header:  application/xml or application/json
    string Accept = 1;
    // Enter the required cabin class (e.g econonmy, business etc.). (Acceptable values are: "", "economy", "premium economy", "business", "first")
    string cabin_class = 2;
    // Specifies in which catalogue the fares need to be searched (e.g.'4U;OS').
    string catalogues = 3;
    // Enter journey destination (e.g 'MAD').
    string destination = 4;
    // Mandatory for 4U. Specifies, which fares to be returned, such as basic, smart, best, smartflex, bestflex . (Acceptable values are: "", "basic", "smart", "best", "smartflex", "bestflex")
    string fare_family = 5;
    // Enter journey origin (e.g 'FRA').
    string origin = 6;
    // Enter journey return-date (e.g 2016-10-31)'.
    string return_date = 7;
    // Austrian Airlines only - specify the web tracking id to be used in OS Deep link.
    string trackingid = 8;
    // Enter journey travel-date (e.g 2016-10-20)
    string travel_date = 9;
    // Specifies the type and number of travelers (e.g. '(adult=2;child=2;infant=1)') For LH only (adult=1) possible.
    string travelers = 10;
}

message GetOffersFaresBestfaresRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")
    string cabin_class = 2;
    // Search fares from these carriers' catalogues (e.g. '4U;OS;LH')
    string catalogues = 3;
    // Country code of requestor. 2-letter ISO 3166-1 country code (e.g. 'de')
    string country = 4;
    // Journey destination. 3-letter IATA airport code (e.g. 'MAD')
    string destination = 5;
    // Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: "", "basic", "smart", "best", "smartflex", "bestflex")
    string fare_family = 6;
    // Journey origin. 3-letter IATA airport code (e.g. 'FRA')
    string origin = 7;
    // Fare range: 'byday' or 'bymonth' (Acceptable values are: "byday", "bymonth")
    string range = 8;
    // Austrian Airlines only - specify the web tracking id to be used in OS Deep link.
    string trackingid = 9;
    // Journey travel-date (YYYY-MM-DD)
    string travel_date = 10;
    // Trip duration in days (e.g. '7')
    string trip_duration = 11;
}

message GetOffersFaresDeeplinkRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")
    string cabin_class = 2;
    // Carrier for which the deep link will be created (e.g. 'LH')
    string catalogues = 3;
    // 2-letter ISO 3166-1 country code
    string country = 4;
    // Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')
    string destination = 5;
    // Journey destination airport or city name (e.g. 'madrid')
    string destination_name = 6;
    // Deep link encryption-key
    string encryption_key = 7;
    // Travel fare (e.g. '1341.45')
    string fare = 8;
    // Fare currency (e.g. 'EUR')
    string fare_currency = 9;
    // 2-letter ISO 3166-1 language code
    string lang = 10;
    // Travel net fare. Total fare less taxes and charges (e.g. '1140')
    string net_fare = 11;
    // Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')
    string origin = 12;
    // Journey origin airport or city name (e.g. 'frankfurt')
    string origin_name = 13;
    // Outbound flight segments in the sequence of travel (e.g. 'LH096;LH480')
    string outbound_segments = 14;
    // Deep link partner id (e.g. '1247')
    string partnerid = 15;
    // Journey return-date (YYYY-MM-DD)
    string return_date = 16;
    // Flight segments in the sequence of travel (e.g. 'LH7465;LH431')
    string return_segments = 17;
    // Deep link tracking ID
    string trackingid = 18;
    // Journey travel-date (YYYY-MM-DD)
    string travel_date = 19;
    // Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')
    string travelers = 20;
}

message GetOffersFaresDeeplinkFfpRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")
    string cabin_class = 2;
    // Carrier for which the deep link will be created (e.g. 'LH')
    string catalogues = 3;
    // 2-letter ISO 3166-1 country code
    string country = 4;
    // Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')
    string destination = 5;
    // Deep link encryption-key
    string encryption_key = 6;
    // 2-letter ISO 3166-1 language code
    string lang = 7;
    // Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')
    string origin = 8;
    // Deep link partner id (e.g. '1247')
    string partnerid = 9;
    // Journey return-date (YYYY-MM-DD)
    string return_date = 10;
    // Deep link tracking ID
    string trackingid = 11;
    // Journey travel-date (YYYY-MM-DD)
    string travel_date = 12;
    // Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')
    string travelers = 13;
}

message GetOffersFaresDeeplinkItcoRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")
    string cabin_class = 2;
    // Carrier for which the deep link will be created (e.g. 'LH')
    string catalogues = 3;
    // 2-letter ISO 3166-1 country code
    string country = 4;
    // Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')
    string destination = 5;
    // Deep link encryption-key
    string encryption_key = 6;
    // Travel fare (e.g. '1341.45')
    string fare = 7;
    // Fare currency (e.g. 'EUR')
    string fare_currency = 8;
    // 2-letter ISO 3166-1 language code
    string lang = 9;
    // Travel net fare. Total fare less taxes and charges (e.g. '1140')
    string net_fare = 10;
    // Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')
    string origin = 11;
    // Outbound flight segments in the sequence of travel (e.g. 'LH096;LH480')
    string outbound_segments = 12;
    // Deep link partner id (e.g. '1247')
    string partnerid = 13;
    // Journey return-date (YYYY-MM-DD)
    string return_date = 14;
    // Flight segments in the sequence of travel (e.g. 'LH7465;LH431')
    string return_segments = 15;
    // Deep link tracking ID
    string trackingid = 16;
    // Journey travel-date (YYYY-MM-DD)
    string travel_date = 17;
    // Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')
    string travelers = 18;
}

message GetOffersFaresFaresRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Include fares for these carriers e.g. ('4U;LH')
    string carriers = 2;
    // Search fares from these carriers' catalogues - currently active for Germanwings only  (4U)
    string catalogues = 3;
    // Fares family: basic,smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: "", "basic", "smart", "best", "smartflex", "bestflex")
    string fare_types = 4;
    // Journey details  e.g. (origin=TXL;destination=CGN;travel-date=2016-12-15;return-date=2016-12-20;cabin=Economy)
    string segments = 5;
    // Type and number of travelers e.g. (adult=1;child=1;infant=1)
    string travelers = 6;
}

message GetOffersFaresLowestfaresRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")
    string cabin_class = 2;
    // Search fares from these carriers' catalogues e.g. '4U;OS;LH'
    string catalogues = 3;
    // Country code of requestor. 2-letter ISO 3166-1 country code (e.g. 'de')
    string country = 4;
    // Journey destination. 3-letter IATA airport code e.g. 'MAD'
    string destination = 5;
    // Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: "", "basic", "smart", "best", "smartflex", "bestflex")
    string fare_family = 6;
    // Journey origin. 3-letter IATA aiport code e.g. 'FRA'
    string origin = 7;
    // Journey return-date - mandatory for OS and LH searches YYYY-MM-DD
    string return_date = 8;
    // Journey travel-date YYYY-MM-DD
    string travel_date = 9;
    // Type and number of travelers e.g. '(adult=2;child=2;infant=1)'. For LH only (adult=1) possible
    string travelers = 10;
}

message GetOffersFaresSubscriptionsRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")
    string cabin_class = 2;
    // 2-letter ISO 3166-1 country code
    string country = 3;
    // Journey destination. 3-letter IATA airport code (e.g. 'MAD')
    string destination = 4;
    // Email Address')
    string email = 5;
    // 2-letter ISO 3166-1 language code
    string lang = 6;
    // Journey origin. 3-leter IATA airport code (e.g. 'FRA')
    string origin = 7;
    // Tracking parameter
    string trackingid = 8;
    // Trip duration in days (e.g. '7')
    string trip_duration = 9;
}

message GetOffersOndRouteOriginDestinationRequest {
    // Mandatory http header:  application/xml or application/json
    string Accept = 1;
    // Carrier for which the OND will be retrieved (e.g. 'LH')
    string catalogues = 2;
    // Enter either the destination city or country code (e.g 'MAD' or 'ES'). Enter '*' for all
    string destination = 3;
    // Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
    string limit = 4;
    // Number of records skipped. Defaults to 0
    string offset = 5;
    // Enter either the orgin city or orgin country code (e.g 'FRA' or 'DE'). Enter '*' for all
    string origin = 6;
}

message GetOffersOndStatusRequest {
    // Mandatory http header:  application/xml or application/json
    string Accept = 1;
    // Carrier for which the OND will be retrieved (e.g. 'LH')
    string catalogues = 2;
    // Enter if newly added routes should be returned in the response. (Acceptable values are: "", "true", "false")
    string new_routes = 3;
    // Enter if old (deleted) routes should be returned in the response. (Acceptable values are: "", "true", "false")
    string old_routes = 4;
}

message GetOffersOndTopRequest {
    // Mandatory http header:  application/xml or application/json
    string Accept = 1;
    // Carrier for which the OND will be retrieved (e.g. 'LH')
    string catalogues = 2;
    // Enter the origin country code (e.g. 'DE'). Leave empty to search Top OND across all countries
    string origin = 3;
}

message GetOrdersOrdersOrderIDNameRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Surname of traveller
    string name = 2;
    // Unique order identifier
    string orderID = 3;
}

message PutPreflightAutocheckinTicketnumberRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Email address
    string emailAddress = 2;
    // Ticket number
    string ticketnumber = 3;
}

message GetPromotionsPriceoffersFlightsOndOriginDestinationRequest {
    // Departure date in local time (YYYY-MM-DD)
    string departureDate = 1;
    // Destination city. 3-letter IATA city code
    string destination = 2;
    // Departure city. 3-letter IATA city code
    string origin = 3;
    // Return date in local time (YYYY-MM-DD)
    string returnDate = 4;
    // Optional parameter.
    string service = 5;
}

message GetReferencesSeatdetailsAircraftCodeCabinCodeRequest {
    // http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
    string Accept = 1;
    // Aircraft type. 3-character IATA equipment code
    string aircraftCode = 2;
    // Cabin class: M, E, C, F (Acceptable values are: "", "M", "E", "C", "F")
    string cabinCode = 3;
    // 2-letter ISO 3166-1 language code
    string lang = 4;
}

service LHPartnerService {
    // Baggage Trip and Contact
    // 
    // Retrieve passenger trip, contact and baggage details. This service is only accessible for LH privileged partners
    rpc GetBaggageBaggagetripandcontactSearchID(GetBaggageBaggagetripandcontactSearchIDRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/baggage/baggagetripandcontact/{searchID}"
      };
    }
    // All Fares
    // 
    // Retrieves all available fares for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
    rpc GetOffersFaresAllfares(GetOffersFaresAllfaresRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/fares/allfares"
      };
    }
    // Best Fares
    // 
    // Retrieve best fares for the requested journey across multiple days or multiple months.
    rpc GetOffersFaresBestfares(GetOffersFaresBestfaresRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/fares/bestfares"
      };
    }
    // Deep Links
    // 
    // Returns valid deep links for the provided input parameters
    rpc GetOffersFaresDeeplink(GetOffersFaresDeeplinkRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/fares/deeplink"
      };
    }
    // LH Deep Links - FFP
    // 
    // Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
    rpc GetOffersFaresDeeplinkFfp(GetOffersFaresDeeplinkFfpRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/fares/deeplink/ffp"
      };
    }
    // LH Deep Links - ITCO
    // 
    // Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
    rpc GetOffersFaresDeeplinkItco(GetOffersFaresDeeplinkItcoRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/fares/deeplink/itco"
      };
    }
    // Fares
    // 
    // Retrieve all available fares per fare family for a specific Origin & Destination on a given date
    rpc GetOffersFaresFares(GetOffersFaresFaresRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/fares/fares"
      };
    }
    // Lowest Fares
    // 
    // Retrieve lowest fare for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS & LH
    rpc GetOffersFaresLowestfares(GetOffersFaresLowestfaresRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/fares/lowestfares"
      };
    }
    // Fares Subscriptions
    // 
    // Create a subscription for best price O&D. Receive regular updates on lowest fares
    rpc GetOffersFaresSubscriptions(GetOffersFaresSubscriptionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/fares/subscriptions"
      };
    }
    // OND Route
    // 
    // Returns LH route origin & destination information
    rpc GetOffersOndRouteOriginDestination(GetOffersOndRouteOriginDestinationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/ond/route/{origin}/{destination}"
      };
    }
    // OND Status
    // 
    // Returns LH network route status information. Search for recently added or retired routes
    rpc GetOffersOndStatus(GetOffersOndStatusRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/ond/status"
      };
    }
    // Top OND
    // 
    // Returns LH Top routes per country or across all countries
    rpc GetOffersOndTop(GetOffersOndTopRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/offers/ond/top"
      };
    }
    // Orders
    // 
    // Retrieve order by ID and optionally name. This service is only accessible for LH privileged partners
    rpc GetOrdersOrdersOrderIDName(GetOrdersOrdersOrderIDNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/orders/orders/{orderID}/{name}"
      };
    }
    // Auto Check-In
    // 
    // Trigger an automatic check-in given a ticket number. This service is only accessible for LH privileged partners
    rpc PutPreflightAutocheckinTicketnumber(PutPreflightAutocheckinTicketnumberRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v1/preflight/autocheckin/{ticketnumber}"
      };
    }
    // Price Offers
    // 
    // Retrieve a best price offer given an origin and destination.
    rpc GetPromotionsPriceoffersFlightsOndOriginDestination(GetPromotionsPriceoffersFlightsOndOriginDestinationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/promotions/priceoffers/flights/ond/{origin}/{destination}"
      };
    }
    // Seat Details
    // 
    // A description of all available seat details by aircraft type. You can retrieve the full set or details for a particular aircraft type.
    rpc GetReferencesSeatdetailsAircraftCodeCabinCode(GetReferencesSeatdetailsAircraftCodeCabinCodeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/v1/references/seatdetails/{aircraftCode}/{cabinCode}"
      };
    }
}

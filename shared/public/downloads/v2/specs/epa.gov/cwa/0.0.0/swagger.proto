syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package u.s.epaenforcementandcompliancehistoryonline(echo)-cleanwateract(cwa)restservices;

message GetCwa_rest_servicesGet_downloadRequest {
    // Output Format Flag.  Enter one of the following keywords:
    // - CSV = Facility results formatted as comma delimited file download (default).
    string output = 1;
    number p_pretty_print = 2;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 3;
    string qid = 4;
}

message PostCwa_rest_servicesGet_downloadRequest {
    // Output Format Flag.  Enter one of the following keywords:
    // - CSV = Facility results formatted as comma delimited file download (default).
    string output = 1;
    number p_pretty_print = 2;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 3;
    string qid = 4;
}

message GetCwa_rest_servicesGet_facilitiesRequest {
    string callback = 1;
    maplist maplist = 2;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCwa_rest_servicesGet_facilitiesRequest_Output {
        GETCWA_REST_SERVICESGET_FACILITIESREQUEST_OUTPUT_JSONP = 0;
        GETCWA_REST_SERVICESGET_FACILITIESREQUEST_OUTPUT_JSON = 1;
        GETCWA_REST_SERVICESGET_FACILITIESREQUEST_OUTPUT_XML = 2;
    }
    GetCwa_rest_servicesGet_facilitiesRequest_Output output = 3;
    p_MS4 p_MS4 = 4;
    p_act p_act = 5;
    p_agoo p_agoo = 6;
    number p_alrexceed = 7;
    string p_bio_analy_method_catgry = 8;
    p_bio_current_vio p_bio_current_vio = 9;
    string p_bio_fac_type = 10;
    string p_bio_flag = 11;
    number p_bio_insp_deficiencies = 12;
    string p_bio_mgmt_container = 13;
    string p_bio_mgmt_def_category = 14;
    number p_bio_mgmt_deficiencies = 15;
    string p_bio_mgmt_pathogen = 16;
    string p_bio_mgmt_pathred = 17;
    string p_bio_mgmt_prctce_handler = 18;
    string p_bio_mgmt_prctce_stype = 19;
    string p_bio_mgmt_prctce_type = 20;
    string p_bio_mgmt_vector = 21;
    number p_bio_qtrs_in_vio = 22;
    string p_bio_rpt_year = 23;
    string p_bio_total_volume_amt = 24;
    string p_bio_trtmnt_procs = 25;
    string p_bio_vio_code = 26;
    string p_bio_vio_last_year = 27;
    number p_c1lat = 28;
    number p_c1lon = 29;
    number p_c2lat = 30;
    number p_c2lon = 31;
    string p_co = 32;
    string p_ct = 33;
    string p_da1 = 34;
    string p_da2 = 35;
    p_decouple p_decouple = 36;
    string p_ds1 = 37;
    string p_ds2 = 38;
    p_dwd p_dwd = 39;
    string p_ejscreen = 40;
    string p_ejscreen_over80cnt = 41;
    string p_fa = 42;
    p_fac_ico p_fac_ico = 43;
    string p_fac_icos = 44;
    p_fea p_fea = 45;
    p_feaa p_feaa = 46;
    number p_feay = 47;
    p_ff p_ff = 48;
    string p_fips = 49;
    string p_fn = 50;
    p_fntype p_fntype = 51;
    string p_frs = 52;
    string p_huc = 53;
    string p_iagency = 54;
    p_ico p_ico = 55;
    string p_icoo = 56;
    string p_idt1 = 57;
    string p_idt2 = 58;
    p_iea p_iea = 59;
    p_ieaa p_ieaa = 60;
    number p_ieay = 61;
    p_imp_pol p_imp_pol = 62;
    p_impw p_impw = 63;
    p_indsw p_indsw = 64;
    number p_insp_deficiencies = 65;
    string p_isws = 66;
    string p_iswss = 67;
    string p_iswssID = 68;
    p_last_dmr_within p_last_dmr_within = 69;
    number p_lat = 70;
    p_limit_addr p_limit_addr = 71;
    number p_long = 72;
    string p_mact = 73;
    p_maj p_maj = 74;
    p_med p_med = 75;
    string p_mon_type = 76;
    number p_months_last_dmr = 77;
    p_msgp_ptype p_msgp_ptype = 78;
    string p_msgp_rpt_year = 79;
    string p_ncs = 80;
    string p_ooCt = 81;
    string p_ooFN = 82;
    p_ooFNtype p_ooFNtype = 83;
    string p_ooSA = 84;
    string p_ooSA1 = 85;
    string p_ooSt = 86;
    string p_ooZip = 87;
    p_owop p_owop = 88;
    string p_pccs = 89;
    string p_pcomp = 90;
    p_pcss p_pcss = 91;
    p_pctrack p_pctrack = 92;
    p_pd p_pd = 93;
    p_pdwdist p_pdwdist = 94;
    string p_pen = 95;
    p_pexcd p_pexcd = 96;
    p_pexp p_pexp = 97;
    string p_pfead1 = 98;
    string p_pfead2 = 99;
    string p_pfeat = 100;
    string p_pid = 101;
    p_pidall p_pidall = 102;
    string p_pityp = 103;
    p_plimits p_plimits = 104;
    p_pm p_pm = 105;
    p_psncq p_psncq = 106;
    string p_pstat = 107;
    string p_pswcas = 108;
    p_pswdmp p_pswdmp = 109;
    string p_pswdpc = 110;
    string p_pswparam = 111;
    string p_pswpol = 112;
    p_pswvio p_pswvio = 113;
    p_pt p_pt = 114;
    string p_ptype = 115;
    p_qiv p_qiv = 116;
    string p_qs = 117;
    number p_radius = 118;
    p_reg p_reg = 119;
    string p_sa = 120;
    string p_sa1 = 121;
    string p_sfs = 122;
    string p_sic = 123;
    string p_sic2 = 124;
    string p_sic4 = 125;
    string p_st = 126;
    p_trep p_trep = 127;
    number p_tribedist = 128;
    number p_tribeid = 129;
    string p_tribename = 130;
    p_usmex p_usmex = 131;
    string p_vio_last_year = 132;
    string p_wbd = 133;
    p_ysl p_ysl = 134;
    p_ysla p_ysla = 135;
    number p_ysly = 136;
    string p_zip = 137;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 138;
    number queryset = 139;
    number responseset = 140;
    summarylist summarylist = 141;
    tablelist tablelist = 142;
}

message GetCwa_rest_servicesGet_facilitiesResponse {
    cwa1_Results Results = 1;
}

message PostCwa_rest_servicesGet_facilitiesRequest {
    string callback = 1;
    maplist maplist = 2;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCwa_rest_servicesGet_facilitiesRequest_Output {
        POSTCWA_REST_SERVICESGET_FACILITIESREQUEST_OUTPUT_JSONP = 0;
        POSTCWA_REST_SERVICESGET_FACILITIESREQUEST_OUTPUT_JSON = 1;
        POSTCWA_REST_SERVICESGET_FACILITIESREQUEST_OUTPUT_XML = 2;
    }
    PostCwa_rest_servicesGet_facilitiesRequest_Output output = 3;
    p_MS4 p_MS4 = 4;
    p_act p_act = 5;
    p_agoo p_agoo = 6;
    number p_alrexceed = 7;
    string p_bio_analy_method_catgry = 8;
    p_bio_current_vio p_bio_current_vio = 9;
    string p_bio_fac_type = 10;
    string p_bio_flag = 11;
    number p_bio_insp_deficiencies = 12;
    string p_bio_mgmt_container = 13;
    string p_bio_mgmt_def_category = 14;
    number p_bio_mgmt_deficiencies = 15;
    string p_bio_mgmt_pathogen = 16;
    string p_bio_mgmt_pathred = 17;
    string p_bio_mgmt_prctce_handler = 18;
    string p_bio_mgmt_prctce_stype = 19;
    string p_bio_mgmt_prctce_type = 20;
    string p_bio_mgmt_vector = 21;
    number p_bio_qtrs_in_vio = 22;
    string p_bio_rpt_year = 23;
    string p_bio_total_volume_amt = 24;
    string p_bio_trtmnt_procs = 25;
    string p_bio_vio_code = 26;
    string p_bio_vio_last_year = 27;
    number p_c1lat = 28;
    number p_c1lon = 29;
    number p_c2lat = 30;
    number p_c2lon = 31;
    string p_co = 32;
    string p_ct = 33;
    string p_da1 = 34;
    string p_da2 = 35;
    p_decouple p_decouple = 36;
    string p_ds1 = 37;
    string p_ds2 = 38;
    p_dwd p_dwd = 39;
    string p_ejscreen = 40;
    string p_ejscreen_over80cnt = 41;
    string p_fa = 42;
    p_fac_ico p_fac_ico = 43;
    string p_fac_icos = 44;
    p_fea p_fea = 45;
    p_feaa p_feaa = 46;
    number p_feay = 47;
    p_ff p_ff = 48;
    string p_fips = 49;
    string p_fn = 50;
    p_fntype p_fntype = 51;
    string p_frs = 52;
    string p_huc = 53;
    string p_iagency = 54;
    p_ico p_ico = 55;
    string p_icoo = 56;
    string p_idt1 = 57;
    string p_idt2 = 58;
    p_iea p_iea = 59;
    p_ieaa p_ieaa = 60;
    number p_ieay = 61;
    p_imp_pol p_imp_pol = 62;
    p_impw p_impw = 63;
    p_indsw p_indsw = 64;
    number p_insp_deficiencies = 65;
    string p_isws = 66;
    string p_iswss = 67;
    string p_iswssID = 68;
    p_last_dmr_within p_last_dmr_within = 69;
    number p_lat = 70;
    p_limit_addr p_limit_addr = 71;
    number p_long = 72;
    string p_mact = 73;
    p_maj p_maj = 74;
    p_med p_med = 75;
    string p_mon_type = 76;
    number p_months_last_dmr = 77;
    p_msgp_ptype p_msgp_ptype = 78;
    string p_msgp_rpt_year = 79;
    string p_ncs = 80;
    string p_ooCt = 81;
    string p_ooFN = 82;
    p_ooFNtype p_ooFNtype = 83;
    string p_ooSA = 84;
    string p_ooSA1 = 85;
    string p_ooSt = 86;
    string p_ooZip = 87;
    p_owop p_owop = 88;
    string p_pccs = 89;
    string p_pcomp = 90;
    p_pcss p_pcss = 91;
    p_pctrack p_pctrack = 92;
    p_pd p_pd = 93;
    p_pdwdist p_pdwdist = 94;
    string p_pen = 95;
    p_pexcd p_pexcd = 96;
    p_pexp p_pexp = 97;
    string p_pfead1 = 98;
    string p_pfead2 = 99;
    string p_pfeat = 100;
    string p_pid = 101;
    p_pidall p_pidall = 102;
    string p_pityp = 103;
    p_plimits p_plimits = 104;
    p_pm p_pm = 105;
    p_psncq p_psncq = 106;
    string p_pstat = 107;
    string p_pswcas = 108;
    p_pswdmp p_pswdmp = 109;
    string p_pswdpc = 110;
    string p_pswparam = 111;
    string p_pswpol = 112;
    p_pswvio p_pswvio = 113;
    p_pt p_pt = 114;
    string p_ptype = 115;
    p_qiv p_qiv = 116;
    string p_qs = 117;
    number p_radius = 118;
    p_reg p_reg = 119;
    string p_sa = 120;
    string p_sa1 = 121;
    string p_sfs = 122;
    string p_sic = 123;
    string p_sic2 = 124;
    string p_sic4 = 125;
    string p_st = 126;
    p_trep p_trep = 127;
    number p_tribedist = 128;
    number p_tribeid = 129;
    string p_tribename = 130;
    p_usmex p_usmex = 131;
    string p_vio_last_year = 132;
    string p_wbd = 133;
    p_ysl p_ysl = 134;
    p_ysla p_ysla = 135;
    number p_ysly = 136;
    string p_zip = 137;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 138;
    number queryset = 139;
    number responseset = 140;
    summarylist summarylist = 141;
    tablelist tablelist = 142;
}

message PostCwa_rest_servicesGet_facilitiesResponse {
    cwa1_Results Results = 1;
}

message GetCwa_rest_servicesGet_facility_infoRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    // - CSV = Facility results formatted as comma delimited file download.
    // - GEOJSON = Facility results formatted as GeoJSON feature collection.
    // - GEOJSONP = Facility results formatted as GeoJSON feature collection with Padding.
    // - GEOJSOND = Facility results formatted as GeoJSON feature collection download.
    string output = 2;
    p_MS4 p_MS4 = 3;
    p_act p_act = 4;
    p_agoo p_agoo = 5;
    number p_alrexceed = 6;
    string p_bio_analy_method_catgry = 7;
    p_bio_current_vio p_bio_current_vio = 8;
    string p_bio_fac_type = 9;
    string p_bio_flag = 10;
    number p_bio_insp_deficiencies = 11;
    string p_bio_mgmt_container = 12;
    string p_bio_mgmt_def_category = 13;
    number p_bio_mgmt_deficiencies = 14;
    string p_bio_mgmt_pathogen = 15;
    string p_bio_mgmt_pathred = 16;
    string p_bio_mgmt_prctce_handler = 17;
    string p_bio_mgmt_prctce_stype = 18;
    string p_bio_mgmt_prctce_type = 19;
    string p_bio_mgmt_vector = 20;
    number p_bio_qtrs_in_vio = 21;
    string p_bio_rpt_year = 22;
    string p_bio_total_volume_amt = 23;
    string p_bio_trtmnt_procs = 24;
    string p_bio_vio_code = 25;
    string p_bio_vio_last_year = 26;
    string p_co = 27;
    string p_ct = 28;
    string p_da1 = 29;
    string p_da2 = 30;
    p_decouple p_decouple = 31;
    string p_ds1 = 32;
    string p_ds2 = 33;
    p_dwd p_dwd = 34;
    string p_ejscreen = 35;
    string p_ejscreen_over80cnt = 36;
    string p_fa = 37;
    p_fac_ico p_fac_ico = 38;
    string p_fac_icos = 39;
    p_fea p_fea = 40;
    p_feaa p_feaa = 41;
    number p_feay = 42;
    p_ff p_ff = 43;
    string p_fips = 44;
    string p_fn = 45;
    p_fntype p_fntype = 46;
    string p_frs = 47;
    string p_huc = 48;
    string p_iagency = 49;
    p_ico p_ico = 50;
    string p_icoo = 51;
    string p_idt1 = 52;
    string p_idt2 = 53;
    p_iea p_iea = 54;
    p_ieaa p_ieaa = 55;
    number p_ieay = 56;
    p_imp_pol p_imp_pol = 57;
    p_impw p_impw = 58;
    p_indsw p_indsw = 59;
    number p_insp_deficiencies = 60;
    string p_isws = 61;
    string p_iswss = 62;
    string p_iswssID = 63;
    p_last_dmr_within p_last_dmr_within = 64;
    number p_lat = 65;
    p_limit_addr p_limit_addr = 66;
    number p_long = 67;
    string p_mact = 68;
    p_maj p_maj = 69;
    p_med p_med = 70;
    string p_mon_type = 71;
    number p_months_last_dmr = 72;
    p_msgp_ptype p_msgp_ptype = 73;
    string p_msgp_rpt_year = 74;
    string p_ncs = 75;
    string p_ooCt = 76;
    string p_ooFN = 77;
    p_ooFNtype p_ooFNtype = 78;
    string p_ooSA = 79;
    string p_ooSA1 = 80;
    string p_ooSt = 81;
    string p_ooZip = 82;
    p_owop p_owop = 83;
    string p_pccs = 84;
    string p_pcomp = 85;
    p_pcss p_pcss = 86;
    p_pctrack p_pctrack = 87;
    p_pd p_pd = 88;
    p_pdwdist p_pdwdist = 89;
    string p_pen = 90;
    p_pexcd p_pexcd = 91;
    p_pexp p_pexp = 92;
    string p_pfead1 = 93;
    string p_pfead2 = 94;
    string p_pfeat = 95;
    string p_pid = 96;
    p_pidall p_pidall = 97;
    string p_pityp = 98;
    p_plimits p_plimits = 99;
    p_pm p_pm = 100;
    number p_pretty_print = 101;
    p_psncq p_psncq = 102;
    string p_pstat = 103;
    string p_pswcas = 104;
    p_pswdmp p_pswdmp = 105;
    string p_pswdpc = 106;
    string p_pswparam = 107;
    string p_pswpol = 108;
    p_pswvio p_pswvio = 109;
    p_pt p_pt = 110;
    string p_ptype = 111;
    p_qiv p_qiv = 112;
    string p_qs = 113;
    number p_radius = 114;
    p_reg p_reg = 115;
    string p_sa = 116;
    string p_sa1 = 117;
    string p_sfs = 118;
    string p_sic = 119;
    string p_sic2 = 120;
    string p_sic4 = 121;
    string p_st = 122;
    p_trep p_trep = 123;
    number p_tribedist = 124;
    number p_tribeid = 125;
    string p_tribename = 126;
    p_usmex p_usmex = 127;
    string p_vio_last_year = 128;
    string p_wbd = 129;
    p_ysl p_ysl = 130;
    p_ysla p_ysla = 131;
    number p_ysly = 132;
    string p_zip = 133;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 134;
    number responseset = 135;
    number xmax = 136;
    number xmin = 137;
    number ymax = 138;
    number ymin = 139;
}

message GetCwa_rest_servicesGet_facility_infoResponse {
    cwa2_Results Results = 1;
}

message PostCwa_rest_servicesGet_facility_infoRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    // - CSV = Facility results formatted as comma delimited file download.
    // - GEOJSON = Facility results formatted as GeoJSON feature collection.
    // - GEOJSONP = Facility results formatted as GeoJSON feature collection with Padding.
    // - GEOJSOND = Facility results formatted as GeoJSON feature collection download.
    string output = 2;
    p_MS4 p_MS4 = 3;
    p_act p_act = 4;
    p_agoo p_agoo = 5;
    number p_alrexceed = 6;
    string p_bio_analy_method_catgry = 7;
    p_bio_current_vio p_bio_current_vio = 8;
    string p_bio_fac_type = 9;
    string p_bio_flag = 10;
    number p_bio_insp_deficiencies = 11;
    string p_bio_mgmt_container = 12;
    string p_bio_mgmt_def_category = 13;
    number p_bio_mgmt_deficiencies = 14;
    string p_bio_mgmt_pathogen = 15;
    string p_bio_mgmt_pathred = 16;
    string p_bio_mgmt_prctce_handler = 17;
    string p_bio_mgmt_prctce_stype = 18;
    string p_bio_mgmt_prctce_type = 19;
    string p_bio_mgmt_vector = 20;
    number p_bio_qtrs_in_vio = 21;
    string p_bio_rpt_year = 22;
    string p_bio_total_volume_amt = 23;
    string p_bio_trtmnt_procs = 24;
    string p_bio_vio_code = 25;
    string p_bio_vio_last_year = 26;
    string p_co = 27;
    string p_ct = 28;
    string p_da1 = 29;
    string p_da2 = 30;
    p_decouple p_decouple = 31;
    string p_ds1 = 32;
    string p_ds2 = 33;
    p_dwd p_dwd = 34;
    string p_ejscreen = 35;
    string p_ejscreen_over80cnt = 36;
    string p_fa = 37;
    p_fac_ico p_fac_ico = 38;
    string p_fac_icos = 39;
    p_fea p_fea = 40;
    p_feaa p_feaa = 41;
    number p_feay = 42;
    p_ff p_ff = 43;
    string p_fips = 44;
    string p_fn = 45;
    p_fntype p_fntype = 46;
    string p_frs = 47;
    string p_huc = 48;
    string p_iagency = 49;
    p_ico p_ico = 50;
    string p_icoo = 51;
    string p_idt1 = 52;
    string p_idt2 = 53;
    p_iea p_iea = 54;
    p_ieaa p_ieaa = 55;
    number p_ieay = 56;
    p_imp_pol p_imp_pol = 57;
    p_impw p_impw = 58;
    p_indsw p_indsw = 59;
    number p_insp_deficiencies = 60;
    string p_isws = 61;
    string p_iswss = 62;
    string p_iswssID = 63;
    p_last_dmr_within p_last_dmr_within = 64;
    number p_lat = 65;
    p_limit_addr p_limit_addr = 66;
    number p_long = 67;
    string p_mact = 68;
    p_maj p_maj = 69;
    p_med p_med = 70;
    string p_mon_type = 71;
    number p_months_last_dmr = 72;
    p_msgp_ptype p_msgp_ptype = 73;
    string p_msgp_rpt_year = 74;
    string p_ncs = 75;
    string p_ooCt = 76;
    string p_ooFN = 77;
    p_ooFNtype p_ooFNtype = 78;
    string p_ooSA = 79;
    string p_ooSA1 = 80;
    string p_ooSt = 81;
    string p_ooZip = 82;
    p_owop p_owop = 83;
    string p_pccs = 84;
    string p_pcomp = 85;
    p_pcss p_pcss = 86;
    p_pctrack p_pctrack = 87;
    p_pd p_pd = 88;
    p_pdwdist p_pdwdist = 89;
    string p_pen = 90;
    p_pexcd p_pexcd = 91;
    p_pexp p_pexp = 92;
    string p_pfead1 = 93;
    string p_pfead2 = 94;
    string p_pfeat = 95;
    string p_pid = 96;
    p_pidall p_pidall = 97;
    string p_pityp = 98;
    p_plimits p_plimits = 99;
    p_pm p_pm = 100;
    number p_pretty_print = 101;
    p_psncq p_psncq = 102;
    string p_pstat = 103;
    string p_pswcas = 104;
    p_pswdmp p_pswdmp = 105;
    string p_pswdpc = 106;
    string p_pswparam = 107;
    string p_pswpol = 108;
    p_pswvio p_pswvio = 109;
    p_pt p_pt = 110;
    string p_ptype = 111;
    p_qiv p_qiv = 112;
    string p_qs = 113;
    number p_radius = 114;
    p_reg p_reg = 115;
    string p_sa = 116;
    string p_sa1 = 117;
    string p_sfs = 118;
    string p_sic = 119;
    string p_sic2 = 120;
    string p_sic4 = 121;
    string p_st = 122;
    p_trep p_trep = 123;
    number p_tribedist = 124;
    number p_tribeid = 125;
    string p_tribename = 126;
    p_usmex p_usmex = 127;
    string p_vio_last_year = 128;
    string p_wbd = 129;
    p_ysl p_ysl = 130;
    p_ysla p_ysla = 131;
    number p_ysly = 132;
    string p_zip = 133;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 134;
    number responseset = 135;
    number xmax = 136;
    number xmin = 137;
    number ymax = 138;
    number ymin = 139;
}

message PostCwa_rest_servicesGet_facility_infoResponse {
    cwa2_Results Results = 1;
}

message GetCwa_rest_servicesGet_geojsonRequest {
    string callback = 1;
    descending descending = 2;
    number newsort = 3;
    // Output Format Flag.  Enter one of the following keywords:
    // - GEOJSON = Facility results formatted as GeoJSON feature collection (default).
    // - GEOJSONP = Facility results formatted as GeoJSON feature collection with Padding.
    // - GEOJSOND = Facility results formatted as GeoJSON feature collection download.
    string output = 4;
    number p_pretty_print = 5;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 6;
    string qid = 7;
}

message GetCwa_rest_servicesGet_geojsonResponse {
    // Array of GeoJSON feature objects.
    repeated cwa5_Feature features = 1;
    // Static marker indicating object is a GeoJSON Feature Collection.
    string type = 2;
}

message PostCwa_rest_servicesGet_geojsonRequest {
    string callback = 1;
    descending descending = 2;
    number newsort = 3;
    // Output Format Flag.  Enter one of the following keywords:
    // - GEOJSON = Facility results formatted as GeoJSON feature collection (default).
    // - GEOJSONP = Facility results formatted as GeoJSON feature collection with Padding.
    // - GEOJSOND = Facility results formatted as GeoJSON feature collection download.
    string output = 4;
    number p_pretty_print = 5;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 6;
    string qid = 7;
}

message PostCwa_rest_servicesGet_geojsonResponse {
    // Array of GeoJSON feature objects.
    repeated cwa5_Feature features = 1;
    // Static marker indicating object is a GeoJSON Feature Collection.
    string type = 2;
}

message GetCwa_rest_servicesGet_info_clustersRequest {
    // Output Format Flag.  Enter one of the following keywords:
    // - CSV = Facility results formatted as comma delimited file download (default).
    // - GEOJSOND = Facility results formatted as GeoJSON feature collection download.
    string output = 1;
    number p_pretty_print = 2;
    string p_qid = 3;
}

message PostCwa_rest_servicesGet_info_clustersRequest {
    // Output Format Flag.  Enter one of the following keywords:
    // - CSV = Facility results formatted as comma delimited file download (default).
    // - GEOJSOND = Facility results formatted as GeoJSON feature collection download.
    string output = 1;
    number p_pretty_print = 2;
    string p_qid = 3;
}

message GetCwa_rest_servicesGet_mapRequest {
    number c1_lat = 1;
    number c1_long = 2;
    number c2_lat = 3;
    number c2_long = 4;
    string callback = 5;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCwa_rest_servicesGet_mapRequest_Output {
        GETCWA_REST_SERVICESGET_MAPREQUEST_OUTPUT_JSONP = 0;
        GETCWA_REST_SERVICESGET_MAPREQUEST_OUTPUT_JSON = 1;
        GETCWA_REST_SERVICESGET_MAPREQUEST_OUTPUT_XML = 2;
    }
    GetCwa_rest_servicesGet_mapRequest_Output output = 6;
    string p_id = 7;
    string qid = 8;
    tablelist tablelist = 9;
}

message GetCwa_rest_servicesGet_mapResponse {
    cwa3_MapOutput MapOutput = 1;
}

message PostCwa_rest_servicesGet_mapRequest {
    number c1_lat = 1;
    number c1_long = 2;
    number c2_lat = 3;
    number c2_long = 4;
    string callback = 5;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCwa_rest_servicesGet_mapRequest_Output {
        POSTCWA_REST_SERVICESGET_MAPREQUEST_OUTPUT_JSONP = 0;
        POSTCWA_REST_SERVICESGET_MAPREQUEST_OUTPUT_JSON = 1;
        POSTCWA_REST_SERVICESGET_MAPREQUEST_OUTPUT_XML = 2;
    }
    PostCwa_rest_servicesGet_mapRequest_Output output = 6;
    string p_id = 7;
    string qid = 8;
    tablelist tablelist = 9;
}

message PostCwa_rest_servicesGet_mapResponse {
    cwa3_MapOutput MapOutput = 1;
}

message GetCwa_rest_servicesGet_qidRequest {
    string callback = 1;
    descending descending = 2;
    number newsort = 3;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCwa_rest_servicesGet_qidRequest_Output {
        GETCWA_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSONP = 0;
        GETCWA_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSON = 1;
        GETCWA_REST_SERVICESGET_QIDREQUEST_OUTPUT_XML = 2;
    }
    GetCwa_rest_servicesGet_qidRequest_Output output = 4;
    number pageno = 5;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 6;
    string qid = 7;
}

message GetCwa_rest_servicesGet_qidResponse {
    cwa4_Results Results = 1;
}

message PostCwa_rest_servicesGet_qidRequest {
    string callback = 1;
    descending descending = 2;
    number newsort = 3;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCwa_rest_servicesGet_qidRequest_Output {
        POSTCWA_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSONP = 0;
        POSTCWA_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSON = 1;
        POSTCWA_REST_SERVICESGET_QIDREQUEST_OUTPUT_XML = 2;
    }
    PostCwa_rest_servicesGet_qidRequest_Output output = 4;
    number pageno = 5;
    // Used to cutomize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions.
    string qcolumns = 6;
    string qid = 7;
}

message PostCwa_rest_servicesGet_qidResponse {
    cwa4_Results Results = 1;
}

message GetCwa_rest_servicesMetadataRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCwa_rest_servicesMetadataRequest_Output {
        GETCWA_REST_SERVICESMETADATAREQUEST_OUTPUT_JSONP = 0;
        GETCWA_REST_SERVICESMETADATAREQUEST_OUTPUT_JSON = 1;
        GETCWA_REST_SERVICESMETADATAREQUEST_OUTPUT_XML = 2;
    }
    GetCwa_rest_servicesMetadataRequest_Output output = 2;
}

message GetCwa_rest_servicesMetadataResponse {
    met_Results Results = 1;
}

message PostCwa_rest_servicesMetadataRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCwa_rest_servicesMetadataRequest_Output {
        POSTCWA_REST_SERVICESMETADATAREQUEST_OUTPUT_JSONP = 0;
        POSTCWA_REST_SERVICESMETADATAREQUEST_OUTPUT_JSON = 1;
        POSTCWA_REST_SERVICESMETADATAREQUEST_OUTPUT_XML = 2;
    }
    PostCwa_rest_servicesMetadataRequest_Output output = 2;
}

message PostCwa_rest_servicesMetadataResponse {
    met_Results Results = 1;
}

message GetRest_lookupsBp_tribesRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsBp_tribesRequest_Output {
        GETREST_LOOKUPSBP_TRIBESREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSBP_TRIBESREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSBP_TRIBESREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsBp_tribesRequest_Output output = 2;
    string search_term = 3;
}

message GetRest_lookupsBp_tribesResponse {
    rlk13_Results Results = 1;
}

message PostRest_lookupsBp_tribesRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsBp_tribesRequest_Output {
        POSTREST_LOOKUPSBP_TRIBESREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSBP_TRIBESREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSBP_TRIBESREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsBp_tribesRequest_Output output = 2;
    string search_term = 3;
}

message PostRest_lookupsBp_tribesResponse {
    rlk13_Results Results = 1;
}

message GetRest_lookupsCwa_parametersRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsCwa_parametersRequest_Output {
        GETREST_LOOKUPSCWA_PARAMETERSREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSCWA_PARAMETERSREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSCWA_PARAMETERSREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsCwa_parametersRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message GetRest_lookupsCwa_parametersResponse {
    rlk16_Results Results = 1;
}

message PostRest_lookupsCwa_parametersRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsCwa_parametersRequest_Output {
        POSTREST_LOOKUPSCWA_PARAMETERSREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSCWA_PARAMETERSREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSCWA_PARAMETERSREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsCwa_parametersRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message PostRest_lookupsCwa_parametersResponse {
    rlk16_Results Results = 1;
}

message GetRest_lookupsCwa_pollutantsRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsCwa_pollutantsRequest_Output {
        GETREST_LOOKUPSCWA_POLLUTANTSREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSCWA_POLLUTANTSREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSCWA_POLLUTANTSREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsCwa_pollutantsRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message GetRest_lookupsCwa_pollutantsResponse {
    rlk17_Results Results = 1;
}

message PostRest_lookupsCwa_pollutantsRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsCwa_pollutantsRequest_Output {
        POSTREST_LOOKUPSCWA_POLLUTANTSREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSCWA_POLLUTANTSREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSCWA_POLLUTANTSREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsCwa_pollutantsRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message PostRest_lookupsCwa_pollutantsResponse {
    rlk17_Results Results = 1;
}

message GetRest_lookupsFederal_agenciesRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsFederal_agenciesRequest_Output {
        GETREST_LOOKUPSFEDERAL_AGENCIESREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSFEDERAL_AGENCIESREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSFEDERAL_AGENCIESREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsFederal_agenciesRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message GetRest_lookupsFederal_agenciesResponse {
    rlk46_Results Results = 1;
}

message PostRest_lookupsFederal_agenciesRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsFederal_agenciesRequest_Output {
        POSTREST_LOOKUPSFEDERAL_AGENCIESREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSFEDERAL_AGENCIESREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSFEDERAL_AGENCIESREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsFederal_agenciesRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message PostRest_lookupsFederal_agenciesResponse {
    rlk46_Results Results = 1;
}

message GetRest_lookupsIcis_inspection_typesRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsIcis_inspection_typesRequest_Output {
        GETREST_LOOKUPSICIS_INSPECTION_TYPESREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSICIS_INSPECTION_TYPESREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSICIS_INSPECTION_TYPESREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsIcis_inspection_typesRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message GetRest_lookupsIcis_inspection_typesResponse {
    rlk50_Results Results = 1;
}

message PostRest_lookupsIcis_inspection_typesRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsIcis_inspection_typesRequest_Output {
        POSTREST_LOOKUPSICIS_INSPECTION_TYPESREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSICIS_INSPECTION_TYPESREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSICIS_INSPECTION_TYPESREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsIcis_inspection_typesRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message PostRest_lookupsIcis_inspection_typesResponse {
    rlk50_Results Results = 1;
}

message GetRest_lookupsIcis_law_sectionsRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsIcis_law_sectionsRequest_Output {
        GETREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsIcis_law_sectionsRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
    number sort_order = 5;
    string status_flag = 6;
    string statute_code = 7;
}

message GetRest_lookupsIcis_law_sectionsResponse {
    rlk51_Results Results = 1;
}

message PostRest_lookupsIcis_law_sectionsRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsIcis_law_sectionsRequest_Output {
        POSTREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsIcis_law_sectionsRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
    number sort_order = 5;
    string status_flag = 6;
    string statute_code = 7;
}

message PostRest_lookupsIcis_law_sectionsResponse {
    rlk51_Results Results = 1;
}

message GetRest_lookupsNaics_codesRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsNaics_codesRequest_Output {
        GETREST_LOOKUPSNAICS_CODESREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSNAICS_CODESREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSNAICS_CODESREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsNaics_codesRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message GetRest_lookupsNaics_codesResponse {
    rlk52_Results Results = 1;
}

message PostRest_lookupsNaics_codesRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsNaics_codesRequest_Output {
        POSTREST_LOOKUPSNAICS_CODESREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSNAICS_CODESREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSNAICS_CODESREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsNaics_codesRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
}

message PostRest_lookupsNaics_codesResponse {
    rlk52_Results Results = 1;
}

message GetRest_lookupsNpdes_parametersRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsNpdes_parametersRequest_Output {
        GETREST_LOOKUPSNPDES_PARAMETERSREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSNPDES_PARAMETERSREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSNPDES_PARAMETERSREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsNpdes_parametersRequest_Output output = 2;
    string search_term = 3;
}

message GetRest_lookupsNpdes_parametersResponse {
    rlk56_Results Results = 1;
}

message PostRest_lookupsNpdes_parametersRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsNpdes_parametersRequest_Output {
        POSTREST_LOOKUPSNPDES_PARAMETERSREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSNPDES_PARAMETERSREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSNPDES_PARAMETERSREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsNpdes_parametersRequest_Output output = 2;
    string search_term = 3;
}

message PostRest_lookupsNpdes_parametersResponse {
    rlk56_Results Results = 1;
}

message GetRest_lookupsWbd_code_luRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsWbd_code_luRequest_Output {
        GETREST_LOOKUPSWBD_CODE_LUREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSWBD_CODE_LUREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSWBD_CODE_LUREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsWbd_code_luRequest_Output output = 2;
    string wbd_code = 3;
    string wbd_level = 4;
}

message GetRest_lookupsWbd_code_luResponse {
    rlk66_Results Results = 1;
}

message PostRest_lookupsWbd_code_luRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsWbd_code_luRequest_Output {
        POSTREST_LOOKUPSWBD_CODE_LUREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSWBD_CODE_LUREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSWBD_CODE_LUREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsWbd_code_luRequest_Output output = 2;
    string wbd_code = 3;
    string wbd_level = 4;
}

message PostRest_lookupsWbd_code_luResponse {
    rlk66_Results Results = 1;
}

message GetRest_lookupsWbd_name_luRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsWbd_name_luRequest_Output {
        GETREST_LOOKUPSWBD_NAME_LUREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSWBD_NAME_LUREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSWBD_NAME_LUREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsWbd_name_luRequest_Output output = 2;
    string wbd_level = 3;
    string wbd_name = 4;
}

message GetRest_lookupsWbd_name_luResponse {
    rlk67_Results Results = 1;
}

message PostRest_lookupsWbd_name_luRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsWbd_name_luRequest_Output {
        POSTREST_LOOKUPSWBD_NAME_LUREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSWBD_NAME_LUREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSWBD_NAME_LUREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsWbd_name_luRequest_Output output = 2;
    string wbd_level = 3;
    string wbd_name = 4;
}

message PostRest_lookupsWbd_name_luResponse {
    rlk67_Results Results = 1;
}

message Geometry {
    // Array of coordinate values in longitude, latitude format.
    repeated int32 coordinates = 1;
    // Indicator of the geometry represented in the GeoJSON Feature, for Echo will always be "Point".
    string type = 2;
}

message Cwa1_Facilities {
    string ActiveLower48 = 1;
    string AirIDs = 2;
    string AlrExceedences = 3;
    // Description of pollutant(s) or pollutant constituent(s) associated with each industrial activity exposed to stormwater.
    string AssociatedPollutant = 4;
    // Displays "Y" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
    string AttainsAquaticLifeUseFlg = 5;
    // The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database:
    // - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters).
    // - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories).
    // - 4a = TMDL completed. A TMDL has been completed, but impairment still exists.
    // - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements).
    // - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).
    string AttainsAuCategory = 6;
    // Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
    string AttainsCauseGroups = 7;
    // The year in which the most recent state assessment occurred for the waterbody. The data are from the ATTAINS database.
    string AttainsCycleYear = 8;
    // Displays "Y" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
    string AttainsExceptnlUseFlg = 9;
    // Displays "Y" if the waterbody in which the facility resides is listed for impairment. The data are from the ATTAINS database.
    string AttainsImpWaterFlg = 10;
    // Lists all pollutants discharged by the facility that are potentially contributing to the impairment of local waterbodies.
    string AttainsPossibleNPDESParams = 11;
    // Displays "Y" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
    string AttainsRecreationUseFlg = 12;
    // Displays "Y" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.
    string AttainsShellfishUseFlg = 13;
    // The CWA Report in which the waterbody data can be found. The data are from the Assessment TMDL Tracking & Implementation System (ATTAINS) database.
    string AttainsSource = 14;
    // Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
    string AttainsStateCauses = 15;
    // Displays "Y" if the facility is located on or near a waterbody with a beach closure within the last two years.
    string BeachCloseLast2yrsFlg = 16;
    // Displays "Y" if the facility is located on or near a waterbody with a beach closure within the last year.
    string BeachCloseLastYearFlg = 17;
    // Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.
    string BioAnalyMethodCatgrys = 18;
    // Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.
    string BioAnalyMethods = 19;
    string BioCertifier = 20;
    // Free text allowing the user to provide comments on the annual program report.
    string BioCommentText = 21;
    // Indicates if the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter.
    string BioCurrVioFlag = 22;
    string BioFacTypes = 23;
    // The amount (dry metric tons) of biosolids incinerated.
    string BioIncinerationSum = 24;
    // The amount (dry metric tons) of biosolids land applied.
    string BioLandApplicationSum = 25;
    // Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.
    string BioMgmtContainers = 26;
    // Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.
    string BioMgmtDefCategories = 27;
    // The number of times noncompliance reported by the facility in the last 3 years.
    string BioMgmtDefCurrentCnt = 28;
    // Indicates the type of NPDES special regulatory program deficiency.
    string BioMgmtDeficiencies = 29;
    // Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.
    string BioMgmtHandlers = 30;
    // Identifies the pathogen class for biosolids or sewage sludge generated by the facility.
    string BioMgmtPathogens = 31;
    // Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.
    string BioMgmtPathreds = 32;
    // Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.
    string BioMgmtPrctceStypes = 33;
    // The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.
    string BioMgmtPrctceTypes = 34;
    // Identifies the option used by the facility for vector attraction reduction.
    string BioMgmtVectors = 35;
    // The amount (dry metric tons) of biosolids managed using methods not previously described.
    string BioOtherManagementSum = 36;
    // Free text additional description of "other" Biosolids Management Practices.
    string BioOtherMgmtPrctcTxts = 37;
    // The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.
    string BioQtrsInVio = 38;
    // The date the report was received by EPA.
    string BioReportDate = 39;
    // The calendar year corresponding to the Annual Biosolids Report.
    string BioReportYear = 40;
    // Indicates the reporting obligation reason.
    string BioReportingObligations = 41;
    // The amount of surface disposal in dry metric tons (DMT).
    string BioSurfaceDispSum = 42;
    // A flag (values of 1 for Yes, 0 for No) that a SNC Biosolids Violation exists for the facility.
    string BioSvFlag = 43;
    // The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.
    string BioTotalVolumeAmt = 44;
    // Free text additional description of "other" biotreatment processes.
    string BioTrtmntPrcssCmmntTxts = 45;
    // Identifies the biosolids or sewage sludge treatment process or processes at the facility.
    string BioTrtmntProcesses = 46;
    // A flag (values of 1 for Yes, 0 for No) that a Bisolids Violation occurred in the last 4 quarters.
    string BioVioLastYear = 47;
    string BioVioLastYearFlag = 48;
    // Displays "Yes" if the facility is in violation for biosolids under the Clean Water Act, in the last three years.
    string BioViolFlag = 49;
    // A Yes/No field to indicate permits with biosolids management and compliance information.
    string BiosolidsFlag = 50;
    // Each letter indicates the compliance status for the corresponding quarter.
    string CWP13qtrsComplStatus = 51;
    // The actual amount of the facility's wastewater flow measured in million gallons per day (MGD).
    string CWPActualAverageFlowNmbr = 52;
    // The count of Biosolids related Formal Enforcement Actions that have been taken against the Facility.
    string CWPBioFeaCount = 53;
    // The count of Biosolids related Informal Enforcement Actions that have been taken against the Facility.
    string CWPBioIeaCount = 54;
    // The count of Biosolids related Inspections that have occured for the facility.
    string CWPBioInspCount = 55;
    // The total amount of Biosolids related penalties that have been assessed against the facility.
    string CWPBioPenalties = 56;
    // Indicates the ICIS Case Number, a unique number identifying the civil enforcement action.
    string CWPCaseIDs = 57;
    // City in which the facility is located.
    string CWPCity = 58;
    // Extent to which data is being entered and effluent exceedances are being identified (Off, On, Partial).
    string CWPComplianceTracking = 59;
    // County in which the facility is located.
    string CWPCounty = 60;
    // The discharge from a Combined Sewer System at a point prior to the treatment plant. CSOs are point sources subject to NPDES permit requirements including both technology-based and water quality-based requirements of the Clean Water Act.
    string CWPCsoFlag = 61;
    // The number of discharge outfalls at points prior to the treatment plant.
    string CWPCsoOutfalls = 62;
    // The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.
    string CWPCurrentSNCStatus = 63;
    // The status date of the facility's Significant Noncompliance designation.
    string CWPCurrentSNCStatusDate = 64;
    string CWPCurrentVioStatus = 65;
    // Displays "Y" if the facility is currently in any violation under the Clean Water Act, either in Noncompliance or Significant Noncompliance.
    string CWPCurrentViol = 66;
    string CWPDateLastBioFea = 67;
    string CWPDateLastBioFeaEPA = 68;
    string CWPDateLastBioFeaSt = 69;
    string CWPDateLastBioIea = 70;
    string CWPDateLastBioIeaEPA = 71;
    string CWPDateLastBioIeaSt = 72;
    string CWPDateLastBioInsp = 73;
    string CWPDateLastBioInspEPA = 74;
    string CWPDateLastBioInspSt = 75;
    string CWPDateLastBioPenalty = 76;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility within the last five years.
    string CWPDateLastFea = 77;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA within the last five years.
    string CWPDateLastFeaEPA = 78;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastFeaSt = 79;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility by EPA within the last five years.
    string CWPDateLastIeaEPA = 80;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastIeaSt = 81;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility within the last five years.
    string CWPDateLastInformalEa = 82;
    // Indicates the effective date of the most recent inspection taken against the facility by EPA within the last five years.
    string CWPDateLastInspEPA = 83;
    // Indicates the effective date of the most recent inspection taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastInspSt = 84;
    // The date on which the most recent inspection of the facility took place. For the CAA, the date on which a Full Compliance Evaluation (FCE) was completed.
    string CWPDateLastInspection = 85;
    // Indicates date of most recent penalty against the facility within the last five years.
    string CWPDateLastPenalty = 86;
    // Indicates the number of days since the most recent Biosolids related inspection of the facility.
    string CWPDaysLastBioInsp = 87;
    // Indicates the number of days since the most recent inspection of the facility. Inspections listed within the last five years are included.
    string CWPDaysLastInspection = 88;
    // Displays the number of instances where effluent limits have been exceeded in the past 3 years (E90 compliance code), based on monthly Discharge Monitoring Reports (DMRs) submitted by facilities.
    string CWPE90Cnt = 89;
    // The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories.
    string CWPEPARegion = 90;
    string CWPEffectiveDate = 91;
    // Date that the permit expires.
    string CWPExpirationDate = 92;
    string CWPFIPSCode = 93;
    // Each National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or non-major discharger. This field also indicates the permit type.
    string CWPFacilityTypeIndicator = 94;
    // Indicates the total number of enforcement actions taken against the facility within the last five years. "NA" indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits.
    string CWPFormalEaCnt = 95;
    // Displays "Y" if the permitted facility discharges directly into category 4 or 5 impaired waters, as designated under section 303(d) of the Clean Water Act.
    string CWPImpWaterFlg = 96;
    // Displays "Y" if a facility is located in Indian country.
    string CWPIndianCntryFlg = 97;
    // Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years.
    string CWPInformalEnfActCount = 98;
    // The number of inspections/compliance evaluations, under the corresponding statute, occurring at the facility within the last five years.
    string CWPInspectionCount = 99;
    string CWPIssueDate = 100;
    // Facilities marked "M" for major refers to CWA major permittees.
    // - M = Major
    // - N = Minor
    string CWPMajorMinorStatusFlag = 101;
    // Indicates the facility's or permit's primary North American Industry Classification System (NAICS) Code.
    string CWPNaicsCodes = 102;
    // Facility or permit holder name, as maintained in ICIS-NPDES.
    string CWPName = 103;
    // The code associated with the facility's NPDES permit status.
    string CWPPermitStatusCode = 104;
    // The current stage/status in the NPDES permit life cycle.
    string CWPPermitStatusDesc = 105;
    // The code associated with the facility's NPDES permit classification.
    string CWPPermitTypeCode = 106;
    // NPDES facility permit classification:
    // - NPDES Individual Permit
    // - General Permit Covered Facility
    // - NPDES Master General Permit
    // - Associated Permit Record
    // - Individual Industrial User Permit
    // - Individual State Issued Permit
    // - State Issued Master General Permit
    // - Unpermitted Facility
    string CWPPermitTypeDesc = 107;
    // Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Non-compliance (SNC), as described above under Current Compliance Status.
    string CWPQtrsInNC = 108;
    // Count of the number of quarters, out of the last twelve quarters, in which the permit is considered in Significant Non-compliance (SNC).
    string CWPQtrsInSNC = 109;
    // Describes the event that resulted in the facility's status of Significant Noncompliance.
    string CWPSNCEventDesc = 110;
    // Indicates the facility's or permit's primary Standard Industrial Classification (SIC) Code.
    string CWPSicCodes = 111;
    // Facility location - two-digit state abbreviation.
    string CWPState = 112;
    // The State Congressional District the facility is located within.
    string CWPStateDistrict = 113;
    // Code from the Assessment TMDL Tracking & Implementation System (ATTAINS) database, assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification:
    // - Region (first-level, 2-digit HUC)
    // - Subregion (second-level, 4-digit HUC)
    // - Accounting unit (third-level, 6-digit HUC)
    // - Cataloguing unit (fourth-level, 8-digit HUC)
    // - Watershed (fifth-level, 10-digit HUC)
    // - Subwatershed (sixth-level, 12-digit HUC)
    string CWPStateWaterBodyCode = 114;
    // The name of the watershed from the ATTAINS database in which the facility resides.
    string CWPStateWaterBodyName = 115;
    // An indication of the facility's current compliance status under the Clean Water Act:
    // - Significant Violation
    // - Noncompliance
    // - No Violation
    // - Unknown
    string CWPStatus = 116;
    // Facility street address
    string CWPStreet = 117;
    string CWPTRIbalLandCode = 118;
    string CWPTerminationDate = 119;
    // The amount of wastewater flow in million gallons per day (MGD) that the facility is designed for.
    string CWPTotalDesignFlowNmbr = 120;
    // The total penalty value incurred over 5 years.
    string CWPTotalPenalties = 121;
    // The version number of the facility's NPDES permit.
    string CWPVersionNmbr = 122;
    // Facility ZIP code
    string CWPZip = 123;
    string CalculatedAccuracyMeters = 124;
    // A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
    string CensusBlockGroup = 125;
    string CertifiedDate = 126;
    // Displays "Y" if the facility is located within the Chesapeake Bay watershed.
    string ChesapeakeBayFlag = 127;
    // ??
    string CollectionMethod = 128;
    // Description of control measures employed to comply with the non-numeric technology-based effluent limits required in Part 2.1.2 and Part 8.
    string ControlMeasure = 129;
    // Description of schedule for control measures associated with good housekeeping and maintenance.
    string ControlMeasureSchedule = 130;
    // Indicates if the facility has a current significant violation. 1 = Yes
    string CurrSvFlag = 131;
    // Indicates if the facility has a current violation. 1 = Yes
    string CurrVioFlag = 132;
    // The pollutants with limits or monitoring requirements in a facility's NPDES permit with the potential to contribute to impairment of local waterbodies
    string DmrImpairedPoll = 133;
    // Total pounds of pollutants discharged by the NPDES ID for the most recent complete calendar year.
    string DmrPounds = 134;
    // Total toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year. TWPE is the mass of a pollutant or chemical discharged that accounts for its relative toxicity.
    string DmrTwpe = 135;
    string DschToMs4 = 136;
    // The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report: 
    // 
    // - AFS: Air Facility System for Clean Air Act stationary source programs.
    // - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits.
    // - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs.
    // - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).
    // - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions.
    // - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis.
    // - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
    string EPASystem = 137;
    // Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
    string Ea5yrFlag = 138;
    string EffExceeds = 139;
    string EjscreenFlag = 140;
    string EjscreenFlagUs = 141;
    // This is the effective date for a  waiver from electronic reporting in compliance with this part. This data element should always be populated for a waiver.
    string ElectrRptWaiverEffDate = 142;
    // This is the expiration date for a temporary waiver from electronic reporting in compliance with this part. This data element should be left blank if the permittee has a permanent waiver from electronic reporting or if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverExpDate = 143;
    // The unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverTypeCode = 144;
    // Description of the unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverTypeDesc = 145;
    // This is the code indicating the means by which the data were submitted electronically.
    string ElectrSubmissionTypeCode = 146;
    // This is the description of the code indicating the means by which the data were submitted electronically.
    string ElectrSubmissionTypeDesc = 147;
    // Description of onsite industrial activities exposed to stormwater and potential spill and leak areas.
    string ExposedActivity = 148;
    // The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
    string FacDerivedHuc = 149;
    string FacDerivedTRIbes = 150;
    string FacDerivedWBD = 151;
    string FacDerivedWBDHu8 = 152;
    string FacDerivedWBDHu8Name = 153;
    string FacDerivedWBDName = 154;
    // The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
    string FacFIPSCode = 155;
    // Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
    string FacFederalAgencyCode = 156;
    string FacFederalAgencyName = 157;
    // Flag showing Y/N whether the facility is located in Indian Country.
    string FacIndianCntryFlg = 158;
    string FacIndianSpatialFlg = 159;
    // The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
    string FacLat = 160;
    // The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
    string FacLong = 161;
    // Graphical indicator denoting whether geographical data required to map a facility are available.
    string FacMapFlg = 162;
    // The default map icon image file calculated for the facility by the ECHO program.
    string FacMapIcon = 163;
    // Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
    string FacPercentMinority = 164;
    // The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).
    string FacPopDen = 165;
    // POTW transfer information from the Toxics Release Inventory (TRI) represents the amount of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW), in pounds, for the most recent reporting year.
    string FacTRIPotwTrans = 166;
    // Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
    string FacTRIReporter = 167;
    // Chemical surface water release information from the Toxics Release Inventory (TRI) represents the total chemical releases discharged to surface water, in pounds, for the most recent reporting year.
    string FacTRISwRel = 168;
    // A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
    string FacUsMexBorderFlg = 169;
    string HistoricCriterionCode = 170;
    string IndswFlag = 171;
    // Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
    string Infea5yrFlag = 172;
    // Indicates if the facility has an inspection within the last 5 years. 1 = Yes
    string Insp5yrFlag = 173;
    string InspDef5yrCnt = 174;
    // This is the name of the organization issuing or granting a permit.
    string IssuingAgency = 175;
    string LastDmrValueRcvdDate = 176;
    string LimPollutant = 177;
    // Flag showing Y/N whether location is within the contiguous (lower 48) United States.
    string Lower48 = 178;
    string Map = 179;
    // This is the unique identifier for the Master General Permit for a General Permit Covered Facility.
    string MasterExternalPermitNmbr = 180;
    // The maximum percentile from all individual EJSCREEN indicators.
    string MaxPctileUs = 181;
    // [Col. 121]
    string MaxScore = 182;
    string MissDmrQtrs = 183;
    string MsgpCorrectiveActionSmmry = 184;
    string MsgpFacilityInspctnSmmry = 185;
    string MsgpLastReportYear = 186;
    string MsgpNoFurtherRdctnRtnle = 187;
    string MsgpPermitType = 188;
    string MsgpVisualAssessmentSmmry = 189;
    // This is the code indicating the NPDES eReporting Rule Data Group that applies to the data.
    string NPDESDataGroups = 190;
    // Description for each NPDES Data Group eReporting rule code related to the current NPDES permit.
    string NPDESDataGroupsDescs = 191;
    // Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)
    string NPDESIDs = 192;
    string OperatorAddress = 193;
    string OperatorCity = 194;
    string OperatorName = 195;
    string OperatorState = 196;
    string OperatorZip = 197;
    string Over80CountUs = 198;
    string PastCalYrAverageFlow = 199;
    string PastCalYrConvPolOvrLmt = 200;
    string PastCalYrConvPollutants = 201;
    string PastCalYrToxicPolOvrLmt = 202;
    string PastCalYrToxicPollutants = 203;
    // The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
    string PctileCancerUs = 204;
    // The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
    string PctileDpmUs = 205;
    // The national percentile of the census block group for the EJSCREEN ozone indicator.
    string PctileO3Us = 206;
    // The national percentile of the census block group for the EJSCREEN Lead paint indicator.
    string PctilePctpre1960Us = 207;
    // The national percentile of the census block group for the EJSCREEN particulate matter indicator.
    string PctilePmUs = 208;
    // The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
    string PctileProximityNPDESUs = 209;
    // The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
    string PctileProximityNplUs = 210;
    // The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
    string PctileProximityRmpUs = 211;
    // The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
    string PctileProximityTsdfUs = 212;
    // The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
    string PctileRespUs = 213;
    // The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
    string PctileTrafficScoreUs = 214;
    string PermitComponents = 215;
    // This is the type of organization issuing or granting a permit.
    string PermittingAgency = 216;
    // The names of pollutants with reporting violations (i.e., violation codes D80 and D90) or effluent exceedances (i.e., violation code E90) in the past three years in ICIS-NPDES.
    string PollInViolation = 217;
    // A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
    string RCRAIDs = 218;
    // The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.
    string RadGnisName = 219;
    // The name of the waterbody in which the facility is permitted to discharge directly (from the Reach Address Database, RAD).
    string RadHu12Name = 220;
    // A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.
    string RadReachcode = 221;
    string RadWBDHu8 = 222;
    string RadWBDHu8Name = 223;
    // Code from the Reach Address Database (RAD), assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification:
    // - Region (first-level, 2-digit HUC)
    // - Subregion (second-level, 4-digit HUC)
    // - Accounting unit (third-level, 6-digit HUC)
    // - Cataloguing unit (fourth-level, 8-digit HUC)
    // - Watershed (fifth-level, 10-digit HUC)
    // - Subwatershed (sixth-level, 12-digit HUC)
    string RadWBDHuc12 = 224;
    // This is the name of the receiving MS4(s).
    string ReceivingMs4Name = 225;
    // ??
    string ReferencePoint = 226;
    // An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
    string RegistryID = 227;
    string RmpIDs = 228;
    // A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
    string SDWAIDs = 229;
    string Score = 230;
    string Sector = 231;
    // Unique Identifier assigned by EPA.
    string SourceID = 232;
    // This identifies if Endangered Species Act (ESA) provisions are met.
    string SpeciesCriticalHabitalFlag = 233;
    string StateAuthBiosolids = 234;
    string StateAuthFedfac = 235;
    string StateAuthGen = 236;
    string StateAuthNPDES = 237;
    string StateAuthPretreat = 238;
    // The name of the statute associated with each of the permits and identifiers linked to the facility: 
    // - CAA = the Clean Air Act
    // - CWA = the Clean Water Act
    // - RCRA = the Resource Conservation and Recovery Act
    // - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program)
    // - TSCA = the Toxic Substances Control Act
    // - SDWA = the Safe Drinking Water Act
    string Statute = 239;
    string StormWaterArea = 240;
    string SubmittedDate = 241;
    string Subsector = 242;
    // Web address URL of Internet page where current copy of Stormwater Pollution Prevention Plan (SWPPP) is maintained.
    string SwpppUrl = 243;
    // A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
    string TRIIDs = 244;
    string TRIbalFlag = 245;
    string TypeOfMonitoring = 246;
    string TypeOfWater = 247;
    // A flag (values of 1 for Yes, 0 for No) that a Water Program Violation occurred in the last 4 quarters.
    string VioLastYear = 248;
    // Indicates if the facility had a violation within the last 3 years. 1 = Yes
    string ViolFlag = 249;
}

message Cwa1_MapData {
    // Quarterly compliance status for the most recent 13 quarters. Each letter indicates the compliance status for the corresponding quarter.
    string CWAstatus = 1;
    // The number of formal enforcement actions that have been taken against the facility
    string FormalCount = 2;
    // Name of each individual icon file within the URL base
    string ICON = 3;
    // The number of informal enforcement actions that have been taken against the facility
    string InformalCount = 4;
    // The latitude of the facility in degrees, to four decimal places
    string LAT = 5;
    // The longitude of the facility in degrees, to four decimal places
    string LON = 6;
    // The unique identifier for the last inspection
    string LastInsp = 7;
    // For DFR, this is the Facility name. The name corresponds to the TYPE value
    string NAME = 8;
    // Pop up value. Combine with PopUpBaseURL to give the popup for the facility
    string PUV = 9;
    // For DFR, this is always facility
    string TYPE = 10;
}

message Cwa1_MapOutput {
    // URL where all the icons are located
    string IconBaseURL = 1;
    repeated cwa1_MapData MapData = 2;
    // Combine this URL with the PUC to get popup info
    string PopUpBaseURL = 3;
    // Sequential number assigned to entire search result
    string QueryID = 4;
}

message Cwa1_Results {
    // Number of facilities with current biosolid-related violations.
    string BioCVRows = 1;
    // Number of facilities having one or more quarters of biosolid-related non-compliance in the last three years.
    string BioV3Rows = 2;
    // Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
    string CVRows = 3;
    // Summary count of the number of facilities with a formal enforcement action in the past five years
    string FEARows = 4;
    repeated cwa1_Facilities Facilities = 5;
    // Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
    string INSPRows = 6;
    // Number of facilities with tribal_flag populated
    string IndianCountryRows = 7;
    // Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)
    string InfFEARows = 8;
    cwa1_MapOutput MapOutput = 9;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 10;
    // The number of pages of results returned
    string PageNo = 11;
    // Sequential number assigned to entire search result
    string QueryID = 12;
    // Number of query results returned
    string QueryRows = 13;
    // Number of facilities with curr_sv_flag populated (CWP_STATUS = "Significant Violation")
    string SVRows = 14;
    // The total dollar amount of either assessed or final penalties within the five year time period
    string TotalPenalties = 15;
    // Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
    string V3Rows = 16;
    // Version of the SDWA system service
    string Version = 17;
    string VioLast4QRows = 18;
}

message Cwa2_ClusterData {
    // Number of facilities with current biosolid-related violations.
    string BioCVRows = 1;
    // Number of facilities having one or more quarters of biosolid-related non-compliance in the last three years.
    string BioV3Rows = 2;
    // Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
    string CVRows = 3;
    string ClusterCount = 4;
    string ClusterIcon = 5;
    // The latitude in decimal degrees expressed using the NAD83 horizontal datum.
    string ClusterLatitude = 6;
    // The longitude in decimal degrees expressed using the NAD83 horizontal datum.
    string ClusterLongitude = 7;
    string ClusterName = 8;
    string ClusterType = 9;
    string ClusterValue = 10;
    // The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories
    string EPARegionCode = 11;
    // Summary count of the number of facilities with a formal enforcement action in the past five years
    string FEARows = 12;
    // Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
    string INSPRows = 13;
    // Number of facilities with tribal_flag populated
    string IndianCountryRows = 14;
    // Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)
    string InfFEARows = 15;
    // Sequential number assigned to each facility returned
    string ObjectId = 16;
    // Number of facilities with curr_sv_flag populated (CWP_STATUS = "Significant Violation")
    string SVRows = 17;
    // The total dollar amount of either assessed or final penalties within the five year time period
    string TotalPenalties = 18;
    // Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
    string V3Rows = 19;
    string VioLast4QRows = 20;
}

message Cwa2_ClusterOutput {
    repeated cwa2_ClusterData ClusterData = 1;
}

message Cwa2_Facilities {
    string ActiveLower48 = 1;
    string AirIDs = 2;
    string AlrExceedences = 3;
    // Description of pollutant(s) or pollutant constituent(s) associated with each industrial activity exposed to stormwater.
    string AssociatedPollutant = 4;
    // Displays "Y" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
    string AttainsAquaticLifeUseFlg = 5;
    // The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database:
    // - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters).
    // - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories).
    // - 4a = TMDL completed. A TMDL has been completed, but impairment still exists.
    // - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements).
    // - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).
    string AttainsAuCategory = 6;
    // Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
    string AttainsCauseGroups = 7;
    // The year in which the most recent state assessment occurred for the waterbody. The data are from the ATTAINS database.
    string AttainsCycleYear = 8;
    // Displays "Y" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
    string AttainsExceptnlUseFlg = 9;
    // Displays "Y" if the waterbody in which the facility resides is listed for impairment. The data are from the ATTAINS database.
    string AttainsImpWaterFlg = 10;
    // Lists all pollutants discharged by the facility that are potentially contributing to the impairment of local waterbodies.
    string AttainsPossibleNPDESParams = 11;
    // Displays "Y" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
    string AttainsRecreationUseFlg = 12;
    // Displays "Y" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.
    string AttainsShellfishUseFlg = 13;
    // The CWA Report in which the waterbody data can be found. The data are from the Assessment TMDL Tracking & Implementation System (ATTAINS) database.
    string AttainsSource = 14;
    // Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
    string AttainsStateCauses = 15;
    // Displays "Y" if the facility is located on or near a waterbody with a beach closure within the last two years.
    string BeachCloseLast2yrsFlg = 16;
    // Displays "Y" if the facility is located on or near a waterbody with a beach closure within the last year.
    string BeachCloseLastYearFlg = 17;
    // Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.
    string BioAnalyMethodCatgrys = 18;
    // Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.
    string BioAnalyMethods = 19;
    string BioCertifier = 20;
    // Free text allowing the user to provide comments on the annual program report.
    string BioCommentText = 21;
    // Indicates if the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter.
    string BioCurrVioFlag = 22;
    string BioFacTypes = 23;
    // The amount (dry metric tons) of biosolids incinerated.
    string BioIncinerationSum = 24;
    // The amount (dry metric tons) of biosolids land applied.
    string BioLandApplicationSum = 25;
    // Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.
    string BioMgmtContainers = 26;
    // Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.
    string BioMgmtDefCategories = 27;
    // The number of times noncompliance reported by the facility in the last 3 years.
    string BioMgmtDefCurrentCnt = 28;
    // Indicates the type of NPDES special regulatory program deficiency.
    string BioMgmtDeficiencies = 29;
    // Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.
    string BioMgmtHandlers = 30;
    // Identifies the pathogen class for biosolids or sewage sludge generated by the facility.
    string BioMgmtPathogens = 31;
    // Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.
    string BioMgmtPathreds = 32;
    // Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.
    string BioMgmtPrctceStypes = 33;
    // The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.
    string BioMgmtPrctceTypes = 34;
    // Identifies the option used by the facility for vector attraction reduction.
    string BioMgmtVectors = 35;
    // The amount (dry metric tons) of biosolids managed using methods not previously described.
    string BioOtherManagementSum = 36;
    // Free text additional description of "other" Biosolids Management Practices.
    string BioOtherMgmtPrctcTxts = 37;
    // The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.
    string BioQtrsInVio = 38;
    // The date the report was received by EPA.
    string BioReportDate = 39;
    // The calendar year corresponding to the Annual Biosolids Report.
    string BioReportYear = 40;
    // Indicates the reporting obligation reason.
    string BioReportingObligations = 41;
    // The amount of surface disposal in dry metric tons (DMT).
    string BioSurfaceDispSum = 42;
    // A flag (values of 1 for Yes, 0 for No) that a SNC Biosolids Violation exists for the facility.
    string BioSvFlag = 43;
    // The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.
    string BioTotalVolumeAmt = 44;
    // Free text additional description of "other" biotreatment processes.
    string BioTrtmntPrcssCmmntTxts = 45;
    // Identifies the biosolids or sewage sludge treatment process or processes at the facility.
    string BioTrtmntProcesses = 46;
    // A flag (values of 1 for Yes, 0 for No) that a Bisolids Violation occurred in the last 4 quarters.
    string BioVioLastYear = 47;
    string BioVioLastYearFlag = 48;
    // Displays "Yes" if the facility is in violation for biosolids under the Clean Water Act, in the last three years.
    string BioViolFlag = 49;
    // A Yes/No field to indicate permits with biosolids management and compliance information.
    string BiosolidsFlag = 50;
    // Each letter indicates the compliance status for the corresponding quarter.
    string CWP13qtrsComplStatus = 51;
    // The actual amount of the facility's wastewater flow measured in million gallons per day (MGD).
    string CWPActualAverageFlowNmbr = 52;
    // The count of Biosolids related Formal Enforcement Actions that have been taken against the Facility.
    string CWPBioFeaCount = 53;
    // The count of Biosolids related Informal Enforcement Actions that have been taken against the Facility.
    string CWPBioIeaCount = 54;
    // The count of Biosolids related Inspections that have occured for the facility.
    string CWPBioInspCount = 55;
    // The total amount of Biosolids related penalties that have been assessed against the facility.
    string CWPBioPenalties = 56;
    // Indicates the ICIS Case Number, a unique number identifying the civil enforcement action.
    string CWPCaseIDs = 57;
    // City in which the facility is located.
    string CWPCity = 58;
    // Extent to which data is being entered and effluent exceedances are being identified (Off, On, Partial).
    string CWPComplianceTracking = 59;
    // County in which the facility is located.
    string CWPCounty = 60;
    // The discharge from a Combined Sewer System at a point prior to the treatment plant. CSOs are point sources subject to NPDES permit requirements including both technology-based and water quality-based requirements of the Clean Water Act.
    string CWPCsoFlag = 61;
    // The number of discharge outfalls at points prior to the treatment plant.
    string CWPCsoOutfalls = 62;
    // The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.
    string CWPCurrentSNCStatus = 63;
    // The status date of the facility's Significant Noncompliance designation.
    string CWPCurrentSNCStatusDate = 64;
    string CWPCurrentVioStatus = 65;
    // Displays "Y" if the facility is currently in any violation under the Clean Water Act, either in Noncompliance or Significant Noncompliance.
    string CWPCurrentViol = 66;
    string CWPDateLastBioFea = 67;
    string CWPDateLastBioFeaEPA = 68;
    string CWPDateLastBioFeaSt = 69;
    string CWPDateLastBioIea = 70;
    string CWPDateLastBioIeaEPA = 71;
    string CWPDateLastBioIeaSt = 72;
    string CWPDateLastBioInsp = 73;
    string CWPDateLastBioInspEPA = 74;
    string CWPDateLastBioInspSt = 75;
    string CWPDateLastBioPenalty = 76;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility within the last five years.
    string CWPDateLastFea = 77;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA within the last five years.
    string CWPDateLastFeaEPA = 78;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastFeaSt = 79;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility by EPA within the last five years.
    string CWPDateLastIeaEPA = 80;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastIeaSt = 81;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility within the last five years.
    string CWPDateLastInformalEa = 82;
    // Indicates the effective date of the most recent inspection taken against the facility by EPA within the last five years.
    string CWPDateLastInspEPA = 83;
    // Indicates the effective date of the most recent inspection taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastInspSt = 84;
    // The date on which the most recent inspection of the facility took place. For the CAA, the date on which a Full Compliance Evaluation (FCE) was completed.
    string CWPDateLastInspection = 85;
    // Indicates date of most recent penalty against the facility within the last five years.
    string CWPDateLastPenalty = 86;
    // Indicates the number of days since the most recent Biosolids related inspection of the facility.
    string CWPDaysLastBioInsp = 87;
    // Indicates the number of days since the most recent inspection of the facility. Inspections listed within the last five years are included.
    string CWPDaysLastInspection = 88;
    // Displays the number of instances where effluent limits have been exceeded in the past 3 years (E90 compliance code), based on monthly Discharge Monitoring Reports (DMRs) submitted by facilities.
    string CWPE90Cnt = 89;
    // The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories.
    string CWPEPARegion = 90;
    string CWPEffectiveDate = 91;
    // Date that the permit expires.
    string CWPExpirationDate = 92;
    string CWPFIPSCode = 93;
    // Each National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or non-major discharger. This field also indicates the permit type.
    string CWPFacilityTypeIndicator = 94;
    // Indicates the total number of enforcement actions taken against the facility within the last five years. "NA" indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits.
    string CWPFormalEaCnt = 95;
    // Displays "Y" if the permitted facility discharges directly into category 4 or 5 impaired waters, as designated under section 303(d) of the Clean Water Act.
    string CWPImpWaterFlg = 96;
    // Displays "Y" if a facility is located in Indian country.
    string CWPIndianCntryFlg = 97;
    // Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years.
    string CWPInformalEnfActCount = 98;
    // The number of inspections/compliance evaluations, under the corresponding statute, occurring at the facility within the last five years.
    string CWPInspectionCount = 99;
    string CWPIssueDate = 100;
    // Facilities marked "M" for major refers to CWA major permittees.
    // - M = Major
    // - N = Minor
    string CWPMajorMinorStatusFlag = 101;
    // Indicates the facility's or permit's primary North American Industry Classification System (NAICS) Code.
    string CWPNaicsCodes = 102;
    // Facility or permit holder name, as maintained in ICIS-NPDES.
    string CWPName = 103;
    // The code associated with the facility's NPDES permit status.
    string CWPPermitStatusCode = 104;
    // The current stage/status in the NPDES permit life cycle.
    string CWPPermitStatusDesc = 105;
    // The code associated with the facility's NPDES permit classification.
    string CWPPermitTypeCode = 106;
    // NPDES facility permit classification:
    // - NPDES Individual Permit
    // - General Permit Covered Facility
    // - NPDES Master General Permit
    // - Associated Permit Record
    // - Individual Industrial User Permit
    // - Individual State Issued Permit
    // - State Issued Master General Permit
    // - Unpermitted Facility
    string CWPPermitTypeDesc = 107;
    // Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Non-compliance (SNC), as described above under Current Compliance Status.
    string CWPQtrsInNC = 108;
    // Count of the number of quarters, out of the last twelve quarters, in which the permit is considered in Significant Non-compliance (SNC).
    string CWPQtrsInSNC = 109;
    // Describes the event that resulted in the facility's status of Significant Noncompliance.
    string CWPSNCEventDesc = 110;
    // Indicates the facility's or permit's primary Standard Industrial Classification (SIC) Code.
    string CWPSicCodes = 111;
    // Facility location - two-digit state abbreviation.
    string CWPState = 112;
    // The State Congressional District the facility is located within.
    string CWPStateDistrict = 113;
    // Code from the Assessment TMDL Tracking & Implementation System (ATTAINS) database, assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification:
    // - Region (first-level, 2-digit HUC)
    // - Subregion (second-level, 4-digit HUC)
    // - Accounting unit (third-level, 6-digit HUC)
    // - Cataloguing unit (fourth-level, 8-digit HUC)
    // - Watershed (fifth-level, 10-digit HUC)
    // - Subwatershed (sixth-level, 12-digit HUC)
    string CWPStateWaterBodyCode = 114;
    // The name of the watershed from the ATTAINS database in which the facility resides.
    string CWPStateWaterBodyName = 115;
    // An indication of the facility's current compliance status under the Clean Water Act:
    // - Significant Violation
    // - Noncompliance
    // - No Violation
    // - Unknown
    string CWPStatus = 116;
    // Facility street address
    string CWPStreet = 117;
    string CWPTRIbalLandCode = 118;
    string CWPTerminationDate = 119;
    // The amount of wastewater flow in million gallons per day (MGD) that the facility is designed for.
    string CWPTotalDesignFlowNmbr = 120;
    // The total penalty value incurred over 5 years.
    string CWPTotalPenalties = 121;
    // The version number of the facility's NPDES permit.
    string CWPVersionNmbr = 122;
    // Facility ZIP code
    string CWPZip = 123;
    string CalculatedAccuracyMeters = 124;
    // A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
    string CensusBlockGroup = 125;
    string CertifiedDate = 126;
    // Displays "Y" if the facility is located within the Chesapeake Bay watershed.
    string ChesapeakeBayFlag = 127;
    // ??
    string CollectionMethod = 128;
    // Description of control measures employed to comply with the non-numeric technology-based effluent limits required in Part 2.1.2 and Part 8.
    string ControlMeasure = 129;
    // Description of schedule for control measures associated with good housekeeping and maintenance.
    string ControlMeasureSchedule = 130;
    // Indicates if the facility has a current significant violation. 1 = Yes
    string CurrSvFlag = 131;
    // Indicates if the facility has a current violation. 1 = Yes
    string CurrVioFlag = 132;
    // The pollutants with limits or monitoring requirements in a facility's NPDES permit with the potential to contribute to impairment of local waterbodies
    string DmrImpairedPoll = 133;
    // Total pounds of pollutants discharged by the NPDES ID for the most recent complete calendar year.
    string DmrPounds = 134;
    // Total toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year. TWPE is the mass of a pollutant or chemical discharged that accounts for its relative toxicity.
    string DmrTwpe = 135;
    string DschToMs4 = 136;
    // The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report: 
    // 
    // - AFS: Air Facility System for Clean Air Act stationary source programs.
    // - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits.
    // - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs.
    // - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).
    // - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions.
    // - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis.
    // - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
    string EPASystem = 137;
    // Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
    string Ea5yrFlag = 138;
    string EffExceeds = 139;
    string EjscreenFlag = 140;
    string EjscreenFlagUs = 141;
    // This is the effective date for a  waiver from electronic reporting in compliance with this part. This data element should always be populated for a waiver.
    string ElectrRptWaiverEffDate = 142;
    // This is the expiration date for a temporary waiver from electronic reporting in compliance with this part. This data element should be left blank if the permittee has a permanent waiver from electronic reporting or if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverExpDate = 143;
    // The unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverTypeCode = 144;
    // Description of the unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverTypeDesc = 145;
    // This is the code indicating the means by which the data were submitted electronically.
    string ElectrSubmissionTypeCode = 146;
    // This is the description of the code indicating the means by which the data were submitted electronically.
    string ElectrSubmissionTypeDesc = 147;
    // Description of onsite industrial activities exposed to stormwater and potential spill and leak areas.
    string ExposedActivity = 148;
    // The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
    string FacDerivedHuc = 149;
    string FacDerivedTRIbes = 150;
    string FacDerivedWBD = 151;
    string FacDerivedWBDHu8 = 152;
    string FacDerivedWBDHu8Name = 153;
    string FacDerivedWBDName = 154;
    // The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
    string FacFIPSCode = 155;
    // Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
    string FacFederalAgencyCode = 156;
    string FacFederalAgencyName = 157;
    // Flag showing Y/N whether the facility is located in Indian Country.
    string FacIndianCntryFlg = 158;
    string FacIndianSpatialFlg = 159;
    // The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
    string FacLat = 160;
    // The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
    string FacLong = 161;
    // Graphical indicator denoting whether geographical data required to map a facility are available.
    string FacMapFlg = 162;
    // The default map icon image file calculated for the facility by the ECHO program.
    string FacMapIcon = 163;
    // Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
    string FacPercentMinority = 164;
    // The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).
    string FacPopDen = 165;
    // POTW transfer information from the Toxics Release Inventory (TRI) represents the amount of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW), in pounds, for the most recent reporting year.
    string FacTRIPotwTrans = 166;
    // Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
    string FacTRIReporter = 167;
    // Chemical surface water release information from the Toxics Release Inventory (TRI) represents the total chemical releases discharged to surface water, in pounds, for the most recent reporting year.
    string FacTRISwRel = 168;
    // A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
    string FacUsMexBorderFlg = 169;
    string HistoricCriterionCode = 170;
    string IndswFlag = 171;
    // Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
    string Infea5yrFlag = 172;
    // Indicates if the facility has an inspection within the last 5 years. 1 = Yes
    string Insp5yrFlag = 173;
    string InspDef5yrCnt = 174;
    // This is the name of the organization issuing or granting a permit.
    string IssuingAgency = 175;
    string LastDmrValueRcvdDate = 176;
    string LimPollutant = 177;
    // Flag showing Y/N whether location is within the contiguous (lower 48) United States.
    string Lower48 = 178;
    string Map = 179;
    // This is the unique identifier for the Master General Permit for a General Permit Covered Facility.
    string MasterExternalPermitNmbr = 180;
    // The maximum percentile from all individual EJSCREEN indicators.
    string MaxPctileUs = 181;
    // [Col. 121]
    string MaxScore = 182;
    string MissDmrQtrs = 183;
    string MsgpCorrectiveActionSmmry = 184;
    string MsgpFacilityInspctnSmmry = 185;
    string MsgpLastReportYear = 186;
    string MsgpNoFurtherRdctnRtnle = 187;
    string MsgpPermitType = 188;
    string MsgpVisualAssessmentSmmry = 189;
    // This is the code indicating the NPDES eReporting Rule Data Group that applies to the data.
    string NPDESDataGroups = 190;
    // Description for each NPDES Data Group eReporting rule code related to the current NPDES permit.
    string NPDESDataGroupsDescs = 191;
    // Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)
    string NPDESIDs = 192;
    // Sequential number assigned to each facility returned
    string ObjectId = 193;
    string OperatorAddress = 194;
    string OperatorCity = 195;
    string OperatorName = 196;
    string OperatorState = 197;
    string OperatorZip = 198;
    string Over80CountUs = 199;
    string PastCalYrAverageFlow = 200;
    string PastCalYrConvPolOvrLmt = 201;
    string PastCalYrConvPollutants = 202;
    string PastCalYrToxicPolOvrLmt = 203;
    string PastCalYrToxicPollutants = 204;
    // The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
    string PctileCancerUs = 205;
    // The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
    string PctileDpmUs = 206;
    // The national percentile of the census block group for the EJSCREEN ozone indicator.
    string PctileO3Us = 207;
    // The national percentile of the census block group for the EJSCREEN Lead paint indicator.
    string PctilePctpre1960Us = 208;
    // The national percentile of the census block group for the EJSCREEN particulate matter indicator.
    string PctilePmUs = 209;
    // The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
    string PctileProximityNPDESUs = 210;
    // The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
    string PctileProximityNplUs = 211;
    // The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
    string PctileProximityRmpUs = 212;
    // The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
    string PctileProximityTsdfUs = 213;
    // The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
    string PctileRespUs = 214;
    // The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
    string PctileTrafficScoreUs = 215;
    string PermitComponents = 216;
    // This is the type of organization issuing or granting a permit.
    string PermittingAgency = 217;
    // The names of pollutants with reporting violations (i.e., violation codes D80 and D90) or effluent exceedances (i.e., violation code E90) in the past three years in ICIS-NPDES.
    string PollInViolation = 218;
    // A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
    string RCRAIDs = 219;
    // The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.
    string RadGnisName = 220;
    // The name of the waterbody in which the facility is permitted to discharge directly (from the Reach Address Database, RAD).
    string RadHu12Name = 221;
    // A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.
    string RadReachcode = 222;
    string RadWBDHu8 = 223;
    string RadWBDHu8Name = 224;
    // Code from the Reach Address Database (RAD), assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification:
    // - Region (first-level, 2-digit HUC)
    // - Subregion (second-level, 4-digit HUC)
    // - Accounting unit (third-level, 6-digit HUC)
    // - Cataloguing unit (fourth-level, 8-digit HUC)
    // - Watershed (fifth-level, 10-digit HUC)
    // - Subwatershed (sixth-level, 12-digit HUC)
    string RadWBDHuc12 = 225;
    // This is the name of the receiving MS4(s).
    string ReceivingMs4Name = 226;
    // ??
    string ReferencePoint = 227;
    // An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
    string RegistryID = 228;
    string RmpIDs = 229;
    // A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
    string SDWAIDs = 230;
    string Score = 231;
    string Sector = 232;
    // Unique Identifier assigned by EPA.
    string SourceID = 233;
    // This identifies if Endangered Species Act (ESA) provisions are met.
    string SpeciesCriticalHabitalFlag = 234;
    string StateAuthBiosolids = 235;
    string StateAuthFedfac = 236;
    string StateAuthGen = 237;
    string StateAuthNPDES = 238;
    string StateAuthPretreat = 239;
    // The name of the statute associated with each of the permits and identifiers linked to the facility: 
    // - CAA = the Clean Air Act
    // - CWA = the Clean Water Act
    // - RCRA = the Resource Conservation and Recovery Act
    // - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program)
    // - TSCA = the Toxic Substances Control Act
    // - SDWA = the Safe Drinking Water Act
    string Statute = 240;
    string StormWaterArea = 241;
    string SubmittedDate = 242;
    string Subsector = 243;
    // Web address URL of Internet page where current copy of Stormwater Pollution Prevention Plan (SWPPP) is maintained.
    string SwpppUrl = 244;
    // A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
    string TRIIDs = 245;
    string TRIbalFlag = 246;
    string TypeOfMonitoring = 247;
    string TypeOfWater = 248;
    // A flag (values of 1 for Yes, 0 for No) that a Water Program Violation occurred in the last 4 quarters.
    string VioLastYear = 249;
    // Indicates if the facility had a violation within the last 3 years. 1 = Yes
    string ViolFlag = 250;
}

message Cwa2_Results {
    // Number of facilities with current biosolid-related violations.
    string BioCVRows = 1;
    // Number of facilities having one or more quarters of biosolid-related non-compliance in the last three years.
    string BioV3Rows = 2;
    // Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
    string CVRows = 3;
    cwa2_ClusterOutput ClusterOutput = 4;
    // Number of clusters returned.
    string ClusterRecords = 5;
    // Summary count of the number of facilities with a formal enforcement action in the past five years
    string FEARows = 6;
    repeated cwa2_Facilities Facilities = 7;
    // Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
    string INSPRows = 8;
    // URL where all the icons are located
    string IconBaseURL = 9;
    // Number of facilities with tribal_flag populated
    string IndianCountryRows = 10;
    // Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)
    string InfFEARows = 11;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 12;
    // Combine this URL with the PUC to get popup info
    string PopUpBaseURL = 13;
    // Sequential number assigned to entire search result
    string QueryID = 14;
    // A list of submitted query parameters and their values.
    repeated qp0_QueryParameters QueryParameters = 15;
    // Number of query results returned
    string QueryRows = 16;
    // Number of facilities with curr_sv_flag populated (CWP_STATUS = "Significant Violation")
    string SVRows = 17;
    string ServiceBaseURL = 18;
    // The total dollar amount of either assessed or final penalties within the five year time period
    string TotalPenalties = 19;
    // Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
    string V3Rows = 20;
    string VioLast4QRows = 21;
}

message Cwa3_MapData {
    // Quarterly compliance status for the most recent 13 quarters. Each letter indicates the compliance status for the corresponding quarter.
    string CWAstatus = 1;
    // The number of formal enforcement actions that have been taken against the facility
    string FormalCount = 2;
    // Name of each individual icon file within the URL base
    string ICON = 3;
    // The number of informal enforcement actions that have been taken against the facility
    string InformalCount = 4;
    // The latitude of the facility in degrees, to four decimal places
    string LAT = 5;
    // The longitude of the facility in degrees, to four decimal places
    string LON = 6;
    // The unique identifier for the last inspection
    string LastInsp = 7;
    // For DFR, this is the Facility name. The name corresponds to the TYPE value
    string NAME = 8;
    // Pop up value. Combine with PopUpBaseURL to give the popup for the facility
    string PUV = 9;
    // For DFR, this is always facility
    string TYPE = 10;
}

message Cwa3_MapOutput {
    // URL where all the icons are located
    string IconBaseURL = 1;
    repeated cwa3_MapData MapData = 2;
    // Combine this URL with the PUC to get popup info
    string PopUpBaseURL = 3;
    // Sequential number assigned to entire search result
    string QueryID = 4;
}

message Cwa4_Results {
    repeated cwa1_Facilities Facilities = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
    // The number of pages of results returned
    string PageNo = 3;
    // Sequential number assigned to entire search result
    string QueryID = 4;
    // Number of query results returned
    string QueryRows = 5;
}

message Cwa5_Feature {
    Geometry geometry = 1;
    cwa5_properties properties = 2;
    // Static marker indicating object is a GeoJSON Feature.
    string type = 3;
}

message Cwa5_properties {
    // Air Facility System (AFS) ID.
    string AIRIDs = 1;
    string ActiveLower48 = 2;
    string AlrExceedences = 3;
    // Description of pollutant(s) or pollutant constituent(s) associated with each industrial activity exposed to stormwater.
    string AssociatedPollutant = 4;
    // Displays "Y" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
    string AttainsAquaticLifeUseFlg = 5;
    // The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database:
    // - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters).
    // - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories).
    // - 4a = TMDL completed. A TMDL has been completed, but impairment still exists.
    // - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements).
    // - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).
    string AttainsAuCategory = 6;
    // Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
    string AttainsCauseGroups = 7;
    // The year in which the most recent state assessment occurred for the waterbody. The data are from the ATTAINS database.
    string AttainsCycleYear = 8;
    // Displays "Y" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
    string AttainsExceptnlUseFlg = 9;
    // Displays "Y" if the waterbody in which the facility resides is listed for impairment. The data are from the ATTAINS database.
    string AttainsImpWaterFlg = 10;
    // Lists all pollutants discharged by the facility that are potentially contributing to the impairment of local waterbodies.
    string AttainsPossibleNPDESParams = 11;
    // Displays "Y" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
    string AttainsRecreationUseFlg = 12;
    // Displays "Y" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.
    string AttainsShellfishUseFlg = 13;
    // The CWA Report in which the waterbody data can be found. The data are from the Assessment TMDL Tracking & Implementation System (ATTAINS) database.
    string AttainsSource = 14;
    // Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
    string AttainsStateCauses = 15;
    // Displays "Y" if the facility is located on or near a waterbody with a beach closure within the last two years.
    string BeachCloseLast2yrsFlg = 16;
    // Displays "Y" if the facility is located on or near a waterbody with a beach closure within the last year.
    string BeachCloseLastYearFlg = 17;
    // Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.
    string BioAnalyMethodCatgrys = 18;
    // Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.
    string BioAnalyMethods = 19;
    string BioCertifier = 20;
    // Free text allowing the user to provide comments on the annual program report.
    string BioCommentText = 21;
    // Indicates if the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter.
    int32 BioCurrVioFlag = 22;
    string BioFacTypes = 23;
    // The amount (dry metric tons) of biosolids incinerated.
    int32 BioIncinerationSum = 24;
    // The count of Inspection Deficiencies that have been found in the last 5 years.
    int32 BioInspDef5yrCnt = 25;
    // The amount (dry metric tons) of biosolids land applied.
    int32 BioLandApplicationSum = 26;
    // Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.
    string BioMgmtContainers = 27;
    // Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.
    string BioMgmtDefCategories = 28;
    // The number of times noncompliance reported by the facility in the last 3 years.
    int32 BioMgmtDefCurrentCnt = 29;
    // Indicates the type of NPDES special regulatory program deficiency.
    string BioMgmtDeficiencies = 30;
    // Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.
    string BioMgmtHandlers = 31;
    // Identifies the pathogen class for biosolids or sewage sludge generated by the facility.
    string BioMgmtPathogens = 32;
    // Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.
    string BioMgmtPathreds = 33;
    // Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.
    string BioMgmtPrctceStypes = 34;
    // The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.
    string BioMgmtPrctceTypes = 35;
    // Identifies the option used by the facility for vector attraction reduction.
    string BioMgmtVectors = 36;
    // The amount (dry metric tons) of biosolids managed using methods not previously described.
    int32 BioOtherManagementSum = 37;
    // Free text additional description of "other" Biosolids Management Practices.
    string BioOtherMgmtPrctcTxts = 38;
    // The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.
    int32 BioQtrsInVio = 39;
    // The date the report was received by EPA.
    string BioReportDate = 40;
    // The calendar year corresponding to the Annual Biosolids Report.
    string BioReportYear = 41;
    // Indicates the reporting obligation reason.
    string BioReportingObligations = 42;
    // The amount of surface disposal in dry metric tons (DMT).
    int32 BioSurfaceDispSum = 43;
    // A flag (values of 1 for Yes, 0 for No) that a SNC Biosolids Violation exists for the facility.
    string BioSvFlag = 44;
    // The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.
    int32 BioTotalVolumeAmt = 45;
    // Free text additional description of "other" biotreatment processes.
    string BioTrtmntPrcssCmmntTxts = 46;
    // Identifies the biosolids or sewage sludge treatment process or processes at the facility.
    string BioTrtmntProcesses = 47;
    // A flag (values of 1 for Yes, 0 for No) that a Bisolids Violation occurred in the last 4 quarters.
    int32 BioVioLastYear = 48;
    string BioVioLastYearFlag = 49;
    // Displays "Yes" if the facility is in violation for biosolids under the Clean Water Act, in the last three years.
    int32 BioViolFlag = 50;
    // A Yes/No field to indicate permits with biosolids management and compliance information.
    string BiosolidsFlag = 51;
    // Each letter indicates the compliance status for the corresponding quarter.
    string CWP13qtrsComplStatus = 52;
    // The actual amount of the facility's wastewater flow measured in million gallons per day (MGD).
    int32 CWPActualAverageFlowNmbr = 53;
    // The count of Biosolids related Formal Enforcement Actions that have been taken against the Facility.
    int32 CWPBioFeaCount = 54;
    // The count of Biosolids related Informal Enforcement Actions that have been taken against the Facility.
    int32 CWPBioIeaCount = 55;
    // The count of Biosolids related Inspections that have occured for the facility.
    int32 CWPBioInspCount = 56;
    // The total amount of Biosolids related penalties that have been assessed against the facility.
    int32 CWPBioPenalties = 57;
    // Indicates the ICIS Case Number, a unique number identifying the civil enforcement action.
    string CWPCaseIDs = 58;
    // City in which the facility is located.
    string CWPCity = 59;
    // Extent to which data is being entered and effluent exceedances are being identified (Off, On, Partial).
    string CWPComplianceTracking = 60;
    // County in which the facility is located.
    string CWPCounty = 61;
    // The discharge from a Combined Sewer System at a point prior to the treatment plant. CSOs are point sources subject to NPDES permit requirements including both technology-based and water quality-based requirements of the Clean Water Act.
    string CWPCsoFlag = 62;
    // The number of discharge outfalls at points prior to the treatment plant.
    string CWPCsoOutfalls = 63;
    // The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.
    string CWPCurrentSNCStatus = 64;
    // The status date of the facility's Significant Noncompliance designation.
    string CWPCurrentSNCStatusDate = 65;
    string CWPCurrentVioStatus = 66;
    // Displays "Y" if the facility is currently in any violation under the Clean Water Act, either in Noncompliance or Significant Noncompliance.
    string CWPCurrentViol = 67;
    string CWPDateLastBioFea = 68;
    string CWPDateLastBioFeaEPA = 69;
    string CWPDateLastBioFeaSt = 70;
    string CWPDateLastBioIea = 71;
    string CWPDateLastBioIeaEPA = 72;
    string CWPDateLastBioIeaSt = 73;
    string CWPDateLastBioInsp = 74;
    string CWPDateLastBioInspEPA = 75;
    string CWPDateLastBioInspSt = 76;
    string CWPDateLastBioPenalty = 77;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility within the last five years.
    string CWPDateLastFea = 78;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA within the last five years.
    string CWPDateLastFeaEPA = 79;
    // Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastFeaSt = 80;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility by EPA within the last five years.
    string CWPDateLastIeaEPA = 81;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastIeaSt = 82;
    // Indicates the effective date of the most recent listed informal enforcement action taken against the facility within the last five years.
    string CWPDateLastInformalEa = 83;
    // Indicates the effective date of the most recent inspection taken against the facility by EPA within the last five years.
    string CWPDateLastInspEPA = 84;
    // Indicates the effective date of the most recent inspection taken against the facility by a state environmental agency within the last five years.
    string CWPDateLastInspSt = 85;
    // The date on which the most recent inspection of the facility took place. For the CAA, the date on which a Full Compliance Evaluation (FCE) was completed.
    string CWPDateLastInspection = 86;
    // Indicates date of most recent penalty against the facility within the last five years.
    string CWPDateLastPenalty = 87;
    // Indicates the number of days since the most recent Biosolids related inspection of the facility.
    string CWPDaysLastBioInsp = 88;
    // Indicates the number of days since the most recent inspection of the facility. Inspections listed within the last five years are included.
    int32 CWPDaysLastInspection = 89;
    // Displays the number of instances where effluent limits have been exceeded in the past 3 years (E90 compliance code), based on monthly Discharge Monitoring Reports (DMRs) submitted by facilities.
    int32 CWPE90Cnt = 90;
    // The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories.
    string CWPEPARegion = 91;
    string CWPEffectiveDate = 92;
    // Date that the permit expires.
    string CWPExpirationDate = 93;
    string CWPFIPSCode = 94;
    // Each National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or non-major discharger. This field also indicates the permit type.
    string CWPFacilityTypeIndicator = 95;
    // Indicates the total number of enforcement actions taken against the facility within the last five years. "NA" indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits.
    string CWPFormalEaCnt = 96;
    // Displays "Y" if the permitted facility discharges directly into category 4 or 5 impaired waters, as designated under section 303(d) of the Clean Water Act.
    string CWPImpWaterFlg = 97;
    // Displays "Y" if a facility is located in Indian country.
    string CWPIndianCntryFlg = 98;
    // Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years.
    int32 CWPInformalEnfActCount = 99;
    // The number of inspections/compliance evaluations, under the corresponding statute, occurring at the facility within the last five years.
    int32 CWPInspectionCount = 100;
    string CWPIssueDate = 101;
    // Facilities marked "M" for major refers to CWA major permittees.
    // - M = Major
    // - N = Minor
    string CWPMajorMinorStatusFlag = 102;
    // Indicates the facility's or permit's primary North American Industry Classification System (NAICS) Code.
    string CWPNaicsCodes = 103;
    // Facility or permit holder name, as maintained in ICIS-NPDES.
    string CWPName = 104;
    // The code associated with the facility's NPDES permit status.
    string CWPPermitStatusCode = 105;
    // The current stage/status in the NPDES permit life cycle.
    string CWPPermitStatusDesc = 106;
    // The code associated with the facility's NPDES permit classification.
    string CWPPermitTypeCode = 107;
    // NPDES facility permit classification:
    // - NPDES Individual Permit
    // - General Permit Covered Facility
    // - NPDES Master General Permit
    // - Associated Permit Record
    // - Individual Industrial User Permit
    // - Individual State Issued Permit
    // - State Issued Master General Permit
    // - Unpermitted Facility
    string CWPPermitTypeDesc = 108;
    // Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Non-compliance (SNC), as described above under Current Compliance Status.
    int32 CWPQtrsInNC = 109;
    // Count of the number of quarters, out of the last twelve quarters, in which the permit is considered in Significant Non-compliance (SNC).
    int32 CWPQtrsInSNC = 110;
    // Describes the event that resulted in the facility's status of Significant Noncompliance.
    string CWPSNCEventDesc = 111;
    // Indicates the facility's or permit's primary Standard Industrial Classification (SIC) Code.
    string CWPSicCodes = 112;
    // Facility location - two-digit state abbreviation.
    string CWPState = 113;
    // The State Congressional District the facility is located within.
    string CWPStateDistrict = 114;
    // Code from the Assessment TMDL Tracking & Implementation System (ATTAINS) database, assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification:
    // - Region (first-level, 2-digit HUC)
    // - Subregion (second-level, 4-digit HUC)
    // - Accounting unit (third-level, 6-digit HUC)
    // - Cataloguing unit (fourth-level, 8-digit HUC)
    // - Watershed (fifth-level, 10-digit HUC)
    // - Subwatershed (sixth-level, 12-digit HUC)
    string CWPStateWaterBodyCode = 115;
    // The name of the watershed from the ATTAINS database in which the facility resides.
    string CWPStateWaterBodyName = 116;
    // An indication of the facility's current compliance status under the Clean Water Act:
    // - Significant Violation
    // - Noncompliance
    // - No Violation
    // - Unknown
    string CWPStatus = 117;
    // Facility street address
    string CWPStreet = 118;
    string CWPTRIbalLandCode = 119;
    string CWPTerminationDate = 120;
    // The amount of wastewater flow in million gallons per day (MGD) that the facility is designed for.
    int32 CWPTotalDesignFlowNmbr = 121;
    // The total penalty value incurred over 5 years.
    string CWPTotalPenalties = 122;
    // The version number of the facility's NPDES permit.
    int32 CWPVersionNmbr = 123;
    // Facility ZIP code
    string CWPZip = 124;
    int32 CalculatedAccuracyMeters = 125;
    // A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
    string CensusBlockGroup = 126;
    string CertifiedDate = 127;
    // Displays "Y" if the facility is located within the Chesapeake Bay watershed.
    string ChesapeakeBayFlag = 128;
    // ??
    string CollectionMethod = 129;
    // Description of control measures employed to comply with the non-numeric technology-based effluent limits required in Part 2.1.2 and Part 8.
    string ControlMeasure = 130;
    // Description of schedule for control measures associated with good housekeeping and maintenance.
    string ControlMeasureSchedule = 131;
    // Indicates if the facility has a current significant violation. 1 = Yes
    int32 CurrSvFlag = 132;
    // Indicates if the facility has a current violation. 1 = Yes
    int32 CurrVioFlag = 133;
    // The pollutants with limits or monitoring requirements in a facility's NPDES permit with the potential to contribute to impairment of local waterbodies
    string DmrImpairedPoll = 134;
    // Total pounds of pollutants discharged by the NPDES ID for the most recent complete calendar year.
    int32 DmrPounds = 135;
    // Total toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year. TWPE is the mass of a pollutant or chemical discharged that accounts for its relative toxicity.
    int32 DmrTwpe = 136;
    string DschToMs4 = 137;
    // The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report: 
    // 
    // - AFS: Air Facility System for Clean Air Act stationary source programs.
    // - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits.
    // - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs.
    // - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).
    // - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions.
    // - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis.
    // - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
    string EPASystem = 138;
    // Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
    int32 Ea5yrFlag = 139;
    int32 EffExceeds = 140;
    string EjscreenFlag = 141;
    string EjscreenFlagUs = 142;
    // This is the effective date for a  waiver from electronic reporting in compliance with this part. This data element should always be populated for a waiver.
    string ElectrRptWaiverEffDate = 143;
    // This is the expiration date for a temporary waiver from electronic reporting in compliance with this part. This data element should be left blank if the permittee has a permanent waiver from electronic reporting or if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverExpDate = 144;
    // The unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverTypeCode = 145;
    // Description of the unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.
    string ElectrRptWaiverTypeDesc = 146;
    // This is the code indicating the means by which the data were submitted electronically.
    string ElectrSubmissionTypeCode = 147;
    // This is the description of the code indicating the means by which the data were submitted electronically.
    string ElectrSubmissionTypeDesc = 148;
    // Description of onsite industrial activities exposed to stormwater and potential spill and leak areas.
    string ExposedActivity = 149;
    // The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
    string FacDerivedHuc = 150;
    string FacDerivedTRIbes = 151;
    string FacDerivedWBD = 152;
    string FacDerivedWBDHu8 = 153;
    string FacDerivedWBDHu8Name = 154;
    string FacDerivedWBDName = 155;
    // The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
    string FacFIPSCode = 156;
    // Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
    string FacFederalAgencyCode = 157;
    string FacFederalAgencyName = 158;
    // Flag showing Y/N whether the facility is located in Indian Country.
    string FacIndianCntryFlg = 159;
    string FacIndianSpatialFlg = 160;
    // Graphical indicator denoting whether geographical data required to map a facility are available.
    string FacMapFlg = 161;
    // The default map icon image file calculated for the facility by the ECHO program.
    string FacMapIcon = 162;
    // Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
    int32 FacPercentMinority = 163;
    // The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).
    int32 FacPopDen = 164;
    // POTW transfer information from the Toxics Release Inventory (TRI) represents the amount of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW), in pounds, for the most recent reporting year.
    string FacTRIPotwTrans = 165;
    // Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
    string FacTRIReporter = 166;
    // Chemical surface water release information from the Toxics Release Inventory (TRI) represents the total chemical releases discharged to surface water, in pounds, for the most recent reporting year.
    string FacTRISwRel = 167;
    // A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
    string FacUsMexBorderFlg = 168;
    string HistoricCriterionCode = 169;
    string IndswFlag = 170;
    // Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
    int32 Infea5yrFlag = 171;
    // Indicates if the facility has an inspection within the last 5 years. 1 = Yes
    int32 Insp5yrFlag = 172;
    // The count of Biosolids Inspection Deficiencies that have been found in the last 5 years.
    int32 InspDef5yrCnt = 173;
    // This is the name of the organization issuing or granting a permit.
    string IssuingAgency = 174;
    string LastDmrValueRcvdDate = 175;
    string LimPollutant = 176;
    // Flag showing Y/N whether location is within the contiguous (lower 48) United States.
    string Lower48 = 177;
    string Map = 178;
    // This is the unique identifier for the Master General Permit for a General Permit Covered Facility.
    string MasterExternalPermitNmbr = 179;
    // The maximum percentile from all individual EJSCREEN indicators.
    int32 MaxPctileUs = 180;
    // [Col. 121]
    int32 MaxScore = 181;
    int32 MissDmrQtrs = 182;
    string MsgpCorrectiveActionSmmry = 183;
    string MsgpFacilityInspctnSmmry = 184;
    string MsgpLastReportYear = 185;
    string MsgpNoFurtherRdctnRtnle = 186;
    string MsgpPermitType = 187;
    string MsgpVisualAssessmentSmmry = 188;
    // This is the code indicating the NPDES eReporting Rule Data Group that applies to the data.
    string NPDESDataGroups = 189;
    // Description for each NPDES Data Group eReporting rule code related to the current NPDES permit.
    string NPDESDataGroupsDescs = 190;
    // Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)
    string NPDESIDs = 191;
    string OperatorAddress = 192;
    string OperatorCity = 193;
    string OperatorName = 194;
    string OperatorState = 195;
    string OperatorZip = 196;
    int32 Over80CountUs = 197;
    string PastCalYrAverageFlow = 198;
    int32 PastCalYrConvPolOvrLmt = 199;
    string PastCalYrConvPollutants = 200;
    int32 PastCalYrToxicPolOvrLmt = 201;
    string PastCalYrToxicPollutants = 202;
    // The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
    int32 PctileCancerUs = 203;
    // The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
    int32 PctileDpmUs = 204;
    // The national percentile of the census block group for the EJSCREEN ozone indicator.
    int32 PctileO3Us = 205;
    // The national percentile of the census block group for the EJSCREEN Lead paint indicator.
    int32 PctilePctpre1960Us = 206;
    // The national percentile of the census block group for the EJSCREEN particulate matter indicator.
    int32 PctilePmUs = 207;
    // The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
    int32 PctileProximityNPDESUs = 208;
    // The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
    int32 PctileProximityNplUs = 209;
    // The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
    int32 PctileProximityRmpUs = 210;
    // The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
    int32 PctileProximityTsdfUs = 211;
    // The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
    int32 PctileRespUs = 212;
    // The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
    int32 PctileTrafficScoreUs = 213;
    string PermitComponents = 214;
    // This is the type of organization issuing or granting a permit.
    string PermittingAgency = 215;
    // The names of pollutants with reporting violations (i.e., violation codes D80 and D90) or effluent exceedances (i.e., violation code E90) in the past three years in ICIS-NPDES.
    string PollInViolation = 216;
    // A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
    string RCRAIDs = 217;
    // The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.
    string RadGnisName = 218;
    // The name of the waterbody in which the facility is permitted to discharge directly (from the Reach Address Database, RAD).
    string RadHu12Name = 219;
    // A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.
    string RadReachcode = 220;
    string RadWBDHu8 = 221;
    string RadWBDHu8Name = 222;
    // Code from the Reach Address Database (RAD), assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification:
    // - Region (first-level, 2-digit HUC)
    // - Subregion (second-level, 4-digit HUC)
    // - Accounting unit (third-level, 6-digit HUC)
    // - Cataloguing unit (fourth-level, 8-digit HUC)
    // - Watershed (fifth-level, 10-digit HUC)
    // - Subwatershed (sixth-level, 12-digit HUC)
    string RadWBDHuc12 = 223;
    // This is the name of the receiving MS4(s).
    string ReceivingMs4Name = 224;
    // ??
    string ReferencePoint = 225;
    // An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
    string RegistryID = 226;
    string RmpIDs = 227;
    // A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
    string SDWAIDs = 228;
    int32 Score = 229;
    string Sector = 230;
    // Unique Identifier assigned by EPA.
    string SourceID = 231;
    // This identifies if Endangered Species Act (ESA) provisions are met.
    string SpeciesCriticalHabitalFlag = 232;
    string StateAuthBiosolids = 233;
    string StateAuthFedfac = 234;
    string StateAuthGen = 235;
    string StateAuthNPDES = 236;
    string StateAuthPretreat = 237;
    // The name of the statute associated with each of the permits and identifiers linked to the facility: 
    // - CAA = the Clean Air Act
    // - CWA = the Clean Water Act
    // - RCRA = the Resource Conservation and Recovery Act
    // - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program)
    // - TSCA = the Toxic Substances Control Act
    // - SDWA = the Safe Drinking Water Act
    string Statute = 238;
    string StormWaterArea = 239;
    string SubmittedDate = 240;
    string Subsector = 241;
    // Web address URL of Internet page where current copy of Stormwater Pollution Prevention Plan (SWPPP) is maintained.
    string SwpppUrl = 242;
    // A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
    string TRIIDs = 243;
    int32 TRIbalFlag = 244;
    string TypeOfMonitoring = 245;
    string TypeOfWater = 246;
    // A flag (values of 1 for Yes, 0 for No) that a Water Program Violation occurred in the last 4 quarters.
    int32 VioLastYear = 247;
    // Indicates if the facility had a violation within the last 3 years. 1 = Yes
    int32 ViolFlag = 248;
}

enum Descending {
    Y = 0;
    N = 1;
}

enum Maplist {
    Y = 0;
    N = 1;
}

message Met_Results {
    // Field to record messages (typically performance-related) about packet processing
    string Message = 1;
    repeated met_ResultsColumns ResultColumns = 2;
}

message Met_ResultsColumns {
    string ColumnID = 1;
    string ColumnName = 2;
    // Data length for EPA program database column.
    string DataLength = 3;
    // Data type for EPA program database column.
    string DataType = 4;
    // A description of the category of Supplemental Environment Project (SEP) for a settlement.
    string Description = 5;
    string ObjectName = 6;
}

enum P_MS4 {
    Y = 0;
    N = 1;
}

enum P_act {
    Y = 0;
    N = 1;
    A = 2;
}

enum P_agoo {
    AND = 0;
    OR = 1;
}

enum P_bio_current_vio {
    Y = 0;
    N = 1;
}

enum P_decouple {
    Y = 0;
    N = 1;
}

enum P_dwd {
    P_DWD_0 = 0;
    GT0 = 1;
    GT1000 = 2;
    GT5000 = 3;
    GT10000 = 4;
    GT20000 = 5;
    GT50000 = 6;
}

enum P_fac_ico {
    Y = 0;
    N = 1;
}

enum P_fea {
    W = 0;
    N = 1;
}

enum P_feaa {
    A = 0;
    E = 1;
    S = 2;
}

enum P_ff {
    Y = 0;
}

enum P_fntype {
    ALL = 0;
    CONTAINS = 1;
    EXACT = 2;
    BEGINS = 3;
}

enum P_ico {
    Y = 0;
    N = 1;
}

enum P_iea {
    W = 0;
    N = 1;
}

enum P_ieaa {
    E = 0;
    S = 1;
}

enum P_imp_pol {
    Y = 0;
    N = 1;
}

enum P_impw {
    Y = 0;
    N = 1;
}

enum P_indsw {
    Y = 0;
    N = 1;
}

enum P_last_dmr_within {
    W = 0;
    N = 1;
}

enum P_limit_addr {
    Y = 0;
    N = 1;
}

enum P_maj {
    Y = 0;
    N = 1;
}

enum P_med {
    A = 0;
    M = 1;
    R = 2;
    S = 3;
    ALL = 4;
}

enum P_msgp_ptype {
    NOI = 0;
    NOE = 1;
}

enum P_ooFNtype {
    ALL = 0;
    EXACT = 1;
    BEGINS = 2;
    CONTAINS = 3;
}

enum P_owop {
    FEDERAL = 0;
    POTW = 1;
    NONPOTW = 2;
}

enum P_pcss {
    ALL = 0;
    GE1 = 1;
    GE10 = 2;
    GE50 = 3;
}

enum P_pctrack {
    OFF = 0;
    PARTIAL = 1;
    ON = 2;
}

enum P_pd {
    NONE = 0;
    GT100 = 1;
    GT500 = 2;
    GT1000 = 3;
    GT5000 = 4;
    GT10000 = 5;
    GT20000 = 6;
}

enum P_pdwdist {
    N = 0;
    LT1 = 1;
    LT2 = 2;
    LT5 = 3;
    LT10 = 4;
    LT15 = 5;
}

enum P_pexcd {
    P_PEXCD_0 = 0;
    GE0 = 1;
    GE10 = 2;
    GE50 = 3;
    GE100 = 4;
}

enum P_pexp {
    EXP = 0;
    EXPLE1YR = 1;
    EXPGT1YR = 2;
}

enum P_pidall {
    Y = 0;
    N = 1;
}

enum P_plimit {
    Y = 0;
    N = 1;
}

enum P_pm {
    NONE = 0;
    GT5 = 1;
    GT10 = 2;
    GT25 = 3;
    GT50 = 4;
    GT75 = 5;
}

enum P_psncq {
    GT1 = 0;
    GE1 = 1;
    GT2 = 2;
    GE2 = 3;
    GT4 = 4;
    GE4 = 5;
    GT8 = 6;
    GE8 = 7;
    GT12 = 8;
    GE12 = 9;
}

enum P_pswdmp {
    P_PSWDMP_1 = 0;
    P_PSWDMP_2 = 1;
    P_PSWDMP_3 = 2;
    P_PSWDMP_4 = 3;
    P_PSWDMP_5 = 4;
}

enum P_pswvio {
    Y = 0;
    N = 1;
}

enum P_pt {
    P_PT_0 = 0;
    GT0 = 1;
    GT1000 = 2;
    GT5000 = 3;
    GT10000 = 4;
    GT20000 = 5;
    GT50000 = 6;
}

enum P_qiv {
    P_QIV_0 = 0;
    GT1 = 1;
    GT2 = 2;
    GT4 = 3;
    GT8 = 4;
    P_QIV_12 = 5;
}

enum P_reg {
    P_REG_01 = 0;
    P_REG_02 = 1;
    P_REG_03 = 2;
    P_REG_04 = 3;
    P_REG_05 = 4;
    P_REG_06 = 5;
    P_REG_07 = 6;
    P_REG_08 = 7;
    P_REG_09 = 8;
    P_REG_10 = 9;
}

enum P_trep {
    NONE = 0;
    CURR = 1;
    NOTCURR = 2;
}

enum P_usmex {
    Y = 0;
    N = 1;
}

enum P_ysl {
    W = 0;
    N = 1;
    NV = 2;
}

enum P_ysla {
    E = 0;
    S = 1;
    A = 2;
}

message Qp0_QueryParameters {
    // Query parameter
    string QP = 1;
    // Query value
    string QV = 2;
}

message Rlk00_LuValues {
    string ValueCode = 1;
    string ValueDescription = 2;
}

message Rlk13_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk16_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk17_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk46_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk50_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk51_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk52_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk56_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk66_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

message Rlk67_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

enum Summarylist {
    Y = 0;
    N = 1;
}

enum Tablelist {
    Y = 0;
    N = 1;
}

service U.S.EPAEnforcementAndComplianceHistoryOnline(ECHO)-CleanWaterAct(CWA)RestServicesService {
    // Clean Water Act (CWA) Download Data Service
    // 
    // Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
    rpc GetCwa_rest_servicesGet_download(GetCwa_rest_servicesGet_downloadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/echo/cwa_rest_services.get_download"
      };
    }
    // Clean Water Act (CWA) Download Data Service
    // 
    // Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
    rpc PostCwa_rest_servicesGet_download(PostCwa_rest_servicesGet_downloadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/echo/cwa_rest_services.get_download"
      };
    }
    // Clean Water Act (CWA) Facility Search Service
    // 
    // Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
    rpc GetCwa_rest_servicesGet_facilities(GetCwa_rest_servicesGet_facilitiesRequest) returns (GetCwa_rest_servicesGet_facilitiesResponse) {
      option (google.api.http) = {
        get: "/echo/cwa_rest_services.get_facilities"
      };
    }
    // Clean Water Act (CWA) Facility Search Service
    // 
    // Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
    rpc PostCwa_rest_servicesGet_facilities(PostCwa_rest_servicesGet_facilitiesRequest) returns (PostCwa_rest_servicesGet_facilitiesResponse) {
      option (google.api.http) = {
        post: "/echo/cwa_rest_services.get_facilities"
      };
    }
    // Clean Water Act (CWA) Facility Enhanced Search Service
    // 
    // Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
    rpc GetCwa_rest_servicesGet_facility_info(GetCwa_rest_servicesGet_facility_infoRequest) returns (GetCwa_rest_servicesGet_facility_infoResponse) {
      option (google.api.http) = {
        get: "/echo/cwa_rest_services.get_facility_info"
      };
    }
    // Clean Water Act (CWA) Facility Enhanced Search Service
    // 
    // Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
    rpc PostCwa_rest_servicesGet_facility_info(PostCwa_rest_servicesGet_facility_infoRequest) returns (PostCwa_rest_servicesGet_facility_infoResponse) {
      option (google.api.http) = {
        post: "/echo/cwa_rest_services.get_facility_info"
      };
    }
    // Clean Water Act (CWA) GeoJSON Service
    // 
    // Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
    rpc GetCwa_rest_servicesGet_geojson(GetCwa_rest_servicesGet_geojsonRequest) returns (GetCwa_rest_servicesGet_geojsonResponse) {
      option (google.api.http) = {
        get: "/echo/cwa_rest_services.get_geojson"
      };
    }
    // Clean Water Act (CWA) GeoJSON Service
    // 
    // Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
    rpc PostCwa_rest_servicesGet_geojson(PostCwa_rest_servicesGet_geojsonRequest) returns (PostCwa_rest_servicesGet_geojsonResponse) {
      option (google.api.http) = {
        post: "/echo/cwa_rest_services.get_geojson"
      };
    }
    // Clean Water Act (CWA) Info Clusters Service
    // 
    // Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
    rpc GetCwa_rest_servicesGet_info_clusters(GetCwa_rest_servicesGet_info_clustersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/echo/cwa_rest_services.get_info_clusters"
      };
    }
    // Clean Water Act (CWA) Info Clusters Service
    // 
    // Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
    rpc PostCwa_rest_servicesGet_info_clusters(PostCwa_rest_servicesGet_info_clustersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/echo/cwa_rest_services.get_info_clusters"
      };
    }
    // Clean Water Act (CWA) Map Service
    // 
    // The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
    rpc GetCwa_rest_servicesGet_map(GetCwa_rest_servicesGet_mapRequest) returns (GetCwa_rest_servicesGet_mapResponse) {
      option (google.api.http) = {
        get: "/echo/cwa_rest_services.get_map"
      };
    }
    // Clean Water Act (CWA) Map Service
    // 
    // The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
    rpc PostCwa_rest_servicesGet_map(PostCwa_rest_servicesGet_mapRequest) returns (PostCwa_rest_servicesGet_mapResponse) {
      option (google.api.http) = {
        post: "/echo/cwa_rest_services.get_map"
      };
    }
    // Clean Water Act (CWA) Paginated Results Service
    // 
    // GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns.
    rpc GetCwa_rest_servicesGet_qid(GetCwa_rest_servicesGet_qidRequest) returns (GetCwa_rest_servicesGet_qidResponse) {
      option (google.api.http) = {
        get: "/echo/cwa_rest_services.get_qid"
      };
    }
    // Clean Water Act (CWA) Paginated Results Service
    // 
    // GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns.
    rpc PostCwa_rest_servicesGet_qid(PostCwa_rest_servicesGet_qidRequest) returns (PostCwa_rest_servicesGet_qidResponse) {
      option (google.api.http) = {
        post: "/echo/cwa_rest_services.get_qid"
      };
    }
    // Clean Water Act (CWA) Metadata Service
    // 
    // Returns the JSON Object Name and ColumnId for usage with the qcolumns parameter for get_qid, get_facility_info and other service endpoints.
    rpc GetCwa_rest_servicesMetadata(GetCwa_rest_servicesMetadataRequest) returns (GetCwa_rest_servicesMetadataResponse) {
      option (google.api.http) = {
        get: "/echo/cwa_rest_services.metadata"
      };
    }
    // Clean Water Act (CWA) Metadata Service
    // 
    // Returns the JSON Object Name and ColumnId for usage with the qcolumns parameter for get_qid, get_facility_info and other service endpoints.
    rpc PostCwa_rest_servicesMetadata(PostCwa_rest_servicesMetadataRequest) returns (PostCwa_rest_servicesMetadataResponse) {
      option (google.api.http) = {
        post: "/echo/cwa_rest_services.metadata"
      };
    }
    // ECHO BP Tribes Lookup Service
    // 
    // Returns the EPA Standard Indian Tribes and Native Alaskan Villages tribal_id and tribe_name.
    rpc GetRest_lookupsBp_tribes(GetRest_lookupsBp_tribesRequest) returns (GetRest_lookupsBp_tribesResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.bp_tribes"
      };
    }
    // ECHO BP Tribes Lookup Service
    // 
    // Returns the EPA Standard Indian Tribes and Native Alaskan Villages tribal_id and tribe_name.
    rpc PostRest_lookupsBp_tribes(PostRest_lookupsBp_tribesRequest) returns (PostRest_lookupsBp_tribesResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.bp_tribes"
      };
    }
    // ECHO CWA Parameter Lookup Service
    // 
    // Look up Clean Water Act parameter codes and descriptions in the Integrated Compliance Information System - National Pollutant Discharge Elimination System (ICIS-NPDES) by code or term.
    rpc GetRest_lookupsCwa_parameters(GetRest_lookupsCwa_parametersRequest) returns (GetRest_lookupsCwa_parametersResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.cwa_parameters"
      };
    }
    // ECHO CWA Parameter Lookup Service
    // 
    // Look up Clean Water Act parameter codes and descriptions in the Integrated Compliance Information System - National Pollutant Discharge Elimination System (ICIS-NPDES) by code or term.
    rpc PostRest_lookupsCwa_parameters(PostRest_lookupsCwa_parametersRequest) returns (PostRest_lookupsCwa_parametersResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.cwa_parameters"
      };
    }
    // ECHO CWA Pollutants Lookup Service
    rpc GetRest_lookupsCwa_pollutants(GetRest_lookupsCwa_pollutantsRequest) returns (GetRest_lookupsCwa_pollutantsResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.cwa_pollutants"
      };
    }
    // ECHO CWA Pollutants Lookup Service
    rpc PostRest_lookupsCwa_pollutants(PostRest_lookupsCwa_pollutantsRequest) returns (PostRest_lookupsCwa_pollutantsResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.cwa_pollutants"
      };
    }
    // ECHO Federal Agency Lookup Service
    // 
    // Look up Federal Agency Code
    rpc GetRest_lookupsFederal_agencies(GetRest_lookupsFederal_agenciesRequest) returns (GetRest_lookupsFederal_agenciesResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.federal_agencies"
      };
    }
    // ECHO Federal Agency Lookup Service
    // 
    // Look up Federal Agency Code
    rpc PostRest_lookupsFederal_agencies(PostRest_lookupsFederal_agenciesRequest) returns (PostRest_lookupsFederal_agenciesResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.federal_agencies"
      };
    }
    // ECHO ICIS NPDES Inspection Types Lookup Service
    // 
    // Returns the ICIS NPDES Compliance Monitoring Type Code and Description.
    rpc GetRest_lookupsIcis_inspection_types(GetRest_lookupsIcis_inspection_typesRequest) returns (GetRest_lookupsIcis_inspection_typesResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.icis_inspection_types"
      };
    }
    // ECHO ICIS NPDES Inspection Types Lookup Service
    // 
    // Returns the ICIS NPDES Compliance Monitoring Type Code and Description.
    rpc PostRest_lookupsIcis_inspection_types(PostRest_lookupsIcis_inspection_typesRequest) returns (PostRest_lookupsIcis_inspection_typesResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.icis_inspection_types"
      };
    }
    // ECHO ICIS Law Sections Lookup Service
    // 
    // Returns the ICIS Law Section Descriptions.
    rpc GetRest_lookupsIcis_law_sections(GetRest_lookupsIcis_law_sectionsRequest) returns (GetRest_lookupsIcis_law_sectionsResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.icis_law_sections"
      };
    }
    // ECHO ICIS Law Sections Lookup Service
    // 
    // Returns the ICIS Law Section Descriptions.
    rpc PostRest_lookupsIcis_law_sections(PostRest_lookupsIcis_law_sectionsRequest) returns (PostRest_lookupsIcis_law_sectionsResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.icis_law_sections"
      };
    }
    // ECHO NAICS Codes Lookup Service
    rpc GetRest_lookupsNaics_codes(GetRest_lookupsNaics_codesRequest) returns (GetRest_lookupsNaics_codesResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.naics_codes"
      };
    }
    // ECHO NAICS Codes Lookup Service
    rpc PostRest_lookupsNaics_codes(PostRest_lookupsNaics_codesRequest) returns (PostRest_lookupsNaics_codesResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.naics_codes"
      };
    }
    // ECHO NPDES Parameters Lookup Service
    // 
    // ICIS Limit Parameter Code and Name lookup based on the supply of a partial parameter name. (NPDES = National Pollutant Discharge Elimination System)
    rpc GetRest_lookupsNpdes_parameters(GetRest_lookupsNpdes_parametersRequest) returns (GetRest_lookupsNpdes_parametersResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.npdes_parameters"
      };
    }
    // ECHO NPDES Parameters Lookup Service
    // 
    // ICIS Limit Parameter Code and Name lookup based on the supply of a partial parameter name. (NPDES = National Pollutant Discharge Elimination System)
    rpc PostRest_lookupsNpdes_parameters(PostRest_lookupsNpdes_parametersRequest) returns (PostRest_lookupsNpdes_parametersResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.npdes_parameters"
      };
    }
    // ECHO WBD Code Lookup Service
    // 
    // USGS Watershed Boundary Dataset (WBD) Name lookup based on a supplied WBD Code and Watershed Level
    rpc GetRest_lookupsWbd_code_lu(GetRest_lookupsWbd_code_luRequest) returns (GetRest_lookupsWbd_code_luResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.wbd_code_lu"
      };
    }
    // ECHO WBD Code Lookup Service
    // 
    // USGS Watershed Boundary Dataset (WBD) Name lookup based on a supplied WBD Code and Watershed Level
    rpc PostRest_lookupsWbd_code_lu(PostRest_lookupsWbd_code_luRequest) returns (PostRest_lookupsWbd_code_luResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.wbd_code_lu"
      };
    }
    // ECHO WBD Name Lookup Service
    // 
    // USGS Watershed Boundary Dataset (WBD) Code lookup based on a supplied WBD Name and Watershed Level
    rpc GetRest_lookupsWbd_name_lu(GetRest_lookupsWbd_name_luRequest) returns (GetRest_lookupsWbd_name_luResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.wbd_name_lu"
      };
    }
    // ECHO WBD Name Lookup Service
    // 
    // USGS Watershed Boundary Dataset (WBD) Code lookup based on a supplied WBD Name and Watershed Level
    rpc PostRest_lookupsWbd_name_lu(PostRest_lookupsWbd_name_luRequest) returns (PostRest_lookupsWbd_name_luResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.wbd_name_lu"
      };
    }
}

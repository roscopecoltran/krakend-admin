syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package u.s.epaenforcementandcompliancehistoryonline(echo)-enforcementcasesearch;

message GetCase_rest_servicesGet_case_reportRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCase_rest_servicesGet_case_reportRequest_Output {
        GETCASE_REST_SERVICESGET_CASE_REPORTREQUEST_OUTPUT_JSONP = 0;
        GETCASE_REST_SERVICESGET_CASE_REPORTREQUEST_OUTPUT_JSON = 1;
        GETCASE_REST_SERVICESGET_CASE_REPORTREQUEST_OUTPUT_XML = 2;
    }
    GetCase_rest_servicesGet_case_reportRequest_Output output = 2;
    // Case Number. Enter the case number identifier to retrieve the case report.
    string p_id = 3;
}

message GetCase_rest_servicesGet_case_reportResponse {
    crs1_Results Results = 1;
}

message PostCase_rest_servicesGet_case_reportRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCase_rest_servicesGet_case_reportRequest_Output {
        POSTCASE_REST_SERVICESGET_CASE_REPORTREQUEST_OUTPUT_JSONP = 0;
        POSTCASE_REST_SERVICESGET_CASE_REPORTREQUEST_OUTPUT_JSON = 1;
        POSTCASE_REST_SERVICESGET_CASE_REPORTREQUEST_OUTPUT_XML = 2;
    }
    PostCase_rest_servicesGet_case_reportRequest_Output output = 2;
    // Case Number. Enter the case number identifier to retrieve the case report.
    string p_id = 3;
}

message PostCase_rest_servicesGet_case_reportResponse {
    crs1_Results Results = 1;
}

message GetCase_rest_servicesGet_casesRequest {
    string callback = 1;
    maplist maplist = 2;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCase_rest_servicesGet_casesRequest_Output {
        GETCASE_REST_SERVICESGET_CASESREQUEST_OUTPUT_JSONP = 0;
        GETCASE_REST_SERVICESGET_CASESREQUEST_OUTPUT_JSON = 1;
        GETCASE_REST_SERVICESGET_CASESREQUEST_OUTPUT_XML = 2;
    }
    GetCase_rest_servicesGet_casesRequest_Output output = 3;
    string p_activity_contact = 4;
    string p_activity_number = 5;
    number p_c1lat = 6;
    number p_c1lon = 7;
    number p_c2lat = 8;
    number p_c2lon = 9;
    string p_case_category = 10;
    p_case_lead p_case_lead = 11;
    string p_case_number = 12;
    string p_case_sens_flg = 13;
    string p_case_status = 14;
    string p_case_summary = 15;
    p_civil_criminal_indicator p_civil_criminal_indicator = 16;
    p_comp_act_val p_comp_act_val = 17;
    string p_complying_actions = 18;
    string p_cost_recovery = 19;
    string p_cp_citation = 20;
    string p_district = 21;
    string p_docket_number = 22;
    string p_enf_program = 23;
    string p_enf_type = 24;
    string p_entered_date = 25;
    string p_fac_city = 26;
    string p_fac_county = 27;
    string p_fac_zip = 28;
    string p_facility_id = 29;
    p_fed_case p_fed_case = 30;
    string p_fed_indicator = 31;
    p_fed_penalty p_fed_penalty = 32;
    p_fntype p_fntype = 33;
    string p_from_date = 34;
    string p_law = 35;
    string p_lodged_date = 36;
    string p_milestone = 37;
    string p_milestone_fy = 38;
    p_multimedia p_multimedia = 39;
    string p_naics = 40;
    p_naics_frs_flg p_naics_frs_flg = 41;
    p_naics_primary_flg p_naics_primary_flg = 42;
    string p_name = 43;
    string p_name_type = 44;
    p_oeca_core p_oeca_core = 45;
    string p_priority_area = 46;
    string p_priority_area_desc = 47;
    p_rank_order p_rank_order = 48;
    p_region p_region = 49;
    string p_role = 50;
    string p_section = 51;
    string p_sep_cats = 52;
    p_sep_val p_sep_val = 53;
    string p_sic = 54;
    p_sic_ao_naics p_sic_ao_naics = 55;
    p_sic_frs_flg p_sic_frs_flg = 56;
    p_sic_primary_flg p_sic_primary_flg = 57;
    string p_state = 58;
    string p_to_date = 59;
    string p_total_comp_act_val = 60;
    string p_total_cost_recovery = 61;
    string p_total_fed_penalty = 62;
    string p_total_sep_val = 63;
    p_tribal p_tribal = 64;
    p_usmex p_usmex = 65;
    string p_violation = 66;
    string p_voluntary = 67;
    string qcolumns = 68;
    number queryset = 69;
    number responseset = 70;
    tablelist tablelist = 71;
}

message GetCase_rest_servicesGet_casesResponse {
    crs2_Results Results = 1;
}

message PostCase_rest_servicesGet_casesRequest {
    string callback = 1;
    maplist maplist = 2;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCase_rest_servicesGet_casesRequest_Output {
        POSTCASE_REST_SERVICESGET_CASESREQUEST_OUTPUT_JSONP = 0;
        POSTCASE_REST_SERVICESGET_CASESREQUEST_OUTPUT_JSON = 1;
        POSTCASE_REST_SERVICESGET_CASESREQUEST_OUTPUT_XML = 2;
    }
    PostCase_rest_servicesGet_casesRequest_Output output = 3;
    string p_activity_contact = 4;
    string p_activity_number = 5;
    number p_c1lat = 6;
    number p_c1lon = 7;
    number p_c2lat = 8;
    number p_c2lon = 9;
    string p_case_category = 10;
    p_case_lead p_case_lead = 11;
    string p_case_number = 12;
    string p_case_sens_flg = 13;
    string p_case_status = 14;
    string p_case_summary = 15;
    p_civil_criminal_indicator p_civil_criminal_indicator = 16;
    p_comp_act_val p_comp_act_val = 17;
    string p_complying_actions = 18;
    string p_cost_recovery = 19;
    string p_cp_citation = 20;
    string p_district = 21;
    string p_docket_number = 22;
    string p_enf_program = 23;
    string p_enf_type = 24;
    string p_entered_date = 25;
    string p_fac_city = 26;
    string p_fac_county = 27;
    string p_fac_zip = 28;
    string p_facility_id = 29;
    p_fed_case p_fed_case = 30;
    string p_fed_indicator = 31;
    p_fed_penalty p_fed_penalty = 32;
    p_fntype p_fntype = 33;
    string p_from_date = 34;
    string p_law = 35;
    string p_lodged_date = 36;
    string p_milestone = 37;
    string p_milestone_fy = 38;
    p_multimedia p_multimedia = 39;
    string p_naics = 40;
    p_naics_frs_flg p_naics_frs_flg = 41;
    p_naics_primary_flg p_naics_primary_flg = 42;
    string p_name = 43;
    string p_name_type = 44;
    p_oeca_core p_oeca_core = 45;
    string p_priority_area = 46;
    string p_priority_area_desc = 47;
    p_rank_order p_rank_order = 48;
    p_region p_region = 49;
    string p_role = 50;
    string p_section = 51;
    string p_sep_cats = 52;
    p_sep_val p_sep_val = 53;
    string p_sic = 54;
    p_sic_ao_naics p_sic_ao_naics = 55;
    p_sic_frs_flg p_sic_frs_flg = 56;
    p_sic_primary_flg p_sic_primary_flg = 57;
    string p_state = 58;
    string p_to_date = 59;
    string p_total_comp_act_val = 60;
    string p_total_cost_recovery = 61;
    string p_total_fed_penalty = 62;
    string p_total_sep_val = 63;
    p_tribal p_tribal = 64;
    p_usmex p_usmex = 65;
    string p_violation = 66;
    string p_voluntary = 67;
    string qcolumns = 68;
    number queryset = 69;
    number responseset = 70;
    tablelist tablelist = 71;
}

message PostCase_rest_servicesGet_casesResponse {
    crs2_Results Results = 1;
}

message GetCase_rest_servicesGet_crcase_reportRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCase_rest_servicesGet_crcase_reportRequest_Output {
        GETCASE_REST_SERVICESGET_CRCASE_REPORTREQUEST_OUTPUT_JSONP = 0;
        GETCASE_REST_SERVICESGET_CRCASE_REPORTREQUEST_OUTPUT_JSON = 1;
        GETCASE_REST_SERVICESGET_CRCASE_REPORTREQUEST_OUTPUT_XML = 2;
    }
    GetCase_rest_servicesGet_crcase_reportRequest_Output output = 2;
    // Prosecution Summary Identifier. Enter the numeric prosecution summary identifier to retrieve the criminal case report.
    string p_id = 3;
}

message GetCase_rest_servicesGet_crcase_reportResponse {
    crs3_Results Results = 1;
}

message PostCase_rest_servicesGet_crcase_reportRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCase_rest_servicesGet_crcase_reportRequest_Output {
        POSTCASE_REST_SERVICESGET_CRCASE_REPORTREQUEST_OUTPUT_JSONP = 0;
        POSTCASE_REST_SERVICESGET_CRCASE_REPORTREQUEST_OUTPUT_JSON = 1;
        POSTCASE_REST_SERVICESGET_CRCASE_REPORTREQUEST_OUTPUT_XML = 2;
    }
    PostCase_rest_servicesGet_crcase_reportRequest_Output output = 2;
    // Prosecution Summary Identifier. Enter the numeric prosecution summary identifier to retrieve the criminal case report.
    string p_id = 3;
}

message PostCase_rest_servicesGet_crcase_reportResponse {
    crs3_Results Results = 1;
}

message GetCase_rest_servicesGet_downloadRequest {
    // Output Format Flag.  Enter one of the following keywords:
    // - CSV = Facility results formatted as comma delimited file download (default).
    string output = 1;
    string qcolumns = 2;
    string qid = 3;
}

message PostCase_rest_servicesGet_downloadRequest {
    // Output Format Flag.  Enter one of the following keywords:
    // - CSV = Facility results formatted as comma delimited file download (default).
    string output = 1;
    string qcolumns = 2;
    string qid = 3;
}

message GetCase_rest_servicesGet_mapRequest {
    number c1_lat = 1;
    number c1_long = 2;
    number c2_lat = 3;
    number c2_long = 4;
    string callback = 5;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCase_rest_servicesGet_mapRequest_Output {
        GETCASE_REST_SERVICESGET_MAPREQUEST_OUTPUT_JSONP = 0;
        GETCASE_REST_SERVICESGET_MAPREQUEST_OUTPUT_JSON = 1;
        GETCASE_REST_SERVICESGET_MAPREQUEST_OUTPUT_XML = 2;
    }
    GetCase_rest_servicesGet_mapRequest_Output output = 6;
    string qid = 7;
    tablelist tablelist = 8;
}

message GetCase_rest_servicesGet_mapResponse {
    crs0_MapOutput MapOutput = 1;
}

message PostCase_rest_servicesGet_mapRequest {
    number c1_lat = 1;
    number c1_long = 2;
    number c2_lat = 3;
    number c2_long = 4;
    string callback = 5;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCase_rest_servicesGet_mapRequest_Output {
        POSTCASE_REST_SERVICESGET_MAPREQUEST_OUTPUT_JSONP = 0;
        POSTCASE_REST_SERVICESGET_MAPREQUEST_OUTPUT_JSON = 1;
        POSTCASE_REST_SERVICESGET_MAPREQUEST_OUTPUT_XML = 2;
    }
    PostCase_rest_servicesGet_mapRequest_Output output = 6;
    string qid = 7;
    tablelist tablelist = 8;
}

message PostCase_rest_servicesGet_mapResponse {
    crs0_MapOutput MapOutput = 1;
}

message GetCase_rest_servicesGet_qidRequest {
    string callback = 1;
    descending descending = 2;
    number newsort = 3;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCase_rest_servicesGet_qidRequest_Output {
        GETCASE_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSONP = 0;
        GETCASE_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSON = 1;
        GETCASE_REST_SERVICESGET_QIDREQUEST_OUTPUT_XML = 2;
    }
    GetCase_rest_servicesGet_qidRequest_Output output = 4;
    number pageno = 5;
    string qcolumns = 6;
    string qid = 7;
}

message GetCase_rest_servicesGet_qidResponse {
    crs5_Results Results = 1;
}

message PostCase_rest_servicesGet_qidRequest {
    string callback = 1;
    descending descending = 2;
    number newsort = 3;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCase_rest_servicesGet_qidRequest_Output {
        POSTCASE_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSONP = 0;
        POSTCASE_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSON = 1;
        POSTCASE_REST_SERVICESGET_QIDREQUEST_OUTPUT_XML = 2;
    }
    PostCase_rest_servicesGet_qidRequest_Output output = 4;
    number pageno = 5;
    string qcolumns = 6;
    string qid = 7;
}

message PostCase_rest_servicesGet_qidResponse {
    crs5_Results Results = 1;
}

message GetCase_rest_servicesMetadataRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetCase_rest_servicesMetadataRequest_Output {
        GETCASE_REST_SERVICESMETADATAREQUEST_OUTPUT_JSONP = 0;
        GETCASE_REST_SERVICESMETADATAREQUEST_OUTPUT_JSON = 1;
        GETCASE_REST_SERVICESMETADATAREQUEST_OUTPUT_XML = 2;
    }
    GetCase_rest_servicesMetadataRequest_Output output = 2;
}

message GetCase_rest_servicesMetadataResponse {
    met_Results Results = 1;
}

message PostCase_rest_servicesMetadataRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostCase_rest_servicesMetadataRequest_Output {
        POSTCASE_REST_SERVICESMETADATAREQUEST_OUTPUT_JSONP = 0;
        POSTCASE_REST_SERVICESMETADATAREQUEST_OUTPUT_JSON = 1;
        POSTCASE_REST_SERVICESMETADATAREQUEST_OUTPUT_XML = 2;
    }
    PostCase_rest_servicesMetadataRequest_Output output = 2;
}

message PostCase_rest_servicesMetadataResponse {
    met_Results Results = 1;
}

message GetRest_lookupsIcis_law_sectionsRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetRest_lookupsIcis_law_sectionsRequest_Output {
        GETREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_JSONP = 0;
        GETREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_JSON = 1;
        GETREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_XML = 2;
    }
    GetRest_lookupsIcis_law_sectionsRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
    number sort_order = 5;
    string status_flag = 6;
    string statute_code = 7;
}

message GetRest_lookupsIcis_law_sectionsResponse {
    rlk51_Results Results = 1;
}

message PostRest_lookupsIcis_law_sectionsRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostRest_lookupsIcis_law_sectionsRequest_Output {
        POSTREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_JSONP = 0;
        POSTREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_JSON = 1;
        POSTREST_LOOKUPSICIS_LAW_SECTIONSREQUEST_OUTPUT_XML = 2;
    }
    PostRest_lookupsIcis_law_sectionsRequest_Output output = 2;
    string search_code = 3;
    string search_term = 4;
    number sort_order = 5;
    string status_flag = 6;
    string statute_code = 7;
}

message PostRest_lookupsIcis_law_sectionsResponse {
    rlk51_Results Results = 1;
}

message Crs0_Cases {
    // The unique, system-generated identifier for an activity performed at or related to a particular site or Facility.
    string ActivityId = 1;
    // A three-character code that identifies the type of ICIS activity, which includes general categories such as information requests, inspections, compliance determinations, and enforcement.  Activities selected for the ECHO data download are restricted to two subcategories of enforcement:  administrative – formal (AFR), and judicial activities (JDC).
    string CaseCategoryCode = 2;
    // Identifies the type of action based on the enforcement authority used.  
    // 
    // Administrative Formal Cases are non-judicial enforcement actions taken by EPA or a state under its own authority, without involving a judicial court process. An administrative action by EPA or a state agency may be in the form of:
    // - A notice of violation or a Superfund notice letter.
    // -> An administrative order or order (either with or without penalties) directing an individual, a business, or other entity to take action to come into compliance, or to clean up a site.
    // 
    // Judicial Cases are formal lawsuits, filed in court, against persons or entities that have failed to comply with statutory or regulatory requirements, with an administrative order, or who owe EPA response costs for cleaning up a Superfund site. These cases are filed by the U.S. Department of Justice on behalf of EPA and, in regulatory cases, by the State's Attorneys General for the states as well.
    // 
    // Criminal Cases occur when EPA or a state enforce against a company or person through a criminal action. Criminal actions are usually reserved for the most serious violations, those that are willful, or knowingly committed. A court conviction can result in fines or imprisonment.
    string CaseCategoryDesc = 3;
    // A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, "HQ" (headquarters initiated cases), and "EF" or "WF" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
    // For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
    string CaseName = 4;
    // A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, "HQ" (headquarters initiated cases), and "EF" or "WF" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
    string CaseNumber = 5;
    // Code identifying the current status of an activity.
    string CaseStatusCode = 6;
    // The description that identifies the current status of an activity.
    string CaseStatusDesc = 7;
    // Civil vs. Criminal Indicator.
    string CivilCriminalIndicator = 8;
    // For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.
    string CostRecovery = 9;
    // The docket number assigned by the Department of Justice to EPA's Enforcement Action.  This number will identify cases in the Federal Register and in DOJ press releases when a settlement is lodged and entered.
    string DOJDocketNmbr = 10;
    // The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.
    string DateClosed = 11;
    // The filed/issued date can have different meanings depending on the Case Category. The date the judicial complaint is filed in U.S. District Court by the U.S. Attorney. The date that an administrative order is issued or the administrative complaint is filed.
    string DateFiled = 12;
    // The date a proposed consent decree is given to the Clerk of the Court for lodging in the District Court.  Upon lodging a consent decree, a notice is published in the Federal Register indicating nature of the proposed settlement and the acceptance period for public comments.
    string DateLodged = 13;
    // The result of the enforcement action.
    string EnfOutcome = 14;
    // For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
    string FedPenalty = 15;
    // The lead agency (e.g., EPA, State) conducting the inspection
    string Lead = 16;
    // [Col. 121]
    string MaxScore = 17;
    // Identifies the primary statute/law violated and cited in the enforcement action. Many of EPA's judicial actions are based on incidents that are violations of more than one statute. One law entered into the ICIS record is designated the primary law, which is considered the law that is most seriously violated and/or for which the most significant relief is sought.
    string PrimaryLaw = 18;
    // A 6-digit code to classify industrial establishments, as identified in FRS. North American Industry Classification System (NAICS) has replaced the U.S. Standard Industrial Classification (SIC) system. For detailed information about NAICS, please refer to the U.S. Census Bureau NAICS webpage.
    string PrimaryNAICSCode = 19;
    // The Standard Industrial Classification (SIC) system code of the facility, as identified in FRS. SIC codes were established by the Census Bureau to identify processes, products and services. The SIC code describes the primary activity of the facility. The first two digits in the code define a major business sector; the last two digits denote a facility's specialty within the major sector.
    string PrimarySICCode = 20;
    // Identifies the primary section violated and cited in the enforcement action.
    string PrimarySection = 21;
    // Prosecution Summary Identifier.
    string ProsecutionSummaryId = 22;
    // For civil enforcement actions, as part of a settlement, a defendant may voluntarily agree to undertake an environmentally beneficial project (Supplement Environmental Project) related to the violation in exchange for mitigation of the penalty to be paid.  It may not include activities a defendant must take to return to compliance with the law. The EPA has set out eight categories that can be acceptable SEPs:
    // - Public Health
    // - Pollution Prevention
    // - Pollution Reduction
    // - Environmental Restoration and Protection
    // - Emergency Planning and Preparedness
    // - Assessments and Audits
    // - Environmental Compliance Promotion
    // - Other Types of Projects
    // Descriptions of each SEP category can be found on the EPA Supplemental Environmental Projects page.
    string SEPCategories = 23;
    // The total value of all SEPs for all settlements at the enforcement case.
    string SEPCost = 24;
    // A description of the SEP. These actions do not include activities a violator must take to return to compliance with the law.
    string SEPTexts = 25;
    // For civil enforcement actions, the number of settlements associated with the case. Most enforcement actions tend to follow a one-case, one-settlement scenario. However, and in particular with judicial actions involving multiple defendants, more than one settlement may result.
    string SettlementCnt = 26;
    // For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.
    string SettlementDate = 27;
    string StateLocPenaltyAmt = 28;
    // For civil enforcement actions, the value of the costs incurred by the defendant/respondent to attain compliance with the law and restore the environment. This value does not include penalties, cost recovery, or costs associated with SEPs.
    string TotalCompActionAmt = 29;
    // Flag indicating if the case is located on tribal land.
    string TribalLandFlag = 30;
}

message Crs0_MapData {
    // Name of each individual icon file within the URL base
    string ICON = 1;
    // The latitude of the facility in degrees, to four decimal places
    string LAT = 2;
    // The longitude of the facility in degrees, to four decimal places
    string LON = 3;
    // For DFR, this is the Facility name. The name corresponds to the TYPE value
    string NAME = 4;
    // Pop up value. Combine with PopUpBaseURL to give the popup for the facility
    string PUV = 5;
    // For DFR, this is always facility
    string TYPE = 6;
}

message Crs0_MapOutput {
    // URL where all the icons are located
    string IconBaseURL = 1;
    repeated crs0_MapData MapData = 2;
    // Combine this URL with the PUC to get popup info
    string PopUpBaseURL = 3;
    // Sequential number assigned to entire search result
    string QueryID = 4;
}

message Crs1_CAEDDocuments {
    string Dummy = 1;
}

message Crs1_CaseInformation {
    // The Branch or Unit of the Office of Regional Counsel assigned for the case.
    string Branch = 1;
    // A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, "HQ" (headquarters initiated cases), and "EF" or "WF" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
    // For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
    string CaseName = 2;
    // A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, "HQ" (headquarters initiated cases), and "EF" or "WF" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
    string CaseNumber = 3;
    // The status of the compliance event or enforcement action.
    string CaseStatus = 4;
    // The date of the most recent milestone activity.
    string CaseStatusDate = 5;
    // The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.
    string CaseSummary = 6;
    // The unique code that identifies a type of compliance event or enforcement action.
    string CaseType = 7;
    // The docket number assigned by the Department of Justice to EPA's Enforcement Action.
    string DOJDocketNumber = 8;
    // A description of the mechanism by which the Enforcement Action is resolved.
    string EnforcementOutcome = 9;
    // A text description of the Enforcement Action type.
    string EnforcementType = 10;
    // The EPA Headquarters division that is tracking the case.
    string HeadquartersDivision = 11;
    // The lead agency (e.g., EPA, State) conducting the inspection
    string Lead = 12;
    // The flag indicating whether the activity was a multimedia action.
    string MultiMediaCase = 13;
    // The number the Clerk of the Court assigns to a case that is filed or to a consent decree when it is lodged.  For administrative cases, it is the number assigned to the case by the Regional Hearing Clerk.
    string RegionalDocketNumber = 14;
    // The description for the type of relief requested in the complaint.
    string ReliefSought = 15;
    // A flag that indicates the Enforcement Action was the result of a self disclosure.
    string ResultVolDisclosure = 16;
    // The estimated dollar value of injunctive relief and other physical/nonphysical costs of returning to compliance, from all settlements at a case. Injunctive relief represents the actions a defendant is ordered to undertake to achieve and maintain compliance, such as installing a new pollution control device to reduce air pollution, or preventing emissions of a pollutant in the first place.
    string TotalComplianceActionCost = 17;
    // The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.
    string TotalCostRecovery = 18;
    // For civil judicial enforcement actions, this amount is the federal penalty assessed against the defendant(s)� as specified in the final entered Consent Decree or Court Order. For administrative enforcement actions, it is the penalty assessed in the Consent/Final Order. It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities. Interest payments associated with a penalty paid over time are not included in this amount.
    string TotalFederalPenalty = 19;
    // The total value of all SEPs for all settlements at the enforcement case.
    string TotalSEPCost = 20;
    // The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
    string TotalStatePenalty = 21;
    // ???
    string Violations = 22;
}

message Crs1_CaseMilestones {
    // The actual date on which the event was completed/achieved.
    string ActualDate = 1;
    // Identifies a major judicial or administrative enforcement action milestone.
    string Event = 2;
}

message Crs1_Citations {
    // A description of the EPA program(s) under which an enforcement action has been taken, and which correspond to the cited statutes and sections.
    string Programs = 1;
    // ???
    string Sections = 2;
    // The title held by a person in an organization.
    string Title = 3;
}

message Crs1_ComplianceSchedules {
    // The actual date on which the Compliance Schedule event was completed/achieved.
    string ActualDate = 1;
    // The dollar amount of a scheduled payment initiated through a penalty action or a cost recovery pursuant to a Final Order.
    string EventAmount.ComplianceSchedules = 2;
    // The number assigned by the Facility Linkage Application that is used to associate facility records from multiple environmental database systems that are known or believed to represent the same facility.
    string FacilityFRSID = 3;
    // The free-text field used to store descriptive Compliance Schedule information.
    string ScheduleCommentText = 4;
    // The date the event is scheduled to be completed (i.e. the due date).
    string ScheduleDate = 5;
    // The description of the particular event with which the permittee is scheduled to comply.
    string ScheduleEventDescription = 6;
    // A two-digit number which in combination with the Schedule Type and NPDES ID uniquely identifies a Compliance Schedule.
    string ScheduleNumber = 7;
}

message Crs1_ComplyingActions {
    // The category (i.e., Direct Environmental Reduction, Preventative, or Facility Management or Information Practice) to which a Complying Action belongs.
    string ComplyingActionCategory = 1;
    // A text description of the type of the requirements obliging the defendant/respondent to take or refrain from certain actions.
    string ComplyingActionDescription = 2;
    // The unique identifier for an enforceable requirement obliging the defendant/respondent to take or refrain from certain specified actions.
    string ComplyingActionId = 3;
    // A code that uniquely identifies the requirements obliging the defendant/respondent to take or refrain from certain actions.
    string ComplyingActionType = 4;
}

message Crs1_Defendants {
    // The name of the defendant, or respondent associated with the Enforcement Action.
    string DefendantName = 1;
    // A flag that indicates whether the Defendant or Respondent was named in the filed complaint.
    string NamedInComplaint = 2;
    // A flag that indicates whether the Defendant or Respondent was named in the Final Order.
    string NamedInSettlement = 3;
}

message Crs1_EnforcementConclusions {
    // The date on which the Final Order was terminated.
    string ActualTerminationDate = 1;
    // The total value of all SEPs for all settlements at the enforcement case.
    string ComplianceActionCost = 2;
    repeated crs1_ComplianceSchedules ComplianceSchedules = 3;
    repeated crs1_ComplyingActions ComplyingActions = 4;
    // For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.
    string CostRecovery = 5;
    // The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.
    string EnforcementActionClosedDate = 6;
    // The system-generated unique identifier of the Final Order to which the Compliance Action belongs.
    string EnforcementConclusionId = 7;
    // The name of a Final Order associated with an Enforcement Action as assigned by the Lead EPA Attorney for federal actions.
    string EnforcementConclusionName = 8;
    // A description of the enforcement instrument used by EPA to settle the case.
    string EnforcementConclusionType = 9;
    // The unique identification number assigned to a facility in the Facility Registry Service (FRS), for each facility included in the settlement.
    string FacilitiesInSettlement = 10;
    // For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
    string FederalPenalty = 11;
    repeated crs1_FinalOrderStatuses FinalOrderStatuses = 12;
    repeated crs1_PollutantReductions PollutantReductions = 13;
    // The total value of all SEPs for all settlements at the enforcement case.
    string SEPCost = 14;
    // The civil case date the Final Order is signed by the presiding Judge and entered by the Clerk of the Court; it is the date the Clerk stamps on the document.  For an Administrative Formal EA, this is the Final Order Issued Date; for a Judicial EA, this is the Final Order Entered Date.
    string SettlementEnteredDate = 15;
    // The date the settlement document is given to the Clerk of the Court for lodging in the District Court; it is the date the Clerk stamps on the document. (Federal Judicial EAs only).
    string SettlementLodgedDate = 16;
    // The dollar penalty amount to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
    string StatePenalty = 17;
    repeated crs1_SupplementalEnvironmentalProjects SupplementalEnvironmentalProjects = 18;
}

message Crs1_Facilities {
    // The identification number assigned to a facility in the�Facility Registry Service (FRS)�to uniquely identify a facility site.
    string FRSNumber = 1;
    // The address that describes the physical (geographic) location of the front door or main entrance of a Facility site, including urban-style street address or rural address.
    string FacilityAddress = 2;
    // The city in which the facility is located
    string FacilityCity = 3;
    // The name of the facility.
    string FacilityName = 4;
    // The state in which the facility is located
    string FacilityState = 5;
    // The zip code of the area in which the facility is located
    string FacilityZip = 6;
    // A 6-digit code to classify industrial establishments. For detailed information about NAICS, please refer to the U.S. Census Bureau�NAICS�webpage.
    string NAICSCodes = 7;
    // The Standard Industrial Classification codes applicable to the facility
    string SICCodes = 8;
}

message Crs1_FinalOrderStatuses {
    // The fiscal year in which the activity occurred.
    string FiscalYear = 1;
    // The relevant status for the quarter.
    string Q1StatusDescription = 2;
    // The relevant status for the quarter.
    string Q2StatusDescription = 3;
    // The relevant status for the quarter.
    string Q3StatusDescription = 4;
    // The relevant status for the quarter.
    string Q4StatusDescription = 5;
}

message Crs1_LawsAndSections {
    // Code for the primary and non-primary laws that were violated.
    string Law = 1;
    // A description of the EPA program(s) under which an enforcement action has been taken, and which correspond to the cited statutes and sections.
    string Programs = 2;
    // ???
    string Sections = 3;
}

message Crs1_PollutantReductions {
    // The amount of reduction or elimination of each pollutant or waste in pounds, kilograms, or liquid measure that resulted from the SEP or Complying Actions.
    string AnnualAmount = 1;
    // The unique identifier for an enforceable requirement obliging the defendant/respondent to take or refrain from certain specified actions.
    string ComplyingActionId = 2;
    // The system-generated unique identifier of the Environmental Impact record.
    string EnvironmentalImpactId = 3;
    // The name/description of the media where the pollutants or waste were emitted/discharged.
    string Media = 4;
    // The name that EPA has selected as its preferred name for a substance (also known as registry name). If the registry name is not available, use the systematic name instead.
    string Pollutant = 5;
    // The system-generated unique identifier of the SEP record affiliated with the Environmental Impact.
    string SEPId = 6;
    // A flag that indicates whether the quantitative environmental impact pertains to a SEP or Complying Action.
    string SEPorComp = 7;
    // A code that uniquely identifies the pollutant unit of measurement.
    string Units = 8;
}

message Crs1_Pollutants {
    // This is the unique number assigned to a chemical substance by the Chemical Abstracts Service.
    string ChemicalAbstractNumber = 1;
    // The name designating the waste material substance or chemical involved at the facility that has a Quantitative Environmental Impact addressed in the SEP or Complying Actions.
    string PollutantName = 2;
}

message Crs1_ProgramLinks {
    // The identification number assigned to a facility in the�Facility Registry Service (FRS)�to uniquely identify a facility site.
    string FRSNumber = 1;
    // The source database for the EPA programs information.
    string Program = 2;
    // Unique identifier for the EPA program.
    string ProgramID = 3;
}

message Crs1_RelatedActivities {
    // The actual date on which the event was completed/achieved.
    string ActualDate = 1;
    // A description of the category of Supplemental Environment Project (SEP) for a settlement.
    string Description = 2;
}

message Crs1_Results {
    repeated crs1_CAEDDocuments CAEDDocuments = 1;
    crs1_CaseInformation CaseInformation = 2;
    repeated crs1_CaseMilestones CaseMilestones = 3;
    repeated crs1_Citations Citations = 4;
    repeated crs1_Defendants Defendants = 5;
    repeated crs1_EnforcementConclusions EnforcementConclusions = 6;
    repeated crs1_Facilities Facilities = 7;
    repeated crs1_LawsAndSections LawsAndSections = 8;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 9;
    repeated crs1_Pollutants Pollutants = 10;
    repeated crs1_ProgramLinks ProgramLinks = 11;
    // This section provides an Activity Type description and date for other ICIS activities (e.g., inspections, or compliance assistance) that are linked to the enforcement action.
    repeated crs1_RelatedActivities RelatedActivities = 12;
}

message Crs1_SupplementalEnvironmentalProjects {
    // A code that uniquely identifies a category of Supplemental Environment Project (SEP) for a settlement (e.g., Assessments and Audits, Environmental Compliance Promotion, Emergency Planning and Preparedness, Environmental Restoration).
    string Category = 1;
    // A description of the category of Supplemental Environment Project (SEP) for a settlement.
    string Description = 2;
    // The cost applied to the type(s) of environmentally beneficial projects which a defendant/respondent agree to undertake in settlement of an enforcement action, but which the defendant/respondent is not otherwise legally required to perform.
    string SEPAmount = 3;
    // The system-generated unique identifier of the SEP record affiliated with the Environmental Impact.
    string SEPId = 4;
    // The free-form textual description used to further describe the SEP.
    string SEPText = 5;
}

message Crs2_Results {
    // Displays the number of Administrative Formal cases within the search results.
    string AFRRows = 1;
    // A summary of the violation(s), environmental problem(s), and a description of the cause of action.
    repeated crs0_Cases Cases = 2;
    // Displays the number of criminal enforcement cases within the search results.
    string CriminalRows = 3;
    // Displays the number of cases with federal penalty assessed greater than $0.
    string FedPenRows = 4;
    // Displays the number of Judicial cases within the search results.
    string JDCRows = 5;
    crs0_MapOutput MapOutput = 6;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 7;
    // The number of pages of results returned
    string PageNo = 8;
    // Sequential number assigned to entire search result
    string QueryID = 9;
    // Number of query results returned
    string QueryRows = 10;
    // Displays the number of cases with SEP amount greater than $0.
    string SEPRows = 11;
}

message Crs3_CRDefendants {
    // The role of each defendant in the criminal enforcement case, either Principal Defendant or Defendant. Multiple defendants (up to fourteen) may be associated with one case, but only one is designated as principal.
    string DefendantType = 1;
    // The United States district courts are the trial courts of the federal court system.
    string District = 2;
    // The number the Clerk of the Court assigned to the case that is filed or to a consent decree when it is lodged. For administrative cases, this number is assigned to the case by the Regional Hearing Clerk.
    string DocketNumber = 3;
    // The name of the case assigned to the enforcement action by the lead attorney. Generally, the primary defendant's name is used as the case name. For civil CERCLA cases, the facility/site name may be used.
    string Name = 4;
    // The two letter abbreviation that represents the state or state equivalent for the U.S.
    string State = 5;
}

message Crs3_CRDetails {
    // The corresponding regulation in the Code of Federal Regulations (CFR) or U.S. Code (U.S.C.) associated with the enforcement action case detail.
    string DetailCitations = 1;
    // The date associated with an enforcement action case detail.
    string DetailDate = 2;
    // The description of an enforcement action case detail.
    string DetailDesc = 3;
}

message Crs3_CaseInformation {
    // A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, "HQ" (headquarters initiated cases), and "EF" or "WF" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated.
    string CaseIdentifier = 1;
    // The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.
    string CaseSummary = 2;
    // The corresponding regulation in the Code of Federal Regulations (CFR) or U.S. Code (U.S.C.) associated with the enforcement action.
    string Citations = 3;
    // The fiscal year in which the activity occurred.
    string FiscalYear = 4;
    // ???
    string Statutes = 5;
}

message Crs3_Locations {
    // The name of the city, town, village or other locality, when identifiable, within whose boundaries (the majority of) the facility site is located. This is not always the same as the city used for USPS mail delivery.
    string City = 1;
    // The name of the county, when identifiable, within whose boundaries (the majority of) the criminal activity was located. The county was derived in ECHO based on the latitude and longitude provided in the Summary of Criminal Prosecutions database.
    string County = 2;
    // The EPA region in which the facility is located
    string EPARegion = 3;
    // The latitude of the facility or permit holder as maintained in each data system.
    string Latitude = 4;
    // The longitude of the facility or permit holder as maintained in each data system
    string Longitude = 5;
    // The two letter abbreviation that represents the state or state equivalent for the U.S.
    string State = 6;
    // US postal ZIP code, as maintained by ICIS.
    string Zip = 7;
}

message Crs3_Results {
    crs3_CaseInformation CRCaseInformation = 1;
    repeated crs3_CRDefendants CRDefendants = 2;
    repeated crs3_CRDetails CRDetails = 3;
    repeated crs3_Locations Locations = 4;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 5;
}

message Crs5_Results {
    // A summary of the violation(s), environmental problem(s), and a description of the cause of action.
    repeated crs0_Cases Cases = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
    // The number of pages of results returned
    string PageNo = 3;
    // Sequential number assigned to entire search result
    string QueryID = 4;
    // Number of query results returned
    string QueryRows = 5;
}

enum Descending {
    Y = 0;
    N = 1;
}

enum Maplist {
    Y = 0;
    N = 1;
}

message Met_Results {
    // Field to record messages (typically performance-related) about packet processing
    string Message = 1;
    repeated met_ResultsColumns ResultColumns = 2;
}

message Met_ResultsColumns {
    string ColumnID = 1;
    string ColumnName = 2;
    // Data length for EPA program database column.
    string DataLength = 3;
    // Data type for EPA program database column.
    string DataType = 4;
    // A description of the category of Supplemental Environment Project (SEP) for a settlement.
    string Description = 5;
    string ObjectName = 6;
}

enum P_case_lead {
    E = 0;
    S = 1;
}

enum P_civil_criminal_indicator {
    CI = 0;
    CR = 1;
    ALL = 2;
}

enum P_comp_act_val {
    ANY = 0;
    LE5000 = 1;
    GT5000 = 2;
    GT100000 = 3;
    GT1000000 = 4;
    GT50000000 = 5;
}

enum P_fed_case {
    Y = 0;
    N = 1;
}

enum P_fed_penalty {
    ANY = 0;
    LE5000 = 1;
    GT5000 = 2;
    GT50000 = 3;
    GT100000 = 4;
    GT500000 = 5;
    GT1000000 = 6;
    GT2500000 = 7;
}

enum P_fntype {
    ALL = 0;
    CONTAINS = 1;
    EXACT = 2;
    BEGINS = 3;
}

enum P_multimedia {
    Y = 0;
    N = 1;
}

enum P_naics_frs_flg {
    Y = 0;
    N = 1;
}

enum P_naics_primary_flg {
    Y = 0;
    N = 1;
}

enum P_oeca_core {
    Y = 0;
    N = 1;
}

enum P_rank_order {
    P_RANK_ORDER_1 = 0;
    P_RANK_ORDER_0 = 1;
}

enum P_region {
    P_REGION_01 = 0;
    P_REGION_02 = 1;
    P_REGION_03 = 2;
    P_REGION_04 = 3;
    P_REGION_05 = 4;
    P_REGION_06 = 5;
    P_REGION_07 = 6;
    P_REGION_08 = 7;
    P_REGION_09 = 8;
    P_REGION_10 = 9;
}

enum P_sep_val {
    ANY = 0;
    LE10000 = 1;
    GT10000 = 2;
    GT50000 = 3;
    GT100000 = 4;
    GT500000 = 5;
    GT1000000 = 6;
}

enum P_sic_ao_naic {
    AND = 0;
    OR = 1;
}

enum P_sic_frs_flg {
    Y = 0;
    N = 1;
}

enum P_sic_primary_flg {
    Y = 0;
    N = 1;
}

enum P_tribal {
    Y = 0;
    N = 1;
}

enum P_usmex {
    Y = 0;
    N = 1;
}

message Rlk00_LuValues {
    string ValueCode = 1;
    string ValueDescription = 2;
}

message Rlk51_Results {
    repeated rlk00_LuValues LuValues = 1;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 2;
}

enum Tablelist {
    Y = 0;
    N = 1;
}

service U.S.EPAEnforcementAndComplianceHistoryOnline(ECHO)-EnforcementCaseSearchService {
    // Enforcement Case Summary Report Search
    // 
    // The get_case_report service endpoint returns a complex object of civil enforcement case details based on the provided case id.
    rpc GetCase_rest_servicesGet_case_report(GetCase_rest_servicesGet_case_reportRequest) returns (GetCase_rest_servicesGet_case_reportResponse) {
      option (google.api.http) = {
        get: "/echo/case_rest_services.get_case_report"
      };
    }
    // Enforcement Case Summary Report Search
    // 
    // The get_case_report service endpoint returns a complex object of civil enforcement case details based on the provided case id.
    rpc PostCase_rest_servicesGet_case_report(PostCase_rest_servicesGet_case_reportRequest) returns (PostCase_rest_servicesGet_case_reportResponse) {
      option (google.api.http) = {
        post: "/echo/case_rest_services.get_case_report"
      };
    }
    // Enforcement Case Search
    // 
    // The get_cases service end point searches for civil enforcement and criminal cases based on the provided selection criteria.
    rpc GetCase_rest_servicesGet_cases(GetCase_rest_servicesGet_casesRequest) returns (GetCase_rest_servicesGet_casesResponse) {
      option (google.api.http) = {
        get: "/echo/case_rest_services.get_cases"
      };
    }
    // Enforcement Case Search
    // 
    // The get_cases service end point searches for civil enforcement and criminal cases based on the provided selection criteria.
    rpc PostCase_rest_servicesGet_cases(PostCase_rest_servicesGet_casesRequest) returns (PostCase_rest_servicesGet_casesResponse) {
      option (google.api.http) = {
        post: "/echo/case_rest_services.get_cases"
      };
    }
    // Enforcement Criminal Case Summary Report Search
    // 
    // The get_crcase_report service end point returns a complex object of criminal case detials based on the provided criminal case id.
    rpc GetCase_rest_servicesGet_crcase_report(GetCase_rest_servicesGet_crcase_reportRequest) returns (GetCase_rest_servicesGet_crcase_reportResponse) {
      option (google.api.http) = {
        get: "/echo/case_rest_services.get_crcase_report"
      };
    }
    // Enforcement Criminal Case Summary Report Search
    // 
    // The get_crcase_report service end point returns a complex object of criminal case detials based on the provided criminal case id.
    rpc PostCase_rest_servicesGet_crcase_report(PostCase_rest_servicesGet_crcase_reportRequest) returns (PostCase_rest_servicesGet_crcase_reportResponse) {
      option (google.api.http) = {
        post: "/echo/case_rest_services.get_crcase_report"
      };
    }
    // Enforcement Case Download Data Service
    // 
    // Based on the QID obtained from a get_cases query, return a comma separated value (CSV) file of the cases found.
    rpc GetCase_rest_servicesGet_download(GetCase_rest_servicesGet_downloadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/echo/case_rest_services.get_download"
      };
    }
    // Enforcement Case Download Data Service
    // 
    // Based on the QID obtained from a get_cases query, return a comma separated value (CSV) file of the cases found.
    rpc PostCase_rest_servicesGet_download(PostCase_rest_servicesGet_downloadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/echo/case_rest_services.get_download"
      };
    }
    // Enforcement Case Map Service
    // 
    // The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_cases query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
    rpc GetCase_rest_servicesGet_map(GetCase_rest_servicesGet_mapRequest) returns (GetCase_rest_servicesGet_mapResponse) {
      option (google.api.http) = {
        get: "/echo/case_rest_services.get_map"
      };
    }
    // Enforcement Case Map Service
    // 
    // The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_cases query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
    rpc PostCase_rest_servicesGet_map(PostCase_rest_servicesGet_mapRequest) returns (PostCase_rest_servicesGet_mapResponse) {
      option (google.api.http) = {
        post: "/echo/case_rest_services.get_map"
      };
    }
    // Enforcement Case Paginated Results Service
    // 
    // GET_QID is passed with a query ID corresponding to a previously run get_cases query. It then returns a CASES object containing all matching cases. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns.
    rpc GetCase_rest_servicesGet_qid(GetCase_rest_servicesGet_qidRequest) returns (GetCase_rest_servicesGet_qidResponse) {
      option (google.api.http) = {
        get: "/echo/case_rest_services.get_qid"
      };
    }
    // Enforcement Case Paginated Results Service
    // 
    // GET_QID is passed with a query ID corresponding to a previously run get_cases query. It then returns a CASES object containing all matching cases. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns.
    rpc PostCase_rest_servicesGet_qid(PostCase_rest_servicesGet_qidRequest) returns (PostCase_rest_servicesGet_qidResponse) {
      option (google.api.http) = {
        post: "/echo/case_rest_services.get_qid"
      };
    }
    // Enforcement Case Metadata Service
    // 
    // Returns the JSON Object Name and ColumnId for usage with the qcolumns parameter for get_cases endpoint.
    rpc GetCase_rest_servicesMetadata(GetCase_rest_servicesMetadataRequest) returns (GetCase_rest_servicesMetadataResponse) {
      option (google.api.http) = {
        get: "/echo/case_rest_services.metadata"
      };
    }
    // Enforcement Case Metadata Service
    // 
    // Returns the JSON Object Name and ColumnId for usage with the qcolumns parameter for get_cases endpoint.
    rpc PostCase_rest_servicesMetadata(PostCase_rest_servicesMetadataRequest) returns (PostCase_rest_servicesMetadataResponse) {
      option (google.api.http) = {
        post: "/echo/case_rest_services.metadata"
      };
    }
    // ECHO ICIS Law Sections Lookup Service
    // 
    // Returns the ICIS Law Section Descriptions.
    rpc GetRest_lookupsIcis_law_sections(GetRest_lookupsIcis_law_sectionsRequest) returns (GetRest_lookupsIcis_law_sectionsResponse) {
      option (google.api.http) = {
        get: "/echo/rest_lookups.icis_law_sections"
      };
    }
    // ECHO ICIS Law Sections Lookup Service
    // 
    // Returns the ICIS Law Section Descriptions.
    rpc PostRest_lookupsIcis_law_sections(PostRest_lookupsIcis_law_sectionsRequest) returns (PostRest_lookupsIcis_law_sectionsResponse) {
      option (google.api.http) = {
        post: "/echo/rest_lookups.icis_law_sections"
      };
    }
}

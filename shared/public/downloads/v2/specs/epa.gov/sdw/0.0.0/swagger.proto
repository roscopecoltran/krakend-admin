syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package u.s.epaenforcementandcompliancehistoryonline(echo)-safedrinkingwateract;

message GetSdw_rest_servicesGet_downloadRequest {
    // Output Format Flag.  Enter one of the following keywords:
    // - CSV = Facility results formatted as comma delimited file download (default).
    string output = 1;
    string qcolumns = 2;
    string qid = 3;
}

message PostSdw_rest_servicesGet_downloadRequest {
    // Output Format Flag.  Enter one of the following keywords:
    // - CSV = Facility results formatted as comma delimited file download (default).
    string output = 1;
    string qcolumns = 2;
    string qid = 3;
}

message GetSdw_rest_servicesGet_qidRequest {
    string callback = 1;
    descending descending = 2;
    number newsort = 3;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetSdw_rest_servicesGet_qidRequest_Output {
        GETSDW_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSONP = 0;
        GETSDW_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSON = 1;
        GETSDW_REST_SERVICESGET_QIDREQUEST_OUTPUT_XML = 2;
    }
    GetSdw_rest_servicesGet_qidRequest_Output output = 4;
    number pageno = 5;
    string qid = 6;
}

message GetSdw_rest_servicesGet_qidResponse {
    sdw2_Results Results = 1;
}

message PostSdw_rest_servicesGet_qidRequest {
    string callback = 1;
    descending descending = 2;
    number newsort = 3;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostSdw_rest_servicesGet_qidRequest_Output {
        POSTSDW_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSONP = 0;
        POSTSDW_REST_SERVICESGET_QIDREQUEST_OUTPUT_JSON = 1;
        POSTSDW_REST_SERVICESGET_QIDREQUEST_OUTPUT_XML = 2;
    }
    PostSdw_rest_servicesGet_qidRequest_Output output = 4;
    number pageno = 5;
    string qid = 6;
}

message PostSdw_rest_servicesGet_qidResponse {
    sdw2_Results Results = 1;
}

message GetSdw_rest_servicesGet_systemsRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetSdw_rest_servicesGet_systemsRequest_Output {
        GETSDW_REST_SERVICESGET_SYSTEMSREQUEST_OUTPUT_JSONP = 0;
        GETSDW_REST_SERVICESGET_SYSTEMSREQUEST_OUTPUT_JSON = 1;
        GETSDW_REST_SERVICESGET_SYSTEMSREQUEST_OUTPUT_XML = 2;
    }
    GetSdw_rest_servicesGet_systemsRequest_Output output = 2;
    p_act p_act = 3;
    string p_co = 4;
    string p_cs = 5;
    string p_ct = 6;
    string p_cuale = 7;
    string p_cuv = 8;
    p_fea p_fea = 9;
    p_feaa p_feaa = 10;
    number p_feay = 11;
    string p_fips = 12;
    string p_fn = 13;
    p_health p_health = 14;
    p_ico p_ico = 15;
    p_iea p_iea = 16;
    p_ieaa p_ieaa = 17;
    number p_ieay = 18;
    string p_lcrv = 19;
    p_mr p_mr = 20;
    p_other p_other = 21;
    p_owop p_owop = 22;
    string p_pbale = 23;
    string p_pbv = 24;
    string p_pfead1 = 25;
    string p_pfead2 = 26;
    string p_pfeat = 27;
    string p_pid = 28;
    p_pn p_pn = 29;
    string p_popsv = 30;
    string p_pswpol = 31;
    p_pswvio p_pswvio = 32;
    p_qis p_qis = 33;
    p_qiv p_qiv = 34;
    string p_qs = 35;
    string p_rc350v = 36;
    p_reg p_reg = 37;
    string p_sfs = 38;
    string p_st = 39;
    p_sv p_sv = 40;
    p_swtyp p_swtyp = 41;
    p_systyp p_systyp = 42;
    string p_trb = 43;
    string p_zip = 44;
    number queryset = 45;
    number responseset = 46;
}

message GetSdw_rest_servicesGet_systemsResponse {
    sdw3_Results Results = 1;
}

message PostSdw_rest_servicesGet_systemsRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostSdw_rest_servicesGet_systemsRequest_Output {
        POSTSDW_REST_SERVICESGET_SYSTEMSREQUEST_OUTPUT_JSONP = 0;
        POSTSDW_REST_SERVICESGET_SYSTEMSREQUEST_OUTPUT_JSON = 1;
        POSTSDW_REST_SERVICESGET_SYSTEMSREQUEST_OUTPUT_XML = 2;
    }
    PostSdw_rest_servicesGet_systemsRequest_Output output = 2;
    p_act p_act = 3;
    string p_co = 4;
    string p_cs = 5;
    string p_ct = 6;
    string p_cuale = 7;
    string p_cuv = 8;
    p_fea p_fea = 9;
    p_feaa p_feaa = 10;
    number p_feay = 11;
    string p_fips = 12;
    string p_fn = 13;
    p_health p_health = 14;
    p_ico p_ico = 15;
    p_iea p_iea = 16;
    p_ieaa p_ieaa = 17;
    number p_ieay = 18;
    string p_lcrv = 19;
    p_mr p_mr = 20;
    p_other p_other = 21;
    p_owop p_owop = 22;
    string p_pbale = 23;
    string p_pbv = 24;
    string p_pfead1 = 25;
    string p_pfead2 = 26;
    string p_pfeat = 27;
    string p_pid = 28;
    p_pn p_pn = 29;
    string p_popsv = 30;
    string p_pswpol = 31;
    p_pswvio p_pswvio = 32;
    p_qis p_qis = 33;
    p_qiv p_qiv = 34;
    string p_qs = 35;
    string p_rc350v = 36;
    p_reg p_reg = 37;
    string p_sfs = 38;
    string p_st = 39;
    p_sv p_sv = 40;
    p_swtyp p_swtyp = 41;
    p_systyp p_systyp = 42;
    string p_trb = 43;
    string p_zip = 44;
    number queryset = 45;
    number responseset = 46;
}

message PostSdw_rest_servicesGet_systemsResponse {
    sdw3_Results Results = 1;
}

message GetSdw_rest_servicesMetadataRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum GetSdw_rest_servicesMetadataRequest_Output {
        GETSDW_REST_SERVICESMETADATAREQUEST_OUTPUT_JSONP = 0;
        GETSDW_REST_SERVICESMETADATAREQUEST_OUTPUT_JSON = 1;
        GETSDW_REST_SERVICESMETADATAREQUEST_OUTPUT_XML = 2;
    }
    GetSdw_rest_servicesMetadataRequest_Output output = 2;
}

message GetSdw_rest_servicesMetadataResponse {
    met_Results Results = 1;
}

message PostSdw_rest_servicesMetadataRequest {
    string callback = 1;
    // Output Format Flag.  Enter one of the following keywords:
    // - JSON = Data model formatted as Javascript Object Notation (default).
    // - JSONP = Data model formatted as Javascript Object Notation with Padding.  
    // - XML = Data model formatted as Extensible Markup Language.
    enum PostSdw_rest_servicesMetadataRequest_Output {
        POSTSDW_REST_SERVICESMETADATAREQUEST_OUTPUT_JSONP = 0;
        POSTSDW_REST_SERVICESMETADATAREQUEST_OUTPUT_JSON = 1;
        POSTSDW_REST_SERVICESMETADATAREQUEST_OUTPUT_XML = 2;
    }
    PostSdw_rest_servicesMetadataRequest_Output output = 2;
}

message PostSdw_rest_servicesMetadataResponse {
    met_Results Results = 1;
}

enum Descending {
    Y = 0;
    N = 1;
}

message Met_Results {
    // Field to record messages (typically performance-related) about packet processing
    string Message = 1;
    repeated met_ResultsColumns ResultColumns = 2;
}

message Met_ResultsColumns {
    string ColumnID = 1;
    string ColumnName = 2;
    // Data length for EPA program database column.
    string DataLength = 3;
    // Data type for EPA program database column.
    string DataType = 4;
    // A description of the category of Supplemental Environment Project (SEP) for a settlement.
    string Description = 5;
    string ObjectName = 6;
}

enum P_act {
    Y = 0;
    N = 1;
    A = 2;
}

enum P_fea {
    W = 0;
    N = 1;
}

enum P_feaa {
    A = 0;
    E = 1;
    S = 2;
}

enum P_health {
    Y = 0;
    N = 1;
}

enum P_ico {
    Y = 0;
    N = 1;
}

enum P_iea {
    W = 0;
    N = 1;
}

enum P_ieaa {
    E = 0;
    S = 1;
}

enum P_mr {
    Y = 0;
    N = 1;
}

enum P_other {
    Y = 0;
    N = 1;
}

enum P_owop {
    F = 0;
    S = 1;
    L = 2;
    M = 3;
    N = 4;
    P = 5;
}

enum P_pn {
    Y = 0;
    N = 1;
}

enum P_pswvio {
    Y = 0;
    N = 1;
}

enum P_qi {
    Z = 0;
    GE1 = 1;
    GT1 = 2;
    GE2 = 3;
    GT2 = 4;
    GE4 = 5;
    GT4 = 6;
    GE8 = 7;
    GT8 = 8;
    GE12 = 9;
    GT12 = 10;
    P_QI_12 = 11;
}

enum P_qiv {
    P_QIV_0 = 0;
    GT1 = 1;
    GT2 = 2;
    GT4 = 3;
    GT8 = 4;
    P_QIV_12 = 5;
}

enum P_reg {
    P_REG_01 = 0;
    P_REG_02 = 1;
    P_REG_03 = 2;
    P_REG_04 = 3;
    P_REG_05 = 4;
    P_REG_06 = 5;
    P_REG_07 = 6;
    P_REG_08 = 7;
    P_REG_09 = 8;
    P_REG_10 = 9;
}

enum P_sv {
    Y = 0;
    N = 1;
}

enum P_swtyp {
    SW = 0;
    GW = 1;
    GU = 2;
    SWP = 3;
    GWP = 4;
    GUP = 5;
}

enum P_systyp {
    CWS = 0;
    NCWS = 1;
    NTCWS = 2;
    TNCWS = 3;
}

message Sdw2_Results {
    // Field to record messages (typically performance-related) about packet processing
    string Message = 1;
    // The number of pages of results returned
    string PageNo = 2;
    // Sequential number assigned to entire search result
    string QueryID = 3;
    // Number of query results returned
    string QueryRows = 4;
    repeated sdw3_SDWSearchResults SDWSearchResults = 5;
}

message Sdw3_Results {
    // Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
    string CVRows = 1;
    // Summary count of the number of facilities with a formal enforcement action in the past five years
    string FEARows = 2;
    // Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
    string INSPRows = 3;
    // Number of facilities with tribal_flag populated
    string IndianCountryRows = 4;
    // Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)
    string InfFEARows = 5;
    // Field to record messages (typically performance-related) about packet processing
    string Message = 6;
    // The number of pages of results returned
    string PageNo = 7;
    // Sequential number assigned to entire search result
    string QueryID = 8;
    // Number of query results returned
    string QueryRows = 9;
    repeated sdw3_SDWSearchResults SDWSearchResults = 10;
    // Number of facilities with curr_sv_flag populated (CWP_STATUS = "Significant Violation")
    string SVRows = 11;
    // Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
    string V3Rows = 12;
    // Version of the SDWA system service
    string Version = 13;
}

message Sdw3_SDWSearchResults {
    // Activity status code:
    // - A = Active
    // - I = Inactive
    string ACT = 1;
    // Description of activity status code (ACT), e.g., active, inactive.
    string ActivityDesc = 2;
    // County
    string CT = 3;
    // City
    string CTY = 4;
    string CuALEIn5Yr = 5;
    string CuViolIn5Yr = 6;
    // Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance
    string FEA = 7;
    // Five-character Federal Information Processing Standards (FIPS) value: 2-character state || 3-character county
    string FIPS = 8;
    // Indicates whether system has violations of health-based drinking water standards
    string HealthFlag = 9;
    // Indicates whether the system is located in Indian Country
    string ICO = 10;
    // Number of informal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Informal enforcement actions do not specify actions and deadlines for returning to compliance
    string IEA = 11;
    // Indicates whether system has monitoring and reporting violations
    string MRFlag = 12;
    string NewVioFlag = 13;
    // Indicates whether system has other violations, such as failing to issue annual consumer confidence reports or maintain required records
    string OtherFlag = 14;
    // Owner/Operator:
    // - P = Private
    // - F = Federal Government
    // - S = State Government
    // - L = Local Government
    string Owner = 15;
    // Description of Owner code
    string OwnerDesc = 16;
    // Indicates whether system has Public Notice Violations (failure to immediately alert consumers of serious problem with drinking water)
    string PNFlag = 17;
    // Unique identifying code for a public water system, consisting of a two-letter state or region code, followed by seven digits
    string PWSId = 18;
    string PbALEIn5Yr = 19;
    string PbCuViolIn5Yr = 20;
    string PbViolIn5Yr = 21;
    // Estimated average daily population served by a system
    string PopulationServed = 22;
    // Number of quarters the system was in violation over the past three years (12 most recent quarters)
    string QNC = 23;
    string QuartersInSNC = 24;
    string RC350ViolIn5Yr = 25;
    // EPA Region number where the system is located. Values range from 01 to 10.
    string REG = 26;
    string RulesVio3YrCnt = 27;
    string RulesVioCurrCnt = 28;
    // Quarterly compliance status for the most recent 12 quarters. Each letter indicates the compliance status for the corresponding quarter
    string SDW3yrComplianceQtrsStatus = 29;
    string SDWContaminantsInCurViol = 30;
    // The contaminant name and code in violation of a SDWA regulation in the past three years
    string SDWContaminantsInViol3Yr = 31;
    string SDWDateLastFEA = 32;
    string SDWDateLastFEAEPA = 33;
    string SDWDateLastFEAState = 34;
    string SDWDateLastIEA = 35;
    string SDWDateLastIEAEPA = 36;
    string SDWDateLastIEAState = 37;
    // Current compliance status
    string SSNC = 38;
    // Two-letter state abbreviation
    string ST = 39;
    string SearchedContaminantsLastValues = 40;
    // Indicates whether system is a Serious Violator (has unresolved serious, multiple, and/or continuing violations that is designated as a priority candidate for formal enforcement)
    string SeriousViolator = 41;
    // Description of SourceWaterType code
    string SourceWaterDesc = 42;
    // Source Water Type:
    // - SW = Surface water
    // - GW = Ground water
    // - GU = Ground water under direct influence of (UDI) surface water
    // - SWP = Purchased Surface water
    // - GWP = Purchased Ground water
    // - GUP = Purchased Ground water UDI surface water
    string SourceWaterType = 43;
    // Name of the system regulated under the Safe Drinking Water Act (SDWA)
    string SystemName = 44;
    // Type of public water system:
    // - CWS   = Community water system
    // - NCWS  = Non-community water system
    // - NTCWS = Non-transient non-community water system
    // - TNCWS = Transient non-community water system
    string SystemType = 45;
    // The type of public water system (PWS) and description of corresponding SystemType code. A public water system is a system for the provision to the public of piped water for human consumption, which has at least 15 service connections or regularly serves a
    string SystemTypeDesc = 46;
    repeated sdw3_Tribes Tribes = 47;
    // Sum of all violation points for violations reported during the past five years (20 most recent quarters), as of the last quarterly refresh
    string VioPointsAccrued = 48;
    // Sum of violation points accrued during past five years (20 most recent quarters) that are under formal enforcement but not yet returned to compliance, as of the last quarterly refresh
    string VioPointsFEANotCorrected = 49;
    // Sum of violation points during past 5 years (20 most recent quarters) that received formal enforcement and returned to compliance, as of the last quarterly refresh
    string VioPointsRTCwFEA = 50;
    // Sum of violation points during past 5 years (20 most recent quarters) that did not receive formal enforcement but did return to compliance, as of the last quarterly refresh
    string VioPointsRTCwoFEA = 51;
    // Sum of violation points that were not returned to compliance as of the last quarterly refresh.  Includes points that have received formal enforcement but have not returned to compliance
    string VioPointsRemaining = 52;
    // ZIP code
    string ZIP = 53;
}

message Sdw3_Tribes {
    // Tribe code
    string TribalCode = 1;
    // Tribe Name
    string TribalName = 2;
}

service U.S.EPAEnforcementAndComplianceHistoryOnline(ECHO)-SafeDrinkingWaterActService {
    // Safe Drinking Water Act (SDWA) Download Data Service
    // 
    // Based on the QID obtained from a get_systems query, return a comma separated value (CSV) file of the water systems found.
    rpc GetSdw_rest_servicesGet_download(GetSdw_rest_servicesGet_downloadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/echo/sdw_rest_services.get_download"
      };
    }
    // Safe Drinking Water Act (SDWA) Download Data Service
    // 
    // Based on the QID obtained from a get_systems query, return a comma separated value (CSV) file of the water systems found.
    rpc PostSdw_rest_servicesGet_download(PostSdw_rest_servicesGet_downloadRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/echo/sdw_rest_services.get_download"
      };
    }
    // Safe Drinking Water Act (SDWA) Paginated Results Service
    // 
    // GET_QID is passed with a query ID corresponding to a previously run get_systems query. It then returns a Systems object containing all matching water systems. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns.
    rpc GetSdw_rest_servicesGet_qid(GetSdw_rest_servicesGet_qidRequest) returns (GetSdw_rest_servicesGet_qidResponse) {
      option (google.api.http) = {
        get: "/echo/sdw_rest_services.get_qid"
      };
    }
    // Safe Drinking Water Act (SDWA) Paginated Results Service
    // 
    // GET_QID is passed with a query ID corresponding to a previously run get_systems query. It then returns a Systems object containing all matching water systems. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns.
    rpc PostSdw_rest_servicesGet_qid(PostSdw_rest_servicesGet_qidRequest) returns (PostSdw_rest_servicesGet_qidResponse) {
      option (google.api.http) = {
        post: "/echo/sdw_rest_services.get_qid"
      };
    }
    // Safe Drinking Water Act (SDWA) Systems Search Service
    // 
    // Returns an array of public water systems that meet the specified search criteria.
    rpc GetSdw_rest_servicesGet_systems(GetSdw_rest_servicesGet_systemsRequest) returns (GetSdw_rest_servicesGet_systemsResponse) {
      option (google.api.http) = {
        get: "/echo/sdw_rest_services.get_systems"
      };
    }
    // Safe Drinking Water Act (SDWA) Systems Search Service
    // 
    // Returns an array of public water systems that meet the specified search criteria.
    rpc PostSdw_rest_servicesGet_systems(PostSdw_rest_servicesGet_systemsRequest) returns (PostSdw_rest_servicesGet_systemsResponse) {
      option (google.api.http) = {
        post: "/echo/sdw_rest_services.get_systems"
      };
    }
    // Safe Drinking Water Act (SDWA) Metadata Service
    // 
    // Returns the JSON Object Name and ColumnId for usage with the qcolumns parameter for get_systems endpoint.
    rpc GetSdw_rest_servicesMetadata(GetSdw_rest_servicesMetadataRequest) returns (GetSdw_rest_servicesMetadataResponse) {
      option (google.api.http) = {
        get: "/echo/sdw_rest_services.metadata"
      };
    }
    // Safe Drinking Water Act (SDWA) Metadata Service
    // 
    // Returns the JSON Object Name and ColumnId for usage with the qcolumns parameter for get_systems endpoint.
    rpc PostSdw_rest_servicesMetadata(PostSdw_rest_servicesMetadataRequest) returns (PostSdw_rest_servicesMetadataResponse) {
      option (google.api.http) = {
        post: "/echo/sdw_rest_services.metadata"
      };
    }
}

syntax = "proto3";

import "google/protobuf/wrappers.proto";

import "google/protobuf/struct.proto";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package community;

message GetUserContentByDateRequest {
    string date = 1;
}

message GetUserContentByDateResponse {
    string copyright = 1;
    message Debug {
        int32 version = 1;
    }
    Debug debug = 2;
    message Results {
        string api_timestamp = 1;
        message Comment {
            string approveDate = 1;
            int32 assetID = 2;
            string assetURL = 3;
            string commentBody = 4;
            int32 commentID = 5;
            int32 commentSequence = 6;
            string commentTitle = 7;
            string commentType = 8;
            string createDate = 9;
            int32 editorsSelection = 10;
            int32 lft = 11;
            google.protobuf.NullValue parentID = 12;
            int32 recommendationCount = 13;
            message Replie {
            }
            repeated Replie replies = 14;
            int32 replyCount = 15;
            int32 rgt = 16;
            string status = 17;
            int32 statusID = 18;
            string updateDate = 19;
            string userDisplayName = 20;
            int32 userID = 21;
            string userLocation = 22;
            string userTitle = 23;
            int32 userURL = 24;
        }
        repeated Comment comments = 2;
        int32 totalCommentsFound = 3;
        int32 totalCommentsReturned = 4;
    }
    Results results = 3;
    string status = 4;
}

message GetUserContentRecentResponse {
    string copyright = 1;
    message Debug {
        int32 version = 1;
    }
    Debug debug = 2;
    message Results {
        string api_timestamp = 1;
        message Comment {
            string approveDate = 1;
            message Asset {
                message All_propertie {
                    string description = 1;
                    string name = 2;
                    message Propertie {
                    }
                    repeated Propertie properties = 3;
                }
                repeated All_propertie all_properties = 1;
                int32 assetID = 2;
                string assetTitle = 3;
                string assetURL = 4;
                string createDate = 5;
                message Label {
                }
                repeated Label labels = 6;
                message Properties {
                    message Automoderation_on {
                        int32 groupID = 1;
                        int32 taxonomyID = 2;
                    }
                    Automoderation_on automoderation_on = 1;
                    message Comment_list_sort_editors {
                        int32 groupID = 1;
                        int32 taxonomyID = 2;
                    }
                    Comment_list_sort_editors comment_list_sort_editors = 2;
                    message Reached_max_com_off {
                        int32 groupID = 1;
                        int32 taxonomyID = 2;
                    }
                    Reached_max_com_off reached_max_com_off = 3;
                }
                Properties properties = 7;
                string source = 8;
                string taxonomy = 9;
                message Text {
                }
                repeated Text text = 10;
                string updateDate = 11;
                string vendorID = 12;
            }
            Asset asset = 2;
            int32 assetID = 3;
            string commentBody = 4;
            int32 commentID = 5;
            int32 commentSequence = 6;
            string commentTitle = 7;
            string commentType = 8;
            string createDate = 9;
            string display_name = 10;
            int32 editorsSelection = 11;
            string location = 12;
            google.protobuf.NullValue parentID = 13;
            int32 recommendationCount = 14;
            message Replie {
            }
            repeated Replie replies = 15;
            string status = 16;
            int32 statusID = 17;
            string updateDate = 18;
            string userDisplayName = 19;
            int32 userID = 20;
            string userLocation = 21;
            string userTitle = 22;
            string userURL = 23;
        }
        repeated Comment comments = 2;
        int32 totalCommentsReturned = 3;
    }
    Results results = 3;
    string status = 4;
}

message GetUserContentUrlRequest {
    string url = 1;
}

message GetUserContentUrlResponse {
    string copyright = 1;
    message Debug {
        int32 version = 1;
    }
    Debug debug = 2;
    message Results {
        string api_timestamp = 1;
        google.protobuf.NullValue callerID = 2;
        message Comment {
            string approveDate = 1;
            string commentBody = 2;
            int32 commentID = 3;
            int32 commentSequence = 4;
            string commentTitle = 5;
            string commentType = 6;
            string createDate = 7;
            int32 depth = 8;
            bool editorsSelection = 9;
            google.protobuf.NullValue parentID = 10;
            google.protobuf.NullValue parentUserDisplayName = 11;
            string permID = 12;
            string picURL = 13;
            int32 recommendations = 14;
            google.protobuf.NullValue recommendedFlag = 15;
            message Replie {
            }
            repeated Replie replies = 16;
            int32 replyCount = 17;
            google.protobuf.NullValue reportAbuseFlag = 18;
            int32 sharing = 19;
            string status = 20;
            int32 timespeople = 21;
            int32 trusted = 22;
            string updateDate = 23;
            string userDisplayName = 24;
            int32 userID = 25;
            string userLocation = 26;
            google.protobuf.NullValue userTitle = 27;
            google.protobuf.NullValue userURL = 28;
        }
        repeated Comment comments = 3;
        int32 depthLimit = 4;
        google.protobuf.StringValue filter = 5;
        int32 page = 6;
        int32 replyLimit = 7;
        string sort = 8;
        int32 totalCommentsFound = 9;
        int32 totalCommentsReturned = 10;
        int32 totalEditorsSelectionFound = 11;
        int32 totalEditorsSelectionReturned = 12;
        int32 totalParentCommentsFound = 13;
        int32 totalParentCommentsReturned = 14;
        int32 totalRecommendationsFound = 15;
        int32 totalRecommendationsReturned = 16;
        int32 totalReplyCommentsFound = 17;
        int32 totalReplyCommentsReturned = 18;
        int32 totalReporterReplyCommentsFound = 19;
        int32 totalReporterReplyCommentsReturned = 20;
    }
    Results results = 3;
    string status = 4;
}

message GetUserContentUserRequest {
    int32 userID = 1;
}

message GetUserContentUserResponse {
    string copyright = 1;
    message Debug {
        int32 version = 1;
    }
    Debug debug = 2;
    message Results {
        string api_timestamp = 1;
        message Comment {
            string approveDate = 1;
            message Asset {
                message All_propertie {
                    string description = 1;
                    string name = 2;
                    message Propertie {
                    }
                    repeated Propertie properties = 3;
                }
                repeated All_propertie all_properties = 1;
                int32 assetID = 2;
                string assetTitle = 3;
                string assetURL = 4;
                string createDate = 5;
                message Label {
                    int32 labelID = 1;
                    string labelName = 2;
                }
                repeated Label labels = 6;
                message Properties {
                    message Automoderation_off {
                        int32 groupID = 1;
                        int32 taxonomyID = 2;
                    }
                    Automoderation_off automoderation_off = 1;
                    message Comment_list_sort_approvedate_desc {
                        int32 groupID = 1;
                        int32 taxonomyID = 2;
                    }
                    Comment_list_sort_approvedate_desc comment_list_sort_approvedate_desc = 2;
                    message Reached_max_com_on {
                        int32 groupID = 1;
                        int32 taxonomyID = 2;
                    }
                    Reached_max_com_on reached_max_com_on = 3;
                }
                Properties properties = 7;
                string source = 8;
                string taxonomy = 9;
                message Text {
                }
                repeated Text text = 10;
                string updateDate = 11;
                string vendorID = 12;
            }
            Asset asset = 2;
            string commentBody = 3;
            int32 commentID = 4;
            int32 commentSequence = 5;
            string commentTitle = 6;
            string commentType = 7;
            string createDate = 8;
            bool editorsSelection = 9;
            message Label {
            }
            repeated Label labels = 10;
            google.protobuf.NullValue parentID = 11;
            int32 permid = 12;
            string picURL = 13;
            int32 recommendations = 14;
            message Replie {
            }
            repeated Replie replies = 15;
            int32 replyCount = 16;
            string status = 17;
            string updateDate = 18;
            google.protobuf.NullValue userDisplayName = 19;
            int32 userID = 20;
            google.protobuf.NullValue userLocation = 21;
            string userSubmittedDisplayName = 22;
            string userSubmittedLocation = 23;
            google.protobuf.NullValue userSubmittedTitle = 24;
            google.protobuf.NullValue userSubmittedURL = 25;
            google.protobuf.NullValue userTitle = 26;
            google.protobuf.NullValue userURL = 27;
        }
        repeated Comment comments = 2;
        int32 totalCommentsFound = 3;
        int32 totalCommentsReturned = 4;
    }
    Results results = 3;
    string status = 4;
}

service CommunityService {
    // Comments by Date
    rpc GetUserContentByDate(GetUserContentByDateRequest) returns (GetUserContentByDateResponse) {
      option (google.api.http) = {
        get: "/svc/community/v3/user-content/by-date.json"
      };
    }
    // Recent User Comments
    rpc GetUserContentRecent(google.protobuf.Empty) returns (GetUserContentRecentResponse) {
      option (google.api.http) = {
        get: "/svc/community/v3/user-content/recent.json"
      };
    }
    // Comments by URL
    rpc GetUserContentUrl(GetUserContentUrlRequest) returns (GetUserContentUrlResponse) {
      option (google.api.http) = {
        get: "/svc/community/v3/user-content/url.json"
      };
    }
    // Comments by User
    rpc GetUserContentUser(GetUserContentUserRequest) returns (GetUserContentUserResponse) {
      option (google.api.http) = {
        get: "/svc/community/v3/user-content/user.json"
      };
    }
}

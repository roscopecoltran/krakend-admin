syntax = "proto3";

import "google/api/annotations.proto";

package semantic;

message GetNameConceptTypeSpecificConceptRequest {
    // The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in "concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]".
    enum GetNameConceptTypeSpecificConceptRequest_Concept_type {
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_CONCEPT_TYPE_NYTD_GEO = 0;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_CONCEPT_TYPE_NYTD_PER = 1;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_CONCEPT_TYPE_NYTD_ORG = 2;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_CONCEPT_TYPE_NYTD_DES = 3;
    }
    GetNameConceptTypeSpecificConceptRequest_Concept_type concept_type = 1;
    // "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
    // 
    // Optional fields are returned in result_set. They are briefly explained here:
    // 
    // pages: A list of topic pages associated with a specific concept.
    // ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
    // links: A list of links from this concept to external data resources.
    // taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
    // combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
    // geocodes: For geographic concepts, the full GIS record from geonames.
    // article_list: A list of up to 10 articles associated with this concept.
    // scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
    // search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
    enum GetNameConceptTypeSpecificConceptRequest_Field {
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_ALL = 0;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_PAGES = 1;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_TICKER_SYMBOL = 2;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_LINKS = 3;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_TAXONOMY = 4;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_COMBINATIONS = 5;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_GEOCODES = 6;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_ARTICLE_LIST = 7;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_SCOPE_NOTES = 8;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_SEARCH_API_QUERY = 9;
    }
    GetNameConceptTypeSpecificConceptRequest_Field fields = 2;
    // Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.
    string query = 3;
    // The name of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined in the URI path, as the element immediately preceding ".json" like with "Baseball.json".
    string specific_concept = 4;
}

message GetNameConceptTypeSpecificConceptResponse {
    string copyright = 1;
    int32 num_results = 2;
    repeated Concept results = 3;
    string status = 4;
}

message GetSearchRequest {
    // "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
    // 
    // Optional fields are returned in result_set. They are briefly explained here:
    // 
    // pages: A list of topic pages associated with a specific concept.
    // ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
    // links: A list of links from this concept to external data resources.
    // taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
    // combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
    // geocodes: For geographic concepts, the full GIS record from geonames.
    // article_list: A list of up to 10 articles associated with this concept.
    // scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
    // search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
    enum GetSearchRequest_Field {
        GETSEARCHREQUEST_FIELD_ALL = 0;
        GETSEARCHREQUEST_FIELD_PAGES = 1;
        GETSEARCHREQUEST_FIELD_TICKER_SYMBOL = 2;
        GETSEARCHREQUEST_FIELD_LINKS = 3;
        GETSEARCHREQUEST_FIELD_TAXONOMY = 4;
        GETSEARCHREQUEST_FIELD_COMBINATIONS = 5;
        GETSEARCHREQUEST_FIELD_GEOCODES = 6;
        GETSEARCHREQUEST_FIELD_ARTICLE_LIST = 7;
        GETSEARCHREQUEST_FIELD_SCOPE_NOTES = 8;
        GETSEARCHREQUEST_FIELD_SEARCH_API_QUERY = 9;
    }
    GetSearchRequest_Field fields = 1;
    // Integer value for the index count from the first concept to the last concept, sorted alphabetically. Used in a Search Query. A Search Query will return up to 10 concepts in its results.
    int32 offset = 2;
    // Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.
    string query = 3;
}

message GetSearchResponse {
    string copyright = 1;
    int32 num_results = 2;
    repeated ConceptRelation results = 3;
    string status = 4;
}

message Concept {
    repeated ConceptRelation ancestors = 1;
    message Article_list {
        message Result {
            string body = 1;
            string byline = 2;
            message Concepts {
                repeated string nytd_des = 1;
                repeated string nytd_org = 2;
                repeated string nytd_per = 3;
            }
            Concepts concepts = 3;
            string date = 4;
            string document_type = 5;
            string title = 6;
            string type_of_material = 7;
            string url = 8;
        }
        repeated Result results = 1;
        int32 total = 2;
    }
    Article_list article_list = 2;
    message Combination {
        string combination_note = 1;
        int32 combination_source_concept_id = 2;
        string combination_source_concept_name = 3;
        string combination_source_concept_type = 4;
        int32 combination_target_concept_id = 5;
        string combination_target_concept_name = 6;
        string combination_target_concept_type = 7;
    }
    repeated Combination combinations = 3;
    string concept_created = 4;
    int32 concept_id = 5;
    string concept_name = 6;
    string concept_status = 7;
    string concept_type = 8;
    string concept_updated = 9;
    repeated ConceptRelation descendants = 10;
    int32 is_times_tag = 11;
    message Link {
        int32 concept_id = 1;
        string concept_name = 2;
        string concept_status = 3;
        string concept_type = 4;
        int32 is_times_tag = 5;
        string link = 6;
        int32 link_id = 7;
        string link_type = 8;
        string mapping_type = 9;
        string relation = 10;
    }
    repeated Link links = 12;
    message Scope_note {
        string scope_note = 1;
        string scope_note_name = 2;
        string scope_note_type = 3;
    }
    repeated Scope_note scope_notes = 13;
    string search_api_query = 14;
    message Taxonomy {
        int32 source_concept_id = 1;
        string source_concept_name = 2;
        string source_concept_type = 3;
        string source_concept_vernacular = 4;
        int32 target_concept_id = 5;
        string target_concept_name = 6;
        string target_concept_type = 7;
        string target_concept_vernacular = 8;
        string taxonomic_relation = 9;
        string taxonomic_verification_status = 10;
    }
    repeated Taxonomy taxonomy = 15;
    string vernacular = 16;
}

message ConceptRelation {
    string concept_created = 1;
    int32 concept_id = 2;
    string concept_name = 3;
    string concept_status = 4;
    string concept_type = 5;
    string concept_updated = 6;
    int32 is_times_tag = 7;
    string vernacular = 8;
}

service SemanticService {
    rpc GetNameConceptTypeSpecificConcept(GetNameConceptTypeSpecificConceptRequest) returns (GetNameConceptTypeSpecificConceptResponse) {
      option (google.api.http) = {
        get: "/svc/semantic/v2/concept/name/{concept-type}/{specific-concept}.json"
      };
    }
    rpc GetSearch(GetSearchRequest) returns (GetSearchResponse) {
      option (google.api.http) = {
        get: "/svc/semantic/v2/concept/search.json"
      };
    }
}

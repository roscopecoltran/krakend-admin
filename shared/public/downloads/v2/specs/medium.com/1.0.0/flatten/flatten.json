{
	"basePath": "/v1",
	"definitions.Contibutor.description": "Contibutor",
	"definitions.Contibutor.properties.publicationId.description": "An ID for the publication. This can be lifted from response of publications above",
	"definitions.Contibutor.properties.publicationId.type": "string",
	"definitions.Contibutor.properties.role.description": "Role of the user identified by userId in the publication identified by `publicationId`. *editor* or *writer*",
	"definitions.Contibutor.properties.role.type": "string",
	"definitions.Contibutor.properties.userId.description": "A user ID of the contributor.",
	"definitions.Contibutor.properties.userId.type": "string",
	"definitions.Contibutor.title": "Contributor",
	"definitions.Contibutor.type": "object",
	"definitions.ContibutorResponse.description": "list of contributors for a given publication",
	"definitions.ContibutorResponse.example.data.length": 5,
	"definitions.ContibutorResponse.example.data[0].publicationId": "b45573563f5a",
	"definitions.ContibutorResponse.example.data[0].role": "editor",
	"definitions.ContibutorResponse.example.data[0].userId": "13a06af8f81849c64dafbce822cbafbfab7ed7cecf82135bca946807ea351290d",
	"definitions.ContibutorResponse.example.data[1].publicationId": "b45573563f5a",
	"definitions.ContibutorResponse.example.data[1].role": "editor",
	"definitions.ContibutorResponse.example.data[1].userId": "1c9c63b15b874d3e354340b7d7458d55e1dda0f6470074df1cc99608a372866ac",
	"definitions.ContibutorResponse.example.data[2].publicationId": "b45573563f5a",
	"definitions.ContibutorResponse.example.data[2].role": "editor",
	"definitions.ContibutorResponse.example.data[2].userId": "1cc07499453463518b77d31650c0b53609dc973ad8ebd33690c7be9236e9384ad",
	"definitions.ContibutorResponse.example.data[3].publicationId": "b45573563f5a",
	"definitions.ContibutorResponse.example.data[3].role": "writer",
	"definitions.ContibutorResponse.example.data[3].userId": "196f70942410555f4b3030debc4f199a0d5a0309a7b9df96c57b8ec6e4b5f11d7",
	"definitions.ContibutorResponse.example.data[4].publicationId": "b45573563f5a",
	"definitions.ContibutorResponse.example.data[4].role": "writer",
	"definitions.ContibutorResponse.example.data[4].userId": "14d4a581f21ff537d245461b8ff2ae9b271b57d9554e25d863e3df6ef03ddd480",
	"definitions.ContibutorResponse.properties.data.items.$ref": "#/definitions/Contibutor",
	"definitions.ContibutorResponse.properties.data.type": "array",
	"definitions.ContibutorResponse.title": "Contributors list for a publication",
	"definitions.Post.example.canonicalUrl": "http://jamietalbot.com/posts/liverpool-fc",
	"definitions.Post.example.content": "\u003ch1\u003eLiverpool FC\u003c/h1\u003e\u003cp\u003eYou’ll never walk alone.\u003c/p\u003e",
	"definitions.Post.example.contentFormat": "html",
	"definitions.Post.example.publishStatus": "public",
	"definitions.Post.example.tags.length": 3,
	"definitions.Post.example.tags[0]": "football",
	"definitions.Post.example.tags[1]": "sport",
	"definitions.Post.example.tags[2]": "Liverpool",
	"definitions.Post.example.title": "Liverpool FC",
	"definitions.Post.properties.canonicalUrl.description": "The original home of this content, if it was originally published elsewhere.",
	"definitions.Post.properties.canonicalUrl.type": "string",
	"definitions.Post.properties.content.description": "The body of the post, in a valid, semantic, HTML fragment, or Markdown. Further markups may be supported in the future. For a full list of accepted HTML tags, see here. If you want your title to appear on the post page, you must also include it as part of the post content.",
	"definitions.Post.properties.content.type": "string",
	"definitions.Post.properties.contentFormat.description": "The format of the \"content\" field. There are two valid values, \"html\", and \"markdown\"",
	"definitions.Post.properties.contentFormat.type": "string",
	"definitions.Post.properties.license.default": "all-rights-reserved",
	"definitions.Post.properties.license.description": "The license of the post. Valid values are `all-rights-reserved`, `cc-40-by`, `cc-40-by-sa`, `cc-40-by-nd`, `cc-40-by-nc`, `cc-40-by-nc-nd`, `cc-40-by-nc-sa`, `cc-40-zero`, `public-domain`. The default is `all-rights-reserved`.",
	"definitions.Post.properties.license.enum.length": 9,
	"definitions.Post.properties.license.enum[0]": "all-rights-reserved",
	"definitions.Post.properties.license.enum[1]": "cc-40-by",
	"definitions.Post.properties.license.enum[2]": "cc-40-by-sa",
	"definitions.Post.properties.license.enum[3]": "cc-40-by-nd",
	"definitions.Post.properties.license.enum[4]": "cc-40-by-nc",
	"definitions.Post.properties.license.enum[5]": "cc-40-by-nc-nd",
	"definitions.Post.properties.license.enum[6]": "cc-40-by-nc-sa",
	"definitions.Post.properties.license.enum[7]": "cc-40-zero",
	"definitions.Post.properties.license.enum[8]": "public-domain",
	"definitions.Post.properties.license.type": "string",
	"definitions.Post.properties.publishStatus.default": "public",
	"definitions.Post.properties.publishStatus.description": "The status of the post. Valid values are `public`, `draft`, or `unlisted`. The default is `public`.",
	"definitions.Post.properties.publishStatus.enum.length": 3,
	"definitions.Post.properties.publishStatus.enum[0]": "public",
	"definitions.Post.properties.publishStatus.enum[1]": "draft",
	"definitions.Post.properties.publishStatus.enum[2]": "unlisted",
	"definitions.Post.properties.publishStatus.type": "string",
	"definitions.Post.properties.tags.description": "Tags to classify the post. Only the first three will be used. Tags longer than 25 characters will be ignored.",
	"definitions.Post.properties.tags.items.type": "string",
	"definitions.Post.properties.tags.type": "array",
	"definitions.Post.properties.title.description": "The title of the post. Note that this title is used for SEO and when rendering the post as a listing, but will not appear in the actual post—for that, the title must be specified in the content field as well. Titles longer than 100 characters will be ignored. In that case, a title will be synthesized from the first content in the post when it is published.",
	"definitions.Post.properties.title.type": "string",
	"definitions.Post.required.length": 3,
	"definitions.Post.required[0]": "title",
	"definitions.Post.required[1]": "contentFormat",
	"definitions.Post.required[2]": "content",
	"definitions.Post.title": "Post",
	"definitions.Post.type": "object",
	"definitions.PostDetails.description": "Details of Post",
	"definitions.PostDetails.example.data.authorId": "5303d74c64f66366f00cb9b2a94f3251bf5",
	"definitions.PostDetails.example.data.canonicalUrl": "http://jamietalbot.com/posts/liverpool-fc",
	"definitions.PostDetails.example.data.id": "e6f36a",
	"definitions.PostDetails.example.data.license": "all-rights-reserved",
	"definitions.PostDetails.example.data.licenseUrl": "https://medium.com/policy/9db0094a1e0f",
	"definitions.PostDetails.example.data.publishStatus": "public",
	"definitions.PostDetails.example.data.publishedAt": 1442286338435,
	"definitions.PostDetails.example.data.tags.length": 3,
	"definitions.PostDetails.example.data.tags[0]": "football",
	"definitions.PostDetails.example.data.tags[1]": "sport",
	"definitions.PostDetails.example.data.tags[2]": "Liverpool",
	"definitions.PostDetails.example.data.title": "Liverpool FC",
	"definitions.PostDetails.example.data.url": "https://medium.com/@majelbstoat/liverpool-fc-e6f36a",
	"definitions.PostDetails.properties.authorId.description": "The userId of the post’s author",
	"definitions.PostDetails.properties.authorId.type": "string",
	"definitions.PostDetails.properties.canonicalUrl.description": "The canonical URL of the post. If canonicalUrl was not specified in the creation of the post, this field will not be present.",
	"definitions.PostDetails.properties.canonicalUrl.type": "string",
	"definitions.PostDetails.properties.id.description": "A unique identifier for the post.",
	"definitions.PostDetails.properties.id.type": "string",
	"definitions.PostDetails.properties.license.description": "The license of the post.",
	"definitions.PostDetails.properties.license.enum.length": 9,
	"definitions.PostDetails.properties.license.enum[0]": "all-rights-reserved",
	"definitions.PostDetails.properties.license.enum[1]": "cc-40-by",
	"definitions.PostDetails.properties.license.enum[2]": "cc-40-by-sa",
	"definitions.PostDetails.properties.license.enum[3]": "cc-40-by-nd",
	"definitions.PostDetails.properties.license.enum[4]": "cc-40-by-nc",
	"definitions.PostDetails.properties.license.enum[5]": "cc-40-by-nc-nd",
	"definitions.PostDetails.properties.license.enum[6]": "cc-40-by-nc-sa",
	"definitions.PostDetails.properties.license.enum[7]": "cc-40-zero",
	"definitions.PostDetails.properties.license.enum[8]": "public-domain",
	"definitions.PostDetails.properties.license.type": "string",
	"definitions.PostDetails.properties.licenseUrl.description": "The URL to the license of the post.",
	"definitions.PostDetails.properties.licenseUrl.type": "string",
	"definitions.PostDetails.properties.publishStatus.description": "The publish status of the post.",
	"definitions.PostDetails.properties.publishStatus.type": "string",
	"definitions.PostDetails.properties.publishedAt.description": "The post’s published date. If created as a draft, this field will not be present.",
	"definitions.PostDetails.properties.publishedAt.format": "date",
	"definitions.PostDetails.properties.publishedAt.type": "string",
	"definitions.PostDetails.properties.tags.description": "The post’s tags",
	"definitions.PostDetails.properties.tags.items.type": "string",
	"definitions.PostDetails.properties.tags.type": "array",
	"definitions.PostDetails.properties.title.description": "The post’s title",
	"definitions.PostDetails.properties.title.type": "string",
	"definitions.PostDetails.properties.url.description": "The URL of the post on Medium",
	"definitions.PostDetails.properties.url.type": "string",
	"definitions.PostDetails.title": "Post Details",
	"definitions.Publication.description": "Publications provide a way for authors to work collaboratively within a common narrative framework, brand or point of view.",
	"definitions.Publication.example.description": "What is this thing and how does it work?",
	"definitions.Publication.example.id": "b969ac62a46b",
	"definitions.Publication.example.imageUrl": "https://cdn-images-1.medium.com/fit/c/200/200/0*ae1jbP_od0W6EulE.jpeg",
	"definitions.Publication.example.name": "About Medium",
	"definitions.Publication.example.url": "https://medium.com/about",
	"definitions.Publication.properties.description.description": "Short description of the publication",
	"definitions.Publication.properties.description.type": "string",
	"definitions.Publication.properties.id.description": "A unique identifier for the publication.",
	"definitions.Publication.properties.id.type": "string",
	"definitions.Publication.properties.imageUrl.description": "The URL to the publication’s image/logo",
	"definitions.Publication.properties.imageUrl.type": "string",
	"definitions.Publication.properties.name.description": "The publication’s name on Medium.",
	"definitions.Publication.properties.name.type": "string",
	"definitions.Publication.properties.url.description": "The URL to the publication’s homepage",
	"definitions.Publication.properties.url.type": "string",
	"definitions.Publication.title": "Publication Info",
	"definitions.Publication.type": "object",
	"definitions.PublicationResponse.description": "Container object for publication list.",
	"definitions.PublicationResponse.example.data.length": 2,
	"definitions.PublicationResponse.example.data[0].description": "What is this thing and how does it work?",
	"definitions.PublicationResponse.example.data[0].id": "b969ac62a46b",
	"definitions.PublicationResponse.example.data[0].imageUrl": "https://cdn-images-1.medium.com/fit/c/200/200/0*ae1jbP_od0W6EulE.jpeg",
	"definitions.PublicationResponse.example.data[0].name": "About Medium",
	"definitions.PublicationResponse.example.data[0].url": "https://medium.com/about",
	"definitions.PublicationResponse.example.data[1].description": "Medium’s Developer resources",
	"definitions.PublicationResponse.example.data[1].id": "b45573563f5a",
	"definitions.PublicationResponse.example.data[1].imageUrl": "https://cdn-images-1.medium.com/fit/c/200/200/1*ccokMT4VXmDDO1EoQQHkzg@2x.png",
	"definitions.PublicationResponse.example.data[1].name": "Developers",
	"definitions.PublicationResponse.example.data[1].url": "https://medium.com/developers",
	"definitions.PublicationResponse.properties.data.items.$ref": "#/definitions/Publication",
	"definitions.PublicationResponse.properties.data.type": "array",
	"definitions.PublicationResponse.title": "Publication List Container",
	"definitions.User.example.id": "5303d74c64f66366f00cb9b2a94f3251bf5",
	"definitions.User.example.imageUrl": "https://images.medium.com/0*fkfQiTzT7TlUGGyI.png",
	"definitions.User.example.name": "Jamie Talbot",
	"definitions.User.example.url": "https://medium.com/@majelbstoat",
	"definitions.User.example.username": "majelbstoat",
	"definitions.User.properties.id.description": "A unique identifier for the user.",
	"definitions.User.properties.id.type": "string",
	"definitions.User.properties.imageUrl.description": "The URL to the user’s avatar on Medium",
	"definitions.User.properties.imageUrl.type": "string",
	"definitions.User.properties.name.description": "The user’s name on Medium.",
	"definitions.User.properties.name.type": "string",
	"definitions.User.properties.url.description": "The URL to the user’s profile on Medium",
	"definitions.User.properties.url.type": "string",
	"definitions.User.properties.username.description": "The user’s username on Medium.",
	"definitions.User.properties.username.type": "string",
	"definitions.User.type": "object",
	"definitions.UserResponse.description": "Container object for user info",
	"definitions.UserResponse.example.data.id": "5303d74c64f66366f00cb9b2a94f3251bf5",
	"definitions.UserResponse.example.data.imageUrl": "https://images.medium.com/0*fkfQiTzT7TlUGGyI.png",
	"definitions.UserResponse.example.data.name": "Jamie Talbot",
	"definitions.UserResponse.example.data.url": "https://medium.com/@majelbstoat",
	"definitions.UserResponse.example.data.username": "majelbstoat",
	"definitions.UserResponse.properties.data.$ref": "#/definitions/User",
	"definitions.UserResponse.title": "User Container",
	"definitions.UserResponse.type": "object",
	"externalDocs.url": "https://github.com/Medium/medium-api-docs",
	"host": "api.medium.com",
	"info.contact.name": "Hossain Khan",
	"info.contact.url": "https://github.com/amardeshbd/medium-api-specification",
	"info.description": "Medium’s unofficial API documentation using OpenAPI specification.\n\n# Official API\nOfficial API document can also be viewed for most up to date API spec at [https://github.com/Medium/medium-api-docs](https://github.com/Medium/medium-api-docs).\n\nDeveloper Blog - [Welcome to the Medium API](https://medium.com/blog/welcome-to-the-medium-api-3418f956552)\n",
	"info.termsOfService": "https://medium.com/@feerst/2b405a832a2f",
	"info.title": "Medium.com",
	"info.version": "1.0.0",
	"info.x-apisguru-categories.length": 2,
	"info.x-apisguru-categories[0]": "media",
	"info.x-apisguru-categories[1]": "social",
	"info.x-logo.url": "https://api.apis.guru/v2/cache/logo/https_raw.githubusercontent.com_Medium_medium-logos_master_monogram_Monogram.png",
	"info.x-origin.length": 1,
	"info.x-origin[0].format": "swagger",
	"info.x-origin[0].url": "https://raw.githubusercontent.com/amardeshbd/medium-api-specification/master/medium-api-specification.yaml",
	"info.x-origin[0].version": "2.0",
	"info.x-preferred": true,
	"info.x-providerName": "medium.com",
	"info.x-tags.length": 3,
	"info.x-tags[0]": "blog",
	"info.x-tags[1]": "social journalism",
	"info.x-tags[2]": "publishing platform",
	"info.x-unofficialSpec": true,
	"paths./me.get.description": "Returns details of the user who has granted permission to the application.",
	"paths./me.get.responses.200.description": "OK",
	"paths./me.get.responses.200.schema.$ref": "#/definitions/UserResponse",
	"paths./me.get.responses.401.description": "The `accessToken` is invalid or has been revoked.",
	"paths./me.get.security.length": 2,
	"paths./me.get.security[0].BearerToken.length": 0,
	"paths./me.get.security[1].OauthSecurity.length": 1,
	"paths./me.get.security[1].OauthSecurity[0]": "basicProfile",
	"paths./me.get.summary": "User details",
	"paths./me.get.tags.length": 1,
	"paths./me.get.tags[0]": "Users",
	"paths./publications/{publicationId}/contributors.get.description": "This endpoint returns a list of contributors for a given publication. In other words, a list of Medium users who are allowed to publish under a publication, as well as a description of their exact role in the publication (for now, either an editor or a writer).",
	"paths./publications/{publicationId}/contributors.get.parameters.length": 1,
	"paths./publications/{publicationId}/contributors.get.parameters[0].description": "A unique identifier for the publication.",
	"paths./publications/{publicationId}/contributors.get.parameters[0].in": "path",
	"paths./publications/{publicationId}/contributors.get.parameters[0].name": "publicationId",
	"paths./publications/{publicationId}/contributors.get.parameters[0].required": true,
	"paths./publications/{publicationId}/contributors.get.parameters[0].type": "string",
	"paths./publications/{publicationId}/contributors.get.responses.200.description": "OK",
	"paths./publications/{publicationId}/contributors.get.responses.200.schema.$ref": "#/definitions/ContibutorResponse",
	"paths./publications/{publicationId}/contributors.get.responses.401.description": "The `accessToken` is invalid or has been revoked.",
	"paths./publications/{publicationId}/contributors.get.security.length": 2,
	"paths./publications/{publicationId}/contributors.get.security[0].BearerToken.length": 0,
	"paths./publications/{publicationId}/contributors.get.security[1].OauthSecurity.length": 1,
	"paths./publications/{publicationId}/contributors.get.security[1].OauthSecurity[0]": "listPublications",
	"paths./publications/{publicationId}/contributors.get.summary": "Contributors of Publication",
	"paths./publications/{publicationId}/contributors.get.tags.length": 2,
	"paths./publications/{publicationId}/contributors.get.tags[0]": "Publications",
	"paths./publications/{publicationId}/contributors.get.tags[1]": "Users",
	"paths./publications/{publicationId}/posts.post.consumes.length": 1,
	"paths./publications/{publicationId}/posts.post.consumes[0]": "application/json",
	"paths./publications/{publicationId}/posts.post.description": "creating a post and associating it with a publication on Medium. The request also shows this association, considering posts a collection of resources under a publication\n\nThere are additional rules around publishing that each request to this API must respect:\n  - If the authenticated user is an 'editor' for the publication, they can create posts with any publish status. Posts published as 'public' or 'unlisted' will appear in collection immediately, while posts created as 'draft' will remain in pending state under publication.\n  - If the authenticated user is a 'writer' for the chosen publication, they can only create a post as a 'draft'. That post will remain in pending state under publication until an editor for the publication approves it.\n  - If the authenticated user is neither a 'writer' nor an 'editor', they are not allowed to create any posts in a publication.\n",
	"paths./publications/{publicationId}/posts.post.parameters.length": 2,
	"paths./publications/{publicationId}/posts.post.parameters[0].description": "Here publicationId is the id of the publication the post is being created under. The publicationId can be acquired from the API for listing user’s publications.",
	"paths./publications/{publicationId}/posts.post.parameters[0].in": "path",
	"paths./publications/{publicationId}/posts.post.parameters[0].name": "publicationId",
	"paths./publications/{publicationId}/posts.post.parameters[0].required": true,
	"paths./publications/{publicationId}/posts.post.parameters[0].type": "string",
	"paths./publications/{publicationId}/posts.post.parameters[1].description": "Creates a post for publication.",
	"paths./publications/{publicationId}/posts.post.parameters[1].in": "body",
	"paths./publications/{publicationId}/posts.post.parameters[1].name": "body",
	"paths./publications/{publicationId}/posts.post.parameters[1].required": true,
	"paths./publications/{publicationId}/posts.post.parameters[1].schema.$ref": "#/definitions/Post",
	"paths./publications/{publicationId}/posts.post.responses.200.description": "OK",
	"paths./publications/{publicationId}/posts.post.responses.200.schema.$ref": "#/definitions/PostDetails",
	"paths./publications/{publicationId}/posts.post.responses.400.description": "Required fields were invalid, not specified.",
	"paths./publications/{publicationId}/posts.post.responses.401.description": "The `accessToken` is invalid or has been revoked.",
	"paths./publications/{publicationId}/posts.post.responses.403.description": "The `publicationId` in request path doesn’t point to a publication that the user can publish into.",
	"paths./publications/{publicationId}/posts.post.security.length": 2,
	"paths./publications/{publicationId}/posts.post.security[0].BearerToken.length": 0,
	"paths./publications/{publicationId}/posts.post.security[1].OauthSecurity.length": 1,
	"paths./publications/{publicationId}/posts.post.security[1].OauthSecurity[0]": "publishPost",
	"paths./publications/{publicationId}/posts.post.summary": "Create Publication Post",
	"paths./publications/{publicationId}/posts.post.tags.length": 2,
	"paths./publications/{publicationId}/posts.post.tags[0]": "Posts",
	"paths./publications/{publicationId}/posts.post.tags[1]": "Publications",
	"paths./users/{authorId}/posts.post.consumes.length": 1,
	"paths./users/{authorId}/posts.post.consumes[0]": "application/json",
	"paths./users/{authorId}/posts.post.description": "Creates a post on the authenticated user’s profile.",
	"paths./users/{authorId}/posts.post.parameters.length": 2,
	"paths./users/{authorId}/posts.post.parameters[0].description": "authorId is the user id of the authenticated user.",
	"paths./users/{authorId}/posts.post.parameters[0].in": "path",
	"paths./users/{authorId}/posts.post.parameters[0].name": "authorId",
	"paths./users/{authorId}/posts.post.parameters[0].required": true,
	"paths./users/{authorId}/posts.post.parameters[0].type": "string",
	"paths./users/{authorId}/posts.post.parameters[1].description": "Creates a post for user.",
	"paths./users/{authorId}/posts.post.parameters[1].in": "body",
	"paths./users/{authorId}/posts.post.parameters[1].name": "body",
	"paths./users/{authorId}/posts.post.parameters[1].required": true,
	"paths./users/{authorId}/posts.post.parameters[1].schema.$ref": "#/definitions/Post",
	"paths./users/{authorId}/posts.post.responses.200.description": "OK",
	"paths./users/{authorId}/posts.post.responses.200.schema.$ref": "#/definitions/PostDetails",
	"paths./users/{authorId}/posts.post.responses.400.description": "Required fields were invalid, not specified.",
	"paths./users/{authorId}/posts.post.responses.401.description": "The `accessToken` is invalid or has been revoked.",
	"paths./users/{authorId}/posts.post.responses.403.description": "The user does not have permission to publish, or the authorId in the request path points to wrong/non-existent user.",
	"paths./users/{authorId}/posts.post.security.length": 2,
	"paths./users/{authorId}/posts.post.security[0].BearerToken.length": 0,
	"paths./users/{authorId}/posts.post.security[1].OauthSecurity.length": 1,
	"paths./users/{authorId}/posts.post.security[1].OauthSecurity[0]": "publishPost",
	"paths./users/{authorId}/posts.post.summary": "Create User Post",
	"paths./users/{authorId}/posts.post.tags.length": 2,
	"paths./users/{authorId}/posts.post.tags[0]": "Users",
	"paths./users/{authorId}/posts.post.tags[1]": "Posts",
	"paths./users/{userId}/publications.get.description": "Returns a full list of publications that the user is related to in some way. This includes all publications the user is subscribed to, writes to, or edits.",
	"paths./users/{userId}/publications.get.parameters.length": 1,
	"paths./users/{userId}/publications.get.parameters[0].description": "A unique identifier for the user.",
	"paths./users/{userId}/publications.get.parameters[0].in": "path",
	"paths./users/{userId}/publications.get.parameters[0].name": "userId",
	"paths./users/{userId}/publications.get.parameters[0].required": true,
	"paths./users/{userId}/publications.get.parameters[0].type": "string",
	"paths./users/{userId}/publications.get.responses.200.description": "OK",
	"paths./users/{userId}/publications.get.responses.200.schema.$ref": "#/definitions/PublicationResponse",
	"paths./users/{userId}/publications.get.responses.401.description": "The `accessToken` is invalid, lacks the `listPublications` scope or has been revoked.",
	"paths./users/{userId}/publications.get.responses.403.description": "The request attempts to list publications for another user.",
	"paths./users/{userId}/publications.get.security.length": 2,
	"paths./users/{userId}/publications.get.security[0].BearerToken.length": 0,
	"paths./users/{userId}/publications.get.security[1].OauthSecurity.length": 1,
	"paths./users/{userId}/publications.get.security[1].OauthSecurity[0]": "listPublications",
	"paths./users/{userId}/publications.get.summary": "User's publications",
	"paths./users/{userId}/publications.get.tags.length": 1,
	"paths./users/{userId}/publications.get.tags[0]": "Publications",
	"produces.length": 1,
	"produces[0]": "application/json",
	"schemes.length": 1,
	"schemes[0]": "https",
	"securityDefinitions.BearerToken.description": "Self-issued access tokens (described in user-facing copy as integration tokens) are explicitly designed for desktop integrations where implementing browser-based authentication is non-trivial, or software like plugins where it is impossible to secure a client secret. You should not request that a user give you an integration token if you don’t meet these criteria. Users will be cautioned within Medium to treat integration tokens like passwords, and dissuaded from making them generally available.\n\nUsers can generate an access token from the [Settings page](https://medium.com/me/settings) of their Medium account.\n\nYou should instruct your user to visit this URL and generate an integration token from the Integration Tokens section. You should suggest a description for this token - typically the name of your product or feature - and use it consistently for all users.\n\nSelf-issued access tokens currently grant the `basicProfile` and `publishPost` scope. A future iteration of the API will require a user to select the scope they wish to grant access to.\n\nSelf-issued access tokens do not expire, though they may be revoked by the user at any time.\n",
	"securityDefinitions.BearerToken.in": "header",
	"securityDefinitions.BearerToken.name": "Authorization",
	"securityDefinitions.BearerToken.type": "apiKey",
	"securityDefinitions.OauthSecurity.authorizationUrl": "https://medium.com/m/oauth/authorize",
	"securityDefinitions.OauthSecurity.description": "First you must register an application on Medium. Then we will supply you a clientId and a clientSecret with which you may access Medium’s API. Each integration should have its own clientId and clientSecret. The clientSecret should be treated like a password and stored securely.",
	"securityDefinitions.OauthSecurity.flow": "accessCode",
	"securityDefinitions.OauthSecurity.scopes.basicProfile": "Grants basic access to a user’s profile (not including their email).",
	"securityDefinitions.OauthSecurity.scopes.listPublications": "Grants the ability to list publications related to the user.",
	"securityDefinitions.OauthSecurity.scopes.publishPost": "Grants the ability to publish a post to the user’s profile.",
	"securityDefinitions.OauthSecurity.scopes.uploadImage": "Grants the ability to upload an image for use within a Medium post. \n\nNOTE - This is an **extended permission**.\n\nIntegrations are not permitted to request extended scope from users without explicit prior permission from Medium. Attempting to request these permissions through the standard user authentication flow will result in an error if extended scope has not been authorized for an integration.\n",
	"securityDefinitions.OauthSecurity.tokenUrl": "https://medium.com/v1/tokens",
	"securityDefinitions.OauthSecurity.type": "oauth2",
	"swagger": "2.0"
}
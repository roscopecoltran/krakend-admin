syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package data2crm.api;

message GetAccountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetAccountRequest_X_API2CRM_DATA_ENABLE {
        GETACCOUNTREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETACCOUNTREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetAccountRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
}

message GetAccountResponse {
    repeated Account items = 1;
}

message PostAccountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add account into the system
    AccountCreate body = 3;
}

message GetAccountCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetAccountDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetAccountAccount_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Account Identifier
    string account_id = 3;
}

message PutAccountAccount_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Account Identifier
    string account_id = 3;
    // Update account information
    AccountUpdate body = 4;
}

message DeleteAccountAccount_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Account Identifier
    string account_id = 3;
}

message GetAttachmentRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetAttachmentRequest_X_API2CRM_DATA_ENABLE {
        GETATTACHMENTREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETATTACHMENTREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetAttachmentRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum GetAttachmentRequest_Parent_type {
        GETATTACHMENTREQUEST_PARENT_TYPE_ACCOUNT = 0;
        GETATTACHMENTREQUEST_PARENT_TYPE_CONTACT = 1;
        GETATTACHMENTREQUEST_PARENT_TYPE_LEAD = 2;
        GETATTACHMENTREQUEST_PARENT_TYPE_TASK = 3;
        GETATTACHMENTREQUEST_PARENT_TYPE_USER = 4;
        GETATTACHMENTREQUEST_PARENT_TYPE_OPPORTUNITY = 5;
        GETATTACHMENTREQUEST_PARENT_TYPE_NOTE = 6;
    }
    GetAttachmentRequest_Parent_type parent_type = 8;
}

message GetAttachmentResponse {
    repeated Attachment items = 1;
}

message PostAttachmentRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add attachment into the system
    AttachmentCreate body = 3;
}

message GetAttachmentCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetAttachmentDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetAttachmentAttachment_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Attachment Identifier
    string attachment_id = 3;
}

message PutAttachmentAttachment_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Attachment Identifier
    string attachment_id = 3;
    // Update attachment information
    AttachmentUpdate body = 4;
}

message DeleteAttachmentAttachment_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Attachment Identifier
    string attachment_id = 3;
}

message GetCallRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetCallRequest_X_API2CRM_DATA_ENABLE {
        GETCALLREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETCALLREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetCallRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum GetCallRequest_Parent_type {
        GETCALLREQUEST_PARENT_TYPE_ACCOUNT = 0;
        GETCALLREQUEST_PARENT_TYPE_CONTACT = 1;
        GETCALLREQUEST_PARENT_TYPE_LEAD = 2;
        GETCALLREQUEST_PARENT_TYPE_OPPORTUNITY = 3;
        GETCALLREQUEST_PARENT_TYPE_TASK = 4;
        GETCALLREQUEST_PARENT_TYPE_USER = 5;
    }
    GetCallRequest_Parent_type parent_type = 8;
}

message GetCallResponse {
    repeated Call items = 1;
}

message PostCallRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add call into the system
    CallCreate body = 3;
}

message GetCallCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetCallDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetCallCall_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Call Identifier
    string call_id = 3;
}

message PutCallCall_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update call information
    CallUpdate body = 3;
    // Call Identifier
    string call_id = 4;
}

message DeleteCallCall_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Call Identifier
    string call_id = 3;
}

message GetContactRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetContactRequest_X_API2CRM_DATA_ENABLE {
        GETCONTACTREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETCONTACTREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetContactRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
}

message GetContactResponse {
    repeated Contact items = 1;
}

message PostContactRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add contact into the system
    ContactCreate body = 3;
}

message GetContactCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetContactDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetContactContact_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Contact Identifier
    string contact_id = 3;
}

message PutContactContact_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update contact information
    ContactUpdate body = 3;
    // Contact Identifier
    string contact_id = 4;
}

message DeleteContactContact_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Contact Identifier
    string contact_id = 3;
}

message GetCrmRequest {
    // User Key
    string X_API2CRM_USERKEY = 1;
    // Filter
    string filter = 2;
    // Amount of results (default: 25)
    int32 limit = 3;
    // Start from record (default: 0)
    int32 offset = 4;
    // Type
    enum GetCrmRequest_Type {
        GETCRMREQUEST_TYPE_BITRIX24 = 0;
        GETCRMREQUEST_TYPE_SUGARCRM = 1;
        GETCRMREQUEST_TYPE_SUITECRM = 2;
        GETCRMREQUEST_TYPE_BPMONLINE = 3;
        GETCRMREQUEST_TYPE_HUBSPOT = 4;
        GETCRMREQUEST_TYPE_VTIGER = 5;
        GETCRMREQUEST_TYPE_OROCRM = 6;
        GETCRMREQUEST_TYPE_ZOHOCRM = 7;
        GETCRMREQUEST_TYPE_INSIGHTLY = 8;
        GETCRMREQUEST_TYPE_SALESFORCE = 9;
        GETCRMREQUEST_TYPE_SOLVE360CRM = 10;
        GETCRMREQUEST_TYPE_HIGHRISEHQ = 11;
        GETCRMREQUEST_TYPE_PIPELINEDEALS = 12;
        GETCRMREQUEST_TYPE_PIPEDRIVE = 13;
        GETCRMREQUEST_TYPE_CAPSULECRM = 14;
        GETCRMREQUEST_TYPE_ZURMO = 15;
        GETCRMREQUEST_TYPE_MICROSOFTDYNAMICS = 16;
    }
    GetCrmRequest_Type type = 5;
}

message GetCrmResponse {
    repeated Crm items = 1;
}

message PostCrmRequest {
    // User Key
    string X_API2CRM_USERKEY = 1;
    // Add CRM into the system<br><a href="http://www.data2crm.com/api/faqs/need-connect-crm-data2crm-api/" target="_blank">What do I need to connect a CRM to Data2CRM.API?</a>
    CrmCreate body = 2;
}

message GetCrmCountRequest {
    // User Key
    string X_API2CRM_USERKEY = 1;
}

message GetCrmCrm_idRequest {
    // User Key
    string X_API2CRM_USERKEY = 1;
    // CRM Identifier
    string crm_id = 2;
}

message PutCrmCrm_idRequest {
    // User Key
    string X_API2CRM_USERKEY = 1;
    // Update CRM information<br><a href="http://www.data2crm.com/api/faqs/need-connect-crm-data2crm-api/" target="_blank">What do I need to connect a CRM to Data2CRM.API?</a>
    CrmUpdate body = 2;
    // CRM Identifier
    string crm_id = 3;
}

message DeleteCrmCrm_idRequest {
    // User Key
    string X_API2CRM_USERKEY = 1;
    // CRM Identifier
    string crm_id = 2;
}

message GetCustomFieldRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetCustomFieldRequest_X_API2CRM_DATA_ENABLE {
        GETCUSTOMFIELDREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETCUSTOMFIELDREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetCustomFieldRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Entity
    enum GetCustomFieldRequest_Entity {
        GETCUSTOMFIELDREQUEST_ENTITY_ACCOUNT = 0;
        GETCUSTOMFIELDREQUEST_ENTITY_CONTACT = 1;
        GETCUSTOMFIELDREQUEST_ENTITY_USER = 2;
        GETCUSTOMFIELDREQUEST_ENTITY_OPPORTUNITY = 3;
        GETCUSTOMFIELDREQUEST_ENTITY_TASK = 4;
        GETCUSTOMFIELDREQUEST_ENTITY_LEAD = 5;
        GETCUSTOMFIELDREQUEST_ENTITY_NOTE = 6;
        GETCUSTOMFIELDREQUEST_ENTITY_ATTACHMENT = 7;
        GETCUSTOMFIELDREQUEST_ENTITY_EVENT = 8;
        GETCUSTOMFIELDREQUEST_ENTITY_EMAIL = 9;
        GETCUSTOMFIELDREQUEST_ENTITY_CALL = 10;
        GETCUSTOMFIELDREQUEST_ENTITY_MEETING = 11;
    }
    GetCustomFieldRequest_Entity entity = 4;
    // Filter
    string filter = 5;
    // Label
    string label = 6;
    // Amount of results (default: 25)
    int32 limit = 7;
    // Name
    string name = 8;
    // Start from record (default: 0)
    int32 offset = 9;
}

message GetCustomFieldResponse {
    repeated CustomField items = 1;
}

message PostCustomFieldRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add custom field into the system
    CustomFieldCreate body = 3;
}

message GetCustomFieldCustom_field_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Custom Field Identifier
    string custom_field_id = 3;
}

message PutCustomFieldCustom_field_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update custom field information
    CustomFieldUpdate body = 3;
    // Custom Field Identifier
    string custom_field_id = 4;
}

message DeleteCustomFieldCustom_field_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Custom Field Identifier
    string custom_field_id = 3;
}

message GetEmailRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetEmailRequest_X_API2CRM_DATA_ENABLE {
        GETEMAILREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETEMAILREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetEmailRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum GetEmailRequest_Parent_type {
        GETEMAILREQUEST_PARENT_TYPE_ACCOUNT = 0;
        GETEMAILREQUEST_PARENT_TYPE_OPPORTUNITY = 1;
        GETEMAILREQUEST_PARENT_TYPE_CONTACT = 2;
        GETEMAILREQUEST_PARENT_TYPE_LEAD = 3;
        GETEMAILREQUEST_PARENT_TYPE_USER = 4;
        GETEMAILREQUEST_PARENT_TYPE_TASK = 5;
    }
    GetEmailRequest_Parent_type parent_type = 8;
}

message GetEmailResponse {
    repeated Email items = 1;
}

message PostEmailRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add email into the system
    EmailCreate body = 3;
}

message GetEmailCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetEmailDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetEmailEmail_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Email Identifier
    string email_id = 3;
}

message PutEmailEmail_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update email information
    EmailUpdate body = 3;
    // Email Identifier
    string email_id = 4;
}

message DeleteEmailEmail_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Email Identifier
    string email_id = 3;
}

message GetEventRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetEventRequest_X_API2CRM_DATA_ENABLE {
        GETEVENTREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETEVENTREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetEventRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum GetEventRequest_Parent_type {
        GETEVENTREQUEST_PARENT_TYPE_ACCOUNT = 0;
        GETEVENTREQUEST_PARENT_TYPE_CONTACT = 1;
        GETEVENTREQUEST_PARENT_TYPE_LEAD = 2;
        GETEVENTREQUEST_PARENT_TYPE_OPPORTUNITY = 3;
        GETEVENTREQUEST_PARENT_TYPE_TASK = 4;
        GETEVENTREQUEST_PARENT_TYPE_USER = 5;
    }
    GetEventRequest_Parent_type parent_type = 8;
}

message GetEventResponse {
    repeated Event items = 1;
}

message PostEventRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add event into the system
    EventCreate body = 3;
}

message GetEventCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetEventDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetEventEvent_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Event Identifier
    string event_id = 3;
}

message PutEventEvent_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update event information
    EventUpdate body = 3;
    // Event Identifier
    string event_id = 4;
}

message DeleteEventEvent_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Event Identifier
    string event_id = 3;
}

message GetLeadRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetLeadRequest_X_API2CRM_DATA_ENABLE {
        GETLEADREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETLEADREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetLeadRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
}

message GetLeadResponse {
    repeated Lead items = 1;
}

message PostLeadRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add lead into the system
    LeadCreate body = 3;
}

message GetLeadCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetLeadDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetLeadLead_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Lead Identifier
    string lead_id = 3;
}

message PutLeadLead_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update lead information
    LeadUpdate body = 3;
    // Lead Identifier
    string lead_id = 4;
}

message DeleteLeadLead_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Lead Identifier
    string lead_id = 3;
}

message GetMeetingRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetMeetingRequest_X_API2CRM_DATA_ENABLE {
        GETMEETINGREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETMEETINGREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetMeetingRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum GetMeetingRequest_Parent_type {
        GETMEETINGREQUEST_PARENT_TYPE_ACCOUNT = 0;
        GETMEETINGREQUEST_PARENT_TYPE_CONTACT = 1;
        GETMEETINGREQUEST_PARENT_TYPE_LEAD = 2;
        GETMEETINGREQUEST_PARENT_TYPE_OPPORTUNITY = 3;
        GETMEETINGREQUEST_PARENT_TYPE_USER = 4;
    }
    GetMeetingRequest_Parent_type parent_type = 8;
}

message GetMeetingResponse {
    repeated Meeting items = 1;
}

message PostMeetingRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add meeting into the system
    MeetingCreate body = 3;
}

message GetMeetingCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetMeetingDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetMeetingMeeting_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Meeting Identifier
    string meeting_id = 3;
}

message PutMeetingMeeting_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update meeting information
    MeetingUpdate body = 3;
    // Meeting Identifier
    string meeting_id = 4;
}

message DeleteMeetingMeeting_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Meeting Identifier
    string meeting_id = 3;
}

message GetNoteRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetNoteRequest_X_API2CRM_DATA_ENABLE {
        GETNOTEREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETNOTEREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetNoteRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum GetNoteRequest_Parent_type {
        GETNOTEREQUEST_PARENT_TYPE_ACCOUNT = 0;
        GETNOTEREQUEST_PARENT_TYPE_CONTACT = 1;
        GETNOTEREQUEST_PARENT_TYPE_LEAD = 2;
        GETNOTEREQUEST_PARENT_TYPE_TASK = 3;
        GETNOTEREQUEST_PARENT_TYPE_USER = 4;
        GETNOTEREQUEST_PARENT_TYPE_OPPORTUNITY = 5;
        GETNOTEREQUEST_PARENT_TYPE_EVENT = 6;
    }
    GetNoteRequest_Parent_type parent_type = 8;
}

message GetNoteResponse {
    repeated Note items = 1;
}

message PostNoteRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add note into the system
    NoteCreate body = 3;
}

message GetNoteCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetNoteDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetNoteNote_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Note Identifier
    string note_id = 3;
}

message PutNoteNote_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update note information
    NoteUpdate body = 3;
    // Note Identifier
    string note_id = 4;
}

message DeleteNoteNote_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Note Identifier
    string note_id = 3;
}

message GetOpportunityRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetOpportunityRequest_X_API2CRM_DATA_ENABLE {
        GETOPPORTUNITYREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETOPPORTUNITYREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetOpportunityRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
}

message GetOpportunityResponse {
    repeated Opportunity items = 1;
}

message PostOpportunityRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add opportunity into the system
    OpportunityCreate body = 3;
}

message GetOpportunityCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetOpportunityDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetOpportunityOpportunity_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Opportunity Identifier
    string opportunity_id = 3;
}

message PutOpportunityOpportunity_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update opportunity information
    OpportunityUpdate body = 3;
    // Opportunity Identifier
    string opportunity_id = 4;
}

message DeleteOpportunityOpportunity_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Opportunity Identifier
    string opportunity_id = 3;
}

message GetTaskRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetTaskRequest_X_API2CRM_DATA_ENABLE {
        GETTASKREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETTASKREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetTaskRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
}

message GetTaskResponse {
    repeated Task items = 1;
}

message PostTaskRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add task into the system
    TaskCreate body = 3;
}

message GetTaskCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetTaskDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetTaskTask_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Task Identifier
    string task_id = 3;
}

message PutTaskTask_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update task information
    TaskUpdate body = 3;
    // Task Identifier
    string task_id = 4;
}

message DeleteTaskTask_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Task Identifier
    string task_id = 3;
}

message GetUserRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // Data Enable
    enum GetUserRequest_X_API2CRM_DATA_ENABLE {
        GETUSERREQUEST_X_API2CRM_DATA_ENABLE_FALSE = 0;
        GETUSERREQUEST_X_API2CRM_DATA_ENABLE_TRUE = 1;
    }
    GetUserRequest_X_API2CRM_DATA_ENABLE X_API2CRM_DATA_ENABLE = 2;
    // User Key
    string X_API2CRM_USERKEY = 3;
    // Filter
    string filter = 4;
    // Amount of results (default: 25)
    int32 limit = 5;
    // Start from record (default: 0)
    int32 offset = 6;
}

message GetUserResponse {
    repeated User items = 1;
}

message PostUserRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Add user into the system
    UserCreate body = 3;
}

message GetUserCountRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetUserDescribeRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
}

message GetUserUser_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // User Identifier
    string user_id = 3;
}

message PutUserUser_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // Update user information
    UserUpdate body = 3;
    // User Identifier
    string user_id = 4;
}

message DeleteUserUser_idRequest {
    // CRM Key
    string X_API2CRM_CRMKEY = 1;
    // User Key
    string X_API2CRM_USERKEY = 2;
    // User Identifier
    string user_id = 3;
}

message Account {
    message Embedded {
            // Category
    string account_category = 1;
            // Address Type
    string address_type = 2;
            // Annual Revenue
    float annual_revenue = 3;
            // Billing City
    string billing_city = 4;
            // Billing Country
    string billing_country = 5;
            // Billing State
    string billing_state = 6;
            // Billing Street
    string billing_street = 7;
            // Billing Zip
    string billing_zip = 8;
            // Created At
    string created_at = 9;
            // Description
    string description = 10;
            // Email
    string email = 11;
            // Email Alternative
    string email_alt = 12;
            // Employees
    int32 employees = 13;
            // Facebook
    string facebook = 14;
            // Fax
    string fax = 15;
            // Industry
    enum Embedded_Industry {
            EMBEDDED_INDUSTRY_INFORMATIONAL_TECHNOLOGY = 0;
            EMBEDDED_INDUSTRY_TELECOMMUNICATIONS = 1;
            EMBEDDED_INDUSTRY_MANUFACTURING = 2;
            EMBEDDED_INDUSTRY_BANKING = 3;
            EMBEDDED_INDUSTRY_CONSULTING = 4;
            EMBEDDED_INDUSTRY_FINANCE = 5;
            EMBEDDED_INDUSTRY_GOVERNMENT = 6;
            EMBEDDED_INDUSTRY_DELIVERY = 7;
            EMBEDDED_INDUSTRY_NONPROFIT = 8;
            EMBEDDED_INDUSTRY_ENTERTAINMENT = 9;
            EMBEDDED_INDUSTRY_BIOTECHNOLOGY = 10;
            EMBEDDED_INDUSTRY_CHEMICALS = 11;
            EMBEDDED_INDUSTRY_COMMUNICATIONS = 12;
            EMBEDDED_INDUSTRY_CONSTRUCTION = 13;
            EMBEDDED_INDUSTRY_EDUCATION = 14;
            EMBEDDED_INDUSTRY_ELECTRONICS = 15;
            EMBEDDED_INDUSTRY_ENERGY = 16;
            EMBEDDED_INDUSTRY_ENGINEERING = 17;
            EMBEDDED_INDUSTRY_ENVIRONMENTAL = 18;
            EMBEDDED_INDUSTRY_HEALTH_CARE = 19;
            EMBEDDED_INDUSTRY_HOSPITALITY = 20;
            EMBEDDED_INDUSTRY_MACHINERY = 21;
            EMBEDDED_INDUSTRY_MEDIA = 22;
            EMBEDDED_INDUSTRY_RECREATION = 23;
            EMBEDDED_INDUSTRY_RETAIL = 24;
            EMBEDDED_INDUSTRY_TRANSPORTATION = 25;
            EMBEDDED_INDUSTRY_UTILITIES = 26;
            EMBEDDED_INDUSTRY_OTHER = 27;
        }
        Embedded_Industry industry = 16;
            // Livejournal
    string livejournal = 17;
            // Name
    string name = 18;
            // Owner
    string owner = 19;
            // Ownership
    string ownership = 20;
            // Phone
    string phone = 21;
            // Phone Alternative
    string phone_alt = 22;
            // Rating
    string rating = 23;
            // Shipping City
    string shipping_city = 24;
            // Shipping Country
    string shipping_country = 25;
            // Shipping State
    string shipping_state = 26;
            // Shipping Street
    string shipping_street = 27;
            // Shipping Zip Code
    string shipping_zip = 28;
            // SIC Code
    string sic_code = 29;
            // Ticker Symbol
    string tickersymbol = 30;
            // Twitter
    string twitter = 31;
            // Type
    string type = 32;
            // Updated At
    string updated_at = 33;
            // Website
    string website = 34;
            // Website Alternative
    string website_alt = 35;
    }
    Embedded embedded = 1;
    // Account Identifier
    string id = 2;
    message Relation {
            // Owner Identifier
    string owner_id = 1;
            // Parent Identifier
    string parent_id = 2;
    }
    Relation relation = 3;
}

message AccountCreate {
    // Category
    string account_category = 1;
    // Address Type
    string address_type = 2;
    // Annual Revenue
    float annual_revenue = 3;
    // Billing City
    string billing_city = 4;
    // Billing Country
    string billing_country = 5;
    // Billing State
    string billing_state = 6;
    // Billing Street
    string billing_street = 7;
    // Billing Zip
    string billing_zip = 8;
    // Created At
    string created_at = 9;
    // Description
    string description = 10;
    // Email
    string email = 11;
    // Email Alternative
    string email_alt = 12;
    // Employees
    int32 employees = 13;
    // Facebook
    string facebook = 14;
    // Fax
    string fax = 15;
    // Industry
    enum AccountCreate_Industry {
        ACCOUNTCREATE_INDUSTRY_INFORMATIONAL_TECHNOLOGY = 0;
        ACCOUNTCREATE_INDUSTRY_TELECOMMUNICATIONS = 1;
        ACCOUNTCREATE_INDUSTRY_MANUFACTURING = 2;
        ACCOUNTCREATE_INDUSTRY_BANKING = 3;
        ACCOUNTCREATE_INDUSTRY_CONSULTING = 4;
        ACCOUNTCREATE_INDUSTRY_FINANCE = 5;
        ACCOUNTCREATE_INDUSTRY_GOVERNMENT = 6;
        ACCOUNTCREATE_INDUSTRY_DELIVERY = 7;
        ACCOUNTCREATE_INDUSTRY_NONPROFIT = 8;
        ACCOUNTCREATE_INDUSTRY_ENTERTAINMENT = 9;
        ACCOUNTCREATE_INDUSTRY_BIOTECHNOLOGY = 10;
        ACCOUNTCREATE_INDUSTRY_CHEMICALS = 11;
        ACCOUNTCREATE_INDUSTRY_COMMUNICATIONS = 12;
        ACCOUNTCREATE_INDUSTRY_CONSTRUCTION = 13;
        ACCOUNTCREATE_INDUSTRY_EDUCATION = 14;
        ACCOUNTCREATE_INDUSTRY_ELECTRONICS = 15;
        ACCOUNTCREATE_INDUSTRY_ENERGY = 16;
        ACCOUNTCREATE_INDUSTRY_ENGINEERING = 17;
        ACCOUNTCREATE_INDUSTRY_ENVIRONMENTAL = 18;
        ACCOUNTCREATE_INDUSTRY_HEALTH_CARE = 19;
        ACCOUNTCREATE_INDUSTRY_HOSPITALITY = 20;
        ACCOUNTCREATE_INDUSTRY_MACHINERY = 21;
        ACCOUNTCREATE_INDUSTRY_MEDIA = 22;
        ACCOUNTCREATE_INDUSTRY_RECREATION = 23;
        ACCOUNTCREATE_INDUSTRY_RETAIL = 24;
        ACCOUNTCREATE_INDUSTRY_TRANSPORTATION = 25;
        ACCOUNTCREATE_INDUSTRY_UTILITIES = 26;
        ACCOUNTCREATE_INDUSTRY_OTHER = 27;
    }
    AccountCreate_Industry industry = 16;
    // Livejournal
    string livejournal = 17;
    // Name
    string name = 18;
    // Owner
    string owner = 19;
    // Owner Identifier
    string owner_id = 20;
    // Ownership
    string ownership = 21;
    // Parent Identifier
    string parent_id = 22;
    // Phone
    string phone = 23;
    // Phone Alternative
    string phone_alt = 24;
    // Rating
    string rating = 25;
    // Shipping City
    string shipping_city = 26;
    // Shipping Country
    string shipping_country = 27;
    // Shipping State
    string shipping_state = 28;
    // Shipping Street
    string shipping_street = 29;
    // Shipping Zip Code
    string shipping_zip = 30;
    // SIC Code
    string sic_code = 31;
    // Ticker Symbol
    string tickersymbol = 32;
    // Twitter
    string twitter = 33;
    // Type
    string type = 34;
    // Updated At
    string updated_at = 35;
    // Website
    string website = 36;
    // Website Alternative
    string website_alt = 37;
}

message AccountCreated {
    // Account Identifier
    string id = 1;
}

message AccountUpdate {
    // Category
    string account_category = 1;
    // Address Type
    string address_type = 2;
    // Annual Revenue
    float annual_revenue = 3;
    // Billing City
    string billing_city = 4;
    // Billing Country
    string billing_country = 5;
    // Billing State
    string billing_state = 6;
    // Billing Street
    string billing_street = 7;
    // Billing Zip
    string billing_zip = 8;
    // Created At
    string created_at = 9;
    // Description
    string description = 10;
    // Email
    string email = 11;
    // Email Alternative
    string email_alt = 12;
    // Employees
    int32 employees = 13;
    // Facebook
    string facebook = 14;
    // Fax
    string fax = 15;
    // Industry
    enum AccountUpdate_Industry {
        ACCOUNTUPDATE_INDUSTRY_INFORMATIONAL_TECHNOLOGY = 0;
        ACCOUNTUPDATE_INDUSTRY_TELECOMMUNICATIONS = 1;
        ACCOUNTUPDATE_INDUSTRY_MANUFACTURING = 2;
        ACCOUNTUPDATE_INDUSTRY_BANKING = 3;
        ACCOUNTUPDATE_INDUSTRY_CONSULTING = 4;
        ACCOUNTUPDATE_INDUSTRY_FINANCE = 5;
        ACCOUNTUPDATE_INDUSTRY_GOVERNMENT = 6;
        ACCOUNTUPDATE_INDUSTRY_DELIVERY = 7;
        ACCOUNTUPDATE_INDUSTRY_NONPROFIT = 8;
        ACCOUNTUPDATE_INDUSTRY_ENTERTAINMENT = 9;
        ACCOUNTUPDATE_INDUSTRY_BIOTECHNOLOGY = 10;
        ACCOUNTUPDATE_INDUSTRY_CHEMICALS = 11;
        ACCOUNTUPDATE_INDUSTRY_COMMUNICATIONS = 12;
        ACCOUNTUPDATE_INDUSTRY_CONSTRUCTION = 13;
        ACCOUNTUPDATE_INDUSTRY_EDUCATION = 14;
        ACCOUNTUPDATE_INDUSTRY_ELECTRONICS = 15;
        ACCOUNTUPDATE_INDUSTRY_ENERGY = 16;
        ACCOUNTUPDATE_INDUSTRY_ENGINEERING = 17;
        ACCOUNTUPDATE_INDUSTRY_ENVIRONMENTAL = 18;
        ACCOUNTUPDATE_INDUSTRY_HEALTH_CARE = 19;
        ACCOUNTUPDATE_INDUSTRY_HOSPITALITY = 20;
        ACCOUNTUPDATE_INDUSTRY_MACHINERY = 21;
        ACCOUNTUPDATE_INDUSTRY_MEDIA = 22;
        ACCOUNTUPDATE_INDUSTRY_RECREATION = 23;
        ACCOUNTUPDATE_INDUSTRY_RETAIL = 24;
        ACCOUNTUPDATE_INDUSTRY_TRANSPORTATION = 25;
        ACCOUNTUPDATE_INDUSTRY_UTILITIES = 26;
        ACCOUNTUPDATE_INDUSTRY_OTHER = 27;
    }
    AccountUpdate_Industry industry = 16;
    // Livejournal
    string livejournal = 17;
    // Name
    string name = 18;
    // Owner
    string owner = 19;
    // Owner Identifier
    string owner_id = 20;
    // Ownership
    string ownership = 21;
    // Parent Identifier
    string parent_id = 22;
    // Phone
    string phone = 23;
    // Phone Alternative
    string phone_alt = 24;
    // Rating
    string rating = 25;
    // Shipping City
    string shipping_city = 26;
    // Shipping Country
    string shipping_country = 27;
    // Shipping State
    string shipping_state = 28;
    // Shipping Street
    string shipping_street = 29;
    // Shipping Zip Code
    string shipping_zip = 30;
    // SIC Code
    string sic_code = 31;
    // Ticker Symbol
    string tickersymbol = 32;
    // Twitter
    string twitter = 33;
    // Type
    string type = 34;
    // Updated At
    string updated_at = 35;
    // Website
    string website = 36;
    // Website Alternative
    string website_alt = 37;
}

message AccountUpdated {
    // Account Identifier
    string id = 1;
}

message Attachment {
    message Embedded {
            // Contact Name
    string contact_name = 1;
            // Created At
    string created_at = 2;
            // Description
    string description = 3;
            // Link
    string link = 4;
            // Mime Type
    string mime_type = 5;
            // Name
    string name = 6;
            // Owner User Name
    string owner_user_name = 7;
            // Parent Name
    string parent_name = 8;
            // Size (in bytes)
    int32 size = 9;
            // Updated At
    string updated_at = 10;
    }
    Embedded embedded = 1;
    // Note Identifier
    string id = 2;
    message Relation {
            // Owner User Identifier
    string owner_user_id = 1;
            // Parent Identifier
    string parent_id = 2;
            // Parent Type
    enum Relation_Parent_type {
            RELATION_PARENT_TYPE_ACCOUNT = 0;
            RELATION_PARENT_TYPE_CONTACT = 1;
            RELATION_PARENT_TYPE_LEAD = 2;
            RELATION_PARENT_TYPE_TASK = 3;
            RELATION_PARENT_TYPE_USER = 4;
            RELATION_PARENT_TYPE_OPPORTUNITY = 5;
            RELATION_PARENT_TYPE_NOTE = 6;
        }
        Relation_Parent_type parent_type = 3;
    }
    Relation relation = 3;
}

message AttachmentCreate {
    // Contact Name
    string contact_name = 1;
    // Created At
    string created_at = 2;
    // Description
    string description = 3;
    // Link
    string link = 4;
    // Mime Type
    string mime_type = 5;
    // Name
    string name = 6;
    // Owner User Identifier
    string owner_user_id = 7;
    // Owner User Name
    string owner_user_name = 8;
    // Parent Identifier
    string parent_id = 9;
    // Parent Name
    string parent_name = 10;
    // Parent Type
    enum AttachmentCreate_Parent_type {
        ATTACHMENTCREATE_PARENT_TYPE_ACCOUNT = 0;
        ATTACHMENTCREATE_PARENT_TYPE_CONTACT = 1;
        ATTACHMENTCREATE_PARENT_TYPE_LEAD = 2;
        ATTACHMENTCREATE_PARENT_TYPE_TASK = 3;
        ATTACHMENTCREATE_PARENT_TYPE_USER = 4;
        ATTACHMENTCREATE_PARENT_TYPE_OPPORTUNITY = 5;
        ATTACHMENTCREATE_PARENT_TYPE_NOTE = 6;
    }
    AttachmentCreate_Parent_type parent_type = 11;
    // Size (in bytes)
    int32 size = 12;
    // Updated At
    string updated_at = 13;
}

message AttachmentCreated {
    // Note Identifier
    string id = 1;
}

message AttachmentUpdate {
    // Contact Name
    string contact_name = 1;
    // Created At
    string created_at = 2;
    // Description
    string description = 3;
    // Link
    string link = 4;
    // Mime Type
    string mime_type = 5;
    // Name
    string name = 6;
    // Owner User Identifier
    string owner_user_id = 7;
    // Owner User Name
    string owner_user_name = 8;
    // Parent Identifier
    string parent_id = 9;
    // Parent Name
    string parent_name = 10;
    // Parent Type
    enum AttachmentUpdate_Parent_type {
        ATTACHMENTUPDATE_PARENT_TYPE_ACCOUNT = 0;
        ATTACHMENTUPDATE_PARENT_TYPE_CONTACT = 1;
        ATTACHMENTUPDATE_PARENT_TYPE_LEAD = 2;
        ATTACHMENTUPDATE_PARENT_TYPE_TASK = 3;
        ATTACHMENTUPDATE_PARENT_TYPE_USER = 4;
        ATTACHMENTUPDATE_PARENT_TYPE_OPPORTUNITY = 5;
        ATTACHMENTUPDATE_PARENT_TYPE_NOTE = 6;
    }
    AttachmentUpdate_Parent_type parent_type = 11;
    // Size (in bytes)
    int32 size = 12;
    // Updated At
    string updated_at = 13;
}

message AttachmentUpdated {
    // Note Identifier
    string id = 1;
}

message Call {
    message Embedded {
            // Created At
    string created_at = 1;
            // Description
    string description = 2;
            // Direction
    enum Embedded_Direction {
            EMBEDDED_DIRECTION_INBOUND = 0;
            EMBEDDED_DIRECTION_OUTBOUND = 1;
        }
        Embedded_Direction direction = 3;
            // Ended At
    string ended_at = 4;
            // Purpose
    enum Embedded_Purpose {
            EMBEDDED_PURPOSE_NONE = 0;
            EMBEDDED_PURPOSE_PROSPECTING = 1;
            EMBEDDED_PURPOSE_ADMINISTRATIVE = 2;
            EMBEDDED_PURPOSE_NEGOTIATION = 3;
            EMBEDDED_PURPOSE_DEMO = 4;
            EMBEDDED_PURPOSE_PROJECT = 5;
            EMBEDDED_PURPOSE_SUPPORT = 6;
        }
        Embedded_Purpose purpose = 5;
            // Result
    string result = 6;
            // Started At
    string started_at = 7;
            // Status
    enum Embedded_Statu {
            EMBEDDED_STATU_PLANNED = 0;
            EMBEDDED_STATU_HELD = 1;
            EMBEDDED_STATU_NOT_HELD = 2;
        }
        Embedded_Statu status = 8;
            // Subject
    string subject = 9;
            // Updated At
    string updated_at = 10;
    }
    Embedded embedded = 1;
    // Call Identifier
    string id = 2;
    message Relation {
            // Contact Identifier
    string contact_id = 1;
            // Owner User Identifier
    string owner_user_id = 2;
            // Parent Identifier
    string parent_id = 3;
            // Parent Type
    enum Relation_Parent_type {
            RELATION_PARENT_TYPE_ACCOUNT = 0;
            RELATION_PARENT_TYPE_CONTACT = 1;
            RELATION_PARENT_TYPE_LEAD = 2;
            RELATION_PARENT_TYPE_OPPORTUNITY = 3;
            RELATION_PARENT_TYPE_TASK = 4;
            RELATION_PARENT_TYPE_USER = 5;
        }
        Relation_Parent_type parent_type = 4;
    }
    Relation relation = 3;
}

message CallCreate {
    // Contact Identifier
    string contact_id = 1;
    // Created At
    string created_at = 2;
    // Description
    string description = 3;
    // Direction
    enum CallCreate_Direction {
        CALLCREATE_DIRECTION_INBOUND = 0;
        CALLCREATE_DIRECTION_OUTBOUND = 1;
    }
    CallCreate_Direction direction = 4;
    // Ended At
    string ended_at = 5;
    // Owner User Identifier
    string owner_user_id = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum CallCreate_Parent_type {
        CALLCREATE_PARENT_TYPE_ACCOUNT = 0;
        CALLCREATE_PARENT_TYPE_CONTACT = 1;
        CALLCREATE_PARENT_TYPE_LEAD = 2;
        CALLCREATE_PARENT_TYPE_OPPORTUNITY = 3;
        CALLCREATE_PARENT_TYPE_TASK = 4;
        CALLCREATE_PARENT_TYPE_USER = 5;
    }
    CallCreate_Parent_type parent_type = 8;
    // Purpose
    enum CallCreate_Purpose {
        CALLCREATE_PURPOSE_NONE = 0;
        CALLCREATE_PURPOSE_PROSPECTING = 1;
        CALLCREATE_PURPOSE_ADMINISTRATIVE = 2;
        CALLCREATE_PURPOSE_NEGOTIATION = 3;
        CALLCREATE_PURPOSE_DEMO = 4;
        CALLCREATE_PURPOSE_PROJECT = 5;
        CALLCREATE_PURPOSE_SUPPORT = 6;
    }
    CallCreate_Purpose purpose = 9;
    // Result
    string result = 10;
    // Started At
    string started_at = 11;
    // Status
    enum CallCreate_Statu {
        CALLCREATE_STATU_PLANNED = 0;
        CALLCREATE_STATU_HELD = 1;
        CALLCREATE_STATU_NOT_HELD = 2;
    }
    CallCreate_Statu status = 12;
    // Subject
    string subject = 13;
    // Updated At
    string updated_at = 14;
}

message CallCreated {
    // Call Identifier
    string id = 1;
}

message CallUpdate {
    // Contact Identifier
    string contact_id = 1;
    // Created At
    string created_at = 2;
    // Description
    string description = 3;
    // Direction
    enum CallUpdate_Direction {
        CALLUPDATE_DIRECTION_INBOUND = 0;
        CALLUPDATE_DIRECTION_OUTBOUND = 1;
    }
    CallUpdate_Direction direction = 4;
    // Ended At
    string ended_at = 5;
    // Owner User Identifier
    string owner_user_id = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum CallUpdate_Parent_type {
        CALLUPDATE_PARENT_TYPE_ACCOUNT = 0;
        CALLUPDATE_PARENT_TYPE_CONTACT = 1;
        CALLUPDATE_PARENT_TYPE_LEAD = 2;
        CALLUPDATE_PARENT_TYPE_OPPORTUNITY = 3;
        CALLUPDATE_PARENT_TYPE_TASK = 4;
        CALLUPDATE_PARENT_TYPE_USER = 5;
    }
    CallUpdate_Parent_type parent_type = 8;
    // Purpose
    enum CallUpdate_Purpose {
        CALLUPDATE_PURPOSE_NONE = 0;
        CALLUPDATE_PURPOSE_PROSPECTING = 1;
        CALLUPDATE_PURPOSE_ADMINISTRATIVE = 2;
        CALLUPDATE_PURPOSE_NEGOTIATION = 3;
        CALLUPDATE_PURPOSE_DEMO = 4;
        CALLUPDATE_PURPOSE_PROJECT = 5;
        CALLUPDATE_PURPOSE_SUPPORT = 6;
    }
    CallUpdate_Purpose purpose = 9;
    // Result
    string result = 10;
    // Started At
    string started_at = 11;
    // Status
    enum CallUpdate_Statu {
        CALLUPDATE_STATU_PLANNED = 0;
        CALLUPDATE_STATU_HELD = 1;
        CALLUPDATE_STATU_NOT_HELD = 2;
    }
    CallUpdate_Statu status = 12;
    // Subject
    string subject = 13;
    // Updated At
    string updated_at = 14;
}

message CallUpdated {
    // Call Identifier
    string id = 1;
}

message Contact {
    message Embedded {
            // Account Name
    string account_name = 1;
            // Address City
    string address_city = 2;
            // Address Country
    string address_country = 3;
            // Address State
    string address_state = 4;
            // Address Street
    string address_street = 5;
            // Address Zip
    string address_zip = 6;
            // Alternative Address City
    string alternate_address_city = 7;
            // Alternative Address Country
    string alternate_address_country = 8;
            // Alternative Address State
    string alternate_address_state = 9;
            // Alternative Address Street
    string alternate_address_street = 10;
            // Alternative Address Zip Code
    string alternate_address_zip = 11;
            // Created At
    string created_at = 12;
            // Date Created
    string date_created = 13;
            // Date Updated
    string date_updated = 14;
            // Department
    string department = 15;
            // Description
    string description = 16;
            // Do Not Call
    bool do_not_call = 17;
            // Email
    string email = 18;
            // Email Alternative
    string email_alt = 19;
            // Fax
    string fax = 20;
            // First Name
    string first_name = 21;
            // Full Name
    string full_name = 22;
            // Last Name
    string last_name = 23;
            // Lead Source
    enum Embedded_Lead_source {
            EMBEDDED_LEAD_SOURCE_PERSONAL_CONTACT = 0;
            EMBEDDED_LEAD_SOURCE_EXISTING_CUSTOMER = 1;
            EMBEDDED_LEAD_SOURCE_CALL = 2;
            EMBEDDED_LEAD_SOURCE_WEBSITE = 3;
            EMBEDDED_LEAD_SOURCE_EMAIL = 4;
            EMBEDDED_LEAD_SOURCE_CONFERENCE = 5;
            EMBEDDED_LEAD_SOURCE_TRADE_SHOW = 6;
            EMBEDDED_LEAD_SOURCE_EMPLOYEE = 7;
            EMBEDDED_LEAD_SOURCE_CAMPAIGN = 8;
            EMBEDDED_LEAD_SOURCE_HR = 9;
            EMBEDDED_LEAD_SOURCE_INBOUND_CALL = 10;
            EMBEDDED_LEAD_SOURCE_MAIL = 11;
            EMBEDDED_LEAD_SOURCE_PARTNER = 12;
            EMBEDDED_LEAD_SOURCE_WORD_OF_MOUTH = 13;
            EMBEDDED_LEAD_SOURCE_SELF_GENERATED = 14;
            EMBEDDED_LEAD_SOURCE_OTHER = 15;
        }
        Embedded_Lead_source lead_source = 24;
            // Name
    string name = 25;
            // Phone Home
    string phone_home = 26;
            // Phone Mobile
    string phone_mobile = 27;
            // Phone Work
    string phone_work = 28;
            // Salutation
    string salutation = 29;
            // Sync To Outlook
    bool sync_to_outlook = 30;
            // Title
    string title = 31;
            // Type
    string type = 32;
            // Updated At
    string updated_at = 33;
            // User
    string user = 34;
    }
    Embedded embedded = 1;
    // Contact Identifier
    string id = 2;
    message Relation {
            // Account Identifier
    string account_id = 1;
            // Owner Identifier
    string owner_id = 2;
            // Report To Identifier
    string report_to_id = 3;
            // User Identifier
    string user_id = 4;
    }
    Relation relation = 3;
}

message ContactCreate {
    // Account Identifier
    string account_id = 1;
    // Address City
    string address_city = 2;
    // Address Country
    string address_country = 3;
    // Address State
    string address_state = 4;
    // Address Street
    string address_street = 5;
    // Address Zip
    string address_zip = 6;
    // Alternative Address City
    string alternate_address_city = 7;
    // Alternative Address Country
    string alternate_address_country = 8;
    // Alternative Address State
    string alternate_address_state = 9;
    // Alternative Address Street
    string alternate_address_street = 10;
    // Alternative Address Zip Code
    string alternate_address_zip = 11;
    // Created At
    string created_at = 12;
    // Date Created
    string date_created = 13;
    // Date Updated
    string date_updated = 14;
    // Department
    string department = 15;
    // Description
    string description = 16;
    // Do Not Call
    bool do_not_call = 17;
    // Email
    string email = 18;
    // Email Alternative
    string email_alt = 19;
    // Fax
    string fax = 20;
    // First Name
    string first_name = 21;
    // Full Name
    string full_name = 22;
    // Last Name
    string last_name = 23;
    // Lead Source
    enum ContactCreate_Lead_source {
        CONTACTCREATE_LEAD_SOURCE_PERSONAL_CONTACT = 0;
        CONTACTCREATE_LEAD_SOURCE_EXISTING_CUSTOMER = 1;
        CONTACTCREATE_LEAD_SOURCE_CALL = 2;
        CONTACTCREATE_LEAD_SOURCE_WEBSITE = 3;
        CONTACTCREATE_LEAD_SOURCE_EMAIL = 4;
        CONTACTCREATE_LEAD_SOURCE_CONFERENCE = 5;
        CONTACTCREATE_LEAD_SOURCE_TRADE_SHOW = 6;
        CONTACTCREATE_LEAD_SOURCE_EMPLOYEE = 7;
        CONTACTCREATE_LEAD_SOURCE_CAMPAIGN = 8;
        CONTACTCREATE_LEAD_SOURCE_HR = 9;
        CONTACTCREATE_LEAD_SOURCE_INBOUND_CALL = 10;
        CONTACTCREATE_LEAD_SOURCE_MAIL = 11;
        CONTACTCREATE_LEAD_SOURCE_PARTNER = 12;
        CONTACTCREATE_LEAD_SOURCE_WORD_OF_MOUTH = 13;
        CONTACTCREATE_LEAD_SOURCE_SELF_GENERATED = 14;
        CONTACTCREATE_LEAD_SOURCE_OTHER = 15;
    }
    ContactCreate_Lead_source lead_source = 24;
    // Name
    string name = 25;
    // Owner Identifier
    string owner_id = 26;
    // Phone Home
    string phone_home = 27;
    // Phone Mobile
    string phone_mobile = 28;
    // Phone Work
    string phone_work = 29;
    // Report To Identifier
    string report_to_id = 30;
    // Salutation
    string salutation = 31;
    // Sync To Outlook
    bool sync_to_outlook = 32;
    // Title
    string title = 33;
    // Type
    string type = 34;
    // Updated At
    string updated_at = 35;
    // User
    string user = 36;
    // User Identifier
    string user_id = 37;
}

message ContactCreated {
    // Contact Identifier
    string id = 1;
}

message ContactUpdate {
    // Account Identifier
    string account_id = 1;
    // Address City
    string address_city = 2;
    // Address Country
    string address_country = 3;
    // Address State
    string address_state = 4;
    // Address Street
    string address_street = 5;
    // Address Zip
    string address_zip = 6;
    // Alternative Address City
    string alternate_address_city = 7;
    // Alternative Address Country
    string alternate_address_country = 8;
    // Alternative Address State
    string alternate_address_state = 9;
    // Alternative Address Street
    string alternate_address_street = 10;
    // Alternative Address Zip Code
    string alternate_address_zip = 11;
    // Created At
    string created_at = 12;
    // Date Created
    string date_created = 13;
    // Date Updated
    string date_updated = 14;
    // Department
    string department = 15;
    // Description
    string description = 16;
    // Do Not Call
    bool do_not_call = 17;
    // Email
    string email = 18;
    // Email Alternative
    string email_alt = 19;
    // Fax
    string fax = 20;
    // First Name
    string first_name = 21;
    // Full Name
    string full_name = 22;
    // Last Name
    string last_name = 23;
    // Lead Source
    enum ContactUpdate_Lead_source {
        CONTACTUPDATE_LEAD_SOURCE_PERSONAL_CONTACT = 0;
        CONTACTUPDATE_LEAD_SOURCE_EXISTING_CUSTOMER = 1;
        CONTACTUPDATE_LEAD_SOURCE_CALL = 2;
        CONTACTUPDATE_LEAD_SOURCE_WEBSITE = 3;
        CONTACTUPDATE_LEAD_SOURCE_EMAIL = 4;
        CONTACTUPDATE_LEAD_SOURCE_CONFERENCE = 5;
        CONTACTUPDATE_LEAD_SOURCE_TRADE_SHOW = 6;
        CONTACTUPDATE_LEAD_SOURCE_EMPLOYEE = 7;
        CONTACTUPDATE_LEAD_SOURCE_CAMPAIGN = 8;
        CONTACTUPDATE_LEAD_SOURCE_HR = 9;
        CONTACTUPDATE_LEAD_SOURCE_INBOUND_CALL = 10;
        CONTACTUPDATE_LEAD_SOURCE_MAIL = 11;
        CONTACTUPDATE_LEAD_SOURCE_PARTNER = 12;
        CONTACTUPDATE_LEAD_SOURCE_WORD_OF_MOUTH = 13;
        CONTACTUPDATE_LEAD_SOURCE_SELF_GENERATED = 14;
        CONTACTUPDATE_LEAD_SOURCE_OTHER = 15;
    }
    ContactUpdate_Lead_source lead_source = 24;
    // Name
    string name = 25;
    // Owner Identifier
    string owner_id = 26;
    // Phone Home
    string phone_home = 27;
    // Phone Mobile
    string phone_mobile = 28;
    // Phone Work
    string phone_work = 29;
    // Report To Identifier
    string report_to_id = 30;
    // Salutation
    string salutation = 31;
    // Sync To Outlook
    bool sync_to_outlook = 32;
    // Title
    string title = 33;
    // Type
    string type = 34;
    // Updated At
    string updated_at = 35;
    // User
    string user = 36;
    // User Identifier
    string user_id = 37;
}

message ContactUpdated {
    // Contact Identifier
    string id = 1;
}

message Count {
    // Total
    int32 total = 1;
}

message Crm {
    // API URL
    string api_url = 1;
    // CRM Identifier
    string id = 2;
    // Type
    enum Crm_Type {
        CRM_TYPE_BITRIX24 = 0;
        CRM_TYPE_SUGARCRM = 1;
        CRM_TYPE_SUITECRM = 2;
        CRM_TYPE_BPMONLINE = 3;
        CRM_TYPE_HUBSPOT = 4;
        CRM_TYPE_VTIGER = 5;
        CRM_TYPE_OROCRM = 6;
        CRM_TYPE_ZOHOCRM = 7;
        CRM_TYPE_INSIGHTLY = 8;
        CRM_TYPE_SALESFORCE = 9;
        CRM_TYPE_SOLVE360CRM = 10;
        CRM_TYPE_HIGHRISEHQ = 11;
        CRM_TYPE_PIPELINEDEALS = 12;
        CRM_TYPE_PIPEDRIVE = 13;
        CRM_TYPE_CAPSULECRM = 14;
        CRM_TYPE_ZURMO = 15;
        CRM_TYPE_MICROSOFTDYNAMICS = 16;
    }
    Crm_Type type = 3;
}

message CrmCreate {
    // API URL
    string api_url = 1;
    // Login
    string login = 2;
    // Password
    string password = 3;
    // Type
    enum CrmCreate_Type {
        CRMCREATE_TYPE_BITRIX24 = 0;
        CRMCREATE_TYPE_SUGARCRM = 1;
        CRMCREATE_TYPE_SUITECRM = 2;
        CRMCREATE_TYPE_BPMONLINE = 3;
        CRMCREATE_TYPE_HUBSPOT = 4;
        CRMCREATE_TYPE_VTIGER = 5;
        CRMCREATE_TYPE_OROCRM = 6;
        CRMCREATE_TYPE_ZOHOCRM = 7;
        CRMCREATE_TYPE_INSIGHTLY = 8;
        CRMCREATE_TYPE_SALESFORCE = 9;
        CRMCREATE_TYPE_SOLVE360CRM = 10;
        CRMCREATE_TYPE_HIGHRISEHQ = 11;
        CRMCREATE_TYPE_PIPELINEDEALS = 12;
        CRMCREATE_TYPE_PIPEDRIVE = 13;
        CRMCREATE_TYPE_CAPSULECRM = 14;
        CRMCREATE_TYPE_ZURMO = 15;
        CRMCREATE_TYPE_MICROSOFTDYNAMICS = 16;
    }
    CrmCreate_Type type = 4;
}

message CrmCreated {
    // CRM Identifier
    string id = 1;
}

message CrmUpdate {
    // API URL
    string api_url = 1;
    // Login
    string login = 2;
    // Password
    string password = 3;
    // Type
    enum CrmUpdate_Type {
        CRMUPDATE_TYPE_BITRIX24 = 0;
        CRMUPDATE_TYPE_SUGARCRM = 1;
        CRMUPDATE_TYPE_SUITECRM = 2;
        CRMUPDATE_TYPE_BPMONLINE = 3;
        CRMUPDATE_TYPE_HUBSPOT = 4;
        CRMUPDATE_TYPE_VTIGER = 5;
        CRMUPDATE_TYPE_OROCRM = 6;
        CRMUPDATE_TYPE_ZOHOCRM = 7;
        CRMUPDATE_TYPE_INSIGHTLY = 8;
        CRMUPDATE_TYPE_SALESFORCE = 9;
        CRMUPDATE_TYPE_SOLVE360CRM = 10;
        CRMUPDATE_TYPE_HIGHRISEHQ = 11;
        CRMUPDATE_TYPE_PIPELINEDEALS = 12;
        CRMUPDATE_TYPE_PIPEDRIVE = 13;
        CRMUPDATE_TYPE_CAPSULECRM = 14;
        CRMUPDATE_TYPE_ZURMO = 15;
        CRMUPDATE_TYPE_MICROSOFTDYNAMICS = 16;
    }
    CrmUpdate_Type type = 4;
}

message CrmUpdated {
    // CRM Identifier
    string id = 1;
}

message CustomField {
    message Embedded {
            // Decimal Places
    int32 decimal_places = 1;
            // Default Value
    string default_value = 2;
            // Description
    string description = 3;
            // Entity
    enum Embedded_Entity {
            EMBEDDED_ENTITY_ACCOUNT = 0;
            EMBEDDED_ENTITY_CONTACT = 1;
            EMBEDDED_ENTITY_USER = 2;
            EMBEDDED_ENTITY_OPPORTUNITY = 3;
            EMBEDDED_ENTITY_TASK = 4;
            EMBEDDED_ENTITY_LEAD = 5;
            EMBEDDED_ENTITY_NOTE = 6;
            EMBEDDED_ENTITY_ATTACHMENT = 7;
            EMBEDDED_ENTITY_EVENT = 8;
            EMBEDDED_ENTITY_EMAIL = 9;
            EMBEDDED_ENTITY_CALL = 10;
            EMBEDDED_ENTITY_MEETING = 11;
        }
        Embedded_Entity entity = 4;
            // Label
    string label = 5;
            // Length
    int32 length = 6;
            // Name
    string name = 7;
            // Required
    bool required = 8;
            // Select Pairs for field with type "select"
    repeated Select select = 9;
            // Type
    enum Embedded_Type {
            EMBEDDED_TYPE_STRING = 0;
            EMBEDDED_TYPE_INTEGER = 1;
            EMBEDDED_TYPE_DECIMAL = 2;
            EMBEDDED_TYPE_BOOLEAN = 3;
            EMBEDDED_TYPE_DATE = 4;
            EMBEDDED_TYPE_TIME = 5;
            EMBEDDED_TYPE_DATETIME = 6;
            EMBEDDED_TYPE_CHECKBOX = 7;
            EMBEDDED_TYPE_RADIO = 8;
            EMBEDDED_TYPE_SELECT = 9;
        }
        Embedded_Type type = 10;
    }
    Embedded embedded = 1;
    // Custom Field Identifier
    string id = 2;
}

message CustomFieldCreate {
    // Decimal Places
    int32 decimal_places = 1;
    // Default Value
    string default_value = 2;
    // Description
    string description = 3;
    // Entity
    enum CustomFieldCreate_Entity {
        CUSTOMFIELDCREATE_ENTITY_ACCOUNT = 0;
        CUSTOMFIELDCREATE_ENTITY_CONTACT = 1;
        CUSTOMFIELDCREATE_ENTITY_USER = 2;
        CUSTOMFIELDCREATE_ENTITY_OPPORTUNITY = 3;
        CUSTOMFIELDCREATE_ENTITY_TASK = 4;
        CUSTOMFIELDCREATE_ENTITY_LEAD = 5;
        CUSTOMFIELDCREATE_ENTITY_NOTE = 6;
        CUSTOMFIELDCREATE_ENTITY_ATTACHMENT = 7;
        CUSTOMFIELDCREATE_ENTITY_EVENT = 8;
        CUSTOMFIELDCREATE_ENTITY_EMAIL = 9;
        CUSTOMFIELDCREATE_ENTITY_CALL = 10;
        CUSTOMFIELDCREATE_ENTITY_MEETING = 11;
    }
    CustomFieldCreate_Entity entity = 4;
    // Label
    string label = 5;
    // Length
    int32 length = 6;
    // Name
    string name = 7;
    // Required
    bool required = 8;
    // Select Pairs for field with type "select"
    repeated SelectCreated select = 9;
    // Type
    enum CustomFieldCreate_Type {
        CUSTOMFIELDCREATE_TYPE_STRING = 0;
        CUSTOMFIELDCREATE_TYPE_INTEGER = 1;
        CUSTOMFIELDCREATE_TYPE_DECIMAL = 2;
        CUSTOMFIELDCREATE_TYPE_BOOLEAN = 3;
        CUSTOMFIELDCREATE_TYPE_DATE = 4;
        CUSTOMFIELDCREATE_TYPE_TIME = 5;
        CUSTOMFIELDCREATE_TYPE_DATETIME = 6;
        CUSTOMFIELDCREATE_TYPE_CHECKBOX = 7;
        CUSTOMFIELDCREATE_TYPE_RADIO = 8;
        CUSTOMFIELDCREATE_TYPE_SELECT = 9;
    }
    CustomFieldCreate_Type type = 10;
}

message CustomFieldCreated {
    // Custom Field Identifier
    string id = 1;
}

message CustomFieldUpdate {
    // Decimal Places
    int32 decimal_places = 1;
    // Default Value
    string default_value = 2;
    // Description
    string description = 3;
    // Entity
    enum CustomFieldUpdate_Entity {
        CUSTOMFIELDUPDATE_ENTITY_ACCOUNT = 0;
        CUSTOMFIELDUPDATE_ENTITY_CONTACT = 1;
        CUSTOMFIELDUPDATE_ENTITY_USER = 2;
        CUSTOMFIELDUPDATE_ENTITY_OPPORTUNITY = 3;
        CUSTOMFIELDUPDATE_ENTITY_TASK = 4;
        CUSTOMFIELDUPDATE_ENTITY_LEAD = 5;
        CUSTOMFIELDUPDATE_ENTITY_NOTE = 6;
        CUSTOMFIELDUPDATE_ENTITY_ATTACHMENT = 7;
        CUSTOMFIELDUPDATE_ENTITY_EVENT = 8;
        CUSTOMFIELDUPDATE_ENTITY_EMAIL = 9;
        CUSTOMFIELDUPDATE_ENTITY_CALL = 10;
        CUSTOMFIELDUPDATE_ENTITY_MEETING = 11;
    }
    CustomFieldUpdate_Entity entity = 4;
    // Label
    string label = 5;
    // Length
    int32 length = 6;
    // Name
    string name = 7;
    // Required
    bool required = 8;
    // Select Pairs for field with type "select"
    repeated SelectUpdated select = 9;
    // Type
    enum CustomFieldUpdate_Type {
        CUSTOMFIELDUPDATE_TYPE_STRING = 0;
        CUSTOMFIELDUPDATE_TYPE_INTEGER = 1;
        CUSTOMFIELDUPDATE_TYPE_DECIMAL = 2;
        CUSTOMFIELDUPDATE_TYPE_BOOLEAN = 3;
        CUSTOMFIELDUPDATE_TYPE_DATE = 4;
        CUSTOMFIELDUPDATE_TYPE_TIME = 5;
        CUSTOMFIELDUPDATE_TYPE_DATETIME = 6;
        CUSTOMFIELDUPDATE_TYPE_CHECKBOX = 7;
        CUSTOMFIELDUPDATE_TYPE_RADIO = 8;
        CUSTOMFIELDUPDATE_TYPE_SELECT = 9;
    }
    CustomFieldUpdate_Type type = 10;
}

message CustomFieldUpdated {
    // Custom Field Identifier
    string id = 1;
}

message Describe {
    // Entity
    string entity = 1;
    // Schema
    message Schema {
            // Create a resource request body schema
    message Create {
        }
        Create create = 1;
            // Fetch a resource response body schema
    message Fetch {
        }
        Fetch fetch = 2;
            // Fetch all or a subset of resources body response
    message FetchAll {
        }
        FetchAll fetchAll = 3;
            // Update a resource request body schema
    message Update {
        }
        Update update = 4;
    }
    Schema schema = 2;
}

message Email {
    message Embedded {
            // BCC
    string bcc = 1;
            // Body
    string body = 2;
            // CC
    string cc = 3;
            // Created At
    string created_at = 4;
            // Direction
    enum Embedded_Direction {
            EMBEDDED_DIRECTION_INBOUND = 0;
            EMBEDDED_DIRECTION_OUTBOUND = 1;
        }
        Embedded_Direction direction = 5;
            // From
    string from = 6;
            // Sent At
    string sent_at = 7;
            // Status
    enum Embedded_Statu {
            EMBEDDED_STATU_DRAFT = 0;
            EMBEDDED_STATU_PENDING = 1;
            EMBEDDED_STATU_SENT = 2;
        }
        Embedded_Statu status = 8;
            // Subject
    string subject = 9;
            // To
    string to = 10;
            // Updated At
    string updated_at = 11;
    }
    Embedded embedded = 1;
    // Email Identifier
    string id = 2;
    message Relation {
            // Owner User Identifier
    string owner_user_id = 1;
            // Parent Identifier
    string parent_id = 2;
            // Parent Type
    enum Relation_Parent_type {
            RELATION_PARENT_TYPE_ACCOUNT = 0;
            RELATION_PARENT_TYPE_OPPORTUNITY = 1;
            RELATION_PARENT_TYPE_CONTACT = 2;
            RELATION_PARENT_TYPE_LEAD = 3;
            RELATION_PARENT_TYPE_USER = 4;
            RELATION_PARENT_TYPE_TASK = 5;
        }
        Relation_Parent_type parent_type = 3;
    }
    Relation relation = 3;
}

message EmailCreate {
    // BCC
    string bcc = 1;
    // Body
    string body = 2;
    // CC
    string cc = 3;
    // Created At
    string created_at = 4;
    // Direction
    enum EmailCreate_Direction {
        EMAILCREATE_DIRECTION_INBOUND = 0;
        EMAILCREATE_DIRECTION_OUTBOUND = 1;
    }
    EmailCreate_Direction direction = 5;
    // From
    string from = 6;
    // Owner User Identifier
    string owner_user_id = 7;
    // Parent Identifier
    string parent_id = 8;
    // Parent Type
    enum EmailCreate_Parent_type {
        EMAILCREATE_PARENT_TYPE_ACCOUNT = 0;
        EMAILCREATE_PARENT_TYPE_OPPORTUNITY = 1;
        EMAILCREATE_PARENT_TYPE_CONTACT = 2;
        EMAILCREATE_PARENT_TYPE_LEAD = 3;
        EMAILCREATE_PARENT_TYPE_USER = 4;
        EMAILCREATE_PARENT_TYPE_TASK = 5;
    }
    EmailCreate_Parent_type parent_type = 9;
    // Sent At
    string sent_at = 10;
    // Status
    enum EmailCreate_Statu {
        EMAILCREATE_STATU_DRAFT = 0;
        EMAILCREATE_STATU_PENDING = 1;
        EMAILCREATE_STATU_SENT = 2;
    }
    EmailCreate_Statu status = 11;
    // Subject
    string subject = 12;
    // To
    string to = 13;
    // Updated At
    string updated_at = 14;
}

message EmailCreated {
    // Email Identifier
    string id = 1;
}

message EmailUpdate {
    // BCC
    string bcc = 1;
    // Body
    string body = 2;
    // CC
    string cc = 3;
    // Created At
    string created_at = 4;
    // Direction
    enum EmailUpdate_Direction {
        EMAILUPDATE_DIRECTION_INBOUND = 0;
        EMAILUPDATE_DIRECTION_OUTBOUND = 1;
    }
    EmailUpdate_Direction direction = 5;
    // From
    string from = 6;
    // Owner User Identifier
    string owner_user_id = 7;
    // Parent Identifier
    string parent_id = 8;
    // Parent Type
    enum EmailUpdate_Parent_type {
        EMAILUPDATE_PARENT_TYPE_ACCOUNT = 0;
        EMAILUPDATE_PARENT_TYPE_OPPORTUNITY = 1;
        EMAILUPDATE_PARENT_TYPE_CONTACT = 2;
        EMAILUPDATE_PARENT_TYPE_LEAD = 3;
        EMAILUPDATE_PARENT_TYPE_USER = 4;
        EMAILUPDATE_PARENT_TYPE_TASK = 5;
    }
    EmailUpdate_Parent_type parent_type = 9;
    // Sent At
    string sent_at = 10;
    // Status
    enum EmailUpdate_Statu {
        EMAILUPDATE_STATU_DRAFT = 0;
        EMAILUPDATE_STATU_PENDING = 1;
        EMAILUPDATE_STATU_SENT = 2;
    }
    EmailUpdate_Statu status = 11;
    // Subject
    string subject = 12;
    // To
    string to = 13;
    // Updated At
    string updated_at = 14;
}

message EmailUpdated {
    // Email Identifier
    string id = 1;
}

message Event {
    message Embedded {
            // Access
    enum Embedded_Access {
            EMBEDDED_ACCESS_PUBLIC = 0;
            EMBEDDED_ACCESS_PRIVATE = 1;
            EMBEDDED_ACCESS_OTHER = 2;
        }
        Embedded_Access access = 1;
            // Created At
    string created_at = 2;
            // Description
    string description = 3;
            // Ended At
    string ended_at = 4;
            // Is All Day
    bool is_all_day = 5;
            // Location
    string location = 6;
            // Started At
    string started_at = 7;
            // Subject
    string subject = 8;
            // Updated At
    string updated_at = 9;
    }
    Embedded embedded = 1;
    // Event Identifier
    string id = 2;
    message Relation {
            // Contact Identifier
    string contact_id = 1;
            // Owner User Identifier
    string owner_user_id = 2;
            // Parent Identifier
    string parent_id = 3;
            // Parent Type
    enum Relation_Parent_type {
            RELATION_PARENT_TYPE_ACCOUNT = 0;
            RELATION_PARENT_TYPE_CONTACT = 1;
            RELATION_PARENT_TYPE_LEAD = 2;
            RELATION_PARENT_TYPE_OPPORTUNITY = 3;
            RELATION_PARENT_TYPE_TASK = 4;
            RELATION_PARENT_TYPE_USER = 5;
        }
        Relation_Parent_type parent_type = 4;
    }
    Relation relation = 3;
}

message EventCreate {
    // Access
    enum EventCreate_Access {
        EVENTCREATE_ACCESS_PUBLIC = 0;
        EVENTCREATE_ACCESS_PRIVATE = 1;
        EVENTCREATE_ACCESS_OTHER = 2;
    }
    EventCreate_Access access = 1;
    // Contact Identifier
    string contact_id = 2;
    // Created At
    string created_at = 3;
    // Description
    string description = 4;
    // Ended At
    string ended_at = 5;
    // Is All Day
    bool is_all_day = 6;
    // Location
    string location = 7;
    // Owner User Identifier
    string owner_user_id = 8;
    // Parent Identifier
    string parent_id = 9;
    // Parent Type
    enum EventCreate_Parent_type {
        EVENTCREATE_PARENT_TYPE_ACCOUNT = 0;
        EVENTCREATE_PARENT_TYPE_CONTACT = 1;
        EVENTCREATE_PARENT_TYPE_LEAD = 2;
        EVENTCREATE_PARENT_TYPE_OPPORTUNITY = 3;
        EVENTCREATE_PARENT_TYPE_TASK = 4;
        EVENTCREATE_PARENT_TYPE_USER = 5;
    }
    EventCreate_Parent_type parent_type = 10;
    // Started At
    string started_at = 11;
    // Subject
    string subject = 12;
    // Updated At
    string updated_at = 13;
}

message EventCreated {
    // Event Identifier
    string id = 1;
}

message EventUpdate {
    // Access
    enum EventUpdate_Access {
        EVENTUPDATE_ACCESS_PUBLIC = 0;
        EVENTUPDATE_ACCESS_PRIVATE = 1;
        EVENTUPDATE_ACCESS_OTHER = 2;
    }
    EventUpdate_Access access = 1;
    // Contact Identifier
    string contact_id = 2;
    // Created At
    string created_at = 3;
    // Description
    string description = 4;
    // Ended At
    string ended_at = 5;
    // Is All Day
    bool is_all_day = 6;
    // Location
    string location = 7;
    // Owner User Identifier
    string owner_user_id = 8;
    // Parent Identifier
    string parent_id = 9;
    // Parent Type
    enum EventUpdate_Parent_type {
        EVENTUPDATE_PARENT_TYPE_ACCOUNT = 0;
        EVENTUPDATE_PARENT_TYPE_CONTACT = 1;
        EVENTUPDATE_PARENT_TYPE_LEAD = 2;
        EVENTUPDATE_PARENT_TYPE_OPPORTUNITY = 3;
        EVENTUPDATE_PARENT_TYPE_TASK = 4;
        EVENTUPDATE_PARENT_TYPE_USER = 5;
    }
    EventUpdate_Parent_type parent_type = 10;
    // Started At
    string started_at = 11;
    // Subject
    string subject = 12;
    // Updated At
    string updated_at = 13;
}

message EventUpdated {
    // Event Identifier
    string id = 1;
}

message Lead {
    message Embedded {
            // Account Name
    string account_name = 1;
            // Alternative City
    string alt_city = 2;
            // Alternative Country
    string alt_country = 3;
            // Alternative State
    string alt_state = 4;
            // Alternative Street
    string alt_street = 5;
            // Alternative Zip Code
    string alt_zip_code = 6;
            // Annual Revenue
    float annual_revenue = 7;
            // Annual Revenue
    string birth_date = 8;
            // City
    string city = 9;
            // Company
    string company = 10;
            // Country
    string country = 11;
            // Date Created
    string date_created = 12;
            // Date Updated
    string date_updated = 13;
            // Department
    string department = 14;
            // Description
    string description = 15;
            // Do Not Call
    bool do_not_call = 16;
            // Email
    string email = 17;
            // Email Home
    string email_home = 18;
            // Email Other
    string email_other = 19;
            // Fax
    string fax = 20;
            // First Name
    string first_name = 21;
            // Industry
    enum Embedded_Industry {
            EMBEDDED_INDUSTRY_INFORMATIONAL_TECHNOLOGY = 0;
            EMBEDDED_INDUSTRY_TELECOMMUNICATIONS = 1;
            EMBEDDED_INDUSTRY_MANUFACTURING = 2;
            EMBEDDED_INDUSTRY_BANKING = 3;
            EMBEDDED_INDUSTRY_CONSULTING = 4;
            EMBEDDED_INDUSTRY_FINANCE = 5;
            EMBEDDED_INDUSTRY_GOVERNMENT = 6;
            EMBEDDED_INDUSTRY_DELIVERY = 7;
            EMBEDDED_INDUSTRY_NONPROFIT = 8;
            EMBEDDED_INDUSTRY_ENTERTAINMENT = 9;
            EMBEDDED_INDUSTRY_BIOTECHNOLOGY = 10;
            EMBEDDED_INDUSTRY_CHEMICALS = 11;
            EMBEDDED_INDUSTRY_COMMUNICATIONS = 12;
            EMBEDDED_INDUSTRY_CONSTRUCTION = 13;
            EMBEDDED_INDUSTRY_EDUCATION = 14;
            EMBEDDED_INDUSTRY_ELECTRONICS = 15;
            EMBEDDED_INDUSTRY_ENERGY = 16;
            EMBEDDED_INDUSTRY_ENGINEERING = 17;
            EMBEDDED_INDUSTRY_ENVIRONMENTAL = 18;
            EMBEDDED_INDUSTRY_HEALTH_CARE = 19;
            EMBEDDED_INDUSTRY_HOSPITALITY = 20;
            EMBEDDED_INDUSTRY_MACHINERY = 21;
            EMBEDDED_INDUSTRY_MEDIA = 22;
            EMBEDDED_INDUSTRY_RECREATION = 23;
            EMBEDDED_INDUSTRY_RETAIL = 24;
            EMBEDDED_INDUSTRY_TRANSPORTATION = 25;
            EMBEDDED_INDUSTRY_UTILITIES = 26;
            EMBEDDED_INDUSTRY_OTHER = 27;
        }
        Embedded_Industry industry = 22;
            // Last Name
    string last_name = 23;
            // Lead Source
    enum Embedded_Lead_source {
            EMBEDDED_LEAD_SOURCE_PERSONAL_CONTACT = 0;
            EMBEDDED_LEAD_SOURCE_EXISTING_CUSTOMER = 1;
            EMBEDDED_LEAD_SOURCE_CALL = 2;
            EMBEDDED_LEAD_SOURCE_WEBSITE = 3;
            EMBEDDED_LEAD_SOURCE_EMAIL = 4;
            EMBEDDED_LEAD_SOURCE_CONFERENCE = 5;
            EMBEDDED_LEAD_SOURCE_TRADE_SHOW = 6;
            EMBEDDED_LEAD_SOURCE_EMPLOYEE = 7;
            EMBEDDED_LEAD_SOURCE_CAMPAIGN = 8;
            EMBEDDED_LEAD_SOURCE_HR = 9;
            EMBEDDED_LEAD_SOURCE_INBOUND_CALL = 10;
            EMBEDDED_LEAD_SOURCE_MAIL = 11;
            EMBEDDED_LEAD_SOURCE_PARTNER = 12;
            EMBEDDED_LEAD_SOURCE_WORD_OF_MOUTH = 13;
            EMBEDDED_LEAD_SOURCE_SELF_GENERATED = 14;
            EMBEDDED_LEAD_SOURCE_PURCHASED_LIST = 15;
            EMBEDDED_LEAD_SOURCE_OTHER = 16;
        }
        Embedded_Lead_source lead_source = 24;
            // Lead Source Description
    string lead_source_description = 25;
            // Opened
    string opened = 26;
            // Pager Number
    string pager = 27;
            // Phone Home
    string phone_home = 28;
            // Phone Mobile
    string phone_mobile = 29;
            // Phone Other
    string phone_other = 30;
            // Phone Work
    string phone_work = 31;
            // Referred By
    string referred_by = 32;
            // Salutation
    string salutation = 33;
            // Skype
    string skype_id = 34;
            // State
    string state = 35;
            // Status
    enum Embedded_Statu {
            EMBEDDED_STATU_UNASSIGNED = 0;
            EMBEDDED_STATU_RESPONSIBLE_ASSIGNED = 1;
            EMBEDDED_STATU_WAITING_FOR_DETAILS = 2;
            EMBEDDED_STATU_CANNOT_CONTACT = 3;
            EMBEDDED_STATU_ON_HOLD = 4;
            EMBEDDED_STATU_RESTORED = 5;
            EMBEDDED_STATU_IN_PROGRESS = 6;
            EMBEDDED_STATU_JUNK_LEAD = 7;
            EMBEDDED_STATU_CONVERTED = 8;
            EMBEDDED_STATU_ATTEMPTED_TO_CONTACT = 9;
            EMBEDDED_STATU_CONTACT_IN_FUTURE = 10;
            EMBEDDED_STATU_CONTACTED = 11;
            EMBEDDED_STATU_LOST_LEAD = 12;
            EMBEDDED_STATU_NOT_CONTACTED = 13;
            EMBEDDED_STATU_PRE_QUALIFIED = 14;
        }
        Embedded_Statu status = 36;
            // Status Description
    string status_description = 37;
            // Street
    string street = 38;
            // Suite
    string suite = 39;
            // Title
    string title = 40;
            // Type
    string type = 41;
            // Website
    string website = 42;
            // Zip Code
    string zip_code = 43;
    }
    Embedded embedded = 1;
    // Lead Identifier
    string id = 2;
    message Relation {
            // Account Identifier
    string account_id = 1;
            // Assigned User Identifier
    string assigned_user_id = 2;
            // Campaign Identifier
    string campaign_id = 3;
            // Contact Identifier
    string contact_id = 4;
            // Event Identifier
    string event_id = 5;
            // Opportunity Identifier
    string opportunity_id = 6;
            // Owner Identifier
    string owner_id = 7;
            // Task Identifier
    string task_id = 8;
    }
    Relation relation = 3;
}

message LeadCreate {
    // Account Identifier
    string account_id = 1;
    // Account Name
    string account_name = 2;
    // Alternative City
    string alt_city = 3;
    // Alternative Country
    string alt_country = 4;
    // Alternative State
    string alt_state = 5;
    // Alternative Street
    string alt_street = 6;
    // Alternative Zip Code
    string alt_zip_code = 7;
    // Annual Revenue
    float annual_revenue = 8;
    // Assigned User Identifier
    string assigned_user_id = 9;
    // Annual Revenue
    string birth_date = 10;
    // Campaign Identifier
    string campaign_id = 11;
    // City
    string city = 12;
    // Company
    string company = 13;
    // Contact Identifier
    string contact_id = 14;
    // Country
    string country = 15;
    // Date Created
    string date_created = 16;
    // Date Updated
    string date_updated = 17;
    // Department
    string department = 18;
    // Description
    string description = 19;
    // Do Not Call
    bool do_not_call = 20;
    // Email
    string email = 21;
    // Email Home
    string email_home = 22;
    // Email Other
    string email_other = 23;
    // Event Identifier
    string event_id = 24;
    // Fax
    string fax = 25;
    // First Name
    string first_name = 26;
    // Industry
    enum LeadCreate_Industry {
        LEADCREATE_INDUSTRY_INFORMATIONAL_TECHNOLOGY = 0;
        LEADCREATE_INDUSTRY_TELECOMMUNICATIONS = 1;
        LEADCREATE_INDUSTRY_MANUFACTURING = 2;
        LEADCREATE_INDUSTRY_BANKING = 3;
        LEADCREATE_INDUSTRY_CONSULTING = 4;
        LEADCREATE_INDUSTRY_FINANCE = 5;
        LEADCREATE_INDUSTRY_GOVERNMENT = 6;
        LEADCREATE_INDUSTRY_DELIVERY = 7;
        LEADCREATE_INDUSTRY_NONPROFIT = 8;
        LEADCREATE_INDUSTRY_ENTERTAINMENT = 9;
        LEADCREATE_INDUSTRY_BIOTECHNOLOGY = 10;
        LEADCREATE_INDUSTRY_CHEMICALS = 11;
        LEADCREATE_INDUSTRY_COMMUNICATIONS = 12;
        LEADCREATE_INDUSTRY_CONSTRUCTION = 13;
        LEADCREATE_INDUSTRY_EDUCATION = 14;
        LEADCREATE_INDUSTRY_ELECTRONICS = 15;
        LEADCREATE_INDUSTRY_ENERGY = 16;
        LEADCREATE_INDUSTRY_ENGINEERING = 17;
        LEADCREATE_INDUSTRY_ENVIRONMENTAL = 18;
        LEADCREATE_INDUSTRY_HEALTH_CARE = 19;
        LEADCREATE_INDUSTRY_HOSPITALITY = 20;
        LEADCREATE_INDUSTRY_MACHINERY = 21;
        LEADCREATE_INDUSTRY_MEDIA = 22;
        LEADCREATE_INDUSTRY_RECREATION = 23;
        LEADCREATE_INDUSTRY_RETAIL = 24;
        LEADCREATE_INDUSTRY_TRANSPORTATION = 25;
        LEADCREATE_INDUSTRY_UTILITIES = 26;
        LEADCREATE_INDUSTRY_OTHER = 27;
    }
    LeadCreate_Industry industry = 27;
    // Last Name
    string last_name = 28;
    // Lead Source
    enum LeadCreate_Lead_source {
        LEADCREATE_LEAD_SOURCE_PERSONAL_CONTACT = 0;
        LEADCREATE_LEAD_SOURCE_EXISTING_CUSTOMER = 1;
        LEADCREATE_LEAD_SOURCE_CALL = 2;
        LEADCREATE_LEAD_SOURCE_WEBSITE = 3;
        LEADCREATE_LEAD_SOURCE_EMAIL = 4;
        LEADCREATE_LEAD_SOURCE_CONFERENCE = 5;
        LEADCREATE_LEAD_SOURCE_TRADE_SHOW = 6;
        LEADCREATE_LEAD_SOURCE_EMPLOYEE = 7;
        LEADCREATE_LEAD_SOURCE_CAMPAIGN = 8;
        LEADCREATE_LEAD_SOURCE_HR = 9;
        LEADCREATE_LEAD_SOURCE_INBOUND_CALL = 10;
        LEADCREATE_LEAD_SOURCE_MAIL = 11;
        LEADCREATE_LEAD_SOURCE_PARTNER = 12;
        LEADCREATE_LEAD_SOURCE_WORD_OF_MOUTH = 13;
        LEADCREATE_LEAD_SOURCE_SELF_GENERATED = 14;
        LEADCREATE_LEAD_SOURCE_PURCHASED_LIST = 15;
        LEADCREATE_LEAD_SOURCE_OTHER = 16;
    }
    LeadCreate_Lead_source lead_source = 29;
    // Lead Source Description
    string lead_source_description = 30;
    // Opened
    string opened = 31;
    // Opportunity Identifier
    string opportunity_id = 32;
    // Owner Identifier
    string owner_id = 33;
    // Pager Number
    string pager = 34;
    // Phone Home
    string phone_home = 35;
    // Phone Mobile
    string phone_mobile = 36;
    // Phone Other
    string phone_other = 37;
    // Phone Work
    string phone_work = 38;
    // Referred By
    string referred_by = 39;
    // Salutation
    string salutation = 40;
    // Skype
    string skype_id = 41;
    // State
    string state = 42;
    // Status
    enum LeadCreate_Statu {
        LEADCREATE_STATU_UNASSIGNED = 0;
        LEADCREATE_STATU_RESPONSIBLE_ASSIGNED = 1;
        LEADCREATE_STATU_WAITING_FOR_DETAILS = 2;
        LEADCREATE_STATU_CANNOT_CONTACT = 3;
        LEADCREATE_STATU_ON_HOLD = 4;
        LEADCREATE_STATU_RESTORED = 5;
        LEADCREATE_STATU_IN_PROGRESS = 6;
        LEADCREATE_STATU_JUNK_LEAD = 7;
        LEADCREATE_STATU_CONVERTED = 8;
        LEADCREATE_STATU_ATTEMPTED_TO_CONTACT = 9;
        LEADCREATE_STATU_CONTACT_IN_FUTURE = 10;
        LEADCREATE_STATU_CONTACTED = 11;
        LEADCREATE_STATU_LOST_LEAD = 12;
        LEADCREATE_STATU_NOT_CONTACTED = 13;
        LEADCREATE_STATU_PRE_QUALIFIED = 14;
    }
    LeadCreate_Statu status = 43;
    // Status Description
    string status_description = 44;
    // Street
    string street = 45;
    // Suite
    string suite = 46;
    // Task Identifier
    string task_id = 47;
    // Title
    string title = 48;
    // Type
    string type = 49;
    // Website
    string website = 50;
    // Zip Code
    string zip_code = 51;
}

message LeadCreated {
    // Lead Identifier
    string id = 1;
}

message LeadUpdate {
    // Account Identifier
    string account_id = 1;
    // Account Name
    string account_name = 2;
    // Alternative City
    string alt_city = 3;
    // Alternative Country
    string alt_country = 4;
    // Alternative State
    string alt_state = 5;
    // Alternative Street
    string alt_street = 6;
    // Alternative Zip Code
    string alt_zip_code = 7;
    // Annual Revenue
    float annual_revenue = 8;
    // Assigned User Identifier
    string assigned_user_id = 9;
    // Annual Revenue
    string birth_date = 10;
    // Campaign Identifier
    string campaign_id = 11;
    // City
    string city = 12;
    // Company
    string company = 13;
    // Contact Identifier
    string contact_id = 14;
    // Country
    string country = 15;
    // Date Created
    string date_created = 16;
    // Date Updated
    string date_updated = 17;
    // Department
    string department = 18;
    // Description
    string description = 19;
    // Do Not Call
    bool do_not_call = 20;
    // Email
    string email = 21;
    // Email Home
    string email_home = 22;
    // Email Other
    string email_other = 23;
    // Event Identifier
    string event_id = 24;
    // Fax
    string fax = 25;
    // First Name
    string first_name = 26;
    // Industry
    enum LeadUpdate_Industry {
        LEADUPDATE_INDUSTRY_INFORMATIONAL_TECHNOLOGY = 0;
        LEADUPDATE_INDUSTRY_TELECOMMUNICATIONS = 1;
        LEADUPDATE_INDUSTRY_MANUFACTURING = 2;
        LEADUPDATE_INDUSTRY_BANKING = 3;
        LEADUPDATE_INDUSTRY_CONSULTING = 4;
        LEADUPDATE_INDUSTRY_FINANCE = 5;
        LEADUPDATE_INDUSTRY_GOVERNMENT = 6;
        LEADUPDATE_INDUSTRY_DELIVERY = 7;
        LEADUPDATE_INDUSTRY_NONPROFIT = 8;
        LEADUPDATE_INDUSTRY_ENTERTAINMENT = 9;
        LEADUPDATE_INDUSTRY_BIOTECHNOLOGY = 10;
        LEADUPDATE_INDUSTRY_CHEMICALS = 11;
        LEADUPDATE_INDUSTRY_COMMUNICATIONS = 12;
        LEADUPDATE_INDUSTRY_CONSTRUCTION = 13;
        LEADUPDATE_INDUSTRY_EDUCATION = 14;
        LEADUPDATE_INDUSTRY_ELECTRONICS = 15;
        LEADUPDATE_INDUSTRY_ENERGY = 16;
        LEADUPDATE_INDUSTRY_ENGINEERING = 17;
        LEADUPDATE_INDUSTRY_ENVIRONMENTAL = 18;
        LEADUPDATE_INDUSTRY_HEALTH_CARE = 19;
        LEADUPDATE_INDUSTRY_HOSPITALITY = 20;
        LEADUPDATE_INDUSTRY_MACHINERY = 21;
        LEADUPDATE_INDUSTRY_MEDIA = 22;
        LEADUPDATE_INDUSTRY_RECREATION = 23;
        LEADUPDATE_INDUSTRY_RETAIL = 24;
        LEADUPDATE_INDUSTRY_TRANSPORTATION = 25;
        LEADUPDATE_INDUSTRY_UTILITIES = 26;
        LEADUPDATE_INDUSTRY_OTHER = 27;
    }
    LeadUpdate_Industry industry = 27;
    // Last Name
    string last_name = 28;
    // Lead Source
    enum LeadUpdate_Lead_source {
        LEADUPDATE_LEAD_SOURCE_PERSONAL_CONTACT = 0;
        LEADUPDATE_LEAD_SOURCE_EXISTING_CUSTOMER = 1;
        LEADUPDATE_LEAD_SOURCE_CALL = 2;
        LEADUPDATE_LEAD_SOURCE_WEBSITE = 3;
        LEADUPDATE_LEAD_SOURCE_EMAIL = 4;
        LEADUPDATE_LEAD_SOURCE_CONFERENCE = 5;
        LEADUPDATE_LEAD_SOURCE_TRADE_SHOW = 6;
        LEADUPDATE_LEAD_SOURCE_EMPLOYEE = 7;
        LEADUPDATE_LEAD_SOURCE_CAMPAIGN = 8;
        LEADUPDATE_LEAD_SOURCE_HR = 9;
        LEADUPDATE_LEAD_SOURCE_INBOUND_CALL = 10;
        LEADUPDATE_LEAD_SOURCE_MAIL = 11;
        LEADUPDATE_LEAD_SOURCE_PARTNER = 12;
        LEADUPDATE_LEAD_SOURCE_WORD_OF_MOUTH = 13;
        LEADUPDATE_LEAD_SOURCE_SELF_GENERATED = 14;
        LEADUPDATE_LEAD_SOURCE_PURCHASED_LIST = 15;
        LEADUPDATE_LEAD_SOURCE_OTHER = 16;
    }
    LeadUpdate_Lead_source lead_source = 29;
    // Lead Source Description
    string lead_source_description = 30;
    // Opened
    string opened = 31;
    // Opportunity Identifier
    string opportunity_id = 32;
    // Owner Identifier
    string owner_id = 33;
    // Pager Number
    string pager = 34;
    // Phone Home
    string phone_home = 35;
    // Phone Mobile
    string phone_mobile = 36;
    // Phone Other
    string phone_other = 37;
    // Phone Work
    string phone_work = 38;
    // Referred By
    string referred_by = 39;
    // Salutation
    string salutation = 40;
    // Skype
    string skype_id = 41;
    // State
    string state = 42;
    // Status
    enum LeadUpdate_Statu {
        LEADUPDATE_STATU_UNASSIGNED = 0;
        LEADUPDATE_STATU_RESPONSIBLE_ASSIGNED = 1;
        LEADUPDATE_STATU_WAITING_FOR_DETAILS = 2;
        LEADUPDATE_STATU_CANNOT_CONTACT = 3;
        LEADUPDATE_STATU_ON_HOLD = 4;
        LEADUPDATE_STATU_RESTORED = 5;
        LEADUPDATE_STATU_IN_PROGRESS = 6;
        LEADUPDATE_STATU_JUNK_LEAD = 7;
        LEADUPDATE_STATU_CONVERTED = 8;
        LEADUPDATE_STATU_ATTEMPTED_TO_CONTACT = 9;
        LEADUPDATE_STATU_CONTACT_IN_FUTURE = 10;
        LEADUPDATE_STATU_CONTACTED = 11;
        LEADUPDATE_STATU_LOST_LEAD = 12;
        LEADUPDATE_STATU_NOT_CONTACTED = 13;
        LEADUPDATE_STATU_PRE_QUALIFIED = 14;
    }
    LeadUpdate_Statu status = 43;
    // Status Description
    string status_description = 44;
    // Street
    string street = 45;
    // Suite
    string suite = 46;
    // Task Identifier
    string task_id = 47;
    // Title
    string title = 48;
    // Type
    string type = 49;
    // Website
    string website = 50;
    // Zip Code
    string zip_code = 51;
}

message LeadUpdated {
    // Lead Identifier
    string id = 1;
}

message Meeting {
    message Embedded {
            // Created At
    string created_at = 1;
            // Description
    string description = 2;
            // Ended At
    string ended_at = 3;
            // Location
    string location = 4;
            // Result
    string result = 5;
            // Started At
    string started_at = 6;
            // Status
    enum Embedded_Statu {
            EMBEDDED_STATU_PLANNED = 0;
            EMBEDDED_STATU_HELD = 1;
            EMBEDDED_STATU_NOT_HELD = 2;
        }
        Embedded_Statu status = 7;
            // Subject
    string subject = 8;
            // Updated At
    string updated_at = 9;
    }
    Embedded embedded = 1;
    // Meeting Identifier
    string id = 2;
    message Relation {
            // Contact Identifier
    string contact_id = 1;
            // Owner User Identifier
    string owner_user_id = 2;
            // Parent Identifier
    string parent_id = 3;
            // Parent Type
    enum Relation_Parent_type {
            RELATION_PARENT_TYPE_ACCOUNT = 0;
            RELATION_PARENT_TYPE_CONTACT = 1;
            RELATION_PARENT_TYPE_LEAD = 2;
            RELATION_PARENT_TYPE_OPPORTUNITY = 3;
            RELATION_PARENT_TYPE_USER = 4;
        }
        Relation_Parent_type parent_type = 4;
    }
    Relation relation = 3;
}

message MeetingCreate {
    // Contact Identifier
    string contact_id = 1;
    // Created At
    string created_at = 2;
    // Description
    string description = 3;
    // Ended At
    string ended_at = 4;
    // Location
    string location = 5;
    // Owner User Identifier
    string owner_user_id = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum MeetingCreate_Parent_type {
        MEETINGCREATE_PARENT_TYPE_ACCOUNT = 0;
        MEETINGCREATE_PARENT_TYPE_CONTACT = 1;
        MEETINGCREATE_PARENT_TYPE_LEAD = 2;
        MEETINGCREATE_PARENT_TYPE_OPPORTUNITY = 3;
        MEETINGCREATE_PARENT_TYPE_USER = 4;
    }
    MeetingCreate_Parent_type parent_type = 8;
    // Result
    string result = 9;
    // Started At
    string started_at = 10;
    // Status
    enum MeetingCreate_Statu {
        MEETINGCREATE_STATU_PLANNED = 0;
        MEETINGCREATE_STATU_HELD = 1;
        MEETINGCREATE_STATU_NOT_HELD = 2;
    }
    MeetingCreate_Statu status = 11;
    // Subject
    string subject = 12;
    // Updated At
    string updated_at = 13;
}

message MeetingCreated {
    // Meeting Identifier
    string id = 1;
}

message MeetingUpdate {
    // Contact Identifier
    string contact_id = 1;
    // Created At
    string created_at = 2;
    // Description
    string description = 3;
    // Ended At
    string ended_at = 4;
    // Location
    string location = 5;
    // Owner User Identifier
    string owner_user_id = 6;
    // Parent Identifier
    string parent_id = 7;
    // Parent Type
    enum MeetingUpdate_Parent_type {
        MEETINGUPDATE_PARENT_TYPE_ACCOUNT = 0;
        MEETINGUPDATE_PARENT_TYPE_CONTACT = 1;
        MEETINGUPDATE_PARENT_TYPE_LEAD = 2;
        MEETINGUPDATE_PARENT_TYPE_OPPORTUNITY = 3;
        MEETINGUPDATE_PARENT_TYPE_USER = 4;
    }
    MeetingUpdate_Parent_type parent_type = 8;
    // Result
    string result = 9;
    // Started At
    string started_at = 10;
    // Status
    enum MeetingUpdate_Statu {
        MEETINGUPDATE_STATU_PLANNED = 0;
        MEETINGUPDATE_STATU_HELD = 1;
        MEETINGUPDATE_STATU_NOT_HELD = 2;
    }
    MeetingUpdate_Statu status = 11;
    // Subject
    string subject = 12;
    // Updated At
    string updated_at = 13;
}

message MeetingUpdated {
    // Meeting Identifier
    string id = 1;
}

message Note {
    message Embedded {
            // Body
    string body = 1;
            // Contact Name
    string contact_name = 2;
            // Created At
    string created_at = 3;
            // Owner User Name
    string owner_user_name = 4;
            // Parent Name
    string parent_name = 5;
            // Subject
    string subject = 6;
            // Updated At
    string updated_at = 7;
    }
    Embedded embedded = 1;
    // Note Identifier
    string id = 2;
    message Relation {
            // Owner User Identifier
    string owner_user_id = 1;
            // Parent Identifier
    string parent_id = 2;
            // Parent Type
    enum Relation_Parent_type {
            RELATION_PARENT_TYPE_ACCOUNT = 0;
            RELATION_PARENT_TYPE_CONTACT = 1;
            RELATION_PARENT_TYPE_LEAD = 2;
            RELATION_PARENT_TYPE_TASK = 3;
            RELATION_PARENT_TYPE_USER = 4;
            RELATION_PARENT_TYPE_OPPORTUNITY = 5;
            RELATION_PARENT_TYPE_EVENT = 6;
        }
        Relation_Parent_type parent_type = 3;
    }
    Relation relation = 3;
}

message NoteCreate {
    // Body
    string body = 1;
    // Contact Name
    string contact_name = 2;
    // Created At
    string created_at = 3;
    // Owner User Identifier
    string owner_user_id = 4;
    // Owner User Name
    string owner_user_name = 5;
    // Parent Identifier
    string parent_id = 6;
    // Parent Name
    string parent_name = 7;
    // Parent Type
    enum NoteCreate_Parent_type {
        NOTECREATE_PARENT_TYPE_ACCOUNT = 0;
        NOTECREATE_PARENT_TYPE_CONTACT = 1;
        NOTECREATE_PARENT_TYPE_LEAD = 2;
        NOTECREATE_PARENT_TYPE_TASK = 3;
        NOTECREATE_PARENT_TYPE_USER = 4;
        NOTECREATE_PARENT_TYPE_OPPORTUNITY = 5;
        NOTECREATE_PARENT_TYPE_EVENT = 6;
    }
    NoteCreate_Parent_type parent_type = 8;
    // Subject
    string subject = 9;
    // Updated At
    string updated_at = 10;
}

message NoteCreated {
    // Note Identifier
    string id = 1;
}

message NoteUpdate {
    // Body
    string body = 1;
    // Contact Name
    string contact_name = 2;
    // Created At
    string created_at = 3;
    // Owner User Identifier
    string owner_user_id = 4;
    // Owner User Name
    string owner_user_name = 5;
    // Parent Identifier
    string parent_id = 6;
    // Parent Name
    string parent_name = 7;
    // Parent Type
    enum NoteUpdate_Parent_type {
        NOTEUPDATE_PARENT_TYPE_ACCOUNT = 0;
        NOTEUPDATE_PARENT_TYPE_CONTACT = 1;
        NOTEUPDATE_PARENT_TYPE_LEAD = 2;
        NOTEUPDATE_PARENT_TYPE_TASK = 3;
        NOTEUPDATE_PARENT_TYPE_USER = 4;
        NOTEUPDATE_PARENT_TYPE_OPPORTUNITY = 5;
        NOTEUPDATE_PARENT_TYPE_EVENT = 6;
    }
    NoteUpdate_Parent_type parent_type = 8;
    // Subject
    string subject = 9;
    // Updated At
    string updated_at = 10;
}

message NoteUpdated {
    // Note Identifier
    string id = 1;
}

message Opportunity {
    message Embedded {
            // Account Name
    string account_name = 1;
            // Amount
    float amount = 2;
            // Assigned User Name
    string assigned_user_name = 3;
            // Campaign Identifier
    string campaign_id = 4;
            // Campaign Name
    string campaign_name = 5;
            // Currency Name
    string currency_name = 6;
            // Currency Symbol
    string currency_symbol = 7;
            // Date Closed
    string date_closed = 8;
            // Date Created
    string date_created = 9;
            // Description
    string description = 10;
            // Lead Source
    string lead_source = 11;
            // Name
    string name = 12;
            // Next Step
    string next_step = 13;
            // Probability
    float probability = 14;
            // Sales Stage
    enum Embedded_Sales_stage {
            EMBEDDED_SALES_STAGE_NEW = 0;
            EMBEDDED_SALES_STAGE_OPEN = 1;
            EMBEDDED_SALES_STAGE_DETAILS = 2;
            EMBEDDED_SALES_STAGE_PROPOSAL = 3;
            EMBEDDED_SALES_STAGE_NEGOTIATION = 4;
            EMBEDDED_SALES_STAGE_ABANDONED = 5;
            EMBEDDED_SALES_STAGE_SUSPENDED = 6;
            EMBEDDED_SALES_STAGE_WON = 7;
            EMBEDDED_SALES_STAGE_ON_HOLD = 8;
            EMBEDDED_SALES_STAGE_LOST = 9;
            EMBEDDED_SALES_STAGE_PROSPECTING = 10;
            EMBEDDED_SALES_STAGE_QUALIFICATION = 11;
            EMBEDDED_SALES_STAGE_NEEDS_ANALYSIS = 12;
            EMBEDDED_SALES_STAGE_VALUE_PROPOSITION = 13;
            EMBEDDED_SALES_STAGE_DECISION_MAKERS = 14;
            EMBEDDED_SALES_STAGE_PERCEPTION_ANALYSIS = 15;
            EMBEDDED_SALES_STAGE_CLOSED_LOST_TO_COMPETITION = 16;
            EMBEDDED_SALES_STAGE_OTHER = 17;
        }
        Embedded_Sales_stage sales_stage = 15;
            // Type
    string type = 16;
    }
    Embedded embedded = 1;
    // Opportunity Identifier
    string id = 2;
    message Relation {
            // Account Identifier
    string account_id = 1;
            // Assigned User Identifier
    string assigned_user_id = 2;
            // Contact Identifier
    string contact_id = 3;
            // Lead Identifier
    string lead_id = 4;
            // Owner Identifier
    string owner_id = 5;
    }
    Relation relation = 3;
}

message OpportunityCreate {
    // Account Identifier
    string account_id = 1;
    // Account Name
    string account_name = 2;
    // Amount
    float amount = 3;
    // Assigned User Identifier
    string assigned_user_id = 4;
    // Assigned User Name
    string assigned_user_name = 5;
    // Campaign Identifier
    string campaign_id = 6;
    // Campaign Name
    string campaign_name = 7;
    // Contact Identifier
    string contact_id = 8;
    // Currency Name
    string currency_name = 9;
    // Currency Symbol
    string currency_symbol = 10;
    // Date Closed
    string date_closed = 11;
    // Date Created
    string date_created = 12;
    // Description
    string description = 13;
    // Lead Identifier
    string lead_id = 14;
    // Lead Source
    string lead_source = 15;
    // Name
    string name = 16;
    // Next Step
    string next_step = 17;
    // Owner Identifier
    string owner_id = 18;
    // Probability
    float probability = 19;
    // Sales Stage
    enum OpportunityCreate_Sales_stage {
        OPPORTUNITYCREATE_SALES_STAGE_NEW = 0;
        OPPORTUNITYCREATE_SALES_STAGE_OPEN = 1;
        OPPORTUNITYCREATE_SALES_STAGE_DETAILS = 2;
        OPPORTUNITYCREATE_SALES_STAGE_PROPOSAL = 3;
        OPPORTUNITYCREATE_SALES_STAGE_NEGOTIATION = 4;
        OPPORTUNITYCREATE_SALES_STAGE_ABANDONED = 5;
        OPPORTUNITYCREATE_SALES_STAGE_SUSPENDED = 6;
        OPPORTUNITYCREATE_SALES_STAGE_WON = 7;
        OPPORTUNITYCREATE_SALES_STAGE_ON_HOLD = 8;
        OPPORTUNITYCREATE_SALES_STAGE_LOST = 9;
        OPPORTUNITYCREATE_SALES_STAGE_PROSPECTING = 10;
        OPPORTUNITYCREATE_SALES_STAGE_QUALIFICATION = 11;
        OPPORTUNITYCREATE_SALES_STAGE_NEEDS_ANALYSIS = 12;
        OPPORTUNITYCREATE_SALES_STAGE_VALUE_PROPOSITION = 13;
        OPPORTUNITYCREATE_SALES_STAGE_DECISION_MAKERS = 14;
        OPPORTUNITYCREATE_SALES_STAGE_PERCEPTION_ANALYSIS = 15;
        OPPORTUNITYCREATE_SALES_STAGE_CLOSED_LOST_TO_COMPETITION = 16;
        OPPORTUNITYCREATE_SALES_STAGE_OTHER = 17;
    }
    OpportunityCreate_Sales_stage sales_stage = 20;
    // Type
    string type = 21;
}

message OpportunityCreated {
    // Opportunity Identifier
    string id = 1;
}

message OpportunityUpdate {
    // Account Identifier
    string account_id = 1;
    // Account Name
    string account_name = 2;
    // Amount
    float amount = 3;
    // Assigned User Identifier
    string assigned_user_id = 4;
    // Assigned User Name
    string assigned_user_name = 5;
    // Campaign Identifier
    string campaign_id = 6;
    // Campaign Name
    string campaign_name = 7;
    // Contact Identifier
    string contact_id = 8;
    // Currency Name
    string currency_name = 9;
    // Currency Symbol
    string currency_symbol = 10;
    // Date Closed
    string date_closed = 11;
    // Date Created
    string date_created = 12;
    // Description
    string description = 13;
    // Lead Identifier
    string lead_id = 14;
    // Lead Source
    string lead_source = 15;
    // Name
    string name = 16;
    // Next Step
    string next_step = 17;
    // Owner Identifier
    string owner_id = 18;
    // Probability
    float probability = 19;
    // Sales Stage
    enum OpportunityUpdate_Sales_stage {
        OPPORTUNITYUPDATE_SALES_STAGE_NEW = 0;
        OPPORTUNITYUPDATE_SALES_STAGE_OPEN = 1;
        OPPORTUNITYUPDATE_SALES_STAGE_DETAILS = 2;
        OPPORTUNITYUPDATE_SALES_STAGE_PROPOSAL = 3;
        OPPORTUNITYUPDATE_SALES_STAGE_NEGOTIATION = 4;
        OPPORTUNITYUPDATE_SALES_STAGE_ABANDONED = 5;
        OPPORTUNITYUPDATE_SALES_STAGE_SUSPENDED = 6;
        OPPORTUNITYUPDATE_SALES_STAGE_WON = 7;
        OPPORTUNITYUPDATE_SALES_STAGE_ON_HOLD = 8;
        OPPORTUNITYUPDATE_SALES_STAGE_LOST = 9;
        OPPORTUNITYUPDATE_SALES_STAGE_PROSPECTING = 10;
        OPPORTUNITYUPDATE_SALES_STAGE_QUALIFICATION = 11;
        OPPORTUNITYUPDATE_SALES_STAGE_NEEDS_ANALYSIS = 12;
        OPPORTUNITYUPDATE_SALES_STAGE_VALUE_PROPOSITION = 13;
        OPPORTUNITYUPDATE_SALES_STAGE_DECISION_MAKERS = 14;
        OPPORTUNITYUPDATE_SALES_STAGE_PERCEPTION_ANALYSIS = 15;
        OPPORTUNITYUPDATE_SALES_STAGE_CLOSED_LOST_TO_COMPETITION = 16;
        OPPORTUNITYUPDATE_SALES_STAGE_OTHER = 17;
    }
    OpportunityUpdate_Sales_stage sales_stage = 20;
    // Type
    string type = 21;
}

message OpportunityUpdated {
    // Opportunity Identifier
    string id = 1;
}

message Select {
    // Label
    string label = 1;
    // Value
    string value = 2;
}

message SelectCreated {
    // Label
    string label = 1;
    // Value
    string value = 2;
}

message SelectUpdated {
    // Label
    string label = 1;
    // Value
    string value = 2;
}

message Task {
    message Embedded {
            // Account
    string account = 1;
            // Contact
    string contact = 2;
            // Created Date
    string created_date = 3;
            // Description
    string description = 4;
            // Due Date
    string due_date = 5;
            // Lead
    string lead = 6;
            // Name
    string name = 7;
            // Opportunity
    string opportunity = 8;
            // Owner
    string owner = 9;
            // Completed
    bool priority = 10;
            // Publicly visible
    bool publicly_visible = 11;
            // Remainder Date
    string reminder_date = 12;
            // Start Date
    string start_date = 13;
            // Status
    enum Embedded_Statu {
            EMBEDDED_STATU_DEFERRED = 0;
            EMBEDDED_STATU_NOT_STARTED = 1;
            EMBEDDED_STATU_IN_PROGRESS = 2;
            EMBEDDED_STATU_WAITING = 3;
            EMBEDDED_STATU_COMPLETED = 4;
        }
        Embedded_Statu status = 14;
            // Updated Date
    string updated_date = 15;
    }
    Embedded embedded = 1;
    // Task Identifier
    string id = 2;
    message Relation {
            // Account Identifier
    string account_id = 1;
            // Assigned User Identifier
    string assigned_user_id = 2;
            // Contact Identifier
    string contact_id = 3;
            // Lead Identifier
    string lead_id = 4;
            // Opportunity Identifier
    string opportunity_id = 5;
            // Owner Identifier
    string owner_id = 6;
            // Parent Identifier
    string parent_id = 7;
            // Reporter Identifier
    string reporter_id = 8;
    }
    Relation relation = 3;
}

message TaskCreate {
    // Account Identifier
    string account_id = 1;
    // Assigned User Identifier
    string assigned_user_id = 2;
    // Contact
    string contact = 3;
    // Contact Identifier
    string contact_id = 4;
    // Created Date
    string created_date = 5;
    // Description
    string description = 6;
    // Due Date
    string due_date = 7;
    // Lead Identifier
    string lead_id = 8;
    // Name
    string name = 9;
    // Opportunity
    string opportunity = 10;
    // Opportunity Identifier
    string opportunity_id = 11;
    // Owner
    string owner = 12;
    // Owner Identifier
    string owner_id = 13;
    // Parent Identifier
    string parent_id = 14;
    // Completed
    bool priority = 15;
    // Publicly visible
    bool publicly_visible = 16;
    // Remainder Date
    string reminder_date = 17;
    // Reporter Identifier
    string reporter_id = 18;
    // Start Date
    string start_date = 19;
    // Status
    enum TaskCreate_Statu {
        TASKCREATE_STATU_DEFERRED = 0;
        TASKCREATE_STATU_NOT_STARTED = 1;
        TASKCREATE_STATU_IN_PROGRESS = 2;
        TASKCREATE_STATU_WAITING = 3;
        TASKCREATE_STATU_COMPLETED = 4;
    }
    TaskCreate_Statu status = 20;
    // Updated Date
    string updated_date = 21;
}

message TaskCreated {
    // Task Identifier
    string id = 1;
}

message TaskUpdate {
    // Account Identifier
    string account_id = 1;
    // Assigned User Identifier
    string assigned_user_id = 2;
    // Contact
    string contact = 3;
    // Contact Identifier
    string contact_id = 4;
    // Created Date
    string created_date = 5;
    // Description
    string description = 6;
    // Due Date
    string due_date = 7;
    // Lead Identifier
    string lead_id = 8;
    // Name
    string name = 9;
    // Opportunity
    string opportunity = 10;
    // Opportunity Identifier
    string opportunity_id = 11;
    // Owner
    string owner = 12;
    // Owner Identifier
    string owner_id = 13;
    // Parent Identifier
    string parent_id = 14;
    // Completed
    bool priority = 15;
    // Publicly visible
    bool publicly_visible = 16;
    // Remainder Date
    string reminder_date = 17;
    // Reporter Identifier
    string reporter_id = 18;
    // Start Date
    string start_date = 19;
    // Status
    enum TaskUpdate_Statu {
        TASKUPDATE_STATU_DEFERRED = 0;
        TASKUPDATE_STATU_NOT_STARTED = 1;
        TASKUPDATE_STATU_IN_PROGRESS = 2;
        TASKUPDATE_STATU_WAITING = 3;
        TASKUPDATE_STATU_COMPLETED = 4;
    }
    TaskUpdate_Statu status = 20;
    // Updated Date
    string updated_date = 21;
}

message TaskUpdated {
    // Task Identifier
    string id = 1;
}

message User {
    message Embedded {
            // Address city
    string address_city = 1;
            // Address country
    string address_country = 2;
            // Address postal code
    string address_postal_code = 3;
            // Address state
    string address_state = 4;
            // Address street
    string address_street = 5;
            // Confirm password
    string confirm_password = 6;
            // Created by
    string created_by = 7;
            // Department
    string department = 8;
            // Description
    string description = 9;
            // Email
    string email = 10;
            // Email other
    string email_other = 11;
            // First name
    string firstname = 12;
            // Full name
    string fullname = 13;
            // Is active
    bool is_active = 14;
            // Is admin
    bool is_admin = 15;
            // Last name
    string lastname = 16;
            // Modified by
    string modified_by = 17;
            // Name
    string name = 18;
            // Phone home
    string phone_home = 19;
            // Phone mobile
    string phone_mobile = 20;
            // Phone other
    string phone_other = 21;
            // Phone work
    string phone_work = 22;
            // Position
    string position = 23;
            // Role
    string role = 24;
            // Signature
    string signature = 25;
            // Status
    string status = 26;
            // Title
    string title = 27;
            // User password
    string user_password = 28;
            // Website
    string website = 29;
    }
    Embedded embedded = 1;
    // User Identifier
    string id = 2;
    message Relation {
            // Role ID
    string roleid = 1;
    }
    Relation relation = 3;
}

message UserCreate {
    // Address city
    string address_city = 1;
    // Address country
    string address_country = 2;
    // Address postal code
    string address_postal_code = 3;
    // Address state
    string address_state = 4;
    // Address street
    string address_street = 5;
    // Confirm password
    string confirm_password = 6;
    // Created by
    string created_by = 7;
    // Department
    string department = 8;
    // Description
    string description = 9;
    // Email
    string email = 10;
    // Email other
    string email_other = 11;
    // First name
    string firstname = 12;
    // Full name
    string fullname = 13;
    // Is active
    bool is_active = 14;
    // Is admin
    bool is_admin = 15;
    // Last name
    string lastname = 16;
    // Modified by
    string modified_by = 17;
    // Name
    string name = 18;
    // Phone home
    string phone_home = 19;
    // Phone mobile
    string phone_mobile = 20;
    // Phone other
    string phone_other = 21;
    // Phone work
    string phone_work = 22;
    // Position
    string position = 23;
    // Role
    string role = 24;
    // Role ID
    string roleid = 25;
    // Signature
    string signature = 26;
    // Status
    string status = 27;
    // Title
    string title = 28;
    // User password
    string user_password = 29;
    // Website
    string website = 30;
}

message UserCreated {
    // User Identifier
    string id = 1;
}

message UserUpdate {
    // Address city
    string address_city = 1;
    // Address country
    string address_country = 2;
    // Address postal code
    string address_postal_code = 3;
    // Address state
    string address_state = 4;
    // Address street
    string address_street = 5;
    // Confirm password
    string confirm_password = 6;
    // Created by
    string created_by = 7;
    // Department
    string department = 8;
    // Description
    string description = 9;
    // Email
    string email = 10;
    // Email other
    string email_other = 11;
    // First name
    string firstname = 12;
    // Full name
    string fullname = 13;
    // Is active
    bool is_active = 14;
    // Is admin
    bool is_admin = 15;
    // Last name
    string lastname = 16;
    // Modified by
    string modified_by = 17;
    // Name
    string name = 18;
    // Phone home
    string phone_home = 19;
    // Phone mobile
    string phone_mobile = 20;
    // Phone other
    string phone_other = 21;
    // Phone work
    string phone_work = 22;
    // Position
    string position = 23;
    // Role
    string role = 24;
    // Role ID
    string roleid = 25;
    // Signature
    string signature = 26;
    // Status
    string status = 27;
    // Title
    string title = 28;
    // User password
    string user_password = 29;
    // Website
    string website = 30;
}

message UserUpdated {
    // User Identifier
    string id = 1;
}

service Data2CRM.APIService {
    // GET for Account
    // 
    // Returns all accounts from the system
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
      option (google.api.http) = {
        get: "/v1/account"
      };
    }
    // POST for Account
    // 
    // Add account into the system
    rpc PostAccount(PostAccountRequest) returns (AccountCreated) {
      option (google.api.http) = {
        post: "/v1/account"
        body: "body"
      };
    }
    // COUNT for Account
    // 
    // Count all accounts from the system
    rpc GetAccountCount(GetAccountCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/account/count"
      };
    }
    // DESCRIBE for Account
    // 
    // Returns describe for accounts
    rpc GetAccountDescribe(GetAccountDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/account/describe"
      };
    }
    // GET for Account
    // 
    // Return account information
    rpc GetAccountAccount_id(GetAccountAccount_idRequest) returns (Account) {
      option (google.api.http) = {
        get: "/v1/account/{account_id}"
      };
    }
    // PUT for Account
    // 
    // Update account information
    rpc PutAccountAccount_id(PutAccountAccount_idRequest) returns (AccountUpdated) {
      option (google.api.http) = {
        put: "/v1/account/{account_id}"
        body: "body"
      };
    }
    // DELETE for Account
    // 
    // Delete account information
    rpc DeleteAccountAccount_id(DeleteAccountAccount_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/account/{account_id}"
      };
    }
    // GET for Attachment
    // 
    // Returns all attachments from the system
    rpc GetAttachment(GetAttachmentRequest) returns (GetAttachmentResponse) {
      option (google.api.http) = {
        get: "/v1/attachment"
      };
    }
    // POST for Attachment
    // 
    // Add attachment into the system
    rpc PostAttachment(PostAttachmentRequest) returns (AttachmentCreated) {
      option (google.api.http) = {
        post: "/v1/attachment"
        body: "body"
      };
    }
    // COUNT for Attachment
    // 
    // Count all attachments from the system
    rpc GetAttachmentCount(GetAttachmentCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/attachment/count"
      };
    }
    // DESCRIBE for Attachment
    // 
    // Returns describe for attachments
    rpc GetAttachmentDescribe(GetAttachmentDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/attachment/describe"
      };
    }
    // GET for Attachment
    // 
    // Return attachment information
    rpc GetAttachmentAttachment_id(GetAttachmentAttachment_idRequest) returns (Attachment) {
      option (google.api.http) = {
        get: "/v1/attachment/{attachment_id}"
      };
    }
    // PUT for Attachment
    // 
    // Update attachment information
    rpc PutAttachmentAttachment_id(PutAttachmentAttachment_idRequest) returns (AttachmentUpdated) {
      option (google.api.http) = {
        put: "/v1/attachment/{attachment_id}"
        body: "body"
      };
    }
    // DELETE for Attachment
    // 
    // Delete attachment information
    rpc DeleteAttachmentAttachment_id(DeleteAttachmentAttachment_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/attachment/{attachment_id}"
      };
    }
    // GET for Call
    // 
    // Returns all calls from the system
    rpc GetCall(GetCallRequest) returns (GetCallResponse) {
      option (google.api.http) = {
        get: "/v1/call"
      };
    }
    // POST for Call
    // 
    // Add call into the system
    rpc PostCall(PostCallRequest) returns (CallCreated) {
      option (google.api.http) = {
        post: "/v1/call"
        body: "body"
      };
    }
    // COUNT for Call
    // 
    // Count all calls from the system
    rpc GetCallCount(GetCallCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/call/count"
      };
    }
    // DESCRIBE for Call
    // 
    // Returns describe for calls
    rpc GetCallDescribe(GetCallDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/call/describe"
      };
    }
    // GET for Call
    // 
    // Return call information
    rpc GetCallCall_id(GetCallCall_idRequest) returns (Call) {
      option (google.api.http) = {
        get: "/v1/call/{call_id}"
      };
    }
    // PUT for Call
    // 
    // Update call information
    rpc PutCallCall_id(PutCallCall_idRequest) returns (CallUpdated) {
      option (google.api.http) = {
        put: "/v1/call/{call_id}"
        body: "body"
      };
    }
    // DELETE for Call
    // 
    // Delete call information
    rpc DeleteCallCall_id(DeleteCallCall_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/call/{call_id}"
      };
    }
    // GET for Contact
    // 
    // Returns all contacts from the system
    rpc GetContact(GetContactRequest) returns (GetContactResponse) {
      option (google.api.http) = {
        get: "/v1/contact"
      };
    }
    // POST for Contact
    // 
    // Add contact into the system
    rpc PostContact(PostContactRequest) returns (ContactCreated) {
      option (google.api.http) = {
        post: "/v1/contact"
        body: "body"
      };
    }
    // COUNT for Contact
    // 
    // Count all contacts from the system
    rpc GetContactCount(GetContactCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/contact/count"
      };
    }
    // DESCRIBE for Contact
    // 
    // Returns describe for contacts
    rpc GetContactDescribe(GetContactDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/contact/describe"
      };
    }
    // GET for Contact
    // 
    // Return contact information
    rpc GetContactContact_id(GetContactContact_idRequest) returns (Contact) {
      option (google.api.http) = {
        get: "/v1/contact/{contact_id}"
      };
    }
    // PUT for Contact
    // 
    // Update contact information
    rpc PutContactContact_id(PutContactContact_idRequest) returns (ContactUpdated) {
      option (google.api.http) = {
        put: "/v1/contact/{contact_id}"
        body: "body"
      };
    }
    // DELETE for Contact
    // 
    // Delete contact information
    rpc DeleteContactContact_id(DeleteContactContact_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/contact/{contact_id}"
      };
    }
    // GET for Crm
    // 
    // Returns all CRMs from the system
    rpc GetCrm(GetCrmRequest) returns (GetCrmResponse) {
      option (google.api.http) = {
        get: "/v1/crm"
      };
    }
    // POST for Crm
    // 
    // Add CRM into the system<br><a href="http://www.data2crm.com/api/faqs/need-connect-crm-data2crm-api/" target="_blank">What do I need to connect a CRM to Data2CRM.API?</a>
    rpc PostCrm(PostCrmRequest) returns (CrmCreated) {
      option (google.api.http) = {
        post: "/v1/crm"
        body: "body"
      };
    }
    // COUNT for Crm
    // 
    // Count all CRMs from the system
    rpc GetCrmCount(GetCrmCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/crm/count"
      };
    }
    // GET for Crm
    // 
    // Return CRM information
    rpc GetCrmCrm_id(GetCrmCrm_idRequest) returns (Crm) {
      option (google.api.http) = {
        get: "/v1/crm/{crm_id}"
      };
    }
    // PUT for Crm
    // 
    // Update CRM information<br><a href="http://www.data2crm.com/api/faqs/need-connect-crm-data2crm-api/" target="_blank">What do I need to connect a CRM to Data2CRM.API?</a>
    rpc PutCrmCrm_id(PutCrmCrm_idRequest) returns (CrmUpdated) {
      option (google.api.http) = {
        put: "/v1/crm/{crm_id}"
        body: "body"
      };
    }
    // DELETE for Crm
    // 
    // Delete CRM information
    rpc DeleteCrmCrm_id(DeleteCrmCrm_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/crm/{crm_id}"
      };
    }
    // GET for CustomField
    // 
    // Returns all custom field from the system
    rpc GetCustomField(GetCustomFieldRequest) returns (GetCustomFieldResponse) {
      option (google.api.http) = {
        get: "/v1/customField"
      };
    }
    // POST for CustomField
    // 
    // Add custom field into the system
    rpc PostCustomField(PostCustomFieldRequest) returns (CustomFieldCreated) {
      option (google.api.http) = {
        post: "/v1/customField"
        body: "body"
      };
    }
    // GET for CustomField
    // 
    // Return custom field information
    rpc GetCustomFieldCustom_field_id(GetCustomFieldCustom_field_idRequest) returns (CustomField) {
      option (google.api.http) = {
        get: "/v1/customField/{custom_field_id}"
      };
    }
    // PUT for CustomField
    // 
    // Update custom field information
    rpc PutCustomFieldCustom_field_id(PutCustomFieldCustom_field_idRequest) returns (CustomFieldUpdated) {
      option (google.api.http) = {
        put: "/v1/customField/{custom_field_id}"
        body: "body"
      };
    }
    // DELETE for CustomField
    // 
    // Delete custom field information
    rpc DeleteCustomFieldCustom_field_id(DeleteCustomFieldCustom_field_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/customField/{custom_field_id}"
      };
    }
    // GET for Email
    // 
    // Returns all emails from the system
    rpc GetEmail(GetEmailRequest) returns (GetEmailResponse) {
      option (google.api.http) = {
        get: "/v1/email"
      };
    }
    // POST for Email
    // 
    // Add email into the system
    rpc PostEmail(PostEmailRequest) returns (EmailCreated) {
      option (google.api.http) = {
        post: "/v1/email"
        body: "body"
      };
    }
    // COUNT for Email
    // 
    // Count all emails from the system
    rpc GetEmailCount(GetEmailCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/email/count"
      };
    }
    // DESCRIBE for Email
    // 
    // Returns describe for emails
    rpc GetEmailDescribe(GetEmailDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/email/describe"
      };
    }
    // GET for Email
    // 
    // Return email information
    rpc GetEmailEmail_id(GetEmailEmail_idRequest) returns (Email) {
      option (google.api.http) = {
        get: "/v1/email/{email_id}"
      };
    }
    // PUT for Email
    // 
    // Update email information
    rpc PutEmailEmail_id(PutEmailEmail_idRequest) returns (EmailUpdated) {
      option (google.api.http) = {
        put: "/v1/email/{email_id}"
        body: "body"
      };
    }
    // DELETE for Email
    // 
    // Delete email information
    rpc DeleteEmailEmail_id(DeleteEmailEmail_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/email/{email_id}"
      };
    }
    // GET for Event
    // 
    // Returns all events from the system
    rpc GetEvent(GetEventRequest) returns (GetEventResponse) {
      option (google.api.http) = {
        get: "/v1/event"
      };
    }
    // POST for Event
    // 
    // Add event into the system
    rpc PostEvent(PostEventRequest) returns (EventCreated) {
      option (google.api.http) = {
        post: "/v1/event"
        body: "body"
      };
    }
    // COUNT for Event
    // 
    // Count all events from the system
    rpc GetEventCount(GetEventCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/event/count"
      };
    }
    // DESCRIBE for Event
    // 
    // Returns describe for events
    rpc GetEventDescribe(GetEventDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/event/describe"
      };
    }
    // GET for Event
    // 
    // Return event information
    rpc GetEventEvent_id(GetEventEvent_idRequest) returns (Event) {
      option (google.api.http) = {
        get: "/v1/event/{event_id}"
      };
    }
    // PUT for Event
    // 
    // Update event information
    rpc PutEventEvent_id(PutEventEvent_idRequest) returns (EventUpdated) {
      option (google.api.http) = {
        put: "/v1/event/{event_id}"
        body: "body"
      };
    }
    // DELETE for Event
    // 
    // Delete event information
    rpc DeleteEventEvent_id(DeleteEventEvent_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/event/{event_id}"
      };
    }
    // GET for Lead
    // 
    // Returns all leads from the system
    rpc GetLead(GetLeadRequest) returns (GetLeadResponse) {
      option (google.api.http) = {
        get: "/v1/lead"
      };
    }
    // POST for Lead
    // 
    // Add lead into the system
    rpc PostLead(PostLeadRequest) returns (LeadCreated) {
      option (google.api.http) = {
        post: "/v1/lead"
        body: "body"
      };
    }
    // COUNT for Lead
    // 
    // Count all leads from the system
    rpc GetLeadCount(GetLeadCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/lead/count"
      };
    }
    // DESCRIBE for Lead
    // 
    // Returns describe for leads
    rpc GetLeadDescribe(GetLeadDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/lead/describe"
      };
    }
    // GET for Lead
    // 
    // Return lead information
    rpc GetLeadLead_id(GetLeadLead_idRequest) returns (Lead) {
      option (google.api.http) = {
        get: "/v1/lead/{lead_id}"
      };
    }
    // PUT for Lead
    // 
    // Update lead information
    rpc PutLeadLead_id(PutLeadLead_idRequest) returns (LeadUpdated) {
      option (google.api.http) = {
        put: "/v1/lead/{lead_id}"
        body: "body"
      };
    }
    // DELETE for Lead
    // 
    // Delete lead information
    rpc DeleteLeadLead_id(DeleteLeadLead_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/lead/{lead_id}"
      };
    }
    // GET for Meeting
    // 
    // Returns all meetings from the system
    rpc GetMeeting(GetMeetingRequest) returns (GetMeetingResponse) {
      option (google.api.http) = {
        get: "/v1/meeting"
      };
    }
    // POST for Meeting
    // 
    // Add meeting into the system
    rpc PostMeeting(PostMeetingRequest) returns (MeetingCreated) {
      option (google.api.http) = {
        post: "/v1/meeting"
        body: "body"
      };
    }
    // COUNT for Meeting
    // 
    // Count all meetings from the system
    rpc GetMeetingCount(GetMeetingCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/meeting/count"
      };
    }
    // DESCRIBE for Meeting
    // 
    // Returns describe for meetings
    rpc GetMeetingDescribe(GetMeetingDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/meeting/describe"
      };
    }
    // GET for Meeting
    // 
    // Return meeting information
    rpc GetMeetingMeeting_id(GetMeetingMeeting_idRequest) returns (Meeting) {
      option (google.api.http) = {
        get: "/v1/meeting/{meeting_id}"
      };
    }
    // PUT for Meeting
    // 
    // Update meeting information
    rpc PutMeetingMeeting_id(PutMeetingMeeting_idRequest) returns (MeetingUpdated) {
      option (google.api.http) = {
        put: "/v1/meeting/{meeting_id}"
        body: "body"
      };
    }
    // DELETE for Meeting
    // 
    // Delete meeting information
    rpc DeleteMeetingMeeting_id(DeleteMeetingMeeting_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/meeting/{meeting_id}"
      };
    }
    // GET for Note
    // 
    // Returns all notes from the system
    rpc GetNote(GetNoteRequest) returns (GetNoteResponse) {
      option (google.api.http) = {
        get: "/v1/note"
      };
    }
    // POST for Note
    // 
    // Add note into the system
    rpc PostNote(PostNoteRequest) returns (NoteCreated) {
      option (google.api.http) = {
        post: "/v1/note"
        body: "body"
      };
    }
    // COUNT for Note
    // 
    // Count all notes from the system
    rpc GetNoteCount(GetNoteCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/note/count"
      };
    }
    // DESCRIBE for Note
    // 
    // Returns describe for notes
    rpc GetNoteDescribe(GetNoteDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/note/describe"
      };
    }
    // GET for Note
    // 
    // Return note information
    rpc GetNoteNote_id(GetNoteNote_idRequest) returns (Note) {
      option (google.api.http) = {
        get: "/v1/note/{note_id}"
      };
    }
    // PUT for Note
    // 
    // Update note information
    rpc PutNoteNote_id(PutNoteNote_idRequest) returns (NoteUpdated) {
      option (google.api.http) = {
        put: "/v1/note/{note_id}"
        body: "body"
      };
    }
    // DELETE for Note
    // 
    // Delete note information
    rpc DeleteNoteNote_id(DeleteNoteNote_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/note/{note_id}"
      };
    }
    // GET for Opportunity
    // 
    // Returns all opportunities from the system
    rpc GetOpportunity(GetOpportunityRequest) returns (GetOpportunityResponse) {
      option (google.api.http) = {
        get: "/v1/opportunity"
      };
    }
    // POST for Opportunity
    // 
    // Add opportunity into the system
    rpc PostOpportunity(PostOpportunityRequest) returns (OpportunityCreated) {
      option (google.api.http) = {
        post: "/v1/opportunity"
        body: "body"
      };
    }
    // COUNT for Opportunity
    // 
    // Count all opportunities from the system
    rpc GetOpportunityCount(GetOpportunityCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/opportunity/count"
      };
    }
    // DESCRIBE for Opportunity
    // 
    // Returns describe for opportunities
    rpc GetOpportunityDescribe(GetOpportunityDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/opportunity/describe"
      };
    }
    // GET for Opportunity
    // 
    // Return opportunity information
    rpc GetOpportunityOpportunity_id(GetOpportunityOpportunity_idRequest) returns (Opportunity) {
      option (google.api.http) = {
        get: "/v1/opportunity/{opportunity_id}"
      };
    }
    // PUT for Opportunity
    // 
    // Update opportunity information
    rpc PutOpportunityOpportunity_id(PutOpportunityOpportunity_idRequest) returns (OpportunityUpdated) {
      option (google.api.http) = {
        put: "/v1/opportunity/{opportunity_id}"
        body: "body"
      };
    }
    // DELETE for Opportunity
    // 
    // Delete opportunity information
    rpc DeleteOpportunityOpportunity_id(DeleteOpportunityOpportunity_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/opportunity/{opportunity_id}"
      };
    }
    // GET for Task
    // 
    // Returns all tasks from the system
    rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {
      option (google.api.http) = {
        get: "/v1/task"
      };
    }
    // POST for Task
    // 
    // Add task into the system
    rpc PostTask(PostTaskRequest) returns (TaskCreated) {
      option (google.api.http) = {
        post: "/v1/task"
        body: "body"
      };
    }
    // COUNT for Task
    // 
    // Count all tasks from the system
    rpc GetTaskCount(GetTaskCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/task/count"
      };
    }
    // DESCRIBE for Task
    // 
    // Returns describe for tasks
    rpc GetTaskDescribe(GetTaskDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/task/describe"
      };
    }
    // GET for Task
    // 
    // Return task information
    rpc GetTaskTask_id(GetTaskTask_idRequest) returns (Task) {
      option (google.api.http) = {
        get: "/v1/task/{task_id}"
      };
    }
    // PUT for Task
    // 
    // Update task information
    rpc PutTaskTask_id(PutTaskTask_idRequest) returns (TaskUpdated) {
      option (google.api.http) = {
        put: "/v1/task/{task_id}"
        body: "body"
      };
    }
    // DELETE for Task
    // 
    // Delete task information
    rpc DeleteTaskTask_id(DeleteTaskTask_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/task/{task_id}"
      };
    }
    // GET for User
    // 
    // Returns all users from the system
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
      option (google.api.http) = {
        get: "/v1/user"
      };
    }
    // POST for User
    // 
    // Add user into the system
    rpc PostUser(PostUserRequest) returns (UserCreated) {
      option (google.api.http) = {
        post: "/v1/user"
        body: "body"
      };
    }
    // COUNT for User
    // 
    // Count all users from the system
    rpc GetUserCount(GetUserCountRequest) returns (Count) {
      option (google.api.http) = {
        get: "/v1/user/count"
      };
    }
    // DESCRIBE for User
    // 
    // Returns describe for users
    rpc GetUserDescribe(GetUserDescribeRequest) returns (Describe) {
      option (google.api.http) = {
        get: "/v1/user/describe"
      };
    }
    // GET for User
    // 
    // Return user information
    rpc GetUserUser_id(GetUserUser_idRequest) returns (User) {
      option (google.api.http) = {
        get: "/v1/user/{user_id}"
      };
    }
    // PUT for User
    // 
    // Update user information
    rpc PutUserUser_id(PutUserUser_idRequest) returns (UserUpdated) {
      option (google.api.http) = {
        put: "/v1/user/{user_id}"
        body: "body"
      };
    }
    // DELETE for User
    // 
    // Delete user information
    rpc DeleteUserUser_id(DeleteUserUser_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/user/{user_id}"
      };
    }
}

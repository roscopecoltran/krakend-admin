syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package api.ecota.cov2;

message GetCatchement_areasIdRequest {
    // Numeric `id` of the Catchement Area
    int32 id = 1;
}

message GetCredit_cardsIdRequest {
    // Numeric `id` of the Credit Card
    int32 id = 1;
}

message GetProductsIdRequest {
    // Numeric `id` of the Product
    int32 id = 1;
}

message GetRidesIdRequest {
    // Numeric `id` of Ride
    int32 id = 1;
}

message GetRidesIdCancelRequest {
    // Numeric `id` of Ride
    int32 id = 1;
}

message GetRidesIdCancel_feesRequest {
    // Numeric `id` of Ride
    int32 id = 1;
}

message GetRidesIdEstimateRequest {
    // Numeric `id` of Ride
    int32 id = 1;
}

message PostRidesIdReserveRequest {
    // Numeric `id` of Ride
    int32 id = 1;
}

message GetRidesRequest {
    // Number of the page to load
    int32 page = 1;
    // Number of items per page to load
    int32 per_page = 2;
}

message PostRidesRequest {
    string page = 1;
    string per_page = 2;
}

message GetVersionRequest {
    // Ecotaco API version
    string version = 1;
}

service Api.Ecota.CoV2Service {
    // Retrieve the version API
    rpc Get(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//"
      };
    }
    // Get current user
    rpc GetAccounts(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//accounts"
      };
    }
    // Update User
    rpc PutAccounts(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//accounts"
      };
    }
    // Create a new account with an application key
    rpc PostAccounts(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//accounts"
      };
    }
    // Forget password with email
    rpc PostAccountsPassword(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//accounts/password"
      };
    }
    // Payment Methods
    rpc GetAccountsPayment_methods(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//accounts/payment_methods"
      };
    }
    // Settings
    rpc PostAccountsSettings(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//accounts/settings"
      };
    }
    // Login with email, password and application key
    rpc PostAccountsSign_in(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//accounts/sign_in"
      };
    }
    // Update Password
    rpc PutAccountsUpdate_password(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//accounts/update_password"
      };
    }
    // Get autocomplete places
    // 
    // For searching places just send the following attributes :
    // 
    // - **longitude** (optional, float) : The location longitude for the seach
    // 
    // - **latitude** (optional, float) : The location latitude for the seach
    // 
    // - **search** (required, string) : The search text (most than 3 char)
    rpc PostAddressesPlaces_autocomplete(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//addresses/places_autocomplete"
      };
    }
    // Get autocomplete places details
    rpc PostAddressesPlaces_details(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//addresses/places_details"
      };
    }
    // List all catchement areas
    rpc GetCatchement_areas(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//catchement_areas"
      };
    }
    // Get a Catchement Area
    rpc GetCatchement_areasId(GetCatchement_areasIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//catchement_areas/{id}"
      };
    }
    // List all CreditCards for the current User
    rpc GetCredit_cards(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//credit_cards"
      };
    }
    // Get a CreditCard
    rpc GetCredit_cardsId(GetCredit_cardsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//credit_cards/{id}"
      };
    }
    // List all products
    rpc GetProducts(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//products"
      };
    }
    // Get a Product
    rpc GetProductsId(GetProductsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//products/{id}"
      };
    }
    // Get all promotional codes for user
    rpc GetPromotional_codes(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//promotional_codes"
      };
    }
    // Add a promotional code
    rpc PostPromotional_codes(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//promotional_codes"
      };
    }
    // Get a ride
    rpc GetRidesId(GetRidesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//rides/{id}"
      };
    }
    // Cancel a Ride
    // 
    // **Must be authenticate**
    rpc GetRidesIdCancel(GetRidesIdCancelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//rides/{id}/cancel"
      };
    }
    // Cancel fee of a Ride
    // 
    // **Must be authenticate**
    rpc GetRidesIdCancel_fees(GetRidesIdCancel_feesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//rides/{id}/cancel_fees"
      };
    }
    // Estimate a ride
    rpc GetRidesIdEstimate(GetRidesIdEstimateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//rides/{id}/estimate"
      };
    }
    // Reserve a ride
    // 
    // To book, the ride must belong to the connected user. The ride must have a main passenger at least, the booking user id and the payment hash must be set.
    // 
    // **Must be authenticate**
    rpc PostRidesIdReserve(PostRidesIdReserveRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//rides/{id}/reserve"
      };
    }
    // Get all user rides
    rpc GetRides(GetRidesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//rides?page={page}&per_page={per_page}"
      };
    }
    // Create a ride
    rpc PostRides(PostRidesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//rides?page={page}&per_page={per_page}"
      };
    }
    // Retrieve the Entry Point on Version
    rpc GetVersion(GetVersionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "//{version}"
      };
    }
}

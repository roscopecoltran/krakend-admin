syntax = "proto3";

import "google/api/annotations.proto";

package hetrashotelapiversion0;

message GetApiHotelV0HotelsRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
}

message GetApiHotelV0HotelsResponse {
    repeated Hotel items = 1;
}

message GetApiHotelV0HotelsHotelIdRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    int32 hotelId = 3;
}

message GetApiHotelV0HotelsHotelIdCodesRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // Return all results matching the specified code. A code is unique in combination with the type
    //             which means when you query for a code you could get multiple results each for a different type
    string code = 3;
    // The hotel id you are trying to find codes for.
    int32 hotelId = 4;
    // Return all codes for the specified type
    enum GetApiHotelV0HotelsHotelIdCodesRequest_Type {
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_GUESTREQUEST = 0;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_REQUESTDIETARY = 1;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_VIPSTATUS = 2;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_REASONFORRATECHANGE = 3;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_REGRETS = 4;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_MARKETSEGMENTS = 5;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_SOURCEOFBUSINESS = 6;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_LOYALTYPROGRAM = 7;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_CANCELLATIONREASON = 8;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_ACCOUNTTYPE = 9;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_ACCOUNTRANK = 10;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_VIPLEVEL = 11;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_TITLE = 12;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_CONTACTFUNCTION = 13;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_TERRITORY = 14;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_CORRESPONDENCETYPE = 15;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_EXTERNALPROGRAMTYPE = 16;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_REVENUEBUCKET = 17;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_ADDITIONALREVENUEBUCKET = 18;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_ADDITIONALSTATISTICSBUCKETS = 19;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_MEALPERIOD = 20;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_BILLINGCYCLE = 21;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_REMINDERCYCLE = 22;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_MAJORMARKETSEGMENTS = 23;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_DOCUMENTTYPE = 24;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_ACTIVITYTYPE = 25;
        GETAPIHOTELV0HOTELSHOTELIDCODESREQUEST_TYPE_RESERVATIONLABELS = 26;
    }
    GetApiHotelV0HotelsHotelIdCodesRequest_Type type = 5;
}

message GetApiHotelV0HotelsHotelIdCodesIdRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // The hotel id the code available for.
    int32 hotelId = 3;
    // The code identifier you want to see details for.
    string id = 4;
}

message GetApiHotelV0HotelsHotelIdRateplansRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // Return all rateplans having the specified rateplan as base rateplan
    string baseRateplan = 3;
    // Return all rateplans sold through the specified channel
    string channelCode = 4;
    // Return all rateplans that are sold through at least one channel out of the specified channel group
    string channelGroup = 5;
    // Return all rateplans having commisionable status
    bool commissionable = 6;
    // Return all rateplans belonging to the specified rateplan group
    string group = 7;
    // The hotel id you are trying to find rateplans for.
    int32 hotelId = 8;
    // Return all rateplans having at least one of the specified services included
    repeated string includedServices = 9;
    // Return total number of items for a given filter criteria.
    enum GetApiHotelV0HotelsHotelIdRateplansRequest_Inlinecount {
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANSREQUEST_INLINECOUNT_NONE = 0;
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANSREQUEST_INLINECOUNT_ALLPAGES = 1;
    }
    GetApiHotelV0HotelsHotelIdRateplansRequest_Inlinecount inlinecount = 10;
    // Return all rateplans having one of the specified values as a market code
    repeated string marketCodes = 11;
    // Return all rateplans by which at least one of the specified room types are sold
    repeated string roomTypes = 12;
    // Specify which rateplans to return. If you do not specify a value you will by default get active
    //             rateplans.
    enum GetApiHotelV0HotelsHotelIdRateplansRequest_SellingStatu {
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANSREQUEST_SELLINGSTATU_ACTIVE = 0;
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANSREQUEST_SELLINGSTATU_INACTIVE = 1;
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANSREQUEST_SELLINGSTATU_ALL = 2;
    }
    GetApiHotelV0HotelsHotelIdRateplansRequest_SellingStatu sellingStatus = 13;
    // Amount of items to skip.
    int32 skip = 14;
    // Amount of items to select.
    int32 top = 15;
}

message GetApiHotelV0HotelsHotelIdRateplans$CountRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // Return all rateplans having the specified rateplan as base rateplan
    string baseRateplan = 3;
    // Return all rateplans sold through the specified channel
    string channelCode = 4;
    // Return all rateplans that are sold through at least one channel out of the specified channel group
    string channelGroup = 5;
    // Return all rateplans having commisionable status
    bool commissionable = 6;
    // Return all rateplans belonging to the specified rateplan group
    string group = 7;
    // The hotel you are counting the rateplans for.
    int32 hotelId = 8;
    // Return all rateplans having at least one of the specified services included
    repeated string includedServices = 9;
    // Return all rateplans having one of the specified values as a market code
    repeated string marketCodes = 10;
    // Return all rateplans by which at least one of the specified room types are sold
    repeated string roomTypes = 11;
    // Specify which rateplans to return. If you do not specify a value you will by default get active
    //             rateplans.
    enum GetApiHotelV0HotelsHotelIdRateplans$CountRequest_SellingStatu {
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANS$COUNTREQUEST_SELLINGSTATU_ACTIVE = 0;
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANS$COUNTREQUEST_SELLINGSTATU_INACTIVE = 1;
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANS$COUNTREQUEST_SELLINGSTATU_ALL = 2;
    }
    GetApiHotelV0HotelsHotelIdRateplans$CountRequest_SellingStatu sellingStatus = 12;
}

message GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // The hotel id the rateplan belongs to.
    int32 hotelId = 3;
    // The code of the rateplan you want to see details for.
    string rateplanCode = 4;
}

message GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // You can expand the supplements per room type on demand. By default they are not shown.
    enum GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesRequest_Expand {
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANSRATEPLANCODERATESREQUEST_EXPAND_ROOMTYPESUPPLEMENTS = 0;
    }
    GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesRequest_Expand expand = 3;
    // Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>
    //             is limited to 365 days.
    string from = 4;
    // The hotel id the rateplan belongs to.
    int32 hotelId = 5;
    // Return total number of items for a given filter criteria.
    enum GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesRequest_Inlinecount {
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANSRATEPLANCODERATESREQUEST_INLINECOUNT_NONE = 0;
        GETAPIHOTELV0HOTELSHOTELIDRATEPLANSRATEPLANCODERATESREQUEST_INLINECOUNT_ALLPAGES = 1;
    }
    GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesRequest_Inlinecount inlinecount = 6;
    // The code of the rateplan you want to see details for.
    string rateplanCode = 7;
    // Amount of items to skip.
    int32 skip = 8;
    // Defines the first business day you would like to get rates for.
    string to = 9;
    // Amount of items to select.
    int32 top = 10;
}

message GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRates$CountRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>
    //             is limited to 365 days.
    string from = 3;
    // The hotel id the rateplan belongs to.
    int32 hotelId = 4;
    // The code of the rateplan you want to count daily rates for.
    string rateplanCode = 5;
    // Defines the first business day you would like to get rates for.
    string to = 6;
}

message GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesBusinessDayRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // The business day you want to get the rate setup for.
    string businessDay = 3;
    // The hotel id the rateplan belongs to.
    int32 hotelId = 4;
    // The code of the rateplan you want to see details for.
    string rateplanCode = 5;
}

message GetApiHotelV0HotelsHotelIdRoom_typesRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // The hotel id the room type belongs to.
    int32 hotelId = 3;
}

message GetApiHotelV0HotelsHotelIdRoom_typesResponse {
    repeated RoomType items = 1;
}

message GetApiHotelV0HotelsHotelIdRoom_typesCodeRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // The code of the room type you want to see details for.
    string code = 3;
    // The hotel id the room type belongs to.
    int32 hotelId = 4;
}

message GetApiHotelV0HotelsHotelIdRoomsRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // Return result only for rooms having all of the given amenities. You can provide a comma seperated list of 
    //             amenity codes.
    repeated string amenities = 3;
    // Return results only for rooms that have the given room condition status.
    repeated string conditions = 4;
    // The hotel you are trying to find rooms for.
    int32 hotelId = 5;
    // Return total number of items for a given filter criteria.
    enum GetApiHotelV0HotelsHotelIdRoomsRequest_Inlinecount {
        GETAPIHOTELV0HOTELSHOTELIDROOMSREQUEST_INLINECOUNT_NONE = 0;
        GETAPIHOTELV0HOTELSHOTELIDROOMSREQUEST_INLINECOUNT_ALLPAGES = 1;
    }
    GetApiHotelV0HotelsHotelIdRoomsRequest_Inlinecount inlinecount = 6;
    // Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of 
    //             location codes.
    repeated string locations = 7;
    // Return results only for rooms that have the given maintenance status.
    repeated string maintenances = 8;
    // Return results only for rooms that have the given frontdesk ocuppancy status.
    enum GetApiHotelV0HotelsHotelIdRoomsRequest_Occupancy {
        GETAPIHOTELV0HOTELSHOTELIDROOMSREQUEST_OCCUPANCY_OCCUPIED = 0;
        GETAPIHOTELV0HOTELSHOTELIDROOMSREQUEST_OCCUPANCY_VACANT = 1;
    }
    GetApiHotelV0HotelsHotelIdRoomsRequest_Occupancy occupancy = 9;
    // Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
    repeated string roomTypes = 10;
    // Amount of items to skip.
    int32 skip = 11;
    // Amount of items to select.
    int32 top = 12;
    // Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of 
    //             view codes.
    repeated string views = 13;
}

message GetApiHotelV0HotelsHotelIdRooms$CountRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // Return result only for rooms having all of the given amenities. You can provide a comma seperated list of 
    //             amenity codes.
    repeated string amenities = 3;
    // Return results only for rooms that have the given room condition status.
    repeated string conditions = 4;
    // The hotel you are counting the rooms for.
    int32 hotelId = 5;
    // Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of 
    //             location codes.
    repeated string locations = 6;
    // Return results only for rooms that have the given maintenance status.
    repeated string maintenances = 7;
    // Return results only for rooms that have the given frontdesk ocuppancy status.
    enum GetApiHotelV0HotelsHotelIdRooms$CountRequest_Occupancy {
        GETAPIHOTELV0HOTELSHOTELIDROOMS$COUNTREQUEST_OCCUPANCY_OCCUPIED = 0;
        GETAPIHOTELV0HOTELSHOTELIDROOMS$COUNTREQUEST_OCCUPANCY_VACANT = 1;
    }
    GetApiHotelV0HotelsHotelIdRooms$CountRequest_Occupancy occupancy = 8;
    // Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
    repeated string roomTypes = 9;
    // Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of 
    //             view codes.
    repeated string views = 10;
}

message GetApiHotelV0HotelsHotelIdRoomsAvailableRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // Specifies number of adults the returned rooms will have to be able to house. The default value is 1.
    string adults = 3;
    // Return result only for rooms having all of the given amenities. You can provide a comma seperated list of 
    //             amenity codes.
    repeated string amenities = 4;
    // Rooms returned will not be assigned to a reservation or be under maintenance between this date
    //             and the specified to date. Still there could be departing reservations or ending maintenances
    //             for this date.
    string from = 5;
    // The hotel you are looking for available rooms.
    int32 hotelId = 6;
    // Should rooms that are set OutOfService in the defined time period be returned as available. By default
    //             they are not.
    bool includeOutOfService = 7;
    // Return total number of items for a given filter criteria.
    enum GetApiHotelV0HotelsHotelIdRoomsAvailableRequest_Inlinecount {
        GETAPIHOTELV0HOTELSHOTELIDROOMSAVAILABLEREQUEST_INLINECOUNT_NONE = 0;
        GETAPIHOTELV0HOTELSHOTELIDROOMSAVAILABLEREQUEST_INLINECOUNT_ALLPAGES = 1;
    }
    GetApiHotelV0HotelsHotelIdRoomsAvailableRequest_Inlinecount inlinecount = 8;
    // Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of 
    //             location codes.
    repeated string locations = 9;
    // Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
    repeated string roomTypes = 10;
    // Amount of items to skip.
    int32 skip = 11;
    // Rooms returned will not be assigned to a reservation or be under maintenance between the specified
    //             from date and this date. Still there could be arriving reservations or beginning maintenances
    //             for this date.
    string to = 12;
    // Amount of items to select.
    int32 top = 13;
    // Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of 
    //             view codes.
    repeated string views = 14;
}

message GetApiHotelV0HotelsHotelIdRoomsRoomNumberRequest {
    // Application identifier
    string App_Id = 1;
    // Application key.
    string App_Key = 2;
    // The hotel id the room belongs to.
    int32 hotelId = 3;
    // The room number you want to see details for.
    string roomNumber = 4;
}

message AccessControlInfo {
    // List of codes of distribution channels
    repeated string channel_codes = 1;
    // Code of the distribution channel group
    string channel_group = 2;
}

message CodeBaseEntry {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // The code value. This value you will see in reservations as market code and in other
    //             resources like the revenue buckets in transactions
    string code = 2;
    // This attribute tells you if this code is the default code for the specific type or not.
    //             Not all the types of codes need to have a default code
    bool default = 3;
    // The id of the code
    string id = 4;
    // The name of the code that usually is more human readable
    string name = 5;
    // The type or category of the code
    enum CodeBaseEntry_Type {
        CODEBASEENTRY_TYPE_GUESTREQUEST = 0;
        CODEBASEENTRY_TYPE_REQUESTDIETARY = 1;
        CODEBASEENTRY_TYPE_VIPSTATUS = 2;
        CODEBASEENTRY_TYPE_REASONFORRATECHANGE = 3;
        CODEBASEENTRY_TYPE_REGRETS = 4;
        CODEBASEENTRY_TYPE_MARKETSEGMENTS = 5;
        CODEBASEENTRY_TYPE_SOURCEOFBUSINESS = 6;
        CODEBASEENTRY_TYPE_LOYALTYPROGRAM = 7;
        CODEBASEENTRY_TYPE_CANCELLATIONREASON = 8;
        CODEBASEENTRY_TYPE_ACCOUNTTYPE = 9;
        CODEBASEENTRY_TYPE_ACCOUNTRANK = 10;
        CODEBASEENTRY_TYPE_VIPLEVEL = 11;
        CODEBASEENTRY_TYPE_TITLE = 12;
        CODEBASEENTRY_TYPE_CONTACTFUNCTION = 13;
        CODEBASEENTRY_TYPE_TERRITORY = 14;
        CODEBASEENTRY_TYPE_CORRESPONDENCETYPE = 15;
        CODEBASEENTRY_TYPE_EXTERNALPROGRAMTYPE = 16;
        CODEBASEENTRY_TYPE_REVENUEBUCKET = 17;
        CODEBASEENTRY_TYPE_ADDITIONALREVENUEBUCKET = 18;
        CODEBASEENTRY_TYPE_ADDITIONALSTATISTICSBUCKETS = 19;
        CODEBASEENTRY_TYPE_MEALPERIOD = 20;
        CODEBASEENTRY_TYPE_BILLINGCYCLE = 21;
        CODEBASEENTRY_TYPE_REMINDERCYCLE = 22;
        CODEBASEENTRY_TYPE_MAJORMARKETSEGMENTS = 23;
        CODEBASEENTRY_TYPE_DOCUMENTTYPE = 24;
        CODEBASEENTRY_TYPE_ACTIVITYTYPE = 25;
        CODEBASEENTRY_TYPE_RESERVATIONLABELS = 26;
    }
    CodeBaseEntry_Type type = 6;
}

message CodeFullEntry {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // The code value. This value you will see in reservations as market code and in other
    //             resources like the revenue buckets in transactions
    string code = 2;
    // The comment for this code
    string comment = 3;
    // This attribute tells you if this code is the default code for the specific type or not.
    //             Not all the types of codes need to have a default code
    bool default = 4;
    // The id of the code
    string id = 5;
    // The name of the code that usually is more human readable
    string name = 6;
    // Some codes can have a hierarchy and a child code always points to
    //             the parent
    CodeBaseEntry parent = 7;
    // The type or category of the code
    enum CodeFullEntry_Type {
        CODEFULLENTRY_TYPE_GUESTREQUEST = 0;
        CODEFULLENTRY_TYPE_REQUESTDIETARY = 1;
        CODEFULLENTRY_TYPE_VIPSTATUS = 2;
        CODEFULLENTRY_TYPE_REASONFORRATECHANGE = 3;
        CODEFULLENTRY_TYPE_REGRETS = 4;
        CODEFULLENTRY_TYPE_MARKETSEGMENTS = 5;
        CODEFULLENTRY_TYPE_SOURCEOFBUSINESS = 6;
        CODEFULLENTRY_TYPE_LOYALTYPROGRAM = 7;
        CODEFULLENTRY_TYPE_CANCELLATIONREASON = 8;
        CODEFULLENTRY_TYPE_ACCOUNTTYPE = 9;
        CODEFULLENTRY_TYPE_ACCOUNTRANK = 10;
        CODEFULLENTRY_TYPE_VIPLEVEL = 11;
        CODEFULLENTRY_TYPE_TITLE = 12;
        CODEFULLENTRY_TYPE_CONTACTFUNCTION = 13;
        CODEFULLENTRY_TYPE_TERRITORY = 14;
        CODEFULLENTRY_TYPE_CORRESPONDENCETYPE = 15;
        CODEFULLENTRY_TYPE_EXTERNALPROGRAMTYPE = 16;
        CODEFULLENTRY_TYPE_REVENUEBUCKET = 17;
        CODEFULLENTRY_TYPE_ADDITIONALREVENUEBUCKET = 18;
        CODEFULLENTRY_TYPE_ADDITIONALSTATISTICSBUCKETS = 19;
        CODEFULLENTRY_TYPE_MEALPERIOD = 20;
        CODEFULLENTRY_TYPE_BILLINGCYCLE = 21;
        CODEFULLENTRY_TYPE_REMINDERCYCLE = 22;
        CODEFULLENTRY_TYPE_MAJORMARKETSEGMENTS = 23;
        CODEFULLENTRY_TYPE_DOCUMENTTYPE = 24;
        CODEFULLENTRY_TYPE_ACTIVITYTYPE = 25;
        CODEFULLENTRY_TYPE_RESERVATIONLABELS = 26;
    }
    CodeFullEntry_Type type = 8;
}

message CodesListRequest {
    // Return all results matching the specified code. A code is unique in combination with the type
    //             which means when you query for a code you could get multiple results each for a different type
    string code = 1;
    // Return all codes for the specified type
    enum CodesListRequest_Type {
        CODESLISTREQUEST_TYPE_GUESTREQUEST = 0;
        CODESLISTREQUEST_TYPE_REQUESTDIETARY = 1;
        CODESLISTREQUEST_TYPE_VIPSTATUS = 2;
        CODESLISTREQUEST_TYPE_REASONFORRATECHANGE = 3;
        CODESLISTREQUEST_TYPE_REGRETS = 4;
        CODESLISTREQUEST_TYPE_MARKETSEGMENTS = 5;
        CODESLISTREQUEST_TYPE_SOURCEOFBUSINESS = 6;
        CODESLISTREQUEST_TYPE_LOYALTYPROGRAM = 7;
        CODESLISTREQUEST_TYPE_CANCELLATIONREASON = 8;
        CODESLISTREQUEST_TYPE_ACCOUNTTYPE = 9;
        CODESLISTREQUEST_TYPE_ACCOUNTRANK = 10;
        CODESLISTREQUEST_TYPE_VIPLEVEL = 11;
        CODESLISTREQUEST_TYPE_TITLE = 12;
        CODESLISTREQUEST_TYPE_CONTACTFUNCTION = 13;
        CODESLISTREQUEST_TYPE_TERRITORY = 14;
        CODESLISTREQUEST_TYPE_CORRESPONDENCETYPE = 15;
        CODESLISTREQUEST_TYPE_EXTERNALPROGRAMTYPE = 16;
        CODESLISTREQUEST_TYPE_REVENUEBUCKET = 17;
        CODESLISTREQUEST_TYPE_ADDITIONALREVENUEBUCKET = 18;
        CODESLISTREQUEST_TYPE_ADDITIONALSTATISTICSBUCKETS = 19;
        CODESLISTREQUEST_TYPE_MEALPERIOD = 20;
        CODESLISTREQUEST_TYPE_BILLINGCYCLE = 21;
        CODESLISTREQUEST_TYPE_REMINDERCYCLE = 22;
        CODESLISTREQUEST_TYPE_MAJORMARKETSEGMENTS = 23;
        CODESLISTREQUEST_TYPE_DOCUMENTTYPE = 24;
        CODESLISTREQUEST_TYPE_ACTIVITYTYPE = 25;
        CODESLISTREQUEST_TYPE_RESERVATIONLABELS = 26;
    }
    CodesListRequest_Type type = 2;
}

message CodesListResponse {
    // The list of codes matching the defined filter criteria
    repeated CodeBaseEntry codes = 1;
}

message DatePeriod {
    // Start Date for this time period
    string from = 1;
    // End Date for this time period
    string to = 2;
}

message Derivation {
    // Mode for the calculation of the daily rates adjustment
    enum Derivation_Adjustment {
        DERIVATION_ADJUSTMENT_AMOUNT = 0;
        DERIVATION_ADJUSTMENT_PERCENTAGE = 1;
    }
    Derivation_Adjustment adjustment = 1;
    // Details about the base rateplan
    RelatedRateplan base_rateplan = 2;
}

message EmbeddedReservation {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // The arrival date of the guests
    string arrival_date = 2;
    // he confirmation id for the booking which the guest can use to check in on the kiosk, add the 
    //             booking to the mobile app etc. It is used as identifier for all reservations done with the 
    //             same booking request
    string confirmation_id = 3;
    // The departure date of the guests
    string departure_date = 4;
    // The reservation number of the reservation
    int32 reservation_number = 5;
    // The current status of this reservation
    enum EmbeddedReservation_Reservation_statu {
        EMBEDDEDRESERVATION_RESERVATION_STATU_TENTATIVE = 0;
        EMBEDDEDRESERVATION_RESERVATION_STATU_WAITLISTED = 1;
        EMBEDDEDRESERVATION_RESERVATION_STATU_ONREQUEST = 2;
        EMBEDDEDRESERVATION_RESERVATION_STATU_NONGUARANTEED = 3;
        EMBEDDEDRESERVATION_RESERVATION_STATU_GUARANTEED = 4;
        EMBEDDEDRESERVATION_RESERVATION_STATU_INHOUSE = 5;
        EMBEDDEDRESERVATION_RESERVATION_STATU_CHECKEDOUT = 6;
        EMBEDDEDRESERVATION_RESERVATION_STATU_NOSHOW = 7;
        EMBEDDEDRESERVATION_RESERVATION_STATU_DENIED = 8;
        EMBEDDEDRESERVATION_RESERVATION_STATU_CANCELLED = 9;
        EMBEDDEDRESERVATION_RESERVATION_STATU_RELEASED = 10;
        EMBEDDEDRESERVATION_RESERVATION_STATU_WALKED = 11;
        EMBEDDEDRESERVATION_RESERVATION_STATU_EXPIRED = 12;
        EMBEDDEDRESERVATION_RESERVATION_STATU_WALKIN = 13;
        EMBEDDEDRESERVATION_RESERVATION_STATU_REGISTERED = 14;
    }
    EmbeddedReservation_Reservation_statu reservation_status = 6;
}

message EmbeddedRoomType {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // Code of the room type
    string code = 2;
    // Description of the room type
    string description = 3;
    // Name of the room type
    string name = 4;
}

message EmbeddedRoomTypeSimple {
    // Code of the room type
    string code = 1;
    // Description of the room type
    string description = 2;
    // Name of the room type
    string name = 3;
}

message EmbeddedRoomWithStatus {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // Timestamp the room was created
    string created = 2;
    // Description of the room
    string description = 3;
    // Name of the room
    string name = 4;
    // Number of the room
    string number = 5;
    // Room type of the room. Contains only the basic properties of the room type
    EmbeddedRoomType room_type = 6;
    // Contains information about room status.
    RoomStatus status = 7;
    // Timestamp of when the room was changed the last time
    string updated = 8;
}

message ExtendedRateplanEntry {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // List of distribution channel groups and channels the rateplan is sold through
    repeated AccessControlInfo access_control = 2;
    // Defines if the rateplan has been ended and is expired
    bool active = 3;
    // List of active periods. Arrival and departure day for reservations based on this rateplan need to
    //             fit into one of these time periods
    repeated DatePeriod active_periods = 4;
    // List of booking periods. During these time periods the rateplan is sold
    repeated DatePeriod booking_periods = 5;
    // Code of the rateplan
    string code = 6;
    // Defines if this rateplan is setup with a commission
    bool commissionable = 7;
    // Timestamp the rateplan was created
    string created = 8;
    // Defines if this rateplan is used for day use reservations
    bool day_use = 9;
    // If this rateplan is derived from a base rateplan you will see some details about
    //             the base rateplan and the mode for the adjustment of the daily rates
    Derivation derivation = 10;
    // Details about all the derived rateplans if any
    repeated RelatedRateplan derived_rateplans = 11;
    // Description of the rateplan
    string description = 12;
    // Text defining how the room charges for this rateplan are shown on the folio and
    //             invoice for the guest
    string folio_name = 13;
    // Details about the rateplan group
    RateplanGroup group = 14;
    // List of codes for the included services sold with this rateplan
    repeated string included_services = 15;
    // The code of the market segment the rate plan is linked to
    string market_code = 16;
    // Name of the rateplan
    string name = 17;
    // The code of the noshow policy for this rateplan
    string noshow_policy = 18;
    // Generic rateplan restrictions valid on all booking periods
    Restrictions restrictions = 19;
    // List of all room types sold through this rateplan
    repeated EmbeddedRoomType room_types = 20;
    // Defines if a rateplan is suspended and no new reservations can be created for this
    //             rateplan at the moment
    bool suspended = 21;
    // Defines if the daily rates include VAT or not
    bool taxes_included = 22;
    // Timestamp of when the rateplan was changed the last time
    string updated = 23;
    // Defines if this rateplan is visible to the public or only for specific customers
    enum ExtendedRateplanEntry_Visibility {
        EXTENDEDRATEPLANENTRY_VISIBILITY_PUBLIC = 0;
        EXTENDEDRATEPLANENTRY_VISIBILITY_NEGOTIATED = 1;
    }
    ExtendedRateplanEntry_Visibility visibility = 24;
}

message GetAvailableRoomsRequest {
    // Specifies number of adults the returned rooms will have to be able to house. The default value is 1.
    string adults = 1;
    // Return result only for rooms having all of the given amenities. You can provide a comma seperated list of 
    //             amenity codes.
    repeated string amenities = 2;
    // Rooms returned will not be assigned to a reservation or be under maintenance between this date
    //             and the specified to date. Still there could be departing reservations or ending maintenances
    //             for this date.
    string from = 3;
    // Should rooms that are set OutOfService in the defined time period be returned as available. By default
    //             they are not.
    bool includeOutOfService = 4;
    // Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of 
    //             location codes.
    repeated string locations = 5;
    // Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
    repeated string roomTypes = 6;
    // Rooms returned will not be assigned to a reservation or be under maintenance between the specified
    //             from date and this date. Still there could be arriving reservations or beginning maintenances
    //             for this date.
    string to = 7;
    // Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of 
    //             view codes.
    repeated string views = 8;
}

message GetRatesRequest {
    // You can expand the supplements per room type on demand. By default they are not shown.
    enum GetRatesRequest_Expand {
        GETRATESREQUEST_EXPAND_ROOMTYPESUPPLEMENTS = 0;
    }
    GetRatesRequest_Expand Expand = 1;
    // Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>
    //             is limited to 365 days.
    string From = 2;
    // Defines the first business day you would like to get rates for.
    string To = 3;
}

message GetRoomListRequest {
    // Return result only for rooms having all of the given amenities. You can provide a comma seperated list of 
    //             amenity codes.
    repeated string amenities = 1;
    // Return results only for rooms that have the given room condition status.
    repeated string conditions = 2;
    // Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of 
    //             location codes.
    repeated string locations = 3;
    // Return results only for rooms that have the given maintenance status.
    repeated string maintenances = 4;
    // Return results only for rooms that have the given frontdesk ocuppancy status.
    enum GetRoomListRequest_Occupancy {
        GETROOMLISTREQUEST_OCCUPANCY_OCCUPIED = 0;
        GETROOMLISTREQUEST_OCCUPANCY_VACANT = 1;
    }
    GetRoomListRequest_Occupancy occupancy = 5;
    // Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
    repeated string roomTypes = 6;
    // Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of 
    //             view codes.
    repeated string views = 7;
}

message Hotel {
    // The city the hotel is located in
    string city = 1;
    // The code of the hotel
    string code = 2;
    // The country the hotel is located. The country code is in ISO 3166-1 alpha-2 format
    //             (see: <a href="http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm" onfocus="this.blur()" target="_blank">http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm</a>)
    string country = 3;
    // Timestamp the hotel was created
    string created = 4;
    // Return the current business day of the hotel in the ISO-8601 format "YYYY-MM-DD"
    string current_business_day = 5;
    // The descriptive text for the the hotel
    string desc = 6;
    // The email address of the hotel
    string email = 7;
    // The fax number of the hotel
    string fax = 8;
    // The id of the hotel
    int32 hotel_id = 9;
    // The latitude for the geolocation of the hotel. This allows you to show the hotel on a map
    double latitude = 10;
    // The longitude for the geolocation of the hotel. This allows you to show the hotel on a map
    double longitude = 11;
    // The name of the hotel
    string name = 12;
    // The main phone number to call the hotel
    string phone = 13;
    // The postal code of the hotel
    string postal_code = 14;
    // The state the hotel is located in
    string state = 15;
    // The street address of the hotel
    string street = 16;
    // Timestamp of when the hotel was changed the last time
    string updated = 17;
    // The homepage URL of the hotel
    string url = 18;
    // The current time offset of the hotel to UTC. This is taking into account daylight saving times and shows the offset for the time the request is handled. The response
    //             will be in the format of "UTC±hh:mm". If there is no offset to UTC it will be shown as "UTC+00:00"
    string utc_offset = 19;
}

repeated Operation[RatePatchRequest] JsonPatchDocument[RatePatchRequest] = 1

repeated Operation[RoomPatchRequest] JsonPatchDocument[RoomPatchRequest] = 1

message LinkObject {
    // <para>The "deprecation" property is OPTIONAL.</para>
    // <para> </para>
    // <para>Its presence indicates that the link is to be deprecated (i.e.
    //             removed) at a future date.  Its value is a URL that SHOULD provide
    //             further information about the deprecation.
    //             A client SHOULD provide some notification (for example, by logging a
    //             warning message) whenever it traverses over a link that has this
    //             property.  The notification SHOULD include the deprecation property's
    //             value so that a client maintainer can easily find information about
    //             the deprecation.</para>
    string deprecation = 1;
    // <para>The "href" property is REQUIRED.</para>
    // <para> </para>
    // <para>Its value is either a URI [RFC3986] or a URI Template [RFC6570].
    //             If the value is a URI Template then the Link Object SHOULD have a
    //             "templated" attribute whose value is true.</para>
    string href = 2;
    // <para>The "hreflang" property is OPTIONAL.</para>
    // <para> </para>
    // <para>Its value is a string and is intended for indicating the language of
    //             the target resource (as defined by [RFC5988]).</para>
    string hreflang = 3;
    // <para>The "name" property is OPTIONAL.</para>
    // <para> </para>
    // <para>Its value MAY be used as a secondary key for selecting Link Objects
    //             which share the same relation type.</para>
    string name = 4;
    // <para>The "profile" property is OPTIONAL.</para>
    // <para> </para>
    // <para>Its value is a string which is a URI that hints about the profile.</para>
    string profile = 5;
    // <para>The "templated" property is OPTIONAL.</para>
    // <para> </para>
    // <para>Its value is boolean and SHOULD be true when the Link Object's "href"
    //             property is a URI Template.
    //             Its value SHOULD be considered false if it is undefined or any other
    //             value than true.</para>
    bool templated = 6;
    // <para>The "title" property is OPTIONAL.</para>
    // <para> </para>
    // <para>Its value is a string and is intended for labelling the link with a
    //             human-readable identifier (as defined by [RFC5988]).</para>
    string title = 7;
    // <para>The "type" property is OPTIONAL.</para>
    // <para> </para>
    // <para>Its value is a string used as a hint to indicate the media type
    //             expected when dereferencing the target resource.</para>
    string type = 8;
}

message ListRateplanEntry {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // List of distribution channel groups and channels the rateplan is sold through
    repeated AccessControlInfo access_control = 2;
    // Defines if the rateplan has been ended and is expired
    bool active = 3;
    // List of active periods. Arrival and departure day for reservations based on this rateplan need to
    //             fit into one of these time periods
    repeated DatePeriod active_periods = 4;
    // Code of the base rateplan if this rateplan is derived
    string base_rateplan = 5;
    // List of booking periods. During these time periods the rateplan is sold
    repeated DatePeriod booking_periods = 6;
    // Code of the rateplan
    string code = 7;
    // Defines if this rateplan is setup with a commission
    bool commissionable = 8;
    // Timestamp the rateplan was created
    string created = 9;
    // Defines if this rateplan is used for day use reservations
    bool day_use = 10;
    // List of codes for all derived rateplans if any
    repeated string derived_rateplans = 11;
    // Description of the rateplan
    string description = 12;
    // Code of the rateplan group
    string group = 13;
    // List of codes for the included services sold with this rateplan
    repeated string included_services = 14;
    // The code of the market segment the rate plan is linked to
    string market_code = 15;
    // Name of the rateplan
    string name = 16;
    // List of all room types sold through this rateplan
    repeated EmbeddedRoomTypeSimple room_types = 17;
    // Defines if a rateplan is suspended and no new reservations can be created for this
    //             rateplan at the moment
    bool suspended = 18;
    // Timestamp of when the rateplan was changed the last time
    string updated = 19;
    // Defines if this rateplan is visible to the public or only for specific customers
    enum ListRateplanEntry_Visibility {
        LISTRATEPLANENTRY_VISIBILITY_PUBLIC = 0;
        LISTRATEPLANENTRY_VISIBILITY_NEGOTIATED = 1;
    }
    ListRateplanEntry_Visibility visibility = 20;
}

message Object {
}

message Operation[RatePatchRequest] {
    string from = 1;
    string op = 2;
    string path = 3;
    Object value = 4;
}

message Operation[RoomPatchRequest] {
    string from = 1;
    string op = 2;
    string path = 3;
    Object value = 4;
}

message PagedDataRequest {
    // Return total number of items for a given filter criteria.
    enum PagedDataRequest_Inlinecount {
        PAGEDDATAREQUEST_INLINECOUNT_NONE = 0;
        PAGEDDATAREQUEST_INLINECOUNT_ALLPAGES = 1;
    }
    PagedDataRequest_Inlinecount inlinecount = 1;
    // Amount of items to skip.
    int32 skip = 2;
    // Amount of items to select.
    int32 top = 3;
}

message Policy {
    // The description of the policy
    string description = 1;
    // The name of the policy
    string name = 2;
}

message PriceDerivation {
    // Mode for the calculation of the daily rates adjustment
    enum PriceDerivation_Adjustment {
        PRICEDERIVATION_ADJUSTMENT_AMOUNT = 0;
        PRICEDERIVATION_ADJUSTMENT_PERCENTAGE = 1;
    }
    PriceDerivation_Adjustment adjustment = 1;
    // The value the rate of the base rateplan is adjusted by based on the calculation mode
    double value = 2;
}

message RateResponse {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // The price for this business day for the default room type and occupancy of one adult. The price is
    //             only available for base rateplans. Please be aware that it might be the case that the default room
    //             type is not sold by the rateplan. Nevertheless the supplements will always be added to the price for 
    //             the default room type and one adult
    double base_price = 2;
    // The business day
    string business_day = 3;
    // The cancellation policy
    Policy cancellation_policy = 4;
    // Information on how the rate is derived from its base rateplan
    PriceDerivation derivation = 5;
    // The minimum guarantee
    enum RateResponse_Minimum_guarantee_type {
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_PM4HOLD = 0;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_PM6HOLD = 1;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_GUARANTEETOCREDITCARD = 2;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_GUARANTEETOGUESTACCOUNT = 3;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_GUARANTEEBYTRAVELAGENT = 4;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_GUARANTEEBYCOMPANY = 5;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_DEPOSIT = 6;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_VOUCHER = 7;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_PREPAYMENT = 8;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_NONGUARANTEED = 9;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_TENTATIVE = 10;
        RATERESPONSE_MINIMUM_GUARANTEE_TYPE_WAITLIST = 11;
    }
    RateResponse_Minimum_guarantee_type minimum_guarantee_type = 6;
    // The surcharge per additional adult staying in the room. It is only available on base rateplans
    double per_person_surcharge = 7;
    // List of supplements added to the price per room type
    repeated RoomTypeSupplement room_type_supplements = 8;
}

message RateplanGroup {
    // Code of the rateplan group
    string code = 1;
    // Name of the rateplan group
    string name = 2;
}

message RateplansListRequest {
    // Return all rateplans having the specified rateplan as base rateplan
    string baseRateplan = 1;
    // Return all rateplans sold through the specified channel
    string channelCode = 2;
    // Return all rateplans that are sold through at least one channel out of the specified channel group
    string channelGroup = 3;
    // Return all rateplans having commisionable status
    bool commissionable = 4;
    // Return all rateplans belonging to the specified rateplan group
    string group = 5;
    // Return all rateplans having at least one of the specified services included
    repeated string includedServices = 6;
    // Return all rateplans having one of the specified values as a market code
    repeated string marketCodes = 7;
    // Return all rateplans by which at least one of the specified room types are sold
    repeated string roomTypes = 8;
    // Specify which rateplans to return. If you do not specify a value you will by default get active
    //             rateplans.
    enum RateplansListRequest_SellingStatu {
        RATEPLANSLISTREQUEST_SELLINGSTATU_ACTIVE = 0;
        RATEPLANSLISTREQUEST_SELLINGSTATU_INACTIVE = 1;
        RATEPLANSLISTREQUEST_SELLINGSTATU_ALL = 2;
    }
    RateplansListRequest_SellingStatu sellingStatus = 9;
}

message RateplansListResponse {
    // The number of items matching your request in total for all pages.
    int32 _count = 1;
    // Collection of links to related resources
    map<string, LinkObject> _links = 2;
    // List of rateplans
    repeated ListRateplanEntry rateplans = 3;
}

message RatesRequest {
    // Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>
    //             is limited to 365 days.
    string From = 1;
    // Defines the first business day you would like to get rates for.
    string To = 2;
}

message RatesResponse {
    // The number of items matching your request in total for all pages.
    int32 _count = 1;
    // Collection of links to related resources
    map<string, LinkObject> _links = 2;
    // The list of rates, cancellation policy and minimum guarantee per business day.
    repeated RateResponse rates = 3;
}

message RelatedRateplan {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // Code of the rateplan
    string code = 2;
    // Name of the rateplan
    string name = 3;
}

message Restrictions {
    // Days this rateplan needs to be booked in advance. This value is mutual exclusive to the
    //             <i>max_advance_booking</i> and if no limit is set it is omitted
    int32 leadtime_to_book = 1;
    // Days this rateplan can be booked in advance. This value is mutual exclusive to the
    //             <i>leadtime_to_book</i> and if no limit is set it is omitted
    int32 max_advance_booking = 2;
}

message Room {
    // List of amenities for the room
    repeated SimpleAttribute amenities = 1;
    // Provides information about available beds in the room
    repeated RoomBedding beddings = 2;
    // Timestamp the room was created
    string created = 3;
    // Description of the room
    string description = 4;
    // The common amount of persons for the room
    int32 expected_occupancy = 5;
    // Is there an extra bed allowed in the room
    bool extra_bed_allowed = 6;
    // Floor of the room
    int32 floor = 7;
    // List of locations for the room
    repeated SimpleAttribute locations = 8;
    // Maximum number of allowed persons in the room
    int32 max_persons = 9;
    // Minimum number of allowed persons in the room
    int32 min_persons = 10;
    // Name of the room
    string name = 11;
    // Number of the room
    string number = 12;
    // Current reservation(s) for the room. It shows reservations due to arrive today and the one still inhouse.
    //             If there is a day-use reservation assigned for today it can show you up to 3 reservations. One that will
    //             depart today, the day-use reservqation for today and the one due to arrive
    repeated EmbeddedReservation reservations = 13;
    // Room type of the room. Contains only the basic properties of the room type
    EmbeddedRoomType room_type = 14;
    // Contains information about room status
    RoomStatus status = 15;
    // Timestamp of when the room was changed the last time
    string updated = 16;
    // List of views for the room
    repeated SimpleAttribute views = 17;
}

message RoomBedding {
    // Number of available beds of the specified type
    int32 count = 1;
    // The type of bed
    enum RoomBedding_Type {
        ROOMBEDDING_TYPE_NOTDEFINED = 0;
        ROOMBEDDING_TYPE_DOUBLE = 1;
        ROOMBEDDING_TYPE_FUTON = 2;
        ROOMBEDDING_TYPE_KING = 3;
        ROOMBEDDING_TYPE_MURPHYBED = 4;
        ROOMBEDDING_TYPE_QUEEN = 5;
        ROOMBEDDING_TYPE_SOFABED = 6;
        ROOMBEDDING_TYPE_TATAMIMATS = 7;
        ROOMBEDDING_TYPE_TWIN = 8;
        ROOMBEDDING_TYPE_SINGLE = 9;
    }
    RoomBedding_Type type = 2;
}

message RoomListResponse {
    // The number of items matching your request in total for all pages.
    int32 _count = 1;
    // Collection of links to related resources
    map<string, LinkObject> _links = 2;
    // List of rooms
    repeated EmbeddedRoomWithStatus rooms = 3;
}

message RoomMaintenance {
    // Start date of the current maintenance work
    string from = 1;
    // A description about the reason for the ongoing maintenance work
    string reason = 2;
    // End date of the current maintenance work
    string to = 3;
    // Maintenance Status
    enum RoomMaintenance_Value {
        ROOMMAINTENANCE_VALUE_NOTSET = 0;
        ROOMMAINTENANCE_VALUE_NONE = 1;
        ROOMMAINTENANCE_VALUE_OUTOFINVENTORY = 2;
        ROOMMAINTENANCE_VALUE_OUTOFORDER = 3;
        ROOMMAINTENANCE_VALUE_OUTOFSERVICE = 4;
    }
    RoomMaintenance_Value value = 4;
}

message RoomStatus {
    // Room Condition status
    enum RoomStatus_Condition {
        ROOMSTATUS_CONDITION_CLEANNOTINSPECTED = 0;
        ROOMSTATUS_CONDITION_CLEAN = 1;
        ROOMSTATUS_CONDITION_DIRTY = 2;
    }
    RoomStatus_Condition condition = 1;
    // The frontdesk occupancy is set by reservation checkin and checkout. It can differ from the
    //             housekeeping occupancy
    enum RoomStatus_Frontdesk_occupancy {
        ROOMSTATUS_FRONTDESK_OCCUPANCY_OCCUPIED = 0;
        ROOMSTATUS_FRONTDESK_OCCUPANCY_VACANT = 1;
    }
    RoomStatus_Frontdesk_occupancy frontdesk_occupancy = 2;
    // The housekeeping occupancy status is defined by the housekeeping staff. Usually it matches the
    //             frontdesk occupancy, but sometimes the reservation is still inhouse, but it looks like there is no
    //             guest in the room anymore. Then the statuses can differ.
    enum RoomStatus_Housekeeping_occupancy {
        ROOMSTATUS_HOUSEKEEPING_OCCUPANCY_OCCUPIED = 0;
        ROOMSTATUS_HOUSEKEEPING_OCCUPANCY_VACANT = 1;
    }
    RoomStatus_Housekeeping_occupancy housekeeping_occupancy = 3;
    // Information about current ongoing room maintenance
    RoomMaintenance maintenance = 4;
}

message RoomType {
    // List of amenities for the room type
    repeated SimpleAttribute amenities = 1;
    // The type of bed for the room type
    enum RoomType_Bedding_type {
        ROOMTYPE_BEDDING_TYPE_NOTDEFINED = 0;
        ROOMTYPE_BEDDING_TYPE_DOUBLE = 1;
        ROOMTYPE_BEDDING_TYPE_FUTON = 2;
        ROOMTYPE_BEDDING_TYPE_KING = 3;
        ROOMTYPE_BEDDING_TYPE_MURPHYBED = 4;
        ROOMTYPE_BEDDING_TYPE_QUEEN = 5;
        ROOMTYPE_BEDDING_TYPE_SOFABED = 6;
        ROOMTYPE_BEDDING_TYPE_TATAMIMATS = 7;
        ROOMTYPE_BEDDING_TYPE_TWIN = 8;
        ROOMTYPE_BEDDING_TYPE_SINGLE = 9;
    }
    RoomType_Bedding_type bedding_type = 2;
    // Code of the room type
    string code = 3;
    // Timestamp the room type was created
    string created = 4;
    // Specifies if the room type is the default room type of the hotel
    bool default = 5;
    // Description of the room type
    string description = 6;
    // The common amount of persons for the room
    int32 expected_occupancy = 7;
    // List of facilities for the room type
    repeated SimpleAttribute facilities = 8;
    // Maximum number of allowed persons for that room type
    int32 max_persons = 9;
    // Minimum number of allowed persons for that room type
    int32 min_persons = 10;
    // Name of the room type
    string name = 11;
    // Timestamp of when the room type was changed the last time
    string updated = 12;
    // List of views for the room type
    repeated SimpleAttribute views = 13;
}

message RoomTypeSupplement {
    // Collection of links to related resources
    map<string, LinkObject> _links = 1;
    // The code of the room type
    string code = 2;
    // Specifies if the room type is the default room type of the hotel
    bool default = 3;
    // The supplements per adults in the room. The per person surcharge will be added on top
    repeated Supplement supplements = 4;
}

message SimpleAttribute {
    // The code of the attribute
    string code = 1;
    // The name of the attribute
    string name = 2;
}

message Supplement {
    // Mode for the calculation of the supplement value
    enum Supplement_Adjustment {
        SUPPLEMENT_ADJUSTMENT_AMOUNT = 0;
        SUPPLEMENT_ADJUSTMENT_PERCENTAGE = 1;
    }
    Supplement_Adjustment adjustment = 1;
    // The number of adults per room
    int32 adults = 2;
    // The amount or percentage that will be added for this room type and number of adults per room
    double supplement = 3;
}

message TotalCountResponse {
    // Returns the total count for all items matching the query parameters. If none is matching it will return 0.
    int64 _count = 1;
}

service HetrasHotelAPIVersion0Service {
    // Get a list of all the hotels of a chain your application has access to.
    // 
    // Load the details about all the hotels your application has access to.
    rpc GetApiHotelV0Hotels(GetApiHotelV0HotelsRequest) returns (GetApiHotelV0HotelsResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels"
      };
    }
    // Get the details of the hotel with the speccified hotel id.
    // 
    // Load the details about the specified hotel.
    rpc GetApiHotelV0HotelsHotelId(GetApiHotelV0HotelsHotelIdRequest) returns (Hotel) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}"
      };
    }
    // Get a list of codes for the specified hotel either filtered by type or code.
    // 
    // With this call you can find codes for a hotel by type or code. By default and without any filter criteria
    //             defined it will return you all available codes.
    rpc GetApiHotelV0HotelsHotelIdCodes(GetApiHotelV0HotelsHotelIdCodesRequest) returns (CodesListResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/codes"
      };
    }
    // Get all the details for a specific code available for the hotel.
    // 
    // Read the details about a specific code available for the defined hotel.
    rpc GetApiHotelV0HotelsHotelIdCodesId(GetApiHotelV0HotelsHotelIdCodesIdRequest) returns (CodeFullEntry) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/codes/{id}"
      };
    }
    // Get a list of rateplans for the specified hotel id matching the filter criteria.
    // 
    // With this call you can find rateplans for a hotel by different filters. By default and without any filter criteria
    //             defined it will return you all active rateplans.
    rpc GetApiHotelV0HotelsHotelIdRateplans(GetApiHotelV0HotelsHotelIdRateplansRequest) returns (RateplansListResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rateplans"
      };
    }
    // Get the count of all rateplans in the hotel matching the given filter criteria.
    rpc GetApiHotelV0HotelsHotelIdRateplans$Count(GetApiHotelV0HotelsHotelIdRateplans$CountRequest) returns (TotalCountResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rateplans/$count"
      };
    }
    // Get all the details for a specific rateplan in the hotel.
    // 
    // Read the details about a specific rateplan for the defined hotel.
    rpc GetApiHotelV0HotelsHotelIdRateplansRateplanCode(GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRequest) returns (ExtendedRateplanEntry) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}"
      };
    }
    // Get the setup of the daily rates for a specific rateplan and a defined timeperiod.
    // 
    // With this call you can read the daily rates setup including the cancellation policy and minimum guarantee per day for the
    //             specified rateplan. You can specify a timeperiod to read the daily rates for. The rateplan needs to be active for at least
    //             one business day in the defined time period and have rates loaded.
    rpc GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRates(GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesRequest) returns (RatesResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates"
      };
    }
    // Get the count of all active and loaded daily rates for the defined rateplan in a specified time period.
    rpc GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRates$Count(GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRates$CountRequest) returns (TotalCountResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/$count"
      };
    }
    // Get the setup of a daily rate for a specific business day and rateplan.
    // 
    // Read the setup of the daily rate for the defined rateplan for that specific business day.
    rpc GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesBusinessDay(GetApiHotelV0HotelsHotelIdRateplansRateplanCodeRatesBusinessDayRequest) returns (RateResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}"
      };
    }
    // Get a list with the details of all room types for for the specified hotel id.
    // 
    // With this call you can load the details about a all available room types for the specified hotel.
    rpc GetApiHotelV0HotelsHotelIdRoom_types(GetApiHotelV0HotelsHotelIdRoom_typesRequest) returns (GetApiHotelV0HotelsHotelIdRoom_typesResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/room_types"
      };
    }
    // Get all the details for a specific room type in the hotel.
    // 
    // With this call you can load the details about a specific room type in the hotel.
    rpc GetApiHotelV0HotelsHotelIdRoom_typesCode(GetApiHotelV0HotelsHotelIdRoom_typesCodeRequest) returns (RoomType) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/room_types/{code}"
      };
    }
    // Get a list of rooms using the provided filtering and pagination criteria.
    // 
    // Find all rooms for the hotel that match the specified filter criteria. The filtering will be done based on the current state of
    //             the rooms.
    rpc GetApiHotelV0HotelsHotelIdRooms(GetApiHotelV0HotelsHotelIdRoomsRequest) returns (RoomListResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rooms"
      };
    }
    // Get the count of all rooms in the hotel matching the given filter criteria.
    rpc GetApiHotelV0HotelsHotelIdRooms$Count(GetApiHotelV0HotelsHotelIdRooms$CountRequest) returns (TotalCountResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rooms/$count"
      };
    }
    // Request available rooms using a given criteria.
    rpc GetApiHotelV0HotelsHotelIdRoomsAvailable(GetApiHotelV0HotelsHotelIdRoomsAvailableRequest) returns (RoomListResponse) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rooms/available"
      };
    }
    // Get all the details for a specific room in the hotel.
    // 
    // With this call you can load the details about a specific room in the hotel. It will show you the current status of the room.
    rpc GetApiHotelV0HotelsHotelIdRoomsRoomNumber(GetApiHotelV0HotelsHotelIdRoomsRoomNumberRequest) returns (Room) {
      option (google.api.http) = {
        get: "//api/hotel/v0/hotels/{hotelId}/rooms/{roomNumber}"
      };
    }
}

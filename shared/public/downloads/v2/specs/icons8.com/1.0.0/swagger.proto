syntax = "proto3";

import "google/api/annotations.proto";

package icons8;

message GetApiIconsetsV3CategoriesRequest {
    // the language code to get localized result
    enum GetApiIconsetsV3CategoriesRequest_Language {
        GETAPIICONSETSV3CATEGORIESREQUEST_LANGUAGE_ENUS = 0;
        GETAPIICONSETSV3CATEGORIESREQUEST_LANGUAGE_FRFR = 1;
        GETAPIICONSETSV3CATEGORIESREQUEST_LANGUAGE_DEDE = 2;
        GETAPIICONSETSV3CATEGORIESREQUEST_LANGUAGE_ITIT = 3;
        GETAPIICONSETSV3CATEGORIESREQUEST_LANGUAGE_PTBR = 4;
        GETAPIICONSETSV3CATEGORIESREQUEST_LANGUAGE_PLPL = 5;
        GETAPIICONSETSV3CATEGORIESREQUEST_LANGUAGE_RURU = 6;
        GETAPIICONSETSV3CATEGORIESREQUEST_LANGUAGE_ESES = 7;
    }
    GetApiIconsetsV3CategoriesRequest_Language language = 1;
    // the platform that we are searching icons for
    enum GetApiIconsetsV3CategoriesRequest_Platform {
        GETAPIICONSETSV3CATEGORIESREQUEST_PLATFORM_IOS7 = 0;
        GETAPIICONSETSV3CATEGORIESREQUEST_PLATFORM_WIN8 = 1;
        GETAPIICONSETSV3CATEGORIESREQUEST_PLATFORM_WIN10 = 2;
        GETAPIICONSETSV3CATEGORIESREQUEST_PLATFORM_ANDROID = 3;
        GETAPIICONSETSV3CATEGORIESREQUEST_PLATFORM_ANDROIDL = 4;
        GETAPIICONSETSV3CATEGORIESREQUEST_PLATFORM_COLOR = 5;
        GETAPIICONSETSV3CATEGORIESREQUEST_PLATFORM_OFFICE = 6;
    }
    GetApiIconsetsV3CategoriesRequest_Platform platform = 2;
}

message GetApiIconsetsV3CategoriesResponse {
    // copy of the input parameters from the request
    message Parameters {
        string language = 1;
        string platform = 2;
    }
    Parameters parameters = 1;
    // the result of operation
    message Result {
        message Categorie {
        }
        repeated Categorie categories = 1;
    }
    Result result = 2;
}

message GetApiIconsetsV3CategoryRequest {
    // the maximum number of icons which you'd like to receive
    int32 amount = 1;
    // the code of category
    string category = 2;
    // the language code to get localized result
    enum GetApiIconsetsV3CategoryRequest_Language {
        GETAPIICONSETSV3CATEGORYREQUEST_LANGUAGE_ENUS = 0;
        GETAPIICONSETSV3CATEGORYREQUEST_LANGUAGE_FRFR = 1;
        GETAPIICONSETSV3CATEGORYREQUEST_LANGUAGE_DEDE = 2;
        GETAPIICONSETSV3CATEGORYREQUEST_LANGUAGE_ITIT = 3;
        GETAPIICONSETSV3CATEGORYREQUEST_LANGUAGE_PTBR = 4;
        GETAPIICONSETSV3CATEGORYREQUEST_LANGUAGE_PLPL = 5;
        GETAPIICONSETSV3CATEGORYREQUEST_LANGUAGE_RURU = 6;
        GETAPIICONSETSV3CATEGORYREQUEST_LANGUAGE_ESES = 7;
    }
    GetApiIconsetsV3CategoryRequest_Language language = 3;
    // the offset from the first received result
    int32 offset = 4;
    // the style of the icons
    enum GetApiIconsetsV3CategoryRequest_Platform {
        GETAPIICONSETSV3CATEGORYREQUEST_PLATFORM_IOS7 = 0;
        GETAPIICONSETSV3CATEGORYREQUEST_PLATFORM_WIN8 = 1;
        GETAPIICONSETSV3CATEGORYREQUEST_PLATFORM_WIN10 = 2;
        GETAPIICONSETSV3CATEGORYREQUEST_PLATFORM_ANDROID = 3;
        GETAPIICONSETSV3CATEGORYREQUEST_PLATFORM_ANDROIDL = 4;
        GETAPIICONSETSV3CATEGORYREQUEST_PLATFORM_COLOR = 5;
        GETAPIICONSETSV3CATEGORYREQUEST_PLATFORM_OFFICE = 6;
    }
    GetApiIconsetsV3CategoryRequest_Platform platform = 5;
    // the code of subcategory
    string subcategory = 6;
}

message GetApiIconsetsV3CategoryResponse {
    // copy of the input parameters from the request
    message Parameters {
        int32 amount = 1;
        string category = 2;
        string language = 3;
        string offset = 4;
        string platform = 5;
        string subcategory = 6;
    }
    Parameters parameters = 1;
    // the result of operation
    message Result {
        message Category {
        }
        repeated Category category = 1;
    }
    Result result = 2;
}

message GetApiIconsetsV3LatestRequest {
    // the maximum number of icons which you'd like to receive
    int32 amount = 1;
    // the language code to get localized result
    enum GetApiIconsetsV3LatestRequest_Language {
        GETAPIICONSETSV3LATESTREQUEST_LANGUAGE_ENUS = 0;
        GETAPIICONSETSV3LATESTREQUEST_LANGUAGE_FRFR = 1;
        GETAPIICONSETSV3LATESTREQUEST_LANGUAGE_DEDE = 2;
        GETAPIICONSETSV3LATESTREQUEST_LANGUAGE_ITIT = 3;
        GETAPIICONSETSV3LATESTREQUEST_LANGUAGE_PTBR = 4;
        GETAPIICONSETSV3LATESTREQUEST_LANGUAGE_PLPL = 5;
        GETAPIICONSETSV3LATESTREQUEST_LANGUAGE_RURU = 6;
        GETAPIICONSETSV3LATESTREQUEST_LANGUAGE_ESES = 7;
    }
    GetApiIconsetsV3LatestRequest_Language language = 2;
    // the offset from the first received result
    int32 offset = 3;
    // the style of the icons
    enum GetApiIconsetsV3LatestRequest_Platform {
        GETAPIICONSETSV3LATESTREQUEST_PLATFORM_IOS7 = 0;
        GETAPIICONSETSV3LATESTREQUEST_PLATFORM_WIN8 = 1;
        GETAPIICONSETSV3LATESTREQUEST_PLATFORM_WIN10 = 2;
        GETAPIICONSETSV3LATESTREQUEST_PLATFORM_ANDROID = 3;
        GETAPIICONSETSV3LATESTREQUEST_PLATFORM_ANDROIDL = 4;
        GETAPIICONSETSV3LATESTREQUEST_PLATFORM_COLOR = 5;
        GETAPIICONSETSV3LATESTREQUEST_PLATFORM_OFFICE = 6;
    }
    GetApiIconsetsV3LatestRequest_Platform platform = 4;
    string term = 5;
}

message GetApiIconsetsV3LatestResponse {
    // copy of the input parameters from the request
    message Parameters {
        int32 amount = 1;
        string language = 2;
        string offset = 3;
        string platform = 4;
        string term = 5;
    }
    Parameters parameters = 1;
    // the result of operation
    message Result {
        message Latest {
        }
        repeated Latest latest = 1;
    }
    Result result = 2;
}

message GetApiIconsetsV3SearchRequest {
    // the maximum number of icons which you'd like to receive (will be multiplied by platforms count, if you didn't specify the platform and didn't set the 'exact_amount' parameter)
    int32 amount = 1;
    // set it to 'true' if you'd like to receive the exact amount of icons, not multiplied by platforms count
    bool exact_amount = 2;
    // the language code to get localized result
    enum GetApiIconsetsV3SearchRequest_Language {
        GETAPIICONSETSV3SEARCHREQUEST_LANGUAGE_ENUS = 0;
        GETAPIICONSETSV3SEARCHREQUEST_LANGUAGE_FRFR = 1;
        GETAPIICONSETSV3SEARCHREQUEST_LANGUAGE_DEDE = 2;
        GETAPIICONSETSV3SEARCHREQUEST_LANGUAGE_ITIT = 3;
        GETAPIICONSETSV3SEARCHREQUEST_LANGUAGE_PTBR = 4;
        GETAPIICONSETSV3SEARCHREQUEST_LANGUAGE_PLPL = 5;
        GETAPIICONSETSV3SEARCHREQUEST_LANGUAGE_RURU = 6;
        GETAPIICONSETSV3SEARCHREQUEST_LANGUAGE_ESES = 7;
    }
    GetApiIconsetsV3SearchRequest_Language language = 3;
    // the offset from the first received result
    int32 offset = 4;
    // the style of the icons
    enum GetApiIconsetsV3SearchRequest_Platform {
        GETAPIICONSETSV3SEARCHREQUEST_PLATFORM_IOS7 = 0;
        GETAPIICONSETSV3SEARCHREQUEST_PLATFORM_WIN8 = 1;
        GETAPIICONSETSV3SEARCHREQUEST_PLATFORM_WIN10 = 2;
        GETAPIICONSETSV3SEARCHREQUEST_PLATFORM_ANDROID = 3;
        GETAPIICONSETSV3SEARCHREQUEST_PLATFORM_ANDROIDL = 4;
        GETAPIICONSETSV3SEARCHREQUEST_PLATFORM_COLOR = 5;
        GETAPIICONSETSV3SEARCHREQUEST_PLATFORM_OFFICE = 6;
    }
    GetApiIconsetsV3SearchRequest_Platform platform = 5;
    // the name or tag of the icon or any other phrase.
    // e.g. use "@home" to find icons with the tag "home" and "=home" to find icons with the name "home"
    string term = 6;
}

message GetApiIconsetsV3SearchResponse {
    // copy of the input parameters from the request
    message Parameters {
        int32 amount = 1;
        string language = 2;
        string offset = 3;
        string platform = 4;
        string term = 5;
    }
    Parameters parameters = 1;
    // the result of operation
    message Result {
        message Search {
        }
        repeated Search search = 1;
    }
    Result result = 2;
}

message GetApiIconsetsV3TotalRequest {
    // the optional date to calculate the total number of icons that were created after it.
    // It should be in format "four year digits - dash - two month number digits - dash - two day number digits. For example 2014-12-31 means "31th of December, 2014".
    string since = 1;
}

message GetApiIconsetsV3TotalResponse {
    // copy of the input parameters from the request
    message Parameters {
        string since = 1;
    }
    Parameters parameters = 1;
    // the result of operation
    message Result {
        message Total {
        }
        repeated Total total = 1;
    }
    Result result = 2;
}

message PostApiTaskWebFontCollectionRequest {
    message Body {
        message Auth {
                    // Authorization hash
    string hash = 1;
        }
        Auth auth = 1;
        message Task {
            message Arguments {
                            // collection identifier
    string collection = 1;
                            // prefix for CSS rules, used to generate LESS/SCSS
    string css_prefix = 2;
                            // glyph names conversion rule
    enum Arguments_Css_rules_case {
                    ARGUMENTS_CSS_RULES_CASE_LOWERCASE = 0;
                    ARGUMENTS_CSS_RULES_CASE_AS_IS = 1;
                }
                Arguments_Css_rules_case css_rules_case = 3;
                            // template for glyph selector; placeholder {{glyph}} will be replaced with glyph names
    string css_selector = 4;
                            // name of iconic webfont
    string font_name = 5;
            }
            Arguments arguments = 1;
        }
        Task task = 2;
    }
    Body body = 1;
}

message PostApiTaskWebFontCollectionResponse {
    message Message {
    }
    repeated Message messages = 1;
    message Result {
            // human readable description
    string description = 1;
            // task identifier
    string id = 2;
        message Results {
            string zip = 1;
        }
        Results results = 3;
            // task status
    string status = 4;
            // task type
    string type = 5;
    }
    Result result = 2;
}

message PostApiTaskWebFontIconsRequest {
    message Body {
        message Auth {
                    // Authorization hash
    string hash = 1;
        }
        Auth auth = 1;
        message Task {
            message Arguments {
                            // collection identifier
    string collection = 1;
                            // prefix for CSS rules, used to generate LESS/SCSS
    string css_prefix = 2;
                            // glyph names conversion rule
    enum Arguments_Css_rules_case {
                    ARGUMENTS_CSS_RULES_CASE_LOWERCASE = 0;
                    ARGUMENTS_CSS_RULES_CASE_AS_IS = 1;
                }
                Arguments_Css_rules_case css_rules_case = 3;
                            // template for glyph selector; placeholder {{glyph}} will be replaced with glyph names
    string css_selector = 4;
                            // name of iconic webfont
    string font_name = 5;
            }
            Arguments arguments = 1;
        }
        Task task = 2;
    }
    Body body = 1;
}

message PostApiTaskWebFontIconsResponse {
    message Message {
    }
    repeated Message messages = 1;
    message Result {
            // human readable description
    string description = 1;
            // task identifier
    string id = 2;
        message Results {
            string zip = 1;
        }
        Results results = 3;
            // task status
    string status = 4;
            // task type
    string type = 5;
    }
    Result result = 2;
}

message AuthArgument {
    string hash = 1;
}

message CategoryV3Item {
    string category_code = 1;
    string category_name = 2;
    message Subcategory {
    }
    repeated Subcategory subcategory = 3;
}

message CollectionWebFontTaskArguments {
    message Arguments {
    }
    Arguments arguments = 1;
}

message CompactCategoryV3Item {
    string api_code = 1;
    string name = 2;
}

message CompactIconV3Item {
    string category = 1;
    int32 common_icon_id = 2;
    string created = 3;
    message Features {
    }
    Features features = 4;
    int32 id = 5;
    string name = 6;
    string platform_code = 7;
    message Share {
    }
    Share share = 8;
    message Subcategory {
    }
    Subcategory subcategory = 9;
    string svg = 10;
    string url = 11;
    message Vector {
    }
    Vector vector = 12;
}

CompactIconV3Item IconV3Item = 1





message TaskError {
    enum TaskError_Code {
        TASKERROR_CODE_JSON_NOT_VALID = 0;
        TASKERROR_CODE_AUTH_REQUIRED = 1;
        TASKERROR_CODE_AUTH_FAILED = 2;
        TASKERROR_CODE_ACCESS_DENIED = 3;
        TASKERROR_CODE_IO_FAIL = 4;
        TASKERROR_CODE_DATABASE_FAIL = 5;
        TASKERROR_CODE_ARGUMENT_IS_MISSED = 6;
        TASKERROR_CODE_ARGUMENT_IS_WRONG = 7;
        TASKERROR_CODE_PAID_FEATURE = 8;
        TASKERROR_CODE_NOT_POSSIBLE = 9;
    }
    TaskError_Code code = 1;
    string description = 2;
}

message TaskResult {
    string description = 1;
    string id = 2;
    message Results {
    }
    Results results = 3;
    enum TaskResult_Statu {
        TASKRESULT_STATU_`PREPARING+ = 0;
        TASKRESULT_STATU_IDLE = 1;
        TASKRESULT_STATU_IN_PROGRESS = 2;
        TASKRESULT_STATU_TIMEOUT = 3;
        TASKRESULT_STATU_COMPLETE = 4;
        TASKRESULT_STATU_FAILED = 5;
    }
    TaskResult_Statu status = 4;
    enum TaskResult_Type {
        TASKRESULT_TYPE_CREATE_WEB_FONT = 0;
        TASKRESULT_TYPE_CREATE_SVG_SET = 1;
    }
    TaskResult_Type type = 5;
}

message TotalV3Item {
    enum TotalV3Item_Api_code {
        TOTALV3ITEM_API_CODE_IOS7 = 0;
        TOTALV3ITEM_API_CODE_WIN8 = 1;
        TOTALV3ITEM_API_CODE_WIN10 = 2;
        TOTALV3ITEM_API_CODE_ANDROID = 3;
        TOTALV3ITEM_API_CODE_ANDROIDL = 4;
        TOTALV3ITEM_API_CODE_COLOR = 5;
        TOTALV3ITEM_API_CODE_OFFICE = 6;
    }
    TotalV3Item_Api_code api_code = 1;
    string name = 2;
    int32 total = 3;
}

service Icons8Service {
    // Categories
    // 
    // The operation will not return the categories that have less than 10 icons.
    // We need it to test the categories without showing garbage on the production website.
    rpc GetApiIconsetsV3Categories(GetApiIconsetsV3CategoriesRequest) returns (GetApiIconsetsV3CategoriesResponse) {
      option (google.api.http) = {
        get: "//api/iconsets/v3/categories?platform={platform}&language={language}"
      };
    }
    // By Category
    rpc GetApiIconsetsV3Category(GetApiIconsetsV3CategoryRequest) returns (GetApiIconsetsV3CategoryResponse) {
      option (google.api.http) = {
        get: "//api/iconsets/v3/category?category={category}&subcategory={subcategory}&amount={amount}&offset={offset}&platform={platform}&language={language}"
      };
    }
    // Latest
    rpc GetApiIconsetsV3Latest(GetApiIconsetsV3LatestRequest) returns (GetApiIconsetsV3LatestResponse) {
      option (google.api.http) = {
        get: "//api/iconsets/v3/latest?term={term}&amount={amount}&offset={offset}&platform={platform}&language={language}"
      };
    }
    // By Keyword
    rpc GetApiIconsetsV3Search(GetApiIconsetsV3SearchRequest) returns (GetApiIconsetsV3SearchResponse) {
      option (google.api.http) = {
        get: "//api/iconsets/v3/search?term={term}&amount={amount}&offset={offset}&platform={platform}&language={language}&exact_amount={exact_amount}"
      };
    }
    // Totals
    rpc GetApiIconsetsV3Total(GetApiIconsetsV3TotalRequest) returns (GetApiIconsetsV3TotalResponse) {
      option (google.api.http) = {
        get: "//api/iconsets/v3/total?since={since}"
      };
    }
    // From a Collection
    rpc PostApiTaskWebFontCollection(PostApiTaskWebFontCollectionRequest) returns (PostApiTaskWebFontCollectionResponse) {
      option (google.api.http) = {
        post: "//api/task/web-font/collection"
        body: "body"
      };
    }
    // From Separate Icons
    rpc PostApiTaskWebFontIcons(PostApiTaskWebFontIconsRequest) returns (PostApiTaskWebFontIconsResponse) {
      option (google.api.http) = {
        post: "//api/task/web-font/icons"
        body: "body"
      };
    }
}

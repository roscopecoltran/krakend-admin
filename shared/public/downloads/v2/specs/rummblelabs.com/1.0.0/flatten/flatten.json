{
	"definitions.Action.properties.item.example": "item1234",
	"definitions.Action.properties.item.type": "string",
	"definitions.Action.properties.type.description": "action type",
	"definitions.Action.properties.type.type": "integer",
	"definitions.Action.properties.user.example": "user1234",
	"definitions.Action.properties.user.type": "string",
	"definitions.Action.properties.value.description": "action value (e.g. a rating)",
	"definitions.Action.properties.value.type": "number",
	"definitions.Action.required.length": 3,
	"definitions.Action.required[0]": "user",
	"definitions.Action.required[1]": "item",
	"definitions.Action.required[2]": "type",
	"definitions.AttributesName.properties.attrName1.example": "attrValue1",
	"definitions.AttributesName.properties.attrName1.type": "string",
	"definitions.AttributesName.properties.attrName2.example": "attrValue2",
	"definitions.AttributesName.properties.attrName2.type": "string",
	"definitions.Item.properties.attributesName.$ref": "#/definitions/AttributesName",
	"definitions.Item.properties.id.example": "myid1234",
	"definitions.Item.properties.id.type": "string",
	"definitions.Item.properties.type.description": "type of item",
	"definitions.Item.properties.type.example": 1,
	"definitions.Item.properties.type.type": "integer",
	"definitions.Item.required.length": 1,
	"definitions.Item.required[0]": "id",
	"definitions.User.properties.active.description": "whether user is active",
	"definitions.User.properties.active.type": "boolean",
	"definitions.User.properties.attributesName.$ref": "#/definitions/AttributesName",
	"definitions.User.properties.id.example": "myid1234",
	"definitions.User.properties.id.type": "string",
	"definitions.User.properties.username.description": "name of user",
	"definitions.User.properties.username.example": "Joe Bloggs",
	"definitions.User.properties.username.type": "string",
	"definitions.User.required.length": 1,
	"definitions.User.required[0]": "id",
	"host": "recsvm.rummblelabs.com",
	"info.description": "Seldon is an Open Predictive Platform that currently allows item recommendations and general predictive models to be deployed based on structured historical data.",
	"info.title": "Seldon",
	"info.version": "1.0.0",
	"info.x-apisguru-categories.length": 1,
	"info.x-apisguru-categories[0]": "machine_learning",
	"info.x-logo.url": "https://api.apis.guru/v2/cache/logo/http_www.seldon.io_wp-content_uploads_2014_10_Seldon-Logo-trans.png",
	"info.x-origin.length": 1,
	"info.x-origin[0].format": "swagger",
	"info.x-origin[0].url": "http://recsvm.rummblelabs.com/api-spec/seldon.json",
	"info.x-origin[0].version": "2.0",
	"info.x-preferred": true,
	"info.x-providerName": "rummblelabs.com",
	"paths./actions.post.consumes.length": 1,
	"paths./actions.post.consumes[0]": "application/json",
	"paths./actions.post.description": "",
	"paths./actions.post.operationId": "postAction",
	"paths./actions.post.parameters.length": 2,
	"paths./actions.post.parameters[0].description": "oauth token",
	"paths./actions.post.parameters[0].in": "query",
	"paths./actions.post.parameters[0].name": "oauth_token",
	"paths./actions.post.parameters[0].required": false,
	"paths./actions.post.parameters[0].type": "string",
	"paths./actions.post.parameters[1].description": "the json details",
	"paths./actions.post.parameters[1].in": "body",
	"paths./actions.post.parameters[1].name": "body",
	"paths./actions.post.parameters[1].required": true,
	"paths./actions.post.parameters[1].schema.$ref": "#/definitions/Action",
	"paths./actions.post.responses.400.description": "Invalid parameters",
	"paths./actions.post.summary": "post new action between a user and an item",
	"paths./actions.post.tags.length": 1,
	"paths./actions.post.tags[0]": "oauth actions",
	"paths./items.get.description": "",
	"paths./items.get.operationId": "getItems",
	"paths./items.get.parameters.length": 6,
	"paths./items.get.parameters[0].description": "oauth token",
	"paths./items.get.parameters[0].in": "query",
	"paths./items.get.parameters[0].name": "oauth_token",
	"paths./items.get.parameters[0].required": false,
	"paths./items.get.parameters[0].type": "string",
	"paths./items.get.parameters[1].description": "get all attributes for item",
	"paths./items.get.parameters[1].in": "query",
	"paths./items.get.parameters[1].name": "full",
	"paths./items.get.parameters[1].required": false,
	"paths./items.get.parameters[1].type": "boolean",
	"paths./items.get.parameters[2].description": "keywords to match",
	"paths./items.get.parameters[2].in": "query",
	"paths./items.get.parameters[2].name": "name",
	"paths./items.get.parameters[2].required": false,
	"paths./items.get.parameters[2].type": "string",
	"paths./items.get.parameters[3].description": "limit items to a particular dimension",
	"paths./items.get.parameters[3].in": "query",
	"paths./items.get.parameters[3].name": "dimension",
	"paths./items.get.parameters[3].required": false,
	"paths./items.get.parameters[3].type": "integer",
	"paths./items.get.parameters[4].description": "limit items to a particular type",
	"paths./items.get.parameters[4].in": "query",
	"paths./items.get.parameters[4].name": "type",
	"paths./items.get.parameters[4].required": false,
	"paths./items.get.parameters[4].type": "integer",
	"paths./items.get.parameters[5].description": "limit number of items returned",
	"paths./items.get.parameters[5].in": "query",
	"paths./items.get.parameters[5].name": "limit",
	"paths./items.get.parameters[5].required": false,
	"paths./items.get.parameters[5].type": "integer",
	"paths./items.get.responses.400.description": "Invalid parameters",
	"paths./items.get.summary": "get items",
	"paths./items.get.tags.length": 1,
	"paths./items.get.tags[0]": "oauth items",
	"paths./items.post.consumes.length": 1,
	"paths./items.post.consumes[0]": "application/json",
	"paths./items.post.description": "",
	"paths./items.post.operationId": "postItem",
	"paths./items.post.parameters.length": 2,
	"paths./items.post.parameters[0].description": "oauth token",
	"paths./items.post.parameters[0].in": "query",
	"paths./items.post.parameters[0].name": "oauth_token",
	"paths./items.post.parameters[0].required": false,
	"paths./items.post.parameters[0].type": "string",
	"paths./items.post.parameters[1].description": "the json details",
	"paths./items.post.parameters[1].in": "body",
	"paths./items.post.parameters[1].name": "body",
	"paths./items.post.parameters[1].required": true,
	"paths./items.post.parameters[1].schema.$ref": "#/definitions/Item",
	"paths./items.post.responses.400.description": "Invalid parameters",
	"paths./items.post.summary": "post new item",
	"paths./items.post.tags.length": 1,
	"paths./items.post.tags[0]": "oauth items",
	"paths./items.put.consumes.length": 1,
	"paths./items.put.consumes[0]": "application/json",
	"paths./items.put.description": "",
	"paths./items.put.operationId": "putItem",
	"paths./items.put.parameters.length": 2,
	"paths./items.put.parameters[0].description": "oauth token",
	"paths./items.put.parameters[0].in": "query",
	"paths./items.put.parameters[0].name": "oauth_token",
	"paths./items.put.parameters[0].required": false,
	"paths./items.put.parameters[0].type": "string",
	"paths./items.put.parameters[1].description": "the json details",
	"paths./items.put.parameters[1].in": "body",
	"paths./items.put.parameters[1].name": "body",
	"paths./items.put.parameters[1].required": true,
	"paths./items.put.parameters[1].schema.$ref": "#/definitions/Item",
	"paths./items.put.responses.400.description": "Invalid parameters",
	"paths./items.put.summary": "update item",
	"paths./items.put.tags.length": 1,
	"paths./items.put.tags[0]": "oauth items",
	"paths./items/type.get.description": "",
	"paths./items/type.get.operationId": "getItemTypes",
	"paths./items/type.get.parameters.length": 1,
	"paths./items/type.get.parameters[0].description": "oauth token",
	"paths./items/type.get.parameters[0].in": "query",
	"paths./items/type.get.parameters[0].name": "oauth_token",
	"paths./items/type.get.parameters[0].required": false,
	"paths./items/type.get.parameters[0].type": "string",
	"paths./items/type.get.responses.400.description": "Invalid parameters",
	"paths./items/type.get.summary": "get item type",
	"paths./items/type.get.tags.length": 1,
	"paths./items/type.get.tags[0]": "oauth items",
	"paths./items/{itemId}.get.description": "",
	"paths./items/{itemId}.get.operationId": "getItem",
	"paths./items/{itemId}.get.parameters.length": 3,
	"paths./items/{itemId}.get.parameters[0].description": "oauth token",
	"paths./items/{itemId}.get.parameters[0].in": "query",
	"paths./items/{itemId}.get.parameters[0].name": "oauth_token",
	"paths./items/{itemId}.get.parameters[0].required": false,
	"paths./items/{itemId}.get.parameters[0].type": "string",
	"paths./items/{itemId}.get.parameters[1].description": "the item id to get",
	"paths./items/{itemId}.get.parameters[1].in": "path",
	"paths./items/{itemId}.get.parameters[1].name": "itemId",
	"paths./items/{itemId}.get.parameters[1].required": true,
	"paths./items/{itemId}.get.parameters[1].type": "string",
	"paths./items/{itemId}.get.parameters[2].description": "get all attributes for item",
	"paths./items/{itemId}.get.parameters[2].in": "query",
	"paths./items/{itemId}.get.parameters[2].name": "full",
	"paths./items/{itemId}.get.parameters[2].required": false,
	"paths./items/{itemId}.get.parameters[2].type": "boolean",
	"paths./items/{itemId}.get.responses.400.description": "Invalid parameters",
	"paths./items/{itemId}.get.summary": "get item",
	"paths./items/{itemId}.get.tags.length": 1,
	"paths./items/{itemId}.get.tags[0]": "oauth items",
	"paths./js/action/new.get.consumes.length": 1,
	"paths./js/action/new.get.consumes[0]": "application/json",
	"paths./js/action/new.get.description": "",
	"paths./js/action/new.get.operationId": "addAction",
	"paths./js/action/new.get.parameters.length": 6,
	"paths./js/action/new.get.parameters[0].default": "uggyecofcz",
	"paths./js/action/new.get.parameters[0].description": "consumer key",
	"paths./js/action/new.get.parameters[0].in": "query",
	"paths./js/action/new.get.parameters[0].name": "consumer_key",
	"paths./js/action/new.get.parameters[0].required": true,
	"paths./js/action/new.get.parameters[0].type": "string",
	"paths./js/action/new.get.parameters[1].description": "user id",
	"paths./js/action/new.get.parameters[1].in": "query",
	"paths./js/action/new.get.parameters[1].name": "user",
	"paths./js/action/new.get.parameters[1].required": true,
	"paths./js/action/new.get.parameters[1].type": "string",
	"paths./js/action/new.get.parameters[2].description": "item id",
	"paths./js/action/new.get.parameters[2].in": "query",
	"paths./js/action/new.get.parameters[2].name": "item",
	"paths./js/action/new.get.parameters[2].required": true,
	"paths./js/action/new.get.parameters[2].type": "string",
	"paths./js/action/new.get.parameters[3].description": "type",
	"paths./js/action/new.get.parameters[3].in": "query",
	"paths./js/action/new.get.parameters[3].name": "type",
	"paths./js/action/new.get.parameters[3].required": true,
	"paths./js/action/new.get.parameters[3].type": "string",
	"paths./js/action/new.get.parameters[4].description": "JSONP callback",
	"paths./js/action/new.get.parameters[4].in": "query",
	"paths./js/action/new.get.parameters[4].name": "jsonpCallback",
	"paths./js/action/new.get.parameters[4].required": true,
	"paths./js/action/new.get.parameters[4].type": "string",
	"paths./js/action/new.get.parameters[5].description": "time",
	"paths./js/action/new.get.parameters[5].in": "query",
	"paths./js/action/new.get.parameters[5].name": "timestamp",
	"paths./js/action/new.get.parameters[5].required": false,
	"paths./js/action/new.get.parameters[5].type": "integer",
	"paths./js/action/new.get.responses.400.description": "Invalid parameters",
	"paths./js/action/new.get.summary": "Add a user interaction",
	"paths./js/action/new.get.tags.length": 1,
	"paths./js/action/new.get.tags[0]": "js actions",
	"paths./js/recommendations.get.description": "",
	"paths./js/recommendations.get.operationId": "getRecommendation",
	"paths./js/recommendations.get.parameters.length": 8,
	"paths./js/recommendations.get.parameters[0].default": "uggyecofcz",
	"paths./js/recommendations.get.parameters[0].description": "consumer key",
	"paths./js/recommendations.get.parameters[0].in": "query",
	"paths./js/recommendations.get.parameters[0].name": "consumer_key",
	"paths./js/recommendations.get.parameters[0].required": true,
	"paths./js/recommendations.get.parameters[0].type": "string",
	"paths./js/recommendations.get.parameters[1].description": "user id",
	"paths./js/recommendations.get.parameters[1].in": "query",
	"paths./js/recommendations.get.parameters[1].name": "user",
	"paths./js/recommendations.get.parameters[1].required": true,
	"paths./js/recommendations.get.parameters[1].type": "string",
	"paths./js/recommendations.get.parameters[2].description": "currently viewed item id",
	"paths./js/recommendations.get.parameters[2].in": "query",
	"paths./js/recommendations.get.parameters[2].name": "item",
	"paths./js/recommendations.get.parameters[2].required": false,
	"paths./js/recommendations.get.parameters[2].type": "string",
	"paths./js/recommendations.get.parameters[3].description": "max number of recommendations to return",
	"paths./js/recommendations.get.parameters[3].in": "query",
	"paths./js/recommendations.get.parameters[3].name": "limit",
	"paths./js/recommendations.get.parameters[3].required": false,
	"paths./js/recommendations.get.parameters[3].type": "integer",
	"paths./js/recommendations.get.parameters[4].description": "get recommendations for a particular item dimension (e.g., just sports articles)",
	"paths./js/recommendations.get.parameters[4].in": "query",
	"paths./js/recommendations.get.parameters[4].name": "dimension",
	"paths./js/recommendations.get.parameters[4].required": false,
	"paths./js/recommendations.get.parameters[4].type": "integer",
	"paths./js/recommendations.get.parameters[5].description": "the fields to return",
	"paths./js/recommendations.get.parameters[5].format": "command separated list",
	"paths./js/recommendations.get.parameters[5].in": "query",
	"paths./js/recommendations.get.parameters[5].name": "attributes",
	"paths./js/recommendations.get.parameters[5].required": false,
	"paths./js/recommendations.get.parameters[5].type": "string",
	"paths./js/recommendations.get.parameters[6].description": "override default algorithms with specified algorithms",
	"paths./js/recommendations.get.parameters[6].in": "query",
	"paths./js/recommendations.get.parameters[6].name": "algorithms",
	"paths./js/recommendations.get.parameters[6].required": false,
	"paths./js/recommendations.get.parameters[6].type": "string",
	"paths./js/recommendations.get.parameters[7].description": "JSONP callback",
	"paths./js/recommendations.get.parameters[7].in": "query",
	"paths./js/recommendations.get.parameters[7].name": "jsonpCallback",
	"paths./js/recommendations.get.parameters[7].required": true,
	"paths./js/recommendations.get.parameters[7].type": "string",
	"paths./js/recommendations.get.responses.400.description": "Invalid parameters",
	"paths./js/recommendations.get.summary": "Get recommendations for a user",
	"paths./js/recommendations.get.tags.length": 1,
	"paths./js/recommendations.get.tags[0]": "js recommendations",
	"paths./token.get.description": "",
	"paths./token.get.operationId": "getToken",
	"paths./token.get.parameters.length": 2,
	"paths./token.get.parameters[0].description": "consumer key",
	"paths./token.get.parameters[0].in": "query",
	"paths./token.get.parameters[0].name": "consumer_key",
	"paths./token.get.parameters[0].required": true,
	"paths./token.get.parameters[0].type": "string",
	"paths./token.get.parameters[1].description": "consumer secret",
	"paths./token.get.parameters[1].in": "query",
	"paths./token.get.parameters[1].name": "consumer_secret",
	"paths./token.get.parameters[1].required": true,
	"paths./token.get.parameters[1].type": "string",
	"paths./token.get.responses.400.description": "Invalid parameters",
	"paths./token.get.summary": "get token",
	"paths./token.get.tags.length": 1,
	"paths./token.get.tags[0]": "token",
	"paths./users.get.description": "",
	"paths./users.get.operationId": "getUsers",
	"paths./users.get.parameters.length": 4,
	"paths./users.get.parameters[0].description": "oauth token",
	"paths./users.get.parameters[0].in": "query",
	"paths./users.get.parameters[0].name": "oauth_token",
	"paths./users.get.parameters[0].required": false,
	"paths./users.get.parameters[0].type": "string",
	"paths./users.get.parameters[1].description": "get all attributes for user",
	"paths./users.get.parameters[1].in": "query",
	"paths./users.get.parameters[1].name": "full",
	"paths./users.get.parameters[1].required": false,
	"paths./users.get.parameters[1].type": "boolean",
	"paths./users.get.parameters[2].description": "keywords to match",
	"paths./users.get.parameters[2].in": "query",
	"paths./users.get.parameters[2].name": "name",
	"paths./users.get.parameters[2].required": false,
	"paths./users.get.parameters[2].type": "string",
	"paths./users.get.parameters[3].description": "limit number of users returned",
	"paths./users.get.parameters[3].in": "query",
	"paths./users.get.parameters[3].name": "limit",
	"paths./users.get.parameters[3].required": false,
	"paths./users.get.parameters[3].type": "integer",
	"paths./users.get.responses.400.description": "Invalid parameters",
	"paths./users.get.summary": "get users",
	"paths./users.get.tags.length": 1,
	"paths./users.get.tags[0]": "oauth users",
	"paths./users.post.consumes.length": 1,
	"paths./users.post.consumes[0]": "application/json",
	"paths./users.post.description": "",
	"paths./users.post.operationId": "postUser",
	"paths./users.post.parameters.length": 2,
	"paths./users.post.parameters[0].description": "oauth token",
	"paths./users.post.parameters[0].in": "query",
	"paths./users.post.parameters[0].name": "oauth_token",
	"paths./users.post.parameters[0].required": false,
	"paths./users.post.parameters[0].type": "string",
	"paths./users.post.parameters[1].description": "the json details",
	"paths./users.post.parameters[1].in": "body",
	"paths./users.post.parameters[1].name": "body",
	"paths./users.post.parameters[1].required": true,
	"paths./users.post.parameters[1].schema.$ref": "#/definitions/User",
	"paths./users.post.responses.400.description": "Invalid parameters",
	"paths./users.post.summary": "post new user",
	"paths./users.post.tags.length": 1,
	"paths./users.post.tags[0]": "oauth users",
	"paths./users.put.consumes.length": 1,
	"paths./users.put.consumes[0]": "application/json",
	"paths./users.put.description": "",
	"paths./users.put.operationId": "updateUser",
	"paths./users.put.parameters.length": 2,
	"paths./users.put.parameters[0].description": "oauth token",
	"paths./users.put.parameters[0].in": "query",
	"paths./users.put.parameters[0].name": "oauth_token",
	"paths./users.put.parameters[0].required": false,
	"paths./users.put.parameters[0].type": "string",
	"paths./users.put.parameters[1].description": "the json details",
	"paths./users.put.parameters[1].in": "body",
	"paths./users.put.parameters[1].name": "body",
	"paths./users.put.parameters[1].required": true,
	"paths./users.put.parameters[1].schema.$ref": "#/definitions/User",
	"paths./users.put.responses.400.description": "Invalid parameters",
	"paths./users.put.summary": "update user",
	"paths./users.put.tags.length": 1,
	"paths./users.put.tags[0]": "oauth users",
	"paths./users/{userId}.get.description": "",
	"paths./users/{userId}.get.operationId": "getUser",
	"paths./users/{userId}.get.parameters.length": 3,
	"paths./users/{userId}.get.parameters[0].description": "oauth token",
	"paths./users/{userId}.get.parameters[0].in": "query",
	"paths./users/{userId}.get.parameters[0].name": "oauth_token",
	"paths./users/{userId}.get.parameters[0].required": false,
	"paths./users/{userId}.get.parameters[0].type": "string",
	"paths./users/{userId}.get.parameters[1].description": "the user id to get",
	"paths./users/{userId}.get.parameters[1].in": "path",
	"paths./users/{userId}.get.parameters[1].name": "userId",
	"paths./users/{userId}.get.parameters[1].required": true,
	"paths./users/{userId}.get.parameters[1].type": "string",
	"paths./users/{userId}.get.parameters[2].description": "get all attributes for user",
	"paths./users/{userId}.get.parameters[2].in": "query",
	"paths./users/{userId}.get.parameters[2].name": "full",
	"paths./users/{userId}.get.parameters[2].required": false,
	"paths./users/{userId}.get.parameters[2].type": "boolean",
	"paths./users/{userId}.get.responses.400.description": "Invalid parameters",
	"paths./users/{userId}.get.summary": "get a user",
	"paths./users/{userId}.get.tags.length": 1,
	"paths./users/{userId}.get.tags[0]": "oauth users",
	"paths./users/{userId}/actions.get.description": "",
	"paths./users/{userId}/actions.get.operationId": "getUserActions",
	"paths./users/{userId}/actions.get.parameters.length": 4,
	"paths./users/{userId}/actions.get.parameters[0].description": "oauth token",
	"paths./users/{userId}/actions.get.parameters[0].in": "query",
	"paths./users/{userId}/actions.get.parameters[0].name": "oauth_token",
	"paths./users/{userId}/actions.get.parameters[0].required": false,
	"paths./users/{userId}/actions.get.parameters[0].type": "string",
	"paths./users/{userId}/actions.get.parameters[1].description": "the user id to get",
	"paths./users/{userId}/actions.get.parameters[1].in": "path",
	"paths./users/{userId}/actions.get.parameters[1].name": "userId",
	"paths./users/{userId}/actions.get.parameters[1].required": true,
	"paths./users/{userId}/actions.get.parameters[1].type": "string",
	"paths./users/{userId}/actions.get.parameters[2].description": "get all attributes for user",
	"paths./users/{userId}/actions.get.parameters[2].in": "query",
	"paths./users/{userId}/actions.get.parameters[2].name": "full",
	"paths./users/{userId}/actions.get.parameters[2].required": false,
	"paths./users/{userId}/actions.get.parameters[2].type": "boolean",
	"paths./users/{userId}/actions.get.parameters[3].description": "limit number of actions returned",
	"paths./users/{userId}/actions.get.parameters[3].in": "query",
	"paths./users/{userId}/actions.get.parameters[3].name": "limit",
	"paths./users/{userId}/actions.get.parameters[3].required": false,
	"paths./users/{userId}/actions.get.parameters[3].type": "integer",
	"paths./users/{userId}/actions.get.responses.400.description": "Invalid parameters",
	"paths./users/{userId}/actions.get.summary": "get a user's recent actions",
	"paths./users/{userId}/actions.get.tags.length": 2,
	"paths./users/{userId}/actions.get.tags[0]": "oauth users",
	"paths./users/{userId}/actions.get.tags[1]": "oauth actions",
	"paths./users/{userId}/recommendations.get.description": "",
	"paths./users/{userId}/recommendations.get.operationId": "getUserRecommendations",
	"paths./users/{userId}/recommendations.get.parameters.length": 6,
	"paths./users/{userId}/recommendations.get.parameters[0].description": "oauth token",
	"paths./users/{userId}/recommendations.get.parameters[0].in": "query",
	"paths./users/{userId}/recommendations.get.parameters[0].name": "oauth_token",
	"paths./users/{userId}/recommendations.get.parameters[0].required": false,
	"paths./users/{userId}/recommendations.get.parameters[0].type": "string",
	"paths./users/{userId}/recommendations.get.parameters[1].description": "the user id to get",
	"paths./users/{userId}/recommendations.get.parameters[1].in": "path",
	"paths./users/{userId}/recommendations.get.parameters[1].name": "userId",
	"paths./users/{userId}/recommendations.get.parameters[1].required": true,
	"paths./users/{userId}/recommendations.get.parameters[1].type": "string",
	"paths./users/{userId}/recommendations.get.parameters[2].description": "get all attributes for user",
	"paths./users/{userId}/recommendations.get.parameters[2].in": "query",
	"paths./users/{userId}/recommendations.get.parameters[2].name": "full",
	"paths./users/{userId}/recommendations.get.parameters[2].required": false,
	"paths./users/{userId}/recommendations.get.parameters[2].type": "boolean",
	"paths./users/{userId}/recommendations.get.parameters[3].description": "limit number of actions returned",
	"paths./users/{userId}/recommendations.get.parameters[3].in": "query",
	"paths./users/{userId}/recommendations.get.parameters[3].name": "limit",
	"paths./users/{userId}/recommendations.get.parameters[3].required": false,
	"paths./users/{userId}/recommendations.get.parameters[3].type": "integer",
	"paths./users/{userId}/recommendations.get.parameters[4].description": "get recommendations for a particular item dimension (e.g., just sports articles)",
	"paths./users/{userId}/recommendations.get.parameters[4].in": "query",
	"paths./users/{userId}/recommendations.get.parameters[4].name": "dimension",
	"paths./users/{userId}/recommendations.get.parameters[4].required": false,
	"paths./users/{userId}/recommendations.get.parameters[4].type": "integer",
	"paths./users/{userId}/recommendations.get.parameters[5].description": "override default algorithms with specified algorithms",
	"paths./users/{userId}/recommendations.get.parameters[5].in": "query",
	"paths./users/{userId}/recommendations.get.parameters[5].name": "algorithms",
	"paths./users/{userId}/recommendations.get.parameters[5].required": false,
	"paths./users/{userId}/recommendations.get.parameters[5].type": "string",
	"paths./users/{userId}/recommendations.get.responses.400.description": "Invalid parameters",
	"paths./users/{userId}/recommendations.get.summary": "get recommendations for a user",
	"paths./users/{userId}/recommendations.get.tags.length": 2,
	"paths./users/{userId}/recommendations.get.tags[0]": "oauth users",
	"paths./users/{userId}/recommendations.get.tags[1]": "oauth recommendations",
	"produces.length": 1,
	"produces[0]": "application/json",
	"schemes.length": 2,
	"schemes[0]": "http",
	"schemes[1]": "https",
	"swagger": "2.0"
}
"definitions.API2.Controllers.GroceryListController.DepartmentModel.properties.items.type" = "string"
"definitions.API2.Controllers.GroceryListController.DepartmentModel.type" = "object"
"definitions.API2.Controllers.GroceryListController.PostGroceryListRecipeRequest.properties.markAsPending.type" = "boolean"
"definitions.API2.Controllers.GroceryListController.PostGroceryListRecipeRequest.properties.recipeId.format" = "int32"
"definitions.API2.Controllers.GroceryListController.PostGroceryListRecipeRequest.properties.recipeId.type" = "integer"
"definitions.API2.Controllers.GroceryListController.PostGroceryListRecipeRequest.properties.scale.format" = "double"
"definitions.API2.Controllers.GroceryListController.PostGroceryListRecipeRequest.properties.scale.type" = "number"
"definitions.API2.Controllers.GroceryListController.PostGroceryListRecipeRequest.type" = "object"
"definitions.API2.Controllers.GroceryListController.PostGroceryListSyncRequest.properties.list.$ref" = "#/definitions/BigOven.Model.API.Grocery.GroceryList"
"definitions.API2.Controllers.GroceryListController.PostGroceryListSyncRequest.properties.since.type" = "string"
"definitions.API2.Controllers.GroceryListController.PostGroceryListSyncRequest.type" = "object"
"definitions.API2.Controllers.GroceryListController.PostToGroceryListRecipeRequest.properties.department.type" = "string"
"definitions.API2.Controllers.GroceryListController.PostToGroceryListRecipeRequest.properties.name.type" = "string"
"definitions.API2.Controllers.GroceryListController.PostToGroceryListRecipeRequest.properties.notes.type" = "string"
"definitions.API2.Controllers.GroceryListController.PostToGroceryListRecipeRequest.properties.quantity.type" = "string"
"definitions.API2.Controllers.GroceryListController.PostToGroceryListRecipeRequest.properties.unit.type" = "string"
"definitions.API2.Controllers.GroceryListController.PostToGroceryListRecipeRequest.type" = "object"
"definitions.API2.Controllers.GroceryListController.UpdateItemByGuidRequest.properties.department.type" = "string"
"definitions.API2.Controllers.GroceryListController.UpdateItemByGuidRequest.properties.guid.type" = "string"
"definitions.API2.Controllers.GroceryListController.UpdateItemByGuidRequest.properties.name.type" = "string"
"definitions.API2.Controllers.GroceryListController.UpdateItemByGuidRequest.properties.notes.type" = "string"
"definitions.API2.Controllers.GroceryListController.UpdateItemByGuidRequest.properties.quantity.type" = "string"
"definitions.API2.Controllers.GroceryListController.UpdateItemByGuidRequest.properties.unit.type" = "string"
"definitions.API2.Controllers.GroceryListController.UpdateItemByGuidRequest.type" = "object"
"definitions.API2.Controllers.ImagesController.RecipePhotosResponse.properties.ResultCount.format" = "int32"
"definitions.API2.Controllers.ImagesController.RecipePhotosResponse.properties.ResultCount.type" = "integer"
"definitions.API2.Controllers.ImagesController.RecipePhotosResponse.properties.Results.items.$ref" = "#/definitions/BigOven.Model.API2.Photo"
"definitions.API2.Controllers.ImagesController.RecipePhotosResponse.properties.Results.type" = "array"
"definitions.API2.Controllers.ImagesController.RecipePhotosResponse.type" = "object"
"definitions.API2.Controllers.MeController.KeyOption.properties.Key.type" = "string"
"definitions.API2.Controllers.MeController.KeyOption.properties.Options.items.$ref" = "#/definitions/API2.Models.Option"
"definitions.API2.Controllers.MeController.KeyOption.properties.Options.type" = "array"
"definitions.API2.Controllers.MeController.KeyOption.type" = "object"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.CreationDate.format" = "date-time"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.CreationDate.type" = "string"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.Date.format" = "date-time"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.Date.type" = "string"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.DateDT.type" = "string"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.GUID.type" = "string"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.ID.format" = "int32"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.ID.type" = "integer"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.Notes.type" = "string"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.People.type" = "string"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.RecipeID.format" = "int32"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.RecipeID.type" = "integer"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.UserID.format" = "int32"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.UserID.type" = "integer"
"definitions.API2.Controllers.NoteController.NoteRequest.properties.Variations.type" = "string"
"definitions.API2.Controllers.NoteController.NoteRequest.type" = "object"
"definitions.API2.Controllers.RecipeController.FeedbackDTO.description" = ""
"definitions.API2.Controllers.RecipeController.FeedbackDTO.properties.feedback.description" = ""
"definitions.API2.Controllers.RecipeController.FeedbackDTO.properties.feedback.type" = "string"
"definitions.API2.Controllers.RecipeController.FeedbackDTO.type" = "object"
"definitions.API2.Controllers.ReviewController.PostReplyReq.description" = "Reply request parameters"
"definitions.API2.Controllers.ReviewController.PostReplyReq.properties.Comment.description" = "The comment. If mentioning any user(s) (optional), include them as @username in the text body. Do not use @ symbol for anything but mentioning @usernames."
"definitions.API2.Controllers.ReviewController.PostReplyReq.properties.Comment.type" = "string"
"definitions.API2.Controllers.ReviewController.PostReplyReq.type" = "object"
"definitions.API2.Controllers.ReviewController.ReviewRequest.description" = "Payload for reviews"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.ActiveMinutes.description" = "How many minutes of ACTIVE time (i.e., actively working on the recipe, not waiting for rising, baking, etc.) did it \r\n            demand of the cook? Optional."
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.ActiveMinutes.format" = "int32"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.ActiveMinutes.type" = "integer"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.Comment.description" = "The notes"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.Comment.type" = "string"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.MakeAgain.description" = "\"yes\" or \"no\""
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.MakeAgain.type" = "string"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.StarRating.description" = "1, 2, 3, 4, or 5"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.StarRating.format" = "int32"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.StarRating.type" = "integer"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.TotalMinutes.description" = "How long, start to finish, in minutes (integer) did it take? Optional."
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.TotalMinutes.format" = "int32"
"definitions.API2.Controllers.ReviewController.ReviewRequest.properties.TotalMinutes.type" = "integer"
"definitions.API2.Controllers.ReviewController.ReviewRequest.type" = "object"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.description" = "Legacy -- This object here is deprecated. Please use the new \"ReviewRequest\" structure for all future development"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.ActiveMinutes.format" = "int32"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.ActiveMinutes.type" = "integer"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.Comment.type" = "string"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.GUID.type" = "string"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.MakeAgain.type" = "string"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.ParentID.format" = "int32"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.ParentID.type" = "integer"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.StarRating.format" = "int32"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.StarRating.type" = "integer"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.TotalMinutes.format" = "int32"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.properties.TotalMinutes.type" = "integer"
"definitions.API2.Controllers.ReviewController.ReviewRequestLegacy.type" = "object"
"definitions.API2.GroceryListDepartmentResult.properties.dept.type" = "string"
"definitions.API2.GroceryListDepartmentResult.properties.item.type" = "string"
"definitions.API2.GroceryListDepartmentResult.type" = "object"
"definitions.API2.Models.Accounting.properties.CreditBalance.format" = "int32"
"definitions.API2.Models.Accounting.properties.CreditBalance.type" = "integer"
"definitions.API2.Models.Accounting.properties.MemberSince.format" = "date-time"
"definitions.API2.Models.Accounting.properties.MemberSince.type" = "string"
"definitions.API2.Models.Accounting.properties.PremiumExpiryDate.format" = "date-time"
"definitions.API2.Models.Accounting.properties.PremiumExpiryDate.type" = "string"
"definitions.API2.Models.Accounting.properties.UserLevel.type" = "string"
"definitions.API2.Models.Accounting.type" = "object"
"definitions.API2.Models.BigOvenUser.properties.Accounting.$ref" = "#/definitions/API2.Models.Accounting"
"definitions.API2.Models.BigOvenUser.properties.BOAuthToken.type" = "string"
"definitions.API2.Models.BigOvenUser.properties.LastChangeLogID.type" = "string"
"definitions.API2.Models.BigOvenUser.properties.Personal.$ref" = "#/definitions/API2.Models.Personal"
"definitions.API2.Models.BigOvenUser.properties.Preferences.$ref" = "#/definitions/API2.Models.Preference"
"definitions.API2.Models.BigOvenUser.properties.Profile.$ref" = "#/definitions/API2.Models.Profile"
"definitions.API2.Models.BigOvenUser.type" = "object"
"definitions.API2.Models.Counts.properties.AddedCount.format" = "int64"
"definitions.API2.Models.Counts.properties.AddedCount.type" = "integer"
"definitions.API2.Models.Counts.properties.FollowersCount.format" = "int64"
"definitions.API2.Models.Counts.properties.FollowersCount.type" = "integer"
"definitions.API2.Models.Counts.properties.FollowingCount.format" = "int64"
"definitions.API2.Models.Counts.properties.FollowingCount.type" = "integer"
"definitions.API2.Models.Counts.properties.PrivateRecipeCount.format" = "int64"
"definitions.API2.Models.Counts.properties.PrivateRecipeCount.type" = "integer"
"definitions.API2.Models.Counts.properties.PublicRecipeCount.format" = "int64"
"definitions.API2.Models.Counts.properties.PublicRecipeCount.type" = "integer"
"definitions.API2.Models.Counts.properties.TotalRecipes.format" = "int64"
"definitions.API2.Models.Counts.properties.TotalRecipes.type" = "integer"
"definitions.API2.Models.Counts.type" = "object"
"definitions.API2.Models.Location.properties.City.type" = "string"
"definitions.API2.Models.Location.properties.Country.type" = "string"
"definitions.API2.Models.Location.properties.DMA.format" = "int32"
"definitions.API2.Models.Location.properties.DMA.type" = "integer"
"definitions.API2.Models.Location.type" = "object"
"definitions.API2.Models.Option.properties.Description.type" = "string"
"definitions.API2.Models.Option.properties.Key.type" = "string"
"definitions.API2.Models.Option.type" = "object"
"definitions.API2.Models.Personal.properties.Email.type" = "string"
"definitions.API2.Models.Personal.properties.Location.$ref" = "#/definitions/API2.Models.Location"
"definitions.API2.Models.Personal.type" = "object"
"definitions.API2.Models.Preference.properties.EatingStyle.type" = "string"
"definitions.API2.Models.Preference.type" = "object"
"definitions.API2.Models.Profile.properties.AboutMe.type" = "string"
"definitions.API2.Models.Profile.properties.Counts.$ref" = "#/definitions/API2.Models.Counts"
"definitions.API2.Models.Profile.properties.FirstName.type" = "string"
"definitions.API2.Models.Profile.properties.FullName.type" = "string"
"definitions.API2.Models.Profile.properties.HomeUrl.type" = "string"
"definitions.API2.Models.Profile.properties.LastName.type" = "string"
"definitions.API2.Models.Profile.properties.PhotoUrl.type" = "string"
"definitions.API2.Models.Profile.properties.UserID.format" = "int64"
"definitions.API2.Models.Profile.properties.UserID.type" = "integer"
"definitions.API2.Models.Profile.properties.UserName.type" = "string"
"definitions.API2.Models.Profile.type" = "object"
"definitions.BigOven.Model.API.GlossaryEntry.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API.GlossaryEntry.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API.GlossaryEntry.properties.Definition.type" = "string"
"definitions.BigOven.Model.API.GlossaryEntry.properties.GlossaryEntryID.format" = "int32"
"definitions.BigOven.Model.API.GlossaryEntry.properties.GlossaryEntryID.type" = "integer"
"definitions.BigOven.Model.API.GlossaryEntry.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.API.GlossaryEntry.properties.LastModified.type" = "string"
"definitions.BigOven.Model.API.GlossaryEntry.properties.Term.type" = "string"
"definitions.BigOven.Model.API.GlossaryEntry.type" = "object"
"definitions.BigOven.Model.API.Grocery.GroceryList.properties.Items.items.$ref" = "#/definitions/BigOven.Model.API.Grocery.Item"
"definitions.BigOven.Model.API.Grocery.GroceryList.properties.Items.type" = "array"
"definitions.BigOven.Model.API.Grocery.GroceryList.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.API.Grocery.GroceryList.properties.LastModified.type" = "string"
"definitions.BigOven.Model.API.Grocery.GroceryList.properties.Recipes.items.$ref" = "#/definitions/BigOven.Model.API.RecipeInfo"
"definitions.BigOven.Model.API.Grocery.GroceryList.properties.Recipes.type" = "array"
"definitions.BigOven.Model.API.Grocery.GroceryList.properties.VersionGuid.type" = "string"
"definitions.BigOven.Model.API.Grocery.GroceryList.type" = "object"
"definitions.BigOven.Model.API.Grocery.Item.properties.BigOvenObject.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API.Grocery.Item.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.Department.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.DisplayQuantity.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.GUID.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.IsChecked.type" = "boolean"
"definitions.BigOven.Model.API.Grocery.Item.properties.ItemID.format" = "int64"
"definitions.BigOven.Model.API.Grocery.Item.properties.ItemID.type" = "integer"
"definitions.BigOven.Model.API.Grocery.Item.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.API.Grocery.Item.properties.LastModified.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.LocalStatus.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.Name.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.Notes.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.properties.RecipeID.format" = "int32"
"definitions.BigOven.Model.API.Grocery.Item.properties.RecipeID.type" = "integer"
"definitions.BigOven.Model.API.Grocery.Item.properties.ThirdPartyURL.type" = "string"
"definitions.BigOven.Model.API.Grocery.Item.type" = "object"
"definitions.BigOven.Model.API.Image.properties.Caption.type" = "string"
"definitions.BigOven.Model.API.Image.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API.Image.properties.ImageID.format" = "int64"
"definitions.BigOven.Model.API.Image.properties.ImageID.type" = "integer"
"definitions.BigOven.Model.API.Image.properties.ImageSquares.items.format" = "int32"
"definitions.BigOven.Model.API.Image.properties.ImageSquares.items.type" = "integer"
"definitions.BigOven.Model.API.Image.properties.ImageSquares.type" = "array"
"definitions.BigOven.Model.API.Image.properties.ImageURL.type" = "string"
"definitions.BigOven.Model.API.Image.properties.ImageURL120.type" = "string"
"definitions.BigOven.Model.API.Image.properties.ImageURL128.type" = "string"
"definitions.BigOven.Model.API.Image.properties.ImageURL200.type" = "string"
"definitions.BigOven.Model.API.Image.properties.ImageURL256.type" = "string"
"definitions.BigOven.Model.API.Image.properties.ImageURL48.type" = "string"
"definitions.BigOven.Model.API.Image.properties.ImageURL64.type" = "string"
"definitions.BigOven.Model.API.Image.properties.IsPrimary.type" = "boolean"
"definitions.BigOven.Model.API.Image.properties.MaxImageSquare.format" = "int32"
"definitions.BigOven.Model.API.Image.properties.MaxImageSquare.type" = "integer"
"definitions.BigOven.Model.API.Image.properties.Poster.$ref" = "#/definitions/BigOven.Model.API.UserInfo"
"definitions.BigOven.Model.API.Image.type" = "object"
"definitions.BigOven.Model.API.Ingredient.properties.DisplayIndex.format" = "int32"
"definitions.BigOven.Model.API.Ingredient.properties.DisplayIndex.type" = "integer"
"definitions.BigOven.Model.API.Ingredient.properties.DisplayQuantity.type" = "string"
"definitions.BigOven.Model.API.Ingredient.properties.HTMLName.type" = "string"
"definitions.BigOven.Model.API.Ingredient.properties.IngredientID.format" = "int64"
"definitions.BigOven.Model.API.Ingredient.properties.IngredientID.type" = "integer"
"definitions.BigOven.Model.API.Ingredient.properties.IngredientInfo.$ref" = "#/definitions/BigOven.Model.API.IngredientInfo"
"definitions.BigOven.Model.API.Ingredient.properties.IsHeading.type" = "boolean"
"definitions.BigOven.Model.API.Ingredient.properties.IsLinked.type" = "boolean"
"definitions.BigOven.Model.API.Ingredient.properties.MetricDisplayQuantity.type" = "string"
"definitions.BigOven.Model.API.Ingredient.properties.MetricQuantity.format" = "double"
"definitions.BigOven.Model.API.Ingredient.properties.MetricQuantity.type" = "number"
"definitions.BigOven.Model.API.Ingredient.properties.MetricUnit.type" = "string"
"definitions.BigOven.Model.API.Ingredient.properties.Name.type" = "string"
"definitions.BigOven.Model.API.Ingredient.properties.PreparationNotes.type" = "string"
"definitions.BigOven.Model.API.Ingredient.properties.Quantity.format" = "double"
"definitions.BigOven.Model.API.Ingredient.properties.Quantity.type" = "number"
"definitions.BigOven.Model.API.Ingredient.properties.Unit.type" = "string"
"definitions.BigOven.Model.API.Ingredient.type" = "object"
"definitions.BigOven.Model.API.IngredientInfo.properties.Department.type" = "string"
"definitions.BigOven.Model.API.IngredientInfo.properties.MasterIngredientID.format" = "int32"
"definitions.BigOven.Model.API.IngredientInfo.properties.MasterIngredientID.type" = "integer"
"definitions.BigOven.Model.API.IngredientInfo.properties.Name.type" = "string"
"definitions.BigOven.Model.API.IngredientInfo.properties.UsuallyOnHand.type" = "boolean"
"definitions.BigOven.Model.API.IngredientInfo.type" = "object"
"definitions.BigOven.Model.API.NutritionInfo.properties.CaloriesFromFat.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.CaloriesFromFat.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.Cholesterol.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.Cholesterol.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.CholesterolPct.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.CholesterolPct.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.DietaryFiber.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.DietaryFiber.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.DietaryFiberPct.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.DietaryFiberPct.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.MonoFat.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.MonoFat.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.PolyFat.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.PolyFat.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.Potassium.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.Potassium.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.PotassiumPct.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.PotassiumPct.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.Protein.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.Protein.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.ProteinPct.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.ProteinPct.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.SatFat.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.SatFat.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.SatFatPct.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.SatFatPct.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.SingularYieldUnit.type" = "string"
"definitions.BigOven.Model.API.NutritionInfo.properties.Sodium.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.Sodium.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.SodiumPct.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.SodiumPct.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.Sugar.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.Sugar.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalCalories.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalCalories.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalCarbs.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalCarbs.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalCarbsPct.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalCarbsPct.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalFat.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalFat.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalFatPct.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.TotalFatPct.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.properties.TransFat.format" = "double"
"definitions.BigOven.Model.API.NutritionInfo.properties.TransFat.type" = "number"
"definitions.BigOven.Model.API.NutritionInfo.type" = "object"
"definitions.BigOven.Model.API.Recipe.properties.ActiveMinutes.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.ActiveMinutes.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.AdTags.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.AdminBoost.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.AdminBoost.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.AllCategoriesText.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.BookmarkImageURL.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.BookmarkSiteLogo.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.BookmarkURL.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.Category.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.Collection.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.CollectionID.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.CollectionID.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API.Recipe.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.Cuisine.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.Description.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.FavoriteCount.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.FavoriteCount.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.HeroPhotoUrl.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.ImageSquares.items.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.ImageSquares.items.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.ImageSquares.type" = "array"
"definitions.BigOven.Model.API.Recipe.properties.ImageURL.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.Ingredients.items.$ref" = "#/definitions/BigOven.Model.API.Ingredient"
"definitions.BigOven.Model.API.Recipe.properties.Ingredients.type" = "array"
"definitions.BigOven.Model.API.Recipe.properties.IngredientsTextBlock.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.Instructions.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.IsBookmark.type" = "boolean"
"definitions.BigOven.Model.API.Recipe.properties.IsPrivate.type" = "boolean"
"definitions.BigOven.Model.API.Recipe.properties.IsRecipeScan.type" = "boolean"
"definitions.BigOven.Model.API.Recipe.properties.IsSponsored.type" = "boolean"
"definitions.BigOven.Model.API.Recipe.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.API.Recipe.properties.LastModified.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.MaxImageSquare.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.MaxImageSquare.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.MedalCount.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.MedalCount.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.MenuCount.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.MenuCount.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.Microcategory.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.NotesCount.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.NotesCount.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.NutritionInfo.$ref" = "#/definitions/BigOven.Model.API.NutritionInfo"
"definitions.BigOven.Model.API.Recipe.properties.Poster.$ref" = "#/definitions/BigOven.Model.API.UserInfo"
"definitions.BigOven.Model.API.Recipe.properties.PrimaryIngredient.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.RecipeID.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.RecipeID.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.ReviewCount.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.ReviewCount.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.StarRating.format" = "double"
"definitions.BigOven.Model.API.Recipe.properties.StarRating.type" = "number"
"definitions.BigOven.Model.API.Recipe.properties.Subcategory.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.Title.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.TotalMinutes.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.TotalMinutes.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.VariantOfRecipeID.format" = "int32"
"definitions.BigOven.Model.API.Recipe.properties.VariantOfRecipeID.type" = "integer"
"definitions.BigOven.Model.API.Recipe.properties.VerifiedByClass.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.VerifiedDateTime.format" = "date-time"
"definitions.BigOven.Model.API.Recipe.properties.VerifiedDateTime.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.WebURL.type" = "string"
"definitions.BigOven.Model.API.Recipe.properties.YieldNumber.format" = "double"
"definitions.BigOven.Model.API.Recipe.properties.YieldNumber.type" = "number"
"definitions.BigOven.Model.API.Recipe.properties.YieldUnit.type" = "string"
"definitions.BigOven.Model.API.Recipe.type" = "object"
"definitions.BigOven.Model.API.RecipeInfo.properties.BookmarkURL.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.Category.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API.RecipeInfo.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.Cuisine.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.HeroPhotoUrl.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.HideFromPublicSearch.type" = "boolean"
"definitions.BigOven.Model.API.RecipeInfo.properties.ImageURL.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.ImageURL120.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.IsBookmark.type" = "boolean"
"definitions.BigOven.Model.API.RecipeInfo.properties.IsPrivate.type" = "boolean"
"definitions.BigOven.Model.API.RecipeInfo.properties.MaxImageSquare.format" = "int32"
"definitions.BigOven.Model.API.RecipeInfo.properties.MaxImageSquare.type" = "integer"
"definitions.BigOven.Model.API.RecipeInfo.properties.Microcategory.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.Poster.$ref" = "#/definitions/BigOven.Model.API.UserInfo"
"definitions.BigOven.Model.API.RecipeInfo.properties.QualityScore.format" = "double"
"definitions.BigOven.Model.API.RecipeInfo.properties.QualityScore.type" = "number"
"definitions.BigOven.Model.API.RecipeInfo.properties.RecipeID.format" = "int32"
"definitions.BigOven.Model.API.RecipeInfo.properties.RecipeID.type" = "integer"
"definitions.BigOven.Model.API.RecipeInfo.properties.ReviewCount.format" = "int32"
"definitions.BigOven.Model.API.RecipeInfo.properties.ReviewCount.type" = "integer"
"definitions.BigOven.Model.API.RecipeInfo.properties.StarRating.format" = "double"
"definitions.BigOven.Model.API.RecipeInfo.properties.StarRating.type" = "number"
"definitions.BigOven.Model.API.RecipeInfo.properties.StarRatingIMG.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.Subcategory.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.Title.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.TotalTries.format" = "int32"
"definitions.BigOven.Model.API.RecipeInfo.properties.TotalTries.type" = "integer"
"definitions.BigOven.Model.API.RecipeInfo.properties.WebURL.type" = "string"
"definitions.BigOven.Model.API.RecipeInfo.properties.YieldNumber.format" = "double"
"definitions.BigOven.Model.API.RecipeInfo.properties.YieldNumber.type" = "number"
"definitions.BigOven.Model.API.RecipeInfo.type" = "object"
"definitions.BigOven.Model.API.RecipeNote.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API.RecipeNote.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API.RecipeNote.properties.Date.type" = "string"
"definitions.BigOven.Model.API.RecipeNote.properties.DateDT.format" = "date-time"
"definitions.BigOven.Model.API.RecipeNote.properties.DateDT.type" = "string"
"definitions.BigOven.Model.API.RecipeNote.properties.GUID.type" = "string"
"definitions.BigOven.Model.API.RecipeNote.properties.ID.format" = "int32"
"definitions.BigOven.Model.API.RecipeNote.properties.ID.type" = "integer"
"definitions.BigOven.Model.API.RecipeNote.properties.Notes.type" = "string"
"definitions.BigOven.Model.API.RecipeNote.properties.People.type" = "string"
"definitions.BigOven.Model.API.RecipeNote.properties.RecipeID.format" = "int32"
"definitions.BigOven.Model.API.RecipeNote.properties.RecipeID.type" = "integer"
"definitions.BigOven.Model.API.RecipeNote.properties.UserID.format" = "int32"
"definitions.BigOven.Model.API.RecipeNote.properties.UserID.type" = "integer"
"definitions.BigOven.Model.API.RecipeNote.properties.Variations.type" = "string"
"definitions.BigOven.Model.API.RecipeNote.type" = "object"
"definitions.BigOven.Model.API.RecipeNoteList.properties.ResultCount.format" = "int32"
"definitions.BigOven.Model.API.RecipeNoteList.properties.ResultCount.type" = "integer"
"definitions.BigOven.Model.API.RecipeNoteList.properties.Results.items.$ref" = "#/definitions/BigOven.Model.API.RecipeNote"
"definitions.BigOven.Model.API.RecipeNoteList.properties.Results.type" = "array"
"definitions.BigOven.Model.API.RecipeNoteList.type" = "object"
"definitions.BigOven.Model.API.Reply.properties.Comment.type" = "string"
"definitions.BigOven.Model.API.Reply.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API.Reply.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API.Reply.properties.ID.type" = "string"
"definitions.BigOven.Model.API.Reply.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.API.Reply.properties.LastModified.type" = "string"
"definitions.BigOven.Model.API.Reply.properties.Poster.$ref" = "#/definitions/BigOven.Model.API.UserInfoTiny"
"definitions.BigOven.Model.API.Reply.properties.ReviewID.type" = "string"
"definitions.BigOven.Model.API.Reply.type" = "object"
"definitions.BigOven.Model.API.Review.properties.ActiveMinutes.format" = "int32"
"definitions.BigOven.Model.API.Review.properties.ActiveMinutes.type" = "integer"
"definitions.BigOven.Model.API.Review.properties.Comment.type" = "string"
"definitions.BigOven.Model.API.Review.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API.Review.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API.Review.properties.FeaturedReply.$ref" = "#/definitions/BigOven.Model.API.Reply"
"definitions.BigOven.Model.API.Review.properties.GUID.type" = "string"
"definitions.BigOven.Model.API.Review.properties.ID.type" = "string"
"definitions.BigOven.Model.API.Review.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.API.Review.properties.LastModified.type" = "string"
"definitions.BigOven.Model.API.Review.properties.ParentID.format" = "int64"
"definitions.BigOven.Model.API.Review.properties.ParentID.type" = "integer"
"definitions.BigOven.Model.API.Review.properties.Poster.$ref" = "#/definitions/BigOven.Model.API.UserInfo"
"definitions.BigOven.Model.API.Review.properties.Replies.items.$ref" = "#/definitions/BigOven.Model.API.Review"
"definitions.BigOven.Model.API.Review.properties.Replies.type" = "array"
"definitions.BigOven.Model.API.Review.properties.ReplyCount.format" = "int32"
"definitions.BigOven.Model.API.Review.properties.ReplyCount.type" = "integer"
"definitions.BigOven.Model.API.Review.properties.ReviewID.format" = "int64"
"definitions.BigOven.Model.API.Review.properties.ReviewID.type" = "integer"
"definitions.BigOven.Model.API.Review.properties.StarRating.format" = "double"
"definitions.BigOven.Model.API.Review.properties.StarRating.type" = "number"
"definitions.BigOven.Model.API.Review.properties.TotalMinutes.format" = "int32"
"definitions.BigOven.Model.API.Review.properties.TotalMinutes.type" = "integer"
"definitions.BigOven.Model.API.Review.type" = "object"
"definitions.BigOven.Model.API.UserInfo.properties.FirstName.type" = "string"
"definitions.BigOven.Model.API.UserInfo.properties.ImageURL48.type" = "string"
"definitions.BigOven.Model.API.UserInfo.properties.IsKitchenHelper.type" = "boolean"
"definitions.BigOven.Model.API.UserInfo.properties.IsPremium.type" = "boolean"
"definitions.BigOven.Model.API.UserInfo.properties.IsUsingRecurly.type" = "boolean"
"definitions.BigOven.Model.API.UserInfo.properties.LastName.type" = "string"
"definitions.BigOven.Model.API.UserInfo.properties.MemberSince.format" = "date-time"
"definitions.BigOven.Model.API.UserInfo.properties.MemberSince.type" = "string"
"definitions.BigOven.Model.API.UserInfo.properties.PhotoUrl.type" = "string"
"definitions.BigOven.Model.API.UserInfo.properties.PremiumExpiryDate.format" = "date-time"
"definitions.BigOven.Model.API.UserInfo.properties.PremiumExpiryDate.type" = "string"
"definitions.BigOven.Model.API.UserInfo.properties.UserID.format" = "int32"
"definitions.BigOven.Model.API.UserInfo.properties.UserID.type" = "integer"
"definitions.BigOven.Model.API.UserInfo.properties.UserName.type" = "string"
"definitions.BigOven.Model.API.UserInfo.type" = "object"
"definitions.BigOven.Model.API.UserInfoTiny.properties.FirstName.type" = "string"
"definitions.BigOven.Model.API.UserInfoTiny.properties.LastName.type" = "string"
"definitions.BigOven.Model.API.UserInfoTiny.properties.PhotoUrl.type" = "string"
"definitions.BigOven.Model.API.UserInfoTiny.properties.UserID.format" = "int32"
"definitions.BigOven.Model.API.UserInfoTiny.properties.UserID.type" = "integer"
"definitions.BigOven.Model.API.UserInfoTiny.properties.UserName.type" = "string"
"definitions.BigOven.Model.API.UserInfoTiny.type" = "object"
"definitions.BigOven.Model.API2.CollectionInfo.properties.Description.type" = "string"
"definitions.BigOven.Model.API2.CollectionInfo.properties.ID.format" = "int32"
"definitions.BigOven.Model.API2.CollectionInfo.properties.ID.type" = "integer"
"definitions.BigOven.Model.API2.CollectionInfo.properties.IsFiltered.type" = "boolean"
"definitions.BigOven.Model.API2.CollectionInfo.properties.IsSponsored.type" = "boolean"
"definitions.BigOven.Model.API2.CollectionInfo.properties.MobileUrl.type" = "string"
"definitions.BigOven.Model.API2.CollectionInfo.properties.PRO.type" = "boolean"
"definitions.BigOven.Model.API2.CollectionInfo.properties.PhotoUrl.type" = "string"
"definitions.BigOven.Model.API2.CollectionInfo.properties.Results.items.$ref" = "#/definitions/BigOven.Model.API2.RecipeInfox"
"definitions.BigOven.Model.API2.CollectionInfo.properties.Results.type" = "array"
"definitions.BigOven.Model.API2.CollectionInfo.properties.Title.type" = "string"
"definitions.BigOven.Model.API2.CollectionInfo.properties.Token.type" = "string"
"definitions.BigOven.Model.API2.CollectionInfo.properties.WebUrl.type" = "string"
"definitions.BigOven.Model.API2.CollectionInfo.type" = "object"
"definitions.BigOven.Model.API2.GroceryList.properties.Items.items.$ref" = "#/definitions/BigOven.Model.API.Grocery.Item"
"definitions.BigOven.Model.API2.GroceryList.properties.Items.type" = "array"
"definitions.BigOven.Model.API2.GroceryList.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.API2.GroceryList.properties.LastModified.type" = "string"
"definitions.BigOven.Model.API2.GroceryList.properties.Recipes.items.$ref" = "#/definitions/BigOven.Model.API2.RecipeInfox"
"definitions.BigOven.Model.API2.GroceryList.properties.Recipes.type" = "array"
"definitions.BigOven.Model.API2.GroceryList.properties.VersionGuid.type" = "string"
"definitions.BigOven.Model.API2.GroceryList.type" = "object"
"definitions.BigOven.Model.API2.Photo.properties.Caption.type" = "string"
"definitions.BigOven.Model.API2.Photo.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API2.Photo.properties.ImageID.format" = "int64"
"definitions.BigOven.Model.API2.Photo.properties.ImageID.type" = "integer"
"definitions.BigOven.Model.API2.Photo.properties.IsPrimary.type" = "boolean"
"definitions.BigOven.Model.API2.Photo.properties.MaxImageSquare.format" = "int32"
"definitions.BigOven.Model.API2.Photo.properties.MaxImageSquare.type" = "integer"
"definitions.BigOven.Model.API2.Photo.properties.PhotoUrl.type" = "string"
"definitions.BigOven.Model.API2.Photo.properties.Poster.$ref" = "#/definitions/BigOven.Model.API2.UserInfoTinyx"
"definitions.BigOven.Model.API2.Photo.type" = "object"
"definitions.BigOven.Model.API2.Recipe.properties.ActiveMinutes.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.ActiveMinutes.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.AdTags.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.AdminBoost.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.AdminBoost.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.AllCategoriesText.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.BookmarkImageURL.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.BookmarkSiteLogo.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.BookmarkURL.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.Category.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.Collection.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.CollectionID.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.CollectionID.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API2.Recipe.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.Cuisine.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.Description.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.FavoriteCount.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.FavoriteCount.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.ImageSquares.items.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.ImageSquares.items.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.ImageSquares.type" = "array"
"definitions.BigOven.Model.API2.Recipe.properties.ImageURL.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.Ingredients.items.$ref" = "#/definitions/BigOven.Model.API.Ingredient"
"definitions.BigOven.Model.API2.Recipe.properties.Ingredients.type" = "array"
"definitions.BigOven.Model.API2.Recipe.properties.IngredientsTextBlock.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.Instructions.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.IsBookmark.type" = "boolean"
"definitions.BigOven.Model.API2.Recipe.properties.IsPrivate.type" = "boolean"
"definitions.BigOven.Model.API2.Recipe.properties.IsRecipeScan.type" = "boolean"
"definitions.BigOven.Model.API2.Recipe.properties.IsSponsored.type" = "boolean"
"definitions.BigOven.Model.API2.Recipe.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.API2.Recipe.properties.LastModified.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.MaxImageSquare.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.MaxImageSquare.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.MedalCount.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.MedalCount.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.MenuCount.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.MenuCount.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.Microcategory.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.NotesCount.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.NotesCount.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.NutritionInfo.$ref" = "#/definitions/BigOven.Model.API.NutritionInfo"
"definitions.BigOven.Model.API2.Recipe.properties.PhotoUrl.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.Poster.$ref" = "#/definitions/BigOven.Model.API.UserInfo"
"definitions.BigOven.Model.API2.Recipe.properties.PrimaryIngredient.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.RecipeID.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.RecipeID.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.ReviewCount.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.ReviewCount.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.StarRating.format" = "double"
"definitions.BigOven.Model.API2.Recipe.properties.StarRating.type" = "number"
"definitions.BigOven.Model.API2.Recipe.properties.Subcategory.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.Title.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.TotalMinutes.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.TotalMinutes.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.VariantOfRecipeID.format" = "int32"
"definitions.BigOven.Model.API2.Recipe.properties.VariantOfRecipeID.type" = "integer"
"definitions.BigOven.Model.API2.Recipe.properties.VerifiedByClass.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.VerifiedDateTime.format" = "date-time"
"definitions.BigOven.Model.API2.Recipe.properties.VerifiedDateTime.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.WebURL.type" = "string"
"definitions.BigOven.Model.API2.Recipe.properties.YieldNumber.format" = "double"
"definitions.BigOven.Model.API2.Recipe.properties.YieldNumber.type" = "number"
"definitions.BigOven.Model.API2.Recipe.properties.YieldUnit.type" = "string"
"definitions.BigOven.Model.API2.Recipe.type" = "object"
"definitions.BigOven.Model.API2.RecipeInfox.properties.Category.type" = "string"
"definitions.BigOven.Model.API2.RecipeInfox.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API2.RecipeInfox.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API2.RecipeInfox.properties.Cuisine.type" = "string"
"definitions.BigOven.Model.API2.RecipeInfox.properties.IsBookmark.type" = "boolean"
"definitions.BigOven.Model.API2.RecipeInfox.properties.IsPrivate.type" = "boolean"
"definitions.BigOven.Model.API2.RecipeInfox.properties.IsRecipeScan.type" = "boolean"
"definitions.BigOven.Model.API2.RecipeInfox.properties.Microcategory.type" = "string"
"definitions.BigOven.Model.API2.RecipeInfox.properties.PhotoUrl.type" = "string"
"definitions.BigOven.Model.API2.RecipeInfox.properties.Poster.$ref" = "#/definitions/BigOven.Model.API2.UserInfoTinyx"
"definitions.BigOven.Model.API2.RecipeInfox.properties.RecipeID.format" = "int32"
"definitions.BigOven.Model.API2.RecipeInfox.properties.RecipeID.type" = "integer"
"definitions.BigOven.Model.API2.RecipeInfox.properties.ReviewCount.format" = "int32"
"definitions.BigOven.Model.API2.RecipeInfox.properties.ReviewCount.type" = "integer"
"definitions.BigOven.Model.API2.RecipeInfox.properties.Servings.format" = "double"
"definitions.BigOven.Model.API2.RecipeInfox.properties.Servings.type" = "number"
"definitions.BigOven.Model.API2.RecipeInfox.properties.StarRating.format" = "double"
"definitions.BigOven.Model.API2.RecipeInfox.properties.StarRating.type" = "number"
"definitions.BigOven.Model.API2.RecipeInfox.properties.Subcategory.type" = "string"
"definitions.BigOven.Model.API2.RecipeInfox.properties.Title.type" = "string"
"definitions.BigOven.Model.API2.RecipeInfox.properties.TotalTries.format" = "int32"
"definitions.BigOven.Model.API2.RecipeInfox.properties.TotalTries.type" = "integer"
"definitions.BigOven.Model.API2.RecipeInfox.properties.WebURL.type" = "string"
"definitions.BigOven.Model.API2.RecipeInfox.type" = "object"
"definitions.BigOven.Model.API2.RecipeNote.properties.CreationDate.format" = "date-time"
"definitions.BigOven.Model.API2.RecipeNote.properties.CreationDate.type" = "string"
"definitions.BigOven.Model.API2.RecipeNote.properties.Date.type" = "string"
"definitions.BigOven.Model.API2.RecipeNote.properties.DateDT.format" = "date-time"
"definitions.BigOven.Model.API2.RecipeNote.properties.DateDT.type" = "string"
"definitions.BigOven.Model.API2.RecipeNote.properties.GUID.type" = "string"
"definitions.BigOven.Model.API2.RecipeNote.properties.ID.format" = "int32"
"definitions.BigOven.Model.API2.RecipeNote.properties.ID.type" = "integer"
"definitions.BigOven.Model.API2.RecipeNote.properties.Notes.type" = "string"
"definitions.BigOven.Model.API2.RecipeNote.properties.People.type" = "string"
"definitions.BigOven.Model.API2.RecipeNote.properties.RecipeID.format" = "int32"
"definitions.BigOven.Model.API2.RecipeNote.properties.RecipeID.type" = "integer"
"definitions.BigOven.Model.API2.RecipeNote.properties.UserID.format" = "int32"
"definitions.BigOven.Model.API2.RecipeNote.properties.UserID.type" = "integer"
"definitions.BigOven.Model.API2.RecipeNote.properties.Variations.type" = "string"
"definitions.BigOven.Model.API2.RecipeNote.type" = "object"
"definitions.BigOven.Model.API2.RecipeSearchResult.properties.ResultCount.format" = "int32"
"definitions.BigOven.Model.API2.RecipeSearchResult.properties.ResultCount.type" = "integer"
"definitions.BigOven.Model.API2.RecipeSearchResult.properties.Results.items.$ref" = "#/definitions/BigOven.Model.API2.RecipeInfox"
"definitions.BigOven.Model.API2.RecipeSearchResult.properties.Results.type" = "array"
"definitions.BigOven.Model.API2.RecipeSearchResult.properties.SpellSuggest.type" = "string"
"definitions.BigOven.Model.API2.RecipeSearchResult.type" = "object"
"definitions.BigOven.Model.API2.UserInfoTinyx.properties.FirstName.type" = "string"
"definitions.BigOven.Model.API2.UserInfoTinyx.properties.LastName.type" = "string"
"definitions.BigOven.Model.API2.UserInfoTinyx.properties.PhotoUrl.type" = "string"
"definitions.BigOven.Model.API2.UserInfoTinyx.properties.UserID.format" = "int32"
"definitions.BigOven.Model.API2.UserInfoTinyx.properties.UserID.type" = "integer"
"definitions.BigOven.Model.API2.UserInfoTinyx.properties.UserName.type" = "string"
"definitions.BigOven.Model.API2.UserInfoTinyx.type" = "object"
"definitions.BigOven.Model.RecipeCategory.properties.Category.type" = "string"
"definitions.BigOven.Model.RecipeCategory.properties.DefaultActiveMinutes.format" = "int32"
"definitions.BigOven.Model.RecipeCategory.properties.DefaultActiveMinutes.type" = "integer"
"definitions.BigOven.Model.RecipeCategory.properties.DefaultTotalMinutes.format" = "int32"
"definitions.BigOven.Model.RecipeCategory.properties.DefaultTotalMinutes.type" = "integer"
"definitions.BigOven.Model.RecipeCategory.properties.ID.format" = "int32"
"definitions.BigOven.Model.RecipeCategory.properties.ID.type" = "integer"
"definitions.BigOven.Model.RecipeCategory.properties.ParentID.format" = "int32"
"definitions.BigOven.Model.RecipeCategory.properties.ParentID.type" = "integer"
"definitions.BigOven.Model.RecipeCategory.properties.PrimaryImage.type" = "string"
"definitions.BigOven.Model.RecipeCategory.properties.ShortDescription.type" = "string"
"definitions.BigOven.Model.RecipeCategory.type" = "object"
"definitions.BigOven.Model.RecipeInfoDateTuple2.properties.date.format" = "date-time"
"definitions.BigOven.Model.RecipeInfoDateTuple2.properties.date.type" = "string"
"definitions.BigOven.Model.RecipeInfoDateTuple2.properties.recipeInfo.$ref" = "#/definitions/BigOven.Model.API2.RecipeInfox"
"definitions.BigOven.Model.RecipeInfoDateTuple2.type" = "object"
"definitions.BigOven.Model.RecipeInfoReviewTuple2.properties.RecipeInfo.$ref" = "#/definitions/BigOven.Model.API2.RecipeInfox"
"definitions.BigOven.Model.RecipeInfoReviewTuple2.properties.Review.$ref" = "#/definitions/BigOven.Model.API.Review"
"definitions.BigOven.Model.RecipeInfoReviewTuple2.type" = "object"
"definitions.BigOven.Model.ShoppingListLine.properties.DateAdded.format" = "date-time"
"definitions.BigOven.Model.ShoppingListLine.properties.DateAdded.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.Dept.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.GUID.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.HTMLItemName.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.IsChecked.type" = "boolean"
"definitions.BigOven.Model.ShoppingListLine.properties.ItemName.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.LastModified.format" = "date-time"
"definitions.BigOven.Model.ShoppingListLine.properties.LastModified.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.ListID.format" = "int64"
"definitions.BigOven.Model.ShoppingListLine.properties.ListID.type" = "integer"
"definitions.BigOven.Model.ShoppingListLine.properties.MealPlanID.format" = "int32"
"definitions.BigOven.Model.ShoppingListLine.properties.MealPlanID.type" = "integer"
"definitions.BigOven.Model.ShoppingListLine.properties.MealPlanObjectType.format" = "int32"
"definitions.BigOven.Model.ShoppingListLine.properties.MealPlanObjectType.type" = "integer"
"definitions.BigOven.Model.ShoppingListLine.properties.Notes.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.PendingAddition.type" = "boolean"
"definitions.BigOven.Model.ShoppingListLine.properties.RecipeID.format" = "int32"
"definitions.BigOven.Model.ShoppingListLine.properties.RecipeID.type" = "integer"
"definitions.BigOven.Model.ShoppingListLine.properties.ShoppingListLineID.format" = "int64"
"definitions.BigOven.Model.ShoppingListLine.properties.ShoppingListLineID.type" = "integer"
"definitions.BigOven.Model.ShoppingListLine.properties.Store.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.TextAmt.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.ThirdPartyHost.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.ThirdPartyTitle.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.properties.ThirdPartyURL.type" = "string"
"definitions.BigOven.Model.ShoppingListLine.type" = "object"
"definitions.System.Object.type" = "object"
"externalDocs.url" = "http://api2.bigoven.com/web/documentation"
host = "api2.bigoven.com"
"info.description" = "#Documentation\r\n\r\nThis is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.\r\n\r\nThe update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!\r\n\r\nYou can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.\r\n\r\n##Start Here\r\n\r\nDevelopers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.\r\n\r\n\r\n\r\nTo pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)\r\n\r\n##Migration Notes\r\n\r\nFor existing partners, we encourage you to [migrate](http://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.\r\n\r\n##Photos\r\n\r\nSee our [photos documentation](http://api2.bigoven.com/web/documentation/recipe-images). \r\n\r\nFor more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](http://api2.bigoven.com)."
"info.termsOfService" = "http://api2.bigoven.com/web/documentation/termsofuse"
"info.title" = "BigOven"
"info.version" = "partner"
"info.x-apiClientRegistration.url" = "http://api2.bigoven.com/web/console"
"info.x-logo.url" = "https://api.apis.guru/v2/cache/logo/http_bigoven.com_assets_images_icons_bigoven-recipes.png"
"info.x-origin.length" = 1
"info.x-origin[0].format" = "swagger"
"info.x-origin[0].url" = "http://api2.bigoven.com/swagger/docs/partner"
"info.x-origin[0].version" = "2.0"
"info.x-preferred" = true
"info.x-providerName" = "bigoven.com"
"paths./collection/{id}.get.consumes.length" = 0
"paths./collection/{id}.get.deprecated" = false
"paths./collection/{id}.get.operationId" = "Collection_GetCollection"
"paths./collection/{id}.get.parameters.length" = 5
"paths./collection/{id}.get.parameters[0].description" = "the collection identifier"
"paths./collection/{id}.get.parameters[0].format" = "int32"
"paths./collection/{id}.get.parameters[0].in" = "path"
"paths./collection/{id}.get.parameters[0].name" = "id"
"paths./collection/{id}.get.parameters[0].required" = true
"paths./collection/{id}.get.parameters[0].type" = "integer"
"paths./collection/{id}.get.parameters[1].description" = "results per page"
"paths./collection/{id}.get.parameters[1].format" = "int32"
"paths./collection/{id}.get.parameters[1].in" = "query"
"paths./collection/{id}.get.parameters[1].name" = "rpp"
"paths./collection/{id}.get.parameters[1].required" = false
"paths./collection/{id}.get.parameters[1].type" = "integer"
"paths./collection/{id}.get.parameters[2].description" = "page number (starting with 1)"
"paths./collection/{id}.get.parameters[2].format" = "int32"
"paths./collection/{id}.get.parameters[2].in" = "query"
"paths./collection/{id}.get.parameters[2].name" = "pg"
"paths./collection/{id}.get.parameters[2].required" = false
"paths./collection/{id}.get.parameters[2].type" = "integer"
"paths./collection/{id}.get.parameters[3].in" = "query"
"paths./collection/{id}.get.parameters[3].name" = "test"
"paths./collection/{id}.get.parameters[3].required" = false
"paths./collection/{id}.get.parameters[3].type" = "boolean"
"paths./collection/{id}.get.parameters[4].in" = "query"
"paths./collection/{id}.get.parameters[4].name" = "sessionForLogging"
"paths./collection/{id}.get.parameters[4].required" = false
"paths./collection/{id}.get.parameters[4].type" = "string"
"paths./collection/{id}.get.responses.200.description" = "OK"
"paths./collection/{id}.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API2.RecipeSearchResult"
"paths./collection/{id}.get.summary" = "Gets a recipe collection. A recipe collection is a curated set of recipes."
"paths./collection/{id}.get.tags.length" = 1
"paths./collection/{id}.get.tags[0]" = "Collection"
"paths./collection/{id}/meta.get.consumes.length" = 0
"paths./collection/{id}/meta.get.deprecated" = false
"paths./collection/{id}/meta.get.operationId" = "Collection_GetCollectionMeta"
"paths./collection/{id}/meta.get.parameters.length" = 1
"paths./collection/{id}/meta.get.parameters[0].description" = "the collection identifier"
"paths./collection/{id}/meta.get.parameters[0].format" = "int32"
"paths./collection/{id}/meta.get.parameters[0].in" = "path"
"paths./collection/{id}/meta.get.parameters[0].name" = "id"
"paths./collection/{id}/meta.get.parameters[0].required" = true
"paths./collection/{id}/meta.get.parameters[0].type" = "integer"
"paths./collection/{id}/meta.get.responses.200.description" = "OK"
"paths./collection/{id}/meta.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API2.CollectionInfo"
"paths./collection/{id}/meta.get.summary" = "Gets a recipe collection metadata. A recipe collection is a curated set of recipes."
"paths./collection/{id}/meta.get.tags.length" = 1
"paths./collection/{id}/meta.get.tags[0]" = "Collection"
"paths./collections.get.consumes.length" = 0
"paths./collections.get.deprecated" = false
"paths./collections.get.operationId" = "Collection_Collections"
"paths./collections.get.parameters.length" = 1
"paths./collections.get.parameters[0].in" = "query"
"paths./collections.get.parameters[0].name" = "test"
"paths./collections.get.parameters[0].required" = false
"paths./collections.get.parameters[0].type" = "string"
"paths./collections.get.responses.200.description" = "OK"
"paths./collections.get.responses.200.schema.items.$ref" = "#/definitions/BigOven.Model.API2.CollectionInfo"
"paths./collections.get.responses.200.schema.type" = "array"
"paths./collections.get.summary" = "Get the list of current, seasonal recipe collections. From here, you can use the /collection/{id} endpoint to retrieve the recipes in those collections."
"paths./collections.get.tags.length" = 1
"paths./collections.get.tags[0]" = "Collection"
"paths./glossary/byterm/{term}.get.consumes.length" = 0
"paths./glossary/byterm/{term}.get.deprecated" = false
"paths./glossary/byterm/{term}.get.operationId" = "Glossary_ByTerm"
"paths./glossary/byterm/{term}.get.parameters.length" = 1
"paths./glossary/byterm/{term}.get.parameters[0].description" = "Keyword used to look up article, e.g., asparagus"
"paths./glossary/byterm/{term}.get.parameters[0].in" = "path"
"paths./glossary/byterm/{term}.get.parameters[0].name" = "term"
"paths./glossary/byterm/{term}.get.parameters[0].required" = true
"paths./glossary/byterm/{term}.get.parameters[0].type" = "string"
"paths./glossary/byterm/{term}.get.responses.200.description" = "OK"
"paths./glossary/byterm/{term}.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.GlossaryEntry"
"paths./glossary/byterm/{term}.get.summary" = "Get food glossary article by term (e.g., asparagus). This editorial is (c) BigOven and MUST carry attribution and a link back to the glossary entry on BigOven.com."
"paths./glossary/byterm/{term}.get.tags.length" = 1
"paths./glossary/byterm/{term}.get.tags[0]" = "Glossary"
"paths./glossary/{id}.get.consumes.length" = 0
"paths./glossary/{id}.get.deprecated" = false
"paths./glossary/{id}.get.operationId" = "Glossary_Get"
"paths./glossary/{id}.get.parameters.length" = 1
"paths./glossary/{id}.get.parameters[0].description" = "identifier of article to retrieve"
"paths./glossary/{id}.get.parameters[0].format" = "int32"
"paths./glossary/{id}.get.parameters[0].in" = "path"
"paths./glossary/{id}.get.parameters[0].name" = "id"
"paths./glossary/{id}.get.parameters[0].required" = true
"paths./glossary/{id}.get.parameters[0].type" = "integer"
"paths./glossary/{id}.get.responses.200.description" = "Glossary article successfully returned"
"paths./glossary/{id}.get.responses.404.description" = "Glossary article not found"
"paths./glossary/{id}.get.summary" = "Get food glossary article"
"paths./glossary/{id}.get.tags.length" = 1
"paths./glossary/{id}.get.tags[0]" = "Glossary"
"paths./grocerylist.delete.consumes.length" = 0
"paths./grocerylist.delete.deprecated" = false
"paths./grocerylist.delete.operationId" = "GroceryList_Delete"
"paths./grocerylist.delete.responses.200.description" = "OK"
"paths./grocerylist.delete.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./grocerylist.delete.summary" = "Delete all the items on a grocery list; faster operation than a sync with deleted items."
"paths./grocerylist.delete.tags.length" = 1
"paths./grocerylist.delete.tags[0]" = "GroceryList"
"paths./grocerylist.get.consumes.length" = 0
"paths./grocerylist.get.deprecated" = false
"paths./grocerylist.get.operationId" = "GroceryList_Get"
"paths./grocerylist.get.responses.200.description" = "OK"
"paths./grocerylist.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API2.GroceryList"
"paths./grocerylist.get.summary" = "Get the user's grocery list.  User is determined by Basic Authentication."
"paths./grocerylist.get.tags.length" = 1
"paths./grocerylist.get.tags[0]" = "GroceryList"
"paths./grocerylist/department.post.consumes.length" = 5
"paths./grocerylist/department.post.consumes[0]" = "application/json"
"paths./grocerylist/department.post.consumes[1]" = "text/json"
"paths./grocerylist/department.post.consumes[2]" = "application/xml"
"paths./grocerylist/department.post.consumes[3]" = "text/xml"
"paths./grocerylist/department.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./grocerylist/department.post.deprecated" = false
"paths./grocerylist/department.post.operationId" = "GroceryList_Department"
"paths./grocerylist/department.post.parameters.length" = 1
"paths./grocerylist/department.post.parameters[0].in" = "body"
"paths./grocerylist/department.post.parameters[0].name" = "model"
"paths./grocerylist/department.post.parameters[0].required" = true
"paths./grocerylist/department.post.parameters[0].schema.$ref" = "#/definitions/API2.Controllers.GroceryListController.DepartmentModel"
"paths./grocerylist/department.post.responses.200.description" = "OK"
"paths./grocerylist/department.post.responses.200.schema.items.$ref" = "#/definitions/API2.GroceryListDepartmentResult"
"paths./grocerylist/department.post.responses.200.schema.type" = "array"
"paths./grocerylist/department.post.summary" = "Departmentalize a list of strings -- used for ad-hoc grocery list item addition"
"paths./grocerylist/department.post.tags.length" = 1
"paths./grocerylist/department.post.tags[0]" = "GroceryList"
"paths./grocerylist/item.post.consumes.length" = 5
"paths./grocerylist/item.post.consumes[0]" = "application/json"
"paths./grocerylist/item.post.consumes[1]" = "text/json"
"paths./grocerylist/item.post.consumes[2]" = "application/xml"
"paths./grocerylist/item.post.consumes[3]" = "text/xml"
"paths./grocerylist/item.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./grocerylist/item.post.deprecated" = false
"paths./grocerylist/item.post.operationId" = "GroceryList_Post"
"paths./grocerylist/item.post.parameters.length" = 1
"paths./grocerylist/item.post.parameters[0].description" = "name, quantity, unit, notes, department"
"paths./grocerylist/item.post.parameters[0].in" = "body"
"paths./grocerylist/item.post.parameters[0].name" = "newItem"
"paths./grocerylist/item.post.parameters[0].required" = true
"paths./grocerylist/item.post.parameters[0].schema.$ref" = "#/definitions/API2.Controllers.GroceryListController.PostToGroceryListRecipeRequest"
"paths./grocerylist/item.post.responses.200.description" = "OK"
"paths./grocerylist/item.post.responses.200.schema.$ref" = "#/definitions/BigOven.Model.ShoppingListLine"
"paths./grocerylist/item.post.summary" = "Add a single line item to the grocery list"
"paths./grocerylist/item.post.tags.length" = 1
"paths./grocerylist/item.post.tags[0]" = "GroceryList"
"paths./grocerylist/item/{guid}.delete.consumes.length" = 0
"paths./grocerylist/item/{guid}.delete.deprecated" = false
"paths./grocerylist/item/{guid}.delete.operationId" = "GroceryList_DeleteItemByGuid"
"paths./grocerylist/item/{guid}.delete.parameters.length" = 1
"paths./grocerylist/item/{guid}.delete.parameters[0].description" = ""
"paths./grocerylist/item/{guid}.delete.parameters[0].in" = "path"
"paths./grocerylist/item/{guid}.delete.parameters[0].name" = "guid"
"paths./grocerylist/item/{guid}.delete.parameters[0].required" = true
"paths./grocerylist/item/{guid}.delete.parameters[0].type" = "string"
"paths./grocerylist/item/{guid}.delete.responses.200.description" = "OK"
"paths./grocerylist/item/{guid}.delete.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./grocerylist/item/{guid}.delete.summary" = "/grocerylist/item/{guid}  DELETE will delete this item assuming you own it."
"paths./grocerylist/item/{guid}.delete.tags.length" = 1
"paths./grocerylist/item/{guid}.delete.tags[0]" = "GroceryList"
"paths./grocerylist/item/{guid}.put.consumes.length" = 5
"paths./grocerylist/item/{guid}.put.consumes[0]" = "application/json"
"paths./grocerylist/item/{guid}.put.consumes[1]" = "text/json"
"paths./grocerylist/item/{guid}.put.consumes[2]" = "application/xml"
"paths./grocerylist/item/{guid}.put.consumes[3]" = "text/xml"
"paths./grocerylist/item/{guid}.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./grocerylist/item/{guid}.put.deprecated" = false
"paths./grocerylist/item/{guid}.put.operationId" = "GroceryList_GroceryListItemGuid"
"paths./grocerylist/item/{guid}.put.parameters.length" = 2
"paths./grocerylist/item/{guid}.put.parameters[0].description" = ""
"paths./grocerylist/item/{guid}.put.parameters[0].in" = "body"
"paths./grocerylist/item/{guid}.put.parameters[0].name" = "req"
"paths./grocerylist/item/{guid}.put.parameters[0].required" = true
"paths./grocerylist/item/{guid}.put.parameters[0].schema.$ref" = "#/definitions/API2.Controllers.GroceryListController.UpdateItemByGuidRequest"
"paths./grocerylist/item/{guid}.put.parameters[1].in" = "path"
"paths./grocerylist/item/{guid}.put.parameters[1].name" = "guid"
"paths./grocerylist/item/{guid}.put.parameters[1].required" = true
"paths./grocerylist/item/{guid}.put.parameters[1].type" = "string"
"paths./grocerylist/item/{guid}.put.responses.200.description" = "OK"
"paths./grocerylist/item/{guid}.put.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./grocerylist/item/{guid}.put.summary" = "Update a grocery item by GUID"
"paths./grocerylist/item/{guid}.put.tags.length" = 1
"paths./grocerylist/item/{guid}.put.tags[0]" = "GroceryList"
"paths./grocerylist/recipe.post.consumes.length" = 5
"paths./grocerylist/recipe.post.consumes[0]" = "application/json"
"paths./grocerylist/recipe.post.consumes[1]" = "text/json"
"paths./grocerylist/recipe.post.consumes[2]" = "application/xml"
"paths./grocerylist/recipe.post.consumes[3]" = "text/xml"
"paths./grocerylist/recipe.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./grocerylist/recipe.post.deprecated" = false
"paths./grocerylist/recipe.post.operationId" = "GroceryList_AddRecipe"
"paths./grocerylist/recipe.post.parameters.length" = 1
"paths./grocerylist/recipe.post.parameters[0].in" = "body"
"paths./grocerylist/recipe.post.parameters[0].name" = "data"
"paths./grocerylist/recipe.post.parameters[0].required" = true
"paths./grocerylist/recipe.post.parameters[0].schema.$ref" = "#/definitions/API2.Controllers.GroceryListController.PostGroceryListRecipeRequest"
"paths./grocerylist/recipe.post.responses.200.description" = "OK"
"paths./grocerylist/recipe.post.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./grocerylist/recipe.post.summary" = "Add a Recipe to the grocery list.  In the request data, pass in recipeId, scale (scale=1.0 says to keep the recipe the same size as originally posted), markAsPending (true/false) to indicate that\r\n            the lines in the recipe should be marked in a \"pending\" (unconfirmed by user) state."
"paths./grocerylist/recipe.post.tags.length" = 1
"paths./grocerylist/recipe.post.tags[0]" = "GroceryList"
"paths./grocerylist/sync.post.consumes.length" = 5
"paths./grocerylist/sync.post.consumes[0]" = "application/json"
"paths./grocerylist/sync.post.consumes[1]" = "text/json"
"paths./grocerylist/sync.post.consumes[2]" = "application/xml"
"paths./grocerylist/sync.post.consumes[3]" = "text/xml"
"paths./grocerylist/sync.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./grocerylist/sync.post.deprecated" = false
"paths./grocerylist/sync.post.operationId" = "GroceryList_PostGroceryListSync"
"paths./grocerylist/sync.post.parameters.length" = 1
"paths./grocerylist/sync.post.parameters[0].in" = "body"
"paths./grocerylist/sync.post.parameters[0].name" = "req"
"paths./grocerylist/sync.post.parameters[0].required" = true
"paths./grocerylist/sync.post.parameters[0].schema.$ref" = "#/definitions/API2.Controllers.GroceryListController.PostGroceryListSyncRequest"
"paths./grocerylist/sync.post.responses.200.description" = "OK"
"paths./grocerylist/sync.post.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./grocerylist/sync.post.summary" = "Synchronize the grocery list.  Call this with a POST to /grocerylist/sync"
"paths./grocerylist/sync.post.tags.length" = 1
"paths./grocerylist/sync.post.tags[0]" = "GroceryList"
"paths./image/avatar.post.consumes.length" = 0
"paths./image/avatar.post.deprecated" = false
"paths./image/avatar.post.operationId" = "Images_UploadUserAvatar"
"paths./image/avatar.post.responses.200.description" = "Success"
"paths./image/avatar.post.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./image/avatar.post.responses.400.description" = "if bad request (e.g., missing parameters)"
"paths./image/avatar.post.responses.401.description" = "if the user is unknown"
"paths./image/avatar.post.responses.415.description" = "if unsupported media type (e.g., bad JPG)"
"paths./image/avatar.post.summary" = "POST: /image/avatar\r\n             \r\n            Testing with Postman (validated 11/20/2015):\r\n            1) Remove the Content-Type header; add authentication information\r\n            2) On the request, click Body and choose \"form-data\", then add a line item with \"key\" column set to \"file\" and on the right,\r\n            change the type of the input from Text to File.  Browse and choose a JPG."
"paths./image/avatar.post.tags.length" = 1
"paths./image/avatar.post.tags[0]" = "Images"
"paths./me.get.consumes.length" = 0
"paths./me.get.deprecated" = false
"paths./me.get.operationId" = "Me_Index"
"paths./me.get.responses.200.description" = "OK"
"paths./me.get.responses.200.schema.$ref" = "#/definitions/API2.Models.BigOvenUser"
"paths./me.get.tags.length" = 1
"paths./me.get.tags[0]" = "Me"
"paths./me.put.consumes.length" = 5
"paths./me.put.consumes[0]" = "application/json"
"paths./me.put.consumes[1]" = "text/json"
"paths./me.put.consumes[2]" = "application/xml"
"paths./me.put.consumes[3]" = "text/xml"
"paths./me.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./me.put.deprecated" = false
"paths./me.put.parameters.length" = 1
"paths./me.put.parameters[0].in" = "body"
"paths./me.put.parameters[0].name" = "req"
"paths./me.put.parameters[0].required" = true
"paths./me.put.parameters[0].schema.$ref" = "#/definitions/API2.Models.BigOvenUser"
"paths./me.put.responses.200.description" = "OK"
"paths./me.put.responses.200.schema.$ref" = "#/definitions/API2.Models.BigOvenUser"
"paths./me.put.tags.length" = 1
"paths./me.put.tags[0]" = "Me"
"paths./me/personal.put.consumes.length" = 5
"paths./me/personal.put.consumes[0]" = "application/json"
"paths./me/personal.put.consumes[1]" = "text/json"
"paths./me/personal.put.consumes[2]" = "application/xml"
"paths./me/personal.put.consumes[3]" = "text/xml"
"paths./me/personal.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./me/personal.put.deprecated" = false
"paths./me/personal.put.operationId" = "Me_PutMePersonal"
"paths./me/personal.put.parameters.length" = 1
"paths./me/personal.put.parameters[0].in" = "body"
"paths./me/personal.put.parameters[0].name" = "req"
"paths./me/personal.put.parameters[0].required" = true
"paths./me/personal.put.parameters[0].schema.$ref" = "#/definitions/API2.Models.Personal"
"paths./me/personal.put.responses.200.description" = "OK"
"paths./me/personal.put.responses.200.schema.$ref" = "#/definitions/API2.Models.BigOvenUser"
"paths./me/personal.put.tags.length" = 1
"paths./me/personal.put.tags[0]" = "Me"
"paths./me/preferences.put.consumes.length" = 5
"paths./me/preferences.put.consumes[0]" = "application/json"
"paths./me/preferences.put.consumes[1]" = "text/json"
"paths./me/preferences.put.consumes[2]" = "application/xml"
"paths./me/preferences.put.consumes[3]" = "text/xml"
"paths./me/preferences.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./me/preferences.put.deprecated" = false
"paths./me/preferences.put.operationId" = "Me_PutMePreferences"
"paths./me/preferences.put.parameters.length" = 1
"paths./me/preferences.put.parameters[0].in" = "body"
"paths./me/preferences.put.parameters[0].name" = "req"
"paths./me/preferences.put.parameters[0].required" = true
"paths./me/preferences.put.parameters[0].schema.$ref" = "#/definitions/API2.Models.Preference"
"paths./me/preferences.put.responses.200.description" = "OK"
"paths./me/preferences.put.responses.200.schema.$ref" = "#/definitions/API2.Models.BigOvenUser"
"paths./me/preferences.put.tags.length" = 1
"paths./me/preferences.put.tags[0]" = "Me"
"paths./me/preferences/options.get.consumes.length" = 0
"paths./me/preferences/options.get.deprecated" = false
"paths./me/preferences/options.get.operationId" = "Me_GetOptions"
"paths./me/preferences/options.get.responses.200.description" = "OK"
"paths./me/preferences/options.get.responses.200.schema.items.$ref" = "#/definitions/API2.Controllers.MeController.KeyOption"
"paths./me/preferences/options.get.responses.200.schema.type" = "array"
"paths./me/preferences/options.get.tags.length" = 1
"paths./me/preferences/options.get.tags[0]" = "Me"
"paths./me/profile.put.consumes.length" = 5
"paths./me/profile.put.consumes[0]" = "application/json"
"paths./me/profile.put.consumes[1]" = "text/json"
"paths./me/profile.put.consumes[2]" = "application/xml"
"paths./me/profile.put.consumes[3]" = "text/xml"
"paths./me/profile.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./me/profile.put.deprecated" = false
"paths./me/profile.put.parameters.length" = 1
"paths./me/profile.put.parameters[0].in" = "body"
"paths./me/profile.put.parameters[0].name" = "req"
"paths./me/profile.put.parameters[0].required" = true
"paths./me/profile.put.parameters[0].schema.$ref" = "#/definitions/API2.Models.Profile"
"paths./me/profile.put.responses.200.description" = "OK"
"paths./me/profile.put.responses.200.schema.$ref" = "#/definitions/API2.Models.BigOvenUser"
"paths./me/profile.put.tags.length" = 1
"paths./me/profile.put.tags[0]" = "Me"
"paths./me/skinny.get.consumes.length" = 0
"paths./me/skinny.get.deprecated" = false
"paths./me/skinny.get.operationId" = "Me_Skinny"
"paths./me/skinny.get.responses.200.description" = "OK"
"paths./me/skinny.get.responses.200.schema.$ref" = "#/definitions/API2.Models.BigOvenUser"
"paths./me/skinny.get.tags.length" = 1
"paths./me/skinny.get.tags[0]" = "Me"
"paths./recipe.post.consumes.length" = 5
"paths./recipe.post.consumes[0]" = "application/json"
"paths./recipe.post.consumes[1]" = "text/json"
"paths./recipe.post.consumes[2]" = "application/xml"
"paths./recipe.post.consumes[3]" = "text/xml"
"paths./recipe.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe.post.deprecated" = false
"paths./recipe.post.operationId" = "Recipe_Post"
"paths./recipe.post.parameters.length" = 1
"paths./recipe.post.parameters[0].description" = ""
"paths./recipe.post.parameters[0].in" = "body"
"paths./recipe.post.parameters[0].name" = "recipe"
"paths./recipe.post.parameters[0].required" = true
"paths./recipe.post.parameters[0].schema.$ref" = "#/definitions/BigOven.Model.API.Recipe"
"paths./recipe.post.responses.200.description" = "OK"
"paths./recipe.post.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Recipe"
"paths./recipe.post.summary" = "Add a new recipe"
"paths./recipe.post.tags.length" = 1
"paths./recipe.post.tags[0]" = "Recipe"
"paths./recipe.put.consumes.length" = 5
"paths./recipe.put.consumes[0]" = "application/json"
"paths./recipe.put.consumes[1]" = "text/json"
"paths./recipe.put.consumes[2]" = "application/xml"
"paths./recipe.put.consumes[3]" = "text/xml"
"paths./recipe.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe.put.deprecated" = false
"paths./recipe.put.operationId" = "Recipe_Put"
"paths./recipe.put.parameters.length" = 1
"paths./recipe.put.parameters[0].description" = ""
"paths./recipe.put.parameters[0].in" = "body"
"paths./recipe.put.parameters[0].name" = "recipe"
"paths./recipe.put.parameters[0].required" = true
"paths./recipe.put.parameters[0].schema.$ref" = "#/definitions/BigOven.Model.API.Recipe"
"paths./recipe.put.responses.200.description" = "OK"
"paths./recipe.put.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Recipe"
"paths./recipe.put.summary" = "Update a recipe"
"paths./recipe.put.tags.length" = 1
"paths./recipe.put.tags[0]" = "Recipe"
"paths./recipe/autocomplete.get.consumes.length" = 0
"paths./recipe/autocomplete.get.deprecated" = false
"paths./recipe/autocomplete.get.operationId" = "Recipe_AutoComplete"
"paths./recipe/autocomplete.get.parameters.length" = 2
"paths./recipe/autocomplete.get.parameters[0].description" = ""
"paths./recipe/autocomplete.get.parameters[0].in" = "query"
"paths./recipe/autocomplete.get.parameters[0].name" = "query"
"paths./recipe/autocomplete.get.parameters[0].required" = true
"paths./recipe/autocomplete.get.parameters[0].type" = "string"
"paths./recipe/autocomplete.get.parameters[1].description" = ""
"paths./recipe/autocomplete.get.parameters[1].format" = "int32"
"paths./recipe/autocomplete.get.parameters[1].in" = "query"
"paths./recipe/autocomplete.get.parameters[1].name" = "limit"
"paths./recipe/autocomplete.get.parameters[1].required" = false
"paths./recipe/autocomplete.get.parameters[1].type" = "integer"
"paths./recipe/autocomplete.get.responses.200.description" = "OK"
"paths./recipe/autocomplete.get.responses.200.schema.items.type" = "string"
"paths./recipe/autocomplete.get.responses.200.schema.type" = "array"
"paths./recipe/autocomplete.get.summary" = "Given a query, return recipe titles starting with query. Query must be at least 3 chars in length."
"paths./recipe/autocomplete.get.tags.length" = 1
"paths./recipe/autocomplete.get.tags[0]" = "Recipe"
"paths./recipe/categories.get.consumes.length" = 0
"paths./recipe/categories.get.deprecated" = false
"paths./recipe/categories.get.operationId" = "Recipe_Categories"
"paths./recipe/categories.get.responses.200.description" = "OK"
"paths./recipe/categories.get.responses.200.schema.items.$ref" = "#/definitions/BigOven.Model.RecipeCategory"
"paths./recipe/categories.get.responses.200.schema.type" = "array"
"paths./recipe/categories.get.summary" = "Get a list of recipe categories (the ID field can be used for include_cat in search parameters)"
"paths./recipe/categories.get.tags.length" = 1
"paths./recipe/categories.get.tags[0]" = "Recipe"
"paths./recipe/review/replies/{replyId}.delete.consumes.length" = 0
"paths./recipe/review/replies/{replyId}.delete.deprecated" = false
"paths./recipe/review/replies/{replyId}.delete.operationId" = "Review_DeleteReply"
"paths./recipe/review/replies/{replyId}.delete.parameters.length" = 1
"paths./recipe/review/replies/{replyId}.delete.parameters[0].description" = ""
"paths./recipe/review/replies/{replyId}.delete.parameters[0].in" = "path"
"paths./recipe/review/replies/{replyId}.delete.parameters[0].name" = "replyId"
"paths./recipe/review/replies/{replyId}.delete.parameters[0].required" = true
"paths./recipe/review/replies/{replyId}.delete.parameters[0].type" = "string"
"paths./recipe/review/replies/{replyId}.delete.responses.200.description" = "OK"
"paths./recipe/review/replies/{replyId}.delete.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./recipe/review/replies/{replyId}.delete.summary" = "DELETE a reply to a given review. Authenticated user must be the one who originally posted the reply."
"paths./recipe/review/replies/{replyId}.delete.tags.length" = 1
"paths./recipe/review/replies/{replyId}.delete.tags[0]" = "Review"
"paths./recipe/review/replies/{replyId}.put.consumes.length" = 5
"paths./recipe/review/replies/{replyId}.put.consumes[0]" = "application/json"
"paths./recipe/review/replies/{replyId}.put.consumes[1]" = "text/json"
"paths./recipe/review/replies/{replyId}.put.consumes[2]" = "application/xml"
"paths./recipe/review/replies/{replyId}.put.consumes[3]" = "text/xml"
"paths./recipe/review/replies/{replyId}.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe/review/replies/{replyId}.put.deprecated" = false
"paths./recipe/review/replies/{replyId}.put.operationId" = "Review_PutReply"
"paths./recipe/review/replies/{replyId}.put.parameters.length" = 2
"paths./recipe/review/replies/{replyId}.put.parameters[0].description" = ""
"paths./recipe/review/replies/{replyId}.put.parameters[0].in" = "path"
"paths./recipe/review/replies/{replyId}.put.parameters[0].name" = "replyId"
"paths./recipe/review/replies/{replyId}.put.parameters[0].required" = true
"paths./recipe/review/replies/{replyId}.put.parameters[0].type" = "string"
"paths./recipe/review/replies/{replyId}.put.parameters[1].description" = ""
"paths./recipe/review/replies/{replyId}.put.parameters[1].in" = "body"
"paths./recipe/review/replies/{replyId}.put.parameters[1].name" = "data"
"paths./recipe/review/replies/{replyId}.put.parameters[1].required" = true
"paths./recipe/review/replies/{replyId}.put.parameters[1].schema.$ref" = "#/definitions/API2.Controllers.ReviewController.PostReplyReq"
"paths./recipe/review/replies/{replyId}.put.responses.200.description" = "OK"
"paths./recipe/review/replies/{replyId}.put.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Reply"
"paths./recipe/review/replies/{replyId}.put.summary" = "Update (PUT) a reply to a given review. Authenticated user must be the original one that posted the reply."
"paths./recipe/review/replies/{replyId}.put.tags.length" = 1
"paths./recipe/review/replies/{replyId}.put.tags[0]" = "Review"
"paths./recipe/review/{reviewId}.get.consumes.length" = 0
"paths./recipe/review/{reviewId}.get.deprecated" = false
"paths./recipe/review/{reviewId}.get.parameters.length" = 1
"paths./recipe/review/{reviewId}.get.parameters[0].in" = "path"
"paths./recipe/review/{reviewId}.get.parameters[0].name" = "reviewId"
"paths./recipe/review/{reviewId}.get.parameters[0].required" = true
"paths./recipe/review/{reviewId}.get.parameters[0].type" = "string"
"paths./recipe/review/{reviewId}.get.responses.200.description" = "OK"
"paths./recipe/review/{reviewId}.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Review"
"paths./recipe/review/{reviewId}.get.summary" = "Get a given review by string-style ID. This will return a payload with FeaturedReply, ReplyCount.\r\n            Recommended display is to list top-level reviews with one featured reply underneath. \r\n            Currently, the FeaturedReply is the most recent one for that rating."
"paths./recipe/review/{reviewId}.get.tags.length" = 1
"paths./recipe/review/{reviewId}.get.tags[0]" = "Review"
"paths./recipe/review/{reviewId}.put.consumes.length" = 5
"paths./recipe/review/{reviewId}.put.consumes[0]" = "application/json"
"paths./recipe/review/{reviewId}.put.consumes[1]" = "text/json"
"paths./recipe/review/{reviewId}.put.consumes[2]" = "application/xml"
"paths./recipe/review/{reviewId}.put.consumes[3]" = "text/xml"
"paths./recipe/review/{reviewId}.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe/review/{reviewId}.put.deprecated" = false
"paths./recipe/review/{reviewId}.put.operationId" = "Review_Put"
"paths./recipe/review/{reviewId}.put.parameters.length" = 2
"paths./recipe/review/{reviewId}.put.parameters[0].description" = ""
"paths./recipe/review/{reviewId}.put.parameters[0].in" = "path"
"paths./recipe/review/{reviewId}.put.parameters[0].name" = "reviewId"
"paths./recipe/review/{reviewId}.put.parameters[0].required" = true
"paths./recipe/review/{reviewId}.put.parameters[0].type" = "string"
"paths./recipe/review/{reviewId}.put.parameters[1].description" = ""
"paths./recipe/review/{reviewId}.put.parameters[1].in" = "body"
"paths./recipe/review/{reviewId}.put.parameters[1].name" = "review"
"paths./recipe/review/{reviewId}.put.parameters[1].required" = true
"paths./recipe/review/{reviewId}.put.parameters[1].schema.$ref" = "#/definitions/API2.Controllers.ReviewController.ReviewRequest"
"paths./recipe/review/{reviewId}.put.responses.200.description" = "OK"
"paths./recipe/review/{reviewId}.put.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Review"
"paths./recipe/review/{reviewId}.put.summary" = "Update a given top-level review."
"paths./recipe/review/{reviewId}.put.tags.length" = 1
"paths./recipe/review/{reviewId}.put.tags[0]" = "Review"
"paths./recipe/review/{reviewId}/replies.get.consumes.length" = 0
"paths./recipe/review/{reviewId}/replies.get.deprecated" = false
"paths./recipe/review/{reviewId}/replies.get.operationId" = "Review_GetReplies"
"paths./recipe/review/{reviewId}/replies.get.parameters.length" = 3
"paths./recipe/review/{reviewId}/replies.get.parameters[0].description" = ""
"paths./recipe/review/{reviewId}/replies.get.parameters[0].in" = "path"
"paths./recipe/review/{reviewId}/replies.get.parameters[0].name" = "reviewId"
"paths./recipe/review/{reviewId}/replies.get.parameters[0].required" = true
"paths./recipe/review/{reviewId}/replies.get.parameters[0].type" = "string"
"paths./recipe/review/{reviewId}/replies.get.parameters[1].description" = "the page (int), starting with 1"
"paths./recipe/review/{reviewId}/replies.get.parameters[1].format" = "int32"
"paths./recipe/review/{reviewId}/replies.get.parameters[1].in" = "query"
"paths./recipe/review/{reviewId}/replies.get.parameters[1].name" = "pg"
"paths./recipe/review/{reviewId}/replies.get.parameters[1].required" = false
"paths./recipe/review/{reviewId}/replies.get.parameters[1].type" = "integer"
"paths./recipe/review/{reviewId}/replies.get.parameters[2].description" = "results per page (int)"
"paths./recipe/review/{reviewId}/replies.get.parameters[2].format" = "int32"
"paths./recipe/review/{reviewId}/replies.get.parameters[2].in" = "query"
"paths./recipe/review/{reviewId}/replies.get.parameters[2].name" = "rpp"
"paths./recipe/review/{reviewId}/replies.get.parameters[2].required" = false
"paths./recipe/review/{reviewId}/replies.get.parameters[2].type" = "integer"
"paths./recipe/review/{reviewId}/replies.get.responses.200.description" = "OK"
"paths./recipe/review/{reviewId}/replies.get.responses.200.schema.items.$ref" = "#/definitions/BigOven.Model.API.Reply"
"paths./recipe/review/{reviewId}/replies.get.responses.200.schema.type" = "array"
"paths./recipe/review/{reviewId}/replies.get.summary" = "Get a paged list of replies for a given review."
"paths./recipe/review/{reviewId}/replies.get.tags.length" = 1
"paths./recipe/review/{reviewId}/replies.get.tags[0]" = "Review"
"paths./recipe/review/{reviewId}/replies.post.consumes.length" = 5
"paths./recipe/review/{reviewId}/replies.post.consumes[0]" = "application/json"
"paths./recipe/review/{reviewId}/replies.post.consumes[1]" = "text/json"
"paths./recipe/review/{reviewId}/replies.post.consumes[2]" = "application/xml"
"paths./recipe/review/{reviewId}/replies.post.consumes[3]" = "text/xml"
"paths./recipe/review/{reviewId}/replies.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe/review/{reviewId}/replies.post.deprecated" = false
"paths./recipe/review/{reviewId}/replies.post.operationId" = "Review_PostReply"
"paths./recipe/review/{reviewId}/replies.post.parameters.length" = 2
"paths./recipe/review/{reviewId}/replies.post.parameters[0].description" = ""
"paths./recipe/review/{reviewId}/replies.post.parameters[0].in" = "path"
"paths./recipe/review/{reviewId}/replies.post.parameters[0].name" = "reviewId"
"paths./recipe/review/{reviewId}/replies.post.parameters[0].required" = true
"paths./recipe/review/{reviewId}/replies.post.parameters[0].type" = "string"
"paths./recipe/review/{reviewId}/replies.post.parameters[1].description" = ""
"paths./recipe/review/{reviewId}/replies.post.parameters[1].in" = "body"
"paths./recipe/review/{reviewId}/replies.post.parameters[1].name" = "data"
"paths./recipe/review/{reviewId}/replies.post.parameters[1].required" = true
"paths./recipe/review/{reviewId}/replies.post.parameters[1].schema.$ref" = "#/definitions/API2.Controllers.ReviewController.PostReplyReq"
"paths./recipe/review/{reviewId}/replies.post.responses.200.description" = "OK"
"paths./recipe/review/{reviewId}/replies.post.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Reply"
"paths./recipe/review/{reviewId}/replies.post.summary" = "POST a reply to a given review. The date will be set by server. Note that replies no longer have star ratings, only top-level reviews do."
"paths./recipe/review/{reviewId}/replies.post.tags.length" = 1
"paths./recipe/review/{reviewId}/replies.post.tags[0]" = "Review"
"paths./recipe/scan.post.consumes.length" = 0
"paths./recipe/scan.post.deprecated" = false
"paths./recipe/scan.post.operationId" = "Recipe_Scan"
"paths./recipe/scan.post.parameters.length" = 4
"paths./recipe/scan.post.parameters[0].in" = "query"
"paths./recipe/scan.post.parameters[0].name" = "test"
"paths./recipe/scan.post.parameters[0].required" = false
"paths./recipe/scan.post.parameters[0].type" = "boolean"
"paths./recipe/scan.post.parameters[1].in" = "query"
"paths./recipe/scan.post.parameters[1].name" = "devicetype"
"paths./recipe/scan.post.parameters[1].required" = false
"paths./recipe/scan.post.parameters[1].type" = "string"
"paths./recipe/scan.post.parameters[2].format" = "double"
"paths./recipe/scan.post.parameters[2].in" = "query"
"paths./recipe/scan.post.parameters[2].name" = "lat"
"paths./recipe/scan.post.parameters[2].required" = false
"paths./recipe/scan.post.parameters[2].type" = "number"
"paths./recipe/scan.post.parameters[3].format" = "double"
"paths./recipe/scan.post.parameters[3].in" = "query"
"paths./recipe/scan.post.parameters[3].name" = "lng"
"paths./recipe/scan.post.parameters[3].required" = false
"paths./recipe/scan.post.parameters[3].type" = "number"
"paths./recipe/scan.post.responses.401.description" = "Not authorized"
"paths./recipe/scan.post.responses.402.description" = "Payment required (not enough credits)"
"paths./recipe/scan.post.responses.415.description" = "Bad media type (bad JPG)"
"paths./recipe/scan.post.responses.500.description" = "General error on initiating RecipeScan task; please try again or contact us at support[at]bigoven.com"
"paths./recipe/scan.post.summary" = "POST an image as a new RecipeScan request\r\n                1)  Fetch the filename -- DONE\r\n                2)  Copy it to the pics/scan folder - ENSURE NO NAMING COLLISIONS -- DONE\r\n                3)  Create 120 thumbnail size  in pics/scan/120 -- DONE\r\n                4)  Insert the CloudTasks record\r\n                5)  Create the HIT\r\n                6)  Update the CloudTasks record with the HIT ID\r\n                7)  Email the requesing user\r\n                8)  Call out to www.bigoven.com to fetch the image and re-create the thumbnail"
"paths./recipe/scan.post.tags.length" = 1
"paths./recipe/scan.post.tags[0]" = "Recipe"
"paths./recipe/{id}.delete.consumes.length" = 0
"paths./recipe/{id}.delete.deprecated" = false
"paths./recipe/{id}.delete.operationId" = "Recipe_Delete"
"paths./recipe/{id}.delete.parameters.length" = 1
"paths./recipe/{id}.delete.parameters[0].format" = "int32"
"paths./recipe/{id}.delete.parameters[0].in" = "path"
"paths./recipe/{id}.delete.parameters[0].name" = "id"
"paths./recipe/{id}.delete.parameters[0].required" = true
"paths./recipe/{id}.delete.parameters[0].type" = "integer"
"paths./recipe/{id}.delete.responses.200.description" = "OK"
"paths./recipe/{id}.delete.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./recipe/{id}.delete.summary" = "Delete a Recipe (you must be authenticated as an owner of the recipe)"
"paths./recipe/{id}.delete.tags.length" = 1
"paths./recipe/{id}.delete.tags[0]" = "Recipe"
"paths./recipe/{id}.get.consumes.length" = 0
"paths./recipe/{id}.get.deprecated" = false
"paths./recipe/{id}.get.operationId" = "Recipe_Get"
"paths./recipe/{id}.get.parameters.length" = 2
"paths./recipe/{id}.get.parameters[0].description" = "the Recipe ID to retrieve"
"paths./recipe/{id}.get.parameters[0].format" = "int32"
"paths./recipe/{id}.get.parameters[0].in" = "path"
"paths./recipe/{id}.get.parameters[0].name" = "id"
"paths./recipe/{id}.get.parameters[0].required" = true
"paths./recipe/{id}.get.parameters[0].type" = "integer"
"paths./recipe/{id}.get.parameters[1].in" = "query"
"paths./recipe/{id}.get.parameters[1].name" = "prefetch"
"paths./recipe/{id}.get.parameters[1].required" = false
"paths./recipe/{id}.get.parameters[1].type" = "boolean"
"paths./recipe/{id}.get.responses.200.description" = "OK"
"paths./recipe/{id}.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API2.Recipe"
"paths./recipe/{id}.get.summary" = "Return full Recipe detail. Returns 403 if the recipe is owned by someone else."
"paths./recipe/{id}.get.tags.length" = 1
"paths./recipe/{id}.get.tags[0]" = "Recipe"
"paths./recipe/{id}/zap.get.consumes.length" = 0
"paths./recipe/{id}/zap.get.deprecated" = false
"paths./recipe/{id}/zap.get.operationId" = "Recipe_ZapRecipe"
"paths./recipe/{id}/zap.get.parameters.length" = 1
"paths./recipe/{id}/zap.get.parameters[0].format" = "int32"
"paths./recipe/{id}/zap.get.parameters[0].in" = "path"
"paths./recipe/{id}/zap.get.parameters[0].name" = "id"
"paths./recipe/{id}/zap.get.parameters[0].required" = true
"paths./recipe/{id}/zap.get.parameters[0].type" = "integer"
"paths./recipe/{id}/zap.get.responses.200.description" = "OK"
"paths./recipe/{id}/zap.get.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./recipe/{id}/zap.get.tags.length" = 1
"paths./recipe/{id}/zap.get.tags[0]" = "Recipe"
"paths./recipe/{recipeId}/feedback.post.consumes.length" = 5
"paths./recipe/{recipeId}/feedback.post.consumes[0]" = "application/json"
"paths./recipe/{recipeId}/feedback.post.consumes[1]" = "text/json"
"paths./recipe/{recipeId}/feedback.post.consumes[2]" = "application/xml"
"paths./recipe/{recipeId}/feedback.post.consumes[3]" = "text/xml"
"paths./recipe/{recipeId}/feedback.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe/{recipeId}/feedback.post.deprecated" = false
"paths./recipe/{recipeId}/feedback.post.operationId" = "Recipe_Feedback"
"paths./recipe/{recipeId}/feedback.post.parameters.length" = 2
"paths./recipe/{recipeId}/feedback.post.parameters[0].description" = ""
"paths./recipe/{recipeId}/feedback.post.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/feedback.post.parameters[0].in" = "path"
"paths./recipe/{recipeId}/feedback.post.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/feedback.post.parameters[0].required" = true
"paths./recipe/{recipeId}/feedback.post.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/feedback.post.parameters[1].description" = "The payload for feedback, which includes the field \"feedback\""
"paths./recipe/{recipeId}/feedback.post.parameters[1].in" = "body"
"paths./recipe/{recipeId}/feedback.post.parameters[1].name" = "data"
"paths./recipe/{recipeId}/feedback.post.parameters[1].required" = true
"paths./recipe/{recipeId}/feedback.post.parameters[1].schema.$ref" = "#/definitions/API2.Controllers.RecipeController.FeedbackDTO"
"paths./recipe/{recipeId}/feedback.post.responses.200.description" = "OK"
"paths./recipe/{recipeId}/feedback.post.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./recipe/{recipeId}/feedback.post.summary" = "Feedback on a Recipe -- for internal BigOven editors"
"paths./recipe/{recipeId}/feedback.post.tags.length" = 1
"paths./recipe/{recipeId}/feedback.post.tags[0]" = "Recipe"
"paths./recipe/{recipeId}/image.post.consumes.length" = 0
"paths./recipe/{recipeId}/image.post.deprecated" = false
"paths./recipe/{recipeId}/image.post.operationId" = "Images_UploadRecipeImage"
"paths./recipe/{recipeId}/image.post.parameters.length" = 4
"paths./recipe/{recipeId}/image.post.parameters[0].in" = "path"
"paths./recipe/{recipeId}/image.post.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/image.post.parameters[0].required" = true
"paths./recipe/{recipeId}/image.post.parameters[0].type" = "string"
"paths./recipe/{recipeId}/image.post.parameters[1].in" = "query"
"paths./recipe/{recipeId}/image.post.parameters[1].name" = "caption"
"paths./recipe/{recipeId}/image.post.parameters[1].required" = false
"paths./recipe/{recipeId}/image.post.parameters[1].type" = "string"
"paths./recipe/{recipeId}/image.post.parameters[2].format" = "double"
"paths./recipe/{recipeId}/image.post.parameters[2].in" = "query"
"paths./recipe/{recipeId}/image.post.parameters[2].name" = "lat"
"paths./recipe/{recipeId}/image.post.parameters[2].required" = false
"paths./recipe/{recipeId}/image.post.parameters[2].type" = "number"
"paths./recipe/{recipeId}/image.post.parameters[3].format" = "double"
"paths./recipe/{recipeId}/image.post.parameters[3].in" = "query"
"paths./recipe/{recipeId}/image.post.parameters[3].name" = "lng"
"paths./recipe/{recipeId}/image.post.parameters[3].required" = false
"paths./recipe/{recipeId}/image.post.parameters[3].type" = "number"
"paths./recipe/{recipeId}/image.post.responses.200.description" = "Success"
"paths./recipe/{recipeId}/image.post.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./recipe/{recipeId}/image.post.responses.400.description" = "if bad request (e.g., missing parameters)"
"paths./recipe/{recipeId}/image.post.responses.401.description" = "if the user is unknown"
"paths./recipe/{recipeId}/image.post.responses.415.description" = "if unsupported media type (e.g., bad JPG)"
"paths./recipe/{recipeId}/image.post.summary" = "POST: /recipe/{recipeId}/image?lat=42&amp;lng=21&amp;caption=this%20is%20my%20caption\r\n             \r\n             Note that caption, lng and lat are all optional, but must go on the request URI as params because this endpoint\r\n             needs a multipart/mime content header and will not parse JSON in the body along with it.\r\n            \r\n             Testing with Postman (validated 11/20/2015):\r\n             1) Remove the Content-Type header; add authentication information\r\n             2) On the request, click Body and choose \"form-data\", then add a line item with \"key\" column set to \"file\" and on the right,\r\n             change the type of the input from Text to File.  Browse and choose a JPG."
"paths./recipe/{recipeId}/image.post.tags.length" = 1
"paths./recipe/{recipeId}/image.post.tags[0]" = "Images"
"paths./recipe/{recipeId}/images.get.consumes.length" = 0
"paths./recipe/{recipeId}/images.get.deprecated" = false
"paths./recipe/{recipeId}/images.get.operationId" = "Images_Get"
"paths./recipe/{recipeId}/images.get.parameters.length" = 1
"paths./recipe/{recipeId}/images.get.parameters[0].description" = "Recipe ID (required)"
"paths./recipe/{recipeId}/images.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/images.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/images.get.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/images.get.parameters[0].required" = true
"paths./recipe/{recipeId}/images.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/images.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/images.get.responses.200.schema.items.$ref" = "#/definitions/BigOven.Model.API.Image"
"paths./recipe/{recipeId}/images.get.responses.200.schema.type" = "array"
"paths./recipe/{recipeId}/images.get.summary" = "Get all the images for a recipe. DEPRECATED. Please use /recipe/{recipeId}/photos."
"paths./recipe/{recipeId}/images.get.tags.length" = 1
"paths./recipe/{recipeId}/images.get.tags[0]" = "Images"
"paths./recipe/{recipeId}/note.post.consumes.length" = 5
"paths./recipe/{recipeId}/note.post.consumes[0]" = "application/json"
"paths./recipe/{recipeId}/note.post.consumes[1]" = "text/json"
"paths./recipe/{recipeId}/note.post.consumes[2]" = "application/xml"
"paths./recipe/{recipeId}/note.post.consumes[3]" = "text/xml"
"paths./recipe/{recipeId}/note.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe/{recipeId}/note.post.deprecated" = false
"paths./recipe/{recipeId}/note.post.operationId" = "Note_Post"
"paths./recipe/{recipeId}/note.post.parameters.length" = 2
"paths./recipe/{recipeId}/note.post.parameters[0].description" = "recipeId (int)"
"paths./recipe/{recipeId}/note.post.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/note.post.parameters[0].in" = "path"
"paths./recipe/{recipeId}/note.post.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/note.post.parameters[0].required" = true
"paths./recipe/{recipeId}/note.post.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/note.post.parameters[1].description" = "a recipe note, with fields: Date (YYYY-MM-DD string), Notes (string), People (string), Variations (string), RecipeID (int?)"
"paths./recipe/{recipeId}/note.post.parameters[1].in" = "body"
"paths./recipe/{recipeId}/note.post.parameters[1].name" = "note"
"paths./recipe/{recipeId}/note.post.parameters[1].required" = true
"paths./recipe/{recipeId}/note.post.parameters[1].schema.$ref" = "#/definitions/API2.Controllers.NoteController.NoteRequest"
"paths./recipe/{recipeId}/note.post.responses.200.description" = "OK"
"paths./recipe/{recipeId}/note.post.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API2.RecipeNote"
"paths./recipe/{recipeId}/note.post.summary" = "HTTP POST a new note into the system."
"paths./recipe/{recipeId}/note.post.tags.length" = 1
"paths./recipe/{recipeId}/note.post.tags[0]" = "Note"
"paths./recipe/{recipeId}/note/{noteId}.delete.consumes.length" = 0
"paths./recipe/{recipeId}/note/{noteId}.delete.deprecated" = false
"paths./recipe/{recipeId}/note/{noteId}.delete.operationId" = "Note_Delete"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters.length" = 2
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[0].description" = "recipeId (int)"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[0].in" = "path"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[0].required" = true
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[1].description" = "noteId (int)"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[1].format" = "int32"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[1].in" = "path"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[1].name" = "noteId"
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[1].required" = true
"paths./recipe/{recipeId}/note/{noteId}.delete.parameters[1].type" = "integer"
"paths./recipe/{recipeId}/note/{noteId}.delete.responses.200.description" = "OK"
"paths./recipe/{recipeId}/note/{noteId}.delete.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./recipe/{recipeId}/note/{noteId}.delete.summary" = "Delete a review\r\n                do a DELETE Http request of /note/{ID}"
"paths./recipe/{recipeId}/note/{noteId}.delete.tags.length" = 1
"paths./recipe/{recipeId}/note/{noteId}.delete.tags[0]" = "Note"
"paths./recipe/{recipeId}/note/{noteId}.get.consumes.length" = 0
"paths./recipe/{recipeId}/note/{noteId}.get.deprecated" = false
"paths./recipe/{recipeId}/note/{noteId}.get.operationId" = "Note_Get"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters.length" = 2
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[0].description" = "recipe identifier (integer)"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[0].required" = true
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[1].description" = "The note ID (note -- it's not the RecipeID)"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[1].format" = "int32"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[1].in" = "path"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[1].name" = "noteId"
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[1].required" = true
"paths./recipe/{recipeId}/note/{noteId}.get.parameters[1].type" = "integer"
"paths./recipe/{recipeId}/note/{noteId}.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/note/{noteId}.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.RecipeNote"
"paths./recipe/{recipeId}/note/{noteId}.get.summary" = "Get a given note. Make sure you're passing authentication information in the header for the user who owns the note."
"paths./recipe/{recipeId}/note/{noteId}.get.tags.length" = 1
"paths./recipe/{recipeId}/note/{noteId}.get.tags[0]" = "Note"
"paths./recipe/{recipeId}/note/{noteId}.put.consumes.length" = 5
"paths./recipe/{recipeId}/note/{noteId}.put.consumes[0]" = "application/json"
"paths./recipe/{recipeId}/note/{noteId}.put.consumes[1]" = "text/json"
"paths./recipe/{recipeId}/note/{noteId}.put.consumes[2]" = "application/xml"
"paths./recipe/{recipeId}/note/{noteId}.put.consumes[3]" = "text/xml"
"paths./recipe/{recipeId}/note/{noteId}.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe/{recipeId}/note/{noteId}.put.deprecated" = false
"paths./recipe/{recipeId}/note/{noteId}.put.operationId" = "Note_Put"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters.length" = 3
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[0].in" = "path"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[0].required" = true
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[1].format" = "int32"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[1].in" = "path"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[1].name" = "noteId"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[1].required" = true
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[1].type" = "integer"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[2].in" = "body"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[2].name" = "recipeNote"
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[2].required" = true
"paths./recipe/{recipeId}/note/{noteId}.put.parameters[2].schema.$ref" = "#/definitions/API2.Controllers.NoteController.NoteRequest"
"paths./recipe/{recipeId}/note/{noteId}.put.responses.200.description" = "OK"
"paths./recipe/{recipeId}/note/{noteId}.put.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.RecipeNote"
"paths./recipe/{recipeId}/note/{noteId}.put.summary" = "HTTP PUT (update) a Recipe note (RecipeNote)."
"paths./recipe/{recipeId}/note/{noteId}.put.tags.length" = 1
"paths./recipe/{recipeId}/note/{noteId}.put.tags[0]" = "Note"
"paths./recipe/{recipeId}/notes.get.consumes.length" = 0
"paths./recipe/{recipeId}/notes.get.deprecated" = false
"paths./recipe/{recipeId}/notes.get.operationId" = "Note_GetNotes"
"paths./recipe/{recipeId}/notes.get.parameters.length" = 3
"paths./recipe/{recipeId}/notes.get.parameters[0].description" = "recipeId (int)"
"paths./recipe/{recipeId}/notes.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/notes.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/notes.get.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/notes.get.parameters[0].required" = true
"paths./recipe/{recipeId}/notes.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/notes.get.parameters[1].description" = "page (int, starting from 1)"
"paths./recipe/{recipeId}/notes.get.parameters[1].format" = "int32"
"paths./recipe/{recipeId}/notes.get.parameters[1].in" = "query"
"paths./recipe/{recipeId}/notes.get.parameters[1].name" = "pg"
"paths./recipe/{recipeId}/notes.get.parameters[1].required" = false
"paths./recipe/{recipeId}/notes.get.parameters[1].type" = "integer"
"paths./recipe/{recipeId}/notes.get.parameters[2].description" = "recipeId"
"paths./recipe/{recipeId}/notes.get.parameters[2].format" = "int32"
"paths./recipe/{recipeId}/notes.get.parameters[2].in" = "query"
"paths./recipe/{recipeId}/notes.get.parameters[2].name" = "rpp"
"paths./recipe/{recipeId}/notes.get.parameters[2].required" = false
"paths./recipe/{recipeId}/notes.get.parameters[2].type" = "integer"
"paths./recipe/{recipeId}/notes.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/notes.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.RecipeNoteList"
"paths./recipe/{recipeId}/notes.get.summary" = "recipe/100/notes"
"paths./recipe/{recipeId}/notes.get.tags.length" = 1
"paths./recipe/{recipeId}/notes.get.tags[0]" = "Note"
"paths./recipe/{recipeId}/photos.get.consumes.length" = 0
"paths./recipe/{recipeId}/photos.get.deprecated" = false
"paths./recipe/{recipeId}/photos.get.operationId" = "Images_GetRecipePhotos"
"paths./recipe/{recipeId}/photos.get.parameters.length" = 3
"paths./recipe/{recipeId}/photos.get.parameters[0].description" = "Recipe ID (required)"
"paths./recipe/{recipeId}/photos.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/photos.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/photos.get.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/photos.get.parameters[0].required" = true
"paths./recipe/{recipeId}/photos.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/photos.get.parameters[1].format" = "int32"
"paths./recipe/{recipeId}/photos.get.parameters[1].in" = "query"
"paths./recipe/{recipeId}/photos.get.parameters[1].name" = "pg"
"paths./recipe/{recipeId}/photos.get.parameters[1].required" = false
"paths./recipe/{recipeId}/photos.get.parameters[1].type" = "integer"
"paths./recipe/{recipeId}/photos.get.parameters[2].format" = "int32"
"paths./recipe/{recipeId}/photos.get.parameters[2].in" = "query"
"paths./recipe/{recipeId}/photos.get.parameters[2].name" = "rpp"
"paths./recipe/{recipeId}/photos.get.parameters[2].required" = false
"paths./recipe/{recipeId}/photos.get.parameters[2].type" = "integer"
"paths./recipe/{recipeId}/photos.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/photos.get.responses.200.schema.$ref" = "#/definitions/API2.Controllers.ImagesController.RecipePhotosResponse"
"paths./recipe/{recipeId}/photos.get.summary" = "Get all the photos for a recipe"
"paths./recipe/{recipeId}/photos.get.tags.length" = 1
"paths./recipe/{recipeId}/photos.get.tags[0]" = "Images"
"paths./recipe/{recipeId}/related.get.consumes.length" = 0
"paths./recipe/{recipeId}/related.get.deprecated" = false
"paths./recipe/{recipeId}/related.get.operationId" = "Recipe_Related"
"paths./recipe/{recipeId}/related.get.parameters.length" = 3
"paths./recipe/{recipeId}/related.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/related.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/related.get.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/related.get.parameters[0].required" = true
"paths./recipe/{recipeId}/related.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/related.get.parameters[1].description" = ""
"paths./recipe/{recipeId}/related.get.parameters[1].format" = "int32"
"paths./recipe/{recipeId}/related.get.parameters[1].in" = "query"
"paths./recipe/{recipeId}/related.get.parameters[1].name" = "pg"
"paths./recipe/{recipeId}/related.get.parameters[1].required" = true
"paths./recipe/{recipeId}/related.get.parameters[1].type" = "integer"
"paths./recipe/{recipeId}/related.get.parameters[2].description" = ""
"paths./recipe/{recipeId}/related.get.parameters[2].format" = "int32"
"paths./recipe/{recipeId}/related.get.parameters[2].in" = "query"
"paths./recipe/{recipeId}/related.get.parameters[2].name" = "rpp"
"paths./recipe/{recipeId}/related.get.parameters[2].required" = true
"paths./recipe/{recipeId}/related.get.parameters[2].type" = "integer"
"paths./recipe/{recipeId}/related.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/related.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API2.RecipeSearchResult"
"paths./recipe/{recipeId}/related.get.summary" = "Get recipes related to the given recipeId"
"paths./recipe/{recipeId}/related.get.tags.length" = 1
"paths./recipe/{recipeId}/related.get.tags[0]" = "Recipe"
"paths./recipe/{recipeId}/review.get.consumes.length" = 0
"paths./recipe/{recipeId}/review.get.deprecated" = false
"paths./recipe/{recipeId}/review.get.parameters.length" = 1
"paths./recipe/{recipeId}/review.get.parameters[0].description" = ""
"paths./recipe/{recipeId}/review.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/review.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/review.get.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/review.get.parameters[0].required" = true
"paths./recipe/{recipeId}/review.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/review.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/review.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Review"
"paths./recipe/{recipeId}/review.get.summary" = "Get *my* review for the recipe {recipeId}, where \"me\" is determined by standard authentication headers"
"paths./recipe/{recipeId}/review.get.tags.length" = 1
"paths./recipe/{recipeId}/review.get.tags[0]" = "Review"
"paths./recipe/{recipeId}/review.post.consumes.length" = 5
"paths./recipe/{recipeId}/review.post.consumes[0]" = "application/json"
"paths./recipe/{recipeId}/review.post.consumes[1]" = "text/json"
"paths./recipe/{recipeId}/review.post.consumes[2]" = "application/xml"
"paths./recipe/{recipeId}/review.post.consumes[3]" = "text/xml"
"paths./recipe/{recipeId}/review.post.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe/{recipeId}/review.post.deprecated" = false
"paths./recipe/{recipeId}/review.post.operationId" = "Review_Post"
"paths./recipe/{recipeId}/review.post.parameters.length" = 2
"paths./recipe/{recipeId}/review.post.parameters[0].description" = ""
"paths./recipe/{recipeId}/review.post.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/review.post.parameters[0].in" = "path"
"paths./recipe/{recipeId}/review.post.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/review.post.parameters[0].required" = true
"paths./recipe/{recipeId}/review.post.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/review.post.parameters[1].description" = ""
"paths./recipe/{recipeId}/review.post.parameters[1].in" = "body"
"paths./recipe/{recipeId}/review.post.parameters[1].name" = "data"
"paths./recipe/{recipeId}/review.post.parameters[1].required" = true
"paths./recipe/{recipeId}/review.post.parameters[1].schema.$ref" = "#/definitions/API2.Controllers.ReviewController.ReviewRequest"
"paths./recipe/{recipeId}/review.post.responses.200.description" = "OK"
"paths./recipe/{recipeId}/review.post.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./recipe/{recipeId}/review.post.summary" = "Add a new review. Only one review can be provided per {userId, recipeId} pair. Otherwise your review will be updated."
"paths./recipe/{recipeId}/review.post.tags.length" = 1
"paths./recipe/{recipeId}/review.post.tags[0]" = "Review"
"paths./recipe/{recipeId}/review/{reviewId}.delete.consumes.length" = 0
"paths./recipe/{recipeId}/review/{reviewId}.delete.deprecated" = false
"paths./recipe/{recipeId}/review/{reviewId}.delete.operationId" = "Review_Delete"
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters.length" = 2
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[0].description" = ""
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[0].in" = "path"
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[0].name" = "reviewId"
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[0].required" = true
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[0].type" = "string"
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[1].in" = "path"
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[1].name" = "recipeId"
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[1].required" = true
"paths./recipe/{recipeId}/review/{reviewId}.delete.parameters[1].type" = "string"
"paths./recipe/{recipeId}/review/{reviewId}.delete.responses.200.description" = "OK"
"paths./recipe/{recipeId}/review/{reviewId}.delete.responses.200.schema.$ref" = "#/definitions/System.Object"
"paths./recipe/{recipeId}/review/{reviewId}.delete.summary" = "Delete a review by recipeId and reviewId. DEPRECATED. Please see recipe/review/{reviewId} for the preferred method.\r\n            (We are moving from an integer-based ID system to a GUID-style string-based ID system for reviews and replies.)"
"paths./recipe/{recipeId}/review/{reviewId}.delete.tags.length" = 1
"paths./recipe/{recipeId}/review/{reviewId}.delete.tags[0]" = "Review"
"paths./recipe/{recipeId}/review/{reviewId}.get.consumes.length" = 0
"paths./recipe/{recipeId}/review/{reviewId}.get.deprecated" = false
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters.length" = 2
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[0].description" = "int"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[0].name" = "reviewId"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[0].required" = true
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[1].description" = "int"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[1].format" = "int32"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[1].in" = "path"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[1].name" = "recipeId"
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[1].required" = true
"paths./recipe/{recipeId}/review/{reviewId}.get.parameters[1].type" = "integer"
"paths./recipe/{recipeId}/review/{reviewId}.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/review/{reviewId}.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Review"
"paths./recipe/{recipeId}/review/{reviewId}.get.summary" = "Get a given review - DEPRECATED. See recipe/review/{reviewId} for the current usage.\r\n            Beginning in January 2017, BigOven moded from an integer-based ID system to a GUID-style string-based ID system for reviews and replies.\r\n            We are also supporting more of a \"Google Play\" style model for Reviews and Replies. That is, there are top-level Reviews and then\r\n            an unlimited list of replies (which do not carry star ratings) underneath existing reviews. Also, a given user can only have one review \r\n            per recipe. Existing legacy endpoints will continue to work, but we strongly recommend you migrate to using the newer endpoints listed\r\n            which do NOT carry the \"DEPRECATED\" flag."
"paths./recipe/{recipeId}/review/{reviewId}.get.tags.length" = 1
"paths./recipe/{recipeId}/review/{reviewId}.get.tags[0]" = "Review"
"paths./recipe/{recipeId}/review/{reviewId}.put.consumes.length" = 5
"paths./recipe/{recipeId}/review/{reviewId}.put.consumes[0]" = "application/json"
"paths./recipe/{recipeId}/review/{reviewId}.put.consumes[1]" = "text/json"
"paths./recipe/{recipeId}/review/{reviewId}.put.consumes[2]" = "application/xml"
"paths./recipe/{recipeId}/review/{reviewId}.put.consumes[3]" = "text/xml"
"paths./recipe/{recipeId}/review/{reviewId}.put.consumes[4]" = "application/x-www-form-urlencoded"
"paths./recipe/{recipeId}/review/{reviewId}.put.deprecated" = false
"paths./recipe/{recipeId}/review/{reviewId}.put.operationId" = "Review_PutLegacy"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters.length" = 3
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[0].description" = "reviewId (int)"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[0].in" = "path"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[0].name" = "reviewId"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[0].required" = true
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[1].description" = ""
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[1].in" = "body"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[1].name" = "review"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[1].required" = true
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[1].schema.$ref" = "#/definitions/API2.Controllers.ReviewController.ReviewRequestLegacy"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[2].description" = "recipeId (int)"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[2].format" = "int32"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[2].in" = "path"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[2].name" = "recipeId"
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[2].required" = true
"paths./recipe/{recipeId}/review/{reviewId}.put.parameters[2].type" = "integer"
"paths./recipe/{recipeId}/review/{reviewId}.put.responses.200.description" = "OK"
"paths./recipe/{recipeId}/review/{reviewId}.put.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Review"
"paths./recipe/{recipeId}/review/{reviewId}.put.summary" = "HTTP PUT (update) a recipe review. DEPRECATED. Please see recipe/review/{reviewId} PUT for the new endpoint.\r\n            We are moving to a string-based primary key system, no longer integers, for reviews and replies."
"paths./recipe/{recipeId}/review/{reviewId}.put.tags.length" = 1
"paths./recipe/{recipeId}/review/{reviewId}.put.tags[0]" = "Review"
"paths./recipe/{recipeId}/reviews.get.consumes.length" = 0
"paths./recipe/{recipeId}/reviews.get.deprecated" = false
"paths./recipe/{recipeId}/reviews.get.operationId" = "Review_GetReviews"
"paths./recipe/{recipeId}/reviews.get.parameters.length" = 3
"paths./recipe/{recipeId}/reviews.get.parameters[0].description" = "recipe id (int)"
"paths./recipe/{recipeId}/reviews.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/reviews.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/reviews.get.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/reviews.get.parameters[0].required" = true
"paths./recipe/{recipeId}/reviews.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/reviews.get.parameters[1].description" = "the page (int), starting with 1"
"paths./recipe/{recipeId}/reviews.get.parameters[1].format" = "int32"
"paths./recipe/{recipeId}/reviews.get.parameters[1].in" = "query"
"paths./recipe/{recipeId}/reviews.get.parameters[1].name" = "pg"
"paths./recipe/{recipeId}/reviews.get.parameters[1].required" = false
"paths./recipe/{recipeId}/reviews.get.parameters[1].type" = "integer"
"paths./recipe/{recipeId}/reviews.get.parameters[2].description" = "results per page (int)"
"paths./recipe/{recipeId}/reviews.get.parameters[2].format" = "int32"
"paths./recipe/{recipeId}/reviews.get.parameters[2].in" = "query"
"paths./recipe/{recipeId}/reviews.get.parameters[2].name" = "rpp"
"paths./recipe/{recipeId}/reviews.get.parameters[2].required" = false
"paths./recipe/{recipeId}/reviews.get.parameters[2].type" = "integer"
"paths./recipe/{recipeId}/reviews.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/reviews.get.responses.200.schema.items.$ref" = "#/definitions/BigOven.Model.API.Review"
"paths./recipe/{recipeId}/reviews.get.responses.200.schema.type" = "array"
"paths./recipe/{recipeId}/reviews.get.summary" = "Get paged list of reviews for a recipe. Each review will have at most one FeaturedReply, as well as a ReplyCount."
"paths./recipe/{recipeId}/reviews.get.tags.length" = 1
"paths./recipe/{recipeId}/reviews.get.tags[0]" = "Review"
"paths./recipe/{recipeId}/scans.get.consumes.length" = 0
"paths./recipe/{recipeId}/scans.get.deprecated" = false
"paths./recipe/{recipeId}/scans.get.operationId" = "Images_GetScanImages"
"paths./recipe/{recipeId}/scans.get.parameters.length" = 1
"paths./recipe/{recipeId}/scans.get.parameters[0].description" = "the recipe identifier (int)"
"paths./recipe/{recipeId}/scans.get.parameters[0].format" = "int32"
"paths./recipe/{recipeId}/scans.get.parameters[0].in" = "path"
"paths./recipe/{recipeId}/scans.get.parameters[0].name" = "recipeId"
"paths./recipe/{recipeId}/scans.get.parameters[0].required" = true
"paths./recipe/{recipeId}/scans.get.parameters[0].type" = "integer"
"paths./recipe/{recipeId}/scans.get.responses.200.description" = "OK"
"paths./recipe/{recipeId}/scans.get.responses.200.schema.items.$ref" = "#/definitions/BigOven.Model.API.Image"
"paths./recipe/{recipeId}/scans.get.responses.200.schema.type" = "array"
"paths./recipe/{recipeId}/scans.get.summary" = "Gets a list of RecipeScan images for the recipe. There will be at most 3 per recipe."
"paths./recipe/{recipeId}/scans.get.tags.length" = 1
"paths./recipe/{recipeId}/scans.get.tags[0]" = "Images"
"paths./recipes.get.consumes.length" = 0
"paths./recipes.get.deprecated" = false
"paths./recipes.get.operationId" = "Recipe_RecipeSearch"
"paths./recipes.get.parameters.length" = 39
"paths./recipes.get.parameters[0].description" = "Search anywhere in the recipe for the keyword"
"paths./recipes.get.parameters[0].in" = "query"
"paths./recipes.get.parameters[0].name" = "any_kw"
"paths./recipes.get.parameters[0].required" = false
"paths./recipes.get.parameters[0].type" = "string"
"paths./recipes.get.parameters[10].description" = "integer of the subcategory you'd like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \"Main Dish &gt; Casseroles\"."
"paths./recipes.get.parameters[10].in" = "query"
"paths./recipes.get.parameters[10].name" = "include_cat"
"paths./recipes.get.parameters[10].required" = false
"paths./recipes.get.parameters[10].type" = "string"
"paths./recipes.get.parameters[11].description" = "like include_cat, set this to an integer to exclude a specific category"
"paths./recipes.get.parameters[11].in" = "query"
"paths./recipes.get.parameters[11].name" = "exclude_cat"
"paths./recipes.get.parameters[11].required" = false
"paths./recipes.get.parameters[11].type" = "string"
"paths./recipes.get.parameters[12].description" = "csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]"
"paths./recipes.get.parameters[12].in" = "query"
"paths./recipes.get.parameters[12].name" = "include_primarycat"
"paths./recipes.get.parameters[12].required" = false
"paths./recipes.get.parameters[12].type" = "string"
"paths./recipes.get.parameters[13].description" = "csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]"
"paths./recipes.get.parameters[13].in" = "query"
"paths./recipes.get.parameters[13].name" = "exclude_primarycat"
"paths./recipes.get.parameters[13].required" = false
"paths./recipes.get.parameters[13].type" = "string"
"paths./recipes.get.parameters[14].description" = "A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken"
"paths./recipes.get.parameters[14].in" = "query"
"paths./recipes.get.parameters[14].name" = "include_ing"
"paths./recipes.get.parameters[14].required" = false
"paths./recipes.get.parameters[14].type" = "string"
"paths./recipes.get.parameters[15].description" = "A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required)"
"paths./recipes.get.parameters[15].in" = "query"
"paths./recipes.get.parameters[15].name" = "exclude_ing"
"paths./recipes.get.parameters[15].required" = false
"paths./recipes.get.parameters[15].type" = "string"
"paths./recipes.get.parameters[16].description" = "Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese"
"paths./recipes.get.parameters[16].in" = "query"
"paths./recipes.get.parameters[16].name" = "cuisine"
"paths./recipes.get.parameters[16].required" = false
"paths./recipes.get.parameters[16].type" = "string"
"paths./recipes.get.parameters[17].description" = ""
"paths./recipes.get.parameters[17].in" = "query"
"paths./recipes.get.parameters[17].name" = "db"
"paths./recipes.get.parameters[17].required" = false
"paths./recipes.get.parameters[17].type" = "string"
"paths./recipes.get.parameters[18].description" = "If set to a given username, it'll force the search to filter to just that username"
"paths./recipes.get.parameters[18].in" = "query"
"paths./recipes.get.parameters[18].name" = "userset"
"paths./recipes.get.parameters[18].required" = false
"paths./recipes.get.parameters[18].type" = "string"
"paths./recipes.get.parameters[19].description" = "Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \"dozen\", etc. This parameter simply specifies the minimum number for that value entered in \"yield.\""
"paths./recipes.get.parameters[19].format" = "double"
"paths./recipes.get.parameters[19].in" = "query"
"paths./recipes.get.parameters[19].name" = "servingsMin"
"paths./recipes.get.parameters[19].required" = false
"paths./recipes.get.parameters[19].type" = "number"
"paths./recipes.get.parameters[1].description" = "Search in a specific folder name for the authenticated user"
"paths./recipes.get.parameters[1].in" = "query"
"paths./recipes.get.parameters[1].name" = "folder"
"paths./recipes.get.parameters[1].required" = false
"paths./recipes.get.parameters[1].type" = "string"
"paths./recipes.get.parameters[20].description" = "Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \"1 hour, 15 minutes\" to 75 before passing in.)"
"paths./recipes.get.parameters[20].format" = "int32"
"paths./recipes.get.parameters[20].in" = "query"
"paths./recipes.get.parameters[20].name" = "totalMins"
"paths./recipes.get.parameters[20].required" = false
"paths./recipes.get.parameters[20].type" = "integer"
"paths./recipes.get.parameters[21].description" = "Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less"
"paths./recipes.get.parameters[21].format" = "int32"
"paths./recipes.get.parameters[21].in" = "query"
"paths./recipes.get.parameters[21].name" = "maxIngredients"
"paths./recipes.get.parameters[21].required" = false
"paths./recipes.get.parameters[21].type" = "integer"
"paths./recipes.get.parameters[22].description" = "Optional. If supplied, will restrict results to recipes that have at least {minIngredients}"
"paths./recipes.get.parameters[22].format" = "int32"
"paths./recipes.get.parameters[22].in" = "query"
"paths./recipes.get.parameters[22].name" = "minIngredients"
"paths./recipes.get.parameters[22].required" = false
"paths./recipes.get.parameters[22].type" = "integer"
"paths./recipes.get.parameters[23].description" = "integer; results per page"
"paths./recipes.get.parameters[23].format" = "int32"
"paths./recipes.get.parameters[23].in" = "query"
"paths./recipes.get.parameters[23].name" = "rpp"
"paths./recipes.get.parameters[23].required" = false
"paths./recipes.get.parameters[23].type" = "integer"
"paths./recipes.get.parameters[24].description" = "integer: the page number"
"paths./recipes.get.parameters[24].format" = "int32"
"paths./recipes.get.parameters[24].in" = "query"
"paths./recipes.get.parameters[24].name" = "pg"
"paths./recipes.get.parameters[24].required" = false
"paths./recipes.get.parameters[24].type" = "integer"
"paths./recipes.get.parameters[25].description" = "when set to 1, limit to vegetarian (Powersearch-capable plan required)"
"paths./recipes.get.parameters[25].format" = "int32"
"paths./recipes.get.parameters[25].in" = "query"
"paths./recipes.get.parameters[25].name" = "vtn"
"paths./recipes.get.parameters[25].required" = false
"paths./recipes.get.parameters[25].type" = "integer"
"paths./recipes.get.parameters[26].description" = "when set to 1, limit to vegan (Powersearch-capable plan required)"
"paths./recipes.get.parameters[26].format" = "int32"
"paths./recipes.get.parameters[26].in" = "query"
"paths./recipes.get.parameters[26].name" = "vgn"
"paths./recipes.get.parameters[26].required" = false
"paths./recipes.get.parameters[26].type" = "integer"
"paths./recipes.get.parameters[27].description" = "when set to 1, limit to contains-cheese (Powersearch-capable plan required)"
"paths./recipes.get.parameters[27].format" = "int32"
"paths./recipes.get.parameters[27].in" = "query"
"paths./recipes.get.parameters[27].name" = "chs"
"paths./recipes.get.parameters[27].required" = false
"paths./recipes.get.parameters[27].type" = "integer"
"paths./recipes.get.parameters[28].description" = "when set to 1, limit to gluten-free (Powersearch-capable plan required)"
"paths./recipes.get.parameters[28].format" = "int32"
"paths./recipes.get.parameters[28].in" = "query"
"paths./recipes.get.parameters[28].name" = "glf"
"paths./recipes.get.parameters[28].required" = false
"paths./recipes.get.parameters[28].type" = "integer"
"paths./recipes.get.parameters[29].description" = "when set to 1, limit to nut-free (Powersearch-capable plan required)"
"paths./recipes.get.parameters[29].format" = "int32"
"paths./recipes.get.parameters[29].in" = "query"
"paths./recipes.get.parameters[29].name" = "ntf"
"paths./recipes.get.parameters[29].required" = false
"paths./recipes.get.parameters[29].type" = "integer"
"paths./recipes.get.parameters[2].description" = "Limit to a collection ID number"
"paths./recipes.get.parameters[2].format" = "int32"
"paths./recipes.get.parameters[2].in" = "query"
"paths./recipes.get.parameters[2].name" = "coll"
"paths./recipes.get.parameters[2].required" = false
"paths./recipes.get.parameters[2].type" = "integer"
"paths./recipes.get.parameters[30].description" = "when set to 1, limit to dairy-free (Powersearch-capable plan required)"
"paths./recipes.get.parameters[30].format" = "int32"
"paths./recipes.get.parameters[30].in" = "query"
"paths./recipes.get.parameters[30].name" = "dyf"
"paths./recipes.get.parameters[30].required" = false
"paths./recipes.get.parameters[30].type" = "integer"
"paths./recipes.get.parameters[31].description" = "when set to 1, limit to seafood-free (Powersearch-capable plan required)"
"paths./recipes.get.parameters[31].format" = "int32"
"paths./recipes.get.parameters[31].in" = "query"
"paths./recipes.get.parameters[31].name" = "sff"
"paths./recipes.get.parameters[31].required" = false
"paths./recipes.get.parameters[31].type" = "integer"
"paths./recipes.get.parameters[32].description" = "when set to 1, limit to shellfish-free (Powersearch-capable plan required)"
"paths./recipes.get.parameters[32].format" = "int32"
"paths./recipes.get.parameters[32].in" = "query"
"paths./recipes.get.parameters[32].name" = "slf"
"paths./recipes.get.parameters[32].required" = false
"paths./recipes.get.parameters[32].type" = "integer"
"paths./recipes.get.parameters[33].description" = "when set to 1, limit to tree-nut free (Powersearch-capable plan required)"
"paths./recipes.get.parameters[33].format" = "int32"
"paths./recipes.get.parameters[33].in" = "query"
"paths./recipes.get.parameters[33].name" = "tnf"
"paths./recipes.get.parameters[33].required" = false
"paths./recipes.get.parameters[33].type" = "integer"
"paths./recipes.get.parameters[34].description" = "when set to 1, limit to white-meat free (Powersearch-capable plan required)"
"paths./recipes.get.parameters[34].format" = "int32"
"paths./recipes.get.parameters[34].in" = "query"
"paths./recipes.get.parameters[34].name" = "wmf"
"paths./recipes.get.parameters[34].required" = false
"paths./recipes.get.parameters[34].type" = "integer"
"paths./recipes.get.parameters[35].description" = "when set to 1, limit to red-meat free (Powersearch-capable plan required)"
"paths./recipes.get.parameters[35].format" = "int32"
"paths./recipes.get.parameters[35].in" = "query"
"paths./recipes.get.parameters[35].name" = "rmf"
"paths./recipes.get.parameters[35].required" = false
"paths./recipes.get.parameters[35].type" = "integer"
"paths./recipes.get.parameters[36].description" = "when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required)"
"paths./recipes.get.parameters[36].format" = "int32"
"paths./recipes.get.parameters[36].in" = "query"
"paths./recipes.get.parameters[36].name" = "cps"
"paths./recipes.get.parameters[36].required" = false
"paths./recipes.get.parameters[36].type" = "integer"
"paths./recipes.get.parameters[37].description" = "optional. When set to 1, this will limit search results to \"best of\" recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don't include this parameter."
"paths./recipes.get.parameters[37].format" = "int32"
"paths./recipes.get.parameters[37].in" = "query"
"paths./recipes.get.parameters[37].name" = "champion"
"paths./recipes.get.parameters[37].required" = false
"paths./recipes.get.parameters[37].type" = "integer"
"paths./recipes.get.parameters[38].description" = "optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon)"
"paths./recipes.get.parameters[38].in" = "query"
"paths./recipes.get.parameters[38].name" = "synonyms"
"paths./recipes.get.parameters[38].required" = false
"paths./recipes.get.parameters[38].type" = "boolean"
"paths./recipes.get.parameters[3].description" = "optionally set to either \"myrecipes\", \"try\", \"favorites\",\"added\" to filter to just the authenticated user's recipe set"
"paths./recipes.get.parameters[3].in" = "query"
"paths./recipes.get.parameters[3].name" = "filter"
"paths./recipes.get.parameters[3].required" = false
"paths./recipes.get.parameters[3].type" = "string"
"paths./recipes.get.parameters[4].description" = "Search just in the recipe title for the keyword"
"paths./recipes.get.parameters[4].in" = "query"
"paths./recipes.get.parameters[4].name" = "title_kw"
"paths./recipes.get.parameters[4].required" = false
"paths./recipes.get.parameters[4].type" = "string"
"paths./recipes.get.parameters[5].description" = "Set the target userid to search their public recipes"
"paths./recipes.get.parameters[5].format" = "int32"
"paths./recipes.get.parameters[5].in" = "query"
"paths./recipes.get.parameters[5].name" = "userId"
"paths./recipes.get.parameters[5].required" = false
"paths./recipes.get.parameters[5].type" = "integer"
"paths./recipes.get.parameters[6].description" = "Set the target username to search their public recipes"
"paths./recipes.get.parameters[6].in" = "query"
"paths./recipes.get.parameters[6].name" = "username"
"paths./recipes.get.parameters[6].required" = false
"paths./recipes.get.parameters[6].type" = "string"
"paths./recipes.get.parameters[7].description" = ""
"paths./recipes.get.parameters[7].in" = "query"
"paths./recipes.get.parameters[7].name" = "token"
"paths./recipes.get.parameters[7].required" = false
"paths./recipes.get.parameters[7].type" = "string"
"paths./recipes.get.parameters[8].description" = "if set to true, limit search results to photos only"
"paths./recipes.get.parameters[8].in" = "query"
"paths./recipes.get.parameters[8].name" = "photos"
"paths./recipes.get.parameters[8].required" = false
"paths./recipes.get.parameters[8].type" = "boolean"
"paths./recipes.get.parameters[9].description" = "if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders)"
"paths./recipes.get.parameters[9].in" = "query"
"paths./recipes.get.parameters[9].name" = "boostmine"
"paths./recipes.get.parameters[9].required" = false
"paths./recipes.get.parameters[9].type" = "boolean"
"paths./recipes.get.responses.200.description" = "OK"
"paths./recipes.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API2.RecipeSearchResult"
"paths./recipes.get.summary" = "Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.\r\n            Use any_kw to search across the entire recipe.\r\n            If you'd like to limit by course, set the parameter \"include_primarycat\" to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).\r\n            If you'd like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.\r\n            If you'd like to include a category, set include_cat to one or more (comma-separated) of those categories to include.\r\n            To explicitly include an ingredient in your search, set the parameter \"include_ing\" to a CSV of up to three ingredients, e.g.:include_ing=mustard,chicken,beef%20tips\r\n            To explicitly exclude an ingredient in your search, set the parameter \"exclude_ing\" to a CSV of up to three ingredients.\r\n            All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).\r\n            So, to get the third page of a result set paged with 25 recipes per page, you'd pass pg=3&amp;rpp=25\r\n            If you'd like to target searches to just a single target user's recipes, set userId=the target userId (number).\r\n            Or, you can set username=theirusername\r\n            vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps\r\n            cuisine\r\n            photos\r\n            filter=added,try,favorites,myrecipes\\r\\n\\r\\n\r\n            folder=FolderNameCaseSensitive\r\n            coll=ID of Collection"
"paths./recipes.get.tags.length" = 1
"paths./recipes.get.tags[0]" = "Recipe"
"paths./recipes/random.get.consumes.length" = 0
"paths./recipes/random.get.deprecated" = false
"paths./recipes/random.get.operationId" = "Recipe_GetRandomRecipe"
"paths./recipes/random.get.responses.200.description" = "OK"
"paths./recipes/random.get.responses.200.schema.$ref" = "#/definitions/BigOven.Model.API.Recipe"
"paths./recipes/random.get.summary" = "Get a random, home-page-quality Recipe."
"paths./recipes/random.get.tags.length" = 1
"paths./recipes/random.get.tags[0]" = "Recipe"
"paths./recipes/raves.get.consumes.length" = 0
"paths./recipes/raves.get.deprecated" = false
"paths./recipes/raves.get.operationId" = "Recipe_Raves"
"paths./recipes/raves.get.parameters.length" = 2
"paths./recipes/raves.get.parameters[0].description" = "page, starting with 1"
"paths./recipes/raves.get.parameters[0].format" = "int32"
"paths./recipes/raves.get.parameters[0].in" = "query"
"paths./recipes/raves.get.parameters[0].name" = "pg"
"paths./recipes/raves.get.parameters[0].required" = false
"paths./recipes/raves.get.parameters[0].type" = "integer"
"paths./recipes/raves.get.parameters[1].description" = "results per page"
"paths./recipes/raves.get.parameters[1].format" = "int32"
"paths./recipes/raves.get.parameters[1].in" = "query"
"paths./recipes/raves.get.parameters[1].name" = "rpp"
"paths./recipes/raves.get.parameters[1].required" = false
"paths./recipes/raves.get.parameters[1].type" = "integer"
"paths./recipes/raves.get.responses.200.description" = "OK"
"paths./recipes/raves.get.responses.200.schema.items.$ref" = "#/definitions/BigOven.Model.RecipeInfoReviewTuple2"
"paths./recipes/raves.get.responses.200.schema.type" = "array"
"paths./recipes/raves.get.summary" = "Get the recipe/comment tuples for those recipes with 4 or 5 star ratings"
"paths./recipes/raves.get.tags.length" = 1
"paths./recipes/raves.get.tags[0]" = "Recipe"
"paths./recipes/recentviews.get.consumes.length" = 0
"paths./recipes/recentviews.get.deprecated" = false
"paths./recipes/recentviews.get.operationId" = "Recipe_RecentViews"
"paths./recipes/recentviews.get.parameters.length" = 2
"paths./recipes/recentviews.get.parameters[0].description" = "Page number starting with 1"
"paths./recipes/recentviews.get.parameters[0].format" = "int32"
"paths./recipes/recentviews.get.parameters[0].in" = "query"
"paths./recipes/recentviews.get.parameters[0].name" = "pg"
"paths./recipes/recentviews.get.parameters[0].required" = false
"paths./recipes/recentviews.get.parameters[0].type" = "integer"
"paths./recipes/recentviews.get.parameters[1].description" = "results per page"
"paths./recipes/recentviews.get.parameters[1].format" = "int32"
"paths./recipes/recentviews.get.parameters[1].in" = "query"
"paths./recipes/recentviews.get.parameters[1].name" = "rpp"
"paths./recipes/recentviews.get.parameters[1].required" = false
"paths./recipes/recentviews.get.parameters[1].type" = "integer"
"paths./recipes/recentviews.get.responses.200.description" = "OK"
"paths./recipes/recentviews.get.responses.200.schema.items.$ref" = "#/definitions/BigOven.Model.RecipeInfoDateTuple2"
"paths./recipes/recentviews.get.responses.200.schema.type" = "array"
"paths./recipes/recentviews.get.summary" = "Get a list of recipes that the authenticated user has most recently viewed"
"paths./recipes/recentviews.get.tags.length" = 1
"paths./recipes/recentviews.get.tags[0]" = "Recipe"
"produces.length" = 4
"produces[0]" = "application/json"
"produces[1]" = "text/json"
"produces[2]" = "application/xml"
"produces[3]" = "text/xml"
"schemes.length" = 1
"schemes[0]" = "https"
"securityDefinitions.api_key.description" = "Pass your api_key in the header (recommended) or as a URL parameter. For the URL parameter, use api_key. For the header, send it as a header value for: X-BigOven-API-Key"
"securityDefinitions.api_key.in" = "header"
"securityDefinitions.api_key.name" = "X-BigOven-API-Key"
"securityDefinitions.api_key.type" = "apiKey"
"securityDefinitions.basic.description" = "Basic HTTP Authentication is used for those endpoint calls where you want to act as a BigOven user -- e.g., to get the list of favorites of a signed-in user, or add items to their grocery list."
"securityDefinitions.basic.type" = "basic"
swagger = "2.0"

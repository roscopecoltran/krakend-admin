{
	"basePath": "/",
	"consumes.length": 1,
	"consumes[0]": "application/json",
	"definitions.APIError.properties.code.description": "Internal error code",
	"definitions.APIError.properties.code.format": "int",
	"definitions.APIError.properties.code.type": "integer",
	"definitions.APIError.properties.error.description": "(deprecated) A message containing a brief description of the error",
	"definitions.APIError.properties.error.type": "string",
	"definitions.APIError.properties.message.description": "A message containing a brief description of the error",
	"definitions.APIError.properties.message.type": "string",
	"definitions.APIError.type": "object",
	"definitions.CrawlRun.properties.extractorId.type": "string",
	"definitions.CrawlRun.properties.failedUrlCount.format": "int32",
	"definitions.CrawlRun.properties.failedUrlCount.type": "integer",
	"definitions.CrawlRun.properties.guid.type": "string",
	"definitions.CrawlRun.properties.rowCount.format": "int32",
	"definitions.CrawlRun.properties.rowCount.type": "integer",
	"definitions.CrawlRun.properties.runtimeConfigId.type": "string",
	"definitions.CrawlRun.properties.startedAt.format": "int64",
	"definitions.CrawlRun.properties.startedAt.type": "integer",
	"definitions.CrawlRun.properties.state.type": "string",
	"definitions.CrawlRun.properties.stoppedAt.format": "int64",
	"definitions.CrawlRun.properties.stoppedAt.type": "integer",
	"definitions.CrawlRun.properties.successUrlCount.format": "int32",
	"definitions.CrawlRun.properties.successUrlCount.type": "integer",
	"definitions.CrawlRun.properties.totalUrlCount.format": "int32",
	"definitions.CrawlRun.properties.totalUrlCount.type": "integer",
	"definitions.CrawlRun.properties.urlListId.type": "string",
	"definitions.CrawlRun.type": "object",
	"definitions.ObjectStoreSearchResult.properties.hits.properties.hits.items.properties._id.type": "string",
	"definitions.ObjectStoreSearchResult.properties.hits.properties.hits.items.properties._score.type": "integer",
	"definitions.ObjectStoreSearchResult.properties.hits.properties.hits.items.properties._type.type": "string",
	"definitions.ObjectStoreSearchResult.properties.hits.properties.hits.items.properties.fields.$ref": "#/definitions/CrawlRun",
	"definitions.ObjectStoreSearchResult.properties.hits.properties.hits.items.type": "object",
	"definitions.ObjectStoreSearchResult.properties.hits.properties.hits.type": "array",
	"definitions.ObjectStoreSearchResult.properties.hits.properties.total.type": "integer",
	"definitions.ObjectStoreSearchResult.properties.hits.type": "object",
	"definitions.ObjectStoreSearchResult.properties.timed_out.type": "boolean",
	"definitions.ObjectStoreSearchResult.properties.took.type": "integer",
	"definitions.ObjectStoreSearchResult.type": "object",
	"definitions.QueryResponse.properties.error.type": "string",
	"definitions.QueryResponse.properties.exceptionType.type": "string",
	"definitions.QueryResponse.properties.extractorData.type": "object",
	"definitions.QueryResponse.properties.pageData.type": "object",
	"definitions.QueryResponse.properties.runtimeConfigId.type": "string",
	"definitions.QueryResponse.properties.sequenceNumber.format": "int32",
	"definitions.QueryResponse.properties.sequenceNumber.type": "integer",
	"definitions.QueryResponse.properties.timestamp.format": "int64",
	"definitions.QueryResponse.properties.timestamp.type": "integer",
	"definitions.QueryResponse.properties.url.type": "string",
	"definitions.QueryResponse.type": "object",
	"definitions.Schedule.properties.extractorId.type": "string",
	"definitions.Schedule.properties.interval.type": "string",
	"definitions.Schedule.properties.intervalData.properties.minutes.type": "string",
	"definitions.Schedule.properties.intervalData.properties.time.type": "string",
	"definitions.Schedule.properties.intervalData.properties.type.type": "string",
	"definitions.Schedule.properties.intervalData.type": "object",
	"definitions.Schedule.properties.nextRunAt.format": "int64",
	"definitions.Schedule.properties.nextRunAt.type": "integer",
	"definitions.Schedule.properties.ownerId.type": "string",
	"definitions.Schedule.properties.startTimestamp.format": "int64",
	"definitions.Schedule.properties.startTimestamp.type": "integer",
	"definitions.Schedule.type": "object",
	"definitions.ScheduleRequest.properties.extractorId.example": "00000000-0000-0000-0000-000000000000",
	"definitions.ScheduleRequest.properties.extractorId.type": "string",
	"definitions.ScheduleRequest.properties.interval.example": "15 * * * *",
	"definitions.ScheduleRequest.properties.interval.type": "string",
	"definitions.ScheduleRequest.properties.startTimestamp.example": 1485448509727,
	"definitions.ScheduleRequest.properties.startTimestamp.format": "int64",
	"definitions.ScheduleRequest.properties.startTimestamp.type": "integer",
	"definitions.ScheduleRequest.required.length": 2,
	"definitions.ScheduleRequest.required[0]": "extractorId",
	"definitions.ScheduleRequest.required[1]": "interval",
	"definitions.ScheduleRequest.type": "object",
	"externalDocs.url": "http://api.docs.import.io/",
	"host": "schedule.import.io",
	"info.title": "import.io",
	"info.version": "1.0",
	"info.x-apisguru-categories.length": 1,
	"info.x-apisguru-categories[0]": "tools",
	"info.x-logo.backgroundColor": "#F6248E",
	"info.x-logo.url": "https://api.apis.guru/v2/cache/logo/http_api.docs.import.io_images_import-io-logo.svg",
	"info.x-origin.length": 1,
	"info.x-origin[0].format": "swagger",
	"info.x-origin[0].url": "http://api.docs.import.io/schedule/swagger.json",
	"info.x-origin[0].version": "2.0",
	"info.x-preferred": true,
	"info.x-providerName": "import.io",
	"info.x-serviceName": "schedule",
	"paths./extractor.get.responses.200.description": "array of crawl run schedules",
	"paths./extractor.get.responses.200.schema.$ref": "#/definitions/Schedule",
	"paths./extractor.get.responses.401.description": "User doesn't have a valid session.",
	"paths./extractor.get.responses.401.schema.$ref": "#/definitions/APIError",
	"paths./extractor.get.responses.404.description": "Unable to find supplied extractor ID.",
	"paths./extractor.get.responses.404.schema.$ref": "#/definitions/APIError",
	"paths./extractor.get.security.length": 1,
	"paths./extractor.get.security[0].api_key.length": 0,
	"paths./extractor.get.summary": "Get the list of schedules for all your extractors",
	"paths./extractor.get.tags.length": 1,
	"paths./extractor.get.tags[0]": "schedule.import.io",
	"paths./extractor.post.parameters.length": 1,
	"paths./extractor.post.parameters[0].description": "Request body with the schema defined on the left. Interval is a cron string.",
	"paths./extractor.post.parameters[0].in": "body",
	"paths./extractor.post.parameters[0].name": "Schedule Request Body",
	"paths./extractor.post.parameters[0].required": true,
	"paths./extractor.post.parameters[0].schema.$ref": "#/definitions/ScheduleRequest",
	"paths./extractor.post.responses.200.description": "crawl run schedule",
	"paths./extractor.post.responses.200.schema.$ref": "#/definitions/Schedule",
	"paths./extractor.post.responses.400.description": "Validation errors on the request input.",
	"paths./extractor.post.responses.400.schema.$ref": "#/definitions/APIError",
	"paths./extractor.post.responses.401.description": "User doesn't own this extractor, or doesn't have a valid session.",
	"paths./extractor.post.responses.401.schema.$ref": "#/definitions/APIError",
	"paths./extractor.post.responses.403.description": "User is not allowed to create schedule for this extractor.",
	"paths./extractor.post.responses.403.schema.$ref": "#/definitions/APIError",
	"paths./extractor.post.responses.404.description": "Unable to find supplied extractor ID.",
	"paths./extractor.post.responses.404.schema.$ref": "#/definitions/APIError",
	"paths./extractor.post.security.length": 1,
	"paths./extractor.post.security[0].api_key.length": 0,
	"paths./extractor.post.summary": "Schedule and extractor to run at a specific time",
	"paths./extractor.post.tags.length": 1,
	"paths./extractor.post.tags[0]": "schedule.import.io",
	"paths./extractor/{extractorId}/.delete.parameters.length": 1,
	"paths./extractor/{extractorId}/.delete.parameters[0].description": "the id of the extractor with a schedule",
	"paths./extractor/{extractorId}/.delete.parameters[0].in": "path",
	"paths./extractor/{extractorId}/.delete.parameters[0].name": "extractorId",
	"paths./extractor/{extractorId}/.delete.parameters[0].required": true,
	"paths./extractor/{extractorId}/.delete.parameters[0].type": "string",
	"paths./extractor/{extractorId}/.delete.responses.200.description": "Empty object",
	"paths./extractor/{extractorId}/.delete.responses.401.description": "User doesn't have a valid session.",
	"paths./extractor/{extractorId}/.delete.responses.401.schema.$ref": "#/definitions/APIError",
	"paths./extractor/{extractorId}/.delete.responses.403.description": "User is not allowed to delete this schedule.",
	"paths./extractor/{extractorId}/.delete.responses.403.schema.$ref": "#/definitions/APIError",
	"paths./extractor/{extractorId}/.delete.responses.404.description": "Unable to find supplied extractor ID.",
	"paths./extractor/{extractorId}/.delete.responses.404.schema.$ref": "#/definitions/APIError",
	"paths./extractor/{extractorId}/.delete.security.length": 1,
	"paths./extractor/{extractorId}/.delete.security[0].api_key.length": 0,
	"paths./extractor/{extractorId}/.delete.summary": "Delete an existing schedule",
	"paths./extractor/{extractorId}/.delete.tags.length": 1,
	"paths./extractor/{extractorId}/.delete.tags[0]": "schedule.import.io",
	"paths./extractor/{extractorId}/.get.parameters.length": 1,
	"paths./extractor/{extractorId}/.get.parameters[0].description": "the id of the extractor with a schedule",
	"paths./extractor/{extractorId}/.get.parameters[0].in": "path",
	"paths./extractor/{extractorId}/.get.parameters[0].name": "extractorId",
	"paths./extractor/{extractorId}/.get.parameters[0].required": true,
	"paths./extractor/{extractorId}/.get.parameters[0].type": "string",
	"paths./extractor/{extractorId}/.get.responses.200.description": "crawl run schedule",
	"paths./extractor/{extractorId}/.get.responses.200.schema.$ref": "#/definitions/Schedule",
	"paths./extractor/{extractorId}/.get.security.length": 1,
	"paths./extractor/{extractorId}/.get.security[0].api_key.length": 0,
	"paths./extractor/{extractorId}/.get.summary": "Get the schedule of a particular extractor",
	"paths./extractor/{extractorId}/.get.tags.length": 1,
	"paths./extractor/{extractorId}/.get.tags[0]": "schedule.import.io",
	"produces.length": 1,
	"produces[0]": "application/json;charset=UTF-8",
	"schemes.length": 1,
	"schemes[0]": "https",
	"securityDefinitions.api_key.in": "query",
	"securityDefinitions.api_key.name": "_apikey",
	"securityDefinitions.api_key.type": "apiKey",
	"swagger": "2.0",
	"tags.length": 12,
	"tags[0].description": "APIs that exist on the run.import.io endpoint",
	"tags[0].name": "run",
	"tags[10].name": "schedule.import.io",
	"tags[11].name": "store.import.io",
	"tags[1].description": "APIs that exist on the data.import.io endpoint",
	"tags[1].name": "data",
	"tags[2].description": "APIs that exist on the extraction.import.io endpoint",
	"tags[2].name": "extraction",
	"tags[3].description": "APIs that exist on the rss.import.io endpoint",
	"tags[3].name": "rss",
	"tags[4].description": "APIs that exist on the store.import.io endpoint",
	"tags[4].name": "store",
	"tags[5].description": "APIs that exist on the schedule.import.io endpoint",
	"tags[5].name": "schedule",
	"tags[6].name": "run.import.io",
	"tags[7].name": "data.import.io",
	"tags[8].name": "rss.import.io",
	"tags[9].name": "extraction.import.io"
}
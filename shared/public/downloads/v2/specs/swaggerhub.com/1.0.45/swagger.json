{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.swaggerhub.com",
  "info": {
    "contact": {
      "email": "info@swaggerhub.com",
      "name": "SwaggerHub",
      "url": "http://swaggerhub.com"
    },
    "description": "# Introduction\nThis is the registry API for SwaggerHub. It allows you to access, manage, and update your APIs and Domains in SwaggerHub bypassing the Web application.\n\n# Authentication\nUse your personal API Key: you may find it by visiting the   [API Key page](https://app.swaggerhub.com/settings/apiKey).\n",
    "title": "SwaggerHub Registry",
    "version": "1.0.45",
    "x-apisguru-categories": [
      "developer_tools"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_725794797592690688_r20oBBuu_400x400.jpg"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://api.swaggerhub.com/apis/swagger-hub/registry-api/1.0.45",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "swaggerhub.com"
  },
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "TokenSecured": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "tags": [
    {
      "description": "Operations for APIs",
      "name": "APIs"
    },
    {
      "description": "Operations for Domains",
      "name": "Domains"
    }
  ],
  "paths": {
    "/apis": {
      "get": {
        "description": "",
        "operationId": "searchApis",
        "parameters": [
          {
            "description": "free text query to match",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": "ALL",
            "description": "matches against published state of the spec\n* UNPUBLISHED - spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version ready for consuming from client applications\n* ANY - either PUBLISHED or UNPUBLISHED\n",
            "enum": [
              "ALL",
              "PUBLISHED",
              "UNPUBLISHED"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "matches against tags associated with an API",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tag",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "page to return",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "number of results per page",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "NAME",
            "description": "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n* OWNER\n",
            "enum": [
              "NAME",
              "UPDATED",
              "CREATED",
              "OWNER"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "sort order",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "303": {
            "description": "303 response",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves a list of currently defined APIs in APIs.json format.",
        "tags": [
          "APIs"
        ]
      }
    },
    "/apis/{owner}": {
      "get": {
        "description": "",
        "operationId": "getOwnerApis",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "page to return",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "number of results per page",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "NAME",
            "description": "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n* OWNER\n",
            "enum": [
              "NAME",
              "UPDATED",
              "CREATED",
              "OWNER"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "sort order",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "a list of APIs in APIs.json format",
            "schema": {
              "$ref": "#/definitions/ApisJson"
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves an APIs.json listing of all APIs defined for this owner",
        "tags": [
          "APIs"
        ]
      }
    },
    "/apis/{owner}/{api}": {
      "delete": {
        "description": "",
        "operationId": "deleteApi",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the API was successfully deleted"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "specified API not found"
          },
          "409": {
            "description": "the API has published versions and can not be deleted"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Deletes the specified API",
        "tags": [
          "APIs"
        ]
      },
      "get": {
        "operationId": "getApiVersions",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "a list of API versions in APIs.json format",
            "schema": {
              "$ref": "#/definitions/ApisJson"
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves an APIs.json listing for all API versions for this owner and API",
        "tags": [
          "APIs"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "description": "Saves the provided Swagger definition; the owner must match the token owner. The version will be extracted from the Swagger definitions itself.",
        "operationId": "saveDefinition",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Defines whether the API has to be private",
            "in": "query",
            "name": "isPrivate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "api version",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "string"
          },
          {
            "description": "the Swagger definition of this API",
            "in": "body",
            "name": "definition",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "force update",
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "the API was successfully saved"
          },
          "201": {
            "description": "new API was successfully saved"
          },
          "205": {
            "description": "the API was successfully saved and should be reloaded"
          },
          "400": {
            "description": "the Swagger definition was invalid"
          },
          "403": {
            "description": "maximum number of APIs reached"
          },
          "409": {
            "description": "can not overwrite a published API version"
          },
          "415": {
            "description": "invalid content type"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Saves the provided Swagger definition",
        "tags": [
          "APIs"
        ]
      }
    },
    "/apis/{owner}/{api}/.collaboration": {
      "delete": {
        "operationId": "deleteCollaboration",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successfully deleted a collaboration"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Deletes API's collaboration",
        "tags": [
          "APIs"
        ]
      },
      "get": {
        "operationId": "getCollaboration",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "expandTeams",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "the existing collaboration on an API",
            "schema": {
              "$ref": "#/definitions/Collaboration"
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Gets API's collaboration",
        "tags": [
          "APIs"
        ]
      },
      "put": {
        "operationId": "updateCollaboration",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Collaboration"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successfully updated API collaboration"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Updates API's collaboration",
        "tags": [
          "APIs"
        ]
      }
    },
    "/apis/{owner}/{api}/{version}": {
      "delete": {
        "description": "",
        "operationId": "deleteApiVersion",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          },
          {
            "description": "version identifier",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the API version was successfully deleted"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "specified API not found"
          },
          "409": {
            "description": "the API version is published and can not be deleted or it is the only version of this API"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Deletes a particular version of the specified API",
        "tags": [
          "APIs"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getDefinition",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          },
          {
            "description": "version identifier",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "the Swagger API in requested format",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "404": {
            "description": "specified API not found"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves the Swagger definition for the specified API and version",
        "tags": [
          "APIs"
        ]
      }
    },
    "/apis/{owner}/{api}/{version}/swagger.json": {
      "get": {
        "description": "",
        "operationId": "getJsonDefinition",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          },
          {
            "description": "version identifier",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the Swagger API in JSON format",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "404": {
            "description": "specified API not found"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves the Swagger definition for the specified API and version in JSON format",
        "tags": [
          "APIs"
        ]
      }
    },
    "/apis/{owner}/{api}/{version}/swagger.yaml": {
      "get": {
        "description": "",
        "operationId": "getYamlDefinition",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "API identifier",
            "in": "path",
            "name": "api",
            "required": true,
            "type": "string"
          },
          {
            "description": "version identifier",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "the Swagger API in YAML format",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "404": {
            "description": "specified API not found"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves the Swagger definition for the specified API and version in YAML format",
        "tags": [
          "APIs"
        ]
      }
    },
    "/domains": {
      "get": {
        "operationId": "searchDomains",
        "parameters": [
          {
            "description": "free text query to match",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": "ALL",
            "description": "matches against published state of the spec\n* UNPUBLISHED - spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version ready for consuming from client applications\n* ANY - either PUBLISHED or UNPUBLISHED\n",
            "enum": [
              "ALL",
              "PUBLISHED",
              "UNPUBLISHED"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "matches against tags associated with a domain",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tag",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "page to return",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "number of results per page",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "NAME",
            "description": "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n* OWNER\n",
            "enum": [
              "NAME",
              "UPDATED",
              "CREATED",
              "OWNER"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "sort order",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "303": {
            "description": "303 response",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves a list of currently defined domains in APIs.json format",
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{owner}": {
      "get": {
        "operationId": "getOwnerDomains",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "page to return",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "number of results per page",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "NAME",
            "description": "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n* OWNER\n",
            "enum": [
              "NAME",
              "UPDATED",
              "CREATED",
              "OWNER"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "sort order",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "a list of domains in APIs.json format",
            "schema": {
              "$ref": "#/definitions/ApisJson"
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves an APIs.json listing of all domains defined for this owner",
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{owner}/{domain}": {
      "delete": {
        "operationId": "deleteDomain",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "domain identifier",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "force update",
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "the domain was successfully deleted"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "specified domain not found"
          },
          "409": {
            "description": "the domain has published versions and can not be deleted"
          },
          "424": {
            "description": "can't delete because there are some dependencies for domain",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Deletes the specified domain",
        "tags": [
          "Domains"
        ]
      },
      "get": {
        "operationId": "getDomainVersions",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "domain identifier",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "a list of domain versions in APIs.json format",
            "schema": {
              "$ref": "#/definitions/ApisJson"
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves an APIs.json listing for all domain versions for this owner and domain",
        "tags": [
          "Domains"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "operationId": "saveDomainDefinition",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "domain identifier",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Defines whether the API has to be private",
            "in": "query",
            "name": "isPrivate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "domain version",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "the Swagger definition of this Domain",
            "in": "body",
            "name": "definition",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "force update",
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "the domain was successfully saved"
          },
          "201": {
            "description": "new domain was successfully saved"
          },
          "205": {
            "description": "the domain was successfully saved and should be reloaded"
          },
          "403": {
            "description": "maximum number of domains reached"
          },
          "409": {
            "description": "can not overwrite a published domain version"
          },
          "415": {
            "description": "invalid content type"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Saves the provided Swagger definition of a domain",
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{owner}/{domain}/{version}": {
      "delete": {
        "operationId": "deleteDomainVersion",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "domain identifier",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "version identifier",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "force update",
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "the domain version was successfully deleted"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "specified domain not found"
          },
          "409": {
            "description": "the domain version is published and can not be deleted or it is the only version of this API"
          },
          "424": {
            "description": "can't delete because there are some dependencies for domain",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Deletes a particular version of the specified domain",
        "tags": [
          "Domains"
        ]
      },
      "get": {
        "operationId": "getDomainDefinition",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "domain identifier",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "version identifier",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "the Swagger domain in requested format",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "404": {
            "description": "specified domain not found"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves the Swagger definition for the specified domain and version",
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{owner}/{domain}/{version}/domain.json": {
      "get": {
        "operationId": "getDomainJsonDefinition",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "domain identifier",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "version identifier",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "definition in JSON format",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "404": {
            "description": "specified domain not found"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves the definition for the specified domain and version in JSON format",
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{owner}/{domain}/{version}/domain.yaml": {
      "get": {
        "operationId": "getDomainYamlDefinition",
        "parameters": [
          {
            "description": "API or Domaion owner identifier",
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "domain identifier",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "version identifier",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "definition in YAML format",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "404": {
            "description": "specified domain not found"
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves the definition for the specified domain and version in YAML format",
        "tags": [
          "Domains"
        ]
      }
    },
    "/specs": {
      "get": {
        "description": "",
        "operationId": "searchApisAndDomains",
        "parameters": [
          {
            "default": "ANY",
            "description": "Type of Swagger specs to search\n* API - APIs only\n* DOMAIN - Domains only\n* ANY - Both APIs and Domains\n",
            "enum": [
              "API",
              "DOMAIN",
              "ANY"
            ],
            "in": "query",
            "name": "specType",
            "required": false,
            "type": "string"
          },
          {
            "default": "ANY",
            "description": "The visibility of a spec in SwaggerHub\n* PUBLIC - can be viewed by anyone\n* PRIVATE - can only be viewed by you or your Org and those that you are collaborating with or have shared it with\n* ANY - either PUBLIC or PRIVATE\n",
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "ANY"
            ],
            "in": "query",
            "name": "visibility",
            "required": false,
            "type": "string"
          },
          {
            "default": "ALL",
            "description": "matches against published state of the spec\n* UNPUBLISHED - spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version ready for consuming from client applications\n* ANY - either PUBLISHED or UNPUBLISHED\n",
            "enum": [
              "ALL",
              "PUBLISHED",
              "UNPUBLISHED"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "API or Domaion owner identifier. Can be username or Organization name",
            "in": "query",
            "name": "owner",
            "required": false,
            "type": "string"
          },
          {
            "description": "free text query to match",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "page to return",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "number of results per page",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "NAME",
            "description": "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n* OWNER\n",
            "enum": [
              "NAME",
              "UPDATED",
              "CREATED",
              "OWNER"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "sort order",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "a list of APIs and Domains in APIs.json format",
            "schema": {
              "$ref": "#/definitions/ApisJson"
            }
          }
        },
        "security": [
          {
            "TokenSecured": []
          }
        ],
        "summary": "Retrieves a list of currently defined APIs and Domains in APIs.json format",
        "tags": [
          "APIs",
          "Domains"
        ]
      }
    }
  },
  "definitions": {
    "AccessToken": {
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApiMetadata": {
      "properties": {
        "categories": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "defaultVersion": {
          "type": "string"
        },
        "links": {
          "items": {
            "$ref": "#/definitions/ApiMetadataLink"
          },
          "type": "array",
          "uniqueItems": true
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "categories",
        "tags"
      ],
      "type": "object"
    },
    "ApiMetadataLink": {
      "properties": {
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "url"
      ],
      "type": "object"
    },
    "ApisJson": {
      "properties": {
        "apis": {
          "items": {
            "$ref": "#/definitions/ApisJsonApi"
          },
          "type": "array"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "specificationVersion": {
          "type": "string"
        },
        "totalCount": {
          "format": "int64",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApisJsonApi": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/ApisJsonProperty"
          },
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "ApisJsonProperty": {
      "description": "an API property",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApisJsonUrlProperty": {
      "allOf": [
        {
          "$ref": "#/definitions/ApisJsonProperty"
        },
        {
          "description": "an API property where the value is a URL",
          "properties": {
            "url": {
              "format": "url",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "ApisJsonValueProperty": {
      "allOf": [
        {
          "$ref": "#/definitions/ApisJsonProperty"
        },
        {
          "description": "an API property with a string value",
          "properties": {
            "value": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "ClosableComment": {
      "allOf": [
        {
          "$ref": "#/definitions/Comment"
        },
        {
          "properties": {
            "position": {
              "format": "int32",
              "type": "integer"
            },
            "replies": {
              "items": {
                "$ref": "#/definitions/Comment"
              },
              "type": "array"
            },
            "status": {
              "enum": [
                "OPEN",
                "RESOLVED"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "ClosableCommentPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/CommentPatch"
        },
        {
          "properties": {
            "position": {
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "CodegenLanguage": {
      "properties": {
        "customValues": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "visible": {
          "default": true,
          "type": "boolean"
        }
      },
      "required": [
        "visible"
      ],
      "type": "object"
    },
    "CodegenSettings": {
      "properties": {
        "client": {
          "additionalProperties": {
            "$ref": "#/definitions/CodegenLanguage"
          },
          "type": "object"
        },
        "server": {
          "additionalProperties": {
            "$ref": "#/definitions/CodegenLanguage"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Collaboration": {
      "properties": {
        "hint": {
          "$ref": "#/definitions/CollaborationHint"
        },
        "members": {
          "items": {
            "$ref": "#/definitions/CollaborationMembership"
          },
          "type": "array"
        },
        "owner": {
          "readOnly": true,
          "type": "string"
        },
        "owners": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pendingMembers": {
          "items": {
            "$ref": "#/definitions/CollaborationMembership"
          },
          "type": "array"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/CollaborationTeamMembership"
          },
          "type": "array"
        }
      },
      "required": [
        "hint"
      ],
      "type": "object"
    },
    "CollaborationHint": {
      "properties": {
        "type": {
          "description": "type identifier of the managed entity",
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "CollaborationMember": {
      "properties": {
        "name": {
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "title": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CollaborationMembership": {
      "allOf": [
        {
          "$ref": "#/definitions/CollaborationMember"
        },
        {
          "properties": {
            "blocked": {
              "readOnly": true,
              "type": "boolean"
            },
            "donotdisturb": {
              "readOnly": true,
              "type": "boolean"
            },
            "roles": {
              "items": {
                "enum": [
                  "EDIT",
                  "COMMENT",
                  "VIEW"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "roles"
          ],
          "type": "object"
        }
      ]
    },
    "CollaborationMembershipList": {
      "properties": {
        "hint": {
          "$ref": "#/definitions/CollaborationHint"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/CollaborationMembership"
          },
          "type": "array"
        }
      },
      "required": [
        "hint"
      ],
      "type": "object"
    },
    "CollaborationRoles": {
      "properties": {
        "api": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "roles": {
          "items": {
            "enum": [
              "EDIT",
              "COMMENT",
              "VIEW"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "CollaborationTeamMembership": {
      "allOf": [
        {
          "$ref": "#/definitions/CollaborationMembership"
        },
        {
          "properties": {
            "members": {
              "items": {
                "$ref": "#/definitions/CollaborationMember"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "Comment": {
      "properties": {
        "body": {
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "required": [
        "body",
        "created",
        "id",
        "user"
      ],
      "type": "object"
    },
    "CommentPatch": {
      "properties": {
        "body": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommentsBatch": {
      "properties": {
        "addComment": {
          "items": {
            "$ref": "#/definitions/NewComment"
          },
          "type": "array"
        },
        "addReply": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/NewReply"
            },
            "type": "array"
          },
          "type": "object"
        },
        "deleteComment": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "deleteReply": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": "object"
        },
        "updateComment": {
          "additionalProperties": {
            "$ref": "#/definitions/ClosableCommentPatch"
          },
          "type": "object"
        },
        "updateReply": {
          "additionalProperties": {
            "additionalProperties": {
              "$ref": "#/definitions/CommentPatch"
            },
            "type": "object"
          },
          "type": "object"
        },
        "updateStatus": {
          "additionalProperties": {
            "enum": [
              "OPEN",
              "RESOLVED"
            ],
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Comparison": {
      "description": "a list of differences between two APIs",
      "items": {
        "$ref": "#/definitions/ComparisonPart"
      },
      "properties": {},
      "type": "array"
    },
    "ComparisonDetail": {
      "description": "details for one side of a ComparisonPart",
      "properties": {
        "content": {
          "description": "the content of the API definition between `startPosition` and `endPosition`",
          "type": "string"
        },
        "endPosition": {
          "$ref": "#/definitions/Position"
        },
        "path": {
          "description": "the path to the object (notation similar to JSONPath)",
          "type": "string"
        },
        "startPosition": {
          "$ref": "#/definitions/Position"
        }
      },
      "required": [
        "content",
        "endPosition",
        "startPosition"
      ],
      "type": "object"
    },
    "ComparisonPart": {
      "description": "a part of the API that was (or wasn't) changed",
      "properties": {
        "base": {
          "$ref": "#/definitions/ComparisonDetail"
        },
        "other": {
          "$ref": "#/definitions/ComparisonDetail"
        },
        "type": {
          "description": "the type of change that this part describes\n* UNMODIFIED - this part is the same in both APIs. Only available for FULL compare.\n* INSERTED - this is present in `other` but missing in `base`. `base` will not be present.\n* DELETED - this is present in `base` but missing in `other`. `other` will not be present.\n* CHANGED - this has been changed between `base` and `other`. Both `base` and `other` present.\n",
          "enum": [
            "UNMODIFIED",
            "INSERTED",
            "DELETED",
            "CHANGED"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "EntryId": {
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GitHubExportSettings": {
      "properties": {
        "branch": {
          "type": "string"
        },
        "notificationEmail": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "yamlPath": {
          "type": "string"
        }
      },
      "required": [
        "branch",
        "notificationEmail",
        "owner",
        "repository",
        "token"
      ],
      "type": "object"
    },
    "LifecycleSettings": {
      "properties": {
        "published": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MissingSpecMembers": {
      "properties": {
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "spec": {
          "$ref": "#/definitions/SimpleSpec"
        }
      },
      "type": "object"
    },
    "NewComment": {
      "properties": {
        "body": {
          "type": "string"
        },
        "position": {
          "format": "int32",
          "type": "integer"
        },
        "replies": {
          "items": {
            "$ref": "#/definitions/NewReply"
          },
          "type": "array"
        }
      },
      "required": [
        "body",
        "position"
      ],
      "type": "object"
    },
    "NewReply": {
      "properties": {
        "body": {
          "type": "string"
        }
      },
      "required": [
        "body"
      ],
      "type": "object"
    },
    "NotCollaboratorProjectMembers": {
      "properties": {
        "missingApisMembers": {
          "items": {
            "$ref": "#/definitions/MissingSpecMembers"
          },
          "type": "array"
        },
        "missingApisTeams": {
          "items": {
            "$ref": "#/definitions/MissingSpecMembers"
          },
          "type": "array"
        },
        "missingDomainsMembers": {
          "items": {
            "$ref": "#/definitions/MissingSpecMembers"
          },
          "type": "array"
        },
        "missingDomainsTeams": {
          "items": {
            "$ref": "#/definitions/MissingSpecMembers"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Page": {
      "properties": {
        "items": {
          "items": {
            "properties": {},
            "type": "object"
          },
          "type": "array"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PluginConfiguration": {
      "properties": {
        "configuration": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "definitionId": {
          "type": "string"
        },
        "draft": {
          "type": "boolean"
        },
        "id": {
          "format": "UUID",
          "type": "string"
        },
        "lifecycles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "required": [
        "definitionId",
        "lifecycles",
        "name",
        "objectId",
        "ownerName",
        "path"
      ],
      "type": "object"
    },
    "PluginDefinition": {
      "properties": {
        "configurationSchema": {
          "properties": {},
          "type": "object"
        },
        "createdBy": {
          "type": "string"
        },
        "createdOn": {
          "format": "date-time",
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "implementingClass": {
          "type": "string"
        },
        "limit": {
          "description": "count of allowed configurations",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "configurationSchema",
        "createdBy",
        "createdOn",
        "enabled",
        "implementingClass",
        "name",
        "version"
      ],
      "type": "object"
    },
    "Position": {
      "description": "a position in a text document",
      "properties": {
        "column": {
          "type": "integer"
        },
        "line": {
          "type": "integer"
        }
      },
      "required": [
        "column",
        "line"
      ],
      "type": "object"
    },
    "Private": {
      "properties": {
        "private": {
          "type": "boolean"
        }
      },
      "required": [
        "private"
      ],
      "type": "object"
    },
    "ProjectEntry": {
      "properties": {
        "apis": {
          "items": {
            "$ref": "#/definitions/EntryId"
          },
          "type": "array"
        },
        "domains": {
          "items": {
            "$ref": "#/definitions/EntryId"
          },
          "type": "array"
        },
        "groupId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        }
      },
      "required": [
        "groupId",
        "name",
        "projectId"
      ],
      "type": "object"
    },
    "ProjectMember": {
      "properties": {
        "name": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "default": "USER",
          "enum": [
            "USER",
            "TEAM"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "roles",
        "type"
      ],
      "type": "object"
    },
    "ProjectMemberList": {
      "properties": {
        "members": {
          "items": {
            "$ref": "#/definitions/ProjectMember"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProjectsJson": {
      "properties": {
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "projects": {
          "items": {
            "$ref": "#/definitions/ProjectEntry"
          },
          "type": "array"
        },
        "totalCount": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SimpleSpec": {
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SpecId": {
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "owner",
        "version"
      ],
      "type": "object"
    },
    "SystemPluginConfiguration": {
      "properties": {
        "configuration": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "id": {
          "format": "UUID",
          "type": "string"
        },
        "implementingClass": {
          "type": "string"
        },
        "lifecycles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "implementingClass",
        "lifecycles",
        "version"
      ],
      "type": "object"
    },
    "Template": {
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "title"
      ],
      "type": "object"
    },
    "TemplateCatalog": {
      "properties": {
        "default": {
          "$ref": "#/definitions/Template"
        },
        "templates": {
          "items": {
            "$ref": "#/definitions/Template"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserCredentials": {
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "VersionMetadata": {
      "properties": {
        "codegenSettings": {
          "$ref": "#/definitions/CodegenSettings"
        }
      },
      "type": "object"
    }
  }
}

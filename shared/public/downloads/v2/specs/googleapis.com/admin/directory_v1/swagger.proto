syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package admindirectory;

message PostAdminDirectory_v1ChannelsStopRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    Channel resource = 7;
    string userIp = 8;
}

message GetCustomerCustomerIdDevicesChromeosRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of results to return. Default is 100
    int32 maxResults = 5;
    string oauth_token = 6;
    // Column to use for sorting results
    enum GetCustomerCustomerIdDevicesChromeosRequest_OrderBy {
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_ORDERBY_ANNOTATEDLOCATION = 0;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_ORDERBY_ANNOTATEDUSER = 1;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_ORDERBY_LASTSYNC = 2;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_ORDERBY_NOTES = 3;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_ORDERBY_SERIALNUMBER = 4;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_ORDERBY_STATUS = 5;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_ORDERBY_SUPPORTENDDATE = 6;
    }
    GetCustomerCustomerIdDevicesChromeosRequest_OrderBy orderBy = 7;
    // Full path of the organization unit or its Id
    string orgUnitPath = 8;
    // Token to specify next page in the list
    string pageToken = 9;
    boolean prettyPrint = 10;
    // Restrict information returned to a set of selected fields.
    enum GetCustomerCustomerIdDevicesChromeosRequest_Projection {
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_PROJECTION_BASIC = 0;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_PROJECTION_FULL = 1;
    }
    GetCustomerCustomerIdDevicesChromeosRequest_Projection projection = 11;
    // Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?hl=en&answer=1698333
    string query = 12;
    string quotaUser = 13;
    // Whether to return results in ascending or descending order. Only of use when orderBy is also used
    enum GetCustomerCustomerIdDevicesChromeosRequest_SortOrder {
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_SORTORDER_ASCENDING = 0;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetCustomerCustomerIdDevicesChromeosRequest_SortOrder sortOrder = 14;
    string userIp = 15;
}

message PostCustomerCustomerIdDevicesChromeosMoveDevicesToOuRequest {
    alt alt = 1;
    ChromeOsMoveDevicesToOu body = 2;
    // Immutable ID of the G Suite account
    string customerId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // Full path of the target organization unit or its Id
    string orgUnitPath = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetCustomerCustomerIdDevicesChromeosDeviceIdRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    // Immutable ID of Chrome OS Device
    string deviceId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Restrict information returned to a set of selected fields.
    enum GetCustomerCustomerIdDevicesChromeosDeviceIdRequest_Projection {
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSDEVICEIDREQUEST_PROJECTION_BASIC = 0;
        GETCUSTOMERCUSTOMERIDDEVICESCHROMEOSDEVICEIDREQUEST_PROJECTION_FULL = 1;
    }
    GetCustomerCustomerIdDevicesChromeosDeviceIdRequest_Projection projection = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutCustomerCustomerIdDevicesChromeosDeviceIdRequest {
    alt alt = 1;
    ChromeOsDevice body = 2;
    // Immutable ID of the G Suite account
    string customerId = 3;
    // Immutable ID of Chrome OS Device
    string deviceId = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // Restrict information returned to a set of selected fields.
    enum PutCustomerCustomerIdDevicesChromeosDeviceIdRequest_Projection {
        PUTCUSTOMERCUSTOMERIDDEVICESCHROMEOSDEVICEIDREQUEST_PROJECTION_BASIC = 0;
        PUTCUSTOMERCUSTOMERIDDEVICESCHROMEOSDEVICEIDREQUEST_PROJECTION_FULL = 1;
    }
    PutCustomerCustomerIdDevicesChromeosDeviceIdRequest_Projection projection = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostCustomerCustomerIdDevicesChromeosResourceIdActionRequest {
    alt alt = 1;
    ChromeOsDeviceAction body = 2;
    // Immutable ID of the G Suite account
    string customerId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Immutable ID of Chrome OS Device
    string resourceId = 9;
    string userIp = 10;
}

message GetCustomerCustomerIdDevicesMobileRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of results to return. Default is 100
    int32 maxResults = 5;
    string oauth_token = 6;
    // Column to use for sorting results
    enum GetCustomerCustomerIdDevicesMobileRequest_OrderBy {
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_ORDERBY_DEVICEID = 0;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_ORDERBY_EMAIL = 1;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_ORDERBY_LASTSYNC = 2;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_ORDERBY_MODEL = 3;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_ORDERBY_NAME = 4;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_ORDERBY_OS = 5;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_ORDERBY_STATUS = 6;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_ORDERBY_TYPE = 7;
    }
    GetCustomerCustomerIdDevicesMobileRequest_OrderBy orderBy = 7;
    // Token to specify next page in the list
    string pageToken = 8;
    boolean prettyPrint = 9;
    // Restrict information returned to a set of selected fields.
    enum GetCustomerCustomerIdDevicesMobileRequest_Projection {
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_PROJECTION_BASIC = 0;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_PROJECTION_FULL = 1;
    }
    GetCustomerCustomerIdDevicesMobileRequest_Projection projection = 10;
    // Search string in the format given at http://support.google.com/a/bin/answer.py?hl=en&answer=1408863#search
    string query = 11;
    string quotaUser = 12;
    // Whether to return results in ascending or descending order. Only of use when orderBy is also used
    enum GetCustomerCustomerIdDevicesMobileRequest_SortOrder {
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_SORTORDER_ASCENDING = 0;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILEREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetCustomerCustomerIdDevicesMobileRequest_SortOrder sortOrder = 13;
    string userIp = 14;
}

message GetCustomerCustomerIdDevicesMobileResourceIdRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Restrict information returned to a set of selected fields.
    enum GetCustomerCustomerIdDevicesMobileResourceIdRequest_Projection {
        GETCUSTOMERCUSTOMERIDDEVICESMOBILERESOURCEIDREQUEST_PROJECTION_BASIC = 0;
        GETCUSTOMERCUSTOMERIDDEVICESMOBILERESOURCEIDREQUEST_PROJECTION_FULL = 1;
    }
    GetCustomerCustomerIdDevicesMobileResourceIdRequest_Projection projection = 7;
    string quotaUser = 8;
    // Immutable ID of Mobile Device
    string resourceId = 9;
    string userIp = 10;
}

message DeleteCustomerCustomerIdDevicesMobileResourceIdRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Immutable ID of Mobile Device
    string resourceId = 8;
    string userIp = 9;
}

message PostCustomerCustomerIdDevicesMobileResourceIdActionRequest {
    alt alt = 1;
    MobileDeviceAction body = 2;
    // Immutable ID of the G Suite account
    string customerId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Immutable ID of Mobile Device
    string resourceId = 9;
    string userIp = 10;
}

message GetCustomerCustomerIdOrgunitsRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // the URL-encoded organization unit's path or its Id
    string orgUnitPath = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Whether to return all sub-organizations or just immediate children
    enum GetCustomerCustomerIdOrgunitsRequest_Type {
        GETCUSTOMERCUSTOMERIDORGUNITSREQUEST_TYPE_ALL = 0;
        GETCUSTOMERCUSTOMERIDORGUNITSREQUEST_TYPE_CHILDREN = 1;
    }
    GetCustomerCustomerIdOrgunitsRequest_Type type = 9;
    string userIp = 10;
}

message PostCustomerCustomerIdOrgunitsRequest {
    alt alt = 1;
    OrgUnit body = 2;
    // Immutable ID of the G Suite account
    string customerId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerIdOrgunitsOrgUnitPathRequest {
    alt alt = 1;
    // Immutable id of the Google Apps account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Full path of the organization unit or its Id
    string orgUnitPath = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutCustomerCustomerIdOrgunitsOrgUnitPathRequest {
    alt alt = 1;
    OrgUnit body = 2;
    // Immutable id of the Google Apps account
    string customerId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // Full path of the organization unit or its Id
    string orgUnitPath = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteCustomerCustomerIdOrgunitsOrgUnitPathRequest {
    alt alt = 1;
    // Immutable id of the Google Apps account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Full path of the organization unit or its Id
    string orgUnitPath = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerIdSchemasRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostCustomerCustomerIdSchemasRequest {
    alt alt = 1;
    Schema body = 2;
    // Immutable ID of the G Suite account
    string customerId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerIdSchemasSchemaKeyRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Name or immutable Id of the schema
    string schemaKey = 8;
    string userIp = 9;
}

message PutCustomerCustomerIdSchemasSchemaKeyRequest {
    alt alt = 1;
    Schema body = 2;
    // Immutable ID of the G Suite account
    string customerId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Name or immutable Id of the schema.
    string schemaKey = 9;
    string userIp = 10;
}

message DeleteCustomerCustomerIdSchemasSchemaKeyRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account
    string customerId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Name or immutable Id of the schema
    string schemaKey = 8;
    string userIp = 9;
}

message GetCustomerCustomerDomainaliasesRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Name of the parent domain for which domain aliases are to be fetched.
    string parentDomainName = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostCustomerCustomerDomainaliasesRequest {
    alt alt = 1;
    DomainAlias body = 2;
    // Immutable ID of the G Suite account.
    string customer = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerDomainaliasesDomainAliasNameRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    // Name of domain alias to be retrieved.
    string domainAliasName = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteCustomerCustomerDomainaliasesDomainAliasNameRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    // Name of domain alias to be retrieved.
    string domainAliasName = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerDomainsRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostCustomerCustomerDomainsRequest {
    alt alt = 1;
    Domains body = 2;
    // Immutable ID of the G Suite account.
    string customer = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerDomainsDomainNameRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    // Name of domain to be retrieved
    string domainName = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteCustomerCustomerDomainsDomainNameRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    // Name of domain to be deleted
    string domainName = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerNotificationsRequest {
    alt alt = 1;
    // The unique ID for the customer's G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    // The ISO 639-1 code of the language notifications are returned in. The default is English (en).
    string language = 5;
    // Maximum number of notifications to return per page. The default is 100.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token to specify the page of results to retrieve.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetCustomerCustomerNotificationsNotificationIdRequest {
    alt alt = 1;
    // The unique ID for the customer's G Suite account. The customerId is also returned as part of the Users resource.
    string customer = 2;
    string fields = 3;
    string key = 4;
    // The unique ID of the notification.
    string notificationId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutCustomerCustomerNotificationsNotificationIdRequest {
    alt alt = 1;
    Notification body = 2;
    // The unique ID for the customer's G Suite account.
    string customer = 3;
    string fields = 4;
    string key = 5;
    // The unique ID of the notification.
    string notificationId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteCustomerCustomerNotificationsNotificationIdRequest {
    alt alt = 1;
    // The unique ID for the customer's G Suite account. The customerId is also returned as part of the Users resource.
    string customer = 2;
    string fields = 3;
    string key = 4;
    // The unique ID of the notification.
    string notificationId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerResourcesCalendarsRequest {
    alt alt = 1;
    // The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.
    string customer = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Token to specify the next page in the list.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostCustomerCustomerResourcesCalendarsRequest {
    alt alt = 1;
    CalendarResource body = 2;
    // The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.
    string customer = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerResourcesCalendarsCalendarResourceIdRequest {
    alt alt = 1;
    // The unique ID of the calendar resource to retrieve.
    string calendarResourceId = 2;
    // The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.
    string customer = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutCustomerCustomerResourcesCalendarsCalendarResourceIdRequest {
    alt alt = 1;
    CalendarResource body = 2;
    // The unique ID of the calendar resource to update.
    string calendarResourceId = 3;
    // The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.
    string customer = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteCustomerCustomerResourcesCalendarsCalendarResourceIdRequest {
    alt alt = 1;
    // The unique ID of the calendar resource to delete.
    string calendarResourceId = 2;
    // The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.
    string customer = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerRoleassignmentsRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Token to specify the next page in the list.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.
    string roleId = 10;
    string userIp = 11;
    // The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.
    string userKey = 12;
}

message PostCustomerCustomerRoleassignmentsRequest {
    alt alt = 1;
    RoleAssignment body = 2;
    // Immutable ID of the G Suite account.
    string customer = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerRoleassignmentsRoleAssignmentIdRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Immutable ID of the role assignment.
    string roleAssignmentId = 8;
    string userIp = 9;
}

message DeleteCustomerCustomerRoleassignmentsRoleAssignmentIdRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Immutable ID of the role assignment.
    string roleAssignmentId = 8;
    string userIp = 9;
}

message GetCustomerCustomerRolesRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Token to specify the next page in the list.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostCustomerCustomerRolesRequest {
    alt alt = 1;
    Role body = 2;
    // Immutable ID of the G Suite account.
    string customer = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCustomerCustomerRolesALLPrivilegesRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetCustomerCustomerRolesRoleIdRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Immutable ID of the role.
    string roleId = 8;
    string userIp = 9;
}

message PutCustomerCustomerRolesRoleIdRequest {
    alt alt = 1;
    Role body = 2;
    // Immutable ID of the G Suite account.
    string customer = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Immutable ID of the role.
    string roleId = 9;
    string userIp = 10;
}

message DeleteCustomerCustomerRolesRoleIdRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account.
    string customer = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Immutable ID of the role.
    string roleId = 8;
    string userIp = 9;
}

message GetCustomersCustomerKeyRequest {
    alt alt = 1;
    // Id of the customer to be retrieved
    string customerKey = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutCustomersCustomerKeyRequest {
    alt alt = 1;
    Customer body = 2;
    // Id of the customer to be updated
    string customerKey = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetGroupsRequest {
    alt alt = 1;
    // Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.
    string customer = 2;
    // Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.
    string domain = 3;
    string fields = 4;
    string key = 5;
    // Maximum number of results to return. Default is 200
    int32 maxResults = 6;
    string oauth_token = 7;
    // Token to specify next page in the list
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
    // Email or immutable Id of the user if only those groups are to be listed, the given user is a member of. If Id, it should match with id of user object
    string userKey = 12;
}

message PostGroupsRequest {
    alt alt = 1;
    Group body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetGroupsGroupKeyRequest {
    alt alt = 1;
    string fields = 2;
    // Email or immutable Id of the group
    string groupKey = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutGroupsGroupKeyRequest {
    alt alt = 1;
    Group body = 2;
    string fields = 3;
    // Email or immutable Id of the group. If Id, it should match with id of group object
    string groupKey = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteGroupsGroupKeyRequest {
    alt alt = 1;
    string fields = 2;
    // Email or immutable Id of the group
    string groupKey = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetGroupsGroupKeyAliasesRequest {
    alt alt = 1;
    string fields = 2;
    // Email or immutable Id of the group
    string groupKey = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostGroupsGroupKeyAliasesRequest {
    alt alt = 1;
    Alias body = 2;
    string fields = 3;
    // Email or immutable Id of the group
    string groupKey = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteGroupsGroupKeyAliasesAliasRequest {
    // The alias to be removed
    string alias = 1;
    alt alt = 2;
    string fields = 3;
    // Email or immutable Id of the group
    string groupKey = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetGroupsGroupKeyMembersRequest {
    alt alt = 1;
    string fields = 2;
    // Email or immutable Id of the group
    string groupKey = 3;
    string key = 4;
    // Maximum number of results to return. Default is 200
    int32 maxResults = 5;
    string oauth_token = 6;
    // Token to specify next page in the list
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Comma separated role values to filter list results on.
    string roles = 10;
    string userIp = 11;
}

message PostGroupsGroupKeyMembersRequest {
    alt alt = 1;
    Member body = 2;
    string fields = 3;
    // Email or immutable Id of the group
    string groupKey = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetGroupsGroupKeyMembersMemberKeyRequest {
    alt alt = 1;
    string fields = 2;
    // Email or immutable Id of the group
    string groupKey = 3;
    string key = 4;
    // Email or immutable Id of the member
    string memberKey = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutGroupsGroupKeyMembersMemberKeyRequest {
    alt alt = 1;
    Member body = 2;
    string fields = 3;
    // Email or immutable Id of the group. If Id, it should match with id of group object
    string groupKey = 4;
    string key = 5;
    // Email or immutable Id of the user. If Id, it should match with id of member object
    string memberKey = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteGroupsGroupKeyMembersMemberKeyRequest {
    alt alt = 1;
    string fields = 2;
    // Email or immutable Id of the group
    string groupKey = 3;
    string key = 4;
    // Email or immutable Id of the member
    string memberKey = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUsersRequest {
    alt alt = 1;
    // Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.
    string customFieldMask = 2;
    // Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.
    string customer = 3;
    // Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.
    string domain = 4;
    // Event on which subscription is intended (if subscribing)
    enum GetUsersRequest_Event {
        GETUSERSREQUEST_EVENT_ADD = 0;
        GETUSERSREQUEST_EVENT_DELETE = 1;
        GETUSERSREQUEST_EVENT_MAKEADMIN = 2;
        GETUSERSREQUEST_EVENT_UNDELETE = 3;
        GETUSERSREQUEST_EVENT_UPDATE = 4;
    }
    GetUsersRequest_Event event = 5;
    string fields = 6;
    string key = 7;
    // Maximum number of results to return. Default is 100. Max allowed is 500
    int32 maxResults = 8;
    string oauth_token = 9;
    // Column to use for sorting results
    enum GetUsersRequest_OrderBy {
        GETUSERSREQUEST_ORDERBY_EMAIL = 0;
        GETUSERSREQUEST_ORDERBY_FAMILYNAME = 1;
        GETUSERSREQUEST_ORDERBY_GIVENNAME = 2;
    }
    GetUsersRequest_OrderBy orderBy = 10;
    // Token to specify next page in the list
    string pageToken = 11;
    boolean prettyPrint = 12;
    // What subset of fields to fetch for this user.
    enum GetUsersRequest_Projection {
        GETUSERSREQUEST_PROJECTION_BASIC = 0;
        GETUSERSREQUEST_PROJECTION_CUSTOM = 1;
        GETUSERSREQUEST_PROJECTION_FULL = 2;
    }
    GetUsersRequest_Projection projection = 13;
    // Query string search. Should be of the form "". Complete documentation is at https://developers.google.com/admin-sdk/directory/v1/guides/search-users
    string query = 14;
    string quotaUser = 15;
    // If set to true retrieves the list of deleted users. Default is false
    string showDeleted = 16;
    // Whether to return results in ascending or descending order.
    enum GetUsersRequest_SortOrder {
        GETUSERSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUsersRequest_SortOrder sortOrder = 17;
    string userIp = 18;
    // Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.
    enum GetUsersRequest_ViewType {
        GETUSERSREQUEST_VIEWTYPE_ADMIN_VIEW = 0;
        GETUSERSREQUEST_VIEWTYPE_DOMAIN_PUBLIC = 1;
    }
    GetUsersRequest_ViewType viewType = 19;
}

message PostUsersRequest {
    alt alt = 1;
    User body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostUsersWatchRequest {
    alt alt = 1;
    // Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.
    string customFieldMask = 2;
    // Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.
    string customer = 3;
    // Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.
    string domain = 4;
    // Event on which subscription is intended (if subscribing)
    enum PostUsersWatchRequest_Event {
        POSTUSERSWATCHREQUEST_EVENT_ADD = 0;
        POSTUSERSWATCHREQUEST_EVENT_DELETE = 1;
        POSTUSERSWATCHREQUEST_EVENT_MAKEADMIN = 2;
        POSTUSERSWATCHREQUEST_EVENT_UNDELETE = 3;
        POSTUSERSWATCHREQUEST_EVENT_UPDATE = 4;
    }
    PostUsersWatchRequest_Event event = 5;
    string fields = 6;
    string key = 7;
    // Maximum number of results to return. Default is 100. Max allowed is 500
    int32 maxResults = 8;
    string oauth_token = 9;
    // Column to use for sorting results
    enum PostUsersWatchRequest_OrderBy {
        POSTUSERSWATCHREQUEST_ORDERBY_EMAIL = 0;
        POSTUSERSWATCHREQUEST_ORDERBY_FAMILYNAME = 1;
        POSTUSERSWATCHREQUEST_ORDERBY_GIVENNAME = 2;
    }
    PostUsersWatchRequest_OrderBy orderBy = 10;
    // Token to specify next page in the list
    string pageToken = 11;
    boolean prettyPrint = 12;
    // What subset of fields to fetch for this user.
    enum PostUsersWatchRequest_Projection {
        POSTUSERSWATCHREQUEST_PROJECTION_BASIC = 0;
        POSTUSERSWATCHREQUEST_PROJECTION_CUSTOM = 1;
        POSTUSERSWATCHREQUEST_PROJECTION_FULL = 2;
    }
    PostUsersWatchRequest_Projection projection = 13;
    // Query string search. Should be of the form "". Complete documentation is at https://developers.google.com/admin-sdk/directory/v1/guides/search-users
    string query = 14;
    string quotaUser = 15;
    Channel resource = 16;
    // If set to true retrieves the list of deleted users. Default is false
    string showDeleted = 17;
    // Whether to return results in ascending or descending order.
    enum PostUsersWatchRequest_SortOrder {
        POSTUSERSWATCHREQUEST_SORTORDER_ASCENDING = 0;
        POSTUSERSWATCHREQUEST_SORTORDER_DESCENDING = 1;
    }
    PostUsersWatchRequest_SortOrder sortOrder = 18;
    string userIp = 19;
    // Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.
    enum PostUsersWatchRequest_ViewType {
        POSTUSERSWATCHREQUEST_VIEWTYPE_ADMIN_VIEW = 0;
        POSTUSERSWATCHREQUEST_VIEWTYPE_DOMAIN_PUBLIC = 1;
    }
    PostUsersWatchRequest_ViewType viewType = 20;
}

message GetUsersUserKeyRequest {
    alt alt = 1;
    // Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.
    string customFieldMask = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // What subset of fields to fetch for this user.
    enum GetUsersUserKeyRequest_Projection {
        GETUSERSUSERKEYREQUEST_PROJECTION_BASIC = 0;
        GETUSERSUSERKEYREQUEST_PROJECTION_CUSTOM = 1;
        GETUSERSUSERKEYREQUEST_PROJECTION_FULL = 2;
    }
    GetUsersUserKeyRequest_Projection projection = 7;
    string quotaUser = 8;
    string userIp = 9;
    // Email or immutable Id of the user
    string userKey = 10;
    // Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.
    enum GetUsersUserKeyRequest_ViewType {
        GETUSERSUSERKEYREQUEST_VIEWTYPE_ADMIN_VIEW = 0;
        GETUSERSUSERKEYREQUEST_VIEWTYPE_DOMAIN_PUBLIC = 1;
    }
    GetUsersUserKeyRequest_ViewType viewType = 11;
}

message PutUsersUserKeyRequest {
    alt alt = 1;
    User body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Email or immutable Id of the user. If Id, it should match with id of user object
    string userKey = 9;
}

message DeleteUsersUserKeyRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
    // Email or immutable Id of the user
    string userKey = 8;
}

message GetUsersUserKeyAliasesRequest {
    alt alt = 1;
    // Event on which subscription is intended (if subscribing)
    enum GetUsersUserKeyAliasesRequest_Event {
        GETUSERSUSERKEYALIASESREQUEST_EVENT_ADD = 0;
        GETUSERSUSERKEYALIASESREQUEST_EVENT_DELETE = 1;
    }
    GetUsersUserKeyAliasesRequest_Event event = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Email or immutable Id of the user
    string userKey = 9;
}

message PostUsersUserKeyAliasesRequest {
    alt alt = 1;
    Alias body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Email or immutable Id of the user
    string userKey = 9;
}

message PostUsersUserKeyAliasesWatchRequest {
    alt alt = 1;
    // Event on which subscription is intended (if subscribing)
    enum PostUsersUserKeyAliasesWatchRequest_Event {
        POSTUSERSUSERKEYALIASESWATCHREQUEST_EVENT_ADD = 0;
        POSTUSERSUSERKEYALIASESWATCHREQUEST_EVENT_DELETE = 1;
    }
    PostUsersUserKeyAliasesWatchRequest_Event event = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    Channel resource = 8;
    string userIp = 9;
    // Email or immutable Id of the user
    string userKey = 10;
}

message DeleteUsersUserKeyAliasesAliasRequest {
    // The alias to be removed
    string alias = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Email or immutable Id of the user
    string userKey = 9;
}

message GetUsersUserKeyAspsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
    // Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.
    string userKey = 8;
}

message GetUsersUserKeyAspsCodeIdRequest {
    alt alt = 1;
    // The unique ID of the ASP.
    int32 codeId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.
    string userKey = 9;
}

message DeleteUsersUserKeyAspsCodeIdRequest {
    alt alt = 1;
    // The unique ID of the ASP to be deleted.
    int32 codeId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.
    string userKey = 9;
}

message PostUsersUserKeyMakeAdminRequest {
    alt alt = 1;
    UserMakeAdmin body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Email or immutable Id of the user as admin
    string userKey = 9;
}

message GetUsersUserKeyPhotosThumbnailRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
    // Email or immutable Id of the user
    string userKey = 8;
}

message PutUsersUserKeyPhotosThumbnailRequest {
    alt alt = 1;
    UserPhoto body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Email or immutable Id of the user
    string userKey = 9;
}

message DeleteUsersUserKeyPhotosThumbnailRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
    // Email or immutable Id of the user
    string userKey = 8;
}

message GetUsersUserKeyTokensRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
    // Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.
    string userKey = 8;
}

message GetUsersUserKeyTokensClientIdRequest {
    alt alt = 1;
    // The Client ID of the application the token is issued to.
    string clientId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.
    string userKey = 9;
}

message DeleteUsersUserKeyTokensClientIdRequest {
    alt alt = 1;
    // The Client ID of the application the token is issued to.
    string clientId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.
    string userKey = 9;
}

message PostUsersUserKeyUndeleteRequest {
    alt alt = 1;
    UserUndelete body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // The immutable id of the user
    string userKey = 9;
}

message GetUsersUserKeyVerificationCodesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
    // Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.
    string userKey = 8;
}

message PostUsersUserKeyVerificationCodesGenerateRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
    // Email or immutable Id of the user
    string userKey = 8;
}

message PostUsersUserKeyVerificationCodesInvalidateRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
    // Email or immutable Id of the user
    string userKey = 8;
}

message Alias {
    // A alias email
    string alias = 1;
    // ETag of the resource.
    string etag = 2;
    // Unique id of the group (Read-only) Unique id of the user (Read-only)
    string id = 3;
    // Kind of resource this is.
    string kind = 4;
    // Group's primary email (Read-only) User's primary email (Read-only)
    string primaryEmail = 5;
}

message Aliases {
    // List of alias objects.
    message Aliase {
    }
    repeated Aliase aliases = 1;
    // ETag of the resource.
    string etag = 2;
    // Kind of resource this is.
    string kind = 3;
}

message Asp {
    // The unique ID of the ASP.
    int32 codeId = 1;
    // The time when the ASP was created. Expressed in Unix time format.
    string creationTime = 2;
    // ETag of the ASP.
    string etag = 3;
    // The type of the API resource. This is always admin#directory#asp.
    string kind = 4;
    // The time when the ASP was last used. Expressed in Unix time format.
    string lastTimeUsed = 5;
    // The name of the application that the user, represented by their userId, entered when the ASP was created.
    string name = 6;
    // The unique ID of the user who issued the ASP.
    string userKey = 7;
}

message Asps {
    // ETag of the resource.
    string etag = 1;
    // A list of ASP resources.
    repeated Asp items = 2;
    // The type of the API resource. This is always admin#directory#aspList.
    string kind = 3;
}

message CalendarResource {
    // ETag of the resource.
    string etags = 1;
    // The auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, NYC-2-Training Room 1A (16)
    string generatedResourceName = 2;
    // The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.
    string kind = 3;
    // The brief description of the calendar resource.
    string resourceDescription = 4;
    // The read-only email ID for the calendar resource. Generated as part of creating a new calendar resource.
    string resourceEmail = 5;
    // The unique ID for the calendar resource.
    string resourceId = 6;
    // The name of the calendar resource. For example, Training Room 1A
    string resourceName = 7;
    // The type of the calendar resource. Used for grouping resources in the calendar user interface.
    string resourceType = 8;
}

message CalendarResources {
    // ETag of the resource.
    string etag = 1;
    // The CalendarResources in this page of results.
    repeated CalendarResource items = 2;
    // Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.
    string kind = 3;
    // The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 4;
}

message Channel {
    // The address where notifications are delivered for this channel.
    string address = 1;
    // Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
    string expiration = 2;
    // A UUID or similar unique string that identifies this channel.
    string id = 3;
    // Identifies this as a notification channel used to watch for changes to a resource. Value: the fixed string "api#channel".
    string kind = 4;
    // Additional parameters controlling delivery channel behavior. Optional.
    map<string, string> params = 5;
    // A Boolean value to indicate whether payload is wanted. Optional.
    bool payload = 6;
    // An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
    string resourceId = 7;
    // A version-specific identifier for the watched resource.
    string resourceUri = 8;
    // An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
    string token = 9;
    // The type of delivery mechanism used for this channel.
    string type = 10;
}

message ChromeOsDevice {
    // List of active time ranges (Read-only)
    message ActiveTimeRange {
            // Duration in milliseconds
    int32 activeTime = 1;
            // Date of usage
    string date = 2;
    }
    repeated ActiveTimeRange activeTimeRanges = 1;
    // AssetId specified during enrollment or through later annotation
    string annotatedAssetId = 2;
    // Address or location of the device as noted by the administrator
    string annotatedLocation = 3;
    // User of the device
    string annotatedUser = 4;
    // Chromebook boot mode (Read-only)
    string bootMode = 5;
    // Unique identifier of Chrome OS Device (Read-only)
    string deviceId = 6;
    // ETag of the resource.
    string etag = 7;
    // Chromebook Mac Address on ethernet network interface (Read-only)
    string ethernetMacAddress = 8;
    // Chromebook firmware version (Read-only)
    string firmwareVersion = 9;
    // Kind of resource this is.
    string kind = 10;
    // Date and time the device was last enrolled (Read-only)
    string lastEnrollmentTime = 11;
    // Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)
    string lastSync = 12;
    // Chromebook Mac Address on wifi network interface (Read-only)
    string macAddress = 13;
    // Mobile Equipment identifier for the 3G mobile card in the Chromebook (Read-only)
    string meid = 14;
    // Chromebook Model (Read-only)
    string model = 15;
    // Notes added by the administrator
    string notes = 16;
    // Chromebook order number (Read-only)
    string orderNumber = 17;
    // OrgUnit of the device
    string orgUnitPath = 18;
    // Chromebook Os Version (Read-only)
    string osVersion = 19;
    // Chromebook platform version (Read-only)
    string platformVersion = 20;
    // List of recent device users, in descending order by last login time (Read-only)
    message RecentUser {
            // Email address of the user. Present only if the user type is managed
    string email = 1;
            // The type of the user
    string type = 2;
    }
    repeated RecentUser recentUsers = 21;
    // Chromebook serial number (Read-only)
    string serialNumber = 22;
    // status of the device (Read-only)
    string status = 23;
    // Final date the device will be supported (Read-only)
    string supportEndDate = 24;
    // Will Chromebook auto renew after support end date (Read-only)
    bool willAutoRenew = 25;
}

message ChromeOsDeviceAction {
    // Action to be taken on the ChromeOs Device
    string action = 1;
    string deprovisionReason = 2;
}

message ChromeOsDevices {
    // List of Chrome OS Device objects.
    repeated ChromeOsDevice chromeosdevices = 1;
    // ETag of the resource.
    string etag = 2;
    // Kind of resource this is.
    string kind = 3;
    // Token used to access next page of this result.
    string nextPageToken = 4;
}

message ChromeOsMoveDevicesToOu {
    // ChromeOs Devices to be moved to OU
    repeated string deviceIds = 1;
}

message Customer {
    // The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain
    string alternateEmail = 1;
    // The customer's creation time (Readonly)
    string customerCreationTime = 2;
    // The customer's primary domain name string. Do not include the www prefix when creating a new customer.
    string customerDomain = 3;
    // ETag of the resource.
    string etag = 4;
    // The unique ID for the customer's G Suite account. (Readonly)
    string id = 5;
    // Identifies the resource as a customer. Value: admin#directory#customer
    string kind = 6;
    // The customer's ISO 639-2 language code. The default value is en-US
    string language = 7;
    // The customer's contact phone number in E.164 format.
    string phoneNumber = 8;
    // The customer's postal address information.
    CustomerPostalAddress postalAddress = 9;
}

message CustomerPostalAddress {
    // A customer's physical address. The address can be composed of one to three lines.
    string addressLine1 = 1;
    // Address line 2 of the address.
    string addressLine2 = 2;
    // Address line 3 of the address.
    string addressLine3 = 3;
    // The customer contact's name.
    string contactName = 4;
    // This is a required property. For countryCode information see the ISO 3166 country code elements.
    string countryCode = 5;
    // Name of the locality. An example of a locality value is the city of San Francisco.
    string locality = 6;
    // The company or company division name.
    string organizationName = 7;
    // The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http://portablecontacts.net/draft-spec.html#address_element.
    string postalCode = 8;
    // Name of the region. An example of a region value is NY for the state of New York.
    string region = 9;
}

message DomainAlias {
    // The creation time of the domain alias. (Read-only).
    string creationTime = 1;
    // The domain alias name.
    string domainAliasName = 2;
    // ETag of the resource.
    string etag = 3;
    // Kind of resource this is.
    string kind = 4;
    // The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.
    string parentDomainName = 5;
    // Indicates the verification state of a domain alias. (Read-only)
    bool verified = 6;
}

message DomainAliases {
    // List of domain alias objects.
    repeated DomainAlias domainAliases = 1;
    // ETag of the resource.
    string etag = 2;
    // Kind of resource this is.
    string kind = 3;
}

message Domains {
    // Creation time of the domain. (Read-only).
    string creationTime = 1;
    // List of domain alias objects. (Read-only)
    repeated DomainAlias domainAliases = 2;
    // The domain name of the customer.
    string domainName = 3;
    // ETag of the resource.
    string etag = 4;
    // Indicates if the domain is a primary domain (Read-only).
    bool isPrimary = 5;
    // Kind of resource this is.
    string kind = 6;
    // Indicates the verification state of a domain. (Read-only).
    bool verified = 7;
}

message Domains2 {
    // List of domain objects.
    repeated Domains domains = 1;
    // ETag of the resource.
    string etag = 2;
    // Kind of resource this is.
    string kind = 3;
}

message Group {
    // Is the group created by admin (Read-only) *
    bool adminCreated = 1;
    // List of aliases (Read-only)
    repeated string aliases = 2;
    // Description of the group
    string description = 3;
    // Group direct members count
    string directMembersCount = 4;
    // Email of Group
    string email = 5;
    // ETag of the resource.
    string etag = 6;
    // Unique identifier of Group (Read-only)
    string id = 7;
    // Kind of resource this is.
    string kind = 8;
    // Group name
    string name = 9;
    // List of non editable aliases (Read-only)
    repeated string nonEditableAliases = 10;
}

message Groups {
    // ETag of the resource.
    string etag = 1;
    // List of group objects.
    repeated Group groups = 2;
    // Kind of resource this is.
    string kind = 3;
    // Token used to access next page of this result.
    string nextPageToken = 4;
}

message Member {
    // Email of member (Read-only)
    string email = 1;
    // ETag of the resource.
    string etag = 2;
    // Unique identifier of customer member (Read-only) Unique identifier of group (Read-only) Unique identifier of member (Read-only)
    string id = 3;
    // Kind of resource this is.
    string kind = 4;
    // Role of member
    string role = 5;
    // Status of member (Immutable)
    string status = 6;
    // Type of member (Immutable)
    string type = 7;
}

message Members {
    // ETag of the resource.
    string etag = 1;
    // Kind of resource this is.
    string kind = 2;
    // List of member objects.
    repeated Member members = 3;
    // Token used to access next page of this result.
    string nextPageToken = 4;
}

message MobileDevice {
    // Adb (USB debugging) enabled or disabled on device (Read-only)
    bool adbStatus = 1;
    // List of applications installed on Mobile Device
    message Application {
            // Display name of application
    string displayName = 1;
            // Package name of application
    string packageName = 2;
            // List of Permissions for application
    repeated string permission = 3;
            // Version code of application
    int32 versionCode = 4;
            // Version name of application
    string versionName = 5;
    }
    repeated Application applications = 2;
    // Mobile Device Baseband version (Read-only)
    string basebandVersion = 3;
    // Mobile Device Bootloader version (Read-only)
    string bootloaderVersion = 4;
    // Mobile Device Brand (Read-only)
    string brand = 5;
    // Mobile Device Build number (Read-only)
    string buildNumber = 6;
    // The default locale used on the Mobile Device (Read-only)
    string defaultLanguage = 7;
    // Developer options enabled or disabled on device (Read-only)
    bool developerOptionsStatus = 8;
    // Mobile Device compromised status (Read-only)
    string deviceCompromisedStatus = 9;
    // Mobile Device serial number (Read-only)
    string deviceId = 10;
    // DevicePasswordStatus (Read-only)
    string devicePasswordStatus = 11;
    // List of owner user's email addresses (Read-only)
    repeated string email = 12;
    // Mobile Device Encryption Status (Read-only)
    string encryptionStatus = 13;
    // ETag of the resource.
    string etag = 14;
    // Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)
    string firstSync = 15;
    // Mobile Device Hardware (Read-only)
    string hardware = 16;
    // Mobile Device Hardware Id (Read-only)
    string hardwareId = 17;
    // Mobile Device IMEI number (Read-only)
    string imei = 18;
    // Mobile Device Kernel version (Read-only)
    string kernelVersion = 19;
    // Kind of resource this is.
    string kind = 20;
    // Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)
    string lastSync = 21;
    // Boolean indicating if this account is on owner/primary profile or not (Read-only)
    bool managedAccountIsOnOwnerProfile = 22;
    // Mobile Device manufacturer (Read-only)
    string manufacturer = 23;
    // Mobile Device MEID number (Read-only)
    string meid = 24;
    // Name of the model of the device
    string model = 25;
    // List of owner user's names (Read-only)
    repeated string name = 26;
    // Mobile Device mobile or network operator (if available) (Read-only)
    string networkOperator = 27;
    // Name of the mobile operating system
    string os = 28;
    // List of accounts added on device (Read-only)
    repeated string otherAccountsInfo = 29;
    // DMAgentPermission (Read-only)
    string privilege = 30;
    // Mobile Device release version version (Read-only)
    string releaseVersion = 31;
    // Unique identifier of Mobile Device (Read-only)
    string resourceId = 32;
    // Mobile Device Security patch level (Read-only)
    string securityPatchLevel = 33;
    // Mobile Device SSN or Serial Number (Read-only)
    string serialNumber = 34;
    // Status of the device (Read-only)
    string status = 35;
    // Work profile supported on device (Read-only)
    bool supportsWorkProfile = 36;
    // The type of device (Read-only)
    string type = 37;
    // Unknown sources enabled or disabled on device (Read-only)
    bool unknownSourcesStatus = 38;
    // Mobile Device user agent
    string userAgent = 39;
    // Mobile Device WiFi MAC address (Read-only)
    string wifiMacAddress = 40;
}

message MobileDeviceAction {
    // Action to be taken on the Mobile Device
    string action = 1;
}

message MobileDevices {
    // ETag of the resource.
    string etag = 1;
    // Kind of resource this is.
    string kind = 2;
    // List of Mobile Device objects.
    repeated MobileDevice mobiledevices = 3;
    // Token used to access next page of this result.
    string nextPageToken = 4;
}

message Notification {
    // Body of the notification (Read-only)
    string body = 1;
    // ETag of the resource.
    string etag = 2;
    // Address from which the notification is received (Read-only)
    string fromAddress = 3;
    // Boolean indicating whether the notification is unread or not.
    bool isUnread = 4;
    // The type of the resource.
    string kind = 5;
    string notificationId = 6;
    // Time at which notification was sent (Read-only)
    string sendTime = 7;
    // Subject of the notification (Read-only)
    string subject = 8;
}

message Notifications {
    // ETag of the resource.
    string etag = 1;
    // List of notifications in this page.
    repeated Notification items = 2;
    // The type of the resource.
    string kind = 3;
    // Token for fetching the next page of notifications.
    string nextPageToken = 4;
    // Number of unread notification for the domain.
    int32 unreadNotificationsCount = 5;
}

message OrgUnit {
    // Should block inheritance
    bool blockInheritance = 1;
    // Description of OrgUnit
    string description = 2;
    // ETag of the resource.
    string etag = 3;
    // Kind of resource this is.
    string kind = 4;
    // Name of OrgUnit
    string name = 5;
    // Id of OrgUnit
    string orgUnitId = 6;
    // Path of OrgUnit
    string orgUnitPath = 7;
    // Id of parent OrgUnit
    string parentOrgUnitId = 8;
    // Path of parent OrgUnit
    string parentOrgUnitPath = 9;
}

message OrgUnits {
    // ETag of the resource.
    string etag = 1;
    // Kind of resource this is.
    string kind = 2;
    // List of user objects.
    repeated OrgUnit organizationUnits = 3;
}

message Privilege {
    // A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.
    repeated Privilege childPrivileges = 1;
    // ETag of the resource.
    string etag = 2;
    // If the privilege can be restricted to an organization unit.
    bool isOuScopable = 3;
    // The type of the API resource. This is always admin#directory#privilege.
    string kind = 4;
    // The name of the privilege.
    string privilegeName = 5;
    // The obfuscated ID of the service this privilege is for.
    string serviceId = 6;
    // The name of the service this privilege is for.
    string serviceName = 7;
}

message Privileges {
    // ETag of the resource.
    string etag = 1;
    // A list of Privilege resources.
    repeated Privilege items = 2;
    // The type of the API resource. This is always admin#directory#privileges.
    string kind = 3;
}

message Role {
    // ETag of the resource.
    string etag = 1;
    // Returns true if the role is a super admin role.
    bool isSuperAdminRole = 2;
    // Returns true if this is a pre-defined system role.
    bool isSystemRole = 3;
    // The type of the API resource. This is always admin#directory#role.
    string kind = 4;
    // A short description of the role.
    string roleDescription = 5;
    // ID of the role.
    string roleId = 6;
    // Name of the role.
    string roleName = 7;
    // The set of privileges that are granted to this role.
    message RolePrivilege {
            // The name of the privilege.
    string privilegeName = 1;
            // The obfuscated ID of the service this privilege is for.
    string serviceId = 2;
    }
    repeated RolePrivilege rolePrivileges = 8;
}

message RoleAssignment {
    // The unique ID of the user this role is assigned to.
    string assignedTo = 1;
    // ETag of the resource.
    string etag = 2;
    // The type of the API resource. This is always admin#directory#roleAssignment.
    string kind = 3;
    // If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.
    string orgUnitId = 4;
    // ID of this roleAssignment.
    string roleAssignmentId = 5;
    // The ID of the role that is assigned.
    string roleId = 6;
    // The scope in which this role is assigned. Possible values are: 
    // - CUSTOMER
    // - ORG_UNIT
    string scopeType = 7;
}

message RoleAssignments {
    // ETag of the resource.
    string etag = 1;
    // A list of RoleAssignment resources.
    repeated RoleAssignment items = 2;
    // The type of the API resource. This is always admin#directory#roleAssignments.
    string kind = 3;
    string nextPageToken = 4;
}

message Roles {
    // ETag of the resource.
    string etag = 1;
    // A list of Role resources.
    repeated Role items = 2;
    // The type of the API resource. This is always admin#directory#roles.
    string kind = 3;
    string nextPageToken = 4;
}

message Schema {
    // ETag of the resource.
    string etag = 1;
    // Fields of Schema
    repeated SchemaFieldSpec fields = 2;
    // Kind of resource this is.
    string kind = 3;
    // Unique identifier of Schema (Read-only)
    string schemaId = 4;
    // Schema name
    string schemaName = 5;
}

message SchemaFieldSpec {
    // ETag of the resource.
    string etag = 1;
    // Unique identifier of Field (Read-only)
    string fieldId = 2;
    // Name of the field.
    string fieldName = 3;
    // Type of the field.
    string fieldType = 4;
    // Boolean specifying whether the field is indexed or not.
    bool indexed = 5;
    // Kind of resource this is.
    string kind = 6;
    // Boolean specifying whether this is a multi-valued field or not.
    bool multiValued = 7;
    // Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.
    message NumericIndexingSpec {
            // Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.
    double maxValue = 1;
            // Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.
    double minValue = 2;
    }
    NumericIndexingSpec numericIndexingSpec = 8;
    // Read ACLs on the field specifying who can view values of this field. Valid values are "ALL_DOMAIN_USERS" and "ADMINS_AND_SELF".
    string readAccessType = 9;
}

message Schemas {
    // ETag of the resource.
    string etag = 1;
    // Kind of resource this is.
    string kind = 2;
    // List of UserSchema objects.
    repeated Schema schemas = 3;
}

message Token {
    // Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.
    bool anonymous = 1;
    // The Client ID of the application the token is issued to.
    string clientId = 2;
    // The displayable name of the application the token is issued to.
    string displayText = 3;
    // ETag of the resource.
    string etag = 4;
    // The type of the API resource. This is always admin#directory#token.
    string kind = 5;
    // Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.
    bool nativeApp = 6;
    // A list of authorization scopes the application is granted.
    repeated string scopes = 7;
    // The unique ID of the user that issued the token.
    string userKey = 8;
}

message Tokens {
    // ETag of the resource.
    string etag = 1;
    // A list of Token resources.
    repeated Token items = 2;
    // The type of the API resource. This is always admin#directory#tokenList.
    string kind = 3;
}

message User {
    ;
    // Indicates if user has agreed to terms (Read-only)
    bool agreedToTerms = 2;
    // List of aliases (Read-only)
    repeated string aliases = 3;
    // Boolean indicating if the user should change password in next login
    bool changePasswordAtNextLogin = 4;
    // User's G Suite account creation time. (Read-only)
    string creationTime = 5;
    // Custom fields of the user.
    map<string, UserCustomProperties> customSchemas = 6;
    // CustomerId of User (Read-only)
    string customerId = 7;
    string deletionTime = 8;
    ;
    // ETag of the resource.
    string etag = 10;
    ;
    ;
    // Hash function name for password. Supported are MD5, SHA-1 and crypt
    string hashFunction = 13;
    // Unique identifier of User (Read-only)
    string id = 14;
    ;
    // Boolean indicating if user is included in Global Address List
    bool includeInGlobalAddressList = 16;
    // Boolean indicating if ip is whitelisted
    bool ipWhitelisted = 17;
    // Boolean indicating if the user is admin (Read-only)
    bool isAdmin = 18;
    // Boolean indicating if the user is delegated admin (Read-only)
    bool isDelegatedAdmin = 19;
    // Is 2-step verification enforced (Read-only)
    bool isEnforcedIn2Sv = 20;
    // Is enrolled in 2-step verification (Read-only)
    bool isEnrolledIn2Sv = 21;
    // Is mailbox setup (Read-only)
    bool isMailboxSetup = 22;
    ;
    // Kind of resource this is.
    string kind = 24;
    ;
    // User's last login time. (Read-only)
    string lastLoginTime = 26;
    ;
    // User's name
    UserName name = 28;
    // List of non editable aliases (Read-only)
    repeated string nonEditableAliases = 29;
    ;
    // OrgUnit of User
    string orgUnitPath = 31;
    ;
    // User's password
    string password = 33;
    ;
    ;
    // username of User
    string primaryEmail = 36;
    ;
    ;
    // Indicates if user is suspended
    bool suspended = 39;
    // Suspension reason if user is suspended (Read-only)
    string suspensionReason = 40;
    // ETag of the user's photo (Read-only)
    string thumbnailPhotoEtag = 41;
    // Photo Url of the user (Read-only)
    string thumbnailPhotoUrl = 42;
    ;
}

message UserAbout {
    // About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.
    string contentType = 1;
    // Actual value of notes.
    string value = 2;
}

message UserAddress {
    // Country.
    string country = 1;
    // Country code.
    string countryCode = 2;
    // Custom type.
    string customType = 3;
    // Extended Address.
    string extendedAddress = 4;
    // Formatted address.
    string formatted = 5;
    // Locality.
    string locality = 6;
    // Other parts of address.
    string poBox = 7;
    // Postal code.
    string postalCode = 8;
    // If this is user's primary address. Only one entry could be marked as primary.
    bool primary = 9;
    // Region.
    string region = 10;
    // User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses, but any values will eventually be clobbered.
    bool sourceIsStructured = 11;
    // Street.
    string streetAddress = 12;
    // Each entry can have a type which indicates standard values of that entry. For example address could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.
    string type = 13;
}

map<string, > UserCustomProperties = 1

message UserEmail {
    // Email id of the user.
    string address = 1;
    // Custom Type.
    string customType = 2;
    // If this is user's primary email. Only one entry could be marked as primary.
    bool primary = 3;
    // Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.
    string type = 4;
}

message UserExternalId {
    // Custom type.
    string customType = 1;
    // The type of the Id.
    string type = 2;
    // The value of the id.
    string value = 3;
}

message UserGender {
    // AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans, for example "he/him/his" or "they/them/their".
    string addressMeAs = 1;
    // Custom gender.
    string customGender = 2;
    // Gender.
    string type = 3;
}

message UserIm {
    // Custom protocol.
    string customProtocol = 1;
    // Custom type.
    string customType = 2;
    // Instant messenger id.
    string im = 3;
    // If this is user's primary im. Only one entry could be marked as primary.
    bool primary = 4;
    // Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type, it can take a CUSTOM value and specify the custom name in customProtocol field.
    string protocol = 5;
    // Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.
    string type = 6;
}

message UserKeyword {
    // Custom Type.
    string customType = 1;
    // Each entry can have a type which indicates standard type of that entry. For example, keyword could be of type occupation or outlook. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
    string type = 2;
    // Keyword.
    string value = 3;
}

message UserLanguage {
    // Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set
    string customLanguage = 1;
    // Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.
    string languageCode = 2;
}

message UserLocation {
    // Textual location. This is most useful for display purposes to concisely describe the location. For example, "Mountain View, CA", "Near Seattle", "US-NYC-9TH 9A209A".
    string area = 1;
    // Building Identifier.
    string buildingId = 2;
    // Custom Type.
    string customType = 3;
    // Most specific textual code of individual desk location.
    string deskCode = 4;
    // Floor name/number.
    string floorName = 5;
    // Floor section. More specific location within the floor. For example, if a floor is divided into sections "A", "B", and "C", this field would identify one of those values.
    string floorSection = 6;
    // Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type, an entry can have a custom type and can give it any name. Such types should have "custom" as type and also have a customType value.
    string type = 7;
}

message UserMakeAdmin {
    // Boolean indicating new admin status of the user
    bool status = 1;
}

message UserName {
    // Last Name
    string familyName = 1;
    // Full Name
    string fullName = 2;
    // First Name
    string givenName = 3;
}

message UserOrganization {
    // The cost center of the users department.
    string costCenter = 1;
    // Custom type.
    string customType = 2;
    // Department within the organization.
    string department = 3;
    // Description of the organization.
    string description = 4;
    // The domain to which the organization belongs to.
    string domain = 5;
    // The full-time equivalent percent within the organization (100000 = 100%).
    int32 fullTimeEquivalent = 6;
    // Location of the organization. This need not be fully qualified address.
    string location = 7;
    // Name of the organization
    string name = 8;
    // If it user's primary organization.
    bool primary = 9;
    // Symbol of the organization.
    string symbol = 10;
    // Title (designation) of the user in the organization.
    string title = 11;
    // Each entry can have a type which indicates standard types of that entry. For example organization could be of school, work etc. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.
    string type = 12;
}

message UserPhone {
    // Custom Type.
    string customType = 1;
    // If this is user's primary phone or not.
    bool primary = 2;
    // Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax, work, mobile etc. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
    string type = 3;
    // Phone number.
    string value = 4;
}

message UserPhoto {
    // ETag of the resource.
    string etag = 1;
    // Height in pixels of the photo
    int32 height = 2;
    // Unique identifier of User (Read-only)
    string id = 3;
    // Kind of resource this is.
    string kind = 4;
    // Mime Type of the photo
    string mimeType = 5;
    // Base64 encoded photo data
    string photoData = 6;
    // Primary email of User (Read-only)
    string primaryEmail = 7;
    // Width in pixels of the photo
    int32 width = 8;
}

message UserPosixAccount {
    // The GECOS (user information) for this account.
    string gecos = 1;
    // The default group ID.
    string gid = 2;
    // The path to the home directory for this account.
    string homeDirectory = 3;
    // If this is user's primary account within the SystemId.
    bool primary = 4;
    // The path to the login shell for this account.
    string shell = 5;
    // System identifier for which account Username or Uid apply to.
    string systemId = 6;
    // The POSIX compliant user ID.
    string uid = 7;
    // The username of the account.
    string username = 8;
}

message UserRelation {
    // Custom Type.
    string customType = 1;
    // The relation of the user. Some of the possible values are mother, father, sister, brother, manager, assistant, partner.
    string type = 2;
    // The name of the relation.
    string value = 3;
}

message UserSshPublicKey {
    // An expiration time in microseconds since epoch.
    string expirationTimeUsec = 1;
    // A SHA-256 fingerprint of the SSH public key. (Read-only)
    string fingerprint = 2;
    // An SSH public key.
    string key = 3;
}

message UserUndelete {
    // OrgUnit of User
    string orgUnitPath = 1;
}

message UserWebsite {
    // Custom Type.
    string customType = 1;
    // If this is user's primary website or not.
    bool primary = 2;
    // Each entry can have a type which indicates standard types of that entry. For example website could be of home, work, blog etc. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
    string type = 3;
    // Website.
    string value = 4;
}

message Users {
    // ETag of the resource.
    string etag = 1;
    // Kind of resource this is.
    string kind = 2;
    // Token used to access next page of this result.
    string nextPageToken = 3;
    // Event that triggered this response (only used in case of Push Response)
    string trigger_event = 4;
    // List of user objects.
    repeated User users = 5;
}

message VerificationCode {
    // ETag of the resource.
    string etag = 1;
    // The type of the resource. This is always admin#directory#verificationCode.
    string kind = 2;
    // The obfuscated unique ID of the user.
    string userId = 3;
    // A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.
    string verificationCode = 4;
}

message VerificationCodes {
    // ETag of the resource.
    string etag = 1;
    // A list of verification code resources.
    repeated VerificationCode items = 2;
    // The type of the resource. This is always admin#directory#verificationCodesList.
    string kind = 3;
}

enum Alt {
    JSON = 0;
}

service AdminDirectoryService {
    // Stop watching resources through this channel
    rpc PostAdminDirectory_v1ChannelsStop(PostAdminDirectory_v1ChannelsStopRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/admin/directory/v1/admin/directory_v1/channels/stop"
        body: "resource"
      };
    }
    // Retrieve all Chrome OS Devices of a customer (paginated)
    rpc GetCustomerCustomerIdDevicesChromeos(GetCustomerCustomerIdDevicesChromeosRequest) returns (ChromeOsDevices) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customerId}/devices/chromeos"
      };
    }
    // Move or insert multiple Chrome OS Devices to Organization Unit
    rpc PostCustomerCustomerIdDevicesChromeosMoveDevicesToOu(PostCustomerCustomerIdDevicesChromeosMoveDevicesToOuRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        body: "body"
      };
    }
    // Retrieve Chrome OS Device
    rpc GetCustomerCustomerIdDevicesChromeosDeviceId(GetCustomerCustomerIdDevicesChromeosDeviceIdRequest) returns (ChromeOsDevice) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
      };
    }
    // Update Chrome OS Device
    rpc PutCustomerCustomerIdDevicesChromeosDeviceId(PutCustomerCustomerIdDevicesChromeosDeviceIdRequest) returns (ChromeOsDevice) {
      option (google.api.http) = {
        put: "/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        body: "body"
      };
    }
    // Take action on Chrome OS Device
    rpc PostCustomerCustomerIdDevicesChromeosResourceIdAction(PostCustomerCustomerIdDevicesChromeosResourceIdActionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        body: "body"
      };
    }
    // Retrieve all Mobile Devices of a customer (paginated)
    rpc GetCustomerCustomerIdDevicesMobile(GetCustomerCustomerIdDevicesMobileRequest) returns (MobileDevices) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customerId}/devices/mobile"
      };
    }
    // Retrieve Mobile Device
    rpc GetCustomerCustomerIdDevicesMobileResourceId(GetCustomerCustomerIdDevicesMobileResourceIdRequest) returns (MobileDevice) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
      };
    }
    // Delete Mobile Device
    rpc DeleteCustomerCustomerIdDevicesMobileResourceId(DeleteCustomerCustomerIdDevicesMobileResourceIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
      };
    }
    // Take action on Mobile Device
    rpc PostCustomerCustomerIdDevicesMobileResourceIdAction(PostCustomerCustomerIdDevicesMobileResourceIdActionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action"
        body: "body"
      };
    }
    // Retrieve all Organization Units
    rpc GetCustomerCustomerIdOrgunits(GetCustomerCustomerIdOrgunitsRequest) returns (OrgUnits) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customerId}/orgunits"
      };
    }
    // Add Organization Unit
    rpc PostCustomerCustomerIdOrgunits(PostCustomerCustomerIdOrgunitsRequest) returns (OrgUnit) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customerId}/orgunits"
        body: "body"
      };
    }
    // Retrieve Organization Unit
    rpc GetCustomerCustomerIdOrgunitsOrgUnitPath(GetCustomerCustomerIdOrgunitsOrgUnitPathRequest) returns (OrgUnit) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}"
      };
    }
    // Update Organization Unit
    rpc PutCustomerCustomerIdOrgunitsOrgUnitPath(PutCustomerCustomerIdOrgunitsOrgUnitPathRequest) returns (OrgUnit) {
      option (google.api.http) = {
        put: "/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}"
        body: "body"
      };
    }
    // Remove Organization Unit
    rpc DeleteCustomerCustomerIdOrgunitsOrgUnitPath(DeleteCustomerCustomerIdOrgunitsOrgUnitPathRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}"
      };
    }
    // Retrieve all schemas for a customer
    rpc GetCustomerCustomerIdSchemas(GetCustomerCustomerIdSchemasRequest) returns (Schemas) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customerId}/schemas"
      };
    }
    // Create schema.
    rpc PostCustomerCustomerIdSchemas(PostCustomerCustomerIdSchemasRequest) returns (Schema) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customerId}/schemas"
        body: "body"
      };
    }
    // Retrieve schema
    rpc GetCustomerCustomerIdSchemasSchemaKey(GetCustomerCustomerIdSchemasSchemaKeyRequest) returns (Schema) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
      };
    }
    // Update schema
    rpc PutCustomerCustomerIdSchemasSchemaKey(PutCustomerCustomerIdSchemasSchemaKeyRequest) returns (Schema) {
      option (google.api.http) = {
        put: "/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        body: "body"
      };
    }
    // Delete schema
    rpc DeleteCustomerCustomerIdSchemasSchemaKey(DeleteCustomerCustomerIdSchemasSchemaKeyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
      };
    }
    // Lists the domain aliases of the customer.
    rpc GetCustomerCustomerDomainaliases(GetCustomerCustomerDomainaliasesRequest) returns (DomainAliases) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/domainaliases"
      };
    }
    // Inserts a Domain alias of the customer.
    rpc PostCustomerCustomerDomainaliases(PostCustomerCustomerDomainaliasesRequest) returns (DomainAlias) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customer}/domainaliases"
        body: "body"
      };
    }
    // Retrieves a domain alias of the customer.
    rpc GetCustomerCustomerDomainaliasesDomainAliasName(GetCustomerCustomerDomainaliasesDomainAliasNameRequest) returns (DomainAlias) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
      };
    }
    // Deletes a Domain Alias of the customer.
    rpc DeleteCustomerCustomerDomainaliasesDomainAliasName(DeleteCustomerCustomerDomainaliasesDomainAliasNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
      };
    }
    // Lists the domains of the customer.
    rpc GetCustomerCustomerDomains(GetCustomerCustomerDomainsRequest) returns (Domains2) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/domains"
      };
    }
    // Inserts a domain of the customer.
    rpc PostCustomerCustomerDomains(PostCustomerCustomerDomainsRequest) returns (Domains) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customer}/domains"
        body: "body"
      };
    }
    // Retrieves a domain of the customer.
    rpc GetCustomerCustomerDomainsDomainName(GetCustomerCustomerDomainsDomainNameRequest) returns (Domains) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/domains/{domainName}"
      };
    }
    // Deletes a domain of the customer.
    rpc DeleteCustomerCustomerDomainsDomainName(DeleteCustomerCustomerDomainsDomainNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customer}/domains/{domainName}"
      };
    }
    // Retrieves a list of notifications.
    rpc GetCustomerCustomerNotifications(GetCustomerCustomerNotificationsRequest) returns (Notifications) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/notifications"
      };
    }
    // Retrieves a notification.
    rpc GetCustomerCustomerNotificationsNotificationId(GetCustomerCustomerNotificationsNotificationIdRequest) returns (Notification) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/notifications/{notificationId}"
      };
    }
    // Updates a notification.
    rpc PutCustomerCustomerNotificationsNotificationId(PutCustomerCustomerNotificationsNotificationIdRequest) returns (Notification) {
      option (google.api.http) = {
        put: "/admin/directory/v1/customer/{customer}/notifications/{notificationId}"
        body: "body"
      };
    }
    // Deletes a notification
    rpc DeleteCustomerCustomerNotificationsNotificationId(DeleteCustomerCustomerNotificationsNotificationIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customer}/notifications/{notificationId}"
      };
    }
    // Retrieves a list of calendar resources for an account.
    rpc GetCustomerCustomerResourcesCalendars(GetCustomerCustomerResourcesCalendarsRequest) returns (CalendarResources) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/resources/calendars"
      };
    }
    // Inserts a calendar resource.
    rpc PostCustomerCustomerResourcesCalendars(PostCustomerCustomerResourcesCalendarsRequest) returns (CalendarResource) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customer}/resources/calendars"
        body: "body"
      };
    }
    // Retrieves a calendar resource.
    rpc GetCustomerCustomerResourcesCalendarsCalendarResourceId(GetCustomerCustomerResourcesCalendarsCalendarResourceIdRequest) returns (CalendarResource) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
      };
    }
    // Updates a calendar resource.
    rpc PutCustomerCustomerResourcesCalendarsCalendarResourceId(PutCustomerCustomerResourcesCalendarsCalendarResourceIdRequest) returns (CalendarResource) {
      option (google.api.http) = {
        put: "/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
        body: "body"
      };
    }
    // Deletes a calendar resource.
    rpc DeleteCustomerCustomerResourcesCalendarsCalendarResourceId(DeleteCustomerCustomerResourcesCalendarsCalendarResourceIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
      };
    }
    // Retrieves a paginated list of all roleAssignments.
    rpc GetCustomerCustomerRoleassignments(GetCustomerCustomerRoleassignmentsRequest) returns (RoleAssignments) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/roleassignments"
      };
    }
    // Creates a role assignment.
    rpc PostCustomerCustomerRoleassignments(PostCustomerCustomerRoleassignmentsRequest) returns (RoleAssignment) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customer}/roleassignments"
        body: "body"
      };
    }
    // Retrieve a role assignment.
    rpc GetCustomerCustomerRoleassignmentsRoleAssignmentId(GetCustomerCustomerRoleassignmentsRoleAssignmentIdRequest) returns (RoleAssignment) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
      };
    }
    // Deletes a role assignment.
    rpc DeleteCustomerCustomerRoleassignmentsRoleAssignmentId(DeleteCustomerCustomerRoleassignmentsRoleAssignmentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
      };
    }
    // Retrieves a paginated list of all the roles in a domain.
    rpc GetCustomerCustomerRoles(GetCustomerCustomerRolesRequest) returns (Roles) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/roles"
      };
    }
    // Creates a role.
    rpc PostCustomerCustomerRoles(PostCustomerCustomerRolesRequest) returns (Role) {
      option (google.api.http) = {
        post: "/admin/directory/v1/customer/{customer}/roles"
        body: "body"
      };
    }
    // Retrieves a paginated list of all privileges for a customer.
    rpc GetCustomerCustomerRolesALLPrivileges(GetCustomerCustomerRolesALLPrivilegesRequest) returns (Privileges) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/roles/ALL/privileges"
      };
    }
    // Retrieves a role.
    rpc GetCustomerCustomerRolesRoleId(GetCustomerCustomerRolesRoleIdRequest) returns (Role) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customer/{customer}/roles/{roleId}"
      };
    }
    // Updates a role.
    rpc PutCustomerCustomerRolesRoleId(PutCustomerCustomerRolesRoleIdRequest) returns (Role) {
      option (google.api.http) = {
        put: "/admin/directory/v1/customer/{customer}/roles/{roleId}"
        body: "body"
      };
    }
    // Deletes a role.
    rpc DeleteCustomerCustomerRolesRoleId(DeleteCustomerCustomerRolesRoleIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/customer/{customer}/roles/{roleId}"
      };
    }
    // Retrieves a customer.
    rpc GetCustomersCustomerKey(GetCustomersCustomerKeyRequest) returns (Customer) {
      option (google.api.http) = {
        get: "/admin/directory/v1/customers/{customerKey}"
      };
    }
    // Updates a customer.
    rpc PutCustomersCustomerKey(PutCustomersCustomerKeyRequest) returns (Customer) {
      option (google.api.http) = {
        put: "/admin/directory/v1/customers/{customerKey}"
        body: "body"
      };
    }
    // Retrieve all groups in a domain (paginated)
    rpc GetGroups(GetGroupsRequest) returns (Groups) {
      option (google.api.http) = {
        get: "/admin/directory/v1/groups"
      };
    }
    // Create Group
    rpc PostGroups(PostGroupsRequest) returns (Group) {
      option (google.api.http) = {
        post: "/admin/directory/v1/groups"
        body: "body"
      };
    }
    // Retrieve Group
    rpc GetGroupsGroupKey(GetGroupsGroupKeyRequest) returns (Group) {
      option (google.api.http) = {
        get: "/admin/directory/v1/groups/{groupKey}"
      };
    }
    // Update Group
    rpc PutGroupsGroupKey(PutGroupsGroupKeyRequest) returns (Group) {
      option (google.api.http) = {
        put: "/admin/directory/v1/groups/{groupKey}"
        body: "body"
      };
    }
    // Delete Group
    rpc DeleteGroupsGroupKey(DeleteGroupsGroupKeyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/groups/{groupKey}"
      };
    }
    // List all aliases for a group
    rpc GetGroupsGroupKeyAliases(GetGroupsGroupKeyAliasesRequest) returns (Aliases) {
      option (google.api.http) = {
        get: "/admin/directory/v1/groups/{groupKey}/aliases"
      };
    }
    // Add a alias for the group
    rpc PostGroupsGroupKeyAliases(PostGroupsGroupKeyAliasesRequest) returns (Alias) {
      option (google.api.http) = {
        post: "/admin/directory/v1/groups/{groupKey}/aliases"
        body: "body"
      };
    }
    // Remove a alias for the group
    rpc DeleteGroupsGroupKeyAliasesAlias(DeleteGroupsGroupKeyAliasesAliasRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/groups/{groupKey}/aliases/{alias}"
      };
    }
    // Retrieve all members in a group (paginated)
    rpc GetGroupsGroupKeyMembers(GetGroupsGroupKeyMembersRequest) returns (Members) {
      option (google.api.http) = {
        get: "/admin/directory/v1/groups/{groupKey}/members"
      };
    }
    // Add user to the specified group.
    rpc PostGroupsGroupKeyMembers(PostGroupsGroupKeyMembersRequest) returns (Member) {
      option (google.api.http) = {
        post: "/admin/directory/v1/groups/{groupKey}/members"
        body: "body"
      };
    }
    // Retrieve Group Member
    rpc GetGroupsGroupKeyMembersMemberKey(GetGroupsGroupKeyMembersMemberKeyRequest) returns (Member) {
      option (google.api.http) = {
        get: "/admin/directory/v1/groups/{groupKey}/members/{memberKey}"
      };
    }
    // Update membership of a user in the specified group.
    rpc PutGroupsGroupKeyMembersMemberKey(PutGroupsGroupKeyMembersMemberKeyRequest) returns (Member) {
      option (google.api.http) = {
        put: "/admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        body: "body"
      };
    }
    // Remove membership.
    rpc DeleteGroupsGroupKeyMembersMemberKey(DeleteGroupsGroupKeyMembersMemberKeyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/groups/{groupKey}/members/{memberKey}"
      };
    }
    // Retrieve either deleted users or all users in a domain (paginated)
    rpc GetUsers(GetUsersRequest) returns (Users) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users"
      };
    }
    // create user.
    rpc PostUsers(PostUsersRequest) returns (User) {
      option (google.api.http) = {
        post: "/admin/directory/v1/users"
        body: "body"
      };
    }
    // Watch for changes in users list
    rpc PostUsersWatch(PostUsersWatchRequest) returns (Channel) {
      option (google.api.http) = {
        post: "/admin/directory/v1/users/watch"
        body: "resource"
      };
    }
    // retrieve user
    rpc GetUsersUserKey(GetUsersUserKeyRequest) returns (User) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users/{userKey}"
      };
    }
    // update user
    rpc PutUsersUserKey(PutUsersUserKeyRequest) returns (User) {
      option (google.api.http) = {
        put: "/admin/directory/v1/users/{userKey}"
        body: "body"
      };
    }
    // Delete user
    rpc DeleteUsersUserKey(DeleteUsersUserKeyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/users/{userKey}"
      };
    }
    // List all aliases for a user
    rpc GetUsersUserKeyAliases(GetUsersUserKeyAliasesRequest) returns (Aliases) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users/{userKey}/aliases"
      };
    }
    // Add a alias for the user
    rpc PostUsersUserKeyAliases(PostUsersUserKeyAliasesRequest) returns (Alias) {
      option (google.api.http) = {
        post: "/admin/directory/v1/users/{userKey}/aliases"
        body: "body"
      };
    }
    // Watch for changes in user aliases list
    rpc PostUsersUserKeyAliasesWatch(PostUsersUserKeyAliasesWatchRequest) returns (Channel) {
      option (google.api.http) = {
        post: "/admin/directory/v1/users/{userKey}/aliases/watch"
        body: "resource"
      };
    }
    // Remove a alias for the user
    rpc DeleteUsersUserKeyAliasesAlias(DeleteUsersUserKeyAliasesAliasRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/users/{userKey}/aliases/{alias}"
      };
    }
    // List the ASPs issued by a user.
    rpc GetUsersUserKeyAsps(GetUsersUserKeyAspsRequest) returns (Asps) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users/{userKey}/asps"
      };
    }
    // Get information about an ASP issued by a user.
    rpc GetUsersUserKeyAspsCodeId(GetUsersUserKeyAspsCodeIdRequest) returns (Asp) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users/{userKey}/asps/{codeId}"
      };
    }
    // Delete an ASP issued by a user.
    rpc DeleteUsersUserKeyAspsCodeId(DeleteUsersUserKeyAspsCodeIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/users/{userKey}/asps/{codeId}"
      };
    }
    // change admin status of a user
    rpc PostUsersUserKeyMakeAdmin(PostUsersUserKeyMakeAdminRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/admin/directory/v1/users/{userKey}/makeAdmin"
        body: "body"
      };
    }
    // Retrieve photo of a user
    rpc GetUsersUserKeyPhotosThumbnail(GetUsersUserKeyPhotosThumbnailRequest) returns (UserPhoto) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users/{userKey}/photos/thumbnail"
      };
    }
    // Add a photo for the user
    rpc PutUsersUserKeyPhotosThumbnail(PutUsersUserKeyPhotosThumbnailRequest) returns (UserPhoto) {
      option (google.api.http) = {
        put: "/admin/directory/v1/users/{userKey}/photos/thumbnail"
        body: "body"
      };
    }
    // Remove photos for the user
    rpc DeleteUsersUserKeyPhotosThumbnail(DeleteUsersUserKeyPhotosThumbnailRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/users/{userKey}/photos/thumbnail"
      };
    }
    // Returns the set of tokens specified user has issued to 3rd party applications.
    rpc GetUsersUserKeyTokens(GetUsersUserKeyTokensRequest) returns (Tokens) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users/{userKey}/tokens"
      };
    }
    // Get information about an access token issued by a user.
    rpc GetUsersUserKeyTokensClientId(GetUsersUserKeyTokensClientIdRequest) returns (Token) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users/{userKey}/tokens/{clientId}"
      };
    }
    // Delete all access tokens issued by a user for an application.
    rpc DeleteUsersUserKeyTokensClientId(DeleteUsersUserKeyTokensClientIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/admin/directory/v1/users/{userKey}/tokens/{clientId}"
      };
    }
    // Undelete a deleted user
    rpc PostUsersUserKeyUndelete(PostUsersUserKeyUndeleteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/admin/directory/v1/users/{userKey}/undelete"
        body: "body"
      };
    }
    // Returns the current set of valid backup verification codes for the specified user.
    rpc GetUsersUserKeyVerificationCodes(GetUsersUserKeyVerificationCodesRequest) returns (VerificationCodes) {
      option (google.api.http) = {
        get: "/admin/directory/v1/users/{userKey}/verificationCodes"
      };
    }
    // Generate new backup verification codes for the user.
    rpc PostUsersUserKeyVerificationCodesGenerate(PostUsersUserKeyVerificationCodesGenerateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/admin/directory/v1/users/{userKey}/verificationCodes/generate"
      };
    }
    // Invalidate the current backup verification codes for the user.
    rpc PostUsersUserKeyVerificationCodesInvalidate(PostUsersUserKeyVerificationCodesInvalidateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/admin/directory/v1/users/{userKey}/verificationCodes/invalidate"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googleclouddataproc;

message GetV1beta1ProjectsProjectIdClustersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Optional A filter constraining which clusters to list. Valid filters contain label terms such as: labels.key1 = val1 AND (-labels.k2 = val2 OR labels.k3 = val3)
    string filter = 7;
    string key = 8;
    string oauth_token = 9;
    // The standard List page size.
    int32 pageSize = 10;
    // The standard List page token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    // Required The ID of the Google Cloud Platform project that the cluster belongs to.
    string projectId = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1beta1ProjectsProjectIdClustersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Cluster body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // Required The ID of the Google Cloud Platform project that the cluster belongs to.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1beta1ProjectsProjectIdClustersClusterNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Required The cluster name.
    string clusterName = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // Required The ID of the Google Cloud Platform project that the cluster belongs to.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1beta1ProjectsProjectIdClustersClusterNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Required The cluster name.
    string clusterName = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // Required The ID of the Google Cloud Platform project that the cluster belongs to.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta1ProjectsProjectIdClustersClusterName:DiagnoseRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    DiagnoseClusterRequest body = 5;
    string callback = 6;
    // Required The cluster name.
    string clusterName = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // Required The ID of the Google Cloud Platform project that the cluster belongs to.
    string projectId = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1beta1ProjectsProjectIdJobsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Optional If set, the returned jobs list includes only jobs that were submitted to the named cluster.
    string clusterName = 6;
    string fields = 7;
    // Optional A filter constraining which jobs to list. Valid filters contain job state and label terms such as: labels.key1 = val1 AND (labels.k2 = val2 OR labels.k3 = val3)
    string filter = 8;
    // Optional Specifies enumerated categories of jobs to list.
    enum GetV1beta1ProjectsProjectIdJobsRequest_JobStateMatcher {
        GETV1BETA1PROJECTSPROJECTIDJOBSREQUEST_JOBSTATEMATCHER_ALL = 0;
        GETV1BETA1PROJECTSPROJECTIDJOBSREQUEST_JOBSTATEMATCHER_ACTIVE = 1;
        GETV1BETA1PROJECTSPROJECTIDJOBSREQUEST_JOBSTATEMATCHER_NON_ACTIVE = 2;
    }
    GetV1beta1ProjectsProjectIdJobsRequest_JobStateMatcher jobStateMatcher = 9;
    string key = 10;
    string oauth_token = 11;
    // Optional The number of results to return in each response.
    int32 pageSize = 12;
    // Optional The page token, returned by a previous call, to request the next page of results.
    string pageToken = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    // Required The ID of the Google Cloud Platform project that the job belongs to.
    string projectId = 16;
    string quotaUser = 17;
    string uploadType = 18;
    string upload_protocol = 19;
}

message GetV1beta1ProjectsProjectIdJobsJobIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Required The job ID.
    string jobId = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // Required The ID of the Google Cloud Platform project that the job belongs to.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1beta1ProjectsProjectIdJobsJobIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Required The job ID.
    string jobId = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // Required The ID of the Google Cloud Platform project that the job belongs to.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta1ProjectsProjectIdJobsJobId:CancelRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CancelJobRequest body = 5;
    string callback = 6;
    string fields = 7;
    // Required The job ID.
    string jobId = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // Required The ID of the Google Cloud Platform project that the job belongs to.
    string projectId = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1beta1ProjectsProjectIdJobs:SubmitRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SubmitJobRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // Required The ID of the Google Cloud Platform project that the job belongs to.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1beta1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1beta1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource to be deleted.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1beta1Name:CancelRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CancelOperationRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the operation resource to be cancelled.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AcceleratorConfiguration {
    // The number of the accelerator cards of this type exposed to this instance.
    int32 acceleratorCount = 1;
    // Full or partial URI of the accelerator type resource to expose to this instance. See Google Compute Engine AcceleratorTypes( /compute/docs/reference/beta/acceleratorTypes)
    string acceleratorTypeUri = 2;
}

message CancelJobRequest {
}

message CancelOperationRequest {
}

message Cluster {
    // Required The cluster name. Cluster names within a project must be unique. Names from deleted clusters can be reused.
    string clusterName = 1;
    // Output-only A cluster UUID (Unique Universal Identifier). Cloud Dataproc generates this value when it creates the cluster.
    string clusterUuid = 2;
    // Required The cluster configuration. Note that Cloud Dataproc may set default values, and values may change when clusters are updated.
    ClusterConfiguration configuration = 3;
    // Optional The labels to associate with this cluster.Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}\p{N}_-{0,63}No more than 64 labels can be associated with a given cluster.
    map<string, string> labels = 4;
    // Contains cluster daemon metrics such as HDFS and YARN stats.
    ClusterMetrics metrics = 5;
    // Required The Google Cloud Platform project ID that the cluster belongs to.
    string projectId = 6;
    // Output-only Cluster status.
    ClusterStatus status = 7;
    // Output-only Previous cluster statuses.
    repeated ClusterStatus statusHistory = 8;
}

message ClusterConfiguration {
    // Optional A Google Cloud Storage staging bucket used for sharing generated SSH keys and configuration. If you do not specify a staging bucket, Cloud Dataproc will determine an appropriate Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Google Compute Engine zone where your cluster is deployed, and then it will create and manage this project-level, per-location bucket for you.
    string configurationBucket = 1;
    // Required The shared Google Compute Engine configuration settings for all instances in a cluster.
    GceClusterConfiguration gceClusterConfiguration = 2;
    // Optional Commands to execute on each node after configuration is completed. By default, executables are run on master and all worker nodes. You can test a node's <code>role</code> metadata to run an executable on a master or worker node, as shown below:
    // ROLE=$(/usr/share/google/get_metadata_value attributes/role)
    // if [[ "${ROLE}" == 'Master' ]]; then
    //   ... master specific actions ...
    // else
    //   ... worker specific actions ...
    // fi
    repeated NodeInitializationAction initializationActions = 3;
    // Optional The Google Compute Engine configuration settings for the master instance in a cluster.
    InstanceGroupConfiguration masterConfiguration = 4;
    // Optional The Google Compute Engine configuration settings for additional worker instances in a cluster.
    InstanceGroupConfiguration secondaryWorkerConfiguration = 5;
    // Optional The configuration settings for software inside the cluster.
    SoftwareConfiguration softwareConfiguration = 6;
    // Optional The Google Compute Engine configuration settings for worker instances in a cluster.
    InstanceGroupConfiguration workerConfiguration = 7;
}

message ClusterMetrics {
    // The HDFS metrics.
    map<string, string> hdfsMetrics = 1;
    // The YARN metrics.
    map<string, string> yarnMetrics = 2;
}

message ClusterOperationMetadata {
    // Output-only. Name of the cluster for the operation.
    string clusterName = 1;
    // Output-only. Cluster UUID for the operation.
    string clusterUuid = 2;
    // Output-only. Short description of operation.
    string description = 3;
    // Output-only. Labels associated with the operation
    map<string, string> labels = 4;
    // Output-only. The operation type.
    string operationType = 5;
    // Output-only. Current operation status.
    ClusterOperationStatus status = 6;
    // Output-only. The previous operation status.
    repeated ClusterOperationStatus statusHistory = 7;
    // Output-only. Errors encountered during operation execution.
    repeated string warnings = 8;
}

message ClusterOperationStatus {
    // Output-only.A message containing any operation metadata details.
    string details = 1;
    // Output-only. A message containing the detailed operation state.
    string innerState = 2;
    // Output-only. A message containing the operation state.
    enum ClusterOperationStatus_State {
        CLUSTEROPERATIONSTATUS_STATE_UNKNOWN = 0;
        CLUSTEROPERATIONSTATUS_STATE_PENDING = 1;
        CLUSTEROPERATIONSTATUS_STATE_RUNNING = 2;
        CLUSTEROPERATIONSTATUS_STATE_DONE = 3;
    }
    ClusterOperationStatus_State state = 3;
    // Output-only. The time this state was entered.
    string stateStartTime = 4;
}

message ClusterStatus {
    // Optional details of cluster's state.
    string detail = 1;
    // The cluster's state.
    enum ClusterStatus_State {
        CLUSTERSTATUS_STATE_UNKNOWN = 0;
        CLUSTERSTATUS_STATE_CREATING = 1;
        CLUSTERSTATUS_STATE_RUNNING = 2;
        CLUSTERSTATUS_STATE_ERROR = 3;
        CLUSTERSTATUS_STATE_DELETING = 4;
        CLUSTERSTATUS_STATE_UPDATING = 5;
    }
    ClusterStatus_State state = 2;
    // Time when this state was entered.
    string stateStartTime = 3;
    // Output-only Additional state information that includes status reported by the agent.
    enum ClusterStatus_Substate {
        CLUSTERSTATUS_SUBSTATE_UNSPECIFIED = 0;
        CLUSTERSTATUS_SUBSTATE_UNHEALTHY = 1;
        CLUSTERSTATUS_SUBSTATE_STALE_STATUS = 2;
    }
    ClusterStatus_Substate substate = 4;
}

message DiagnoseClusterOutputLocation {
    // Output-only The Google Cloud Storage URI of the diagnostic output. This is a plain text file with a summary of collected diagnostics.
    string outputUri = 1;
}

message DiagnoseClusterRequest {
}

message DiagnoseClusterResults {
    // Output-only. The Google Cloud Storage URI of the diagnostic output. The output report is a plain text file with a summary of collected diagnostics.
    string outputUri = 1;
}

message DiskConfiguration {
    // Optional Size in GB of the boot disk (default is 500GB).
    int32 bootDiskSizeGb = 1;
    // Optional Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and HDFS data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic configuration and installed binaries.
    int32 numLocalSsds = 2;
}

message Empty {
}

message GceClusterConfiguration {
    // If true, all instances in the cluser will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
    bool internalIpOnly = 1;
    // The Google Compute Engine metadata entries to add to all instances.
    map<string, string> metadata = 2;
    // The Google Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see https://cloud.google.com/compute/docs/subnetworks for more information). Example: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/global/default.
    string networkUri = 3;
    // Optional The service account of the instances. Defaults to the default Google Compute Engine service account. Custom service accounts need permissions equivalent to the folloing IAM roles:
    // roles/logging.logWriter
    // roles/storage.objectAdmin(see https://cloud.google.com/compute/docs/access/service-accounts#custom_service_accounts for more information). Example: [account_id]@[project_id].iam.gserviceaccount.com
    string serviceAccount = 4;
    // The URIs of service account scopes to be included in Google Compute Engine instances. The following base set of scopes is always included: - https://www.googleapis.com/auth/cloud.useraccounts.readonly - https://www.googleapis.com/auth/devstorage.read_write - https://www.googleapis.com/auth/logging.write If no scopes are specfied, the following defaults are also provided: - https://www.googleapis.com/auth/bigquery - https://www.googleapis.com/auth/bigtable.admin.table - https://www.googleapis.com/auth/bigtable.data - https://www.googleapis.com/auth/devstorage.full_control
    repeated string serviceAccountScopes = 5;
    // The Google Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. Example: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/sub0.
    string subnetworkUri = 6;
    // The Google Compute Engine tags to add to all instances.
    repeated string tags = 7;
    // Required The zone where the Google Compute Engine cluster will be located. Example: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone].
    string zoneUri = 8;
}

message HadoopJob {
    // Optional HCFS URIs of archives to be extracted in the working directory of Hadoop drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, or .zip.
    repeated string archiveUris = 1;
    // Optional The arguments to pass to the driver. Do not include arguments, such as -libjars or -Dfoo=bar, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
    repeated string args = 2;
    // Optional HCFS URIs of files to be copied to the working directory of Hadoop drivers and distributed tasks. Useful for naively parallel tasks.
    repeated string fileUris = 3;
    // Optional Jar file URIs to add to the CLASSPATHs of the Hadoop driver and tasks.
    repeated string jarFileUris = 4;
    // Optional The runtime log configuration for job execution.
    LoggingConfiguration loggingConfiguration = 5;
    // The name of the driver's main class. The jar file containing the class must be in the default CLASSPATH or specified in jar_file_uris.
    string mainClass = 6;
    // The Hadoop Compatible Filesystem (HCFS) URI of the jar file containing the main class. Examples:  'gs://foo-bucket/analytics-binaries/extract-useful-metrics-mr.jar'  'hdfs:/tmp/test-samples/custom-wordcount.jar'  'file:///home/usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar'
    string mainJarFileUri = 7;
    // Optional A mapping of property names to values, used to configure Hadoop. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site and classes in user code.
    map<string, string> properties = 8;
}

message HiveJob {
    // Optional Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
    bool continueOnFailure = 1;
    // Optional HCFS URIs of jar files to add to the CLASSPATH of the Hive server and Hadoop MapReduce (MR) tasks. Can contain Hive SerDes and UDFs.
    repeated string jarFileUris = 2;
    // Optional A mapping of property names and values, used to configure Hive. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml, and classes in user code.
    map<string, string> properties = 3;
    // The HCFS URI of the script that contains Hive queries.
    string queryFileUri = 4;
    // A list of queries.
    QueryList queryList = 5;
    // Optional Mapping of query variable names to values (equivalent to the Hive command: SET name="value";).
    map<string, string> scriptVariables = 6;
}

message InstanceGroupConfiguration {
    // Optional The Google Compute Engine accelerator configuration for these instances.
    repeated AcceleratorConfiguration accelerators = 1;
    // Disk option configuration settings.
    DiskConfiguration diskConfiguration = 2;
    // Output-only The Google Compute Engine image resource used for cluster instances. Inferred from SoftwareConfiguration.image_version.
    string imageUri = 3;
    // The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group if not set by user (recommended practice is to let Dataproc derive the name).
    repeated string instanceNames = 4;
    // Specifies that this instance group contains Preemptible Instances.
    bool isPreemptible = 5;
    // The Google Compute Engine machine type used for cluster instances. Example: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2.
    string machineTypeUri = 6;
    // Output-only The configuration for Google Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.
    ManagedGroupConfiguration managedGroupConfiguration = 7;
    // The number of VM instances in the instance group. For master instance groups, must be set to 1.
    int32 numInstances = 8;
}

message Job {
    // Output-only If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.
    string driverControlFilesUri = 1;
    // Output-only A URI pointing to the location of the stdin of the job's driver program, only set if the job is interactive.
    string driverInputResourceUri = 2;
    // Output-only A URI pointing to the location of the stdout of the job's driver program.
    string driverOutputResourceUri = 3;
    // Job is a Hadoop job.
    HadoopJob hadoopJob = 4;
    // Job is a Hive job.
    HiveJob hiveJob = 5;
    // Optional If set to true, the driver's stdin will be kept open and driver_input_uri will be set to provide a path at which additional input can be sent to the driver.
    bool interactive = 6;
    // Optional The labels to associate with this job.Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}\p{N}_-{0,63}No more than 64 labels can be associated with a given job.
    map<string, string> labels = 7;
    // Job is a Pig job.
    PigJob pigJob = 8;
    // Required Job information, including how, when, and where to run the job.
    JobPlacement placement = 9;
    // Job is a Pyspark job.
    PySparkJob pysparkJob = 10;
    // Optional The fully qualified reference to the job, which can be used to obtain the equivalent REST path of the job resource. If this property is not specified when a job is created, the server generates a <code>job_id</code>.
    JobReference reference = 11;
    // Optional Job scheduling configuration.
    JobScheduling scheduling = 12;
    // Job is a Spark job.
    SparkJob sparkJob = 13;
    // Job is a SparkSql job.
    SparkSqlJob sparkSqlJob = 14;
    // Output-only The job status. Additional application-specific status information may be contained in the <code>type_job</code> and <code>yarn_applications</code> fields.
    JobStatus status = 15;
    // Output-only The previous job status.
    repeated JobStatus statusHistory = 16;
    // Output-only The email address of the user submitting the job. For jobs submitted on the cluster, the address is <code>username@hostname</code>.
    string submittedBy = 17;
    // Output-only The collection of YARN applications spun up by this job.
    repeated YarnApplication yarnApplications = 18;
}

message JobPlacement {
    // Required The name of the cluster where the job will be submitted.
    string clusterName = 1;
    // Output-only A cluster UUID generated by the Dataproc service when the job is submitted.
    string clusterUuid = 2;
}

message JobReference {
    // Required The job ID, which must be unique within the project. The job ID is generated by the server upon job submission or provided by the user as a means to perform retries without creating duplicate jobs. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or hyphens (-). The maximum length is 100 characters.
    string jobId = 1;
    // Required The ID of the Google Cloud Platform project that the job belongs to.
    string projectId = 2;
}

message JobScheduling {
    // Optional Maximum number of times per hour a driver may be restarted as a result of driver terminating with non-zero code before job is reported failed.A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window.Maximum value is 10.
    int32 maxFailuresPerHour = 1;
}

message JobStatus {
    // Optional Job state details, such as an error description if the state is <code>ERROR</code>.
    string details = 1;
    // Required A state message specifying the overall job state.
    enum JobStatus_State {
        JOBSTATUS_STATE_STATE_UNSPECIFIED = 0;
        JOBSTATUS_STATE_PENDING = 1;
        JOBSTATUS_STATE_SETUP_DONE = 2;
        JOBSTATUS_STATE_RUNNING = 3;
        JOBSTATUS_STATE_CANCEL_PENDING = 4;
        JOBSTATUS_STATE_CANCEL_STARTED = 5;
        JOBSTATUS_STATE_CANCELLED = 6;
        JOBSTATUS_STATE_DONE = 7;
        JOBSTATUS_STATE_ERROR = 8;
        JOBSTATUS_STATE_ATTEMPT_FAILURE = 9;
    }
    JobStatus_State state = 2;
    // Output-only The time when this state was entered.
    string stateStartTime = 3;
    // Output-only Additional state information, which includes status reported by the agent.
    enum JobStatus_Substate {
        JOBSTATUS_SUBSTATE_UNSPECIFIED = 0;
        JOBSTATUS_SUBSTATE_SUBMITTED = 1;
        JOBSTATUS_SUBSTATE_QUEUED = 2;
        JOBSTATUS_SUBSTATE_STALE_STATUS = 3;
    }
    JobStatus_Substate substate = 4;
}

message ListClustersResponse {
    // Output-only The clusters in the project.
    repeated Cluster clusters = 1;
    // The standard List next-page token.
    string nextPageToken = 2;
}

message ListJobsResponse {
    // Output-only Jobs list.
    repeated Job jobs = 1;
    // Optional This token is included in the response if there are more results to fetch. To fetch additional results, provide this value as the page_token in a subsequent <code>ListJobsRequest</code>.
    string nextPageToken = 2;
}

message ListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 2;
}

message LoggingConfiguration {
    // The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples:  'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
    map<string, string> driverLogLevels = 1;
}

message ManagedGroupConfiguration {
    // Output-only The name of the Instance Group Manager for this group.
    string instanceGroupManagerName = 1;
    // Output-only The name of the Instance Template used for the Managed Instance Group.
    string instanceTemplateName = 2;
}

message NodeInitializationAction {
    // Required Google Cloud Storage URI of executable file.
    string executableFile = 1;
    // Optional Amount of time executable has to complete. Default is 10 minutes. Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
    string executionTimeout = 2;
}

message Operation {
    // If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.
    string name = 4;
    // The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
    map<string, > response = 5;
}

message OperationMetadata {
    // Name of the cluster for the operation.
    string clusterName = 1;
    // Cluster UUId for the operation.
    string clusterUuid = 2;
    // Output-only Short description of operation.
    string description = 3;
    // Output-only The operation type.
    string operationType = 4;
    // Output-only Current operation status.
    OperationStatus status = 5;
    // Output-only Previous operation status.
    repeated OperationStatus statusHistory = 6;
    // Output-only Errors encountered during operation execution.
    repeated string warnings = 7;
}

message OperationStatus {
    // A message containing any operation metadata details.
    string details = 1;
    // A message containing the detailed operation state.
    string innerState = 2;
    // A message containing the operation state.
    enum OperationStatus_State {
        OPERATIONSTATUS_STATE_UNKNOWN = 0;
        OPERATIONSTATUS_STATE_PENDING = 1;
        OPERATIONSTATUS_STATE_RUNNING = 2;
        OPERATIONSTATUS_STATE_DONE = 3;
    }
    OperationStatus_State state = 3;
    // The time this state was entered.
    string stateStartTime = 4;
}

message PigJob {
    // Optional Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
    bool continueOnFailure = 1;
    // Optional HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
    repeated string jarFileUris = 2;
    // Optional The runtime log configuration for job execution.
    LoggingConfiguration loggingConfiguration = 3;
    // Optional A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.
    map<string, string> properties = 4;
    // The HCFS URI of the script that contains the Pig queries.
    string queryFileUri = 5;
    // A list of queries.
    QueryList queryList = 6;
    // Optional Mapping of query variable names to values (equivalent to the Pig command: name=[value]).
    map<string, string> scriptVariables = 7;
}

message PySparkJob {
    // Optional HCFS URIs of archives to be extracted in the working directory of .jar, .tar, .tar.gz, .tgz, and .zip.
    repeated string archiveUris = 1;
    // Optional The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
    repeated string args = 2;
    // Optional HCFS URIs of files to be copied to the working directory of Python drivers and distributed tasks. Useful for naively parallel tasks.
    repeated string fileUris = 3;
    // Optional HCFS URIs of jar files to add to the CLASSPATHs of the Python driver and tasks.
    repeated string jarFileUris = 4;
    // Optional The runtime log configuration for job execution.
    LoggingConfiguration loggingConfiguration = 5;
    // Required The Hadoop Compatible Filesystem (HCFS) URI of the main Python file to use as the driver. Must be a .py file.
    string mainPythonFileUri = 6;
    // Optional A mapping of property names to values, used to configure PySpark. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
    map<string, string> properties = 7;
    // Optional HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
    repeated string pythonFileUris = 8;
}

message QueryList {
    // Required The queries to execute. You do not need to terminate a query with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of an Cloud Dataproc API snippet that uses a QueryList to specify a HiveJob:
    // "hiveJob": {
    //   "queryList": {
    //     "queries": [
    //       "query1",
    //       "query2",
    //       "query3;query4",
    //     ]
    //   }
    // }
    repeated string queries = 1;
}

message SoftwareConfiguration {
    // Optional The version of software inside the cluster. It must match the regular expression [0-9]+\.[0-9]+. If unspecified, it defaults to the latest version (see Cloud Dataproc Versioning).
    string imageVersion = 1;
    // Optional The properties to set on daemon configuration files.Property keys are specified in "prefix:property" format, such as "core:fs.defaultFS". The following are supported prefixes and their mappings:  core - core-site.xml  hdfs - hdfs-site.xml  mapred - mapred-site.xml  yarn - yarn-site.xml  hive - hive-site.xml  pig - pig.properties  spark - spark-defaults.conf
    map<string, string> properties = 2;
}

message SparkJob {
    // Optional HCFS URIs of archives to be extracted in the working directory of Spark drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
    repeated string archiveUris = 1;
    // Optional The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
    repeated string args = 2;
    // Optional HCFS URIs of files to be copied to the working directory of Spark drivers and distributed tasks. Useful for naively parallel tasks.
    repeated string fileUris = 3;
    // Optional HCFS URIs of jar files to add to the CLASSPATHs of the Spark driver and tasks.
    repeated string jarFileUris = 4;
    // Optional The runtime log configuration for job execution.
    LoggingConfiguration loggingConfiguration = 5;
    // The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
    string mainClass = 6;
    // The Hadoop Compatible Filesystem (HCFS) URI of the jar file that contains the main class.
    string mainJarFileUri = 7;
    // Optional A mapping of property names to values, used to configure Spark. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
    map<string, string> properties = 8;
}

message SparkSqlJob {
    // Optional HCFS URIs of jar files to be added to the Spark CLASSPATH.
    repeated string jarFileUris = 1;
    // Optional The runtime log configuration for job execution.
    LoggingConfiguration loggingConfiguration = 2;
    // Optional A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Cloud Dataproc API may be overwritten.
    map<string, string> properties = 3;
    // The HCFS URI of the script that contains SQL queries.
    string queryFileUri = 4;
    // A list of queries.
    QueryList queryList = 5;
    // Optional Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
    map<string, string> scriptVariables = 6;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details. There will be a common set of message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message SubmitJobRequest {
    // Required The job resource.
    Job job = 1;
}

message YarnApplication {
    // Required The application name.
    string name = 1;
    // Required The numerical progress of the application, from 1 to 100.
    float progress = 2;
    // Required The application state.
    enum YarnApplication_State {
        YARNAPPLICATION_STATE_STATE_UNSPECIFIED = 0;
        YARNAPPLICATION_STATE_NEW = 1;
        YARNAPPLICATION_STATE_NEW_SAVING = 2;
        YARNAPPLICATION_STATE_SUBMITTED = 3;
        YARNAPPLICATION_STATE_ACCEPTED = 4;
        YARNAPPLICATION_STATE_RUNNING = 5;
        YARNAPPLICATION_STATE_FINISHED = 6;
        YARNAPPLICATION_STATE_FAILED = 7;
        YARNAPPLICATION_STATE_KILLED = 8;
    }
    YarnApplication_State state = 3;
    // Optional The HTTP URL of the ApplicationMaster, HistoryServer, or TimelineServer that provides application-specific information. The URL uses the internal hostname, and requires a proxy server for resolution and, possibly, access.
    string trackingUrl = 4;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudDataprocService {
    // Lists all clusters in a project.
    rpc GetV1beta1ProjectsProjectIdClusters(GetV1beta1ProjectsProjectIdClustersRequest) returns (ListClustersResponse) {
      option (google.api.http) = {
        get: "//v1beta1/projects/{projectId}/clusters"
      };
    }
    // Creates a cluster in a project.
    rpc PostV1beta1ProjectsProjectIdClusters(PostV1beta1ProjectsProjectIdClustersRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1beta1/projects/{projectId}/clusters"
        body: "body"
      };
    }
    // Gets the resource representation for a cluster in a project.
    rpc GetV1beta1ProjectsProjectIdClustersClusterName(GetV1beta1ProjectsProjectIdClustersClusterNameRequest) returns (Cluster) {
      option (google.api.http) = {
        get: "//v1beta1/projects/{projectId}/clusters/{clusterName}"
      };
    }
    // Deletes a cluster in a project.
    rpc DeleteV1beta1ProjectsProjectIdClustersClusterName(DeleteV1beta1ProjectsProjectIdClustersClusterNameRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "//v1beta1/projects/{projectId}/clusters/{clusterName}"
      };
    }
    // Gets cluster diagnostic information. After the operation completes, the Operation.response field contains DiagnoseClusterOutputLocation.
    rpc PostV1beta1ProjectsProjectIdClustersClusterName:Diagnose(PostV1beta1ProjectsProjectIdClustersClusterName:DiagnoseRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1beta1/projects/{projectId}/clusters/{clusterName}:diagnose"
        body: "body"
      };
    }
    // Lists jobs in a project.
    rpc GetV1beta1ProjectsProjectIdJobs(GetV1beta1ProjectsProjectIdJobsRequest) returns (ListJobsResponse) {
      option (google.api.http) = {
        get: "//v1beta1/projects/{projectId}/jobs"
      };
    }
    // Gets the resource representation for a job in a project.
    rpc GetV1beta1ProjectsProjectIdJobsJobId(GetV1beta1ProjectsProjectIdJobsJobIdRequest) returns (Job) {
      option (google.api.http) = {
        get: "//v1beta1/projects/{projectId}/jobs/{jobId}"
      };
    }
    // Deletes the job from the project. If the job is active, the delete fails, and the response returns FAILED_PRECONDITION.
    rpc DeleteV1beta1ProjectsProjectIdJobsJobId(DeleteV1beta1ProjectsProjectIdJobsJobIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1beta1/projects/{projectId}/jobs/{jobId}"
      };
    }
    // Starts a job cancellation request. To access the job resource after cancellation, call jobs.list or jobs.get.
    rpc PostV1beta1ProjectsProjectIdJobsJobId:Cancel(PostV1beta1ProjectsProjectIdJobsJobId:CancelRequest) returns (Job) {
      option (google.api.http) = {
        post: "//v1beta1/projects/{projectId}/jobs/{jobId}:cancel"
        body: "body"
      };
    }
    // Submits a job to a cluster.
    rpc PostV1beta1ProjectsProjectIdJobs:Submit(PostV1beta1ProjectsProjectIdJobs:SubmitRequest) returns (Job) {
      option (google.api.http) = {
        post: "//v1beta1/projects/{projectId}/jobs:submit"
        body: "body"
      };
    }
    // Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    rpc GetV1beta1Name(GetV1beta1NameRequest) returns (Operation) {
      option (google.api.http) = {
        get: "//v1beta1/{name}"
      };
    }
    // Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
    rpc DeleteV1beta1Name(DeleteV1beta1NameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1beta1/{name}"
      };
    }
    // Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use operations.get or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation.
    rpc PostV1beta1Name:Cancel(PostV1beta1Name:CancelRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1beta1/{name}:cancel"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package contentapiforshopping;

message GetAccountsAuthinfoRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostAccountsBatchRequest {
    alt alt = 1;
    AccountsCustomBatchRequest body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostAccountstatusesBatchRequest {
    alt alt = 1;
    AccountstatusesCustomBatchRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostAccounttaxBatchRequest {
    alt alt = 1;
    AccounttaxCustomBatchRequest body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostDatafeedsBatchRequest {
    alt alt = 1;
    DatafeedsCustomBatchRequest body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostDatafeedstatusesBatchRequest {
    alt alt = 1;
    DatafeedstatusesCustomBatchRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostInventoryBatchRequest {
    alt alt = 1;
    InventoryCustomBatchRequest body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostOrdersBatchRequest {
    alt alt = 1;
    OrdersCustomBatchRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostProductsBatchRequest {
    alt alt = 1;
    ProductsCustomBatchRequest body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProductstatusesBatchRequest {
    alt alt = 1;
    ProductstatusesCustomBatchRequest body = 2;
    string fields = 3;
    // Flag to include full product data in the results of this request. The default value is false.
    bool includeAttributes = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostShippingsettingsBatchRequest {
    alt alt = 1;
    ShippingsettingsCustomBatchRequest body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetMerchantIdAccountsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of accounts to return in the response, used for paging.
    int32 maxResults = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdAccountsRequest {
    alt alt = 1;
    Account body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    // The ID of the managing account.
    string merchantId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdAccountsAccountIdRequest {
    // The ID of the account.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutMerchantIdAccountsAccountIdRequest {
    // The ID of the account.
    string accountId = 1;
    alt alt = 2;
    Account body = 3;
    // Flag to run the request in dry-run mode.
    bool dryRun = 4;
    string fields = 5;
    string key = 6;
    // The ID of the managing account.
    string merchantId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeleteMerchantIdAccountsAccountIdRequest {
    // The ID of the account.
    string accountId = 1;
    alt alt = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    // Flag to delete sub-accounts with products. The default value is false.
    bool force = 5;
    string key = 6;
    // The ID of the managing account.
    string merchantId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostMerchantIdAccountsAccountIdClaimwebsiteRequest {
    // The ID of the account whose website is claimed.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // Only available to selected merchants. When set to True, this flag removes any existing claim on the requested website by another account and replaces it with a claim from this account.
    bool overwrite = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdAccountstatusesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of account statuses to return in the response, used for paging.
    int32 maxResults = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdAccountstatusesAccountIdRequest {
    // The ID of the account.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetMerchantIdAccounttaxRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of tax settings to return in the response, used for paging.
    int32 maxResults = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdAccounttaxAccountIdRequest {
    // The ID of the account for which to get/update account tax settings.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutMerchantIdAccounttaxAccountIdRequest {
    // The ID of the account for which to get/update account tax settings.
    string accountId = 1;
    alt alt = 2;
    AccountTax body = 3;
    // Flag to run the request in dry-run mode.
    bool dryRun = 4;
    string fields = 5;
    string key = 6;
    // The ID of the managing account.
    string merchantId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetMerchantIdDatafeedsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of products to return in the response, used for paging.
    int32 maxResults = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdDatafeedsRequest {
    alt alt = 1;
    Datafeed body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    string merchantId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdDatafeedsDatafeedIdRequest {
    alt alt = 1;
    string datafeedId = 2;
    string fields = 3;
    string key = 4;
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutMerchantIdDatafeedsDatafeedIdRequest {
    alt alt = 1;
    Datafeed body = 2;
    string datafeedId = 3;
    // Flag to run the request in dry-run mode.
    bool dryRun = 4;
    string fields = 5;
    string key = 6;
    string merchantId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeleteMerchantIdDatafeedsDatafeedIdRequest {
    alt alt = 1;
    string datafeedId = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    string merchantId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdDatafeedstatusesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of products to return in the response, used for paging.
    int32 maxResults = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdDatafeedstatusesDatafeedIdRequest {
    alt alt = 1;
    // The country for which to get the datafeed status. If this parameter is provided then language must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.
    string country = 2;
    string datafeedId = 3;
    string fields = 4;
    string key = 5;
    // The language for which to get the datafeed status. If this parameter is provided then country must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.
    string language = 6;
    string merchantId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostMerchantIdInventoryStoreCodeProductsProductIdRequest {
    alt alt = 1;
    InventorySetRequest body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    // The ID of the managing account.
    string merchantId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // The ID of the product for which to update price and availability.
    string productId = 9;
    string quotaUser = 10;
    // The code of the store for which to update price and availability. Use online to update price and availability of an online product.
    string storeCode = 11;
    string userIp = 12;
}

message GetMerchantIdOrdersRequest {
    // Obtains orders that match the acknowledgement status. When set to true, obtains orders that have been acknowledged. When false, obtains orders that have not been acknowledged.
    // We recommend using this filter set to false, in conjunction with the acknowledge call, such that only un-acknowledged orders are returned.
    bool acknowledged = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of orders to return in the response, used for paging. The default value is 25 orders per page, and the maximum allowed value is 250 orders per page.
    // Known issue: All List calls will return all Orders without limit regardless of the value of this field.
    int32 maxResults = 5;
    // The ID of the managing account.
    string merchantId = 6;
    string oauth_token = 7;
    // The ordering of the returned list. The only supported value are placedDate desc and placedDate asc for now, which returns orders sorted by placement date. "placedDate desc" stands for listing orders by placement date, from oldest to most recent. "placedDate asc" stands for listing orders by placement date, from most recent to oldest. In future releases we'll support other sorting criteria.
    enum GetMerchantIdOrdersRequest_OrderBy {
        GETMERCHANTIDORDERSREQUEST_ORDERBY_PLACEDDATE_ASC = 0;
        GETMERCHANTIDORDERSREQUEST_ORDERBY_PLACEDDATE_DESC = 1;
    }
    GetMerchantIdOrdersRequest_OrderBy orderBy = 8;
    // The token returned by the previous request.
    string pageToken = 9;
    // Obtains orders placed before this date (exclusively), in ISO 8601 format.
    string placedDateEnd = 10;
    // Obtains orders placed after this date (inclusively), in ISO 8601 format.
    string placedDateStart = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // Obtains orders that match any of the specified statuses. Multiple values can be specified with comma separation. Additionally, please note that active is a shortcut for pendingShipment and partiallyShipped, and completed is a shortcut for shipped , partiallyDelivered, delivered, partiallyReturned, returned, and canceled.
    repeated string statuses = 14;
    string userIp = 15;
}

message GetMerchantIdOrdersOrderIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string oauth_token = 5;
    // The ID of the order.
    string orderId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostMerchantIdOrdersOrderIdAcknowledgeRequest {
    alt alt = 1;
    OrdersAcknowledgeRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdCancelRequest {
    alt alt = 1;
    OrdersCancelRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order to cancel.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdCancelLineItemRequest {
    alt alt = 1;
    OrdersCancelLineItemRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdRefundRequest {
    alt alt = 1;
    OrdersRefundRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order to refund.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdReturnLineItemRequest {
    alt alt = 1;
    OrdersReturnLineItemRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdShipLineItemsRequest {
    alt alt = 1;
    OrdersShipLineItemsRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdUpdateMerchantOrderIdRequest {
    alt alt = 1;
    OrdersUpdateMerchantOrderIdRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdUpdateShipmentRequest {
    alt alt = 1;
    OrdersUpdateShipmentRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdOrdersbymerchantidMerchantOrderIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    // The merchant order id to be looked for.
    string merchantOrderId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetMerchantIdProductsRequest {
    alt alt = 1;
    string fields = 2;
    // Flag to include the invalid inserted items in the result of the list request. By default the invalid items are not shown (the default value is false).
    bool includeInvalidInsertedItems = 3;
    string key = 4;
    // The maximum number of products to return in the response, used for paging.
    int32 maxResults = 5;
    // The ID of the managing account.
    string merchantId = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostMerchantIdProductsRequest {
    alt alt = 1;
    Product body = 2;
    // Flag to run the request in dry-run mode.
    bool dryRun = 3;
    string fields = 4;
    string key = 5;
    // The ID of the managing account.
    string merchantId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdProductsProductIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The ID of the product.
    string productId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteMerchantIdProductsProductIdRequest {
    alt alt = 1;
    // Flag to run the request in dry-run mode.
    bool dryRun = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The ID of the product.
    string productId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdProductstatusesRequest {
    alt alt = 1;
    string fields = 2;
    // Flag to include full product data in the results of the list request. The default value is false.
    bool includeAttributes = 3;
    // Flag to include the invalid inserted items in the result of the list request. By default the invalid items are not shown (the default value is false).
    bool includeInvalidInsertedItems = 4;
    string key = 5;
    // The maximum number of product statuses to return in the response, used for paging.
    int32 maxResults = 6;
    // The ID of the managing account.
    string merchantId = 7;
    string oauth_token = 8;
    // The token returned by the previous request.
    string pageToken = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message GetMerchantIdProductstatusesProductIdRequest {
    alt alt = 1;
    string fields = 2;
    // Flag to include full product data in the result of this get request. The default value is false.
    bool includeAttributes = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The ID of the product.
    string productId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdShippingsettingsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of shipping settings to return in the response, used for paging.
    int32 maxResults = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdShippingsettingsAccountIdRequest {
    // The ID of the account for which to get/update shipping settings.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutMerchantIdShippingsettingsAccountIdRequest {
    // The ID of the account for which to get/update shipping settings.
    string accountId = 1;
    alt alt = 2;
    ShippingSettings body = 3;
    // Flag to run the request in dry-run mode.
    bool dryRun = 4;
    string fields = 5;
    string key = 6;
    // The ID of the managing account.
    string merchantId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetMerchantIdSupportedCarriersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the account for which to retrieve the supported carriers.
    string merchantId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostMerchantIdTestordersRequest {
    alt alt = 1;
    OrdersCreateTestOrderRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostMerchantIdTestordersOrderIdAdvanceRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string oauth_token = 5;
    // The ID of the test order to modify.
    string orderId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetMerchantIdTestordertemplatesTemplateNameRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The name of the template to retrieve.
    enum GetMerchantIdTestordertemplatesTemplateNameRequest_TemplateName {
        GETMERCHANTIDTESTORDERTEMPLATESTEMPLATENAMEREQUEST_TEMPLATENAME_TEMPLATE1 = 0;
        GETMERCHANTIDTESTORDERTEMPLATESTEMPLATENAMEREQUEST_TEMPLATENAME_TEMPLATE1A = 1;
        GETMERCHANTIDTESTORDERTEMPLATESTEMPLATENAMEREQUEST_TEMPLATENAME_TEMPLATE1B = 2;
        GETMERCHANTIDTESTORDERTEMPLATESTEMPLATENAMEREQUEST_TEMPLATENAME_TEMPLATE2 = 3;
    }
    GetMerchantIdTestordertemplatesTemplateNameRequest_TemplateName templateName = 8;
    string userIp = 9;
}

message Account {
    // Indicates whether the merchant sells adult content.
    bool adultContent = 1;
    // List of linked AdWords accounts that are active or pending approval. To create a new link request, add a new link with status active to the list. It will remain in a pending state until approved or rejected either in the AdWords interface or through the  AdWords API. To delete an active link, or to cancel a link request, remove it from the list.
    repeated AccountAdwordsLink adwordsLinks = 2;
    // Merchant Center account ID.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "content#account".
    string kind = 4;
    // Display name for the account.
    string name = 5;
    // URL for individual seller reviews, i.e., reviews for each child account.
    string reviewsUrl = 6;
    // Client-specific, locally-unique, internal ID for the child account.
    string sellerId = 7;
    // Users with access to the account. Every account (except for subaccounts) must have at least one admin user.
    repeated AccountUser users = 8;
    // The merchant's website.
    string websiteUrl = 9;
    // List of linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status active to the list. It will remain in a pending state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.
    repeated AccountYouTubeChannelLink youtubeChannelLinks = 10;
}

message AccountAdwordsLink {
    // Customer ID of the AdWords account.
    string adwordsId = 1;
    // Status of the link between this Merchant Center account and the AdWords account. Upon retrieval, it represents the actual status of the link and can be either active if it was approved in Google AdWords or pending if it's pending approval. Upon insertion, it represents the intended status of the link. Re-uploading a link with status active when it's still pending or with status pending when it's already active will have no effect: the status will remain unchanged. Re-uploading a link with deprecated status inactive is equivalent to not submitting the link at all and will delete the link if it was active or cancel the link request if it was pending.
    string status = 2;
}

message AccountIdentifier {
    // The aggregator ID, set for aggregators and subaccounts (in that case, it represents the aggregator of the subaccount).
    string aggregatorId = 1;
    // The merchant account ID, set for individual accounts and subaccounts.
    string merchantId = 2;
}

message AccountStatus {
    // The ID of the account for which the status is reported.
    string accountId = 1;
    // A list of account level issues.
    repeated AccountStatusAccountLevelIssue accountLevelIssues = 2;
    // A list of data quality issues.
    repeated AccountStatusDataQualityIssue dataQualityIssues = 3;
    // Identifies what kind of resource this is. Value: the fixed string "content#accountStatus".
    string kind = 4;
    // Whether the account's website is claimed or not.
    bool websiteClaimed = 5;
}

message AccountStatusAccountLevelIssue {
    // Country for which this issue is reported.
    string country = 1;
    // Additional details about the issue.
    string detail = 2;
    // Issue identifier.
    string id = 3;
    // Severity of the issue.
    string severity = 4;
    // Short description of the issue.
    string title = 5;
}

message AccountStatusDataQualityIssue {
    // Country for which this issue is reported.
    string country = 1;
    // A more detailed description of the issue.
    string detail = 2;
    // Actual value displayed on the landing page.
    string displayedValue = 3;
    // Example items featuring the issue.
    repeated AccountStatusExampleItem exampleItems = 4;
    // Issue identifier.
    string id = 5;
    // Last time the account was checked for this issue.
    string lastChecked = 6;
    // The attribute name that is relevant for the issue.
    string location = 7;
    // Number of items in the account found to have the said issue.
    uint32 numItems = 8;
    // Severity of the problem.
    string severity = 9;
    // Submitted value that causes the issue.
    string submittedValue = 10;
}

message AccountStatusExampleItem {
    // Unique item ID as specified in the uploaded product data.
    string itemId = 1;
    // Landing page of the item.
    string link = 2;
    // The item value that was submitted.
    string submittedValue = 3;
    // Title of the item.
    string title = 4;
    // The actual value on the landing page.
    string valueOnLandingPage = 5;
}

message AccountTax {
    // The ID of the account to which these account tax settings belong.
    string accountId = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#accountTax".
    string kind = 2;
    // Tax rules. Updating the tax rules will enable US taxes (not reversible). Defining no rules is equivalent to not charging tax at all.
    repeated AccountTaxTaxRule rules = 3;
}

message AccountTaxTaxRule {
    // Country code in which tax is applicable.
    string country = 1;
    // State (or province) is which the tax is applicable, described by its location id (also called criteria id).
    string locationId = 2;
    // Explicit tax rate in percent, represented as a floating point number without the percentage character. Must not be negative.
    string ratePercent = 3;
    // If true, shipping charges are also taxed.
    bool shippingTaxed = 4;
    // Whether the tax rate is taken from a global tax table or specified explicitly.
    bool useGlobalRate = 5;
}

message AccountUser {
    // Whether user is an admin.
    bool admin = 1;
    // User's email address.
    string emailAddress = 2;
}

message AccountYouTubeChannelLink {
    // Channel ID.
    string channelId = 1;
    // Status of the link between this Merchant Center account and the YouTube channel. Upon retrieval, it represents the actual status of the link and can be either active if it was approved in YT Creator Studio or pending if it's pending approval. Upon insertion, it represents the intended status of the link. Re-uploading a link with status active when it's still pending or with status pending when it's already active will have no effect: the status will remain unchanged. Re-uploading a link with deprecated status inactive is equivalent to not submitting the link at all and will delete the link if it was active or cancel the link request if it was pending.
    string status = 2;
}

message AccountsAuthInfoResponse {
    // The account identifiers corresponding to the authenticated user.
    // - For an individual account: only the merchant ID is defined
    // - For an aggregator: only the aggregator ID is defined
    // - For a subaccount of an MCA: both the merchant ID and the aggregator ID are defined.
    repeated AccountIdentifier accountIdentifiers = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#accountsAuthInfoResponse".
    string kind = 2;
}

message AccountsClaimWebsiteResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#accountsClaimWebsiteResponse".
    string kind = 1;
}

message AccountsCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated AccountsCustomBatchRequestEntry entries = 1;
}

message AccountsCustomBatchRequestEntry {
    // The account to create or update. Only defined if the method is insert or update.
    Account account = 1;
    // The ID of the targeted account. Only defined if the method is get, delete or claimwebsite.
    string accountId = 2;
    // An entry ID, unique within the batch request.
    uint32 batchId = 3;
    // Whether the account should be deleted if the account has offers. Only applicable if the method is delete.
    bool force = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string method = 6;
    // Only applicable if the method is claimwebsite. Indicates whether or not to take the claim from another account in case there is a conflict.
    bool overwrite = 7;
}

message AccountsCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated AccountsCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#accountsCustomBatchResponse".
    string kind = 2;
}

message AccountsCustomBatchResponseEntry {
    // The retrieved, created, or updated account. Not defined if the method was delete or claimwebsite.
    Account account = 1;
    // The ID of the request entry this entry responds to.
    uint32 batchId = 2;
    // A list of errors defined if and only if the request failed.
    Errors errors = 3;
    // Identifies what kind of resource this is. Value: the fixed string "content#accountsCustomBatchResponseEntry".
    string kind = 4;
}

message AccountsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#accountsListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of accounts.
    string nextPageToken = 2;
    repeated Account resources = 3;
}

message AccountstatusesCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated AccountstatusesCustomBatchRequestEntry entries = 1;
}

message AccountstatusesCustomBatchRequestEntry {
    // The ID of the (sub-)account whose status to get.
    string accountId = 1;
    // An entry ID, unique within the batch request.
    uint32 batchId = 2;
    // The ID of the managing account.
    string merchantId = 3;
    // The method (get).
    string method = 4;
}

message AccountstatusesCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated AccountstatusesCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#accountstatusesCustomBatchResponse".
    string kind = 2;
}

message AccountstatusesCustomBatchResponseEntry {
    // The requested account status. Defined if and only if the request was successful.
    AccountStatus accountStatus = 1;
    // The ID of the request entry this entry responds to.
    uint32 batchId = 2;
    // A list of errors defined if and only if the request failed.
    Errors errors = 3;
}

message AccountstatusesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#accountstatusesListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of account statuses.
    string nextPageToken = 2;
    repeated AccountStatus resources = 3;
}

message AccounttaxCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated AccounttaxCustomBatchRequestEntry entries = 1;
}

message AccounttaxCustomBatchRequestEntry {
    // The ID of the account for which to get/update account tax settings.
    string accountId = 1;
    // The account tax settings to update. Only defined if the method is update.
    AccountTax accountTax = 2;
    // An entry ID, unique within the batch request.
    uint32 batchId = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string method = 5;
}

message AccounttaxCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated AccounttaxCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#accounttaxCustomBatchResponse".
    string kind = 2;
}

message AccounttaxCustomBatchResponseEntry {
    // The retrieved or updated account tax settings.
    AccountTax accountTax = 1;
    // The ID of the request entry this entry responds to.
    uint32 batchId = 2;
    // A list of errors defined if and only if the request failed.
    Errors errors = 3;
    // Identifies what kind of resource this is. Value: the fixed string "content#accounttaxCustomBatchResponseEntry".
    string kind = 4;
}

message AccounttaxListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#accounttaxListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of account tax settings.
    string nextPageToken = 2;
    repeated AccountTax resources = 3;
}

message CarrierRate {
    // Carrier service, such as "UPS" or "Fedex". The list of supported carriers can be retrieved via the getSupportedCarriers method. Required.
    string carrierName = 1;
    // Carrier service, such as "ground" or "2 days". The list of supported services for a carrier can be retrieved via the getSupportedCarriers method. Required.
    string carrierService = 2;
    // Additive shipping rate modifier. Can be negative. For example { "value": "1", "currency" : "USD" } adds $1 to the rate, { "value": "-3", "currency" : "USD" } removes $3 from the rate. Optional.
    Price flatAdjustment = 3;
    // Name of the carrier rate. Must be unique per rate group. Required.
    string name = 4;
    // Shipping origin for this carrier rate. Required.
    string originPostalCode = 5;
    // Multiplicative shipping rate modifier as a number in decimal notation. Can be negative. For example "5.4" increases the rate by 5.4%, "-3" decreases the rate by 3%. Optional.
    string percentageAdjustment = 6;
}

message CarriersCarrier {
    // The CLDR country code of the carrier (e.g., "US"). Always present.
    string country = 1;
    // The name of the carrier (e.g., "UPS"). Always present.
    string name = 2;
    // A list of supported services (e.g., "ground") for that carrier. Contains at least one service.
    repeated string services = 3;
}

message Datafeed {
    // The two-letter ISO 639-1 language in which the attributes are defined in the data feed.
    string attributeLanguage = 1;
    // [DEPRECATED] Please use target.language instead. The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for targetCountry.
    string contentLanguage = 2;
    // The type of data feed. For product inventory feeds, only feeds for local stores, not online stores, are supported.
    string contentType = 3;
    // Fetch schedule for the feed file.
    DatafeedFetchSchedule fetchSchedule = 4;
    // The filename of the feed. All feeds must have a unique file name.
    string fileName = 5;
    // Format of the feed file.
    DatafeedFormat format = 6;
    // The ID of the data feed.
    string id = 7;
    // [DEPRECATED] Please use target.includedDestination instead. The list of intended destinations (corresponds to checked check boxes in Merchant Center).
    repeated string intendedDestinations = 8;
    // Identifies what kind of resource this is. Value: the fixed string "content#datafeed".
    string kind = 9;
    // A descriptive name of the data feed.
    string name = 10;
    // [DEPRECATED] Please use target.country instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.
    string targetCountry = 11;
    // The targets this feed should apply to (country, language, destinations).
    repeated DatafeedTarget targets = 12;
}

message DatafeedFetchSchedule {
    // The day of the month the feed file should be fetched (1-31).
    uint32 dayOfMonth = 1;
    // The URL where the feed file can be fetched. Google Merchant Center will support automatic scheduled uploads using the HTTP, HTTPS, FTP, or SFTP protocols, so the value will need to be a valid link using one of those four protocols.
    string fetchUrl = 2;
    // The hour of the day the feed file should be fetched (0-23).
    uint32 hour = 3;
    // The minute of the hour the feed file should be fetched (0-59). Read-only.
    uint32 minuteOfHour = 4;
    // An optional password for fetch_url.
    string password = 5;
    // Whether the scheduled fetch is paused or not.
    bool paused = 6;
    // Time zone used for schedule. UTC by default. E.g., "America/Los_Angeles".
    string timeZone = 7;
    // An optional user name for fetch_url.
    string username = 8;
    // The day of the week the feed file should be fetched.
    string weekday = 9;
}

message DatafeedFormat {
    // Delimiter for the separation of values in a delimiter-separated values feed. If not specified, the delimiter will be auto-detected. Ignored for non-DSV data feeds.
    string columnDelimiter = 1;
    // Character encoding scheme of the data feed. If not specified, the encoding will be auto-detected.
    string fileEncoding = 2;
    // Specifies how double quotes are interpreted. If not specified, the mode will be auto-detected. Ignored for non-DSV data feeds.
    string quotingMode = 3;
}

message DatafeedStatus {
    // The country for which the status is reported, represented as a  CLDR territory code.
    string country = 1;
    // The ID of the feed for which the status is reported.
    string datafeedId = 2;
    // The list of errors occurring in the feed.
    repeated DatafeedStatusError errors = 3;
    // The number of items in the feed that were processed.
    string itemsTotal = 4;
    // The number of items in the feed that were valid.
    string itemsValid = 5;
    // Identifies what kind of resource this is. Value: the fixed string "content#datafeedStatus".
    string kind = 6;
    // The two-letter ISO 639-1 language for which the status is reported.
    string language = 7;
    // The last date at which the feed was uploaded.
    string lastUploadDate = 8;
    // The processing status of the feed.
    string processingStatus = 9;
    // The list of errors occurring in the feed.
    repeated DatafeedStatusError warnings = 10;
}

message DatafeedStatusError {
    // The code of the error, e.g., "validation/invalid_value".
    string code = 1;
    // The number of occurrences of the error in the feed.
    string count = 2;
    // A list of example occurrences of the error, grouped by product.
    repeated DatafeedStatusExample examples = 3;
    // The error message, e.g., "Invalid price".
    string message = 4;
}

message DatafeedStatusExample {
    // The ID of the example item.
    string itemId = 1;
    // Line number in the data feed where the example is found.
    string lineNumber = 2;
    // The problematic value.
    string value = 3;
}

message DatafeedTarget {
    // The country where the items in the feed will be included in the search index, represented as a  CLDR territory code.
    string country = 1;
    // The list of destinations to exclude for this target (corresponds to unchecked check boxes in Merchant Center).
    repeated string excludedDestinations = 2;
    // The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in the excluded_destination field.
    repeated string includedDestinations = 3;
    // The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for targets[].country.
    string language = 4;
}

message DatafeedsCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated DatafeedsCustomBatchRequestEntry entries = 1;
}

message DatafeedsCustomBatchRequestEntry {
    // An entry ID, unique within the batch request.
    uint32 batchId = 1;
    // The data feed to insert.
    Datafeed datafeed = 2;
    // The ID of the data feed to get or delete.
    string datafeedId = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string method = 5;
}

message DatafeedsCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated DatafeedsCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#datafeedsCustomBatchResponse".
    string kind = 2;
}

message DatafeedsCustomBatchResponseEntry {
    // The ID of the request entry this entry responds to.
    uint32 batchId = 1;
    // The requested data feed. Defined if and only if the request was successful.
    Datafeed datafeed = 2;
    // A list of errors defined if and only if the request failed.
    Errors errors = 3;
}

message DatafeedsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#datafeedsListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of datafeeds.
    string nextPageToken = 2;
    repeated Datafeed resources = 3;
}

message DatafeedstatusesCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated DatafeedstatusesCustomBatchRequestEntry entries = 1;
}

message DatafeedstatusesCustomBatchRequestEntry {
    // An entry ID, unique within the batch request.
    uint32 batchId = 1;
    // The country for which to get the datafeed status. If this parameter is provided then language must also be provided. Note that for multi-target datafeeds this parameter is required.
    string country = 2;
    // The ID of the data feed to get.
    string datafeedId = 3;
    // The language for which to get the datafeed status. If this parameter is provided then country must also be provided. Note that for multi-target datafeeds this parameter is required.
    string language = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string method = 6;
}

message DatafeedstatusesCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated DatafeedstatusesCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#datafeedstatusesCustomBatchResponse".
    string kind = 2;
}

message DatafeedstatusesCustomBatchResponseEntry {
    // The ID of the request entry this entry responds to.
    uint32 batchId = 1;
    // The requested data feed status. Defined if and only if the request was successful.
    DatafeedStatus datafeedStatus = 2;
    // A list of errors defined if and only if the request failed.
    Errors errors = 3;
}

message DatafeedstatusesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#datafeedstatusesListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of datafeed statuses.
    string nextPageToken = 2;
    repeated DatafeedStatus resources = 3;
}

message DeliveryTime {
    // Maximum number of business days that is spent in transit. 0 means same day delivery, 1 means next day delivery. Must be greater than or equal to minTransitTimeInDays. Required.
    uint32 maxTransitTimeInDays = 1;
    // Minimum number of business days that is spent in transit. 0 means same day delivery, 1 means next day delivery. Required.
    uint32 minTransitTimeInDays = 2;
}

message Error {
    // The domain of the error.
    string domain = 1;
    // A description of the error.
    string message = 2;
    // The error code.
    string reason = 3;
}

message Errors {
    // The HTTP status of the first error in errors.
    uint32 code = 1;
    // A list of errors.
    repeated Error errors = 2;
    // The message of the first error in errors.
    string message = 3;
}

message Headers {
    // A list of location ID sets. Must be non-empty. Can only be set if all other fields are not set.
    repeated LocationIdSet locations = 1;
    // A list of inclusive number of items upper bounds. The last value can be "infinity". For example ["10", "50", "infinity"] represents the headers "<= 10 items", " 50 items". Must be non-empty. Can only be set if all other fields are not set.
    repeated string numberOfItems = 2;
    // A list of postal group names. The last value can be "all other locations". Example: ["zone 1", "zone 2", "all other locations"]. The referred postal code groups must match the delivery country of the service. Must be non-empty. Can only be set if all other fields are not set.
    repeated string postalCodeGroupNames = 3;
    // be "infinity". For example [{"value": "10", "currency": "USD"}, {"value": "500", "currency": "USD"}, {"value": "infinity", "currency": "USD"}] represents the headers "<= $10", " $500". All prices within a service must have the same currency. Must be non-empty. Can only be set if all other fields are not set.
    repeated Price prices = 4;
    // be "infinity". For example [{"value": "10", "unit": "kg"}, {"value": "50", "unit": "kg"}, {"value": "infinity", "unit": "kg"}] represents the headers "<= 10kg", " 50kg". All weights within a service must have the same unit. Must be non-empty. Can only be set if all other fields are not set.
    repeated Weight weights = 5;
}

message Installment {
    // The amount the buyer has to pay per month.
    Price amount = 1;
    // The number of installments the buyer has to pay.
    string months = 2;
}

message Inventory {
    // The availability of the product.
    string availability = 1;
    // Number and amount of installments to pay for an item. Brazil only.
    Installment installment = 2;
    // Identifies what kind of resource this is. Value: the fixed string "content#inventory".
    string kind = 3;
    // Loyalty points that users receive after purchasing the item. Japan only.
    LoyaltyPoints loyaltyPoints = 4;
    // Store pickup information. Only supported for local inventory. Not setting pickup means "don't update" while setting it to the empty value ({} in JSON) means "delete". Otherwise, pickupMethod and pickupSla must be set together, unless pickupMethod is "not supported".
    InventoryPickup pickup = 5;
    // The price of the product.
    Price price = 6;
    // The quantity of the product. Must be equal to or greater than zero. Supported only for local products.
    uint32 quantity = 7;
    // The sale price of the product. Mandatory if sale_price_effective_date is defined.
    Price salePrice = 8;
    // A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates might be specified as 'null' if undecided.
    string salePriceEffectiveDate = 9;
    // The quantity of the product that is reserved for sell-on-google ads. Supported only for online products.
    uint32 sellOnGoogleQuantity = 10;
}

message InventoryCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated InventoryCustomBatchRequestEntry entries = 1;
}

message InventoryCustomBatchRequestEntry {
    // An entry ID, unique within the batch request.
    uint32 batchId = 1;
    // Price and availability of the product.
    Inventory inventory = 2;
    // The ID of the managing account.
    string merchantId = 3;
    // The ID of the product for which to update price and availability.
    string productId = 4;
    // The code of the store for which to update price and availability. Use online to update price and availability of an online product.
    string storeCode = 5;
}

message InventoryCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated InventoryCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#inventoryCustomBatchResponse".
    string kind = 2;
}

message InventoryCustomBatchResponseEntry {
    // The ID of the request entry this entry responds to.
    uint32 batchId = 1;
    // A list of errors defined if and only if the request failed.
    Errors errors = 2;
    // Identifies what kind of resource this is. Value: the fixed string "content#inventoryCustomBatchResponseEntry".
    string kind = 3;
}

message InventoryPickup {
    // Whether store pickup is available for this offer and whether the pickup option should be shown as buy, reserve, or not supported. Only supported for local inventory. Unless the value is "not supported", must be submitted together with pickupSla.
    string pickupMethod = 1;
    // The expected date that an order will be ready for pickup, relative to when the order is placed. Only supported for local inventory. Must be submitted together with pickupMethod.
    string pickupSla = 2;
}

message InventorySetRequest {
    // The availability of the product.
    string availability = 1;
    // Number and amount of installments to pay for an item. Brazil only.
    Installment installment = 2;
    // Loyalty points that users receive after purchasing the item. Japan only.
    LoyaltyPoints loyaltyPoints = 3;
    // Store pickup information. Only supported for local inventory. Not setting pickup means "don't update" while setting it to the empty value ({} in JSON) means "delete". Otherwise, pickupMethod and pickupSla must be set together, unless pickupMethod is "not supported".
    InventoryPickup pickup = 4;
    // The price of the product.
    Price price = 5;
    // The quantity of the product. Must be equal to or greater than zero. Supported only for local products.
    uint32 quantity = 6;
    // The sale price of the product. Mandatory if sale_price_effective_date is defined.
    Price salePrice = 7;
    // A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates might be specified as 'null' if undecided.
    string salePriceEffectiveDate = 8;
    // The quantity of the product that is reserved for sell-on-google ads. Supported only for online products.
    uint32 sellOnGoogleQuantity = 9;
}

message InventorySetResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#inventorySetResponse".
    string kind = 1;
}

message LocationIdSet {
    // A non-empty list of location IDs. They must all be of the same location type (e.g., state).
    repeated string locationIds = 1;
}

message LoyaltyPoints {
    // Name of loyalty points program. It is recommended to limit the name to 12 full-width characters or 24 Roman characters.
    string name = 1;
    // The retailer's loyalty points in absolute value.
    string pointsValue = 2;
    // The ratio of a point when converted to currency. Google assumes currency based on Merchant Center settings. If ratio is left out, it defaults to 1.0.
    double ratio = 3;
}

message Order {
    // Whether the order was acknowledged.
    bool acknowledged = 1;
    // The channel type of the order: "purchaseOnGoogle" or "googleExpress".
    string channelType = 2;
    // The details of the customer who placed the order.
    OrderCustomer customer = 3;
    // The details for the delivery.
    OrderDeliveryDetails deliveryDetails = 4;
    // The REST id of the order. Globally unique.
    string id = 5;
    // Identifies what kind of resource this is. Value: the fixed string "content#order".
    string kind = 6;
    // Line items that are ordered.
    repeated OrderLineItem lineItems = 7;
    string merchantId = 8;
    // Merchant-provided id of the order.
    string merchantOrderId = 9;
    // The net amount for the order. For example, if an order was originally for a grand total of $100 and a refund was issued for $20, the net amount will be $80.
    Price netAmount = 10;
    // The details of the payment method.
    OrderPaymentMethod paymentMethod = 11;
    // The status of the payment.
    string paymentStatus = 12;
    // The date when the order was placed, in ISO 8601 format.
    string placedDate = 13;
    // The details of the merchant provided promotions applied to the order. More details about the program are here.
    repeated OrderPromotion promotions = 14;
    // Refunds for the order.
    repeated OrderRefund refunds = 15;
    // Shipments of the order.
    repeated OrderShipment shipments = 16;
    // The total cost of shipping for all items.
    Price shippingCost = 17;
    // The tax for the total shipping cost.
    Price shippingCostTax = 18;
    // The requested shipping option.
    string shippingOption = 19;
    // The status of the order.
    string status = 20;
}

message OrderAddress {
    // CLDR country code (e.g. "US").
    string country = 1;
    // Strings representing the lines of the printed label for mailing the order, for example:
    // John Smith
    // 1600 Amphitheatre Parkway
    // Mountain View, CA, 94043
    // United States
    repeated string fullAddress = 2;
    // Whether the address is a post office box.
    bool isPostOfficeBox = 3;
    // City, town or commune. May also include dependent localities or sublocalities (e.g. neighborhoods or suburbs).
    string locality = 4;
    // Postal Code or ZIP (e.g. "94043").
    string postalCode = 5;
    // Name of the recipient.
    string recipientName = 6;
    // Top-level administrative subdivision of the country (e.g. "CA").
    string region = 7;
    // Street-level part of the address.
    repeated string streetAddress = 8;
}

message OrderCancellation {
    // The actor that created the cancellation.
    string actor = 1;
    // Date on which the cancellation has been created, in ISO 8601 format.
    string creationDate = 2;
    // The quantity that was canceled.
    uint32 quantity = 3;
    // The reason for the cancellation. Orders that are cancelled with a noInventory reason will lead to the removal of the product from POG until you make an update to that product. This will not affect your Shopping ads.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrderCustomer {
    // Email address of the customer.
    string email = 1;
    // If set, this indicates the user explicitly chose to opt in or out of providing marketing rights to the merchant. If unset, this indicates the user has already made this choice in a previous purchase, and was thus not shown the marketing right opt in/out checkbox during the checkout flow.
    bool explicitMarketingPreference = 2;
    // Full name of the customer.
    string fullName = 3;
}

message OrderDeliveryDetails {
    // The delivery address
    OrderAddress address = 1;
    // The phone number of the person receiving the delivery.
    string phoneNumber = 2;
}

message OrderLineItem {
    // Cancellations of the line item.
    repeated OrderCancellation cancellations = 1;
    // The channel type of the order: "purchaseOnGoogle" or "googleExpress".
    string channelType = 2;
    // The id of the line item.
    string id = 3;
    // Total price for the line item. For example, if two items for $10 are purchased, the total price will be $20.
    Price price = 4;
    // Product data from the time of the order placement.
    OrderLineItemProduct product = 5;
    // Number of items canceled.
    uint32 quantityCanceled = 6;
    // Number of items delivered.
    uint32 quantityDelivered = 7;
    // Number of items ordered.
    uint32 quantityOrdered = 8;
    // Number of items pending.
    uint32 quantityPending = 9;
    // Number of items returned.
    uint32 quantityReturned = 10;
    // Number of items shipped.
    uint32 quantityShipped = 11;
    // Details of the return policy for the line item.
    OrderLineItemReturnInfo returnInfo = 12;
    // Returns of the line item.
    repeated OrderReturn returns = 13;
    // Details of the requested shipping for the line item.
    OrderLineItemShippingDetails shippingDetails = 14;
    // Total tax amount for the line item. For example, if two items are purchased, and each have a cost tax of $2, the total tax amount will be $4.
    Price tax = 15;
}

message OrderLineItemProduct {
    // Brand of the item.
    string brand = 1;
    // The item's channel (online or local).
    string channel = 2;
    // Condition or state of the item.
    string condition = 3;
    // The two-letter ISO 639-1 language code for the item.
    string contentLanguage = 4;
    // Global Trade Item Number (GTIN) of the item.
    string gtin = 5;
    // The REST id of the product.
    string id = 6;
    // URL of an image of the item.
    string imageLink = 7;
    // Shared identifier for all variants of the same product.
    string itemGroupId = 8;
    // Manufacturer Part Number (MPN) of the item.
    string mpn = 9;
    // An identifier of the item.
    string offerId = 10;
    // Price of the item.
    Price price = 11;
    // URL to the cached image shown to the user when order was placed.
    string shownImage = 12;
    // The CLDR territory code of the target country of the product.
    string targetCountry = 13;
    // The title of the product.
    string title = 14;
    // Variant attributes for the item. These are dimensions of the product, such as color, gender, material, pattern, and size. You can find a comprehensive list of variant attributes here.
    repeated OrderLineItemProductVariantAttribute variantAttributes = 15;
}

message OrderLineItemProductVariantAttribute {
    // The dimension of the variant.
    string dimension = 1;
    // The value for the dimension.
    string value = 2;
}

message OrderLineItemReturnInfo {
    // How many days later the item can be returned.
    int32 daysToReturn = 1;
    // Whether the item is returnable.
    bool isReturnable = 2;
    // URL of the item return policy.
    string policyUrl = 3;
}

message OrderLineItemShippingDetails {
    // The delivery by date, in ISO 8601 format.
    string deliverByDate = 1;
    // Details of the shipping method.
    OrderLineItemShippingDetailsMethod method = 2;
    // The ship by date, in ISO 8601 format.
    string shipByDate = 3;
}

message OrderLineItemShippingDetailsMethod {
    // The carrier for the shipping. Optional. See shipments[].carrier for a list of acceptable values.
    string carrier = 1;
    // Maximum transit time.
    uint32 maxDaysInTransit = 2;
    // The name of the shipping method.
    string methodName = 3;
    // Minimum transit time.
    uint32 minDaysInTransit = 4;
}

message OrderPaymentMethod {
    // The billing address.
    OrderAddress billingAddress = 1;
    // The card expiration month (January = 1, February = 2 etc.).
    int32 expirationMonth = 2;
    // The card expiration year (4-digit, e.g. 2015).
    int32 expirationYear = 3;
    // The last four digits of the card number.
    string lastFourDigits = 4;
    // The billing phone number.
    string phoneNumber = 5;
    // The type of instrument.
    // 
    // Acceptable values are:  
    // - "AMEX" 
    // - "DISCOVER" 
    // - "JCB" 
    // - "MASTERCARD" 
    // - "UNIONPAY" 
    // - "VISA" 
    // - ""
    string type = 6;
}

message OrderPromotion {
    repeated OrderPromotionBenefit benefits = 1;
    // The date and time frame when the promotion is active and ready for validation review. Note that the promotion live time may be delayed for a few hours due to the validation review.
    // Start date and end date are separated by a forward slash (/). The start date is specified by the format (YYYY-MM-DD), followed by the letter ?T?, the time of the day when the sale starts (in Greenwich Mean Time, GMT), followed by an expression of the time zone for the sale. The end date is in the same format.
    string effectiveDates = 2;
    // Optional. The text code that corresponds to the promotion when applied on the retailer?s website.
    string genericRedemptionCode = 3;
    // The unique ID of the promotion.
    string id = 4;
    // The full title of the promotion.
    string longTitle = 5;
    // Whether the promotion is applicable to all products or only specific products.
    string productApplicability = 6;
    // Indicates that the promotion is valid online.
    string redemptionChannel = 7;
}

message OrderPromotionBenefit {
    // The discount in the order price when the promotion is applied.
    Price discount = 1;
    // The OfferId(s) that were purchased in this order and map to this specific benefit of the promotion.
    repeated string offerIds = 2;
    // Further describes the benefit of the promotion. Note that we will expand on this enumeration as we support new promotion sub-types.
    string subType = 3;
    // The impact on tax when the promotion is applied.
    Price taxImpact = 4;
    // Describes whether the promotion applies to products (e.g. 20% off) or to shipping (e.g. Free Shipping).
    string type = 5;
}

message OrderRefund {
    // The actor that created the refund.
    string actor = 1;
    // The amount that is refunded.
    Price amount = 2;
    // Date on which the item has been created, in ISO 8601 format.
    string creationDate = 3;
    // The reason for the refund.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrderReturn {
    // The actor that created the refund.
    string actor = 1;
    // Date on which the item has been created, in ISO 8601 format.
    string creationDate = 2;
    // Quantity that is returned.
    uint32 quantity = 3;
    // The reason for the return.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrderShipment {
    // The carrier handling the shipment.
    // 
    // Acceptable values are:  
    // - "gsx" 
    // - "ups" 
    // - "united parcel service" 
    // - "usps" 
    // - "united states postal service" 
    // - "fedex" 
    // - "dhl" 
    // - "ecourier" 
    // - "cxt" 
    // - "google" 
    // - "on trac" 
    // - "ontrac" 
    // - "on-trac" 
    // - "on_trac" 
    // - "delvic" 
    // - "dynamex" 
    // - "lasership" 
    // - "smartpost" 
    // - "fedex smartpost" 
    // - "mpx" 
    // - "uds" 
    // - "united delivery service"
    string carrier = 1;
    // Date on which the shipment has been created, in ISO 8601 format.
    string creationDate = 2;
    // Date on which the shipment has been delivered, in ISO 8601 format. Present only if status is delievered
    string deliveryDate = 3;
    // The id of the shipment.
    string id = 4;
    // The line items that are shipped.
    repeated OrderShipmentLineItemShipment lineItems = 5;
    // The status of the shipment.
    string status = 6;
    // The tracking id for the shipment.
    string trackingId = 7;
}

message OrderShipmentLineItemShipment {
    // The id of the line item that is shipped.
    string lineItemId = 1;
    // The quantity that is shipped.
    uint32 quantity = 2;
}

message OrdersAcknowledgeRequest {
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 1;
}

message OrdersAcknowledgeResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersAcknowledgeResponse".
    string kind = 2;
}

message OrdersAdvanceTestOrderResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersAdvanceTestOrderResponse".
    string kind = 1;
}

message OrdersCancelLineItemRequest {
    // Amount to refund for the cancelation. Optional. If not set, Google will calculate the default based on the price and tax of the items involved. The amount must not be larger than the net amount left on the order.
    Price amount = 1;
    // The ID of the line item to cancel.
    string lineItemId = 2;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 3;
    // The quantity to cancel.
    uint32 quantity = 4;
    // The reason for the cancellation.
    string reason = 5;
    // The explanation of the reason.
    string reasonText = 6;
}

message OrdersCancelLineItemResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCancelLineItemResponse".
    string kind = 2;
}

message OrdersCancelRequest {
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 1;
    // The reason for the cancellation.
    string reason = 2;
    // The explanation of the reason.
    string reasonText = 3;
}

message OrdersCancelResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCancelResponse".
    string kind = 2;
}

message OrdersCreateTestOrderRequest {
    // The test order template to use. Specify as an alternative to testOrder as a shortcut for retrieving a template and then creating an order using that template.
    string templateName = 1;
    // The test order to create.
    TestOrder testOrder = 2;
}

message OrdersCreateTestOrderResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCreateTestOrderResponse".
    string kind = 1;
    // The ID of the newly created test order.
    string orderId = 2;
}

message OrdersCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated OrdersCustomBatchRequestEntry entries = 1;
}

message OrdersCustomBatchRequestEntry {
    // An entry ID, unique within the batch request.
    uint32 batchId = 1;
    // Required for cancel method.
    OrdersCustomBatchRequestEntryCancel cancel = 2;
    // Required for cancelLineItem method.
    OrdersCustomBatchRequestEntryCancelLineItem cancelLineItem = 3;
    // The ID of the managing account.
    string merchantId = 4;
    // The merchant order id. Required for updateMerchantOrderId and getByMerchantOrderId methods.
    string merchantOrderId = 5;
    // The method to apply.
    string method = 6;
    // The ID of the operation. Unique across all operations for a given order. Required for all methods beside get and getByMerchantOrderId.
    string operationId = 7;
    // The ID of the order. Required for all methods beside getByMerchantOrderId.
    string orderId = 8;
    // Required for refund method.
    OrdersCustomBatchRequestEntryRefund refund = 9;
    // Required for returnLineItem method.
    OrdersCustomBatchRequestEntryReturnLineItem returnLineItem = 10;
    // Required for shipLineItems method.
    OrdersCustomBatchRequestEntryShipLineItems shipLineItems = 11;
    // Required for updateShipment method.
    OrdersCustomBatchRequestEntryUpdateShipment updateShipment = 12;
}

message OrdersCustomBatchRequestEntryCancel {
    // The reason for the cancellation.
    string reason = 1;
    // The explanation of the reason.
    string reasonText = 2;
}

message OrdersCustomBatchRequestEntryCancelLineItem {
    // Amount to refund for the cancelation. Optional. If not set, Google will calculate the default based on the price and tax of the items involved. The amount must not be larger than the net amount left on the order.
    Price amount = 1;
    // The ID of the line item to cancel.
    string lineItemId = 2;
    // The quantity to cancel.
    uint32 quantity = 3;
    // The reason for the cancellation.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrdersCustomBatchRequestEntryRefund {
    // The amount that is refunded.
    Price amount = 1;
    // The reason for the refund.
    string reason = 2;
    // The explanation of the reason.
    string reasonText = 3;
}

message OrdersCustomBatchRequestEntryReturnLineItem {
    // The ID of the line item to return.
    string lineItemId = 1;
    // The quantity to return.
    uint32 quantity = 2;
    // The reason for the return.
    string reason = 3;
    // The explanation of the reason.
    string reasonText = 4;
}

message OrdersCustomBatchRequestEntryShipLineItems {
    // Deprecated. Please use shipmentInfo instead. The carrier handling the shipment. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // Line items to ship.
    repeated OrderShipmentLineItemShipment lineItems = 2;
    // Deprecated. Please use shipmentInfo instead. The ID of the shipment.
    string shipmentId = 3;
    // Shipment information. This field is repeated because a single line item can be shipped in several packages (and have several tracking IDs).
    repeated OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo shipmentInfos = 4;
    // Deprecated. Please use shipmentInfo instead. The tracking id for the shipment.
    string trackingId = 5;
}

message OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo {
    // The carrier handling the shipment. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // The ID of the shipment.
    string shipmentId = 2;
    // The tracking id for the shipment.
    string trackingId = 3;
}

message OrdersCustomBatchRequestEntryUpdateShipment {
    // The carrier handling the shipment. Not updated if missing. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // The ID of the shipment.
    string shipmentId = 2;
    // New status for the shipment. Not updated if missing.
    string status = 3;
    // The tracking id for the shipment. Not updated if missing.
    string trackingId = 4;
}

message OrdersCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated OrdersCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCustomBatchResponse".
    string kind = 2;
}

message OrdersCustomBatchResponseEntry {
    // The ID of the request entry this entry responds to.
    uint32 batchId = 1;
    // A list of errors defined if and only if the request failed.
    Errors errors = 2;
    // The status of the execution. Only defined if the method is not get or getByMerchantOrderId and if the request was successful.
    string executionStatus = 3;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCustomBatchResponseEntry".
    string kind = 4;
    // The retrieved order. Only defined if the method is get and if the request was successful.
    Order order = 5;
}

message OrdersGetByMerchantOrderIdResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersGetByMerchantOrderIdResponse".
    string kind = 1;
    // The requested order.
    Order order = 2;
}

message OrdersGetTestOrderTemplateResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersGetTestOrderTemplateResponse".
    string kind = 1;
    // The requested test order template.
    TestOrder template = 2;
}

message OrdersListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of orders.
    string nextPageToken = 2;
    repeated Order resources = 3;
}

message OrdersRefundRequest {
    // The amount that is refunded.
    Price amount = 1;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 2;
    // The reason for the refund.
    string reason = 3;
    // The explanation of the reason.
    string reasonText = 4;
}

message OrdersRefundResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersRefundResponse".
    string kind = 2;
}

message OrdersReturnLineItemRequest {
    // The ID of the line item to return.
    string lineItemId = 1;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 2;
    // The quantity to return.
    uint32 quantity = 3;
    // The reason for the return.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrdersReturnLineItemResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersReturnLineItemResponse".
    string kind = 2;
}

message OrdersShipLineItemsRequest {
    // Deprecated. Please use shipmentInfo instead. The carrier handling the shipment. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // Line items to ship.
    repeated OrderShipmentLineItemShipment lineItems = 2;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 3;
    // Deprecated. Please use shipmentInfo instead. The ID of the shipment.
    string shipmentId = 4;
    // Shipment information. This field is repeated because a single line item can be shipped in several packages (and have several tracking IDs).
    repeated OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo shipmentInfos = 5;
    // Deprecated. Please use shipmentInfo instead. The tracking id for the shipment.
    string trackingId = 6;
}

message OrdersShipLineItemsResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersShipLineItemsResponse".
    string kind = 2;
}

message OrdersUpdateMerchantOrderIdRequest {
    // The merchant order id to be assigned to the order. Must be unique per merchant.
    string merchantOrderId = 1;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 2;
}

message OrdersUpdateMerchantOrderIdResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersUpdateMerchantOrderIdResponse".
    string kind = 2;
}

message OrdersUpdateShipmentRequest {
    // The carrier handling the shipment. Not updated if missing. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 2;
    // The ID of the shipment.
    string shipmentId = 3;
    // New status for the shipment. Not updated if missing.
    string status = 4;
    // The tracking id for the shipment. Not updated if missing.
    string trackingId = 5;
}

message OrdersUpdateShipmentResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersUpdateShipmentResponse".
    string kind = 2;
}

message PostalCodeGroup {
    // The CLDR territory code of the country the postal code group applies to. Required.
    string country = 1;
    // The name of the postal code group, referred to in headers. Required.
    string name = 2;
    // A range of postal codes. Required.
    repeated PostalCodeRange postalCodeRanges = 3;
}

message PostalCodeRange {
    // A postal code or a pattern of the form prefix* denoting the inclusive lower bound of the range defining the area. Examples values: "94108", "9410*", "9*". Required.
    string postalCodeRangeBegin = 1;
    // A postal code or a pattern of the form prefix* denoting the inclusive upper bound of the range defining the area. It must have the same length as postalCodeRangeBegin: if postalCodeRangeBegin is a postal code then postalCodeRangeEnd must be a postal code too; if postalCodeRangeBegin is a pattern then postalCodeRangeEnd must be a pattern with the same prefix length. Optional: if not set, then the area is defined as being all the postal codes matching postalCodeRangeBegin.
    string postalCodeRangeEnd = 2;
}

message Price {
    // The currency of the price.
    string currency = 1;
    // The price represented as a number.
    string value = 2;
}

message Product {
    // Additional URLs of images of the item.
    repeated string additionalImageLinks = 1;
    // Additional categories of the item (formatted as in products feed specification).
    repeated string additionalProductTypes = 2;
    // Set to true if the item is targeted towards adults.
    bool adult = 3;
    // Used to group items in an arbitrary way. Only for CPA%, discouraged otherwise.
    string adwordsGrouping = 4;
    // Similar to adwords_grouping, but only works on CPC.
    repeated string adwordsLabels = 5;
    // Allows advertisers to override the item URL when the product is shown within the context of Product Ads.
    string adwordsRedirect = 6;
    // Target age group of the item.
    string ageGroup = 7;
    // Specifies the intended aspects for the product.
    repeated ProductAspect aspects = 8;
    // Availability status of the item.
    string availability = 9;
    // The day a pre-ordered product becomes available for delivery, in ISO 8601 format.
    string availabilityDate = 10;
    // Brand of the item.
    string brand = 11;
    // The item's channel (online or local).
    string channel = 12;
    // Color of the item.
    string color = 13;
    // Condition or state of the item.
    string condition = 14;
    // The two-letter ISO 639-1 language code for the item.
    string contentLanguage = 15;
    // A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form (e.g., { "name": "size type", "type": "text", "value": "regular" }). This is useful for submitting attributes not explicitly exposed by the API.
    repeated ProductCustomAttribute customAttributes = 16;
    // A list of custom (merchant-provided) custom attribute groups.
    repeated ProductCustomGroup customGroups = 17;
    // Custom label 0 for custom grouping of items in a Shopping campaign.
    string customLabel0 = 18;
    // Custom label 1 for custom grouping of items in a Shopping campaign.
    string customLabel1 = 19;
    // Custom label 2 for custom grouping of items in a Shopping campaign.
    string customLabel2 = 20;
    // Custom label 3 for custom grouping of items in a Shopping campaign.
    string customLabel3 = 21;
    // Custom label 4 for custom grouping of items in a Shopping campaign.
    string customLabel4 = 22;
    // Description of the item.
    string description = 23;
    // Specifies the intended destinations for the product.
    repeated ProductDestination destinations = 24;
    // An identifier for an item for dynamic remarketing campaigns.
    string displayAdsId = 25;
    // URL directly to your item's landing page for dynamic remarketing campaigns.
    string displayAdsLink = 26;
    // Advertiser-specified recommendations.
    repeated string displayAdsSimilarIds = 27;
    // Title of an item for dynamic remarketing campaigns.
    string displayAdsTitle = 28;
    // Offer margin for dynamic remarketing campaigns.
    double displayAdsValue = 29;
    // The energy efficiency class as defined in EU directive 2010/30/EU.
    string energyEfficiencyClass = 30;
    // Date on which the item should expire, as specified upon insertion, in ISO 8601 format. The actual expiration date in Google Shopping is exposed in productstatuses as googleExpirationDate and might be earlier if expirationDate is too far in the future.
    string expirationDate = 31;
    // Target gender of the item.
    string gender = 32;
    // Google's category of the item (see Google product taxonomy).
    string googleProductCategory = 33;
    // Global Trade Item Number (GTIN) of the item.
    string gtin = 34;
    // The REST id of the product.
    string id = 35;
    // False when the item does not have unique product identifiers appropriate to its category, such as GTIN, MPN, and brand. Required according to the Unique Product Identifier Rules for all target countries except for Canada.
    bool identifierExists = 36;
    // URL of an image of the item.
    string imageLink = 37;
    // Number and amount of installments to pay for an item. Brazil only.
    Installment installment = 38;
    // Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price.
    bool isBundle = 39;
    // Shared identifier for all variants of the same product.
    string itemGroupId = 40;
    // Identifies what kind of resource this is. Value: the fixed string "content#product".
    string kind = 41;
    // URL directly linking to your item's page on your website.
    string link = 42;
    // Loyalty points that users receive after purchasing the item. Japan only.
    LoyaltyPoints loyaltyPoints = 43;
    // The material of which the item is made.
    string material = 44;
    // Maximal product handling time (in business days).
    string maxHandlingTime = 45;
    // Minimal product handling time (in business days).
    string minHandlingTime = 46;
    // Link to a mobile-optimized version of the landing page.
    string mobileLink = 47;
    // Manufacturer Part Number (MPN) of the item.
    string mpn = 48;
    // The number of identical products in a merchant-defined multipack.
    string multipack = 49;
    // An identifier of the item. Leading and trailing whitespaces are stripped and multiple whitespaces are replaced by a single whitespace upon submission. Only valid unicode characters are accepted. See the products feed specification for details.
    string offerId = 50;
    // Whether an item is available for purchase only online.
    bool onlineOnly = 51;
    // The item's pattern (e.g. polka dots).
    string pattern = 52;
    // Price of the item.
    Price price = 53;
    // Your category of the item (formatted as in products feed specification).
    string productType = 54;
    // The unique ID of a promotion.
    repeated string promotionIds = 55;
    // Advertised sale price of the item.
    Price salePrice = 56;
    // Date range during which the item is on sale (see products feed specification).
    string salePriceEffectiveDate = 57;
    // The quantity of the product that is reserved for sell-on-google ads.
    string sellOnGoogleQuantity = 58;
    // Shipping rules.
    repeated ProductShipping shipping = 59;
    // Height of the item for shipping.
    ProductShippingDimension shippingHeight = 60;
    // The shipping label of the product, used to group product in account-level shipping rules.
    string shippingLabel = 61;
    // Length of the item for shipping.
    ProductShippingDimension shippingLength = 62;
    // Weight of the item for shipping.
    ProductShippingWeight shippingWeight = 63;
    // Width of the item for shipping.
    ProductShippingDimension shippingWidth = 64;
    // System in which the size is specified. Recommended for apparel items.
    string sizeSystem = 65;
    // The cut of the item. Recommended for apparel items.
    string sizeType = 66;
    // Size of the item.
    repeated string sizes = 67;
    // The CLDR territory code for the item.
    string targetCountry = 68;
    // Tax information.
    repeated ProductTax taxes = 69;
    // Title of the item.
    string title = 70;
    // The preference of the denominator of the unit price.
    ProductUnitPricingBaseMeasure unitPricingBaseMeasure = 71;
    // The measure and dimension of an item.
    ProductUnitPricingMeasure unitPricingMeasure = 72;
    // The read-only list of intended destinations which passed validation.
    repeated string validatedDestinations = 73;
    // Read-only warnings.
    repeated Error warnings = 74;
}

message ProductAspect {
    // The name of the aspect.
    string aspectName = 1;
    // The name of the destination. Leave out to apply to all destinations.
    string destinationName = 2;
    // Whether the aspect is required, excluded or should be validated.
    string intention = 3;
}

message ProductCustomAttribute {
    // The name of the attribute. Underscores will be replaced by spaces upon insertion.
    string name = 1;
    // The type of the attribute.
    string type = 2;
    // Free-form unit of the attribute. Unit can only be used for values of type INT or FLOAT.
    string unit = 3;
    // The value of the attribute.
    string value = 4;
}

message ProductCustomGroup {
    // The sub-attributes.
    repeated ProductCustomAttribute attributes = 1;
    // The name of the group. Underscores will be replaced by spaces upon insertion.
    string name = 2;
}

message ProductDestination {
    // The name of the destination.
    string destinationName = 1;
    // Whether the destination is required, excluded or should be validated.
    string intention = 2;
}

message ProductShipping {
    // The CLDR territory code of the country to which an item will ship.
    string country = 1;
    // The location where the shipping is applicable, represented by a location group name.
    string locationGroupName = 2;
    // The numeric id of a location that the shipping rate applies to as defined in the AdWords API.
    string locationId = 3;
    // The postal code range that the shipping rate applies to, represented by a postal code, a postal code prefix followed by a * wildcard, a range between two postal codes or two postal code prefixes of equal length.
    string postalCode = 4;
    // Fixed shipping price, represented as a number.
    Price price = 5;
    // The geographic region to which a shipping rate applies.
    string region = 6;
    // A free-form description of the service class or delivery speed.
    string service = 7;
}

message ProductShippingDimension {
    // The unit of value.
    // 
    // Acceptable values are:  
    // - "cm" 
    // - "in"
    string unit = 1;
    // The dimension of the product used to calculate the shipping cost of the item.
    double value = 2;
}

message ProductShippingWeight {
    // The unit of value.
    string unit = 1;
    // The weight of the product used to calculate the shipping cost of the item.
    double value = 2;
}

message ProductStatus {
    // Date on which the item has been created, in ISO 8601 format.
    string creationDate = 1;
    // A list of data quality issues associated with the product.
    repeated ProductStatusDataQualityIssue dataQualityIssues = 2;
    // The intended destinations for the product.
    repeated ProductStatusDestinationStatus destinationStatuses = 3;
    // Date on which the item expires in Google Shopping, in ISO 8601 format.
    string googleExpirationDate = 4;
    // Identifies what kind of resource this is. Value: the fixed string "content#productStatus".
    string kind = 5;
    // Date on which the item has been last updated, in ISO 8601 format.
    string lastUpdateDate = 6;
    // The link to the product.
    string link = 7;
    // Product data after applying all the join inputs.
    Product product = 8;
    // The id of the product for which status is reported.
    string productId = 9;
    // The title of the product.
    string title = 10;
}

message ProductStatusDataQualityIssue {
    // A more detailed error string.
    string detail = 1;
    // The fetch status for landing_page_errors.
    string fetchStatus = 2;
    // The id of the data quality issue.
    string id = 3;
    // The attribute name that is relevant for the issue.
    string location = 4;
    // The severity of the data quality issue.
    string severity = 5;
    // The time stamp of the data quality issue.
    string timestamp = 6;
    // The value of that attribute that was found on the landing page
    string valueOnLandingPage = 7;
    // The value the attribute had at time of evaluation.
    string valueProvided = 8;
}

message ProductStatusDestinationStatus {
    // The destination's approval status.
    string approvalStatus = 1;
    // The name of the destination
    string destination = 2;
    // Whether the destination is required, excluded, selected by default or should be validated.
    string intention = 3;
}

message ProductTax {
    // The country within which the item is taxed, specified as a CLDR territory code.
    string country = 1;
    // The numeric id of a location that the tax rate applies to as defined in the AdWords API.
    string locationId = 2;
    // The postal code range that the tax rate applies to, represented by a ZIP code, a ZIP code prefix using * wildcard, a range between two ZIP codes or two ZIP code prefixes of equal length. Examples: 94114, 94*, 94002-95460, 94*-95*.
    string postalCode = 3;
    // The percentage of tax rate that applies to the item price.
    double rate = 4;
    // The geographic region to which the tax rate applies.
    string region = 5;
    // Set to true if tax is charged on shipping.
    bool taxShip = 6;
}

message ProductUnitPricingBaseMeasure {
    // The unit of the denominator.
    string unit = 1;
    // The denominator of the unit price.
    string value = 2;
}

message ProductUnitPricingMeasure {
    // The unit of the measure.
    string unit = 1;
    // The measure of an item.
    double value = 2;
}

message ProductsCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated ProductsCustomBatchRequestEntry entries = 1;
}

message ProductsCustomBatchRequestEntry {
    // An entry ID, unique within the batch request.
    uint32 batchId = 1;
    // The ID of the managing account.
    string merchantId = 2;
    string method = 3;
    // The product to insert. Only required if the method is insert.
    Product product = 4;
    // The ID of the product to get or delete. Only defined if the method is get or delete.
    string productId = 5;
}

message ProductsCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated ProductsCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#productsCustomBatchResponse".
    string kind = 2;
}

message ProductsCustomBatchResponseEntry {
    // The ID of the request entry this entry responds to.
    uint32 batchId = 1;
    // A list of errors defined if and only if the request failed.
    Errors errors = 2;
    // Identifies what kind of resource this is. Value: the fixed string "content#productsCustomBatchResponseEntry".
    string kind = 3;
    // The inserted product. Only defined if the method is insert and if the request was successful.
    Product product = 4;
}

message ProductsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#productsListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of products.
    string nextPageToken = 2;
    repeated Product resources = 3;
}

message ProductstatusesCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated ProductstatusesCustomBatchRequestEntry entries = 1;
}

message ProductstatusesCustomBatchRequestEntry {
    // An entry ID, unique within the batch request.
    uint32 batchId = 1;
    bool includeAttributes = 2;
    // The ID of the managing account.
    string merchantId = 3;
    string method = 4;
    // The ID of the product whose status to get.
    string productId = 5;
}

message ProductstatusesCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated ProductstatusesCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#productstatusesCustomBatchResponse".
    string kind = 2;
}

message ProductstatusesCustomBatchResponseEntry {
    // The ID of the request entry this entry responds to.
    uint32 batchId = 1;
    // A list of errors, if the request failed.
    Errors errors = 2;
    // Identifies what kind of resource this is. Value: the fixed string "content#productstatusesCustomBatchResponseEntry".
    string kind = 3;
    // The requested product status. Only defined if the request was successful.
    ProductStatus productStatus = 4;
}

message ProductstatusesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#productstatusesListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of products statuses.
    string nextPageToken = 2;
    repeated ProductStatus resources = 3;
}

message RateGroup {
    // A list of shipping labels defining the products to which this rate group applies to. This is a disjunction: only one of the labels has to match for the rate group to apply. May only be empty for the last rate group of a service. Required.
    repeated string applicableShippingLabels = 1;
    // A list of carrier rates that can be referred to by mainTable or singleValue.
    repeated CarrierRate carrierRates = 2;
    // A table defining the rate group, when singleValue is not expressive enough. Can only be set if singleValue is not set.
    Table mainTable = 3;
    // The value of the rate group (e.g. flat rate $10). Can only be set if mainTable and subtables are not set.
    Value singleValue = 4;
    // A list of subtables referred to by mainTable. Can only be set if mainTable is set.
    repeated Table subtables = 5;
}

message Row {
    // The list of cells that constitute the row. Must have the same length as columnHeaders for two-dimensional tables, a length of 1 for one-dimensional tables. Required.
    repeated Value cells = 1;
}

message Service {
    // A boolean exposing the active status of the shipping service. Required.
    bool active = 1;
    // The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.
    string currency = 2;
    // The CLDR territory code of the country to which the service applies. Required.
    string deliveryCountry = 3;
    // Time spent in various aspects from order to the delivery of the product. Required.
    DeliveryTime deliveryTime = 4;
    // Minimum order value for this service. If set, indicates that customers will have to spend at least this amount. All prices within a service must have the same currency.
    Price minimumOrderValue = 5;
    // Free-form name of the service. Must be unique within target account. Required.
    string name = 6;
    // Shipping rate group definitions. Only the last one is allowed to have an empty applicableShippingLabels, which means "everything else". The other applicableShippingLabels must not overlap.
    repeated RateGroup rateGroups = 7;
}

message ShippingSettings {
    // The ID of the account to which these account shipping settings belong. Ignored upon update, always present in get request responses.
    string accountId = 1;
    // A list of postal code groups that can be referred to in services. Optional.
    repeated PostalCodeGroup postalCodeGroups = 2;
    // The target account's list of services. Optional.
    repeated Service services = 3;
}

message ShippingsettingsCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated ShippingsettingsCustomBatchRequestEntry entries = 1;
}

message ShippingsettingsCustomBatchRequestEntry {
    // The ID of the account for which to get/update account shipping settings.
    string accountId = 1;
    // An entry ID, unique within the batch request.
    uint32 batchId = 2;
    // The ID of the managing account.
    string merchantId = 3;
    string method = 4;
    // The account shipping settings to update. Only defined if the method is update.
    ShippingSettings shippingSettings = 5;
}

message ShippingsettingsCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated ShippingsettingsCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsCustomBatchResponse".
    string kind = 2;
}

message ShippingsettingsCustomBatchResponseEntry {
    // The ID of the request entry to which this entry responds.
    uint32 batchId = 1;
    // A list of errors defined if, and only if, the request failed.
    Errors errors = 2;
    // Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsCustomBatchResponseEntry".
    string kind = 3;
    // The retrieved or updated account shipping settings.
    ShippingSettings shippingSettings = 4;
}

message ShippingsettingsGetSupportedCarriersResponse {
    // A list of supported carriers. May be empty.
    repeated CarriersCarrier carriers = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsGetSupportedCarriersResponse".
    string kind = 2;
}

message ShippingsettingsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of shipping settings.
    string nextPageToken = 2;
    repeated ShippingSettings resources = 3;
}

message Table {
    // Headers of the table's columns. Optional: if not set then the table has only one dimension.
    Headers columnHeaders = 1;
    // Name of the table. Required for subtables, ignored for the main table.
    string name = 2;
    // Headers of the table's rows. Required.
    Headers rowHeaders = 3;
    // The list of rows that constitute the table. Must have the same length as rowHeaders. Required.
    repeated Row rows = 4;
}

message TestOrder {
    // The details of the customer who placed the order.
    TestOrderCustomer customer = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#testOrder".
    string kind = 2;
    // Line items that are ordered. At least one line item must be provided.
    repeated TestOrderLineItem lineItems = 3;
    // The details of the payment method.
    TestOrderPaymentMethod paymentMethod = 4;
    // Identifier of one of the predefined delivery addresses for the delivery.
    string predefinedDeliveryAddress = 5;
    // The details of the merchant provided promotions applied to the order. More details about the program are here.
    repeated OrderPromotion promotions = 6;
    // The total cost of shipping for all items.
    Price shippingCost = 7;
    // The tax for the total shipping cost.
    Price shippingCostTax = 8;
    // The requested shipping option.
    string shippingOption = 9;
}

message TestOrderCustomer {
    // Email address of the customer.
    string email = 1;
    // If set, this indicates the user explicitly chose to opt in or out of providing marketing rights to the merchant. If unset, this indicates the user has already made this choice in a previous purchase, and was thus not shown the marketing right opt in/out checkbox during the checkout flow. Optional.
    bool explicitMarketingPreference = 2;
    // Full name of the customer.
    string fullName = 3;
}

message TestOrderLineItem {
    // Product data from the time of the order placement.
    TestOrderLineItemProduct product = 1;
    // Number of items ordered.
    uint32 quantityOrdered = 2;
    // Details of the return policy for the line item.
    OrderLineItemReturnInfo returnInfo = 3;
    // Details of the requested shipping for the line item.
    OrderLineItemShippingDetails shippingDetails = 4;
    // Unit tax for the line item.
    Price unitTax = 5;
}

message TestOrderLineItemProduct {
    // Brand of the item.
    string brand = 1;
    // The item's channel.
    string channel = 2;
    // Condition or state of the item.
    string condition = 3;
    // The two-letter ISO 639-1 language code for the item.
    string contentLanguage = 4;
    // Global Trade Item Number (GTIN) of the item. Optional.
    string gtin = 5;
    // URL of an image of the item.
    string imageLink = 6;
    // Shared identifier for all variants of the same product. Optional.
    string itemGroupId = 7;
    // Manufacturer Part Number (MPN) of the item. Optional.
    string mpn = 8;
    // An identifier of the item.
    string offerId = 9;
    // The price for the product.
    Price price = 10;
    // The CLDR territory code of the target country of the product.
    string targetCountry = 11;
    // The title of the product.
    string title = 12;
    // Variant attributes for the item. Optional.
    repeated OrderLineItemProductVariantAttribute variantAttributes = 13;
}

message TestOrderPaymentMethod {
    // The card expiration month (January = 1, February = 2 etc.).
    int32 expirationMonth = 1;
    // The card expiration year (4-digit, e.g. 2015).
    int32 expirationYear = 2;
    // The last four digits of the card number.
    string lastFourDigits = 3;
    // The billing address.
    string predefinedBillingAddress = 4;
    // The type of instrument. Note that real orders might have different values than the four values accepted by createTestOrder.
    string type = 5;
}

message Value {
    // The name of a carrier rate referring to a carrier rate defined in the same rate group. Can only be set if all other fields are not set.
    string carrierRateName = 1;
    // A flat rate. Can only be set if all other fields are not set.
    Price flatRate = 2;
    // If true, then the product can't ship. Must be true when set, can only be set if all other fields are not set.
    bool noShipping = 3;
    // A percentage of the price represented as a number in decimal notation (e.g., "5.4"). Can only be set if all other fields are not set.
    string pricePercentage = 4;
    // The name of a subtable. Can only be set in table cells (i.e., not for single values), and only if all other fields are not set.
    string subtableName = 5;
}

message Weight {
    // The weight unit.
    string unit = 1;
    // The weight represented as a number.
    string value = 2;
}

enum Alt {
    JSON = 0;
}

service ContentAPIForShoppingService {
    // Returns information about the authenticated user.
    rpc GetAccountsAuthinfo(GetAccountsAuthinfoRequest) returns (AccountsAuthInfoResponse) {
      option (google.api.http) = {
        get: "/content/v2/accounts/authinfo"
      };
    }
    // Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.
    rpc PostAccountsBatch(PostAccountsBatchRequest) returns (AccountsCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/accounts/batch"
        body: "body"
      };
    }
    rpc PostAccountstatusesBatch(PostAccountstatusesBatchRequest) returns (AccountstatusesCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/accountstatuses/batch"
        body: "body"
      };
    }
    // Retrieves and updates tax settings of multiple accounts in a single request.
    rpc PostAccounttaxBatch(PostAccounttaxBatchRequest) returns (AccounttaxCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/accounttax/batch"
        body: "body"
      };
    }
    rpc PostDatafeedsBatch(PostDatafeedsBatchRequest) returns (DatafeedsCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/datafeeds/batch"
        body: "body"
      };
    }
    rpc PostDatafeedstatusesBatch(PostDatafeedstatusesBatchRequest) returns (DatafeedstatusesCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/datafeedstatuses/batch"
        body: "body"
      };
    }
    // Updates price and availability for multiple products or stores in a single request. This operation does not update the expiration date of the products. This method can only be called for non-multi-client accounts.
    rpc PostInventoryBatch(PostInventoryBatchRequest) returns (InventoryCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/inventory/batch"
        body: "body"
      };
    }
    // Retrieves or modifies multiple orders in a single request. This method can only be called for non-multi-client accounts.
    rpc PostOrdersBatch(PostOrdersBatchRequest) returns (OrdersCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/orders/batch"
        body: "body"
      };
    }
    // Retrieves, inserts, and deletes multiple products in a single request. This method can only be called for non-multi-client accounts.
    rpc PostProductsBatch(PostProductsBatchRequest) returns (ProductsCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/products/batch"
        body: "body"
      };
    }
    // Gets the statuses of multiple products in a single request. This method can only be called for non-multi-client accounts.
    rpc PostProductstatusesBatch(PostProductstatusesBatchRequest) returns (ProductstatusesCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/productstatuses/batch"
        body: "body"
      };
    }
    // Retrieves and updates the shipping settings of multiple accounts in a single request.
    rpc PostShippingsettingsBatch(PostShippingsettingsBatchRequest) returns (ShippingsettingsCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2/shippingsettings/batch"
        body: "body"
      };
    }
    // Lists the sub-accounts in your Merchant Center account. This method can only be called for multi-client accounts.
    rpc GetMerchantIdAccounts(GetMerchantIdAccountsRequest) returns (AccountsListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/accounts"
      };
    }
    // Creates a Merchant Center sub-account. This method can only be called for multi-client accounts.
    rpc PostMerchantIdAccounts(PostMerchantIdAccountsRequest) returns (Account) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/accounts"
        body: "body"
      };
    }
    // Retrieves a Merchant Center account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account.
    rpc GetMerchantIdAccountsAccountId(GetMerchantIdAccountsAccountIdRequest) returns (Account) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/accounts/{accountId}"
      };
    }
    // Updates a Merchant Center account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account.
    rpc PutMerchantIdAccountsAccountId(PutMerchantIdAccountsAccountIdRequest) returns (Account) {
      option (google.api.http) = {
        put: "/content/v2/{merchantId}/accounts/{accountId}"
        body: "body"
      };
    }
    // Deletes a Merchant Center sub-account. This method can only be called for multi-client accounts.
    rpc DeleteMerchantIdAccountsAccountId(DeleteMerchantIdAccountsAccountIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/content/v2/{merchantId}/accounts/{accountId}"
      };
    }
    // Claims the website of a Merchant Center sub-account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account.
    rpc PostMerchantIdAccountsAccountIdClaimwebsite(PostMerchantIdAccountsAccountIdClaimwebsiteRequest) returns (AccountsClaimWebsiteResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/accounts/{accountId}/claimwebsite"
      };
    }
    // Lists the statuses of the sub-accounts in your Merchant Center account. This method can only be called for multi-client accounts.
    rpc GetMerchantIdAccountstatuses(GetMerchantIdAccountstatusesRequest) returns (AccountstatusesListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/accountstatuses"
      };
    }
    // Retrieves the status of a Merchant Center account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account.
    rpc GetMerchantIdAccountstatusesAccountId(GetMerchantIdAccountstatusesAccountIdRequest) returns (AccountStatus) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/accountstatuses/{accountId}"
      };
    }
    // Lists the tax settings of the sub-accounts in your Merchant Center account. This method can only be called for multi-client accounts.
    rpc GetMerchantIdAccounttax(GetMerchantIdAccounttaxRequest) returns (AccounttaxListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/accounttax"
      };
    }
    // Retrieves the tax settings of the account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account.
    rpc GetMerchantIdAccounttaxAccountId(GetMerchantIdAccounttaxAccountIdRequest) returns (AccountTax) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/accounttax/{accountId}"
      };
    }
    // Updates the tax settings of the account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account.
    rpc PutMerchantIdAccounttaxAccountId(PutMerchantIdAccounttaxAccountIdRequest) returns (AccountTax) {
      option (google.api.http) = {
        put: "/content/v2/{merchantId}/accounttax/{accountId}"
        body: "body"
      };
    }
    // Lists the datafeeds in your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdDatafeeds(GetMerchantIdDatafeedsRequest) returns (DatafeedsListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/datafeeds"
      };
    }
    // Registers a datafeed configuration with your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdDatafeeds(PostMerchantIdDatafeedsRequest) returns (Datafeed) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/datafeeds"
        body: "body"
      };
    }
    // Retrieves a datafeed configuration from your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdDatafeedsDatafeedId(GetMerchantIdDatafeedsDatafeedIdRequest) returns (Datafeed) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/datafeeds/{datafeedId}"
      };
    }
    // Updates a datafeed configuration of your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc PutMerchantIdDatafeedsDatafeedId(PutMerchantIdDatafeedsDatafeedIdRequest) returns (Datafeed) {
      option (google.api.http) = {
        put: "/content/v2/{merchantId}/datafeeds/{datafeedId}"
        body: "body"
      };
    }
    // Deletes a datafeed configuration from your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc DeleteMerchantIdDatafeedsDatafeedId(DeleteMerchantIdDatafeedsDatafeedIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/content/v2/{merchantId}/datafeeds/{datafeedId}"
      };
    }
    // Lists the statuses of the datafeeds in your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdDatafeedstatuses(GetMerchantIdDatafeedstatusesRequest) returns (DatafeedstatusesListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/datafeedstatuses"
      };
    }
    // Retrieves the status of a datafeed from your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdDatafeedstatusesDatafeedId(GetMerchantIdDatafeedstatusesDatafeedIdRequest) returns (DatafeedStatus) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/datafeedstatuses/{datafeedId}"
      };
    }
    // Updates price and availability of a product in your Merchant Center account. This operation does not update the expiration date of the product. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdInventoryStoreCodeProductsProductId(PostMerchantIdInventoryStoreCodeProductsProductIdRequest) returns (InventorySetResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/inventory/{storeCode}/products/{productId}"
        body: "body"
      };
    }
    // Lists the orders in your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdOrders(GetMerchantIdOrdersRequest) returns (OrdersListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/orders"
      };
    }
    // Retrieves an order from your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdOrdersOrderId(GetMerchantIdOrdersOrderIdRequest) returns (Order) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/orders/{orderId}"
      };
    }
    // Marks an order as acknowledged. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdAcknowledge(PostMerchantIdOrdersOrderIdAcknowledgeRequest) returns (OrdersAcknowledgeResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/orders/{orderId}/acknowledge"
        body: "body"
      };
    }
    // Cancels all line items in an order, making a full refund. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdCancel(PostMerchantIdOrdersOrderIdCancelRequest) returns (OrdersCancelResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/orders/{orderId}/cancel"
        body: "body"
      };
    }
    // Cancels a line item, making a full refund. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdCancelLineItem(PostMerchantIdOrdersOrderIdCancelLineItemRequest) returns (OrdersCancelLineItemResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/orders/{orderId}/cancelLineItem"
        body: "body"
      };
    }
    // Refund a portion of the order, up to the full amount paid. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdRefund(PostMerchantIdOrdersOrderIdRefundRequest) returns (OrdersRefundResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/orders/{orderId}/refund"
        body: "body"
      };
    }
    // Returns a line item. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdReturnLineItem(PostMerchantIdOrdersOrderIdReturnLineItemRequest) returns (OrdersReturnLineItemResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/orders/{orderId}/returnLineItem"
        body: "body"
      };
    }
    // Marks line item(s) as shipped. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdShipLineItems(PostMerchantIdOrdersOrderIdShipLineItemsRequest) returns (OrdersShipLineItemsResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/orders/{orderId}/shipLineItems"
        body: "body"
      };
    }
    // Updates the merchant order ID for a given order. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdUpdateMerchantOrderId(PostMerchantIdOrdersOrderIdUpdateMerchantOrderIdRequest) returns (OrdersUpdateMerchantOrderIdResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/orders/{orderId}/updateMerchantOrderId"
        body: "body"
      };
    }
    // Updates a shipment's status, carrier, and/or tracking ID. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdUpdateShipment(PostMerchantIdOrdersOrderIdUpdateShipmentRequest) returns (OrdersUpdateShipmentResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/orders/{orderId}/updateShipment"
        body: "body"
      };
    }
    // Retrieves an order using merchant order id. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdOrdersbymerchantidMerchantOrderId(GetMerchantIdOrdersbymerchantidMerchantOrderIdRequest) returns (OrdersGetByMerchantOrderIdResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/ordersbymerchantid/{merchantOrderId}"
      };
    }
    // Lists the products in your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdProducts(GetMerchantIdProductsRequest) returns (ProductsListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/products"
      };
    }
    // Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdProducts(PostMerchantIdProductsRequest) returns (Product) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/products"
        body: "body"
      };
    }
    // Retrieves a product from your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdProductsProductId(GetMerchantIdProductsProductIdRequest) returns (Product) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/products/{productId}"
      };
    }
    // Deletes a product from your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc DeleteMerchantIdProductsProductId(DeleteMerchantIdProductsProductIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/content/v2/{merchantId}/products/{productId}"
      };
    }
    // Lists the statuses of the products in your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdProductstatuses(GetMerchantIdProductstatusesRequest) returns (ProductstatusesListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/productstatuses"
      };
    }
    // Gets the status of a product from your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdProductstatusesProductId(GetMerchantIdProductstatusesProductIdRequest) returns (ProductStatus) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/productstatuses/{productId}"
      };
    }
    // Lists the shipping settings of the sub-accounts in your Merchant Center account. This method can only be called for multi-client accounts.
    rpc GetMerchantIdShippingsettings(GetMerchantIdShippingsettingsRequest) returns (ShippingsettingsListResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/shippingsettings"
      };
    }
    // Retrieves the shipping settings of the account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account.
    rpc GetMerchantIdShippingsettingsAccountId(GetMerchantIdShippingsettingsAccountIdRequest) returns (ShippingSettings) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/shippingsettings/{accountId}"
      };
    }
    // Updates the shipping settings of the account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account.
    rpc PutMerchantIdShippingsettingsAccountId(PutMerchantIdShippingsettingsAccountIdRequest) returns (ShippingSettings) {
      option (google.api.http) = {
        put: "/content/v2/{merchantId}/shippingsettings/{accountId}"
        body: "body"
      };
    }
    // Retrieves supported carriers and carrier services for an account.
    rpc GetMerchantIdSupportedCarriers(GetMerchantIdSupportedCarriersRequest) returns (ShippingsettingsGetSupportedCarriersResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/supportedCarriers"
      };
    }
    // Sandbox only. Creates a test order. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdTestorders(PostMerchantIdTestordersRequest) returns (OrdersCreateTestOrderResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/testorders"
        body: "body"
      };
    }
    // Sandbox only. Moves a test order from state "inProgress" to state "pendingShipment". This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdTestordersOrderIdAdvance(PostMerchantIdTestordersOrderIdAdvanceRequest) returns (OrdersAdvanceTestOrderResponse) {
      option (google.api.http) = {
        post: "/content/v2/{merchantId}/testorders/{orderId}/advance"
      };
    }
    // Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdTestordertemplatesTemplateName(GetMerchantIdTestordertemplatesTemplateNameRequest) returns (OrdersGetTestOrderTemplateResponse) {
      option (google.api.http) = {
        get: "/content/v2/{merchantId}/testordertemplates/{templateName}"
      };
    }
}

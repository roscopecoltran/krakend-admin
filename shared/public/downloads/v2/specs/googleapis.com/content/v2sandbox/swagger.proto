syntax = "proto3";

import "google/api/annotations.proto";

package contentapiforshopping;

message PostOrdersBatchRequest {
    alt alt = 1;
    OrdersCustomBatchRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetMerchantIdOrdersRequest {
    // Obtains orders that match the acknowledgement status. When set to true, obtains orders that have been acknowledged. When false, obtains orders that have not been acknowledged.
    // We recommend using this filter set to false, in conjunction with the acknowledge call, such that only un-acknowledged orders are returned.
    bool acknowledged = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of orders to return in the response, used for paging. The default value is 25 orders per page, and the maximum allowed value is 250 orders per page.
    // Known issue: All List calls will return all Orders without limit regardless of the value of this field.
    int32 maxResults = 5;
    // The ID of the managing account.
    string merchantId = 6;
    string oauth_token = 7;
    // The ordering of the returned list. The only supported value are placedDate desc and placedDate asc for now, which returns orders sorted by placement date. "placedDate desc" stands for listing orders by placement date, from oldest to most recent. "placedDate asc" stands for listing orders by placement date, from most recent to oldest. In future releases we'll support other sorting criteria.
    enum GetMerchantIdOrdersRequest_OrderBy {
        GETMERCHANTIDORDERSREQUEST_ORDERBY_PLACEDDATE_ASC = 0;
        GETMERCHANTIDORDERSREQUEST_ORDERBY_PLACEDDATE_DESC = 1;
    }
    GetMerchantIdOrdersRequest_OrderBy orderBy = 8;
    // The token returned by the previous request.
    string pageToken = 9;
    // Obtains orders placed before this date (exclusively), in ISO 8601 format.
    string placedDateEnd = 10;
    // Obtains orders placed after this date (inclusively), in ISO 8601 format.
    string placedDateStart = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // Obtains orders that match any of the specified statuses. Multiple values can be specified with comma separation. Additionally, please note that active is a shortcut for pendingShipment and partiallyShipped, and completed is a shortcut for shipped , partiallyDelivered, delivered, partiallyReturned, returned, and canceled.
    repeated string statuses = 14;
    string userIp = 15;
}

message GetMerchantIdOrdersOrderIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string oauth_token = 5;
    // The ID of the order.
    string orderId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostMerchantIdOrdersOrderIdAcknowledgeRequest {
    alt alt = 1;
    OrdersAcknowledgeRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdCancelRequest {
    alt alt = 1;
    OrdersCancelRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order to cancel.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdCancelLineItemRequest {
    alt alt = 1;
    OrdersCancelLineItemRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdRefundRequest {
    alt alt = 1;
    OrdersRefundRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order to refund.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdReturnLineItemRequest {
    alt alt = 1;
    OrdersReturnLineItemRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdShipLineItemsRequest {
    alt alt = 1;
    OrdersShipLineItemsRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdUpdateMerchantOrderIdRequest {
    alt alt = 1;
    OrdersUpdateMerchantOrderIdRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostMerchantIdOrdersOrderIdUpdateShipmentRequest {
    alt alt = 1;
    OrdersUpdateShipmentRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    // The ID of the order.
    string orderId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetMerchantIdOrdersbymerchantidMerchantOrderIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    // The merchant order id to be looked for.
    string merchantOrderId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostMerchantIdTestordersRequest {
    alt alt = 1;
    OrdersCreateTestOrderRequest body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managing account.
    string merchantId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostMerchantIdTestordersOrderIdAdvanceRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string oauth_token = 5;
    // The ID of the test order to modify.
    string orderId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetMerchantIdTestordertemplatesTemplateNameRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the managing account.
    string merchantId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The name of the template to retrieve.
    enum GetMerchantIdTestordertemplatesTemplateNameRequest_TemplateName {
        GETMERCHANTIDTESTORDERTEMPLATESTEMPLATENAMEREQUEST_TEMPLATENAME_TEMPLATE1 = 0;
        GETMERCHANTIDTESTORDERTEMPLATESTEMPLATENAMEREQUEST_TEMPLATENAME_TEMPLATE1A = 1;
        GETMERCHANTIDTESTORDERTEMPLATESTEMPLATENAMEREQUEST_TEMPLATENAME_TEMPLATE1B = 2;
        GETMERCHANTIDTESTORDERTEMPLATESTEMPLATENAMEREQUEST_TEMPLATENAME_TEMPLATE2 = 3;
    }
    GetMerchantIdTestordertemplatesTemplateNameRequest_TemplateName templateName = 8;
    string userIp = 9;
}

message Error {
    // The domain of the error.
    string domain = 1;
    // A description of the error.
    string message = 2;
    // The error code.
    string reason = 3;
}

message Errors {
    // The HTTP status of the first error in errors.
    uint32 code = 1;
    // A list of errors.
    repeated Error errors = 2;
    // The message of the first error in errors.
    string message = 3;
}

message Order {
    // Whether the order was acknowledged.
    bool acknowledged = 1;
    // The channel type of the order: "purchaseOnGoogle" or "googleExpress".
    string channelType = 2;
    // The details of the customer who placed the order.
    OrderCustomer customer = 3;
    // The details for the delivery.
    OrderDeliveryDetails deliveryDetails = 4;
    // The REST id of the order. Globally unique.
    string id = 5;
    // Identifies what kind of resource this is. Value: the fixed string "content#order".
    string kind = 6;
    // Line items that are ordered.
    repeated OrderLineItem lineItems = 7;
    string merchantId = 8;
    // Merchant-provided id of the order.
    string merchantOrderId = 9;
    // The net amount for the order. For example, if an order was originally for a grand total of $100 and a refund was issued for $20, the net amount will be $80.
    Price netAmount = 10;
    // The details of the payment method.
    OrderPaymentMethod paymentMethod = 11;
    // The status of the payment.
    string paymentStatus = 12;
    // The date when the order was placed, in ISO 8601 format.
    string placedDate = 13;
    // The details of the merchant provided promotions applied to the order. More details about the program are here.
    repeated OrderPromotion promotions = 14;
    // Refunds for the order.
    repeated OrderRefund refunds = 15;
    // Shipments of the order.
    repeated OrderShipment shipments = 16;
    // The total cost of shipping for all items.
    Price shippingCost = 17;
    // The tax for the total shipping cost.
    Price shippingCostTax = 18;
    // The requested shipping option.
    string shippingOption = 19;
    // The status of the order.
    string status = 20;
}

message OrderAddress {
    // CLDR country code (e.g. "US").
    string country = 1;
    // Strings representing the lines of the printed label for mailing the order, for example:
    // John Smith
    // 1600 Amphitheatre Parkway
    // Mountain View, CA, 94043
    // United States
    repeated string fullAddress = 2;
    // Whether the address is a post office box.
    bool isPostOfficeBox = 3;
    // City, town or commune. May also include dependent localities or sublocalities (e.g. neighborhoods or suburbs).
    string locality = 4;
    // Postal Code or ZIP (e.g. "94043").
    string postalCode = 5;
    // Name of the recipient.
    string recipientName = 6;
    // Top-level administrative subdivision of the country (e.g. "CA").
    string region = 7;
    // Street-level part of the address.
    repeated string streetAddress = 8;
}

message OrderCancellation {
    // The actor that created the cancellation.
    string actor = 1;
    // Date on which the cancellation has been created, in ISO 8601 format.
    string creationDate = 2;
    // The quantity that was canceled.
    uint32 quantity = 3;
    // The reason for the cancellation. Orders that are cancelled with a noInventory reason will lead to the removal of the product from POG until you make an update to that product. This will not affect your Shopping ads.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrderCustomer {
    // Email address of the customer.
    string email = 1;
    // If set, this indicates the user explicitly chose to opt in or out of providing marketing rights to the merchant. If unset, this indicates the user has already made this choice in a previous purchase, and was thus not shown the marketing right opt in/out checkbox during the checkout flow.
    bool explicitMarketingPreference = 2;
    // Full name of the customer.
    string fullName = 3;
}

message OrderDeliveryDetails {
    // The delivery address
    OrderAddress address = 1;
    // The phone number of the person receiving the delivery.
    string phoneNumber = 2;
}

message OrderLineItem {
    // Cancellations of the line item.
    repeated OrderCancellation cancellations = 1;
    // The channel type of the order: "purchaseOnGoogle" or "googleExpress".
    string channelType = 2;
    // The id of the line item.
    string id = 3;
    // Total price for the line item. For example, if two items for $10 are purchased, the total price will be $20.
    Price price = 4;
    // Product data from the time of the order placement.
    OrderLineItemProduct product = 5;
    // Number of items canceled.
    uint32 quantityCanceled = 6;
    // Number of items delivered.
    uint32 quantityDelivered = 7;
    // Number of items ordered.
    uint32 quantityOrdered = 8;
    // Number of items pending.
    uint32 quantityPending = 9;
    // Number of items returned.
    uint32 quantityReturned = 10;
    // Number of items shipped.
    uint32 quantityShipped = 11;
    // Details of the return policy for the line item.
    OrderLineItemReturnInfo returnInfo = 12;
    // Returns of the line item.
    repeated OrderReturn returns = 13;
    // Details of the requested shipping for the line item.
    OrderLineItemShippingDetails shippingDetails = 14;
    // Total tax amount for the line item. For example, if two items are purchased, and each have a cost tax of $2, the total tax amount will be $4.
    Price tax = 15;
}

message OrderLineItemProduct {
    // Brand of the item.
    string brand = 1;
    // The item's channel (online or local).
    string channel = 2;
    // Condition or state of the item.
    string condition = 3;
    // The two-letter ISO 639-1 language code for the item.
    string contentLanguage = 4;
    // Global Trade Item Number (GTIN) of the item.
    string gtin = 5;
    // The REST id of the product.
    string id = 6;
    // URL of an image of the item.
    string imageLink = 7;
    // Shared identifier for all variants of the same product.
    string itemGroupId = 8;
    // Manufacturer Part Number (MPN) of the item.
    string mpn = 9;
    // An identifier of the item.
    string offerId = 10;
    // Price of the item.
    Price price = 11;
    // URL to the cached image shown to the user when order was placed.
    string shownImage = 12;
    // The CLDR territory code of the target country of the product.
    string targetCountry = 13;
    // The title of the product.
    string title = 14;
    // Variant attributes for the item. These are dimensions of the product, such as color, gender, material, pattern, and size. You can find a comprehensive list of variant attributes here.
    repeated OrderLineItemProductVariantAttribute variantAttributes = 15;
}

message OrderLineItemProductVariantAttribute {
    // The dimension of the variant.
    string dimension = 1;
    // The value for the dimension.
    string value = 2;
}

message OrderLineItemReturnInfo {
    // How many days later the item can be returned.
    int32 daysToReturn = 1;
    // Whether the item is returnable.
    bool isReturnable = 2;
    // URL of the item return policy.
    string policyUrl = 3;
}

message OrderLineItemShippingDetails {
    // The delivery by date, in ISO 8601 format.
    string deliverByDate = 1;
    // Details of the shipping method.
    OrderLineItemShippingDetailsMethod method = 2;
    // The ship by date, in ISO 8601 format.
    string shipByDate = 3;
}

message OrderLineItemShippingDetailsMethod {
    // The carrier for the shipping. Optional. See shipments[].carrier for a list of acceptable values.
    string carrier = 1;
    // Maximum transit time.
    uint32 maxDaysInTransit = 2;
    // The name of the shipping method.
    string methodName = 3;
    // Minimum transit time.
    uint32 minDaysInTransit = 4;
}

message OrderPaymentMethod {
    // The billing address.
    OrderAddress billingAddress = 1;
    // The card expiration month (January = 1, February = 2 etc.).
    int32 expirationMonth = 2;
    // The card expiration year (4-digit, e.g. 2015).
    int32 expirationYear = 3;
    // The last four digits of the card number.
    string lastFourDigits = 4;
    // The billing phone number.
    string phoneNumber = 5;
    // The type of instrument.
    // 
    // Acceptable values are:  
    // - "AMEX" 
    // - "DISCOVER" 
    // - "JCB" 
    // - "MASTERCARD" 
    // - "UNIONPAY" 
    // - "VISA" 
    // - ""
    string type = 6;
}

message OrderPromotion {
    repeated OrderPromotionBenefit benefits = 1;
    // The date and time frame when the promotion is active and ready for validation review. Note that the promotion live time may be delayed for a few hours due to the validation review.
    // Start date and end date are separated by a forward slash (/). The start date is specified by the format (YYYY-MM-DD), followed by the letter ?T?, the time of the day when the sale starts (in Greenwich Mean Time, GMT), followed by an expression of the time zone for the sale. The end date is in the same format.
    string effectiveDates = 2;
    // Optional. The text code that corresponds to the promotion when applied on the retailer?s website.
    string genericRedemptionCode = 3;
    // The unique ID of the promotion.
    string id = 4;
    // The full title of the promotion.
    string longTitle = 5;
    // Whether the promotion is applicable to all products or only specific products.
    string productApplicability = 6;
    // Indicates that the promotion is valid online.
    string redemptionChannel = 7;
}

message OrderPromotionBenefit {
    // The discount in the order price when the promotion is applied.
    Price discount = 1;
    // The OfferId(s) that were purchased in this order and map to this specific benefit of the promotion.
    repeated string offerIds = 2;
    // Further describes the benefit of the promotion. Note that we will expand on this enumeration as we support new promotion sub-types.
    string subType = 3;
    // The impact on tax when the promotion is applied.
    Price taxImpact = 4;
    // Describes whether the promotion applies to products (e.g. 20% off) or to shipping (e.g. Free Shipping).
    string type = 5;
}

message OrderRefund {
    // The actor that created the refund.
    string actor = 1;
    // The amount that is refunded.
    Price amount = 2;
    // Date on which the item has been created, in ISO 8601 format.
    string creationDate = 3;
    // The reason for the refund.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrderReturn {
    // The actor that created the refund.
    string actor = 1;
    // Date on which the item has been created, in ISO 8601 format.
    string creationDate = 2;
    // Quantity that is returned.
    uint32 quantity = 3;
    // The reason for the return.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrderShipment {
    // The carrier handling the shipment.
    // 
    // Acceptable values are:  
    // - "gsx" 
    // - "ups" 
    // - "united parcel service" 
    // - "usps" 
    // - "united states postal service" 
    // - "fedex" 
    // - "dhl" 
    // - "ecourier" 
    // - "cxt" 
    // - "google" 
    // - "on trac" 
    // - "ontrac" 
    // - "on-trac" 
    // - "on_trac" 
    // - "delvic" 
    // - "dynamex" 
    // - "lasership" 
    // - "smartpost" 
    // - "fedex smartpost" 
    // - "mpx" 
    // - "uds" 
    // - "united delivery service"
    string carrier = 1;
    // Date on which the shipment has been created, in ISO 8601 format.
    string creationDate = 2;
    // Date on which the shipment has been delivered, in ISO 8601 format. Present only if status is delievered
    string deliveryDate = 3;
    // The id of the shipment.
    string id = 4;
    // The line items that are shipped.
    repeated OrderShipmentLineItemShipment lineItems = 5;
    // The status of the shipment.
    string status = 6;
    // The tracking id for the shipment.
    string trackingId = 7;
}

message OrderShipmentLineItemShipment {
    // The id of the line item that is shipped.
    string lineItemId = 1;
    // The quantity that is shipped.
    uint32 quantity = 2;
}

message OrdersAcknowledgeRequest {
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 1;
}

message OrdersAcknowledgeResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersAcknowledgeResponse".
    string kind = 2;
}

message OrdersAdvanceTestOrderResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersAdvanceTestOrderResponse".
    string kind = 1;
}

message OrdersCancelLineItemRequest {
    // Amount to refund for the cancelation. Optional. If not set, Google will calculate the default based on the price and tax of the items involved. The amount must not be larger than the net amount left on the order.
    Price amount = 1;
    // The ID of the line item to cancel.
    string lineItemId = 2;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 3;
    // The quantity to cancel.
    uint32 quantity = 4;
    // The reason for the cancellation.
    string reason = 5;
    // The explanation of the reason.
    string reasonText = 6;
}

message OrdersCancelLineItemResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCancelLineItemResponse".
    string kind = 2;
}

message OrdersCancelRequest {
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 1;
    // The reason for the cancellation.
    string reason = 2;
    // The explanation of the reason.
    string reasonText = 3;
}

message OrdersCancelResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCancelResponse".
    string kind = 2;
}

message OrdersCreateTestOrderRequest {
    // The test order template to use. Specify as an alternative to testOrder as a shortcut for retrieving a template and then creating an order using that template.
    string templateName = 1;
    // The test order to create.
    TestOrder testOrder = 2;
}

message OrdersCreateTestOrderResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCreateTestOrderResponse".
    string kind = 1;
    // The ID of the newly created test order.
    string orderId = 2;
}

message OrdersCustomBatchRequest {
    // The request entries to be processed in the batch.
    repeated OrdersCustomBatchRequestEntry entries = 1;
}

message OrdersCustomBatchRequestEntry {
    // An entry ID, unique within the batch request.
    uint32 batchId = 1;
    // Required for cancel method.
    OrdersCustomBatchRequestEntryCancel cancel = 2;
    // Required for cancelLineItem method.
    OrdersCustomBatchRequestEntryCancelLineItem cancelLineItem = 3;
    // The ID of the managing account.
    string merchantId = 4;
    // The merchant order id. Required for updateMerchantOrderId and getByMerchantOrderId methods.
    string merchantOrderId = 5;
    // The method to apply.
    string method = 6;
    // The ID of the operation. Unique across all operations for a given order. Required for all methods beside get and getByMerchantOrderId.
    string operationId = 7;
    // The ID of the order. Required for all methods beside getByMerchantOrderId.
    string orderId = 8;
    // Required for refund method.
    OrdersCustomBatchRequestEntryRefund refund = 9;
    // Required for returnLineItem method.
    OrdersCustomBatchRequestEntryReturnLineItem returnLineItem = 10;
    // Required for shipLineItems method.
    OrdersCustomBatchRequestEntryShipLineItems shipLineItems = 11;
    // Required for updateShipment method.
    OrdersCustomBatchRequestEntryUpdateShipment updateShipment = 12;
}

message OrdersCustomBatchRequestEntryCancel {
    // The reason for the cancellation.
    string reason = 1;
    // The explanation of the reason.
    string reasonText = 2;
}

message OrdersCustomBatchRequestEntryCancelLineItem {
    // Amount to refund for the cancelation. Optional. If not set, Google will calculate the default based on the price and tax of the items involved. The amount must not be larger than the net amount left on the order.
    Price amount = 1;
    // The ID of the line item to cancel.
    string lineItemId = 2;
    // The quantity to cancel.
    uint32 quantity = 3;
    // The reason for the cancellation.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrdersCustomBatchRequestEntryRefund {
    // The amount that is refunded.
    Price amount = 1;
    // The reason for the refund.
    string reason = 2;
    // The explanation of the reason.
    string reasonText = 3;
}

message OrdersCustomBatchRequestEntryReturnLineItem {
    // The ID of the line item to return.
    string lineItemId = 1;
    // The quantity to return.
    uint32 quantity = 2;
    // The reason for the return.
    string reason = 3;
    // The explanation of the reason.
    string reasonText = 4;
}

message OrdersCustomBatchRequestEntryShipLineItems {
    // Deprecated. Please use shipmentInfo instead. The carrier handling the shipment. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // Line items to ship.
    repeated OrderShipmentLineItemShipment lineItems = 2;
    // Deprecated. Please use shipmentInfo instead. The ID of the shipment.
    string shipmentId = 3;
    // Shipment information. This field is repeated because a single line item can be shipped in several packages (and have several tracking IDs).
    repeated OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo shipmentInfos = 4;
    // Deprecated. Please use shipmentInfo instead. The tracking id for the shipment.
    string trackingId = 5;
}

message OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo {
    // The carrier handling the shipment. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // The ID of the shipment.
    string shipmentId = 2;
    // The tracking id for the shipment.
    string trackingId = 3;
}

message OrdersCustomBatchRequestEntryUpdateShipment {
    // The carrier handling the shipment. Not updated if missing. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // The ID of the shipment.
    string shipmentId = 2;
    // New status for the shipment. Not updated if missing.
    string status = 3;
    // The tracking id for the shipment. Not updated if missing.
    string trackingId = 4;
}

message OrdersCustomBatchResponse {
    // The result of the execution of the batch requests.
    repeated OrdersCustomBatchResponseEntry entries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCustomBatchResponse".
    string kind = 2;
}

message OrdersCustomBatchResponseEntry {
    // The ID of the request entry this entry responds to.
    uint32 batchId = 1;
    // A list of errors defined if and only if the request failed.
    Errors errors = 2;
    // The status of the execution. Only defined if the method is not get or getByMerchantOrderId and if the request was successful.
    string executionStatus = 3;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersCustomBatchResponseEntry".
    string kind = 4;
    // The retrieved order. Only defined if the method is get and if the request was successful.
    Order order = 5;
}

message OrdersGetByMerchantOrderIdResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersGetByMerchantOrderIdResponse".
    string kind = 1;
    // The requested order.
    Order order = 2;
}

message OrdersGetTestOrderTemplateResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersGetTestOrderTemplateResponse".
    string kind = 1;
    // The requested test order template.
    TestOrder template = 2;
}

message OrdersListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersListResponse".
    string kind = 1;
    // The token for the retrieval of the next page of orders.
    string nextPageToken = 2;
    repeated Order resources = 3;
}

message OrdersRefundRequest {
    // The amount that is refunded.
    Price amount = 1;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 2;
    // The reason for the refund.
    string reason = 3;
    // The explanation of the reason.
    string reasonText = 4;
}

message OrdersRefundResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersRefundResponse".
    string kind = 2;
}

message OrdersReturnLineItemRequest {
    // The ID of the line item to return.
    string lineItemId = 1;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 2;
    // The quantity to return.
    uint32 quantity = 3;
    // The reason for the return.
    string reason = 4;
    // The explanation of the reason.
    string reasonText = 5;
}

message OrdersReturnLineItemResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersReturnLineItemResponse".
    string kind = 2;
}

message OrdersShipLineItemsRequest {
    // Deprecated. Please use shipmentInfo instead. The carrier handling the shipment. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // Line items to ship.
    repeated OrderShipmentLineItemShipment lineItems = 2;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 3;
    // Deprecated. Please use shipmentInfo instead. The ID of the shipment.
    string shipmentId = 4;
    // Shipment information. This field is repeated because a single line item can be shipped in several packages (and have several tracking IDs).
    repeated OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo shipmentInfos = 5;
    // Deprecated. Please use shipmentInfo instead. The tracking id for the shipment.
    string trackingId = 6;
}

message OrdersShipLineItemsResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersShipLineItemsResponse".
    string kind = 2;
}

message OrdersUpdateMerchantOrderIdRequest {
    // The merchant order id to be assigned to the order. Must be unique per merchant.
    string merchantOrderId = 1;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 2;
}

message OrdersUpdateMerchantOrderIdResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersUpdateMerchantOrderIdResponse".
    string kind = 2;
}

message OrdersUpdateShipmentRequest {
    // The carrier handling the shipment. Not updated if missing. See shipments[].carrier in the  Orders resource representation for a list of acceptable values.
    string carrier = 1;
    // The ID of the operation. Unique across all operations for a given order.
    string operationId = 2;
    // The ID of the shipment.
    string shipmentId = 3;
    // New status for the shipment. Not updated if missing.
    string status = 4;
    // The tracking id for the shipment. Not updated if missing.
    string trackingId = 5;
}

message OrdersUpdateShipmentResponse {
    // The status of the execution.
    string executionStatus = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#ordersUpdateShipmentResponse".
    string kind = 2;
}

message Price {
    // The currency of the price.
    string currency = 1;
    // The price represented as a number.
    string value = 2;
}

message TestOrder {
    // The details of the customer who placed the order.
    TestOrderCustomer customer = 1;
    // Identifies what kind of resource this is. Value: the fixed string "content#testOrder".
    string kind = 2;
    // Line items that are ordered. At least one line item must be provided.
    repeated TestOrderLineItem lineItems = 3;
    // The details of the payment method.
    TestOrderPaymentMethod paymentMethod = 4;
    // Identifier of one of the predefined delivery addresses for the delivery.
    string predefinedDeliveryAddress = 5;
    // The details of the merchant provided promotions applied to the order. More details about the program are here.
    repeated OrderPromotion promotions = 6;
    // The total cost of shipping for all items.
    Price shippingCost = 7;
    // The tax for the total shipping cost.
    Price shippingCostTax = 8;
    // The requested shipping option.
    string shippingOption = 9;
}

message TestOrderCustomer {
    // Email address of the customer.
    string email = 1;
    // If set, this indicates the user explicitly chose to opt in or out of providing marketing rights to the merchant. If unset, this indicates the user has already made this choice in a previous purchase, and was thus not shown the marketing right opt in/out checkbox during the checkout flow. Optional.
    bool explicitMarketingPreference = 2;
    // Full name of the customer.
    string fullName = 3;
}

message TestOrderLineItem {
    // Product data from the time of the order placement.
    TestOrderLineItemProduct product = 1;
    // Number of items ordered.
    uint32 quantityOrdered = 2;
    // Details of the return policy for the line item.
    OrderLineItemReturnInfo returnInfo = 3;
    // Details of the requested shipping for the line item.
    OrderLineItemShippingDetails shippingDetails = 4;
    // Unit tax for the line item.
    Price unitTax = 5;
}

message TestOrderLineItemProduct {
    // Brand of the item.
    string brand = 1;
    // The item's channel.
    string channel = 2;
    // Condition or state of the item.
    string condition = 3;
    // The two-letter ISO 639-1 language code for the item.
    string contentLanguage = 4;
    // Global Trade Item Number (GTIN) of the item. Optional.
    string gtin = 5;
    // URL of an image of the item.
    string imageLink = 6;
    // Shared identifier for all variants of the same product. Optional.
    string itemGroupId = 7;
    // Manufacturer Part Number (MPN) of the item. Optional.
    string mpn = 8;
    // An identifier of the item.
    string offerId = 9;
    // The price for the product.
    Price price = 10;
    // The CLDR territory code of the target country of the product.
    string targetCountry = 11;
    // The title of the product.
    string title = 12;
    // Variant attributes for the item. Optional.
    repeated OrderLineItemProductVariantAttribute variantAttributes = 13;
}

message TestOrderPaymentMethod {
    // The card expiration month (January = 1, February = 2 etc.).
    int32 expirationMonth = 1;
    // The card expiration year (4-digit, e.g. 2015).
    int32 expirationYear = 2;
    // The last four digits of the card number.
    string lastFourDigits = 3;
    // The billing address.
    string predefinedBillingAddress = 4;
    // The type of instrument. Note that real orders might have different values than the four values accepted by createTestOrder.
    string type = 5;
}

enum Alt {
    JSON = 0;
}

service ContentAPIForShoppingService {
    // Retrieves or modifies multiple orders in a single request. This method can only be called for non-multi-client accounts.
    rpc PostOrdersBatch(PostOrdersBatchRequest) returns (OrdersCustomBatchResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/orders/batch"
        body: "body"
      };
    }
    // Lists the orders in your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdOrders(GetMerchantIdOrdersRequest) returns (OrdersListResponse) {
      option (google.api.http) = {
        get: "/content/v2sandbox/{merchantId}/orders"
      };
    }
    // Retrieves an order from your Merchant Center account. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdOrdersOrderId(GetMerchantIdOrdersOrderIdRequest) returns (Order) {
      option (google.api.http) = {
        get: "/content/v2sandbox/{merchantId}/orders/{orderId}"
      };
    }
    // Marks an order as acknowledged. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdAcknowledge(PostMerchantIdOrdersOrderIdAcknowledgeRequest) returns (OrdersAcknowledgeResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/orders/{orderId}/acknowledge"
        body: "body"
      };
    }
    // Cancels all line items in an order, making a full refund. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdCancel(PostMerchantIdOrdersOrderIdCancelRequest) returns (OrdersCancelResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/orders/{orderId}/cancel"
        body: "body"
      };
    }
    // Cancels a line item, making a full refund. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdCancelLineItem(PostMerchantIdOrdersOrderIdCancelLineItemRequest) returns (OrdersCancelLineItemResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/orders/{orderId}/cancelLineItem"
        body: "body"
      };
    }
    // Refund a portion of the order, up to the full amount paid. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdRefund(PostMerchantIdOrdersOrderIdRefundRequest) returns (OrdersRefundResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/orders/{orderId}/refund"
        body: "body"
      };
    }
    // Returns a line item. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdReturnLineItem(PostMerchantIdOrdersOrderIdReturnLineItemRequest) returns (OrdersReturnLineItemResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/orders/{orderId}/returnLineItem"
        body: "body"
      };
    }
    // Marks line item(s) as shipped. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdShipLineItems(PostMerchantIdOrdersOrderIdShipLineItemsRequest) returns (OrdersShipLineItemsResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/orders/{orderId}/shipLineItems"
        body: "body"
      };
    }
    // Updates the merchant order ID for a given order. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdUpdateMerchantOrderId(PostMerchantIdOrdersOrderIdUpdateMerchantOrderIdRequest) returns (OrdersUpdateMerchantOrderIdResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/orders/{orderId}/updateMerchantOrderId"
        body: "body"
      };
    }
    // Updates a shipment's status, carrier, and/or tracking ID. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdOrdersOrderIdUpdateShipment(PostMerchantIdOrdersOrderIdUpdateShipmentRequest) returns (OrdersUpdateShipmentResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/orders/{orderId}/updateShipment"
        body: "body"
      };
    }
    // Retrieves an order using merchant order id. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdOrdersbymerchantidMerchantOrderId(GetMerchantIdOrdersbymerchantidMerchantOrderIdRequest) returns (OrdersGetByMerchantOrderIdResponse) {
      option (google.api.http) = {
        get: "/content/v2sandbox/{merchantId}/ordersbymerchantid/{merchantOrderId}"
      };
    }
    // Sandbox only. Creates a test order. This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdTestorders(PostMerchantIdTestordersRequest) returns (OrdersCreateTestOrderResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/testorders"
        body: "body"
      };
    }
    // Sandbox only. Moves a test order from state "inProgress" to state "pendingShipment". This method can only be called for non-multi-client accounts.
    rpc PostMerchantIdTestordersOrderIdAdvance(PostMerchantIdTestordersOrderIdAdvanceRequest) returns (OrdersAdvanceTestOrderResponse) {
      option (google.api.http) = {
        post: "/content/v2sandbox/{merchantId}/testorders/{orderId}/advance"
      };
    }
    // Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox. This method can only be called for non-multi-client accounts.
    rpc GetMerchantIdTestordertemplatesTemplateName(GetMerchantIdTestordertemplatesTemplateNameRequest) returns (OrdersGetTestOrderTemplateResponse) {
      option (google.api.http) = {
        get: "/content/v2sandbox/{merchantId}/testordertemplates/{templateName}"
      };
    }
}

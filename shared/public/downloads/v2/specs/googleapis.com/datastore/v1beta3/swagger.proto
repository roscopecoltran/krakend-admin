syntax = "proto3";

import "google/api/annotations.proto";

package googleclouddatastore;

message PostV1beta3ProjectsProjectId:AllocateIdsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    AllocateIdsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The ID of the project against which to make the request.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta3ProjectsProjectId:BeginTransactionRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    BeginTransactionRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The ID of the project against which to make the request.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta3ProjectsProjectId:CommitRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CommitRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The ID of the project against which to make the request.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta3ProjectsProjectId:LookupRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    LookupRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The ID of the project against which to make the request.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta3ProjectsProjectId:RollbackRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    RollbackRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The ID of the project against which to make the request.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta3ProjectsProjectId:RunQueryRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    RunQueryRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The ID of the project against which to make the request.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AllocateIdsRequest {
    // A list of keys with incomplete key paths for which to allocate IDs.
    // No key may be reserved/read-only.
    repeated Key keys = 1;
}

message AllocateIdsResponse {
    // The keys specified in the request (in the same order), each with
    // its key path completed with a newly allocated ID.
    repeated Key keys = 1;
}

message ArrayValue {
    // Values in the array.
    // The order of this array may not be preserved if it contains a mix of
    // indexed and unindexed values.
    repeated Value values = 1;
}

message BeginTransactionRequest {
    // Options for a new transaction.
    TransactionOptions transactionOptions = 1;
}

message BeginTransactionResponse {
    // The transaction identifier (always present).
    string transaction = 1;
}

message CommitRequest {
    // The type of commit to perform. Defaults to `TRANSACTIONAL`.
    enum CommitRequest_Mode {
        COMMITREQUEST_MODE_MODE_UNSPECIFIED = 0;
        COMMITREQUEST_MODE_TRANSACTIONAL = 1;
        COMMITREQUEST_MODE_NON_TRANSACTIONAL = 2;
    }
    CommitRequest_Mode mode = 1;
    // The mutations to perform.
    // 
    // When mode is `TRANSACTIONAL`, mutations affecting a single entity are
    // applied in order. The following sequences of mutations affecting a single
    // entity are not permitted in a single `Commit` request:
    // 
    // - `insert` followed by `insert`
    // - `update` followed by `insert`
    // - `upsert` followed by `insert`
    // - `delete` followed by `update`
    // 
    // When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
    // entity.
    repeated Mutation mutations = 2;
    // The identifier of the transaction associated with the commit. A
    // transaction identifier is returned by a call to
    // Datastore.BeginTransaction.
    string transaction = 3;
}

message CommitResponse {
    // The number of index entries updated during the commit, or zero if none were
    // updated.
    int32 indexUpdates = 1;
    // The result of performing the mutations.
    // The i-th mutation result corresponds to the i-th mutation in the request.
    repeated MutationResult mutationResults = 2;
}

message CompositeFilter {
    // The list of filters to combine.
    // Must contain at least one filter.
    repeated Filter filters = 1;
    // The operator for combining multiple filters.
    enum CompositeFilter_Op {
        COMPOSITEFILTER_OP_OPERATOR_UNSPECIFIED = 0;
        COMPOSITEFILTER_OP_AND = 1;
    }
    CompositeFilter_Op op = 2;
}

message Entity {
    // The entity's key.
    // 
    // An entity must have a key, unless otherwise documented (for example,
    // an entity in `Value.entity_value` may have no key).
    // An entity's kind is its key path's last element's kind,
    // or null if it has no key.
    Key key = 1;
    // The entity's properties.
    // The map's keys are property names.
    // A property name matching regex `__.*__` is reserved.
    // A reserved property name is forbidden in certain documented contexts.
    // The name must not contain more than 500 characters.
    // The name cannot be `""`.
    map<string, Value> properties = 2;
}

message EntityResult {
    // A cursor that points to the position after the result entity.
    // Set only when the `EntityResult` is part of a `QueryResultBatch` message.
    string cursor = 1;
    // The resulting entity.
    Entity entity = 2;
    // The version of the entity, a strictly positive number that monotonically
    // increases with changes to the entity.
    // 
    // This field is set for `FULL` entity
    // results.
    // 
    // For missing entities in `LookupResponse`, this
    // is the version of the snapshot that was used to look up the entity, and it
    // is always set except for eventually consistent reads.
    string version = 3;
}

message Filter {
    // A composite filter.
    CompositeFilter compositeFilter = 1;
    // A filter on a property.
    PropertyFilter propertyFilter = 2;
}

message GoogleDatastoreAdminV1beta1CommonMetadata {
    // The time the operation ended, either successfully or otherwise.
    string endTime = 1;
    // The client-assigned labels which were provided when the operation was
    // created. May also include additional labels.
    map<string, string> labels = 2;
    // The type of the operation. Can be used as a filter in
    // ListOperationsRequest.
    enum GoogleDatastoreAdminV1beta1CommonMetadata_OperationType {
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_OPERATIONTYPE_OPERATION_TYPE_UNSPECIFIED = 0;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_OPERATIONTYPE_EXPORT_ENTITIES = 1;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_OPERATIONTYPE_IMPORT_ENTITIES = 2;
    }
    GoogleDatastoreAdminV1beta1CommonMetadata_OperationType operationType = 3;
    // The time that work began on the operation.
    string startTime = 4;
    // The current state of the Operation.
    enum GoogleDatastoreAdminV1beta1CommonMetadata_State {
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_STATE_STATE_UNSPECIFIED = 0;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_STATE_INITIALIZING = 1;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_STATE_PROCESSING = 2;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_STATE_CANCELLING = 3;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_STATE_FINALIZING = 4;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_STATE_SUCCESSFUL = 5;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_STATE_FAILED = 6;
        GOOGLEDATASTOREADMINV1BETA1COMMONMETADATA_STATE_CANCELLED = 7;
    }
    GoogleDatastoreAdminV1beta1CommonMetadata_State state = 5;
}

message GoogleDatastoreAdminV1beta1EntityFilter {
    // If empty, then this represents all kinds.
    repeated string kinds = 1;
    // An empty list represents all namespaces. This is the preferred
    // usage for projects that don't use namespaces.
    // 
    // An empty string element represents the default namespace. This should be
    // used if the project has data in non-default namespaces, but doesn't want to
    // include them.
    // Each namespace in this list must be unique.
    repeated string namespaceIds = 2;
}

message GoogleDatastoreAdminV1beta1ExportEntitiesMetadata {
    // Metadata common to all Datastore Admin operations.
    GoogleDatastoreAdminV1beta1CommonMetadata common = 1;
    // Description of which entities are being exported.
    GoogleDatastoreAdminV1beta1EntityFilter entityFilter = 2;
    // Location for the export metadata and data files. This will be the same
    // value as the
    // google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix
    // field. The final output location is provided in
    // google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
    string outputUrlPrefix = 3;
    // An estimate of the number of bytes processed.
    GoogleDatastoreAdminV1beta1Progress progressBytes = 4;
    // An estimate of the number of entities processed.
    GoogleDatastoreAdminV1beta1Progress progressEntities = 5;
}

message GoogleDatastoreAdminV1beta1ExportEntitiesResponse {
    // Location of the output metadata file. This can be used to begin an import
    // into Cloud Datastore (this project or another project). See
    // google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url.
    // Only present if the operation completed successfully.
    string outputUrl = 1;
}

message GoogleDatastoreAdminV1beta1ImportEntitiesMetadata {
    // Metadata common to all Datastore Admin operations.
    GoogleDatastoreAdminV1beta1CommonMetadata common = 1;
    // Description of which entities are being imported.
    GoogleDatastoreAdminV1beta1EntityFilter entityFilter = 2;
    // The location of the import metadata file. This will be the same value as
    // the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url
    // field.
    string inputUrl = 3;
    // An estimate of the number of bytes processed.
    GoogleDatastoreAdminV1beta1Progress progressBytes = 4;
    // An estimate of the number of entities processed.
    GoogleDatastoreAdminV1beta1Progress progressEntities = 5;
}

message GoogleDatastoreAdminV1beta1Progress {
    // The amount of work that has been completed. Note that this may be greater
    // than work_estimated.
    string workCompleted = 1;
    // An estimate of how much work needs to be performed. May be zero if the
    // work estimate is unavailable.
    string workEstimated = 2;
}

message GqlQuery {
    // When false, the query string must not contain any literals and instead must
    // bind all values. For example,
    // `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
    // `SELECT * FROM Kind WHERE a = @value` is.
    bool allowLiterals = 1;
    // For each non-reserved named binding site in the query string, there must be
    // a named parameter with that name, but not necessarily the inverse.
    // 
    // Key must match regex `A-Za-z_$*`, must not match regex
    // `__.*__`, and must not be `""`.
    map<string, GqlQueryParameter> namedBindings = 2;
    // Numbered binding site @1 references the first numbered parameter,
    // effectively using 1-based indexing, rather than the usual 0.
    // 
    // For each binding site numbered i in `query_string`, there must be an i-th
    // numbered parameter. The inverse must also be true.
    repeated GqlQueryParameter positionalBindings = 3;
    // A string of the format described
    // [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
    string queryString = 4;
}

message GqlQueryParameter {
    // A query cursor. Query cursors are returned in query
    // result batches.
    string cursor = 1;
    // A value parameter.
    Value value = 2;
}

message Key {
    // Entities are partitioned into subsets, currently identified by a project
    // ID and namespace ID.
    // Queries are scoped to a single partition.
    PartitionId partitionId = 1;
    // The entity path.
    // An entity path consists of one or more elements composed of a kind and a
    // string or numerical identifier, which identify entities. The first
    // element identifies a _root entity_, the second element identifies
    // a _child_ of the root entity, the third element identifies a child of the
    // second entity, and so forth. The entities identified by all prefixes of
    // the path are called the element's _ancestors_.
    // 
    // An entity path is always fully complete: *all* of the entity's ancestors
    // are required to be in the path along with the entity identifier itself.
    // The only exception is that in some documented cases, the identifier in the
    // last path element (for the entity) itself may be omitted. For example,
    // the last path element of the key of `Mutation.insert` may have no
    // identifier.
    // 
    // A path can never be empty, and a path can have at most 100 elements.
    repeated PathElement path = 2;
}

message KindExpression {
    // The name of the kind.
    string name = 1;
}

message LatLng {
    // The latitude in degrees. It must be in the range [-90.0, +90.0].
    double latitude = 1;
    // The longitude in degrees. It must be in the range [-180.0, +180.0].
    double longitude = 2;
}

message LookupRequest {
    // Keys of entities to look up.
    repeated Key keys = 1;
    // The options for this lookup request.
    ReadOptions readOptions = 2;
}

message LookupResponse {
    // A list of keys that were not looked up due to resource constraints. The
    // order of results in this field is undefined and has no relation to the
    // order of the keys in the input.
    repeated Key deferred = 1;
    // Entities found as `ResultType.FULL` entities. The order of results in this
    // field is undefined and has no relation to the order of the keys in the
    // input.
    repeated EntityResult found = 2;
    // Entities not found as `ResultType.KEY_ONLY` entities. The order of results
    // in this field is undefined and has no relation to the order of the keys
    // in the input.
    repeated EntityResult missing = 3;
}

message Mutation {
    // The version of the entity that this mutation is being applied to. If this
    // does not match the current version on the server, the mutation conflicts.
    string baseVersion = 1;
    // The key of the entity to delete. The entity may or may not already exist.
    // Must have a complete key path and must not be reserved/read-only.
    Key delete = 2;
    // The entity to insert. The entity must not already exist.
    // The entity key's final path element may be incomplete.
    Entity insert = 3;
    // The entity to update. The entity must already exist.
    // Must have a complete key path.
    Entity update = 4;
    // The entity to upsert. The entity may or may not already exist.
    // The entity key's final path element may be incomplete.
    Entity upsert = 5;
}

message MutationResult {
    // Whether a conflict was detected for this mutation. Always false when a
    // conflict detection strategy field is not set in the mutation.
    bool conflictDetected = 1;
    // The automatically allocated key.
    // Set only when the mutation allocated a key.
    Key key = 2;
    // The version of the entity on the server after processing the mutation. If
    // the mutation doesn't change anything on the server, then the version will
    // be the version of the current entity or, if no entity is present, a version
    // that is strictly greater than the version of any previous entity and less
    // than the version of any possible future entity.
    string version = 3;
}

message PartitionId {
    // If not empty, the ID of the namespace to which the entities belong.
    string namespaceId = 1;
    // The ID of the project to which the entities belong.
    string projectId = 2;
}

message PathElement {
    // The auto-allocated ID of the entity.
    // Never equal to zero. Values less than zero are discouraged and may not
    // be supported in the future.
    string id = 1;
    // The kind of the entity.
    // A kind matching regex `__.*__` is reserved/read-only.
    // A kind must not contain more than 1500 bytes when UTF-8 encoded.
    // Cannot be `""`.
    string kind = 2;
    // The name of the entity.
    // A name matching regex `__.*__` is reserved/read-only.
    // A name must not be more than 1500 bytes when UTF-8 encoded.
    // Cannot be `""`.
    string name = 3;
}

message Projection {
    // The property to project.
    PropertyReference property = 1;
}

message PropertyFilter {
    // The operator to filter by.
    enum PropertyFilter_Op {
        PROPERTYFILTER_OP_OPERATOR_UNSPECIFIED = 0;
        PROPERTYFILTER_OP_LESS_THAN = 1;
        PROPERTYFILTER_OP_LESS_THAN_OR_EQUAL = 2;
        PROPERTYFILTER_OP_GREATER_THAN = 3;
        PROPERTYFILTER_OP_GREATER_THAN_OR_EQUAL = 4;
        PROPERTYFILTER_OP_EQUAL = 5;
        PROPERTYFILTER_OP_HAS_ANCESTOR = 6;
    }
    PropertyFilter_Op op = 1;
    // The property to filter by.
    PropertyReference property = 2;
    // The value to compare the property to.
    Value value = 3;
}

message PropertyOrder {
    // The direction to order by. Defaults to `ASCENDING`.
    enum PropertyOrder_Direction {
        PROPERTYORDER_DIRECTION_DIRECTION_UNSPECIFIED = 0;
        PROPERTYORDER_DIRECTION_ASCENDING = 1;
        PROPERTYORDER_DIRECTION_DESCENDING = 2;
    }
    PropertyOrder_Direction direction = 1;
    // The property to order by.
    PropertyReference property = 2;
}

message PropertyReference {
    // The name of the property.
    // If name includes "."s, it may be interpreted as a property name path.
    string name = 1;
}

message Query {
    // The properties to make distinct. The query results will contain the first
    // result for each distinct combination of values for the given properties
    // (if empty, all results are returned).
    repeated PropertyReference distinctOn = 1;
    // An ending point for the query results. Query cursors are
    // returned in query result batches and
    // [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
    string endCursor = 2;
    // The filter to apply.
    Filter filter = 3;
    // The kinds to query (if empty, returns entities of all kinds).
    // Currently at most 1 kind may be specified.
    repeated KindExpression kind = 4;
    // The maximum number of results to return. Applies after all other
    // constraints. Optional.
    // Unspecified is interpreted as no limit.
    // Must be >= 0 if specified.
    int32 limit = 5;
    // The number of results to skip. Applies before limit, but after all other
    // constraints. Optional. Must be >= 0 if specified.
    int32 offset = 6;
    // The order to apply to the query results (if empty, order is unspecified).
    repeated PropertyOrder order = 7;
    // The projection to return. Defaults to returning all properties.
    repeated Projection projection = 8;
    // A starting point for the query results. Query cursors are
    // returned in query result batches and
    // [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
    string startCursor = 9;
}

message QueryResultBatch {
    // A cursor that points to the position after the last result in the batch.
    string endCursor = 1;
    // The result type for every entity in `entity_results`.
    enum QueryResultBatch_EntityResultType {
        QUERYRESULTBATCH_ENTITYRESULTTYPE_RESULT_TYPE_UNSPECIFIED = 0;
        QUERYRESULTBATCH_ENTITYRESULTTYPE_FULL = 1;
        QUERYRESULTBATCH_ENTITYRESULTTYPE_PROJECTION = 2;
        QUERYRESULTBATCH_ENTITYRESULTTYPE_KEY_ONLY = 3;
    }
    QueryResultBatch_EntityResultType entityResultType = 2;
    // The results for this batch.
    repeated EntityResult entityResults = 3;
    // The state of the query after the current batch.
    enum QueryResultBatch_MoreResult {
        QUERYRESULTBATCH_MORERESULT_MORE_RESULTS_TYPE_UNSPECIFIED = 0;
        QUERYRESULTBATCH_MORERESULT_NOT_FINISHED = 1;
        QUERYRESULTBATCH_MORERESULT_MORE_RESULTS_AFTER_LIMIT = 2;
        QUERYRESULTBATCH_MORERESULT_MORE_RESULTS_AFTER_CURSOR = 3;
        QUERYRESULTBATCH_MORERESULT_NO_MORE_RESULTS = 4;
    }
    QueryResultBatch_MoreResult moreResults = 4;
    // A cursor that points to the position after the last skipped result.
    // Will be set when `skipped_results` != 0.
    string skippedCursor = 5;
    // The number of results skipped, typically because of an offset.
    int32 skippedResults = 6;
    // The version number of the snapshot this batch was returned from.
    // This applies to the range of results from the query's `start_cursor` (or
    // the beginning of the query if no cursor was given) to this batch's
    // `end_cursor` (not the query's `end_cursor`).
    // 
    // In a single transaction, subsequent query result batches for the same query
    // can have a greater snapshot version number. Each batch's snapshot version
    // is valid for all preceding batches.
    // The value will be zero for eventually consistent queries.
    string snapshotVersion = 7;
}

message ReadOnly {
}

message ReadOptions {
    // The non-transactional read consistency to use.
    // Cannot be set to `STRONG` for global queries.
    enum ReadOptions_ReadConsistency {
        READOPTIONS_READCONSISTENCY_READ_CONSISTENCY_UNSPECIFIED = 0;
        READOPTIONS_READCONSISTENCY_STRONG = 1;
        READOPTIONS_READCONSISTENCY_EVENTUAL = 2;
    }
    ReadOptions_ReadConsistency readConsistency = 1;
    // The identifier of the transaction in which to read. A
    // transaction identifier is returned by a call to
    // Datastore.BeginTransaction.
    string transaction = 2;
}

message ReadWrite {
    // The transaction identifier of the transaction being retried.
    string previousTransaction = 1;
}

message RollbackRequest {
    // The transaction identifier, returned by a call to
    // Datastore.BeginTransaction.
    string transaction = 1;
}

message RollbackResponse {
}

message RunQueryRequest {
    // The GQL query to run.
    GqlQuery gqlQuery = 1;
    // Entities are partitioned into subsets, identified by a partition ID.
    // Queries are scoped to a single partition.
    // This partition ID is normalized with the standard default context
    // partition ID.
    PartitionId partitionId = 2;
    // The query to run.
    Query query = 3;
    // The options for this query.
    ReadOptions readOptions = 4;
}

message RunQueryResponse {
    // A batch of query results (always present).
    QueryResultBatch batch = 1;
    // The parsed form of the `GqlQuery` from the request, if it was set.
    Query query = 2;
}

message TransactionOptions {
    // The transaction should only allow reads.
    ReadOnly readOnly = 1;
    // The transaction should allow both reads and writes.
    ReadWrite readWrite = 2;
}

message Value {
    // An array value.
    // Cannot contain another array value.
    // A `Value` instance that sets field `array_value` must not set fields
    // `meaning` or `exclude_from_indexes`.
    ArrayValue arrayValue = 1;
    // A blob value.
    // May have at most 1,000,000 bytes.
    // When `exclude_from_indexes` is false, may have at most 1500 bytes.
    // In JSON requests, must be base64-encoded.
    string blobValue = 2;
    // A boolean value.
    bool booleanValue = 3;
    // A double value.
    double doubleValue = 4;
    // An entity value.
    // 
    // - May have no key.
    // - May have a key with an incomplete key path.
    // - May have a reserved/read-only key.
    Entity entityValue = 5;
    // If the value should be excluded from all indexes including those defined
    // explicitly.
    bool excludeFromIndexes = 6;
    // A geo point value representing a point on the surface of Earth.
    LatLng geoPointValue = 7;
    // An integer value.
    string integerValue = 8;
    // A key value.
    Key keyValue = 9;
    // The `meaning` field should only be populated for backwards compatibility.
    int32 meaning = 10;
    // A null value.
    enum Value_NullValue {
        VALUE_NULLVALUE_NULL_VALUE = 0;
    }
    Value_NullValue nullValue = 11;
    // A UTF-8 encoded string value.
    // When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.
    // Otherwise, may be set to at least 1,000,000 bytes.
    string stringValue = 12;
    // A timestamp value.
    // When stored in the Datastore, precise only to microseconds;
    // any additional precision is rounded down.
    string timestampValue = 13;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudDatastoreService {
    // Allocates IDs for the given keys, which is useful for referencing an entity
    // before it is inserted.
    rpc PostV1beta3ProjectsProjectId:AllocateIds(PostV1beta3ProjectsProjectId:AllocateIdsRequest) returns (AllocateIdsResponse) {
      option (google.api.http) = {
        post: "//v1beta3/projects/{projectId}:allocateIds"
        body: "body"
      };
    }
    // Begins a new transaction.
    rpc PostV1beta3ProjectsProjectId:BeginTransaction(PostV1beta3ProjectsProjectId:BeginTransactionRequest) returns (BeginTransactionResponse) {
      option (google.api.http) = {
        post: "//v1beta3/projects/{projectId}:beginTransaction"
        body: "body"
      };
    }
    // Commits a transaction, optionally creating, deleting or modifying some
    // entities.
    rpc PostV1beta3ProjectsProjectId:Commit(PostV1beta3ProjectsProjectId:CommitRequest) returns (CommitResponse) {
      option (google.api.http) = {
        post: "//v1beta3/projects/{projectId}:commit"
        body: "body"
      };
    }
    // Looks up entities by key.
    rpc PostV1beta3ProjectsProjectId:Lookup(PostV1beta3ProjectsProjectId:LookupRequest) returns (LookupResponse) {
      option (google.api.http) = {
        post: "//v1beta3/projects/{projectId}:lookup"
        body: "body"
      };
    }
    // Rolls back a transaction.
    rpc PostV1beta3ProjectsProjectId:Rollback(PostV1beta3ProjectsProjectId:RollbackRequest) returns (RollbackResponse) {
      option (google.api.http) = {
        post: "//v1beta3/projects/{projectId}:rollback"
        body: "body"
      };
    }
    // Queries for entities.
    rpc PostV1beta3ProjectsProjectId:RunQuery(PostV1beta3ProjectsProjectId:RunQueryRequest) returns (RunQueryResponse) {
      option (google.api.http) = {
        post: "//v1beta3/projects/{projectId}:runQuery"
        body: "body"
      };
    }
}

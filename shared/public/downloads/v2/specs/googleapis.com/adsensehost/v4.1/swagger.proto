syntax = "proto3";

import "google/api/annotations.proto";

package adsensehost;

message GetAccountsRequest {
    alt alt = 1;
    string fields = 2;
    // Ad clients to list accounts for.
    repeated string filterAdClientId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetAccountsAccountIdRequest {
    // Account to get information about.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetAccountsAccountIdAdclientsRequest {
    // Account for which to list ad clients.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of ad clients to include in the response, used for paging.
    int32 maxResults = 5;
    string oauth_token = 6;
    // A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetAccountsAccountIdAdclientsAdClientIdRequest {
    // Account which contains the ad client.
    string accountId = 1;
    // Ad client to get.
    string adClientId = 2;
    alt alt = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetAccountsAccountIdAdclientsAdClientIdAdunitsRequest {
    // Account which contains the ad client.
    string accountId = 1;
    // Ad client for which to list ad units.
    string adClientId = 2;
    alt alt = 3;
    string fields = 4;
    // Whether to include inactive ad units. Default: true.
    bool includeInactive = 5;
    string key = 6;
    // The maximum number of ad units to include in the response, used for paging.
    int32 maxResults = 7;
    string oauth_token = 8;
    // A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PutAccountsAccountIdAdclientsAdClientIdAdunitsRequest {
    // Account which contains the ad client.
    string accountId = 1;
    // Ad client which contains the ad unit.
    string adClientId = 2;
    alt alt = 3;
    AdUnit body = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostAccountsAccountIdAdclientsAdClientIdAdunitsRequest {
    // Account which will contain the ad unit.
    string accountId = 1;
    // Ad client into which to insert the ad unit.
    string adClientId = 2;
    alt alt = 3;
    AdUnit body = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitIdRequest {
    // Account which contains the ad unit.
    string accountId = 1;
    // Ad client for which to get ad unit.
    string adClientId = 2;
    // Ad unit to get.
    string adUnitId = 3;
    alt alt = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitIdRequest {
    // Account which contains the ad unit.
    string accountId = 1;
    // Ad client for which to get ad unit.
    string adClientId = 2;
    // Ad unit to delete.
    string adUnitId = 3;
    alt alt = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitIdAdcodeRequest {
    // Account which contains the ad client.
    string accountId = 1;
    // Ad client with contains the ad unit.
    string adClientId = 2;
    // Ad unit to get the code for.
    string adUnitId = 3;
    alt alt = 4;
    string fields = 5;
    // Host custom channel to attach to the ad code.
    repeated string hostCustomChannelId = 6;
    string key = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetAccountsAccountIdReportsRequest {
    // Hosted account upon which to report.
    string accountId = 1;
    alt alt = 2;
    // Dimensions to base the report on.
    repeated string dimension = 3;
    // End of the date range to report on in "YYYY-MM-DD" format, inclusive.
    string endDate = 4;
    string fields = 5;
    // Filters to be run on the report.
    repeated string filter = 6;
    string key = 7;
    // Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.
    string locale = 8;
    // The maximum number of rows of report data to return.
    int32 maxResults = 9;
    // Numeric columns to include in the report.
    repeated string metric = 10;
    string oauth_token = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.
    repeated string sort = 14;
    // Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
    string startDate = 15;
    // Index of the first row of report data to return.
    int32 startIndex = 16;
    string userIp = 17;
}

message GetAdclientsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of ad clients to include in the response, used for paging.
    int32 maxResults = 4;
    string oauth_token = 5;
    // A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetAdclientsAdClientIdRequest {
    // Ad client to get.
    string adClientId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetAdclientsAdClientIdCustomchannelsRequest {
    // Ad client for which to list custom channels.
    string adClientId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of custom channels to include in the response, used for paging.
    int32 maxResults = 5;
    string oauth_token = 6;
    // A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutAdclientsAdClientIdCustomchannelsRequest {
    // Ad client in which the custom channel will be updated.
    string adClientId = 1;
    alt alt = 2;
    CustomChannel body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostAdclientsAdClientIdCustomchannelsRequest {
    // Ad client to which the new custom channel will be added.
    string adClientId = 1;
    alt alt = 2;
    CustomChannel body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetAdclientsAdClientIdCustomchannelsCustomChannelIdRequest {
    // Ad client from which to get the custom channel.
    string adClientId = 1;
    alt alt = 2;
    // Custom channel to get.
    string customChannelId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteAdclientsAdClientIdCustomchannelsCustomChannelIdRequest {
    // Ad client from which to delete the custom channel.
    string adClientId = 1;
    alt alt = 2;
    // Custom channel to delete.
    string customChannelId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetAdclientsAdClientIdUrlchannelsRequest {
    // Ad client for which to list URL channels.
    string adClientId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of URL channels to include in the response, used for paging.
    int32 maxResults = 5;
    string oauth_token = 6;
    // A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostAdclientsAdClientIdUrlchannelsRequest {
    // Ad client to which the new URL channel will be added.
    string adClientId = 1;
    alt alt = 2;
    UrlChannel body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteAdclientsAdClientIdUrlchannelsUrlChannelIdRequest {
    // Ad client from which to delete the URL channel.
    string adClientId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // URL channel to delete.
    string urlChannelId = 8;
    string userIp = 9;
}

message GetAssociationsessionsStartRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // Products to associate with the user.
    repeated string productCode = 6;
    string quotaUser = 7;
    string userIp = 8;
    // The preferred locale of the user.
    string userLocale = 9;
    // The locale of the user's hosted website.
    string websiteLocale = 10;
    // The URL of the user's hosted website.
    string websiteUrl = 11;
}

message GetAssociationsessionsVerifyRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The token returned to the association callback URL.
    string token = 7;
    string userIp = 8;
}

message GetReportsRequest {
    alt alt = 1;
    // Dimensions to base the report on.
    repeated string dimension = 2;
    // End of the date range to report on in "YYYY-MM-DD" format, inclusive.
    string endDate = 3;
    string fields = 4;
    // Filters to be run on the report.
    repeated string filter = 5;
    string key = 6;
    // Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.
    string locale = 7;
    // The maximum number of rows of report data to return.
    int32 maxResults = 8;
    // Numeric columns to include in the report.
    repeated string metric = 9;
    string oauth_token = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.
    repeated string sort = 13;
    // Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
    string startDate = 14;
    // Index of the first row of report data to return.
    int32 startIndex = 15;
    string userIp = 16;
}

message Account {
    // Unique identifier of this account.
    string id = 1;
    // Kind of resource this is, in this case adsensehost#account.
    string kind = 2;
    // Name of this account.
    string name = 3;
    // Approval status of this account. One of: PENDING, APPROVED, DISABLED.
    string status = 4;
}

message Accounts {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The accounts returned in this list response.
    repeated Account items = 2;
    // Kind of list this is, in this case adsensehost#accounts.
    string kind = 3;
}

message AdClient {
    // Whether this ad client is opted in to ARC.
    bool arcOptIn = 1;
    // Unique identifier of this ad client.
    string id = 2;
    // Kind of resource this is, in this case adsensehost#adClient.
    string kind = 3;
    // This ad client's product code, which corresponds to the PRODUCT_CODE report dimension.
    string productCode = 4;
    // Whether this ad client supports being reported on.
    bool supportsReporting = 5;
}

message AdClients {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The ad clients returned in this list response.
    repeated AdClient items = 2;
    // Kind of list this is, in this case adsensehost#adClients.
    string kind = 3;
    // Continuation token used to page through ad clients. To retrieve the next page of results, set the next request's "pageToken" value to this.
    string nextPageToken = 4;
}

message AdCode {
    // The ad code snippet.
    string adCode = 1;
    // Kind this is, in this case adsensehost#adCode.
    string kind = 2;
}

message AdStyle {
    // The colors included in the style. These are represented as six hexadecimal characters, similar to HTML color codes, but without the leading hash.
    message Colors {
            // The color of the ad background.
    string background = 1;
            // The color of the ad border.
    string border = 2;
            // The color of the ad text.
    string text = 3;
            // The color of the ad title.
    string title = 4;
            // The color of the ad url.
    string url = 5;
    }
    Colors colors = 1;
    // The style of the corners in the ad (deprecated: never populated, ignored).
    string corners = 2;
    // The font which is included in the style.
    message Font {
            // The family of the font. Possible values are: ACCOUNT_DEFAULT_FAMILY, ADSENSE_DEFAULT_FAMILY, ARIAL, TIMES and VERDANA.
    string family = 1;
            // The size of the font. Possible values are: ACCOUNT_DEFAULT_SIZE, ADSENSE_DEFAULT_SIZE, SMALL, MEDIUM and LARGE.
    string size = 2;
    }
    Font font = 3;
    // Kind this is, in this case adsensehost#adStyle.
    string kind = 4;
}

message AdUnit {
    // Identity code of this ad unit, not necessarily unique across ad clients.
    string code = 1;
    // Settings specific to content ads (AFC) and highend mobile content ads (AFMC - deprecated).
    message ContentAdsSettings {
            // The backup option to be used in instances where no ad is available.
    message BackupOption {
                    // Color to use when type is set to COLOR. These are represented as six hexadecimal characters, similar to HTML color codes, but without the leading hash.
    string color = 1;
                    // Type of the backup option. Possible values are BLANK, COLOR and URL.
    string type = 2;
                    // URL to use when type is set to URL.
    string url = 3;
        }
        BackupOption backupOption = 1;
            // Size of this ad unit. Size values are in the form SIZE_{width}_{height}.
    string size = 2;
            // Type of this ad unit. Possible values are TEXT, TEXT_IMAGE, IMAGE and LINK.
    string type = 3;
    }
    ContentAdsSettings contentAdsSettings = 2;
    // Custom style information specific to this ad unit.
    AdStyle customStyle = 3;
    // Unique identifier of this ad unit. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
    string id = 4;
    // Kind of resource this is, in this case adsensehost#adUnit.
    string kind = 5;
    // Settings specific to WAP mobile content ads (AFMC - deprecated).
    message MobileContentAdsSettings {
            // The markup language to use for this ad unit.
    string markupLanguage = 1;
            // The scripting language to use for this ad unit.
    string scriptingLanguage = 2;
            // Size of this ad unit.
    string size = 3;
            // Type of this ad unit.
    string type = 4;
    }
    MobileContentAdsSettings mobileContentAdsSettings = 6;
    // Name of this ad unit.
    string name = 7;
    // Status of this ad unit. Possible values are:
    // NEW: Indicates that the ad unit was created within the last seven days and does not yet have any activity associated with it.
    // 
    // ACTIVE: Indicates that there has been activity on this ad unit in the last seven days.
    // 
    // INACTIVE: Indicates that there has been no activity on this ad unit in the last seven days.
    string status = 8;
}

message AdUnits {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The ad units returned in this list response.
    repeated AdUnit items = 2;
    // Kind of list this is, in this case adsensehost#adUnits.
    string kind = 3;
    // Continuation token used to page through ad units. To retrieve the next page of results, set the next request's "pageToken" value to this.
    string nextPageToken = 4;
}

message AssociationSession {
    // Hosted account id of the associated publisher after association. Present if status is ACCEPTED.
    string accountId = 1;
    // Unique identifier of this association session.
    string id = 2;
    // Kind of resource this is, in this case adsensehost#associationSession.
    string kind = 3;
    // The products to associate with the user. Options: AFC, AFG, AFV, AFS (deprecated), AFMC (deprecated)
    repeated string productCodes = 4;
    // Redirect URL of this association session. Used to redirect users into the AdSense association flow.
    string redirectUrl = 5;
    // Status of the completed association, available once the association callback token has been verified. One of ACCEPTED, REJECTED, or ERROR.
    string status = 6;
    // The preferred locale of the user themselves when going through the AdSense association flow.
    string userLocale = 7;
    // The locale of the user's hosted website.
    string websiteLocale = 8;
    // The URL of the user's hosted website.
    string websiteUrl = 9;
}

message CustomChannel {
    // Code of this custom channel, not necessarily unique across ad clients.
    string code = 1;
    // Unique identifier of this custom channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
    string id = 2;
    // Kind of resource this is, in this case adsensehost#customChannel.
    string kind = 3;
    // Name of this custom channel.
    string name = 4;
}

message CustomChannels {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The custom channels returned in this list response.
    repeated CustomChannel items = 2;
    // Kind of list this is, in this case adsensehost#customChannels.
    string kind = 3;
    // Continuation token used to page through custom channels. To retrieve the next page of results, set the next request's "pageToken" value to this.
    string nextPageToken = 4;
}

message Report {
    // The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
    repeated string averages = 1;
    // The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.
    message Header {
            // The currency of this column. Only present if the header type is METRIC_CURRENCY.
    string currency = 1;
            // The name of the header.
    string name = 2;
            // The type of the header; one of DIMENSION, METRIC_TALLY, METRIC_RATIO, or METRIC_CURRENCY.
    string type = 3;
    }
    repeated Header headers = 2;
    // Kind this is, in this case adsensehost#report.
    string kind = 3;
    // The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.
    message Row {
    }
    repeated Row rows = 4;
    // The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.
    string totalMatchedRows = 5;
    // The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
    repeated string totals = 6;
    // Any warnings associated with generation of the report.
    repeated string warnings = 7;
}

message UrlChannel {
    // Unique identifier of this URL channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
    string id = 1;
    // Kind of resource this is, in this case adsensehost#urlChannel.
    string kind = 2;
    // URL Pattern of this URL channel. Does not include "http://" or "https://". Example: www.example.com/home
    string urlPattern = 3;
}

message UrlChannels {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The URL channels returned in this list response.
    repeated UrlChannel items = 2;
    // Kind of list this is, in this case adsensehost#urlChannels.
    string kind = 3;
    // Continuation token used to page through URL channels. To retrieve the next page of results, set the next request's "pageToken" value to this.
    string nextPageToken = 4;
}

enum Alt {
    CSV = 0;
    JSON = 1;
}

service AdSenseHostService {
    // List hosted accounts associated with this AdSense account by ad client id.
    rpc GetAccounts(GetAccountsRequest) returns (Accounts) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/accounts"
      };
    }
    // Get information about the selected associated AdSense account.
    rpc GetAccountsAccountId(GetAccountsAccountIdRequest) returns (Account) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/accounts/{accountId}"
      };
    }
    // List all hosted ad clients in the specified hosted account.
    rpc GetAccountsAccountIdAdclients(GetAccountsAccountIdAdclientsRequest) returns (AdClients) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/accounts/{accountId}/adclients"
      };
    }
    // Get information about one of the ad clients in the specified publisher's AdSense account.
    rpc GetAccountsAccountIdAdclientsAdClientId(GetAccountsAccountIdAdclientsAdClientIdRequest) returns (AdClient) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}"
      };
    }
    // List all ad units in the specified publisher's AdSense account.
    rpc GetAccountsAccountIdAdclientsAdClientIdAdunits(GetAccountsAccountIdAdclientsAdClientIdAdunitsRequest) returns (AdUnits) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits"
      };
    }
    // Update the supplied ad unit in the specified publisher AdSense account.
    rpc PutAccountsAccountIdAdclientsAdClientIdAdunits(PutAccountsAccountIdAdclientsAdClientIdAdunitsRequest) returns (AdUnit) {
      option (google.api.http) = {
        put: "/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits"
        body: "body"
      };
    }
    // Insert the supplied ad unit into the specified publisher AdSense account.
    rpc PostAccountsAccountIdAdclientsAdClientIdAdunits(PostAccountsAccountIdAdclientsAdClientIdAdunitsRequest) returns (AdUnit) {
      option (google.api.http) = {
        post: "/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits"
        body: "body"
      };
    }
    // Get the specified host ad unit in this AdSense account.
    rpc GetAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitId(GetAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitIdRequest) returns (AdUnit) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}"
      };
    }
    // Delete the specified ad unit from the specified publisher AdSense account.
    rpc DeleteAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitId(DeleteAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitIdRequest) returns (AdUnit) {
      option (google.api.http) = {
        delete: "/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}"
      };
    }
    // Get ad code for the specified ad unit, attaching the specified host custom channels.
    rpc GetAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitIdAdcode(GetAccountsAccountIdAdclientsAdClientIdAdunitsAdUnitIdAdcodeRequest) returns (AdCode) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode"
      };
    }
    // Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
    rpc GetAccountsAccountIdReports(GetAccountsAccountIdReportsRequest) returns (Report) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/accounts/{accountId}/reports"
      };
    }
    // List all host ad clients in this AdSense account.
    rpc GetAdclients(GetAdclientsRequest) returns (AdClients) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/adclients"
      };
    }
    // Get information about one of the ad clients in the Host AdSense account.
    rpc GetAdclientsAdClientId(GetAdclientsAdClientIdRequest) returns (AdClient) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/adclients/{adClientId}"
      };
    }
    // List all host custom channels in this AdSense account.
    rpc GetAdclientsAdClientIdCustomchannels(GetAdclientsAdClientIdCustomchannelsRequest) returns (CustomChannels) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/adclients/{adClientId}/customchannels"
      };
    }
    // Update a custom channel in the host AdSense account.
    rpc PutAdclientsAdClientIdCustomchannels(PutAdclientsAdClientIdCustomchannelsRequest) returns (CustomChannel) {
      option (google.api.http) = {
        put: "/adsensehost/v4.1/adclients/{adClientId}/customchannels"
        body: "body"
      };
    }
    // Add a new custom channel to the host AdSense account.
    rpc PostAdclientsAdClientIdCustomchannels(PostAdclientsAdClientIdCustomchannelsRequest) returns (CustomChannel) {
      option (google.api.http) = {
        post: "/adsensehost/v4.1/adclients/{adClientId}/customchannels"
        body: "body"
      };
    }
    // Get a specific custom channel from the host AdSense account.
    rpc GetAdclientsAdClientIdCustomchannelsCustomChannelId(GetAdclientsAdClientIdCustomchannelsCustomChannelIdRequest) returns (CustomChannel) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/adclients/{adClientId}/customchannels/{customChannelId}"
      };
    }
    // Delete a specific custom channel from the host AdSense account.
    rpc DeleteAdclientsAdClientIdCustomchannelsCustomChannelId(DeleteAdclientsAdClientIdCustomchannelsCustomChannelIdRequest) returns (CustomChannel) {
      option (google.api.http) = {
        delete: "/adsensehost/v4.1/adclients/{adClientId}/customchannels/{customChannelId}"
      };
    }
    // List all host URL channels in the host AdSense account.
    rpc GetAdclientsAdClientIdUrlchannels(GetAdclientsAdClientIdUrlchannelsRequest) returns (UrlChannels) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/adclients/{adClientId}/urlchannels"
      };
    }
    // Add a new URL channel to the host AdSense account.
    rpc PostAdclientsAdClientIdUrlchannels(PostAdclientsAdClientIdUrlchannelsRequest) returns (UrlChannel) {
      option (google.api.http) = {
        post: "/adsensehost/v4.1/adclients/{adClientId}/urlchannels"
        body: "body"
      };
    }
    // Delete a URL channel from the host AdSense account.
    rpc DeleteAdclientsAdClientIdUrlchannelsUrlChannelId(DeleteAdclientsAdClientIdUrlchannelsUrlChannelIdRequest) returns (UrlChannel) {
      option (google.api.http) = {
        delete: "/adsensehost/v4.1/adclients/{adClientId}/urlchannels/{urlChannelId}"
      };
    }
    // Create an association session for initiating an association with an AdSense user.
    rpc GetAssociationsessionsStart(GetAssociationsessionsStartRequest) returns (AssociationSession) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/associationsessions/start"
      };
    }
    // Verify an association session after the association callback returns from AdSense signup.
    rpc GetAssociationsessionsVerify(GetAssociationsessionsVerifyRequest) returns (AssociationSession) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/associationsessions/verify"
      };
    }
    // Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
    rpc GetReports(GetReportsRequest) returns (Report) {
      option (google.api.http) = {
        get: "/adsensehost/v4.1/reports"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package cloudtoolresultsfirstparty;

message GetProjectIdHistoriesRequest {
    alt alt = 1;
    string fields = 2;
    // If set, only return histories with the given name.
    // 
    // Optional.
    string filterByName = 3;
    string key = 4;
    string oauth_token = 5;
    // The maximum number of Histories to fetch.
    // 
    // Default value: 20. The server will use this default if the field is not set or has a value of 0. Any value greater than 100 will be treated as 100.
    // 
    // Optional.
    int32 pageSize = 6;
    // A continuation token to resume the query at the next item.
    // 
    // Optional.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // A Project id.
    // 
    // Required.
    string projectId = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostProjectIdHistoriesRequest {
    alt alt = 1;
    History body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // A Project id.
    // 
    // Required.
    string projectId = 7;
    string quotaUser = 8;
    // A unique request ID for server to detect duplicated requests. For example, a UUID.
    // 
    // Optional, but strongly recommended.
    string requestId = 9;
    string userIp = 10;
}

message GetProjectIdHistoriesHistoryIdRequest {
    alt alt = 1;
    string fields = 2;
    // A History id.
    // 
    // Required.
    string historyId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // A Project id.
    // 
    // Required.
    string projectId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectIdHistoriesHistoryIdExecutionsRequest {
    alt alt = 1;
    string fields = 2;
    // A History id.
    // 
    // Required.
    string historyId = 3;
    string key = 4;
    string oauth_token = 5;
    // The maximum number of Executions to fetch.
    // 
    // Default value: 25. The server will use this default if the field is not set or has a value of 0.
    // 
    // Optional.
    int32 pageSize = 6;
    // A continuation token to resume the query at the next item.
    // 
    // Optional.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // A Project id.
    // 
    // Required.
    string projectId = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostProjectIdHistoriesHistoryIdExecutionsRequest {
    alt alt = 1;
    Execution body = 2;
    string fields = 3;
    // A History id.
    // 
    // Required.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // A Project id.
    // 
    // Required.
    string projectId = 8;
    string quotaUser = 9;
    // A unique request ID for server to detect duplicated requests. For example, a UUID.
    // 
    // Optional, but strongly recommended.
    string requestId = 10;
    string userIp = 11;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdRequest {
    alt alt = 1;
    // An Execution id.
    // 
    // Required.
    string executionId = 2;
    string fields = 3;
    // A History id.
    // 
    // Required.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // A Project id.
    // 
    // Required.
    string projectId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdClustersRequest {
    alt alt = 1;
    // An Execution id.
    // 
    // Required.
    string executionId = 2;
    string fields = 3;
    // A History id.
    // 
    // Required.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // A Project id.
    // 
    // Required.
    string projectId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdClustersClusterIdRequest {
    alt alt = 1;
    // A Cluster id
    // 
    // Required.
    string clusterId = 2;
    // An Execution id.
    // 
    // Required.
    string executionId = 3;
    string fields = 4;
    // A History id.
    // 
    // Required.
    string historyId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // A Project id.
    // 
    // Required.
    string projectId = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsRequest {
    alt alt = 1;
    // A Execution id.
    // 
    // Required.
    string executionId = 2;
    string fields = 3;
    // A History id.
    // 
    // Required.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    // The maximum number of Steps to fetch.
    // 
    // Default value: 25. The server will use this default if the field is not set or has a value of 0.
    // 
    // Optional.
    int32 pageSize = 7;
    // A continuation token to resume the query at the next item.
    // 
    // Optional.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // A Project id.
    // 
    // Required.
    string projectId = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsRequest {
    alt alt = 1;
    Step body = 2;
    // A Execution id.
    // 
    // Required.
    string executionId = 3;
    string fields = 4;
    // A History id.
    // 
    // Required.
    string historyId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // A Project id.
    // 
    // Required.
    string projectId = 9;
    string quotaUser = 10;
    // A unique request ID for server to detect duplicated requests. For example, a UUID.
    // 
    // Optional, but strongly recommended.
    string requestId = 11;
    string userIp = 12;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdRequest {
    alt alt = 1;
    // A Execution id.
    // 
    // Required.
    string executionId = 2;
    string fields = 3;
    // A History id.
    // 
    // Required.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // A Project id.
    // 
    // Required.
    string projectId = 8;
    string quotaUser = 9;
    // A Step id.
    // 
    // Required.
    string stepId = 10;
    string userIp = 11;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfMetricsSummaryRequest {
    alt alt = 1;
    // A tool results execution ID.
    string executionId = 2;
    string fields = 3;
    // A tool results history ID.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The cloud project
    string projectId = 8;
    string quotaUser = 9;
    // A tool results step ID.
    string stepId = 10;
    string userIp = 11;
}

message PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfMetricsSummaryRequest {
    alt alt = 1;
    PerfMetricsSummary body = 2;
    // A tool results execution ID.
    string executionId = 3;
    string fields = 4;
    // A tool results history ID.
    string historyId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // The cloud project
    string projectId = 9;
    string quotaUser = 10;
    // A tool results step ID.
    string stepId = 11;
    string userIp = 12;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesRequest {
    alt alt = 1;
    // A tool results execution ID.
    string executionId = 2;
    string fields = 3;
    // Specify one or more PerfMetricType values such as CPU to filter the result
    repeated string filter = 4;
    // A tool results history ID.
    string historyId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // The cloud project
    string projectId = 9;
    string quotaUser = 10;
    // A tool results step ID.
    string stepId = 11;
    string userIp = 12;
}

message PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesRequest {
    alt alt = 1;
    PerfSampleSeries body = 2;
    // A tool results execution ID.
    string executionId = 3;
    string fields = 4;
    // A tool results history ID.
    string historyId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // The cloud project
    string projectId = 9;
    string quotaUser = 10;
    // A tool results step ID.
    string stepId = 11;
    string userIp = 12;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesIdRequest {
    alt alt = 1;
    // A tool results execution ID.
    string executionId = 2;
    string fields = 3;
    // A tool results history ID.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The cloud project
    string projectId = 8;
    string quotaUser = 9;
    // A sample series id
    string sampleSeriesId = 10;
    // A tool results step ID.
    string stepId = 11;
    string userIp = 12;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesIdSamplesRequest {
    alt alt = 1;
    // A tool results execution ID.
    string executionId = 2;
    string fields = 3;
    // A tool results history ID.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    // The default page size is 500 samples, and the maximum size is 5000. If the page_size is greater than 5000, the effective page size will be 5000
    int32 pageSize = 7;
    // Optional, the next_page_token returned in the previous response
    string pageToken = 8;
    boolean prettyPrint = 9;
    // The cloud project
    string projectId = 10;
    string quotaUser = 11;
    // A sample series id
    string sampleSeriesId = 12;
    // A tool results step ID.
    string stepId = 13;
    string userIp = 14;
}

message PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesIdSamples:BatchCreateRequest {
    alt alt = 1;
    BatchCreatePerfSamplesRequest body = 2;
    // A tool results execution ID.
    string executionId = 3;
    string fields = 4;
    // A tool results history ID.
    string historyId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // The cloud project
    string projectId = 9;
    string quotaUser = 10;
    // A sample series id
    string sampleSeriesId = 11;
    // A tool results step ID.
    string stepId = 12;
    string userIp = 13;
}

message GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdThumbnailsRequest {
    alt alt = 1;
    // An Execution id.
    // 
    // Required.
    string executionId = 2;
    string fields = 3;
    // A History id.
    // 
    // Required.
    string historyId = 4;
    string key = 5;
    string oauth_token = 6;
    // The maximum number of thumbnails to fetch.
    // 
    // Default value: 50. The server will use this default if the field is not set or has a value of 0.
    // 
    // Optional.
    int32 pageSize = 7;
    // A continuation token to resume the query at the next item.
    // 
    // Optional.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // A Project id.
    // 
    // Required.
    string projectId = 10;
    string quotaUser = 11;
    // A Step id.
    // 
    // Required.
    string stepId = 12;
    string userIp = 13;
}

message PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepId:PublishXunitXmlFilesRequest {
    alt alt = 1;
    PublishXunitXmlFilesRequest body = 2;
    // A Execution id.
    // 
    // Required.
    string executionId = 3;
    string fields = 4;
    // A History id.
    // 
    // Required.
    string historyId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // A Project id.
    // 
    // Required.
    string projectId = 9;
    string quotaUser = 10;
    // A Step id. Note: This step must include a TestExecutionStep.
    // 
    // Required.
    string stepId = 11;
    string userIp = 12;
}

message GetProjectIdSettingsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // A Project id.
    // 
    // Required.
    string projectId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostProjectId:InitializeSettingsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // A Project id.
    // 
    // Required.
    string projectId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message AndroidAppInfo {
    // The name of the app. Optional
    string name = 1;
    // The package name of the app. Required.
    string packageName = 2;
    // The internal version code of the app. Optional.
    string versionCode = 3;
    // The version name of the app. Optional.
    string versionName = 4;
}

message AndroidInstrumentationTest {
    // The java package for the test to be executed. Required
    string testPackageId = 1;
    // The InstrumentationTestRunner class. Required
    string testRunnerClass = 2;
    // Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name"
    // 
    // If empty, all targets in the module will be run.
    repeated string testTargets = 3;
    // The flag indicates whether Android Test Orchestrator will be used to run test or not. Test orchestrator is used if either: - orchestrator_option field is USE_ORCHESTRATOR, and test runner is compatible with orchestrator. Or - orchestrator_option field is unspecified or ORCHESTRATOR_OPTION_UNSPECIFIED, and test runner is compatible with orchestrator.
    bool useOrchestrator = 4;
}

message AndroidRoboTest {
    // The initial activity that should be used to start the app. Optional
    string appInitialActivity = 1;
    // The java package for the bootstrap. Optional
    string bootstrapPackageId = 2;
    // The runner class for the bootstrap. Optional
    string bootstrapRunnerClass = 3;
    // The max depth of the traversal stack Robo can explore. Optional
    int32 maxDepth = 4;
    // The max number of steps/actions Robo can execute. Default is no limit (0). Optional
    int32 maxSteps = 5;
}

message AndroidTest {
    // Infomation about the application under test.
    AndroidAppInfo androidAppInfo = 1;
    // An Android instrumentation test.
    AndroidInstrumentationTest androidInstrumentationTest = 2;
    // An Android robo test.
    AndroidRoboTest androidRoboTest = 3;
    // Max time a test is allowed to run before it is automatically cancelled.
    Duration testTimeout = 4;
}

message Any {
    // A URL/resource name whose content describes the type of the serialized protocol buffer message.
    // 
    // For URLs which use the scheme `http`, `https`, or no scheme, the following restrictions and interpretations apply:
    // 
    // * If no scheme is provided, `https` is assumed. * The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading "." is not accepted). * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)
    // 
    // Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
    string typeUrl = 1;
    // Must be a valid serialized protocol buffer of the above specified type.
    string value = 2;
}

message AppStartTime {
    // Optional. The time from app start to reaching the developer-reported "fully drawn" time. This is only stored if the app includes a call to Activity.reportFullyDrawn(). See https://developer.android.com/topic/performance/launch-time.html#time-full
    Duration fullyDrawnTime = 1;
    // The time from app start to the first displayed activity being drawn, as reported in Logcat. See https://developer.android.com/topic/performance/launch-time.html#time-initial
    Duration initialDisplayTime = 2;
}

message BasicPerfSampleSeries {
    enum BasicPerfSampleSeries_PerfMetricType {
        BASICPERFSAMPLESERIES_PERFMETRICTYPE_CPU = 0;
        BASICPERFSAMPLESERIES_PERFMETRICTYPE_GRAPHICS = 1;
        BASICPERFSAMPLESERIES_PERFMETRICTYPE_MEMORY = 2;
        BASICPERFSAMPLESERIES_PERFMETRICTYPE_NETWORK = 3;
        BASICPERFSAMPLESERIES_PERFMETRICTYPE_PERFMETRICTYPEUNSPECIFIED = 4;
    }
    BasicPerfSampleSeries_PerfMetricType perfMetricType = 1;
    enum BasicPerfSampleSeries_PerfUnit {
        BASICPERFSAMPLESERIES_PERFUNIT_BYTE = 0;
        BASICPERFSAMPLESERIES_PERFUNIT_BYTESPERSECOND = 1;
        BASICPERFSAMPLESERIES_PERFUNIT_FRAMESPERSECOND = 2;
        BASICPERFSAMPLESERIES_PERFUNIT_KIBIBYTE = 3;
        BASICPERFSAMPLESERIES_PERFUNIT_PERCENT = 4;
        BASICPERFSAMPLESERIES_PERFUNIT_PERFUNITUNSPECIFIED = 5;
    }
    BasicPerfSampleSeries_PerfUnit perfUnit = 2;
    enum BasicPerfSampleSeries_SampleSeriesLabel {
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_CPUKERNEL = 0;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_CPUTOTAL = 1;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_CPUUSER = 2;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_GRAPHICSFRAMERATE = 3;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_MEMORYRSSPRIVATE = 4;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_MEMORYRSSSHARED = 5;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_MEMORYRSSTOTAL = 6;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_MEMORYTOTAL = 7;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_NETWORKRECEIVED = 8;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_NETWORKSENT = 9;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_NTBYTESRECEIVED = 10;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_NTBYTESTRANSFERRED = 11;
        BASICPERFSAMPLESERIES_SAMPLESERIESLABEL_SAMPLESERIESTYPEUNSPECIFIED = 12;
    }
    BasicPerfSampleSeries_SampleSeriesLabel sampleSeriesLabel = 3;
}

message BatchCreatePerfSamplesRequest {
    // The set of PerfSamples to create should not include existing timestamps
    repeated PerfSample perfSamples = 1;
}

message BatchCreatePerfSamplesResponse {
    repeated PerfSample perfSamples = 1;
}

message CPUInfo {
    // description of the device processor ie '1.8 GHz hexa core 64-bit ARMv8-A'
    string cpuProcessor = 1;
    // the CPU clock speed in GHz
    float cpuSpeedInGhz = 2;
    // the number of CPU cores
    int32 numberOfCores = 3;
}

message Duration {
    // Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
    int32 nanos = 1;
    // Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    string seconds = 2;
}

message Execution {
    // The time when the Execution status transitioned to COMPLETE.
    // 
    // This value will be set automatically when state transitions to COMPLETE.
    // 
    // - In response: set if the execution state is COMPLETE. - In create/update request: never set
    Timestamp completionTime = 1;
    // The time when the Execution was created.
    // 
    // This value will be set automatically when CreateExecution is called.
    // 
    // - In response: always set - In create/update request: never set
    Timestamp creationTime = 2;
    // A unique identifier within a History for this Execution.
    // 
    // Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.
    // 
    // - In response always set - In create/update request: never set
    string executionId = 3;
    // Classify the result, for example into SUCCESS or FAILURE
    // 
    // - In response: present if set by create/update request - In create/update request: optional
    Outcome outcome = 4;
    // Lightweight information about execution request.
    // 
    // - In response: present if set by create - In create: optional - In update: optional
    Specification specification = 5;
    // The initial state is IN_PROGRESS.
    // 
    // The only legal state transitions is from IN_PROGRESS to COMPLETE.
    // 
    // A PRECONDITION_FAILED will be returned if an invalid transition is requested.
    // 
    // The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times.
    // 
    // If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE.
    // 
    // - In response always set - In create/update request: optional
    enum Execution_State {
        EXECUTION_STATE_COMPLETE = 0;
        EXECUTION_STATE_INPROGRESS = 1;
        EXECUTION_STATE_PENDING = 2;
        EXECUTION_STATE_UNKNOWNSTATE = 3;
    }
    Execution_State state = 6;
    // TestExecution Matrix ID that the TestExecutionService uses.
    // 
    // - In response: present if set by create - In create: optional - In update: never set
    string testExecutionMatrixId = 7;
}

message FailureDetail {
    // If the failure was severe because the system under test crashed.
    bool crashed = 1;
    // If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
    bool notInstalled = 2;
    // If a native process other than the app crashed.
    bool otherNativeCrash = 3;
    // If the test overran some time limit, and that is why it failed.
    bool timedOut = 4;
    // If the robo was unable to crawl the app; perhaps because the app did not start.
    bool unableToCrawl = 5;
}

message FileReference {
    // The URI of a file stored in Google Cloud Storage.
    // 
    // For example: http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format: gs://mybucket/path/to/test.xml with version-specific info, gs://mybucket/path/to/test.xml#1360383693690000
    // 
    // An INVALID_ARGUMENT error will be returned if the URI format is not supported.
    // 
    // - In response: always set - In create/update request: always set
    string fileUri = 1;
}

message History {
    // A short human-readable (plain text) name to display in the UI. Maximum of 100 characters.
    // 
    // - In response: present if set during create. - In create request: optional
    string displayName = 1;
    // A unique identifier within a project for this History.
    // 
    // Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.
    // 
    // - In response always set - In create request: never set
    string historyId = 2;
    // A name to uniquely identify a history within a project. Maximum of 100 characters.
    // 
    // - In response always set - In create request: always set
    string name = 3;
}

message Image {
    // An error explaining why the thumbnail could not be rendered.
    Status error = 1;
    // A reference to the full-size, original image.
    // 
    // This is the same as the tool_outputs entry for the image under its Step.
    // 
    // Always set.
    ToolOutputReference sourceImage = 2;
    // The step to which the image is attached.
    // 
    // Always set.
    string stepId = 3;
    // The thumbnail.
    Thumbnail thumbnail = 4;
}

message InconclusiveDetail {
    // If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.
    bool abortedByUser = 1;
    // If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed.
    // 
    // For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail.
    bool infrastructureFailure = 2;
}

message ListExecutionsResponse {
    // Executions.
    // 
    // Always set.
    repeated Execution executions = 1;
    // A continuation token to resume the query at the next item.
    // 
    // Will only be set if there are more Executions to fetch.
    string nextPageToken = 2;
}

message ListHistoriesResponse {
    // Histories.
    repeated History histories = 1;
    // A continuation token to resume the query at the next item.
    // 
    // Will only be set if there are more histories to fetch.
    // 
    // Tokens are valid for up to one hour from the time of the first list request. For instance, if you make a list request at 1PM and use the token from this first request 10 minutes later, the token from this second response will only be valid for 50 minutes.
    string nextPageToken = 2;
}

message ListPerfSampleSeriesResponse {
    // The resulting PerfSampleSeries sorted by id
    repeated PerfSampleSeries perfSampleSeries = 1;
}

message ListPerfSamplesResponse {
    // Optional, returned if result size exceeds the page size specified in the request (or the default page size, 500, if unspecified). It indicates the last sample timestamp to be used as page_token in subsequent request
    string nextPageToken = 1;
    repeated PerfSample perfSamples = 2;
}

message ListScreenshotClustersResponse {
    // The set of clustres associated with an execution Always set
    repeated ScreenshotCluster clusters = 1;
}

message ListStepThumbnailsResponse {
    // A continuation token to resume the query at the next item.
    // 
    // If set, indicates that there are more thumbnails to read, by calling list again with this value in the page_token field.
    string nextPageToken = 1;
    // A list of image data.
    // 
    // Images are returned in a deterministic order; they are ordered by these factors, in order of importance: * First, by their associated test case. Images without a test case are considered greater than images with one. * Second, by their creation time. Images without a creation time are greater than images with one. * Third, by the order in which they were added to the step (by calls to CreateStep or UpdateStep).
    repeated Image thumbnails = 2;
}

message ListStepsResponse {
    // A continuation token to resume the query at the next item.
    // 
    // If set, indicates that there are more steps to read, by calling list again with this value in the page_token field.
    string nextPageToken = 1;
    // Steps.
    repeated Step steps = 2;
}

message MemoryInfo {
    // Maximum memory that can be allocated to the process in KiB
    string memoryCapInKibibyte = 1;
    // Total memory available on the device in KiB
    string memoryTotalInKibibyte = 2;
}

message Outcome {
    // More information about a FAILURE outcome.
    // 
    // Returns INVALID_ARGUMENT if this field is set but the summary is not FAILURE.
    // 
    // Optional
    FailureDetail failureDetail = 1;
    // More information about an INCONCLUSIVE outcome.
    // 
    // Returns INVALID_ARGUMENT if this field is set but the summary is not INCONCLUSIVE.
    // 
    // Optional
    InconclusiveDetail inconclusiveDetail = 2;
    // More information about a SKIPPED outcome.
    // 
    // Returns INVALID_ARGUMENT if this field is set but the summary is not SKIPPED.
    // 
    // Optional
    SkippedDetail skippedDetail = 3;
    // More information about a SUCCESS outcome.
    // 
    // Returns INVALID_ARGUMENT if this field is set but the summary is not SUCCESS.
    // 
    // Optional
    SuccessDetail successDetail = 4;
    // The simplest way to interpret a result.
    // 
    // Required
    enum Outcome_Summary {
        OUTCOME_SUMMARY_FAILURE = 0;
        OUTCOME_SUMMARY_INCONCLUSIVE = 1;
        OUTCOME_SUMMARY_SKIPPED = 2;
        OUTCOME_SUMMARY_SUCCESS = 3;
        OUTCOME_SUMMARY_UNSET = 4;
    }
    Outcome_Summary summary = 5;
}

message PerfEnvironment {
    // CPU related environment info
    CPUInfo cpuInfo = 1;
    // Memory related environment info
    MemoryInfo memoryInfo = 2;
}

message PerfMetricsSummary {
    AppStartTime appStartTime = 1;
    // A tool results execution ID.
    string executionId = 2;
    // A tool results history ID.
    string historyId = 3;
    // Describes the environment in which the performance metrics were collected
    PerfEnvironment perfEnvironment = 4;
    // Set of resource collected
    repeated string perfMetrics = 5;
    // The cloud project
    string projectId = 6;
    // A tool results step ID.
    string stepId = 7;
}

message PerfSample {
    // Timestamp of collection
    Timestamp sampleTime = 1;
    // Value observed
    double value = 2;
}

message PerfSampleSeries {
    // Basic series represented by a line chart
    BasicPerfSampleSeries basicPerfSampleSeries = 1;
    // A tool results execution ID.
    string executionId = 2;
    // A tool results history ID.
    string historyId = 3;
    // The cloud project
    string projectId = 4;
    // A sample series id
    string sampleSeriesId = 5;
    // A tool results step ID.
    string stepId = 6;
}

message ProjectSettings {
    // The name of the Google Cloud Storage bucket to which results are written.
    // 
    // By default, this is unset.
    // 
    // In update request: optional In response: optional
    string defaultBucket = 1;
    // The name of the project's settings.
    // 
    // Always of the form: projects/{project-id}/settings
    // 
    // In update request: never set In response: always set
    string name = 2;
}

message PublishXunitXmlFilesRequest {
    // URI of the Xunit XML files to publish.
    // 
    // The maximum size of the file this reference is pointing to is 50MB.
    // 
    // Required.
    repeated FileReference xunitXmlFiles = 1;
}

message Screen {
    // File reference of the png file. Required.
    string fileReference = 1;
    // Locale of the device that the screenshot was taken on. Required.
    string locale = 2;
    // Model of the device that the screenshot was taken on. Required.
    string model = 3;
    // OS version of the device that the screenshot was taken on. Required.
    string version = 4;
}

message ScreenshotCluster {
    // A string that describes the activity of every screen in the cluster.
    string activity = 1;
    // A unique identifier for the cluster.
    string clusterId = 2;
    // A singular screen that represents the cluster as a whole. This screen will act as the "cover" of the entire cluster. When users look at the clusters, only the key screen from each cluster will be shown. Which screen is the key screen is determined by the ClusteringAlgorithm
    Screen keyScreen = 3;
    // Full list of screens.
    repeated Screen screens = 4;
}

message SkippedDetail {
    // If the App doesn't support the specific API level.
    bool incompatibleAppVersion = 1;
    // If the App doesn't run on the specific architecture, for example, x86.
    bool incompatibleArchitecture = 2;
    // If the requested OS version doesn't run on the specific device model.
    bool incompatibleDevice = 3;
}

message Specification {
    // An Android mobile test execution specification.
    AndroidTest androidTest = 1;
}

message StackTrace {
    // Exception cluster ID
    string clusterId = 1;
    // The stack trace message.
    // 
    // Required
    string exception = 2;
    // Exception report ID
    string reportId = 3;
}

message Status {
    // The status code, which should be an enum value of [google.rpc.Code][].
    int32 code = 1;
    // A list of messages that carry the error details. There is a common set of message types for APIs to use.
    repeated Any details = 2;
    // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][] field, or localized by the client.
    string message = 3;
}

message Step {
    // The time when the step status was set to complete.
    // 
    // This value will be set automatically when state transitions to COMPLETE.
    // 
    // - In response: set if the execution state is COMPLETE. - In create/update request: never set
    Timestamp completionTime = 1;
    // The time when the step was created.
    // 
    // - In response: always set - In create/update request: never set
    Timestamp creationTime = 2;
    // A description of this tool For example: mvn clean package -D skipTests=true
    // 
    // - In response: present if set by create/update request - In create/update request: optional
    string description = 3;
    // How much the device resource is used to perform the test.
    // 
    // This is the device usage used for billing purpose, which is different from the run_duration, for example, infrastructure failure won't be charged for device usage.
    // 
    // PRECONDITION_FAILED will be returned if one attempts to set a device_usage on a step which already has this field set.
    // 
    // - In response: present if previously set. - In create request: optional - In update request: optional
    Duration deviceUsageDuration = 4;
    // If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions.
    // 
    // The keys must exactly match the dimension_definition of the execution.
    // 
    // For example, if the execution has `dimension_definition = ['attempt', 'device']` then a step must define values for those dimensions, eg. `dimension_value = ['attempt': '1', 'device': 'Nexus 6']`
    // 
    // If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = ['attempt': '', 'device': 'Nexus 6']`
    // 
    // If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset.
    // 
    // A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution.
    // 
    // A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different.
    // 
    // A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys.
    // 
    // - In response: present if set by create - In create request: optional - In update request: never set
    repeated StepDimensionValueEntry dimensionValue = 5;
    // Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails.
    // 
    // - In response: always set - In create/update request: never set
    bool hasImages = 6;
    // Arbitrary user-supplied key/value pairs that are associated with the step.
    // 
    // Users are responsible for managing the key namespace such that keys don't accidentally collide.
    // 
    // An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters.
    // 
    // - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key's value
    repeated StepLabelsEntry labels = 7;
    // A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build
    // 
    // A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name.
    // 
    // - In response: always set - In create request: always set - In update request: never set
    string name = 8;
    // Classification of the result, for example into SUCCESS or FAILURE
    // 
    // - In response: present if set by create/update request - In create/update request: optional
    Outcome outcome = 9;
    // How long it took for this step to run.
    // 
    // If unset, this is set to the difference between creation_time and completion_time when the step is set to the COMPLETE state. In some cases, it is appropriate to set this value separately: For instance, if a step is created, but the operation it represents is queued for a few minutes before it executes, it would be appropriate not to include the time spent queued in its run_duration.
    // 
    // PRECONDITION_FAILED will be returned if one attempts to set a run_duration on a step which already has this field set.
    // 
    // - In response: present if previously set; always present on COMPLETE step - In create request: optional - In update request: optional
    Duration runDuration = 10;
    // The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE
    // 
    // A PRECONDITION_FAILED will be returned if an invalid transition is requested.
    // 
    // It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times.
    // 
    // - In response: always set - In create/update request: optional
    enum Step_State {
        STEP_STATE_COMPLETE = 0;
        STEP_STATE_INPROGRESS = 1;
        STEP_STATE_PENDING = 2;
        STEP_STATE_UNKNOWNSTATE = 3;
    }
    Step_State state = 11;
    // A unique identifier within a Execution for this Step.
    // 
    // Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.
    // 
    // - In response: always set - In create/update request: never set
    string stepId = 12;
    // An execution of a test runner.
    TestExecutionStep testExecutionStep = 13;
    // An execution of a tool (used for steps we don't explicitly support).
    ToolExecutionStep toolExecutionStep = 14;
}

message StepDimensionValueEntry {
    string key = 1;
    string value = 2;
}

message StepLabelsEntry {
    string key = 1;
    string value = 2;
}

message SuccessDetail {
    // If a native process other than the app crashed.
    bool otherNativeCrash = 1;
}

message TestCaseReference {
    // The name of the class.
    string className = 1;
    // The name of the test case.
    // 
    // Required.
    string name = 2;
    // The name of the test suite to which this test case belongs.
    string testSuiteName = 3;
}

message TestExecutionStep {
    // Issues observed during the test execution.
    // 
    // For example, if the mobile app under test crashed during the test, the error message and the stack trace content can be recorded here to assist debugging.
    // 
    // - In response: present if set by create or update - In create/update request: optional
    repeated TestIssue testIssues = 1;
    // List of test suite overview contents. This could be parsed from xUnit XML log by server, or uploaded directly by user. This references should only be called when test suites are fully parsed or uploaded.
    // 
    // The maximum allowed number of test suite overviews per step is 1000.
    // 
    // - In response: always set - In create request: optional - In update request: never (use publishXunitXmlFiles custom method instead)
    repeated TestSuiteOverview testSuiteOverviews = 2;
    // The timing break down of the test execution.
    // 
    // - In response: present if set by create or update - In create/update request: optional
    TestTiming testTiming = 3;
    // Represents the execution of the test runner.
    // 
    // The exit code of this tool will be used to determine if the test passed.
    // 
    // - In response: always set - In create/update request: optional
    ToolExecution toolExecution = 4;
}

message TestIssue {
    // A brief human-readable message describing the issue. Required.
    string errorMessage = 1;
    // Severity of issue. Required.
    enum TestIssue_Severity {
        TESTISSUE_SEVERITY_INFO = 0;
        TESTISSUE_SEVERITY_SEVERE = 1;
        TESTISSUE_SEVERITY_UNSPECIFIEDSEVERITY = 2;
        TESTISSUE_SEVERITY_WARNING = 3;
    }
    TestIssue_Severity severity = 2;
    // Deprecated in favor of stack trace fields inside specific warnings.
    StackTrace stackTrace = 3;
    // Type of issue. Required.
    enum TestIssue_Type {
        TESTISSUE_TYPE_ANR = 0;
        TESTISSUE_TYPE_FATALEXCEPTION = 1;
        TESTISSUE_TYPE_NATIVECRASH = 2;
        TESTISSUE_TYPE_UNSPECIFIEDTYPE = 3;
    }
    TestIssue_Type type = 4;
    // Warning message with additional details of the issue. Should always be a message from com.google.devtools.toolresults.v1.warnings Required.
    Any warning = 5;
}

message TestSuiteOverview {
    // Number of test cases in error, typically set by the service by parsing the xml_source.
    // 
    // - In create/response: always set - In update request: never
    int32 errorCount = 1;
    // Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user.
    // 
    // - In create/response: always set - In update request: never
    int32 failureCount = 2;
    // The name of the test suite.
    // 
    // - In create/response: always set - In update request: never
    string name = 3;
    // Number of test cases not run, typically set by the service by parsing the xml_source.
    // 
    // - In create/response: always set - In update request: never
    int32 skippedCount = 4;
    // Number of test cases, typically set by the service by parsing the xml_source.
    // 
    // - In create/response: always set - In update request: never
    int32 totalCount = 5;
    // If this test suite was parsed from XML, this is the URI where the original XML file is stored.
    // 
    // Note: Multiple test suites can share the same xml_source
    // 
    // Returns INVALID_ARGUMENT if the uri format is not supported.
    // 
    // - In create/response: optional - In update request: never
    FileReference xmlSource = 6;
}

message TestTiming {
    // How long it took to run the test process.
    // 
    // - In response: present if previously set. - In create/update request: optional
    Duration testProcessDuration = 1;
}

message Thumbnail {
    // The thumbnail's content type, i.e. "image/png".
    // 
    // Always set.
    string contentType = 1;
    // The thumbnail file itself.
    // 
    // That is, the bytes here are precisely the bytes that make up the thumbnail file; they can be served as an image as-is (with the appropriate content type.)
    // 
    // Always set.
    string data = 2;
    // The height of the thumbnail, in pixels.
    // 
    // Always set.
    int32 heightPx = 3;
    // The width of the thumbnail, in pixels.
    // 
    // Always set.
    int32 widthPx = 4;
}

message Timestamp {
    // Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
    int32 nanos = 1;
    // Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    string seconds = 2;
}

message ToolExecution {
    // The full tokenized command line including the program name (equivalent to argv in a C program).
    // 
    // - In response: present if set by create request - In create request: optional - In update request: never set
    repeated string commandLineArguments = 1;
    // Tool execution exit code. This field will be set once the tool has exited.
    // 
    // - In response: present if set by create/update request - In create request: optional - In update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is already set.
    ToolExitCode exitCode = 2;
    // References to any plain text logs output the tool execution.
    // 
    // This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running.
    // 
    // The maximum allowed number of tool logs per step is 1000.
    // 
    // - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
    repeated FileReference toolLogs = 3;
    // References to opaque files of any format output by the tool execution.
    // 
    // The maximum allowed number of tool outputs per step is 1000.
    // 
    // - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
    repeated ToolOutputReference toolOutputs = 4;
}

message ToolExecutionStep {
    // A Tool execution.
    // 
    // - In response: present if set by create/update request - In create/update request: optional
    ToolExecution toolExecution = 1;
}

message ToolExitCode {
    // Tool execution exit code. A value of 0 means that the execution was successful.
    // 
    // - In response: always set - In create/update request: always set
    int32 number = 1;
}

message ToolOutputReference {
    // The creation time of the file.
    // 
    // - In response: present if set by create/update request - In create/update request: optional
    Timestamp creationTime = 1;
    // A FileReference to an output file.
    // 
    // - In response: always set - In create/update request: always set
    FileReference output = 2;
    // The test case to which this output file belongs.
    // 
    // - In response: present if set by create/update request - In create/update request: optional
    TestCaseReference testCase = 3;
}

enum Alt {
    JSON = 0;
}

service CloudToolResultsFirstpartyService {
    // Lists Histories for a given Project.
    // 
    // The histories are sorted by modification time in descending order. The history_id key will be used to order the history with the same modification time.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist
    rpc GetProjectIdHistories(GetProjectIdHistoriesRequest) returns (ListHistoriesResponse) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories"
      };
    }
    // Creates a History.
    // 
    // The returned History will have the id set.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing project does not exist
    rpc PostProjectIdHistories(PostProjectIdHistoriesRequest) returns (History) {
      option (google.api.http) = {
        post: "/toolresults/v1beta3firstparty/projects/{projectId}/histories"
        body: "body"
      };
    }
    // Gets a History.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist
    rpc GetProjectIdHistoriesHistoryId(GetProjectIdHistoriesHistoryIdRequest) returns (History) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}"
      };
    }
    // Lists Histories for a given Project.
    // 
    // The executions are sorted by creation_time in descending order. The execution_id key will be used to order the executions with the same creation_time.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist
    rpc GetProjectIdHistoriesHistoryIdExecutions(GetProjectIdHistoriesHistoryIdExecutionsRequest) returns (ListExecutionsResponse) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions"
      };
    }
    // Creates an Execution.
    // 
    // The returned Execution will have the id set.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist
    rpc PostProjectIdHistoriesHistoryIdExecutions(PostProjectIdHistoriesHistoryIdExecutionsRequest) returns (Execution) {
      option (google.api.http) = {
        post: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions"
        body: "body"
      };
    }
    // Gets an Execution.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Execution does not exist
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionId(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdRequest) returns (Execution) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}"
      };
    }
    // Lists Screenshot Clusters
    // 
    // Returns the list of screenshot clusters corresponding to an execution. Screenshot clusters are created after the execution is finished. Clusters are created from a set of screenshots. Between any two screenshots, a matching score is calculated based off their metadata that determines how similar they are. Screenshots are placed in the cluster that has screens which have the highest matching scores.
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdClusters(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdClustersRequest) returns (ListScreenshotClustersResponse) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters"
      };
    }
    // Retrieves a single screenshot cluster by its ID
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdClustersClusterId(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdClustersClusterIdRequest) returns (ScreenshotCluster) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters/{clusterId}"
      };
    }
    // Lists Steps for a given Execution.
    // 
    // The steps are sorted by creation_time in descending order. The step_id key will be used to order the steps with the same creation_time.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if an argument in the request happens to be invalid; e.g. if an attempt is made to list the children of a nonexistent Step - NOT_FOUND - if the containing Execution does not exist
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdSteps(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsRequest) returns (ListStepsResponse) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps"
      };
    }
    // Creates a Step.
    // 
    // The returned Step will have the id set.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist
    rpc PostProjectIdHistoriesHistoryIdExecutionsExecutionIdSteps(PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsRequest) returns (Step) {
      option (google.api.http) = {
        post: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps"
        body: "body"
      };
    }
    // Gets a Step.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Step does not exist
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepId(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdRequest) returns (Step) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}"
      };
    }
    // Retrieves a PerfMetricsSummary.
    // 
    // May return any of the following error code(s): - NOT_FOUND - The specified PerfMetricsSummary does not exist
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfMetricsSummary(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfMetricsSummaryRequest) returns (PerfMetricsSummary) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary"
      };
    }
    // Creates a PerfMetricsSummary resource.
    // 
    // May return any of the following error code(s): - ALREADY_EXISTS - A PerfMetricSummary already exists for the given Step - NOT_FOUND - The containing Step does not exist
    rpc PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfMetricsSummary(PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfMetricsSummaryRequest) returns (PerfMetricsSummary) {
      option (google.api.http) = {
        post: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary"
        body: "body"
      };
    }
    // Lists PerfSampleSeries for a given Step.
    // 
    // The request provides an optional filter which specifies one or more PerfMetricsType to include in the result; if none returns all. The resulting PerfSampleSeries are sorted by ids.
    // 
    // May return any of the following canonical error codes: - NOT_FOUND - The containing Step does not exist
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeries(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesRequest) returns (ListPerfSampleSeriesResponse) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries"
      };
    }
    // Creates a PerfSampleSeries.
    // 
    // May return any of the following error code(s): - ALREADY_EXISTS - PerfMetricSummary already exists for the given Step - NOT_FOUND - The containing Step does not exist
    rpc PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeries(PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesRequest) returns (PerfSampleSeries) {
      option (google.api.http) = {
        post: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries"
        body: "body"
      };
    }
    // Gets a PerfSampleSeries.
    // 
    // May return any of the following error code(s): - NOT_FOUND - The specified PerfSampleSeries does not exist
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesId(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesIdRequest) returns (PerfSampleSeries) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}"
      };
    }
    // Lists the Performance Samples of a given Sample Series - The list results are sorted by timestamps ascending - The default page size is 500 samples; and maximum size allowed 5000 - The response token indicates the last returned PerfSample timestamp - When the results size exceeds the page size, submit a subsequent request including the page token to return the rest of the samples up to the page limit
    // 
    // May return any of the following canonical error codes: - OUT_OF_RANGE - The specified request page_token is out of valid range - NOT_FOUND - The containing PerfSampleSeries does not exist
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesIdSamples(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesIdSamplesRequest) returns (ListPerfSamplesResponse) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples"
      };
    }
    // Creates a batch of PerfSamples - a client can submit multiple batches of Perf Samples through repeated calls to this method in order to split up a large request payload - duplicates and existing timestamp entries will be ignored. - the batch operation may partially succeed - the set of elements successfully inserted is returned in the response (omits items which already existed in the database).
    // 
    // May return any of the following canonical error codes: - NOT_FOUND - The containing PerfSampleSeries does not exist
    rpc PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesIdSamples:BatchCreate(PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdPerfSampleSeriesSampleSeriesIdSamples:BatchCreateRequest) returns (BatchCreatePerfSamplesResponse) {
      option (google.api.http) = {
        post: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate"
        body: "body"
      };
    }
    // Lists thumbnails of images attached to a step.
    // 
    // May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read from the project, or from any of the images - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the step does not exist, or if any of the images do not exist
    rpc GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdThumbnails(GetProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepIdThumbnailsRequest) returns (ListStepThumbnailsResponse) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails"
      };
    }
    // Publish xml files to an existing Step.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal, e.g try to upload a duplicate xml file or a file too large. - NOT_FOUND - if the containing Execution does not exist
    rpc PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepId:PublishXunitXmlFiles(PostProjectIdHistoriesHistoryIdExecutionsExecutionIdStepsStepId:PublishXunitXmlFilesRequest) returns (Step) {
      option (google.api.http) = {
        post: "/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles"
        body: "body"
      };
    }
    // Gets the Tool Results settings for a project.
    // 
    // May return any of the following canonical error codes:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to read from project
    rpc GetProjectIdSettings(GetProjectIdSettingsRequest) returns (ProjectSettings) {
      option (google.api.http) = {
        get: "/toolresults/v1beta3firstparty/projects/{projectId}/settings"
      };
    }
    // Creates resources for settings which have not yet been set.
    // 
    // Currently, this creates a single resource: a Google Cloud Storage bucket, to be used as the default bucket for this project. The bucket is created in an FTL-own storage project. Except for in rare cases, calling this method in parallel from multiple clients will only create a single bucket. In order to avoid unnecessary storage charges, the bucket is configured to automatically delete objects older than 90 days.
    // 
    // The bucket is created with the following permissions: - Owner access for owners of central storage project (FTL-owned) - Writer access for owners/editors of customer project - Reader access for viewers of customer project The default ACL on objects created in the bucket is: - Owner access for owners of central storage project - Reader access for owners/editors/viewers of customer project See Google Cloud Storage documentation for more details.
    // 
    // If there is already a default bucket set and the project can access the bucket, this call does nothing. However, if the project doesn't have the permission to access the bucket or the bucket is deleted, a new bucket will be created.
    // 
    // May return any canonical error codes, including the following:
    // 
    // - PERMISSION_DENIED - if the user is not authorized to write to project - Any error code raised by Google Cloud Storage
    rpc PostProjectId:InitializeSettings(PostProjectId:InitializeSettingsRequest) returns (ProjectSettings) {
      option (google.api.http) = {
        post: "/toolresults/v1beta3firstparty/projects/{projectId}:initializeSettings"
      };
    }
}

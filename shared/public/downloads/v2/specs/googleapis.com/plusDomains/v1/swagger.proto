syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package google+domains;

message GetActivitiesActivityIdRequest {
    // The ID of the activity to get.
    string activityId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetActivitiesActivityIdCommentsRequest {
    // The ID of the activity to get comments for.
    string activityId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of comments to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The order in which to sort the list of comments.
    enum GetActivitiesActivityIdCommentsRequest_SortOrder {
        GETACTIVITIESACTIVITYIDCOMMENTSREQUEST_SORTORDER_ASCENDING = 0;
        GETACTIVITIESACTIVITYIDCOMMENTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetActivitiesActivityIdCommentsRequest_SortOrder sortOrder = 10;
    string userIp = 11;
}

message PostActivitiesActivityIdCommentsRequest {
    // The ID of the activity to reply to.
    string activityId = 1;
    alt alt = 2;
    Comment body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetActivitiesActivityIdPeopleCollectionRequest {
    // The ID of the activity to get the list of people for.
    string activityId = 1;
    alt alt = 2;
    // The collection of people to list.
    enum GetActivitiesActivityIdPeopleCollectionRequest_Collection {
        GETACTIVITIESACTIVITYIDPEOPLECOLLECTIONREQUEST_COLLECTION_PLUSONERS = 0;
        GETACTIVITIESACTIVITYIDPEOPLECOLLECTIONREQUEST_COLLECTION_RESHARERS = 1;
        GETACTIVITIESACTIVITYIDPEOPLECOLLECTIONREQUEST_COLLECTION_SHAREDTO = 2;
    }
    GetActivitiesActivityIdPeopleCollectionRequest_Collection collection = 3;
    string fields = 4;
    string key = 5;
    // The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetCirclesCircleIdRequest {
    alt alt = 1;
    // The ID of the circle to get.
    string circleId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutCirclesCircleIdRequest {
    alt alt = 1;
    Circle body = 2;
    // The ID of the circle to update.
    string circleId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteCirclesCircleIdRequest {
    alt alt = 1;
    // The ID of the circle to delete.
    string circleId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetCirclesCircleIdPeopleRequest {
    alt alt = 1;
    // The ID of the circle to get the members of.
    string circleId = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutCirclesCircleIdPeopleRequest {
    alt alt = 1;
    // The ID of the circle to add the person to.
    string circleId = 2;
    // Email of the people to add to the circle. Optional, can be repeated.
    repeated string email = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // IDs of the people to add to the circle. Optional, can be repeated.
    repeated string userId = 9;
    string userIp = 10;
}

message DeleteCirclesCircleIdPeopleRequest {
    alt alt = 1;
    // The ID of the circle to remove the person from.
    string circleId = 2;
    // Email of the people to add to the circle. Optional, can be repeated.
    repeated string email = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // IDs of the people to remove from the circle. Optional, can be repeated.
    repeated string userId = 9;
    string userIp = 10;
}

message GetCommentsCommentIdRequest {
    alt alt = 1;
    // The ID of the comment to get.
    string commentId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetPeopleUserIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The ID of the person to get the profile for. The special value "me" can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PostPeopleUserIdActivitiesRequest {
    alt alt = 1;
    Activity body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // If "true", extract the potential media attachments for a URL. The response will include all possible attachments for a URL, including video, photos, and articles based on the content of the page.
    bool preview = 7;
    string quotaUser = 8;
    // The ID of the user to create the activity on behalf of. Its value should be "me", to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message GetPeopleUserIdActivitiesCollectionRequest {
    alt alt = 1;
    // The collection of activities to list.
    enum GetPeopleUserIdActivitiesCollectionRequest_Collection {
        GETPEOPLEUSERIDACTIVITIESCOLLECTIONREQUEST_COLLECTION_USER = 0;
    }
    GetPeopleUserIdActivitiesCollectionRequest_Collection collection = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the user to get activities for. The special value "me" can be used to indicate the authenticated user.
    string userId = 10;
    string userIp = 11;
}

message GetPeopleUserIdAudiencesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of circles to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
    int32 maxResults = 4;
    string oauth_token = 5;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user to get audiences for. The special value "me" can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message GetPeopleUserIdCirclesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of circles to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
    int32 maxResults = 4;
    string oauth_token = 5;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user to get circles for. The special value "me" can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message PostPeopleUserIdCirclesRequest {
    alt alt = 1;
    Circle body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user to create the circle on behalf of. The value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostPeopleUserIdMediaCollectionRequest {
    alt alt = 1;
    Media body = 2;
    enum PostPeopleUserIdMediaCollectionRequest_Collection {
        POSTPEOPLEUSERIDMEDIACOLLECTIONREQUEST_COLLECTION_CLOUD = 0;
    }
    PostPeopleUserIdMediaCollectionRequest_Collection collection = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user to create the activity on behalf of.
    string userId = 9;
    string userIp = 10;
}

message GetPeopleUserIdPeopleCollectionRequest {
    alt alt = 1;
    // The collection of people to list.
    enum GetPeopleUserIdPeopleCollectionRequest_Collection {
        GETPEOPLEUSERIDPEOPLECOLLECTIONREQUEST_COLLECTION_CIRCLED = 0;
    }
    GetPeopleUserIdPeopleCollectionRequest_Collection collection = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The order to return people in.
    enum GetPeopleUserIdPeopleCollectionRequest_OrderBy {
        GETPEOPLEUSERIDPEOPLECOLLECTIONREQUEST_ORDERBY_ALPHABETICAL = 0;
        GETPEOPLEUSERIDPEOPLECOLLECTIONREQUEST_ORDERBY_BEST = 1;
    }
    GetPeopleUserIdPeopleCollectionRequest_OrderBy orderBy = 7;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // Get the collection of people for the person identified. Use "me" to indicate the authenticated user.
    string userId = 11;
    string userIp = 12;
}

message Acl {
    // Description of the access granted, suitable for display.
    string description = 1;
    // Whether access is restricted to the domain.
    bool domainRestricted = 2;
    // The list of access entries.
    repeated PlusDomainsAclentryResource items = 3;
    // Identifies this resource as a collection of access controls. Value: "plus#acl".
    string kind = 4;
}

message Activity {
    // Identifies who has access to see this activity.
    Acl access = 1;
    // The person who performed this activity.
    message Actor {
            // Actor info specific to particular clients.
    message ClientSpecificActorInfo {
                    // Actor info specific to YouTube clients.
    message YoutubeActorInfo {
                            // ID of the YouTube channel owned by the Actor.
    string channelId = 1;
            }
            YoutubeActorInfo youtubeActorInfo = 1;
        }
        ClientSpecificActorInfo clientSpecificActorInfo = 1;
            // The name of the actor, suitable for display.
    string displayName = 2;
            // The ID of the actor's Person resource.
    string id = 3;
            // The image representation of the actor.
    message Image {
                    // The URL of the actor's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
    string url = 1;
        }
        Image image = 4;
            // An object representation of the individual components of name.
    message Name {
                    // The family name ("last name") of the actor.
    string familyName = 1;
                    // The given name ("first name") of the actor.
    string givenName = 2;
        }
        Name name = 5;
            // The link to the actor's Google profile.
    string url = 6;
            // Verification status of actor.
    message Verification {
                    // Verification for one-time or manual processes.
    string adHocVerified = 1;
        }
        Verification verification = 7;
    }
    Actor actor = 2;
    // Street address where this activity occurred.
    string address = 3;
    // Additional content added by the person who shared this activity, applicable only when resharing an activity.
    string annotation = 4;
    // If this activity is a crosspost from another system, this property specifies the ID of the original activity.
    string crosspostSource = 5;
    // ETag of this response for caching purposes.
    string etag = 6;
    // Latitude and longitude where this activity occurred. Format is latitude followed by longitude, space separated.
    string geocode = 7;
    // The ID of this activity.
    string id = 8;
    // Identifies this resource as an activity. Value: "plus#activity".
    string kind = 9;
    // The location where this activity occurred.
    Place location = 10;
    // The object of this activity.
    message Object {
            // If this activity's object is itself another activity, such as when a person reshares an activity, this property specifies the original activity's actor.
    message Actor {
                    // Actor info specific to particular clients.
    message ClientSpecificActorInfo {
                            // Actor info specific to YouTube clients.
    message YoutubeActorInfo {
                                    // ID of the YouTube channel owned by the Actor.
    string channelId = 1;
                }
                YoutubeActorInfo youtubeActorInfo = 1;
            }
            ClientSpecificActorInfo clientSpecificActorInfo = 1;
                    // The original actor's name, which is suitable for display.
    string displayName = 2;
                    // ID of the original actor.
    string id = 3;
                    // The image representation of the original actor.
    message Image {
                            // A URL that points to a thumbnail photo of the original actor.
    string url = 1;
            }
            Image image = 4;
                    // A link to the original actor's Google profile.
    string url = 5;
                    // Verification status of actor.
    message Verification {
                            // Verification for one-time or manual processes.
    string adHocVerified = 1;
            }
            Verification verification = 6;
        }
        Actor actor = 1;
            // The media objects attached to this activity.
    message Attachment {
                    // If the attachment is an article, this property contains a snippet of text from the article. It can also include descriptions for other types.
    string content = 1;
                    // The title of the attachment, such as a photo caption or an article title.
    string displayName = 2;
                    // If the attachment is a video, the embeddable link.
    message Embed {
                            // Media type of the link.
    string type = 1;
                            // URL of the link.
    string url = 2;
            }
            Embed embed = 3;
                    // The full image URL for photo attachments.
    message FullImage {
                            // The height, in pixels, of the linked resource.
    uint32 height = 1;
                            // Media type of the link.
    string type = 2;
                            // URL of the image.
    string url = 3;
                            // The width, in pixels, of the linked resource.
    uint32 width = 4;
            }
            FullImage fullImage = 4;
                    // The ID of the attachment.
    string id = 5;
                    // The preview image for photos or videos.
    message Image {
                            // The height, in pixels, of the linked resource.
    uint32 height = 1;
                            // Media type of the link.
    string type = 2;
                            // Image URL.
    string url = 3;
                            // The width, in pixels, of the linked resource.
    uint32 width = 4;
            }
            Image image = 6;
                    // The type of media object. Possible values include, but are not limited to, the following values:  
    // - "photo" - A photo. 
    // - "album" - A photo album. 
    // - "video" - A video. 
    // - "article" - An article, specified by a link.
    string objectType = 7;
                    // When previewing, these are the optional thumbnails for the post. When posting an article, choose one by setting the attachment.image.url property. If you don't choose one, one will be chosen for you.
    message PreviewThumbnail {
                            // URL of the thumbnail image.
    string url = 1;
            }
            repeated PreviewThumbnail previewThumbnails = 8;
                    // If the attachment is an album, this property is a list of potential additional thumbnails from the album.
    message Thumbnail {
                            // Potential name of the thumbnail.
    string description = 1;
                            // Image resource.
    message Image {
                                    // The height, in pixels, of the linked resource.
    uint32 height = 1;
                                    // Media type of the link.
    string type = 2;
                                    // Image url.
    string url = 3;
                                    // The width, in pixels, of the linked resource.
    uint32 width = 4;
                }
                Image image = 2;
                            // URL of the webpage containing the image.
    string url = 3;
            }
            repeated Thumbnail thumbnails = 9;
                    // The link to the attachment, which should be of type text/html.
    string url = 10;
        }
        repeated Attachment attachments = 2;
            // The HTML-formatted content, which is suitable for display.
    string content = 3;
            // The ID of the object. When resharing an activity, this is the ID of the activity that is being reshared.
    string id = 4;
            // The type of the object. Possible values include, but are not limited to, the following values:  
    // - "note" - Textual content. 
    // - "activity" - A Google+ activity.
    string objectType = 5;
            // The content (text) as provided by the author, which is stored without any HTML formatting. When creating or updating an activity, this value must be supplied as plain text in the request.
    string originalContent = 6;
            // People who +1'd this activity.
    message Plusoners {
                    // The URL for the collection of people who +1'd this activity.
    string selfLink = 1;
                    // Total number of people who +1'd this activity.
    uint32 totalItems = 2;
        }
        Plusoners plusoners = 7;
            // Comments in reply to this activity.
    message Replies {
                    // The URL for the collection of comments in reply to this activity.
    string selfLink = 1;
                    // Total number of comments on this activity.
    uint32 totalItems = 2;
        }
        Replies replies = 8;
            // People who reshared this activity.
    message Resharers {
                    // The URL for the collection of resharers.
    string selfLink = 1;
                    // Total number of people who reshared this activity.
    uint32 totalItems = 2;
        }
        Resharers resharers = 9;
            // Status of the activity as seen by the viewer.
    message StatusForViewer {
                    // Whether the viewer can comment on the activity.
    bool canComment = 1;
                    // Whether the viewer can +1 the activity.
    bool canPlusone = 2;
                    // Whether the viewer can edit or delete the activity.
    bool canUpdate = 3;
                    // Whether the viewer has +1'd the activity.
    bool isPlusOned = 4;
                    // Whether reshares are disabled for the activity.
    bool resharingDisabled = 5;
        }
        StatusForViewer statusForViewer = 10;
            // The URL that points to the linked resource.
    string url = 11;
    }
    Object object = 11;
    // ID of the place where this activity occurred.
    string placeId = 12;
    // Name of the place where this activity occurred.
    string placeName = 13;
    // The service provider that initially published this activity.
    message Provider {
            // Name of the service provider.
    string title = 1;
    }
    Provider provider = 14;
    // The time at which this activity was initially published. Formatted as an RFC 3339 timestamp.
    string published = 15;
    // Radius, in meters, of the region where this activity occurred, centered at the latitude and longitude identified in geocode.
    string radius = 16;
    // Title of this activity.
    string title = 17;
    // The time at which this activity was last updated. Formatted as an RFC 3339 timestamp.
    string updated = 18;
    // The link to this activity.
    string url = 19;
    // This activity's verb, which indicates the action that was performed. Possible values include, but are not limited to, the following values:  
    // - "post" - Publish content to the stream. 
    // - "share" - Reshare an activity.
    string verb = 20;
}

message ActivityFeed {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The ID of this collection of activities. Deprecated.
    string id = 2;
    // The activities in this page of results.
    repeated Activity items = 3;
    // Identifies this resource as a collection of activities. Value: "plus#activityFeed".
    string kind = 4;
    // Link to the next page of activities.
    string nextLink = 5;
    // The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 6;
    // Link to this activity resource.
    string selfLink = 7;
    // The title of this collection of activities, which is a truncated portion of the content.
    string title = 8;
    // The time at which this collection of activities was last updated. Formatted as an RFC 3339 timestamp.
    string updated = 9;
}

message Audience {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The access control list entry.
    PlusDomainsAclentryResource item = 2;
    // Identifies this resource as an audience. Value: "plus#audience".
    string kind = 3;
    // The number of people in this circle. This only applies if entity_type is CIRCLE.
    uint32 memberCount = 4;
    // The circle members' visibility as chosen by the owner of the circle. This only applies for items with "item.type" equals "circle". Possible values are:  
    // - "public" - Members are visible to the public. 
    // - "limited" - Members are visible to a limited audience. 
    // - "private" - Members are visible to the owner only.
    string visibility = 5;
}

message AudiencesFeed {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The audiences in this result.
    repeated Audience items = 2;
    // Identifies this resource as a collection of audiences. Value: "plus#audienceFeed".
    string kind = 3;
    // The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 4;
    // The total number of ACL entries. The number of entries in this response may be smaller due to paging.
    int32 totalItems = 5;
}

message Circle {
    // The description of this circle.
    string description = 1;
    // The circle name.
    string displayName = 2;
    // ETag of this response for caching purposes.
    string etag = 3;
    // The ID of the circle.
    string id = 4;
    // Identifies this resource as a circle. Value: "plus#circle".
    string kind = 5;
    // The people in this circle.
    message People {
            // The total number of people in this circle.
    uint32 totalItems = 1;
    }
    People people = 6;
    // Link to this circle resource
    string selfLink = 7;
}

message CircleFeed {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The circles in this page of results.
    repeated Circle items = 2;
    // Identifies this resource as a collection of circles. Value: "plus#circleFeed".
    string kind = 3;
    // Link to the next page of circles.
    string nextLink = 4;
    // The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 5;
    // Link to this page of circles.
    string selfLink = 6;
    // The title of this list of resources.
    string title = 7;
    // The total number of circles. The number of circles in this response may be smaller due to paging.
    int32 totalItems = 8;
}

message Comment {
    // The person who posted this comment.
    message Actor {
            // Actor info specific to particular clients.
    message ClientSpecificActorInfo {
                    // Actor info specific to YouTube clients.
    message YoutubeActorInfo {
                            // ID of the YouTube channel owned by the Actor.
    string channelId = 1;
            }
            YoutubeActorInfo youtubeActorInfo = 1;
        }
        ClientSpecificActorInfo clientSpecificActorInfo = 1;
            // The name of this actor, suitable for display.
    string displayName = 2;
            // The ID of the actor.
    string id = 3;
            // The image representation of this actor.
    message Image {
                    // The URL of the actor's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
    string url = 1;
        }
        Image image = 4;
            // A link to the Person resource for this actor.
    string url = 5;
            // Verification status of actor.
    message Verification {
                    // Verification for one-time or manual processes.
    string adHocVerified = 1;
        }
        Verification verification = 6;
    }
    Actor actor = 1;
    // ETag of this response for caching purposes.
    string etag = 2;
    // The ID of this comment.
    string id = 3;
    // The activity this comment replied to.
    message InReplyTo {
            // The ID of the activity.
    string id = 1;
            // The URL of the activity.
    string url = 2;
    }
    repeated InReplyTo inReplyTo = 4;
    // Identifies this resource as a comment. Value: "plus#comment".
    string kind = 5;
    // The object of this comment.
    message Object {
            // The HTML-formatted content, suitable for display.
    string content = 1;
            // The object type of this comment. Possible values are:  
    // - "comment" - A comment in reply to an activity.
    string objectType = 2;
            // The content (text) as provided by the author, stored without any HTML formatting. When creating or updating a comment, this value must be supplied as plain text in the request.
    string originalContent = 3;
    }
    Object object = 6;
    // People who +1'd this comment.
    message Plusoners {
            // Total number of people who +1'd this comment.
    uint32 totalItems = 1;
    }
    Plusoners plusoners = 7;
    // The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.
    string published = 8;
    // Link to this comment resource.
    string selfLink = 9;
    // The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.
    string updated = 10;
    // This comment's verb, indicating what action was performed. Possible values are:  
    // - "post" - Publish content to the stream.
    string verb = 11;
}

message CommentFeed {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The ID of this collection of comments.
    string id = 2;
    // The comments in this page of results.
    repeated Comment items = 3;
    // Identifies this resource as a collection of comments. Value: "plus#commentFeed".
    string kind = 4;
    // Link to the next page of activities.
    string nextLink = 5;
    // The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 6;
    // The title of this collection of comments.
    string title = 7;
    // The time at which this collection of comments was last updated. Formatted as an RFC 3339 timestamp.
    string updated = 8;
}

message Media {
    // The person who uploaded this media.
    message Author {
            // The author's name.
    string displayName = 1;
            // ID of the author.
    string id = 2;
            // The author's Google profile image.
    message Image {
                    // The URL of the author's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
    string url = 1;
        }
        Image image = 3;
            // A link to the author's Google profile.
    string url = 4;
    }
    Author author = 1;
    // The display name for this media.
    string displayName = 2;
    // ETag of this response for caching purposes.
    string etag = 3;
    // Exif information of the media item.
    message Exif {
            // The time the media was captured. Formatted as an RFC 3339 timestamp.
    string time = 1;
    }
    Exif exif = 4;
    // The height in pixels of the original image.
    uint32 height = 5;
    // ID of this media, which is generated by the API.
    string id = 6;
    // The type of resource.
    string kind = 7;
    // The time at which this media was originally created in UTC. Formatted as an RFC 3339 timestamp that matches this example: 2010-11-25T14:30:27.655Z
    string mediaCreatedTime = 8;
    // The URL of this photo or video's still image.
    string mediaUrl = 9;
    // The time at which this media was uploaded. Formatted as an RFC 3339 timestamp.
    string published = 10;
    // The size in bytes of this video.
    string sizeBytes = 11;
    // The list of video streams for this video. There might be several different streams available for a single video, either Flash or MPEG, of various sizes
    repeated Videostream streams = 12;
    // A description, or caption, for this media.
    string summary = 13;
    // The time at which this media was last updated. This includes changes to media metadata. Formatted as an RFC 3339 timestamp.
    string updated = 14;
    // The URL for the page that hosts this media.
    string url = 15;
    // The duration in milliseconds of this video.
    string videoDuration = 16;
    // The encoding status of this video. Possible values are:  
    // - "UPLOADING" - Not all the video bytes have been received. 
    // - "PENDING" - Video not yet processed. 
    // - "FAILED" - Video processing failed. 
    // - "READY" - A single video stream is playable. 
    // - "FINAL" - All video streams are playable.
    string videoStatus = 17;
    // The width in pixels of the original image.
    uint32 width = 18;
}

message PeopleFeed {
    // ETag of this response for caching purposes.
    string etag = 1;
    // The people in this page of results. Each item includes the id, displayName, image, and url for the person. To retrieve additional profile data, see the people.get method.
    repeated Person items = 2;
    // Identifies this resource as a collection of people. Value: "plus#peopleFeed".
    string kind = 3;
    // The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 4;
    // Link to this resource.
    string selfLink = 5;
    // The title of this collection of people.
    string title = 6;
    // The total number of people available in this list. The number of people in a response might be smaller due to paging. This might not be set for all collections.
    int32 totalItems = 7;
}

message Person {
    // A short biography for this person.
    string aboutMe = 1;
    // The person's date of birth, represented as YYYY-MM-DD.
    string birthday = 2;
    // The "bragging rights" line of this person.
    string braggingRights = 3;
    // For followers who are visible, the number of people who have added this person or page to a circle.
    int32 circledByCount = 4;
    // The cover photo content.
    message Cover {
            // Extra information about the cover photo.
    message CoverInfo {
                    // The difference between the left position of the cover image and the actual displayed cover image. Only valid for banner layout.
    int32 leftImageOffset = 1;
                    // The difference between the top position of the cover image and the actual displayed cover image. Only valid for banner layout.
    int32 topImageOffset = 2;
        }
        CoverInfo coverInfo = 1;
            // The person's primary cover image.
    message CoverPhoto {
                    // The height of the image.
    int32 height = 1;
                    // The URL of the image.
    string url = 2;
                    // The width of the image.
    int32 width = 3;
        }
        CoverPhoto coverPhoto = 2;
            // The layout of the cover art. Possible values include, but are not limited to, the following values:  
    // - "banner" - One large image banner.
    string layout = 3;
    }
    Cover cover = 5;
    // (this field is not currently used)
    string currentLocation = 6;
    // The name of this person, which is suitable for display.
    string displayName = 7;
    // The hosted domain name for the user's Google Apps account. For instance, example.com. The plus.profile.emails.read or email scope is needed to get this domain name.
    string domain = 8;
    // A list of email addresses that this person has, including their Google account email address, and the public verified email addresses on their Google+ profile. The plus.profile.emails.read scope is needed to retrieve these email addresses, or the email scope can be used to retrieve just the Google account email address.
    message Email {
            // The type of address. Possible values include, but are not limited to, the following values:  
    // - "account" - Google account email address. 
    // - "home" - Home email address. 
    // - "work" - Work email address. 
    // - "other" - Other.
    string type = 1;
            // The email address.
    string value = 2;
    }
    repeated Email emails = 9;
    // ETag of this response for caching purposes.
    string etag = 10;
    // The person's gender. Possible values include, but are not limited to, the following values:  
    // - "male" - Male gender. 
    // - "female" - Female gender. 
    // - "other" - Other.
    string gender = 11;
    // The ID of this person.
    string id = 12;
    // The representation of the person's profile photo.
    message Image {
            // Whether the person's profile photo is the default one
    bool isDefault = 1;
            // The URL of the person's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
    string url = 2;
    }
    Image image = 13;
    // Whether this user has signed up for Google+.
    bool isPlusUser = 14;
    // Identifies this resource as a person. Value: "plus#person".
    string kind = 15;
    // An object representation of the individual components of a person's name.
    message Name {
            // The family name (last name) of this person.
    string familyName = 1;
            // The full name of this person, including middle names, suffixes, etc.
    string formatted = 2;
            // The given name (first name) of this person.
    string givenName = 3;
            // The honorific prefixes (such as "Dr." or "Mrs.") for this person.
    string honorificPrefix = 4;
            // The honorific suffixes (such as "Jr.") for this person.
    string honorificSuffix = 5;
            // The middle name of this person.
    string middleName = 6;
    }
    Name name = 16;
    // The nickname of this person.
    string nickname = 17;
    // Type of person within Google+. Possible values include, but are not limited to, the following values:  
    // - "person" - represents an actual person. 
    // - "page" - represents a page.
    string objectType = 18;
    // The occupation of this person.
    string occupation = 19;
    // A list of current or past organizations with which this person is associated.
    message Organization {
            // The department within the organization. Deprecated.
    string department = 1;
            // A short description of the person's role in this organization. Deprecated.
    string description = 2;
            // The date that the person left this organization.
    string endDate = 3;
            // The location of this organization. Deprecated.
    string location = 4;
            // The name of the organization.
    string name = 5;
            // If "true", indicates this organization is the person's primary one, which is typically interpreted as the current one.
    bool primary = 6;
            // The date that the person joined this organization.
    string startDate = 7;
            // The person's job title or role within the organization.
    string title = 8;
            // The type of organization. Possible values include, but are not limited to, the following values:  
    // - "work" - Work. 
    // - "school" - School.
    string type = 9;
    }
    repeated Organization organizations = 20;
    // A list of places where this person has lived.
    message PlacesLived {
            // If "true", this place of residence is this person's primary residence.
    bool primary = 1;
            // A place where this person has lived. For example: "Seattle, WA", "Near Toronto".
    string value = 2;
    }
    repeated PlacesLived placesLived = 21;
    // If a Google+ Page, the number of people who have +1'd this page.
    int32 plusOneCount = 22;
    // The person's relationship status. Possible values include, but are not limited to, the following values:  
    // - "single" - Person is single. 
    // - "in_a_relationship" - Person is in a relationship. 
    // - "engaged" - Person is engaged. 
    // - "married" - Person is married. 
    // - "its_complicated" - The relationship is complicated. 
    // - "open_relationship" - Person is in an open relationship. 
    // - "widowed" - Person is widowed. 
    // - "in_domestic_partnership" - Person is in a domestic partnership. 
    // - "in_civil_union" - Person is in a civil union.
    string relationshipStatus = 23;
    // The person's skills.
    string skills = 24;
    // The brief description (tagline) of this person.
    string tagline = 25;
    // The URL of this person's profile.
    string url = 26;
    // A list of URLs for this person.
    message Url {
            // The label of the URL.
    string label = 1;
            // The type of URL. Possible values include, but are not limited to, the following values:  
    // - "otherProfile" - URL for another profile. 
    // - "contributor" - URL to a site for which this person is a contributor. 
    // - "website" - URL for this Google+ Page's primary website. 
    // - "other" - Other URL.
    string type = 2;
            // The URL value.
    string value = 3;
    }
    repeated Url urls = 27;
    // Whether the person or Google+ Page has been verified.
    bool verified = 28;
}

message Place {
    // The physical address of the place.
    message Address {
            // The formatted address for display.
    string formatted = 1;
    }
    Address address = 1;
    // The display name of the place.
    string displayName = 2;
    // The id of the place.
    string id = 3;
    // Identifies this resource as a place. Value: "plus#place".
    string kind = 4;
    // The position of the place.
    message Position {
            // The latitude of this position.
    double latitude = 1;
            // The longitude of this position.
    double longitude = 2;
    }
    Position position = 5;
}

message PlusDomainsAclentryResource {
    // A descriptive name for this entry. Suitable for display.
    string displayName = 1;
    // The ID of the entry. For entries of type "person" or "circle", this is the ID of the resource. For other types, this property is not set.
    string id = 2;
    // The type of entry describing to whom access is granted. Possible values are:  
    // - "person" - Access to an individual. 
    // - "circle" - Access to members of a circle. 
    // - "myCircles" - Access to members of all the person's circles. 
    // - "extendedCircles" - Access to members of all the person's circles, plus all of the people in their circles. 
    // - "domain" - Access to members of the person's Google Apps domain. 
    // - "public" - Access to anyone on the web.
    string type = 3;
}

message Videostream {
    // The height, in pixels, of the video resource.
    int32 height = 1;
    // MIME type of the video stream.
    string type = 2;
    // URL of the video stream.
    string url = 3;
    // The width, in pixels, of the video resource.
    int32 width = 4;
}

enum Alt {
    JSON = 0;
}

service Google+DomainsService {
    // Get an activity.
    rpc GetActivitiesActivityId(GetActivitiesActivityIdRequest) returns (Activity) {
      option (google.api.http) = {
        get: "/plusDomains/v1/activities/{activityId}"
      };
    }
    // List all of the comments for an activity.
    rpc GetActivitiesActivityIdComments(GetActivitiesActivityIdCommentsRequest) returns (CommentFeed) {
      option (google.api.http) = {
        get: "/plusDomains/v1/activities/{activityId}/comments"
      };
    }
    // Create a new comment in reply to an activity.
    rpc PostActivitiesActivityIdComments(PostActivitiesActivityIdCommentsRequest) returns (Comment) {
      option (google.api.http) = {
        post: "/plusDomains/v1/activities/{activityId}/comments"
        body: "body"
      };
    }
    // List all of the people in the specified collection for a particular activity.
    rpc GetActivitiesActivityIdPeopleCollection(GetActivitiesActivityIdPeopleCollectionRequest) returns (PeopleFeed) {
      option (google.api.http) = {
        get: "/plusDomains/v1/activities/{activityId}/people/{collection}"
      };
    }
    // Get a circle.
    rpc GetCirclesCircleId(GetCirclesCircleIdRequest) returns (Circle) {
      option (google.api.http) = {
        get: "/plusDomains/v1/circles/{circleId}"
      };
    }
    // Update a circle's description.
    rpc PutCirclesCircleId(PutCirclesCircleIdRequest) returns (Circle) {
      option (google.api.http) = {
        put: "/plusDomains/v1/circles/{circleId}"
        body: "body"
      };
    }
    // Delete a circle.
    rpc DeleteCirclesCircleId(DeleteCirclesCircleIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/plusDomains/v1/circles/{circleId}"
      };
    }
    // List all of the people who are members of a circle.
    rpc GetCirclesCircleIdPeople(GetCirclesCircleIdPeopleRequest) returns (PeopleFeed) {
      option (google.api.http) = {
        get: "/plusDomains/v1/circles/{circleId}/people"
      };
    }
    // Add a person to a circle. Google+ limits certain circle operations, including the number of circle adds. Learn More.
    rpc PutCirclesCircleIdPeople(PutCirclesCircleIdPeopleRequest) returns (Circle) {
      option (google.api.http) = {
        put: "/plusDomains/v1/circles/{circleId}/people"
      };
    }
    // Remove a person from a circle.
    rpc DeleteCirclesCircleIdPeople(DeleteCirclesCircleIdPeopleRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/plusDomains/v1/circles/{circleId}/people"
      };
    }
    // Get a comment.
    rpc GetCommentsCommentId(GetCommentsCommentIdRequest) returns (Comment) {
      option (google.api.http) = {
        get: "/plusDomains/v1/comments/{commentId}"
      };
    }
    // Get a person's profile.
    rpc GetPeopleUserId(GetPeopleUserIdRequest) returns (Person) {
      option (google.api.http) = {
        get: "/plusDomains/v1/people/{userId}"
      };
    }
    // Create a new activity for the authenticated user.
    rpc PostPeopleUserIdActivities(PostPeopleUserIdActivitiesRequest) returns (Activity) {
      option (google.api.http) = {
        post: "/plusDomains/v1/people/{userId}/activities"
        body: "body"
      };
    }
    // List all of the activities in the specified collection for a particular user.
    rpc GetPeopleUserIdActivitiesCollection(GetPeopleUserIdActivitiesCollectionRequest) returns (ActivityFeed) {
      option (google.api.http) = {
        get: "/plusDomains/v1/people/{userId}/activities/{collection}"
      };
    }
    // List all of the audiences to which a user can share.
    rpc GetPeopleUserIdAudiences(GetPeopleUserIdAudiencesRequest) returns (AudiencesFeed) {
      option (google.api.http) = {
        get: "/plusDomains/v1/people/{userId}/audiences"
      };
    }
    // List all of the circles for a user.
    rpc GetPeopleUserIdCircles(GetPeopleUserIdCirclesRequest) returns (CircleFeed) {
      option (google.api.http) = {
        get: "/plusDomains/v1/people/{userId}/circles"
      };
    }
    // Create a new circle for the authenticated user.
    rpc PostPeopleUserIdCircles(PostPeopleUserIdCirclesRequest) returns (Circle) {
      option (google.api.http) = {
        post: "/plusDomains/v1/people/{userId}/circles"
        body: "body"
      };
    }
    // Add a new media item to an album. The current upload size limitations are 36MB for a photo and 1GB for a video. Uploads do not count against quota if photos are less than 2048 pixels on their longest side or videos are less than 15 minutes in length.
    rpc PostPeopleUserIdMediaCollection(PostPeopleUserIdMediaCollectionRequest) returns (Media) {
      option (google.api.http) = {
        post: "/plusDomains/v1/people/{userId}/media/{collection}"
        body: "body"
      };
    }
    // List all of the people in the specified collection.
    rpc GetPeopleUserIdPeopleCollection(GetPeopleUserIdPeopleCollectionRequest) returns (PeopleFeed) {
      option (google.api.http) = {
        get: "/plusDomains/v1/people/{userId}/people/{collection}"
      };
    }
}

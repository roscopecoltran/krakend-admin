syntax = "proto3";

import "google/api/annotations.proto";

package googlevault;

message GetV1MattersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The number of matters to return in the response.
    // Default and maximum are 100.
    int32 pageSize = 9;
    // The pagination token as returned in the response.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // If set, list only matters with that specific state. The default is listing
    // matters of all states.
    enum GetV1MattersRequest_State {
        GETV1MATTERSREQUEST_STATE_STATE_UNSPECIFIED = 0;
        GETV1MATTERSREQUEST_STATE_OPEN = 1;
        GETV1MATTERSREQUEST_STATE_CLOSED = 2;
        GETV1MATTERSREQUEST_STATE_DELETED = 3;
    }
    GetV1MattersRequest_State state = 14;
    string uploadType = 15;
    string upload_protocol = 16;
    // Specifies which parts of the matter to return in response.
    enum GetV1MattersRequest_View {
        GETV1MATTERSREQUEST_VIEW_VIEW_UNSPECIFIED = 0;
        GETV1MATTERSREQUEST_VIEW_BASIC = 1;
        GETV1MATTERSREQUEST_VIEW_FULL = 2;
    }
    GetV1MattersRequest_View view = 17;
}

message PostV1MattersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Matter body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1MattersMatterIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The matter ID.
    string matterId = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
    // Specifies which parts of the Matter to return in the response.
    enum GetV1MattersMatterIdRequest_View {
        GETV1MATTERSMATTERIDREQUEST_VIEW_VIEW_UNSPECIFIED = 0;
        GETV1MATTERSMATTERIDREQUEST_VIEW_BASIC = 1;
        GETV1MATTERSMATTERIDREQUEST_VIEW_FULL = 2;
    }
    GetV1MattersMatterIdRequest_View view = 15;
}

message PutV1MattersMatterIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Matter body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1MattersMatterIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The matter ID
    string matterId = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1MattersMatterIdHoldsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The matter ID.
    string matterId = 8;
    string oauth_token = 9;
    // The number of holds to return in the response, between 0 and 100 inclusive.
    // Leaving this empty, or as 0, is the same as page_size = 100.
    int32 pageSize = 10;
    // The pagination token as returned in the response.
    // An empty token means start from the beginning.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1MattersMatterIdHoldsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Hold body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1MattersMatterIdHoldsHoldIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The hold ID.
    string holdId = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PutV1MattersMatterIdHoldsHoldIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Hold body = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the hold.
    string holdId = 8;
    string key = 9;
    // The matter ID.
    string matterId = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message DeleteV1MattersMatterIdHoldsHoldIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The hold ID.
    string holdId = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1MattersMatterIdHoldsHoldIdAccountsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The hold ID.
    string holdId = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1MattersMatterIdHoldsHoldIdAccountsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    HeldAccount body = 5;
    string callback = 6;
    string fields = 7;
    // The hold ID.
    string holdId = 8;
    string key = 9;
    // The matter ID.
    string matterId = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message DeleteV1MattersMatterIdHoldsHoldIdAccountsAccountIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The ID of the account to remove from the hold.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The hold ID.
    string holdId = 8;
    string key = 9;
    // The matter ID.
    string matterId = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1MattersMatterId:AddPermissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    AddMatterPermissionsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1MattersMatterId:CloseRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CloseMatterRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1MattersMatterId:RemovePermissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    RemoveMatterPermissionsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1MattersMatterId:ReopenRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ReopenMatterRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1MattersMatterId:UndeleteRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UndeleteMatterRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The matter ID.
    string matterId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AddMatterPermissionsRequest {
    // Only relevant if send_emails is true.
    // True to CC requestor in the email message.
    // False to not CC requestor.
    bool ccMe = 1;
    // The MatterPermission to add.
    MatterPermission matterPermission = 2;
    // True to send notification email to the added account.
    // False to not send notification email.
    bool sendEmails = 3;
}

message CloseMatterRequest {
}

message CloseMatterResponse {
    // The updated matter, with state CLOSED.
    Matter matter = 1;
}

message CorpusQuery {
    // Details pertaining to Drive holds. If set, corpus must be Drive.
    HeldDriveQuery driveQuery = 1;
    // Details pertaining to Groups holds. If set, corpus must be Groups.
    HeldGroupsQuery groupsQuery = 2;
    // Details pertaining to mail holds. If set, corpus must be mail.
    HeldMailQuery mailQuery = 3;
}

message Empty {
}

message HeldAccount {
    // The account's ID as provided by the
    // <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>.
    string accountId = 1;
    // When the account was put on hold.
    string holdTime = 2;
}

message HeldDriveQuery {
    // If true, include files in Team Drives in the hold.
    bool includeTeamDriveFiles = 1;
}

message HeldGroupsQuery {
    // The end date range for the search query. These timestamps are in GMT and
    // rounded down to the start of the given date.
    string endTime = 1;
    // The start date range for the search query. These timestamps are in GMT and
    // rounded down to the start of the given date.
    string startTime = 2;
    // The search terms for the hold.
    string terms = 3;
}

message HeldMailQuery {
    // The end date range for the search query. These timestamps are in GMT and
    // rounded down to the start of the given date.
    string endTime = 1;
    // The start date range for the search query. These timestamps are in GMT and
    // rounded down to the start of the given date.
    string startTime = 2;
    // The search terms for the hold.
    string terms = 3;
}

message HeldOrgUnit {
    // When the org unit was put on hold. This property is immutable.
    string holdTime = 1;
    // The org unit's immutable ID as provided by the admin SDK.
    string orgUnitId = 2;
}

message Hold {
    // If set, the hold applies to the enumerated accounts and org_unit must be
    // empty.
    repeated HeldAccount accounts = 1;
    // The corpus to be searched.
    enum Hold_Corpu {
        HOLD_CORPU_CORPUS_TYPE_UNSPECIFIED = 0;
        HOLD_CORPU_DRIVE = 1;
        HOLD_CORPU_MAIL = 2;
        HOLD_CORPU_GROUPS = 3;
    }
    Hold_Corpu corpus = 2;
    // The unique immutable ID of the hold. Assigned during creation.
    string holdId = 3;
    // The name of the hold.
    string name = 4;
    // If set, the hold applies to all members of the organizational unit and
    // accounts must be empty. This property is mutable. For groups holds,
    // set the accounts field.
    HeldOrgUnit orgUnit = 5;
    // The corpus-specific query. If set, the corpusQuery must match corpus
    // type.
    CorpusQuery query = 6;
    // The last time this hold was modified.
    string updateTime = 7;
}

message ListHeldAccountsResponse {
    // The held accounts on a hold.
    repeated HeldAccount accounts = 1;
}

message ListHoldsResponse {
    // The list of holds.
    repeated Hold holds = 1;
    // Page token to retrieve the next page of results in the list.
    // If this is empty, then there are no more holds to list.
    string nextPageToken = 2;
}

message ListMattersResponse {
    // List of matters.
    repeated Matter matters = 1;
    // Page token to retrieve the next page of results in the list.
    string nextPageToken = 2;
}

message Matter {
    // The description of the matter.
    string description = 1;
    // The matter ID which is generated by the server.
    // Should be blank when creating a new matter.
    string matterId = 2;
    // List of users and access to the matter. Currently there is no programmer
    // defined limit on the number of permissions a matter can have.
    repeated MatterPermission matterPermissions = 3;
    // The name of the matter.
    string name = 4;
    // The state of the matter.
    enum Matter_State {
        MATTER_STATE_STATE_UNSPECIFIED = 0;
        MATTER_STATE_OPEN = 1;
        MATTER_STATE_CLOSED = 2;
        MATTER_STATE_DELETED = 3;
    }
    Matter_State state = 5;
}

message MatterPermission {
    // The account id, as provided by <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>.
    string accountId = 1;
    // The user's role in this matter.
    enum MatterPermission_Role {
        MATTERPERMISSION_ROLE_ROLE_UNSPECIFIED = 0;
        MATTERPERMISSION_ROLE_COLLABORATOR = 1;
        MATTERPERMISSION_ROLE_OWNER = 2;
    }
    MatterPermission_Role role = 2;
}

message RemoveMatterPermissionsRequest {
    // The account ID.
    string accountId = 1;
}

message ReopenMatterRequest {
}

message ReopenMatterResponse {
    // The updated matter, with state OPEN.
    Matter matter = 1;
}

message UndeleteMatterRequest {
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleVaultService {
    // Lists matters the user has access to.
    rpc GetV1Matters(GetV1MattersRequest) returns (ListMattersResponse) {
      option (google.api.http) = {
        get: "//v1/matters"
      };
    }
    // Creates a new matter with the given name and description. The initial state
    // is open, and the owner is the method caller. Returns the created matter
    // with default view.
    rpc PostV1Matters(PostV1MattersRequest) returns (Matter) {
      option (google.api.http) = {
        post: "//v1/matters"
        body: "body"
      };
    }
    // Gets the specified matter.
    rpc GetV1MattersMatterId(GetV1MattersMatterIdRequest) returns (Matter) {
      option (google.api.http) = {
        get: "//v1/matters/{matterId}"
      };
    }
    // Updates the specified matter.
    // This updates only the name and description of the matter, identified by
    // matter id. Changes to any other fields are ignored.
    // Returns the default view of the matter.
    rpc PutV1MattersMatterId(PutV1MattersMatterIdRequest) returns (Matter) {
      option (google.api.http) = {
        put: "//v1/matters/{matterId}"
        body: "body"
      };
    }
    // Deletes the specified matter. Returns matter with updated state.
    rpc DeleteV1MattersMatterId(DeleteV1MattersMatterIdRequest) returns (Matter) {
      option (google.api.http) = {
        delete: "//v1/matters/{matterId}"
      };
    }
    // Lists holds within a matter. An empty page token in ListHoldsResponse
    // denotes no more holds to list.
    rpc GetV1MattersMatterIdHolds(GetV1MattersMatterIdHoldsRequest) returns (ListHoldsResponse) {
      option (google.api.http) = {
        get: "//v1/matters/{matterId}/holds"
      };
    }
    // Creates a hold in the given matter.
    rpc PostV1MattersMatterIdHolds(PostV1MattersMatterIdHoldsRequest) returns (Hold) {
      option (google.api.http) = {
        post: "//v1/matters/{matterId}/holds"
        body: "body"
      };
    }
    // Gets a hold by ID.
    rpc GetV1MattersMatterIdHoldsHoldId(GetV1MattersMatterIdHoldsHoldIdRequest) returns (Hold) {
      option (google.api.http) = {
        get: "//v1/matters/{matterId}/holds/{holdId}"
      };
    }
    // Updates the OU and/or query parameters of a hold. You cannot add accounts
    // to a hold that covers an OU, nor can you add OUs to a hold that covers
    // individual accounts. Accounts listed in the hold will be ignored.
    rpc PutV1MattersMatterIdHoldsHoldId(PutV1MattersMatterIdHoldsHoldIdRequest) returns (Hold) {
      option (google.api.http) = {
        put: "//v1/matters/{matterId}/holds/{holdId}"
        body: "body"
      };
    }
    // Removes a hold by ID. This will release any HeldAccounts on this Hold.
    rpc DeleteV1MattersMatterIdHoldsHoldId(DeleteV1MattersMatterIdHoldsHoldIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/matters/{matterId}/holds/{holdId}"
      };
    }
    // Lists HeldAccounts for a hold. This will only list individually specified
    // held accounts. If the hold is on an OU, then use
    // <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>
    // to enumerate its members.
    rpc GetV1MattersMatterIdHoldsHoldIdAccounts(GetV1MattersMatterIdHoldsHoldIdAccountsRequest) returns (ListHeldAccountsResponse) {
      option (google.api.http) = {
        get: "//v1/matters/{matterId}/holds/{holdId}/accounts"
      };
    }
    // Adds a HeldAccount to a hold. Accounts can only be added to a hold that
    // has no held_org_unit set. Attempting to add an account to an OU-based
    // hold will result in an error.
    rpc PostV1MattersMatterIdHoldsHoldIdAccounts(PostV1MattersMatterIdHoldsHoldIdAccountsRequest) returns (HeldAccount) {
      option (google.api.http) = {
        post: "//v1/matters/{matterId}/holds/{holdId}/accounts"
        body: "body"
      };
    }
    // Removes a HeldAccount from a hold. If this request leaves the hold with
    // no held accounts, the hold will not apply to any accounts.
    rpc DeleteV1MattersMatterIdHoldsHoldIdAccountsAccountId(DeleteV1MattersMatterIdHoldsHoldIdAccountsAccountIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/matters/{matterId}/holds/{holdId}/accounts/{accountId}"
      };
    }
    // Adds an account as a matter collaborator.
    rpc PostV1MattersMatterId:AddPermissions(PostV1MattersMatterId:AddPermissionsRequest) returns (MatterPermission) {
      option (google.api.http) = {
        post: "//v1/matters/{matterId}:addPermissions"
        body: "body"
      };
    }
    // Closes the specified matter. Returns matter with updated state.
    rpc PostV1MattersMatterId:Close(PostV1MattersMatterId:CloseRequest) returns (CloseMatterResponse) {
      option (google.api.http) = {
        post: "//v1/matters/{matterId}:close"
        body: "body"
      };
    }
    // Removes an account as a matter collaborator.
    rpc PostV1MattersMatterId:RemovePermissions(PostV1MattersMatterId:RemovePermissionsRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/matters/{matterId}:removePermissions"
        body: "body"
      };
    }
    // Reopens the specified matter. Returns matter with updated state.
    rpc PostV1MattersMatterId:Reopen(PostV1MattersMatterId:ReopenRequest) returns (ReopenMatterResponse) {
      option (google.api.http) = {
        post: "//v1/matters/{matterId}:reopen"
        body: "body"
      };
    }
    // Undeletes the specified matter. Returns matter with updated state.
    rpc PostV1MattersMatterId:Undelete(PostV1MattersMatterId:UndeleteRequest) returns (Matter) {
      option (google.api.http) = {
        post: "//v1/matters/{matterId}:undelete"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package adexchangebuyer;

message GetAccountsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetAccountsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The account id
    int32 id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutAccountsIdRequest {
    alt alt = 1;
    Account body = 2;
    // Confirmation for erasing bidder and cookie matching urls.
    bool confirmUnsafeAccountChange = 3;
    string fields = 4;
    // The account id
    int32 id = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetBillinginfoRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetBillinginfoAccountIdRequest {
    // The account id.
    int32 accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetBillinginfoAccountIdBillingIdRequest {
    // The account id to get the budget information for.
    string accountId = 1;
    alt alt = 2;
    // The billing id to get the budget information for.
    string billingId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutBillinginfoAccountIdBillingIdRequest {
    // The account id associated with the budget being updated.
    string accountId = 1;
    alt alt = 2;
    // The billing id associated with the budget being updated.
    string billingId = 3;
    Budget body = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetCreativesRequest {
    // When specified, only creatives for the given account ids are returned.
    repeated int32 accountId = 1;
    alt alt = 2;
    // When specified, only creatives for the given buyer creative ids are returned.
    repeated string buyerCreativeId = 3;
    // When specified, only creatives having the given deals status are returned.
    enum GetCreativesRequest_DealsStatusFilter {
        GETCREATIVESREQUEST_DEALSSTATUSFILTER_APPROVED = 0;
        GETCREATIVESREQUEST_DEALSSTATUSFILTER_CONDITIONALLY_APPROVED = 1;
        GETCREATIVESREQUEST_DEALSSTATUSFILTER_DISAPPROVED = 2;
        GETCREATIVESREQUEST_DEALSSTATUSFILTER_NOT_CHECKED = 3;
    }
    GetCreativesRequest_DealsStatusFilter dealsStatusFilter = 4;
    string fields = 5;
    string key = 6;
    // Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
    int32 maxResults = 7;
    string oauth_token = 8;
    // When specified, only creatives having the given open auction status are returned.
    enum GetCreativesRequest_OpenAuctionStatusFilter {
        GETCREATIVESREQUEST_OPENAUCTIONSTATUSFILTER_APPROVED = 0;
        GETCREATIVESREQUEST_OPENAUCTIONSTATUSFILTER_CONDITIONALLY_APPROVED = 1;
        GETCREATIVESREQUEST_OPENAUCTIONSTATUSFILTER_DISAPPROVED = 2;
        GETCREATIVESREQUEST_OPENAUCTIONSTATUSFILTER_NOT_CHECKED = 3;
    }
    GetCreativesRequest_OpenAuctionStatusFilter openAuctionStatusFilter = 9;
    // A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.
    string pageToken = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message PostCreativesRequest {
    alt alt = 1;
    Creative body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetCreativesAccountIdBuyerCreativeIdRequest {
    // The id for the account that will serve this creative.
    int32 accountId = 1;
    alt alt = 2;
    // The buyer-specific id for this creative.
    string buyerCreativeId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostCreativesAccountIdBuyerCreativeIdAddDealDealIdRequest {
    // The id for the account that will serve this creative.
    int32 accountId = 1;
    alt alt = 2;
    // The buyer-specific id for this creative.
    string buyerCreativeId = 3;
    // The id of the deal id to associate with this creative.
    string dealId = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetCreativesAccountIdBuyerCreativeIdListDealsRequest {
    // The id for the account that will serve this creative.
    int32 accountId = 1;
    alt alt = 2;
    // The buyer-specific id for this creative.
    string buyerCreativeId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostCreativesAccountIdBuyerCreativeIdRemoveDealDealIdRequest {
    // The id for the account that will serve this creative.
    int32 accountId = 1;
    alt alt = 2;
    // The buyer-specific id for this creative.
    string buyerCreativeId = 3;
    // The id of the deal id to disassociate with this creative.
    string dealId = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetPerformancereportRequest {
    // The account id to get the reports.
    string accountId = 1;
    alt alt = 2;
    // The end time of the report in ISO 8601 timestamp format using UTC.
    string endDateTime = 3;
    string fields = 4;
    string key = 5;
    // Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
    int32 maxResults = 6;
    string oauth_token = 7;
    // A continuation token, used to page through performance reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // The start time of the report in ISO 8601 timestamp format using UTC.
    string startDateTime = 11;
    string userIp = 12;
}

message GetPretargetingconfigsAccountIdRequest {
    // The account id to get the pretargeting configs for.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostPretargetingconfigsAccountIdRequest {
    // The account id to insert the pretargeting config for.
    string accountId = 1;
    alt alt = 2;
    PretargetingConfig body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetPretargetingconfigsAccountIdConfigIdRequest {
    // The account id to get the pretargeting config for.
    string accountId = 1;
    alt alt = 2;
    // The specific id of the configuration to retrieve.
    string configId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutPretargetingconfigsAccountIdConfigIdRequest {
    // The account id to update the pretargeting config for.
    string accountId = 1;
    alt alt = 2;
    PretargetingConfig body = 3;
    // The specific id of the configuration to update.
    string configId = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeletePretargetingconfigsAccountIdConfigIdRequest {
    // The account id to delete the pretargeting config for.
    string accountId = 1;
    alt alt = 2;
    // The specific id of the configuration to delete.
    string configId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostPrivateauctionPrivateAuctionIdUpdateproposalRequest {
    alt alt = 1;
    UpdatePrivateAuctionProposalRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string privateAuctionId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProductsSearchRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // The pql query used to query for products.
    string pqlQuery = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetProductsProductIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The id for the product to get the head revision for.
    string productId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostProposalsInsertRequest {
    alt alt = 1;
    CreateOrdersRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetProposalsSearchRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // Query string to retrieve specific proposals.
    string pqlQuery = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetProposalsProposalIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // Id of the proposal to retrieve.
    string proposalId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetProposalsProposalIdDealsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // Query string to retrieve specific deals.
    string pqlQuery = 5;
    boolean prettyPrint = 6;
    // The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of the URL.
    string proposalId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProposalsProposalIdDealsDeleteRequest {
    alt alt = 1;
    DeleteOrderDealsRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The proposalId to delete deals from.
    string proposalId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProposalsProposalIdDealsInsertRequest {
    alt alt = 1;
    AddOrderDealsRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // proposalId for which deals need to be added.
    string proposalId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProposalsProposalIdDealsUpdateRequest {
    alt alt = 1;
    EditAllOrderDealsRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The proposalId to edit deals on.
    string proposalId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProposalsProposalIdNotesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // Query string to retrieve specific notes. To search the text contents of notes, please use syntax like "WHERE note.note = "foo" or "WHERE note.note LIKE "%bar%"
    string pqlQuery = 5;
    boolean prettyPrint = 6;
    // The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of the URL.
    string proposalId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProposalsProposalIdNotesInsertRequest {
    alt alt = 1;
    AddOrderNotesRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The proposalId to add notes for.
    string proposalId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProposalsProposalIdSetupcompleteRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The proposal id for which the setup is complete
    string proposalId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutProposalsProposalIdRevisionNumberUpdateActionRequest {
    alt alt = 1;
    Proposal body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The proposal id to update.
    string proposalId = 7;
    string quotaUser = 8;
    // The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.
    string revisionNumber = 9;
    // The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.
    enum PutProposalsProposalIdRevisionNumberUpdateActionRequest_UpdateAction {
        PUTPROPOSALSPROPOSALIDREVISIONNUMBERUPDATEACTIONREQUEST_UPDATEACTION_ACCEPT = 0;
        PUTPROPOSALSPROPOSALIDREVISIONNUMBERUPDATEACTIONREQUEST_UPDATEACTION_CANCEL = 1;
        PUTPROPOSALSPROPOSALIDREVISIONNUMBERUPDATEACTIONREQUEST_UPDATEACTION_PROPOSE = 2;
        PUTPROPOSALSPROPOSALIDREVISIONNUMBERUPDATEACTIONREQUEST_UPDATEACTION_PROPOSEANDACCEPT = 3;
        PUTPROPOSALSPROPOSALIDREVISIONNUMBERUPDATEACTIONREQUEST_UPDATEACTION_UNKNOWNACTION = 4;
        PUTPROPOSALSPROPOSALIDREVISIONNUMBERUPDATEACTIONREQUEST_UPDATEACTION_UPDATENONTERMS = 5;
    }
    PutProposalsProposalIdRevisionNumberUpdateActionRequest_UpdateAction updateAction = 10;
    string userIp = 11;
}

message GetPublisherAccountIdProfilesRequest {
    // The accountId of the publisher to get profiles for.
    int32 accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message Account {
    // Your bidder locations that have distinct URLs.
    message BidderLocation {
            // The protocol that the bidder endpoint is using. OpenRTB protocols with prefix PROTOCOL_OPENRTB_PROTOBUF use proto buffer, otherwise use JSON.  Allowed values:  
    // - PROTOCOL_ADX 
    // - PROTOCOL_OPENRTB_2_2 
    // - PROTOCOL_OPENRTB_2_3 
    // - PROTOCOL_OPENRTB_2_4 
    // - PROTOCOL_OPENRTB_2_5 
    // - PROTOCOL_OPENRTB_PROTOBUF_2_3 
    // - PROTOCOL_OPENRTB_PROTOBUF_2_4 
    // - PROTOCOL_OPENRTB_PROTOBUF_2_5
    string bidProtocol = 1;
            // The maximum queries per second the Ad Exchange will send.
    int32 maximumQps = 2;
            // The geographical region the Ad Exchange should send requests from. Only used by some quota systems, but always setting the value is recommended. Allowed values:  
    // - ASIA 
    // - EUROPE 
    // - US_EAST 
    // - US_WEST
    string region = 3;
            // The URL to which the Ad Exchange will send bid requests.
    string url = 4;
    }
    repeated BidderLocation bidderLocation = 1;
    // The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
    string cookieMatchingNid = 2;
    // The base URL used in cookie match requests.
    string cookieMatchingUrl = 3;
    // Account id.
    int32 id = 4;
    // Resource type.
    string kind = 5;
    // The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
    int32 maximumActiveCreatives = 6;
    // The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
    int32 maximumTotalQps = 7;
    // The number of creatives that this account inserted or bid with in the last 30 days.
    int32 numberActiveCreatives = 8;
}

message AccountsList {
    // A list of accounts.
    repeated Account items = 1;
    // Resource type.
    string kind = 2;
}

message AddOrderDealsRequest {
    // The list of deals to add
    repeated MarketplaceDeal deals = 1;
    // The last known proposal revision number.
    string proposalRevisionNumber = 2;
    // Indicates an optional action to take on the proposal
    string updateAction = 3;
}

message AddOrderDealsResponse {
    // List of deals added (in the same proposal as passed in the request)
    repeated MarketplaceDeal deals = 1;
    // The updated revision number for the proposal.
    string proposalRevisionNumber = 2;
}

message AddOrderNotesRequest {
    // The list of notes to add.
    repeated MarketplaceNote notes = 1;
}

message AddOrderNotesResponse {
    repeated MarketplaceNote notes = 1;
}

message BillingInfo {
    // Account id.
    int32 accountId = 1;
    // Account name.
    string accountName = 2;
    // A list of adgroup IDs associated with this particular account. These IDs may show up as part of a realtime bidding BidRequest, which indicates a bid request for this account.
    repeated string billingId = 3;
    // Resource type.
    string kind = 4;
}

message BillingInfoList {
    // A list of billing info relevant for your account.
    repeated BillingInfo items = 1;
    // Resource type.
    string kind = 2;
}

message Budget {
    // The id of the account. This is required for get and update requests.
    string accountId = 1;
    // The billing id to determine which adgroup to provide budget information for. This is required for get and update requests.
    string billingId = 2;
    // The daily budget amount in unit amount of the account currency to apply for the billingId provided. This is required for update requests.
    string budgetAmount = 3;
    // The currency code for the buyer. This cannot be altered here.
    string currencyCode = 4;
    // The unique id that describes this item.
    string id = 5;
    // The kind of the resource, i.e. "adexchangebuyer#budget".
    string kind = 6;
}

message Buyer {
    // Adx account id of the buyer.
    string accountId = 1;
}

message ContactInformation {
    // Email address of the contact.
    string email = 1;
    // The name of the contact.
    string name = 2;
}

message CreateOrdersRequest {
    // The list of proposals to create.
    repeated Proposal proposals = 1;
    // Web property id of the seller creating these orders
    string webPropertyCode = 2;
}

message CreateOrdersResponse {
    // The list of proposals successfully created.
    repeated Proposal proposals = 1;
}

message Creative {
    // The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
    string HTMLSnippet = 1;
    // Account id.
    int32 accountId = 2;
    // The link to the Ad Preferences page. This is only supported for native ads.
    string adChoicesDestinationUrl = 3;
    // Detected advertiser id, if any. Read-only. This field should not be set in requests.
    repeated string advertiserId = 4;
    // The name of the company being advertised in the creative. The value provided must exist in the advertisers.txt file.
    string advertiserName = 5;
    // The agency id for this creative.
    string agencyId = 6;
    // The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
    string apiUploadTimestamp = 7;
    // List of buyer selectable attributes for the ads that may be shown from this snippet. Each attribute is represented by an integer as defined in  buyer-declarable-creative-attributes.txt.
    repeated int32 attribute = 8;
    // A buyer-specific id identifying the creative in this ad.
    string buyerCreativeId = 9;
    // The set of destination urls for the snippet.
    repeated string clickThroughUrl = 10;
    // Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
    message Correction {
            // All known serving contexts containing serving status information.
    message Context {
                    // Only set when contextType=AUCTION_TYPE. Represents the auction types this correction applies to.
    repeated string auctionType = 1;
                    // The type of context (e.g., location, platform, auction type, SSL-ness).
    string contextType = 2;
                    // Only set when contextType=LOCATION. Represents the geo criterias this correction applies to.
    repeated int32 geoCriteriaId = 3;
                    // Only set when contextType=PLATFORM. Represents the platforms this correction applies to.
    repeated string platform = 4;
        }
        repeated Context contexts = 1;
            // Additional details about the correction.
    repeated string details = 2;
            // The type of correction that was applied to the creative.
    string reason = 3;
    }
    repeated Correction corrections = 11;
    // Top-level deals status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=DIRECT_DEALS (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from servingRestrictions directly.
    string dealsStatus = 12;
    // Detected domains for this creative. Read-only. This field should not be set in requests.
    repeated string detectedDomains = 13;
    // The filtering reasons for the creative. Read-only. This field should not be set in requests.
    message FilteringReasons {
            // The date in ISO 8601 format for the data. The data is collected from 00:00:00 to 23:59:59 in PST.
    string date = 1;
            // The filtering reasons.
    message Reason {
                    // The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.
    string filteringCount = 1;
                    // The filtering status code as defined in  creative-status-codes.txt.
    int32 filteringStatus = 2;
        }
        repeated Reason reasons = 2;
    }
    FilteringReasons filteringReasons = 14;
    // Ad height.
    int32 height = 15;
    // The set of urls to be called to record an impression.
    repeated string impressionTrackingUrl = 16;
    // Resource type.
    string kind = 17;
    // Detected languages for this creative. Read-only. This field should not be set in requests.
    repeated string languages = 18;
    // If nativeAd is set, HTMLSnippet and the videoURL outside of nativeAd should not be set. (The videoURL inside nativeAd can be set.)
    message NativeAd {
        string advertiser = 1;
            // The app icon, for app download ads.
    message AppIcon {
            int32 height = 1;
            string url = 2;
            int32 width = 3;
        }
        AppIcon appIcon = 2;
            // A long description of the ad.
    string body = 3;
            // A label for the button that the user is supposed to click.
    string callToAction = 4;
            // The URL that the browser/SDK will load when the user clicks the ad.
    string clickLinkUrl = 5;
            // The URL to use for click tracking.
    string clickTrackingUrl = 6;
            // A short title for the ad.
    string headline = 7;
            // A large image.
    message Image {
            int32 height = 1;
            string url = 2;
            int32 width = 3;
        }
        Image image = 8;
            // The URLs are called when the impression is rendered.
    repeated string impressionTrackingUrl = 9;
            // A smaller image, for the advertiser logo.
    message Logo {
            int32 height = 1;
            string url = 2;
            int32 width = 3;
        }
        Logo logo = 10;
            // The price of the promoted app including the currency info.
    string price = 11;
            // The app rating in the app store. Must be in the range [0-5].
    double starRating = 12;
            // The URL to the app store to purchase/download the promoted app.
    string store = 13;
            // The URL of the XML VAST for a native ad. Note this is a separate field from resource.video_url.
    string videoURL = 14;
    }
    NativeAd nativeAd = 19;
    // Top-level open auction status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=OPEN_AUCTION (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from ServingRestrictions directly.
    string openAuctionStatus = 20;
    // Detected product categories, if any. Each category is represented by an integer as defined in  ad-product-categories.txt. Read-only. This field should not be set in requests.
    repeated int32 productCategories = 21;
    // All restricted categories for the ads that may be shown from this snippet. Each category is represented by an integer as defined in the  ad-restricted-categories.txt.
    repeated int32 restrictedCategories = 22;
    // Detected sensitive categories, if any. Each category is represented by an integer as defined in  ad-sensitive-categories.txt. Read-only. This field should not be set in requests.
    repeated int32 sensitiveCategories = 23;
    // The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS vs HTTP request, or the type of auction). Read-only. This field should not be set in requests. See the examples in the Creatives guide for more details.
    message ServingRestriction {
            // All known contexts/restrictions.
    message Context {
                    // Only set when contextType=AUCTION_TYPE. Represents the auction types this restriction applies to.
    repeated string auctionType = 1;
                    // The type of context (e.g., location, platform, auction type, SSL-ness).
    string contextType = 2;
                    // Only set when contextType=LOCATION. Represents the geo criterias this restriction applies to. Impressions are considered to match a context if either the user location or publisher location matches a given geoCriteriaId.
    repeated int32 geoCriteriaId = 3;
                    // Only set when contextType=PLATFORM. Represents the platforms this restriction applies to.
    repeated string platform = 4;
        }
        repeated Context contexts = 1;
            // The reasons for disapproval within this restriction, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED or CONDITIONALLY_APPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue.
    message DisapprovalReason {
                    // Additional details about the reason for disapproval.
    repeated string details = 1;
                    // The categorized reason for disapproval.
    string reason = 2;
        }
        repeated DisapprovalReason disapprovalReasons = 2;
            // Why the creative is ineligible to serve in this context (e.g., it has been explicitly disapproved or is pending review).
    string reason = 3;
    }
    repeated ServingRestriction servingRestrictions = 24;
    // List of vendor types for the ads that may be shown from this snippet. Each vendor type is represented by an integer as defined in vendors.txt.
    repeated int32 vendorType = 25;
    // The version for this creative. Read-only. This field should not be set in requests.
    int32 version = 26;
    // The URL to fetch a video ad. If set, HTMLSnippet and the nativeAd should not be set. Note, this is different from resource.native_ad.video_url above.
    string videoURL = 27;
    // Ad width.
    int32 width = 28;
}

message CreativeDealIds {
    // A list of external deal ids and ARC approval status.
    message DealStatuse {
            // ARC approval status.
    string arcStatus = 1;
            // External deal ID.
    string dealId = 2;
            // Publisher ID.
    int32 webPropertyId = 3;
    }
    repeated DealStatuse dealStatuses = 1;
    // Resource type.
    string kind = 2;
}

message CreativesList {
    // A list of creatives.
    repeated Creative items = 1;
    // Resource type.
    string kind = 2;
    // Continuation token used to page through creatives. To retrieve the next page of results, set the next request's "pageToken" value to this.
    string nextPageToken = 3;
}

message DealServingMetadata {
    // True if alcohol ads are allowed for this deal (read-only). This field is only populated when querying for finalized orders using the method GetFinalizedOrderDeals
    bool alcoholAdsAllowed = 1;
    // Tracks which parties (if any) have paused a deal. (readonly, except via PauseResumeOrderDeals action)
    DealServingMetadataDealPauseStatus dealPauseStatus = 2;
}

message DealServingMetadataDealPauseStatus {
    string buyerPauseReason = 1;
    // If the deal is paused, records which party paused the deal first.
    string firstPausedBy = 2;
    bool hasBuyerPaused = 3;
    bool hasSellerPaused = 4;
    string sellerPauseReason = 5;
}

message DealTerms {
    // Visibilty of the URL in bid requests.
    string brandingType = 1;
    // Indicates that this ExternalDealId exists under at least two different AdxInventoryDeals. Currently, the only case that the same ExternalDealId will exist is programmatic cross sell case.
    string crossListedExternalDealIdType = 2;
    // Description for the proposed terms of the deal.
    string description = 3;
    // Non-binding estimate of the estimated gross spend for this deal Can be set by buyer or seller.
    Price estimatedGrossSpend = 4;
    // Non-binding estimate of the impressions served per day Can be set by buyer or seller.
    string estimatedImpressionsPerDay = 5;
    // The terms for guaranteed fixed price deals.
    DealTermsGuaranteedFixedPriceTerms guaranteedFixedPriceTerms = 6;
    // The terms for non-guaranteed auction deals.
    DealTermsNonGuaranteedAuctionTerms nonGuaranteedAuctionTerms = 7;
    // The terms for non-guaranteed fixed price deals.
    DealTermsNonGuaranteedFixedPriceTerms nonGuaranteedFixedPriceTerms = 8;
    // The terms for rubicon non-guaranteed deals.
    DealTermsRubiconNonGuaranteedTerms rubiconNonGuaranteedTerms = 9;
    // For deals with Cost Per Day billing, defines the timezone used to mark the boundaries of a day (buyer-readonly)
    string sellerTimeZone = 10;
}

message DealTermsGuaranteedFixedPriceTerms {
    // External billing info for this Deal. This field is relevant when external billing info such as price has a different currency code than DFP/AdX.
    DealTermsGuaranteedFixedPriceTermsBillingInfo billingInfo = 1;
    // Fixed price for the specified buyer.
    repeated PricePerBuyer fixedPrices = 2;
    // Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.
    string guaranteedImpressions = 3;
    // Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.
    string guaranteedLooks = 4;
    // Count of minimum daily looks for a CPD deal. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.
    string minimumDailyLooks = 5;
}

message DealTermsGuaranteedFixedPriceTermsBillingInfo {
    // The timestamp (in ms since epoch) when the original reservation price for the deal was first converted to DFP currency. This is used to convert the contracted price into buyer's currency without discrepancy.
    string currencyConversionTimeMs = 1;
    // The DFP line item id associated with this deal. For features like CPD, buyers can retrieve the DFP line item for billing reconciliation.
    string dfpLineItemId = 2;
    // The original contracted quantity (# impressions) for this deal. To ensure delivery, sometimes the publisher will book the deal with a impression buffer, such that guaranteed_looks is greater than the contracted quantity. However clients are billed using the original contracted quantity.
    string originalContractedQuantity = 3;
    // The original reservation price for the deal, if the currency code is different from the one used in negotiation.
    Price price = 4;
}

message DealTermsNonGuaranteedAuctionTerms {
    // True if open auction buyers are allowed to compete with invited buyers in this private auction (buyer-readonly).
    bool autoOptimizePrivateAuction = 1;
    // Reserve price for the specified buyer.
    repeated PricePerBuyer reservePricePerBuyers = 2;
}

message DealTermsNonGuaranteedFixedPriceTerms {
    // Fixed price for the specified buyer.
    repeated PricePerBuyer fixedPrices = 1;
}

message DealTermsRubiconNonGuaranteedTerms {
    // Optional price for Rubicon priority access in the auction.
    Price priorityPrice = 1;
    // Optional price for Rubicon standard access in the auction.
    Price standardPrice = 2;
}

message DeleteOrderDealsRequest {
    // List of deals to delete for a given proposal
    repeated string dealIds = 1;
    // The last known proposal revision number.
    string proposalRevisionNumber = 2;
    // Indicates an optional action to take on the proposal
    string updateAction = 3;
}

message DeleteOrderDealsResponse {
    // List of deals deleted (in the same proposal as passed in the request)
    repeated MarketplaceDeal deals = 1;
    // The updated revision number for the proposal.
    string proposalRevisionNumber = 2;
}

message DeliveryControl {
    string creativeBlockingLevel = 1;
    string deliveryRateType = 2;
    repeated DeliveryControlFrequencyCap frequencyCaps = 3;
}

message DeliveryControlFrequencyCap {
    int32 maxImpressions = 1;
    int32 numTimeUnits = 2;
    string timeUnitType = 3;
}

message Dimension {
    string dimensionType = 1;
    repeated DimensionDimensionValue dimensionValues = 2;
}

message DimensionDimensionValue {
    // Id of the dimension.
    int32 id = 1;
    // Name of the dimension mainly for debugging purposes, except for the case of CREATIVE_SIZE. For CREATIVE_SIZE, strings are used instead of ids.
    string name = 2;
    // Percent of total impressions for a dimension type. e.g. {dimension_type: 'GENDER', [{dimension_value: {id: 1, name: 'MALE', percentage: 60}}]} Gender MALE is 60% of all impressions which have gender.
    int32 percentage = 3;
}

message EditAllOrderDealsRequest {
    // List of deals to edit. Service may perform 3 different operations based on comparison of deals in this list vs deals already persisted in database: 1. Add new deal to proposal If a deal in this list does not exist in the proposal, the service will create a new deal and add it to the proposal. Validation will follow AddOrderDealsRequest. 2. Update existing deal in the proposal If a deal in this list already exist in the proposal, the service will update that existing deal to this new deal in the request. Validation will follow UpdateOrderDealsRequest. 3. Delete deals from the proposal (just need the id) If a existing deal in the proposal is not present in this list, the service will delete that deal from the proposal. Validation will follow DeleteOrderDealsRequest.
    repeated MarketplaceDeal deals = 1;
    // If specified, also updates the proposal in the batch transaction. This is useful when the proposal and the deals need to be updated in one transaction.
    Proposal proposal = 2;
    // The last known revision number for the proposal.
    string proposalRevisionNumber = 3;
    // Indicates an optional action to take on the proposal
    string updateAction = 4;
}

message EditAllOrderDealsResponse {
    // List of all deals in the proposal after edit.
    repeated MarketplaceDeal deals = 1;
    // The latest revision number after the update has been applied.
    string orderRevisionNumber = 2;
}

message GetOffersResponse {
    // The returned list of products.
    repeated Product products = 1;
}

message GetOrderDealsResponse {
    // List of deals for the proposal
    repeated MarketplaceDeal deals = 1;
}

message GetOrderNotesResponse {
    // The list of matching notes. The notes for a proposal are ordered from oldest to newest. If the notes span multiple proposals, they will be grouped by proposal, with the notes for the most recently modified proposal appearing first.
    repeated MarketplaceNote notes = 1;
}

message GetOrdersResponse {
    // The list of matching proposals.
    repeated Proposal proposals = 1;
}

message GetPublisherProfilesByAccountIdResponse {
    // Profiles for the requested publisher
    repeated PublisherProfileApiProto profiles = 1;
}

message MarketplaceDeal {
    // Buyer private data (hidden from seller).
    PrivateData buyerPrivateData = 1;
    // The time (ms since epoch) of the deal creation. (readonly)
    string creationTimeMs = 2;
    // Specifies the creative pre-approval policy (buyer-readonly)
    string creativePreApprovalPolicy = 3;
    // Specifies whether the creative is safeFrame compatible (buyer-readonly)
    string creativeSafeFrameCompatibility = 4;
    // A unique deal-id for the deal (readonly).
    string dealId = 5;
    // Metadata about the serving status of this deal (readonly, writes via custom actions)
    DealServingMetadata dealServingMetadata = 6;
    // The set of fields around delivery control that are interesting for a buyer to see but are non-negotiable. These are set by the publisher. This message is assigned an id of 100 since some day we would want to model this as a protobuf extension.
    DeliveryControl deliveryControl = 7;
    // The external deal id assigned to this deal once the deal is finalized. This is the deal-id that shows up in serving/reporting etc. (readonly)
    string externalDealId = 8;
    // Proposed flight end time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)
    string flightEndTimeMs = 9;
    // Proposed flight start time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)
    string flightStartTimeMs = 10;
    // Description for the deal terms. (buyer-readonly)
    string inventoryDescription = 11;
    // Indicates whether the current deal is a RFP template. RFP template is created by buyer and not based on seller created products.
    bool isRfpTemplate = 12;
    // True, if the buyside inventory setup is complete for this deal. (readonly, except via OrderSetupCompleted action)
    bool isSetupComplete = 13;
    // Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#marketplaceDeal".
    string kind = 14;
    // The time (ms since epoch) when the deal was last updated. (readonly)
    string lastUpdateTimeMs = 15;
    // The name of the deal. (updatable)
    string name = 16;
    // The product-id from which this deal was created. (readonly, except on create)
    string productId = 17;
    // The revision number of the product that the deal was created from (readonly, except on create)
    string productRevisionNumber = 18;
    // Specifies the creative source for programmatic deals, PUBLISHER means creative is provided by seller and ADVERTISR means creative is provided by buyer. (buyer-readonly)
    string programmaticCreativeSource = 19;
    string proposalId = 20;
    // Optional Seller contact information for the deal (buyer-readonly)
    repeated ContactInformation sellerContacts = 21;
    // The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together. (updatable)
    repeated SharedTargeting sharedTargetings = 22;
    // The syndication product associated with the deal. (readonly, except on create)
    string syndicationProduct = 23;
    // The negotiable terms of the deal. (updatable)
    DealTerms terms = 24;
    string webPropertyCode = 25;
}

message MarketplaceDealParty {
    // The buyer/seller associated with the deal. One of buyer/seller is specified for a deal-party.
    Buyer buyer = 1;
    // The buyer/seller associated with the deal. One of buyer/seller is specified for a deal party.
    Seller seller = 2;
}

message MarketplaceLabel {
    // The accountId of the party that created the label.
    string accountId = 1;
    // The creation time (in ms since epoch) for the label.
    string createTimeMs = 2;
    // Information about the party that created the label.
    MarketplaceDealParty deprecatedMarketplaceDealParty = 3;
    // The label to use.
    string label = 4;
}

message MarketplaceNote {
    // The role of the person (buyer/seller) creating the note. (readonly)
    string creatorRole = 1;
    // Notes can optionally be associated with a deal. (readonly, except on create)
    string dealId = 2;
    // Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#marketplaceNote".
    string kind = 3;
    // The actual note to attach. (readonly, except on create)
    string note = 4;
    // The unique id for the note. (readonly)
    string noteId = 5;
    // The proposalId that a note is attached to. (readonly)
    string proposalId = 6;
    // If the note is associated with a proposal revision number, then store that here. (readonly, except on create)
    string proposalRevisionNumber = 7;
    // The timestamp (ms since epoch) that this note was created. (readonly)
    string timestampMs = 8;
}

message PerformanceReport {
    // The number of bid responses with an ad.
    double bidRate = 1;
    // The number of bid requests sent to your bidder.
    double bidRequestRate = 2;
    // Rate of various prefiltering statuses per match. Please refer to the callout-status-codes.txt file for different statuses.
    message CalloutStatusRate {
    }
    repeated CalloutStatusRate calloutStatusRate = 3;
    // Average QPS for cookie matcher operations.
    message CookieMatcherStatusRate {
    }
    repeated CookieMatcherStatusRate cookieMatcherStatusRate = 4;
    // Rate of ads with a given status. Please refer to the creative-status-codes.txt file for different statuses.
    message CreativeStatusRate {
    }
    repeated CreativeStatusRate creativeStatusRate = 5;
    // The number of bid responses that were filtered due to a policy violation or other errors.
    double filteredBidRate = 6;
    // Average QPS for hosted match operations.
    message HostedMatchStatusRate {
    }
    repeated HostedMatchStatusRate hostedMatchStatusRate = 7;
    // The number of potential queries based on your pretargeting settings.
    double inventoryMatchRate = 8;
    // Resource type.
    string kind = 9;
    // The 50th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
    double latency50thPercentile = 10;
    // The 85th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
    double latency85thPercentile = 11;
    // The 95th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
    double latency95thPercentile = 12;
    // Rate of various quota account statuses per quota check.
    double noQuotaInRegion = 13;
    // Rate of various quota account statuses per quota check.
    double outOfQuota = 14;
    // Average QPS for pixel match requests from clients.
    double pixelMatchRequests = 15;
    // Average QPS for pixel match responses from clients.
    double pixelMatchResponses = 16;
    // The configured quota limits for this account.
    double quotaConfiguredLimit = 17;
    // The throttled quota limits for this account.
    double quotaThrottledLimit = 18;
    // The trading location of this data.
    string region = 19;
    // The number of properly formed bid responses received by our servers within the deadline.
    double successfulRequestRate = 20;
    // The unix timestamp of the starting time of this performance data.
    string timestamp = 21;
    // The number of bid responses that were unsuccessful due to timeouts, incorrect formatting, etc.
    double unsuccessfulRequestRate = 22;
}

message PerformanceReportList {
    // Resource type.
    string kind = 1;
    // A list of performance reports relevant for the account.
    repeated PerformanceReport performanceReport = 2;
}

message PretargetingConfig {
    // The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.
    string billingId = 1;
    // The config id; generated automatically. Leave this field blank for insert requests.
    string configId = 2;
    // The name of the config. Must be unique. Required for all requests.
    string configName = 3;
    // List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.
    repeated string creativeType = 4;
    // Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.
    message Dimension {
            // Height in pixels.
    string height = 1;
            // Width in pixels.
    string width = 2;
    }
    repeated Dimension dimensions = 5;
    // Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.
    repeated string excludedContentLabels = 6;
    // Requests containing any of these geo criteria ids will not match.
    repeated string excludedGeoCriteriaIds = 7;
    // Requests containing any of these placements will not match.
    message ExcludedPlacement {
            // The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement.
    string token = 1;
            // The type of the placement.
    string type = 2;
    }
    repeated ExcludedPlacement excludedPlacements = 8;
    // Requests containing any of these users list ids will not match.
    repeated string excludedUserLists = 9;
    // Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.
    repeated string excludedVerticals = 10;
    // Requests containing any of these geo criteria ids will match.
    repeated string geoCriteriaIds = 11;
    // Whether this config is active. Required for all requests.
    bool isActive = 12;
    // The kind of the resource, i.e. "adexchangebuyer#pretargetingConfig".
    string kind = 13;
    // Request containing any of these language codes will match.
    repeated string languages = 14;
    // Requests where the predicted viewability is below the specified decile will not match. E.g. if the buyer sets this value to 5, requests from slots where the predicted viewability is below 50% will not match. If the predicted viewability is unknown this field will be ignored.
    int32 minimumViewabilityDecile = 15;
    // Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.
    repeated string mobileCarriers = 16;
    // Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.
    repeated string mobileDevices = 17;
    // Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.
    repeated string mobileOperatingSystemVersions = 18;
    // Requests containing any of these placements will match.
    message Placement {
            // The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement.
    string token = 1;
            // The type of the placement.
    string type = 2;
    }
    repeated Placement placements = 19;
    // Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.
    repeated string platforms = 20;
    // Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.
    repeated string supportedCreativeAttributes = 21;
    // Requests containing the specified type of user data will match. Possible values are HOSTED_MATCH_DATA, which means the request is cookie-targetable and has a match in the buyer's hosted match table, and COOKIE_OR_IDFA, which means the request has either a targetable cookie or an iOS IDFA.
    repeated string userIdentifierDataRequired = 22;
    // Requests containing any of these user list ids will match.
    repeated string userLists = 23;
    // Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.
    repeated string vendorTypes = 24;
    // Requests containing any of these vertical ids will match.
    repeated string verticals = 25;
    // Video requests satisfying any of these player size constraints will match.
    message VideoPlayerSize {
            // The type of aspect ratio. Leave this field blank to match all aspect ratios.
    string aspectRatio = 1;
            // The minimum player height in pixels. Leave this field blank to match any player height.
    string minHeight = 2;
            // The minimum player width in pixels. Leave this field blank to match any player width.
    string minWidth = 3;
    }
    repeated VideoPlayerSize videoPlayerSizes = 26;
}

message PretargetingConfigList {
    // A list of pretargeting configs
    repeated PretargetingConfig items = 1;
    // Resource type.
    string kind = 2;
}

message Price {
    // The price value in micros.
    double amountMicros = 1;
    // The currency code for the price.
    string currencyCode = 2;
    // In case of CPD deals, the expected CPM in micros.
    double expectedCpmMicros = 3;
    // The pricing type for the deal/product.
    string pricingType = 4;
}

message PricePerBuyer {
    // Optional access type for this buyer.
    string auctionTier = 1;
    // Reference to the buyer that will get billed.
    Buyer billedBuyer = 2;
    // The buyer who will pay this price. If unset, all buyers can pay this price (if the advertisers match, and there's no more specific rule matching the buyer).
    Buyer buyer = 3;
    // The specified price
    Price price = 4;
}

message PrivateData {
    string referenceId = 1;
    string referencePayload = 2;
}

message Product {
    // The billed buyer corresponding to the buyer that created the offer. (readonly, except on create)
    Buyer billedBuyer = 1;
    // The buyer that created the offer if this is a buyer initiated offer (readonly, except on create)
    Buyer buyer = 2;
    // Creation time in ms. since epoch (readonly)
    string creationTimeMs = 3;
    // Optional contact information for the creator of this product. (buyer-readonly)
    repeated ContactInformation creatorContacts = 4;
    // The role that created the offer. Set to BUYER for buyer initiated offers.
    string creatorRole = 5;
    // The set of fields around delivery control that are interesting for a buyer to see but are non-negotiable. These are set by the publisher. This message is assigned an id of 100 since some day we would want to model this as a protobuf extension.
    DeliveryControl deliveryControl = 6;
    // The proposed end time for the deal (ms since epoch) (buyer-readonly)
    string flightEndTimeMs = 7;
    // Inventory availability dates. (times are in ms since epoch) The granularity is generally in the order of seconds. (buyer-readonly)
    string flightStartTimeMs = 8;
    // If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.
    bool hasCreatorSignedOff = 9;
    // What exchange will provide this inventory (readonly, except on create).
    string inventorySource = 10;
    // Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#product".
    string kind = 11;
    // Optional List of labels for the product (optional, buyer-readonly).
    repeated MarketplaceLabel labels = 12;
    // Time of last update in ms. since epoch (readonly)
    string lastUpdateTimeMs = 13;
    // Optional legacy offer id if this offer is a preferred deal offer.
    string legacyOfferId = 14;
    // Marketplace publisher profile Id. This Id differs from the regular publisher_profile_id in that 1. This is a new id, the old Id will be deprecated in 2017. 2. This id uniquely identifies a publisher profile by itself.
    string marketplacePublisherProfileId = 15;
    // The name for this product as set by the seller. (buyer-readonly)
    string name = 16;
    // Optional private auction id if this offer is a private auction offer.
    string privateAuctionId = 17;
    // The unique id for the product (readonly)
    string productId = 18;
    // Id of the publisher profile for a given seller. A (seller.account_id, publisher_profile_id) pair uniquely identifies a publisher profile. Buyers can call the PublisherProfiles::List endpoint to get a list of publisher profiles for a given seller.
    string publisherProfileId = 19;
    // Publisher self-provided forecast information.
    PublisherProvidedForecast publisherProvidedForecast = 20;
    // The revision number of the product. (readonly)
    string revisionNumber = 21;
    // Information about the seller that created this product (readonly, except on create)
    Seller seller = 22;
    // Targeting that is shared between the buyer and the seller. Each targeting criteria has a specified key and for each key there is a list of inclusion value or exclusion values. (buyer-readonly)
    repeated SharedTargeting sharedTargetings = 23;
    // The state of the product. (buyer-readonly)
    string state = 24;
    // The syndication product associated with the deal. (readonly, except on create)
    string syndicationProduct = 25;
    // The negotiable terms of the deal (buyer-readonly)
    DealTerms terms = 26;
    // The web property code for the seller. This field is meant to be copied over as is when creating deals.
    string webPropertyCode = 27;
}

message Proposal {
    // Reference to the buyer that will get billed for this proposal. (readonly)
    Buyer billedBuyer = 1;
    // Reference to the buyer on the proposal. (readonly, except on create)
    Buyer buyer = 2;
    // Optional contact information of the buyer. (seller-readonly)
    repeated ContactInformation buyerContacts = 3;
    // Private data for buyer. (hidden from seller).
    PrivateData buyerPrivateData = 4;
    // IDs of DBM advertisers permission to this proposal.
    repeated string dbmAdvertiserIds = 5;
    // When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)
    bool hasBuyerSignedOff = 6;
    // When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)
    bool hasSellerSignedOff = 7;
    // What exchange will provide this inventory (readonly, except on create).
    string inventorySource = 8;
    // True if the proposal is being renegotiated (readonly).
    bool isRenegotiating = 9;
    // True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action) Deprecated in favor of deal level setup complete flag.
    bool isSetupComplete = 10;
    // Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#proposal".
    string kind = 11;
    // List of labels associated with the proposal. (readonly)
    repeated MarketplaceLabel labels = 12;
    // The role of the last user that either updated the proposal or left a comment. (readonly)
    string lastUpdaterOrCommentorRole = 13;
    // The name for the proposal (updatable)
    string name = 14;
    // Optional negotiation id if this proposal is a preferred deal proposal.
    string negotiationId = 15;
    // Indicates whether the buyer/seller created the proposal.(readonly)
    string originatorRole = 16;
    // Optional private auction id if this proposal is a private auction proposal.
    string privateAuctionId = 17;
    // The unique id of the proposal. (readonly).
    string proposalId = 18;
    // The current state of the proposal. (readonly)
    string proposalState = 19;
    // The revision number for the proposal (readonly).
    string revisionNumber = 20;
    // The time (ms since epoch) when the proposal was last revised (readonly).
    string revisionTimeMs = 21;
    // Reference to the seller on the proposal. (readonly, except on create)
    Seller seller = 22;
    // Optional contact information of the seller (buyer-readonly).
    repeated ContactInformation sellerContacts = 23;
}

message PublisherProfileApiProto {
    // Deprecated: use the seller.account_id. The account id of the seller.
    string accountId = 1;
    // Publisher provided info on its audience.
    string audience = 2;
    // A pitch statement for the buyer
    string buyerPitchStatement = 3;
    // Direct contact for the publisher profile.
    string directContact = 4;
    // Exchange where this publisher profile is from. E.g. AdX, Rubicon etc...
    string exchange = 5;
    // Link to publisher's Google+ page.
    string googlePlusLink = 6;
    // True, if this is the parent profile, which represents all domains owned by the publisher.
    bool isParent = 7;
    // True, if this profile is published. Deprecated for state.
    bool isPublished = 8;
    // Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#publisherProfileApiProto".
    string kind = 9;
    // The url to the logo for the publisher.
    string logoUrl = 10;
    // The url for additional marketing and sales materials.
    string mediaKitLink = 11;
    string name = 12;
    // Publisher provided overview.
    string overview = 13;
    // The pair of (seller.account_id, profile_id) uniquely identifies a publisher profile for a given publisher.
    int32 profileId = 14;
    // Programmatic contact for the publisher profile.
    string programmaticContact = 15;
    // The list of domains represented in this publisher profile. Empty if this is a parent profile.
    repeated string publisherDomains = 16;
    // Unique Id for publisher profile.
    string publisherProfileId = 17;
    // Publisher provided forecasting information.
    PublisherProvidedForecast publisherProvidedForecast = 18;
    // Link to publisher rate card
    string rateCardInfoLink = 19;
    // Link for a sample content page.
    string samplePageLink = 20;
    // Seller of the publisher profile.
    Seller seller = 21;
    // State of the publisher profile.
    string state = 22;
    // Publisher provided key metrics and rankings.
    repeated string topHeadlines = 23;
}

message PublisherProvidedForecast {
    // Publisher provided dimensions. E.g. geo, sizes etc...
    repeated Dimension dimensions = 1;
    // Publisher provided weekly impressions.
    string weeklyImpressions = 2;
    // Publisher provided weekly uniques.
    string weeklyUniques = 3;
}

message Seller {
    // The unique id for the seller. The seller fills in this field. The seller account id is then available to buyer in the product.
    string accountId = 1;
    // Optional sub-account id for the seller.
    string subAccountId = 2;
}

message SharedTargeting {
    // The list of values to exclude from targeting. Each value is AND'd together.
    repeated TargetingValue exclusions = 1;
    // The list of value to include as part of the targeting. Each value is OR'd together.
    repeated TargetingValue inclusions = 2;
    // The key representing the shared targeting criterion.
    string key = 3;
}

message TargetingValue {
    // The creative size value to exclude/include.
    TargetingValueCreativeSize creativeSizeValue = 1;
    // The daypart targeting to include / exclude. Filled in when the key is GOOG_DAYPART_TARGETING.
    TargetingValueDayPartTargeting dayPartTargetingValue = 2;
    // The long value to exclude/include.
    string longValue = 3;
    // The string value to exclude/include.
    string stringValue = 4;
}

message TargetingValueCreativeSize {
    // For video size type, the list of companion sizes.
    repeated TargetingValueSize companionSizes = 1;
    // The Creative size type.
    string creativeSizeType = 2;
    // The native template for native ad.
    string nativeTemplate = 3;
    // For regular or video creative size type, specifies the size of the creative.
    TargetingValueSize size = 4;
    // The skippable ad type for video size.
    string skippableAdType = 5;
}

message TargetingValueDayPartTargeting {
    repeated TargetingValueDayPartTargetingDayPart dayParts = 1;
    string timeZoneType = 2;
}

message TargetingValueDayPartTargetingDayPart {
    string dayOfWeek = 1;
    int32 endHour = 2;
    int32 endMinute = 3;
    int32 startHour = 4;
    int32 startMinute = 5;
}

message TargetingValueSize {
    // The height of the creative.
    int32 height = 1;
    // The width of the creative.
    int32 width = 2;
}

message UpdatePrivateAuctionProposalRequest {
    // The externalDealId of the deal to be updated.
    string externalDealId = 1;
    // Optional note to be added.
    MarketplaceNote note = 2;
    // The current revision number of the proposal to be updated.
    string proposalRevisionNumber = 3;
    // The proposed action on the private auction proposal.
    string updateAction = 4;
}

enum Alt {
    JSON = 0;
}

service AdExchangeBuyerService {
    // Retrieves the authenticated user's list of accounts.
    rpc GetAccounts(GetAccountsRequest) returns (AccountsList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/accounts"
      };
    }
    // Gets one account by ID.
    rpc GetAccountsId(GetAccountsIdRequest) returns (Account) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/accounts/{id}"
      };
    }
    // Updates an existing account.
    rpc PutAccountsId(PutAccountsIdRequest) returns (Account) {
      option (google.api.http) = {
        put: "/adexchangebuyer/v1.4/accounts/{id}"
        body: "body"
      };
    }
    // Retrieves a list of billing information for all accounts of the authenticated user.
    rpc GetBillinginfo(GetBillinginfoRequest) returns (BillingInfoList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/billinginfo"
      };
    }
    // Returns the billing information for one account specified by account ID.
    rpc GetBillinginfoAccountId(GetBillinginfoAccountIdRequest) returns (BillingInfo) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/billinginfo/{accountId}"
      };
    }
    // Returns the budget information for the adgroup specified by the accountId and billingId.
    rpc GetBillinginfoAccountIdBillingId(GetBillinginfoAccountIdBillingIdRequest) returns (Budget) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/billinginfo/{accountId}/{billingId}"
      };
    }
    // Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request.
    rpc PutBillinginfoAccountIdBillingId(PutBillinginfoAccountIdBillingIdRequest) returns (Budget) {
      option (google.api.http) = {
        put: "/adexchangebuyer/v1.4/billinginfo/{accountId}/{billingId}"
        body: "body"
      };
    }
    // Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
    rpc GetCreatives(GetCreativesRequest) returns (CreativesList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/creatives"
      };
    }
    // Submit a new creative.
    rpc PostCreatives(PostCreativesRequest) returns (Creative) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/creatives"
        body: "body"
      };
    }
    // Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
    rpc GetCreativesAccountIdBuyerCreativeId(GetCreativesAccountIdBuyerCreativeIdRequest) returns (Creative) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/creatives/{accountId}/{buyerCreativeId}"
      };
    }
    // Add a deal id association for the creative.
    rpc PostCreativesAccountIdBuyerCreativeIdAddDealDealId(PostCreativesAccountIdBuyerCreativeIdAddDealDealIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/creatives/{accountId}/{buyerCreativeId}/addDeal/{dealId}"
      };
    }
    // Lists the external deal ids associated with the creative.
    rpc GetCreativesAccountIdBuyerCreativeIdListDeals(GetCreativesAccountIdBuyerCreativeIdListDealsRequest) returns (CreativeDealIds) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/creatives/{accountId}/{buyerCreativeId}/listDeals"
      };
    }
    // Remove a deal id associated with the creative.
    rpc PostCreativesAccountIdBuyerCreativeIdRemoveDealDealId(PostCreativesAccountIdBuyerCreativeIdRemoveDealDealIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/creatives/{accountId}/{buyerCreativeId}/removeDeal/{dealId}"
      };
    }
    // Retrieves the authenticated user's list of performance metrics.
    rpc GetPerformancereport(GetPerformancereportRequest) returns (PerformanceReportList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/performancereport"
      };
    }
    // Retrieves a list of the authenticated user's pretargeting configurations.
    rpc GetPretargetingconfigsAccountId(GetPretargetingconfigsAccountIdRequest) returns (PretargetingConfigList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}"
      };
    }
    // Inserts a new pretargeting configuration.
    rpc PostPretargetingconfigsAccountId(PostPretargetingconfigsAccountIdRequest) returns (PretargetingConfig) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}"
        body: "body"
      };
    }
    // Gets a specific pretargeting configuration
    rpc GetPretargetingconfigsAccountIdConfigId(GetPretargetingconfigsAccountIdConfigIdRequest) returns (PretargetingConfig) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}/{configId}"
      };
    }
    // Updates an existing pretargeting config.
    rpc PutPretargetingconfigsAccountIdConfigId(PutPretargetingconfigsAccountIdConfigIdRequest) returns (PretargetingConfig) {
      option (google.api.http) = {
        put: "/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}/{configId}"
        body: "body"
      };
    }
    // Deletes an existing pretargeting config.
    rpc DeletePretargetingconfigsAccountIdConfigId(DeletePretargetingconfigsAccountIdConfigIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}/{configId}"
      };
    }
    // Update a given private auction proposal
    rpc PostPrivateauctionPrivateAuctionIdUpdateproposal(PostPrivateauctionPrivateAuctionIdUpdateproposalRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/privateauction/{privateAuctionId}/updateproposal"
        body: "body"
      };
    }
    // Gets the requested product.
    rpc GetProductsSearch(GetProductsSearchRequest) returns (GetOffersResponse) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/products/search"
      };
    }
    // Gets the requested product by id.
    rpc GetProductsProductId(GetProductsProductIdRequest) returns (Product) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/products/{productId}"
      };
    }
    // Create the given list of proposals
    rpc PostProposalsInsert(PostProposalsInsertRequest) returns (CreateOrdersResponse) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/proposals/insert"
        body: "body"
      };
    }
    // Search for proposals using pql query
    rpc GetProposalsSearch(GetProposalsSearchRequest) returns (GetOrdersResponse) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/proposals/search"
      };
    }
    // Get a proposal given its id
    rpc GetProposalsProposalId(GetProposalsProposalIdRequest) returns (Proposal) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/proposals/{proposalId}"
      };
    }
    // List all the deals for a given proposal
    rpc GetProposalsProposalIdDeals(GetProposalsProposalIdDealsRequest) returns (GetOrderDealsResponse) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/proposals/{proposalId}/deals"
      };
    }
    // Delete the specified deals from the proposal
    rpc PostProposalsProposalIdDealsDelete(PostProposalsProposalIdDealsDeleteRequest) returns (DeleteOrderDealsResponse) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/proposals/{proposalId}/deals/delete"
        body: "body"
      };
    }
    // Add new deals for the specified proposal
    rpc PostProposalsProposalIdDealsInsert(PostProposalsProposalIdDealsInsertRequest) returns (AddOrderDealsResponse) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/proposals/{proposalId}/deals/insert"
        body: "body"
      };
    }
    // Replaces all the deals in the proposal with the passed in deals
    rpc PostProposalsProposalIdDealsUpdate(PostProposalsProposalIdDealsUpdateRequest) returns (EditAllOrderDealsResponse) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/proposals/{proposalId}/deals/update"
        body: "body"
      };
    }
    // Get all the notes associated with a proposal
    rpc GetProposalsProposalIdNotes(GetProposalsProposalIdNotesRequest) returns (GetOrderNotesResponse) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/proposals/{proposalId}/notes"
      };
    }
    // Add notes to the proposal
    rpc PostProposalsProposalIdNotesInsert(PostProposalsProposalIdNotesInsertRequest) returns (AddOrderNotesResponse) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/proposals/{proposalId}/notes/insert"
        body: "body"
      };
    }
    // Update the given proposal to indicate that setup has been completed.
    rpc PostProposalsProposalIdSetupcomplete(PostProposalsProposalIdSetupcompleteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.4/proposals/{proposalId}/setupcomplete"
      };
    }
    // Update the given proposal
    rpc PutProposalsProposalIdRevisionNumberUpdateAction(PutProposalsProposalIdRevisionNumberUpdateActionRequest) returns (Proposal) {
      option (google.api.http) = {
        put: "/adexchangebuyer/v1.4/proposals/{proposalId}/{revisionNumber}/{updateAction}"
        body: "body"
      };
    }
    // Gets the requested publisher profile(s) by publisher accountId.
    rpc GetPublisherAccountIdProfiles(GetPublisherAccountIdProfilesRequest) returns (GetPublisherProfilesByAccountIdResponse) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.4/publisher/{accountId}/profiles"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package adexchangebuyer;

message GetAccountsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetAccountsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The account id
    int32 id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutAccountsIdRequest {
    alt alt = 1;
    Account body = 2;
    string fields = 3;
    // The account id
    int32 id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetBillinginfoRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetBillinginfoAccountIdRequest {
    // The account id.
    int32 accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetBillinginfoAccountIdBillingIdRequest {
    // The account id to get the budget information for.
    string accountId = 1;
    alt alt = 2;
    // The billing id to get the budget information for.
    string billingId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutBillinginfoAccountIdBillingIdRequest {
    // The account id associated with the budget being updated.
    string accountId = 1;
    alt alt = 2;
    // The billing id associated with the budget being updated.
    string billingId = 3;
    Budget body = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetCreativesRequest {
    // When specified, only creatives for the given account ids are returned.
    repeated int32 accountId = 1;
    alt alt = 2;
    // When specified, only creatives for the given buyer creative ids are returned.
    repeated string buyerCreativeId = 3;
    string fields = 4;
    string key = 5;
    // Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
    int32 maxResults = 6;
    string oauth_token = 7;
    // A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // When specified, only creatives having the given status are returned.
    enum GetCreativesRequest_StatusFilter {
        GETCREATIVESREQUEST_STATUSFILTER_APPROVED = 0;
        GETCREATIVESREQUEST_STATUSFILTER_DISAPPROVED = 1;
        GETCREATIVESREQUEST_STATUSFILTER_NOT_CHECKED = 2;
    }
    GetCreativesRequest_StatusFilter statusFilter = 11;
    string userIp = 12;
}

message PostCreativesRequest {
    alt alt = 1;
    Creative body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetCreativesAccountIdBuyerCreativeIdRequest {
    // The id for the account that will serve this creative.
    int32 accountId = 1;
    alt alt = 2;
    // The buyer-specific id for this creative.
    string buyerCreativeId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetDirectdealsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetDirectdealsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The direct deal id
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetPerformancereportRequest {
    // The account id to get the reports.
    string accountId = 1;
    alt alt = 2;
    // The end time of the report in ISO 8601 timestamp format using UTC.
    string endDateTime = 3;
    string fields = 4;
    string key = 5;
    // Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
    int32 maxResults = 6;
    string oauth_token = 7;
    // A continuation token, used to page through performance reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // The start time of the report in ISO 8601 timestamp format using UTC.
    string startDateTime = 11;
    string userIp = 12;
}

message GetPretargetingconfigsAccountIdRequest {
    // The account id to get the pretargeting configs for.
    string accountId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostPretargetingconfigsAccountIdRequest {
    // The account id to insert the pretargeting config for.
    string accountId = 1;
    alt alt = 2;
    PretargetingConfig body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetPretargetingconfigsAccountIdConfigIdRequest {
    // The account id to get the pretargeting config for.
    string accountId = 1;
    alt alt = 2;
    // The specific id of the configuration to retrieve.
    string configId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutPretargetingconfigsAccountIdConfigIdRequest {
    // The account id to update the pretargeting config for.
    string accountId = 1;
    alt alt = 2;
    PretargetingConfig body = 3;
    // The specific id of the configuration to update.
    string configId = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeletePretargetingconfigsAccountIdConfigIdRequest {
    // The account id to delete the pretargeting config for.
    string accountId = 1;
    alt alt = 2;
    // The specific id of the configuration to delete.
    string configId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message Account {
    // Your bidder locations that have distinct URLs.
    message BidderLocation {
            // The maximum queries per second the Ad Exchange will send.
    int32 maximumQps = 1;
            // The geographical region the Ad Exchange should send requests from. Only used by some quota systems, but always setting the value is recommended. Allowed values:  
    // - ASIA 
    // - EUROPE 
    // - US_EAST 
    // - US_WEST
    string region = 2;
            // The URL to which the Ad Exchange will send bid requests.
    string url = 3;
    }
    repeated BidderLocation bidderLocation = 1;
    // The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
    string cookieMatchingNid = 2;
    // The base URL used in cookie match requests.
    string cookieMatchingUrl = 3;
    // Account id.
    int32 id = 4;
    // Resource type.
    string kind = 5;
    // The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
    int32 maximumActiveCreatives = 6;
    // The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
    int32 maximumTotalQps = 7;
    // The number of creatives that this account inserted or bid with in the last 30 days.
    int32 numberActiveCreatives = 8;
}

message AccountsList {
    // A list of accounts.
    repeated Account items = 1;
    // Resource type.
    string kind = 2;
}

message BillingInfo {
    // Account id.
    int32 accountId = 1;
    // Account name.
    string accountName = 2;
    // A list of adgroup IDs associated with this particular account. These IDs may show up as part of a realtime bidding BidRequest, which indicates a bid request for this account.
    repeated string billingId = 3;
    // Resource type.
    string kind = 4;
}

message BillingInfoList {
    // A list of billing info relevant for your account.
    repeated BillingInfo items = 1;
    // Resource type.
    string kind = 2;
}

message Budget {
    // The id of the account. This is required for get and update requests.
    string accountId = 1;
    // The billing id to determine which adgroup to provide budget information for. This is required for get and update requests.
    string billingId = 2;
    // The daily budget amount in unit amount of the account currency to apply for the billingId provided. This is required for update requests.
    string budgetAmount = 3;
    // The currency code for the buyer. This cannot be altered here.
    string currencyCode = 4;
    // The unique id that describes this item.
    string id = 5;
    // The kind of the resource, i.e. "adexchangebuyer#budget".
    string kind = 6;
}

message Creative {
    // The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
    string HTMLSnippet = 1;
    // Account id.
    int32 accountId = 2;
    // Detected advertiser id, if any. Read-only. This field should not be set in requests.
    repeated string advertiserId = 3;
    // The name of the company being advertised in the creative.
    string advertiserName = 4;
    // The agency id for this creative.
    string agencyId = 5;
    // The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
    string apiUploadTimestamp = 6;
    // All attributes for the ads that may be shown from this snippet.
    repeated int32 attribute = 7;
    // A buyer-specific id identifying the creative in this ad.
    string buyerCreativeId = 8;
    // The set of destination urls for the snippet.
    repeated string clickThroughUrl = 9;
    // Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
    message Correction {
            // Additional details about the correction.
    repeated string details = 1;
            // The type of correction that was applied to the creative.
    string reason = 2;
    }
    repeated Correction corrections = 10;
    // The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
    message DisapprovalReason {
            // Additional details about the reason for disapproval.
    repeated string details = 1;
            // The categorized reason for disapproval.
    string reason = 2;
    }
    repeated DisapprovalReason disapprovalReasons = 11;
    // The filtering reasons for the creative. Read-only. This field should not be set in requests.
    message FilteringReasons {
            // The date in ISO 8601 format for the data. The data is collected from 00:00:00 to 23:59:59 in PST.
    string date = 1;
            // The filtering reasons.
    message Reason {
                    // The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.
    string filteringCount = 1;
                    // The filtering status code. Please refer to the creative-status-codes.txt file for different statuses.
    int32 filteringStatus = 2;
        }
        repeated Reason reasons = 2;
    }
    FilteringReasons filteringReasons = 12;
    // Ad height.
    int32 height = 13;
    // The set of urls to be called to record an impression.
    repeated string impressionTrackingUrl = 14;
    // Resource type.
    string kind = 15;
    // If nativeAd is set, HTMLSnippet and videoURL should not be set.
    message NativeAd {
        string advertiser = 1;
            // The app icon, for app download ads.
    message AppIcon {
            int32 height = 1;
            string url = 2;
            int32 width = 3;
        }
        AppIcon appIcon = 2;
            // A long description of the ad.
    string body = 3;
            // A label for the button that the user is supposed to click.
    string callToAction = 4;
            // The URL to use for click tracking.
    string clickTrackingUrl = 5;
            // A short title for the ad.
    string headline = 6;
            // A large image.
    message Image {
            int32 height = 1;
            string url = 2;
            int32 width = 3;
        }
        Image image = 7;
            // The URLs are called when the impression is rendered.
    repeated string impressionTrackingUrl = 8;
            // A smaller image, for the advertiser logo.
    message Logo {
            int32 height = 1;
            string url = 2;
            int32 width = 3;
        }
        Logo logo = 9;
            // The price of the promoted app including the currency info.
    string price = 10;
            // The app rating in the app store. Must be in the range [0-5].
    double starRating = 11;
            // The URL to the app store to purchase/download the promoted app.
    string store = 12;
    }
    NativeAd nativeAd = 16;
    // Detected product categories, if any. Read-only. This field should not be set in requests.
    repeated int32 productCategories = 17;
    // All restricted categories for the ads that may be shown from this snippet.
    repeated int32 restrictedCategories = 18;
    // Detected sensitive categories, if any. Read-only. This field should not be set in requests.
    repeated int32 sensitiveCategories = 19;
    // Creative serving status. Read-only. This field should not be set in requests.
    string status = 20;
    // All vendor types for the ads that may be shown from this snippet.
    repeated int32 vendorType = 21;
    // The version for this creative. Read-only. This field should not be set in requests.
    int32 version = 22;
    // The URL to fetch a video ad. If set, HTMLSnippet and the nativeAd should not be set.
    string videoURL = 23;
    // Ad width.
    int32 width = 24;
}

message CreativesList {
    // A list of creatives.
    repeated Creative items = 1;
    // Resource type.
    string kind = 2;
    // Continuation token used to page through creatives. To retrieve the next page of results, set the next request's "pageToken" value to this.
    string nextPageToken = 3;
}

message DirectDeal {
    // The account id of the buyer this deal is for.
    int32 accountId = 1;
    // The name of the advertiser this deal is for.
    string advertiser = 2;
    // Whether the publisher for this deal is eligible for alcohol ads.
    bool allowsAlcohol = 3;
    // The account id that this deal was negotiated for. It is either the buyer or the client that this deal was negotiated on behalf of.
    string buyerAccountId = 4;
    // The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.
    string currencyCode = 5;
    // The deal type such as programmatic reservation or fixed price and so on.
    string dealTier = 6;
    // End time for when this deal stops being active. If not set then this deal is valid until manually disabled by the publisher. In seconds since the epoch.
    string endTime = 7;
    // The fixed price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).
    string fixedCpm = 8;
    // Deal id.
    string id = 9;
    // Resource type.
    string kind = 10;
    // Deal name.
    string name = 11;
    // The minimum price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the private exchange tier of buying (below fixed price priority, run as a second price auction).
    string privateExchangeMinCpm = 12;
    // If true, the publisher has opted to have their blocks ignored when a creative is bid with for this deal.
    bool publisherBlocksOverriden = 13;
    // The name of the publisher offering this direct deal.
    string sellerNetwork = 14;
    // Start time for when this deal becomes active. If not set then this deal is active immediately upon creation. In seconds since the epoch.
    string startTime = 15;
}

message DirectDealsList {
    // A list of direct deals relevant for your account.
    repeated DirectDeal directDeals = 1;
    // Resource type.
    string kind = 2;
}

message PerformanceReport {
    // The number of bid responses with an ad.
    double bidRate = 1;
    // The number of bid requests sent to your bidder.
    double bidRequestRate = 2;
    // Rate of various prefiltering statuses per match. Please refer to the callout-status-codes.txt file for different statuses.
    message CalloutStatusRate {
    }
    repeated CalloutStatusRate calloutStatusRate = 3;
    // Average QPS for cookie matcher operations.
    message CookieMatcherStatusRate {
    }
    repeated CookieMatcherStatusRate cookieMatcherStatusRate = 4;
    // Rate of ads with a given status. Please refer to the creative-status-codes.txt file for different statuses.
    message CreativeStatusRate {
    }
    repeated CreativeStatusRate creativeStatusRate = 5;
    // The number of bid responses that were filtered due to a policy violation or other errors.
    double filteredBidRate = 6;
    // Average QPS for hosted match operations.
    message HostedMatchStatusRate {
    }
    repeated HostedMatchStatusRate hostedMatchStatusRate = 7;
    // The number of potential queries based on your pretargeting settings.
    double inventoryMatchRate = 8;
    // Resource type.
    string kind = 9;
    // The 50th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
    double latency50thPercentile = 10;
    // The 85th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
    double latency85thPercentile = 11;
    // The 95th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
    double latency95thPercentile = 12;
    // Rate of various quota account statuses per quota check.
    double noQuotaInRegion = 13;
    // Rate of various quota account statuses per quota check.
    double outOfQuota = 14;
    // Average QPS for pixel match requests from clients.
    double pixelMatchRequests = 15;
    // Average QPS for pixel match responses from clients.
    double pixelMatchResponses = 16;
    // The configured quota limits for this account.
    double quotaConfiguredLimit = 17;
    // The throttled quota limits for this account.
    double quotaThrottledLimit = 18;
    // The trading location of this data.
    string region = 19;
    // The number of properly formed bid responses received by our servers within the deadline.
    double successfulRequestRate = 20;
    // The unix timestamp of the starting time of this performance data.
    string timestamp = 21;
    // The number of bid responses that were unsuccessful due to timeouts, incorrect formatting, etc.
    double unsuccessfulRequestRate = 22;
}

message PerformanceReportList {
    // Resource type.
    string kind = 1;
    // A list of performance reports relevant for the account.
    repeated PerformanceReport performanceReport = 2;
}

message PretargetingConfig {
    // The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.
    string billingId = 1;
    // The config id; generated automatically. Leave this field blank for insert requests.
    string configId = 2;
    // The name of the config. Must be unique. Required for all requests.
    string configName = 3;
    // List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.
    repeated string creativeType = 4;
    // Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.
    message Dimension {
            // Height in pixels.
    string height = 1;
            // Width in pixels.
    string width = 2;
    }
    repeated Dimension dimensions = 5;
    // Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.
    repeated string excludedContentLabels = 6;
    // Requests containing any of these geo criteria ids will not match.
    repeated string excludedGeoCriteriaIds = 7;
    // Requests containing any of these placements will not match.
    message ExcludedPlacement {
            // The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement.
    string token = 1;
            // The type of the placement.
    string type = 2;
    }
    repeated ExcludedPlacement excludedPlacements = 8;
    // Requests containing any of these users list ids will not match.
    repeated string excludedUserLists = 9;
    // Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.
    repeated string excludedVerticals = 10;
    // Requests containing any of these geo criteria ids will match.
    repeated string geoCriteriaIds = 11;
    // Whether this config is active. Required for all requests.
    bool isActive = 12;
    // The kind of the resource, i.e. "adexchangebuyer#pretargetingConfig".
    string kind = 13;
    // Request containing any of these language codes will match.
    repeated string languages = 14;
    // Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.
    repeated string mobileCarriers = 15;
    // Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.
    repeated string mobileDevices = 16;
    // Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.
    repeated string mobileOperatingSystemVersions = 17;
    // Requests containing any of these placements will match.
    message Placement {
            // The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement.
    string token = 1;
            // The type of the placement.
    string type = 2;
    }
    repeated Placement placements = 18;
    // Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.
    repeated string platforms = 19;
    // Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.
    repeated string supportedCreativeAttributes = 20;
    // Requests containing any of these user list ids will match.
    repeated string userLists = 21;
    // Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.
    repeated string vendorTypes = 22;
    // Requests containing any of these vertical ids will match.
    repeated string verticals = 23;
}

message PretargetingConfigList {
    // A list of pretargeting configs
    repeated PretargetingConfig items = 1;
    // Resource type.
    string kind = 2;
}

enum Alt {
    JSON = 0;
}

service AdExchangeBuyerService {
    // Retrieves the authenticated user's list of accounts.
    rpc GetAccounts(GetAccountsRequest) returns (AccountsList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/accounts"
      };
    }
    // Gets one account by ID.
    rpc GetAccountsId(GetAccountsIdRequest) returns (Account) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/accounts/{id}"
      };
    }
    // Updates an existing account.
    rpc PutAccountsId(PutAccountsIdRequest) returns (Account) {
      option (google.api.http) = {
        put: "/adexchangebuyer/v1.3/accounts/{id}"
        body: "body"
      };
    }
    // Retrieves a list of billing information for all accounts of the authenticated user.
    rpc GetBillinginfo(GetBillinginfoRequest) returns (BillingInfoList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/billinginfo"
      };
    }
    // Returns the billing information for one account specified by account ID.
    rpc GetBillinginfoAccountId(GetBillinginfoAccountIdRequest) returns (BillingInfo) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/billinginfo/{accountId}"
      };
    }
    // Returns the budget information for the adgroup specified by the accountId and billingId.
    rpc GetBillinginfoAccountIdBillingId(GetBillinginfoAccountIdBillingIdRequest) returns (Budget) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/billinginfo/{accountId}/{billingId}"
      };
    }
    // Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request.
    rpc PutBillinginfoAccountIdBillingId(PutBillinginfoAccountIdBillingIdRequest) returns (Budget) {
      option (google.api.http) = {
        put: "/adexchangebuyer/v1.3/billinginfo/{accountId}/{billingId}"
        body: "body"
      };
    }
    // Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
    rpc GetCreatives(GetCreativesRequest) returns (CreativesList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/creatives"
      };
    }
    // Submit a new creative.
    rpc PostCreatives(PostCreativesRequest) returns (Creative) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.3/creatives"
        body: "body"
      };
    }
    // Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
    rpc GetCreativesAccountIdBuyerCreativeId(GetCreativesAccountIdBuyerCreativeIdRequest) returns (Creative) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/creatives/{accountId}/{buyerCreativeId}"
      };
    }
    // Retrieves the authenticated user's list of direct deals.
    rpc GetDirectdeals(GetDirectdealsRequest) returns (DirectDealsList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/directdeals"
      };
    }
    // Gets one direct deal by ID.
    rpc GetDirectdealsId(GetDirectdealsIdRequest) returns (DirectDeal) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/directdeals/{id}"
      };
    }
    // Retrieves the authenticated user's list of performance metrics.
    rpc GetPerformancereport(GetPerformancereportRequest) returns (PerformanceReportList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/performancereport"
      };
    }
    // Retrieves a list of the authenticated user's pretargeting configurations.
    rpc GetPretargetingconfigsAccountId(GetPretargetingconfigsAccountIdRequest) returns (PretargetingConfigList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}"
      };
    }
    // Inserts a new pretargeting configuration.
    rpc PostPretargetingconfigsAccountId(PostPretargetingconfigsAccountIdRequest) returns (PretargetingConfig) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}"
        body: "body"
      };
    }
    // Gets a specific pretargeting configuration
    rpc GetPretargetingconfigsAccountIdConfigId(GetPretargetingconfigsAccountIdConfigIdRequest) returns (PretargetingConfig) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}/{configId}"
      };
    }
    // Updates an existing pretargeting config.
    rpc PutPretargetingconfigsAccountIdConfigId(PutPretargetingconfigsAccountIdConfigIdRequest) returns (PretargetingConfig) {
      option (google.api.http) = {
        put: "/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}/{configId}"
        body: "body"
      };
    }
    // Deletes an existing pretargeting config.
    rpc DeletePretargetingconfigsAccountIdConfigId(DeletePretargetingconfigsAccountIdConfigIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}/{configId}"
      };
    }
}

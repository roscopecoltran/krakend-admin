syntax = "proto3";

import "google/api/annotations.proto";

package adexchangebuyer;

message GetAccountsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetAccountsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The account id
    int32 id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutAccountsIdRequest {
    alt alt = 1;
    Account body = 2;
    string fields = 3;
    // The account id
    int32 id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCreativesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
    int32 maxResults = 4;
    string oauth_token = 5;
    // A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.
    string pageToken = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // When specified, only creatives having the given status are returned.
    enum GetCreativesRequest_StatusFilter {
        GETCREATIVESREQUEST_STATUSFILTER_APPROVED = 0;
        GETCREATIVESREQUEST_STATUSFILTER_DISAPPROVED = 1;
        GETCREATIVESREQUEST_STATUSFILTER_NOT_CHECKED = 2;
    }
    GetCreativesRequest_StatusFilter statusFilter = 9;
    string userIp = 10;
}

message PostCreativesRequest {
    alt alt = 1;
    Creative body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetCreativesAccountIdBuyerCreativeIdRequest {
    // The id for the account that will serve this creative.
    int32 accountId = 1;
    alt alt = 2;
    // The buyer-specific id for this creative.
    string buyerCreativeId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message Account {
    // Your bidder locations that have distinct URLs.
    message BidderLocation {
            // The maximum queries per second the Ad Exchange will send.
    int32 maximumQps = 1;
            // The geographical region the Ad Exchange should send requests from. Only used by some quota systems, but always setting the value is recommended. Allowed values:  
    // - ASIA 
    // - EUROPE 
    // - US_EAST 
    // - US_WEST
    string region = 2;
            // The URL to which the Ad Exchange will send bid requests.
    string url = 3;
    }
    repeated BidderLocation bidderLocation = 1;
    // The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
    string cookieMatchingNid = 2;
    // The base URL used in cookie match requests.
    string cookieMatchingUrl = 3;
    // Account id.
    int32 id = 4;
    // Resource type.
    string kind = 5;
    // The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
    int32 maximumActiveCreatives = 6;
    // The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
    int32 maximumTotalQps = 7;
    // The number of creatives that this account inserted or bid with in the last 30 days.
    int32 numberActiveCreatives = 8;
}

message AccountsList {
    // A list of accounts.
    repeated Account items = 1;
    // Resource type.
    string kind = 2;
}

message Creative {
    // The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
    string HTMLSnippet = 1;
    // Account id.
    int32 accountId = 2;
    // Detected advertiser id, if any. Read-only. This field should not be set in requests.
    repeated string advertiserId = 3;
    // The name of the company being advertised in the creative.
    string advertiserName = 4;
    // The agency id for this creative.
    string agencyId = 5;
    // The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
    string apiUploadTimestamp = 6;
    // All attributes for the ads that may be shown from this snippet.
    repeated int32 attribute = 7;
    // A buyer-specific id identifying the creative in this ad.
    string buyerCreativeId = 8;
    // The set of destination urls for the snippet.
    repeated string clickThroughUrl = 9;
    // Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
    message Correction {
            // Additional details about the correction.
    repeated string details = 1;
            // The type of correction that was applied to the creative.
    string reason = 2;
    }
    repeated Correction corrections = 10;
    // The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
    message DisapprovalReason {
            // Additional details about the reason for disapproval.
    repeated string details = 1;
            // The categorized reason for disapproval.
    string reason = 2;
    }
    repeated DisapprovalReason disapprovalReasons = 11;
    // The filtering reasons for the creative. Read-only. This field should not be set in requests.
    message FilteringReasons {
            // The date in ISO 8601 format for the data. The data is collected from 00:00:00 to 23:59:59 in PST.
    string date = 1;
            // The filtering reasons.
    message Reason {
                    // The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.
    string filteringCount = 1;
                    // The filtering status code. Please refer to the creative-status-codes.txt file for different statuses.
    int32 filteringStatus = 2;
        }
        repeated Reason reasons = 2;
    }
    FilteringReasons filteringReasons = 12;
    // Ad height.
    int32 height = 13;
    // The set of urls to be called to record an impression.
    repeated string impressionTrackingUrl = 14;
    // Resource type.
    string kind = 15;
    // Detected product categories, if any. Read-only. This field should not be set in requests.
    repeated int32 productCategories = 16;
    // All restricted categories for the ads that may be shown from this snippet.
    repeated int32 restrictedCategories = 17;
    // Detected sensitive categories, if any. Read-only. This field should not be set in requests.
    repeated int32 sensitiveCategories = 18;
    // Creative serving status. Read-only. This field should not be set in requests.
    string status = 19;
    // All vendor types for the ads that may be shown from this snippet.
    repeated int32 vendorType = 20;
    // The version for this creative. Read-only. This field should not be set in requests.
    int32 version = 21;
    // The url to fetch a video ad. If set, HTMLSnippet should not be set.
    string videoURL = 22;
    // Ad width.
    int32 width = 23;
}

message CreativesList {
    // A list of creatives.
    repeated Creative items = 1;
    // Resource type.
    string kind = 2;
    // Continuation token used to page through creatives. To retrieve the next page of results, set the next request's "pageToken" value to this.
    string nextPageToken = 3;
}

enum Alt {
    JSON = 0;
}

service AdExchangeBuyerService {
    // Retrieves the authenticated user's list of accounts.
    rpc GetAccounts(GetAccountsRequest) returns (AccountsList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.2/accounts"
      };
    }
    // Gets one account by ID.
    rpc GetAccountsId(GetAccountsIdRequest) returns (Account) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.2/accounts/{id}"
      };
    }
    // Updates an existing account.
    rpc PutAccountsId(PutAccountsIdRequest) returns (Account) {
      option (google.api.http) = {
        put: "/adexchangebuyer/v1.2/accounts/{id}"
        body: "body"
      };
    }
    // Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
    rpc GetCreatives(GetCreativesRequest) returns (CreativesList) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.2/creatives"
      };
    }
    // Submit a new creative.
    rpc PostCreatives(PostCreativesRequest) returns (Creative) {
      option (google.api.http) = {
        post: "/adexchangebuyer/v1.2/creatives"
        body: "body"
      };
    }
    // Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
    rpc GetCreativesAccountIdBuyerCreativeId(GetCreativesAccountIdBuyerCreativeIdRequest) returns (Creative) {
      option (google.api.http) = {
        get: "/adexchangebuyer/v1.2/creatives/{accountId}/{buyerCreativeId}"
      };
    }
}

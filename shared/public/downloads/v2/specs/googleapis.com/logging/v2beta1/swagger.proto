syntax = "proto3";

import "google/api/annotations.proto";

package stackdriverlogging;

message PostV2beta1Entries:ListRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ListLogEntriesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV2beta1Entries:WriteRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    WriteLogEntriesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2beta1MonitoredResourceDescriptorsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
    int32 pageSize = 9;
    // Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV2beta1LogNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // Required. The resource name of the log to delete:
    // "projects/[PROJECT_ID]/logs/[LOG_ID]"
    // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
    // "folders/[FOLDER_ID]/logs/[LOG_ID]"
    // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog", "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more information about log names, see LogEntry.
    string logName = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2beta1MetricNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The resource name of the desired metric:
    // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
    string metricName = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV2beta1MetricNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    LogMetric body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The resource name of the metric to update:
    // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
    // The updated metric must be provided in the request and it's name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
    string metricName = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV2beta1MetricNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The resource name of the metric to delete:
    // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
    string metricName = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2beta1ParentLogsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
    int32 pageSize = 9;
    // Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
    string pageToken = 10;
    // Required. The resource name that owns the logs:
    // "projects/[PROJECT_ID]"
    // "organizations/[ORGANIZATION_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]"
    // "folders/[FOLDER_ID]"
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1ParentMetricsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
    int32 pageSize = 9;
    // Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
    string pageToken = 10;
    // Required. The name of the project containing the metrics:
    // "projects/[PROJECT_ID]"
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV2beta1ParentMetricsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    LogMetric body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // The resource name of the project in which to create the metric:
    // "projects/[PROJECT_ID]"
    // The new metric must be provided in the request.
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV2beta1ParentSinksRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
    int32 pageSize = 9;
    // Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
    string pageToken = 10;
    // Required. The parent resource whose sinks are to be listed:
    // "projects/[PROJECT_ID]"
    // "organizations/[ORGANIZATION_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]"
    // "folders/[FOLDER_ID]"
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV2beta1ParentSinksRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    LogSink body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Required. The resource in which to create the sink:
    // "projects/[PROJECT_ID]"
    // "organizations/[ORGANIZATION_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]"
    // "folders/[FOLDER_ID]"
    // Examples: "projects/my-logging-project", "organizations/123456789".
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink's parent is a project, then the value returned as writer_identity is the same group or service account used by Stackdriver Logging before the addition of writer identities to this API. The sink's destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
    bool uniqueWriterIdentity = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1SinkNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Required. The resource name of the sink:
    // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
    // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
    // "folders/[FOLDER_ID]/sinks/[SINK_ID]"
    // Example: "projects/my-project-id/sinks/my-sink-id".
    string sinkName = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV2beta1SinkNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    LogSink body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Required. The full resource name of the sink to update, including the parent resource and the sink identifier:
    // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
    // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
    // "folders/[FOLDER_ID]/sinks/[SINK_ID]"
    // Example: "projects/my-project-id/sinks/my-sink-id".
    string sinkName = 13;
    // Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field:
    // If the old and new values of this field are both false or both true, then there is no change to the sink's writer_identity.
    // If the old value is false and the new value is true, then writer_identity is changed to a unique service account.
    // It is an error if the old value is true and the new value is set to false or defaulted to false.
    bool uniqueWriterIdentity = 14;
    // Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmaskExample: updateMask=filter.
    string updateMask = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message DeleteV2beta1SinkNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Required. The full resource name of the sink to delete, including the parent resource and the sink identifier:
    // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
    // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
    // "folders/[FOLDER_ID]/sinks/[SINK_ID]"
    // Example: "projects/my-project-id/sinks/my-sink-id".
    string sinkName = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message BucketOptions {
    // The explicit buckets.
    Explicit explicitBuckets = 1;
    // The exponential buckets.
    Exponential exponentialBuckets = 2;
    // The linear bucket.
    Linear linearBuckets = 3;
}

message Empty {
}

message Explicit {
    // The values must be monotonically increasing.
    repeated double bounds = 1;
}

message Exponential {
    // Must be greater than 1.
    double growthFactor = 1;
    // Must be greater than 0.
    int32 numFiniteBuckets = 2;
    // Must be greater than 0.
    double scale = 3;
}

message HttpRequest {
    // The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.
    string cacheFillBytes = 1;
    // Whether or not an entity was served from cache (with or without validation).
    bool cacheHit = 2;
    // Whether or not a cache lookup was attempted.
    bool cacheLookup = 3;
    // Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if cache_hit is True.
    bool cacheValidatedWithOriginServer = 4;
    // The request processing latency on the server, from the time the request was received until the response was sent.
    string latency = 5;
    // Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
    string protocol = 6;
    // The referer URL of the request, as defined in HTTP/1.1 Header Field Definitions (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
    string referer = 7;
    // The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: "192.168.1.1", "FE80::0202:B3FF:FE1E:8329".
    string remoteIp = 8;
    // The request method. Examples: "GET", "HEAD", "PUT", "POST".
    string requestMethod = 9;
    // The size of the HTTP request message in bytes, including the request headers and the request body.
    string requestSize = 10;
    // The scheme (http, https), the host name, the path and the query portion of the URL that was requested. Example: "http://example.com/some/info?color=red".
    string requestUrl = 11;
    // The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.
    string responseSize = 12;
    // The IP address (IPv4 or IPv6) of the origin server that the request was sent to.
    string serverIp = 13;
    // The response code indicating the status of response. Examples: 200, 404.
    int32 status = 14;
    // The user agent sent by the client. Example: "Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)".
    string userAgent = 15;
}

message LabelDescriptor {
    // A human-readable description for the label.
    string description = 1;
    // The label key.
    string key = 2;
    // The type of data that can be assigned to the label.
    enum LabelDescriptor_ValueType {
        LABELDESCRIPTOR_VALUETYPE_STRING = 0;
        LABELDESCRIPTOR_VALUETYPE_BOOL = 1;
        LABELDESCRIPTOR_VALUETYPE_INT64 = 2;
    }
    LabelDescriptor_ValueType valueType = 3;
}

message Linear {
    // Must be greater than 0.
    int32 numFiniteBuckets = 1;
    // Lower bound of the first bucket.
    double offset = 2;
    // Must be greater than 0.
    double width = 3;
}

message ListLogEntriesRequest {
    // Optional. A filter that chooses which log entries to return. See Advanced Logs Filters. Only log entries that match the filter are returned. An empty filter matches all log entries in the resources listed in resource_names. Referencing a parent resource that is not listed in resource_names will cause the filter to return no results. The maximum length of the filter is 20000 characters.
    string filter = 1;
    // Optional. How the results should be sorted. Presently, the only permitted values are "timestamp asc" (default) and "timestamp desc". The first option returns entries in order of increasing values of LogEntry.timestamp (oldest first), and the second option returns entries in order of decreasing timestamps (newest first). Entries with equal timestamps are returned in order of their insert_id values.
    string orderBy = 2;
    // Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of next_page_token in the response indicates that more results might be available.
    int32 pageSize = 3;
    // Optional. If present, then retrieve the next batch of results from the preceding call to this method. page_token must be the value of next_page_token from the previous response. The values of other method parameters should be identical to those in the previous call.
    string pageToken = 4;
    // Deprecated. Use resource_names instead. One or more project identifiers or project numbers from which to retrieve log entries. Example: "my-project-1A". If present, these project identifiers are converted to resource name format and added to the list of resources in resource_names.
    repeated string projectIds = 5;
    // Required. Names of one or more parent resources from which to retrieve log entries:
    // "projects/[PROJECT_ID]"
    // "organizations/[ORGANIZATION_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]"
    // "folders/[FOLDER_ID]"
    // Projects listed in the project_ids field are added to this list.
    repeated string resourceNames = 6;
}

message ListLogEntriesResponse {
    // A list of log entries. If entries is empty, nextPageToken may still be returned, indicating that more entries may exist. See nextPageToken for more information.
    repeated LogEntry entries = 1;
    // If there might be more results than those appearing in this response, then nextPageToken is included. To get the next set of results, call this method again using the value of nextPageToken as pageToken.If a value for next_page_token appears and the entries field is empty, it means that the search found no log entries so far but it did not have time to search all the possible log entries. Retry the method with this value for page_token to continue the search. Alternatively, consider speeding up the search by changing your filter to specify a single log name or resource type, or to narrow the time range of the search.
    string nextPageToken = 2;
}

message ListLogMetricsResponse {
    // A list of logs-based metrics.
    repeated LogMetric metrics = 1;
    // If there might be more results than appear in this response, then nextPageToken is included. To get the next set of results, call this method again using the value of nextPageToken as pageToken.
    string nextPageToken = 2;
}

message ListLogsResponse {
    // A list of log names. For example, "projects/my-project/syslog" or "organizations/123/cloudresourcemanager.googleapis.com%2Factivity".
    repeated string logNames = 1;
    // If there might be more results than those appearing in this response, then nextPageToken is included. To get the next set of results, call this method again using the value of nextPageToken as pageToken.
    string nextPageToken = 2;
}

message ListMonitoredResourceDescriptorsResponse {
    // If there might be more results than those appearing in this response, then nextPageToken is included. To get the next set of results, call this method again using the value of nextPageToken as pageToken.
    string nextPageToken = 1;
    // A list of resource descriptors.
    repeated MonitoredResourceDescriptor resourceDescriptors = 2;
}

message ListSinksResponse {
    // If there might be more results than appear in this response, then nextPageToken is included. To get the next set of results, call the same method again using the value of nextPageToken as pageToken.
    string nextPageToken = 1;
    // A list of sinks.
    repeated LogSink sinks = 2;
}

message LogEntry {
    // Optional. Information about the HTTP request associated with this log entry, if applicable.
    HttpRequest httpRequest = 1;
    // Optional. A unique identifier for the log entry. If you provide a value, then Stackdriver Logging considers other log entries in the same project, with the same timestamp, and with the same insert_id to be duplicates which can be removed. If omitted in new log entries, then Stackdriver Logging assigns its own unique identifier. The insert_id is also used to order log entries that have the same timestamp value.
    string insertId = 2;
    // The log entry payload, represented as a structure that is expressed as a JSON object.
    map<string, > jsonPayload = 3;
    // Optional. A set of user-defined (key, value) data that provides additional information about the log entry.
    map<string, string> labels = 4;
    // Required. The resource name of the log to which this log entry belongs:
    // "projects/[PROJECT_ID]/logs/[LOG_ID]"
    // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
    // "folders/[FOLDER_ID]/logs/[LOG_ID]"
    // A project number may optionally be used in place of PROJECT_ID. The  project number is translated to its corresponding PROJECT_ID internally  and the log_name field will contain PROJECT_ID in queries and exports.[LOG_ID] must be URL-encoded within log_name. Example: "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". [LOG_ID] must be less than 512 characters long and can only include the following characters: upper and lower case alphanumeric characters, forward-slash, underscore, hyphen, and period.For backward compatibility, if log_name begins with a forward-slash, such as /projects/..., then the log entry is ingested as usual but the forward-slash is removed. Listing the log entry will not show the leading slash and filtering for a log name with a leading slash will never return any results.
    string logName = 5;
    // Optional. Information about an operation associated with the log entry, if applicable.
    LogEntryOperation operation = 6;
    // The log entry payload, represented as a protocol buffer. Some Google Cloud Platform services use this field for their log entry payloads.
    map<string, > protoPayload = 7;
    // Output only. The time the log entry was received by Stackdriver Logging.
    string receiveTimestamp = 8;
    // Required. The monitored resource associated with this log entry. Example: a log entry that reports a database error would be associated with the monitored resource designating the particular database that reported the error.
    MonitoredResource resource = 9;
    // Optional. The severity of the log entry. The default value is LogSeverity.DEFAULT.
    enum LogEntry_Severity {
        LOGENTRY_SEVERITY_DEFAULT = 0;
        LOGENTRY_SEVERITY_DEBUG = 1;
        LOGENTRY_SEVERITY_INFO = 2;
        LOGENTRY_SEVERITY_NOTICE = 3;
        LOGENTRY_SEVERITY_WARNING = 4;
        LOGENTRY_SEVERITY_ERROR = 5;
        LOGENTRY_SEVERITY_CRITICAL = 6;
        LOGENTRY_SEVERITY_ALERT = 7;
        LOGENTRY_SEVERITY_EMERGENCY = 8;
    }
    LogEntry_Severity severity = 10;
    // Optional. Source code location information associated with the log entry, if any.
    LogEntrySourceLocation sourceLocation = 11;
    // The log entry payload, represented as a Unicode string (UTF-8).
    string textPayload = 12;
    // Optional. The time the event described by the log entry occurred. This time is used to compute the log entry's age and to enforce the logs retention period. If this field is omitted in a new log entry, then Stackdriver Logging assigns it the current time.Incoming log entries should have timestamps that are no more than the logs retention period in the past, and no more than 24 hours in the future. See the entries.write API method for more information.
    string timestamp = 13;
    // Optional. Resource name of the trace associated with the log entry, if any. If it contains a relative resource name, the name is assumed to be relative to //tracing.googleapis.com. Example: projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824
    string trace = 14;
}

message LogEntryOperation {
    // Optional. Set this to True if this is the first log entry in the operation.
    bool first = 1;
    // Optional. An arbitrary operation identifier. Log entries with the same identifier are assumed to be part of the same operation.
    string id = 2;
    // Optional. Set this to True if this is the last log entry in the operation.
    bool last = 3;
    // Optional. An arbitrary producer identifier. The combination of id and producer must be globally unique. Examples for producer: "MyDivision.MyBigCompany.com", "github.com/MyProject/MyApplication".
    string producer = 4;
}

message LogEntrySourceLocation {
    // Optional. Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
    string file = 1;
    // Optional. Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information may be used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).
    string function = 2;
    // Optional. Line within the source file. 1-based; 0 indicates no line number available.
    string line = 3;
}

message LogLine {
    // App-provided log message.
    string logMessage = 1;
    // Severity of this log entry.
    enum LogLine_Severity {
        LOGLINE_SEVERITY_DEFAULT = 0;
        LOGLINE_SEVERITY_DEBUG = 1;
        LOGLINE_SEVERITY_INFO = 2;
        LOGLINE_SEVERITY_NOTICE = 3;
        LOGLINE_SEVERITY_WARNING = 4;
        LOGLINE_SEVERITY_ERROR = 5;
        LOGLINE_SEVERITY_CRITICAL = 6;
        LOGLINE_SEVERITY_ALERT = 7;
        LOGLINE_SEVERITY_EMERGENCY = 8;
    }
    LogLine_Severity severity = 2;
    // Where in the source code this log message was written.
    SourceLocation sourceLocation = 3;
    // Approximate time when this log entry was made.
    string time = 4;
}

message LogMetric {
    // Optional. The bucket_options are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.
    BucketOptions bucketOptions = 1;
    // Optional. A description of this metric, which is used in documentation.
    string description = 2;
    // Required. An advanced logs filter which is used to match log entries. Example:
    // "resource.type=gae_app AND severity>=ERROR"
    // The maximum length of the filter is 20000 characters.
    string filter = 3;
    // Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If the either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
    map<string, string> labelExtractors = 4;
    // Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number of log entries matching the filter expression.The name, type, and description fields in the metric_descriptor are output only, and is constructed using the name and description field in the LogMetric.To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a value_extractor expression in the LogMetric.Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the label_extractors map.The metric_kind and value_type fields in the metric_descriptor cannot be updated once initially configured. New labels can be added in the metric_descriptor, but existing labels cannot be modified except for their description.
    MetricDescriptor metricDescriptor = 5;
    // Required. The client-assigned metric identifier. Examples: "error_count", "nginx/requests".Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.The metric identifier in this field must not be URL-encoded (https://en.wikipedia.org/wiki/Percent-encoding). However, when the metric identifier appears as the [METRIC_ID] part of a metric_name API parameter, then the metric identifier must be URL-encoded. Example: "projects/my-project/metrics/nginx%2Frequests".
    string name = 6;
    // Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument are:  1. field: The name of the log entry field from which the value is to be  extracted.  2. regex: A regular expression using the Google RE2 syntax  (https://github.com/google/re2/wiki/Syntax) with a single capture  group to extract data from the specified log entry field. The value  of the field is converted to a string before applying the regex.  It is an error to specify a regex that does not include exactly one  capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, ".*quantity=(\d+).*")
    string valueExtractor = 7;
    // Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
    enum LogMetric_Version {
        LOGMETRIC_VERSION_V2 = 0;
        LOGMETRIC_VERSION_V1 = 1;
    }
    LogMetric_Version version = 8;
}

message LogSink {
    // Required. The export destination:
    // "storage.googleapis.com/[GCS_BUCKET]"
    // "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
    // "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]"
    // The sink's writer_identity, set when the sink is created, must have permission to write to the destination or else the log entries are not exported. For more information, see Exporting Logs With Sinks.
    string destination = 1;
    // Deprecated. This field is ignored when creating or updating sinks.
    string endTime = 2;
    // Optional. An advanced logs filter. The only exported log entries are those that are in the resource owning the sink and that match the filter. For example:
    // logName="projects/[PROJECT_ID]/logs/[LOG_ID]" AND severity>=ERROR
    string filter = 3;
    // Optional. This field applies only to sinks owned by organizations and folders. If the field is false, the default, only the logs owned by the sink's parent resource are available for export. If the field is true, then logs from all the projects, folders, and billing accounts contained in the sink's parent resource are also available for export. Whether a particular log entry from the children is exported depends on the sink's filter expression. For example, if this field is true, then the filter resource.type=gce_instance would export all Compute Engine VM instance log entries from all projects in the sink's parent. To only export entries from certain child projects, filter on the project part of the log name:
    // logName:("projects/test-project1/" OR "projects/test-project2/") AND
    // resource.type=gce_instance
    bool includeChildren = 4;
    // Required. The client-assigned sink identifier, unique within the project. Example: "my-syslog-errors-to-pubsub". Sink identifiers are limited to 100 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
    string name = 5;
    // Deprecated. The log entry format to use for this sink's exported log entries. The v2 format is used by default and cannot be changed.
    enum LogSink_OutputVersionFormat {
        LOGSINK_OUTPUTVERSIONFORMAT_VERSION_FORMAT_UNSPECIFIED = 0;
        LOGSINK_OUTPUTVERSIONFORMAT_V2 = 1;
        LOGSINK_OUTPUTVERSIONFORMAT_V1 = 2;
    }
    LogSink_OutputVersionFormat outputVersionFormat = 6;
    // Deprecated. This field is ignored when creating or updating sinks.
    string startTime = 7;
    // Output only. An IAM identity&mdash;a service account or group&mdash;under which Stackdriver Logging writes the exported log entries to the sink's destination. This field is set by sinks.create and sinks.update, based on the setting of unique_writer_identity in those methods.Until you grant this identity write-access to the destination, log entry exports from this sink will fail. For more information, see Granting access for a resource. Consult the destination service's documentation to determine the appropriate IAM roles to assign to the identity.
    string writerIdentity = 8;
}

message MetricDescriptor {
    // A detailed description of the metric, which can be used in documentation.
    string description = 1;
    // A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count".
    string displayName = 2;
    // The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
    repeated LabelDescriptor labels = 3;
    // Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
    enum MetricDescriptor_MetricKind {
        METRICDESCRIPTOR_METRICKIND_METRIC_KIND_UNSPECIFIED = 0;
        METRICDESCRIPTOR_METRICKIND_GAUGE = 1;
        METRICDESCRIPTOR_METRICKIND_DELTA = 2;
        METRICDESCRIPTOR_METRICKIND_CUMULATIVE = 3;
    }
    MetricDescriptor_MetricKind metricKind = 4;
    // The resource name of the metric descriptor. Depending on the implementation, the name typically includes: (1) the parent resource name that defines the scope of the metric type or of its data; and (2) the metric's URL-encoded type, which also appears in the type field of this descriptor. For example, following is the resource name of a custom metric within the GCP project my-project-id:
    // "projects/my-project-id/metricDescriptors/custom.googleapis.com%2Finvoice%2Fpaid%2Famount"
    string name = 5;
    // The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined custom metric types have the DNS name custom.googleapis.com. Metric types should use a natural hierarchical grouping. For example:
    // "custom.googleapis.com/invoice/paid/amount"
    // "appengine.googleapis.com/http/server/response_latencies"
    string type = 6;
    // The unit in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The supported units are a subset of The Unified Code for Units of Measure (http://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT)
    // bit bit
    // By byte
    // s second
    // min minute
    // h hour
    // d dayPrefixes (PREFIX)
    // k kilo (10**3)
    // M mega (10**6)
    // G giga (10**9)
    // T tera (10**12)
    // P peta (10**15)
    // E exa (10**18)
    // Z zetta (10**21)
    // Y yotta (10**24)
    // m milli (10**-3)
    // u micro (10**-6)
    // n nano (10**-9)
    // p pico (10**-12)
    // f femto (10**-15)
    // a atto (10**-18)
    // z zepto (10**-21)
    // y yocto (10**-24)
    // Ki kibi (2**10)
    // Mi mebi (2**20)
    // Gi gibi (2**30)
    // Ti tebi (2**40)GrammarThe grammar includes the dimensionless unit 1, such as 1/s.The grammar also includes these connectors:
    // / division (as an infix operator, e.g. 1/s).
    // . multiplication (as an infix operator, e.g. GBy.d)The grammar for a unit is as follows:
    // Expression = Component { "." Component } { "/" Component } ;
    // 
    // Component = [ PREFIX ] UNIT [ Annotation ]
    //           | Annotation
    //           | "1"
    //           ;
    // 
    // Annotation = "{" NAME "}" ;
    // Notes:
    // Annotation is just a comment if it follows a UNIT and is  equivalent to 1 if it is used alone. For examples,  {requests}/s == 1/s, By{transmitted}/s == By/s.
    // NAME is a sequence of non-blank printable ASCII characters not  containing '{' or '}'.
    string unit = 7;
    // Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
    enum MetricDescriptor_ValueType {
        METRICDESCRIPTOR_VALUETYPE_VALUE_TYPE_UNSPECIFIED = 0;
        METRICDESCRIPTOR_VALUETYPE_BOOL = 1;
        METRICDESCRIPTOR_VALUETYPE_INT64 = 2;
        METRICDESCRIPTOR_VALUETYPE_DOUBLE = 3;
        METRICDESCRIPTOR_VALUETYPE_STRING = 4;
        METRICDESCRIPTOR_VALUETYPE_DISTRIBUTION = 5;
        METRICDESCRIPTOR_VALUETYPE_MONEY = 6;
    }
    MetricDescriptor_ValueType valueType = 8;
}

message MonitoredResource {
    // Required. Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels "project_id", "instance_id", and "zone".
    map<string, string> labels = 1;
    // Required. The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance.
    string type = 2;
}

message MonitoredResourceDescriptor {
    // Optional. A detailed description of the monitored resource type that might be used in documentation.
    string description = 1;
    // Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, "Google Cloud SQL Database".
    string displayName = 2;
    // Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels "database_id" and "zone".
    repeated LabelDescriptor labels = 3;
    // Optional. The resource name of the monitored resource descriptor: "projects/{project_id}/monitoredResourceDescriptors/{type}" where {type} is the value of the type field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format "monitoredResourceDescriptors/{type}".
    string name = 4;
    // Required. The monitored resource type. For example, the type "cloudsql_database" represents databases in Google Cloud SQL. The maximum length of this value is 256 characters.
    string type = 5;
}

message RequestLog {
    // App Engine release version.
    string appEngineRelease = 1;
    // Application that handled this request.
    string appId = 2;
    // An indication of the relative cost of serving this request.
    double cost = 3;
    // Time when the request finished.
    string endTime = 4;
    // Whether this request is finished or active.
    bool finished = 5;
    // Whether this is the first RequestLog entry for this request. If an active request has several RequestLog entries written to Stackdriver Logging, then this field will be set for one of them.
    bool first = 6;
    // Internet host and port number of the resource being requested.
    string host = 7;
    // HTTP version of request. Example: "HTTP/1.1".
    string httpVersion = 8;
    // An identifier for the instance that handled the request.
    string instanceId = 9;
    // If the instance processing this request belongs to a manually scaled module, then this is the 0-based index of the instance. Otherwise, this value is -1.
    int32 instanceIndex = 10;
    // Origin IP address.
    string ip = 11;
    // Latency of the request.
    string latency = 12;
    // A list of log lines emitted by the application while serving this request.
    repeated LogLine line = 13;
    // Number of CPU megacycles used to process request.
    string megaCycles = 14;
    // Request method. Example: "GET", "HEAD", "PUT", "POST", "DELETE".
    string method = 15;
    // Module of the application that handled this request.
    string moduleId = 16;
    // The logged-in user who made the request.Most likely, this is the part of the user's email before the @ sign. The field value is the same for different requests from the same user, but different users can have similar names. This information is also available to the application via the App Engine Users API.This field will be populated starting with App Engine 1.9.21.
    string nickname = 17;
    // Time this request spent in the pending request queue.
    string pendingTime = 18;
    // Referrer URL of request.
    string referrer = 19;
    // Globally unique identifier for a request, which is based on the request start time. Request IDs for requests which started later will compare greater as strings than those for requests which started earlier.
    string requestId = 20;
    // Contains the path and query portion of the URL that was requested. For example, if the URL was "http://example.com/app?name=val", the resource would be "/app?name=val". The fragment identifier, which is identified by the # character, is not included.
    string resource = 21;
    // Size in bytes sent back to client by request.
    string responseSize = 22;
    // Source code for the application that handled this request. There can be more than one source reference per deployed application if source code is distributed among multiple repositories.
    repeated SourceReference sourceReference = 23;
    // Time when the request started.
    string startTime = 24;
    // HTTP response status code. Example: 200, 404.
    int32 status = 25;
    // Task name of the request, in the case of an offline request.
    string taskName = 26;
    // Queue name of the request, in the case of an offline request.
    string taskQueueName = 27;
    // Stackdriver Trace identifier for this request.
    string traceId = 28;
    // File or class that handled the request.
    string urlMapEntry = 29;
    // User agent that made the request.
    string userAgent = 30;
    // Version of the application that handled this request.
    string versionId = 31;
    // Whether this was a loading request for the instance.
    bool wasLoadingRequest = 32;
}

message SourceLocation {
    // Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
    string file = 1;
    // Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information is used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).
    string functionName = 2;
    // Line within the source file.
    string line = 3;
}

message SourceReference {
    // Optional. A URI string identifying the repository. Example: "https://github.com/GoogleCloudPlatform/kubernetes.git"
    string repository = 1;
    // The canonical and persistent identifier of the deployed revision. Example (git): "0035781c50ec7aa23385dc841529ce8a4b70db1b"
    string revisionId = 2;
}

message WriteLogEntriesRequest {
    // Required. The log entries to send to Stackdriver Logging. The order of log entries in this list does not matter. Values supplied in this method's log_name, resource, and labels fields are copied into those log entries in this list that do not include values for their corresponding fields. For more information, see the LogEntry type.If the timestamp or insert_id fields are missing in log entries, then this method supplies the current time or a unique identifier, respectively. The supplied values are chosen so that, among the log entries that did not supply their own values, the entries earlier in the list will sort before the entries later in the list. See the entries.list method.Log entries with timestamps that are more than the logs retention period in the past or more than 24 hours in the future might be discarded. Discarding does not return an error.To improve throughput and to avoid exceeding the quota limit for calls to entries.write, you should try to include several log entries in this list, rather than calling this method for each individual log entry.
    repeated LogEntry entries = 1;
    // Optional. Default labels that are added to the labels field of all log entries in entries. If a log entry already has a label with the same key as a label in this parameter, then the log entry's label is not changed. See LogEntry.
    map<string, string> labels = 2;
    // Optional. A default log resource name that is assigned to all log entries in entries that do not specify a value for log_name:
    // "projects/[PROJECT_ID]/logs/[LOG_ID]"
    // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
    // "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
    // "folders/[FOLDER_ID]/logs/[LOG_ID]"
    // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog" or "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more information about log names, see LogEntry.
    string logName = 3;
    // Optional. Whether valid entries should be written even if some other entries fail due to INVALID_ARGUMENT or PERMISSION_DENIED errors. If any entry is not written, then the response status is the error associated with one of the failed entries and the response includes error details keyed by the entries' zero-based index in the entries.write method.
    bool partialSuccess = 4;
    // Optional. A default monitored resource object that is assigned to all log entries in entries that do not specify a value for resource. Example:
    // { "type": "gce_instance",
    //   "labels": {
    //     "zone": "us-central1-a", "instance_id": "00000000000000000000" }}
    // See LogEntry.
    MonitoredResource resource = 5;
}

message WriteLogEntriesResponse {
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service StackdriverLoggingService {
    // Lists log entries. Use this method to retrieve log entries from Stackdriver Logging. For ways to export log entries, see Exporting Logs.
    rpc PostV2beta1Entries:List(PostV2beta1Entries:ListRequest) returns (ListLogEntriesResponse) {
      option (google.api.http) = {
        post: "//v2beta1/entries:list"
        body: "body"
      };
    }
    // Log entry resourcesWrites log entries to Stackdriver Logging. This API method is the only way to send log entries to Stackdriver Logging. This method is used, directly or indirectly, by the Stackdriver Logging agent (fluentd) and all logging libraries configured to use Stackdriver Logging.
    rpc PostV2beta1Entries:Write(PostV2beta1Entries:WriteRequest) returns (WriteLogEntriesResponse) {
      option (google.api.http) = {
        post: "//v2beta1/entries:write"
        body: "body"
      };
    }
    // Lists the descriptors for monitored resource types used by Stackdriver Logging.
    rpc GetV2beta1MonitoredResourceDescriptors(GetV2beta1MonitoredResourceDescriptorsRequest) returns (ListMonitoredResourceDescriptorsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/monitoredResourceDescriptors"
      };
    }
    // Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
    rpc DeleteV2beta1LogName(DeleteV2beta1LogNameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v2beta1/{logName}"
      };
    }
    // Gets a logs-based metric.
    rpc GetV2beta1MetricName(GetV2beta1MetricNameRequest) returns (LogMetric) {
      option (google.api.http) = {
        get: "//v2beta1/{metricName}"
      };
    }
    // Creates or updates a logs-based metric.
    rpc PutV2beta1MetricName(PutV2beta1MetricNameRequest) returns (LogMetric) {
      option (google.api.http) = {
        put: "//v2beta1/{metricName}"
        body: "body"
      };
    }
    // Deletes a logs-based metric.
    rpc DeleteV2beta1MetricName(DeleteV2beta1MetricNameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v2beta1/{metricName}"
      };
    }
    // Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
    rpc GetV2beta1ParentLogs(GetV2beta1ParentLogsRequest) returns (ListLogsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/{parent}/logs"
      };
    }
    // Lists logs-based metrics.
    rpc GetV2beta1ParentMetrics(GetV2beta1ParentMetricsRequest) returns (ListLogMetricsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/{parent}/metrics"
      };
    }
    // Creates a logs-based metric.
    rpc PostV2beta1ParentMetrics(PostV2beta1ParentMetricsRequest) returns (LogMetric) {
      option (google.api.http) = {
        post: "//v2beta1/{parent}/metrics"
        body: "body"
      };
    }
    // Lists sinks.
    rpc GetV2beta1ParentSinks(GetV2beta1ParentSinksRequest) returns (ListSinksResponse) {
      option (google.api.http) = {
        get: "//v2beta1/{parent}/sinks"
      };
    }
    // Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
    rpc PostV2beta1ParentSinks(PostV2beta1ParentSinksRequest) returns (LogSink) {
      option (google.api.http) = {
        post: "//v2beta1/{parent}/sinks"
        body: "body"
      };
    }
    // Gets a sink.
    rpc GetV2beta1SinkName(GetV2beta1SinkNameRequest) returns (LogSink) {
      option (google.api.http) = {
        get: "//v2beta1/{sinkName}"
      };
    }
    // Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter. The updated sink might also have a new writer_identity; see the unique_writer_identity field.
    rpc PutV2beta1SinkName(PutV2beta1SinkNameRequest) returns (LogSink) {
      option (google.api.http) = {
        put: "//v2beta1/{sinkName}"
        body: "body"
      };
    }
    // Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
    rpc DeleteV2beta1SinkName(DeleteV2beta1SinkNameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v2beta1/{sinkName}"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package googleidentitytoolkit;

message PostCreateAuthUriRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyCreateAuthUriRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostDeleteAccountRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyDeleteAccountRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostDownloadAccountRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyDownloadAccountRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostEmailLinkSigninRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyEmailLinkSigninRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostGetAccountInfoRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyGetAccountInfoRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostGetOobConfirmationCodeRequest {
    alt alt = 1;
    Relyingparty body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetGetProjectConfigRequest {
    alt alt = 1;
    // Delegated GCP project number of the request.
    string delegatedProjectNumber = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // GCP project number of the request.
    string projectNumber = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetGetRecaptchaParamRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetPublicKeysRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostResetPasswordRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyResetPasswordRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostSendVerificationCodeRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartySendVerificationCodeRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostSetAccountInfoRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartySetAccountInfoRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostSetProjectConfigRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartySetProjectConfigRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostSignOutUserRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartySignOutUserRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostSignupNewUserRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartySignupNewUserRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostUploadAccountRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyUploadAccountRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostVerifyAssertionRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyVerifyAssertionRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostVerifyCustomTokenRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyVerifyCustomTokenRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostVerifyPasswordRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyVerifyPasswordRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostVerifyPhoneNumberRequest {
    alt alt = 1;
    IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message CreateAuthUriResponse {
    // all providers the user has once used to do federated login
    repeated string allProviders = 1;
    // The URI used by the IDP to authenticate the user.
    string authUri = 2;
    // True if captcha is required.
    bool captchaRequired = 3;
    // True if the authUri is for user's existing provider.
    bool forExistingProvider = 4;
    // The fixed string identitytoolkit#CreateAuthUriResponse".
    string kind = 5;
    // The provider ID of the auth URI.
    string providerId = 6;
    // Whether the user is registered if the identifier is an email.
    bool registered = 7;
    // Session ID which should be passed in the following verifyAssertion request.
    string sessionId = 8;
    // All sign-in methods this user has used.
    repeated string signinMethods = 9;
}

message DeleteAccountResponse {
    // The fixed string "identitytoolkit#DeleteAccountResponse".
    string kind = 1;
}

message DownloadAccountResponse {
    // The fixed string "identitytoolkit#DownloadAccountResponse".
    string kind = 1;
    // The next page token. To be used in a subsequent request to return the next page of results.
    string nextPageToken = 2;
    // The user accounts data.
    repeated UserInfo users = 3;
}

message EmailLinkSigninResponse {
    // The user's email.
    string email = 1;
    // Expiration time of STS id token in seconds.
    string expiresIn = 2;
    // The STS id token to login the newly signed in user.
    string idToken = 3;
    // Whether the user is new.
    bool isNewUser = 4;
    // The fixed string "identitytoolkit#EmailLinkSigninResponse".
    string kind = 5;
    // The RP local ID of the user.
    string localId = 6;
    // The refresh token for the signed in user.
    string refreshToken = 7;
}

message EmailTemplate {
    // Email body.
    string body = 1;
    // Email body format.
    string format = 2;
    // From address of the email.
    string from = 3;
    // From display name.
    string fromDisplayName = 4;
    // Reply-to address.
    string replyTo = 5;
    // Subject of the email.
    string subject = 6;
}

message GetAccountInfoResponse {
    // The fixed string "identitytoolkit#GetAccountInfoResponse".
    string kind = 1;
    // The info of the users.
    repeated UserInfo users = 2;
}

message GetOobConfirmationCodeResponse {
    // The email address that the email is sent to.
    string email = 1;
    // The fixed string "identitytoolkit#GetOobConfirmationCodeResponse".
    string kind = 2;
    // The code to be send to the user.
    string oobCode = 3;
}

message GetRecaptchaParamResponse {
    // The fixed string "identitytoolkit#GetRecaptchaParamResponse".
    string kind = 1;
    // Site key registered at recaptcha.
    string recaptchaSiteKey = 2;
    // The stoken field for the recaptcha widget, used to request captcha challenge.
    string recaptchaStoken = 3;
}

message IdentitytoolkitRelyingpartyCreateAuthUriRequest {
    // The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.
    string appId = 1;
    // Explicitly specify the auth flow type. Currently only support "CODE_FLOW" type. The field is only used for Google provider.
    string authFlowType = 2;
    // The relying party OAuth client ID.
    string clientId = 3;
    // The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
    string context = 4;
    // The URI to which the IDP redirects the user after the federated login flow.
    string continueUri = 5;
    // The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.
    map<string, string> customParameter = 6;
    // The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.
    string hostedDomain = 7;
    // The email or federated ID of the user.
    string identifier = 8;
    // The developer's consumer key for OpenId OAuth Extension
    string oauthConsumerKey = 9;
    // Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant
    string oauthScope = 10;
    // Optional realm for OpenID protocol. The sub string "scheme://domain:port" of the param "continueUri" is used if this is not set.
    string openidRealm = 11;
    // The native app package for OTA installation.
    string otaApp = 12;
    // The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
    string providerId = 13;
    // The session_id passed by client.
    string sessionId = 14;
}

message IdentitytoolkitRelyingpartyDeleteAccountRequest {
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 1;
    // The GITKit token or STS id token of the authenticated user.
    string idToken = 2;
    // The local ID of the user.
    string localId = 3;
}

message IdentitytoolkitRelyingpartyDownloadAccountRequest {
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 1;
    // The max number of results to return in the response.
    uint32 maxResults = 2;
    // The token for the next page. This should be taken from the previous response.
    string nextPageToken = 3;
    // Specify which project (field value is actually project id) to operate. Only used when provided credential.
    string targetProjectId = 4;
}

message IdentitytoolkitRelyingpartyEmailLinkSigninRequest {
    // The email address of the user.
    string email = 1;
    // Token for linking flow.
    string idToken = 2;
    // The confirmation code.
    string oobCode = 3;
}

message IdentitytoolkitRelyingpartyGetAccountInfoRequest {
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 1;
    // The list of emails of the users to inquiry.
    repeated string email = 2;
    // The GITKit token of the authenticated user.
    string idToken = 3;
    // The list of local ID's of the users to inquiry.
    repeated string localId = 4;
    // Privileged caller can query users by specified phone number.
    repeated string phoneNumber = 5;
}

message IdentitytoolkitRelyingpartyGetProjectConfigResponse {
    // Whether to allow password user sign in or sign up.
    bool allowPasswordUser = 1;
    // Browser API key, needed when making http request to Apiary.
    string apiKey = 2;
    // Authorized domains.
    repeated string authorizedDomains = 3;
    // Change email template.
    EmailTemplate changeEmailTemplate = 4;
    string dynamicLinksDomain = 5;
    // Whether anonymous user is enabled.
    bool enableAnonymousUser = 6;
    // OAuth2 provider configuration.
    repeated IdpConfig idpConfig = 7;
    // Legacy reset password email template.
    EmailTemplate legacyResetPasswordTemplate = 8;
    // Project ID of the relying party.
    string projectId = 9;
    // Reset password email template.
    EmailTemplate resetPasswordTemplate = 10;
    // Whether to use email sending provided by Firebear.
    bool useEmailSending = 11;
    // Verify email template.
    EmailTemplate verifyEmailTemplate = 12;
}

map<string, string> IdentitytoolkitRelyingpartyGetPublicKeysResponse = 1

message IdentitytoolkitRelyingpartyResetPasswordRequest {
    // The email address of the user.
    string email = 1;
    // The new password inputted by the user.
    string newPassword = 2;
    // The old password inputted by the user.
    string oldPassword = 3;
    // The confirmation code.
    string oobCode = 4;
}

message IdentitytoolkitRelyingpartySendVerificationCodeRequest {
    // Receipt of successful app token validation with APNS.
    string iosReceipt = 1;
    // Secret delivered to iOS app via APNS.
    string iosSecret = 2;
    // The phone number to send the verification code to in E.164 format.
    string phoneNumber = 3;
    // Recaptcha solution.
    string recaptchaToken = 4;
}

message IdentitytoolkitRelyingpartySendVerificationCodeResponse {
    // Encrypted session information
    string sessionInfo = 1;
}

message IdentitytoolkitRelyingpartySetAccountInfoRequest {
    // The captcha challenge.
    string captchaChallenge = 1;
    // Response to the captcha.
    string captchaResponse = 2;
    // The timestamp when the account is created.
    string createdAt = 3;
    // The custom attributes to be set in the user's id token.
    string customAttributes = 4;
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 5;
    // The attributes users request to delete.
    repeated string deleteAttribute = 6;
    // The IDPs the user request to delete.
    repeated string deleteProvider = 7;
    // Whether to disable the user.
    bool disableUser = 8;
    // The name of the user.
    string displayName = 9;
    // The email of the user.
    string email = 10;
    // Mark the email as verified or not.
    bool emailVerified = 11;
    // The GITKit token of the authenticated user.
    string idToken = 12;
    // Instance id token of the app.
    string instanceId = 13;
    // Last login timestamp.
    string lastLoginAt = 14;
    // The local ID of the user.
    string localId = 15;
    // The out-of-band code of the change email request.
    string oobCode = 16;
    // The new password of the user.
    string password = 17;
    // Privileged caller can update user with specified phone number.
    string phoneNumber = 18;
    // The photo url of the user.
    string photoUrl = 19;
    // The associated IDPs of the user.
    repeated string provider = 20;
    // Whether return sts id token and refresh token instead of gitkit token.
    bool returnSecureToken = 21;
    // Mark the user to upgrade to federated login.
    bool upgradeToFederatedLogin = 22;
    // Timestamp in seconds for valid login token.
    string validSince = 23;
}

message IdentitytoolkitRelyingpartySetProjectConfigRequest {
    // Whether to allow password user sign in or sign up.
    bool allowPasswordUser = 1;
    // Browser API key, needed when making http request to Apiary.
    string apiKey = 2;
    // Authorized domains for widget redirect.
    repeated string authorizedDomains = 3;
    // Change email template.
    EmailTemplate changeEmailTemplate = 4;
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 5;
    // Whether to enable anonymous user.
    bool enableAnonymousUser = 6;
    // Oauth2 provider configuration.
    repeated IdpConfig idpConfig = 7;
    // Legacy reset password email template.
    EmailTemplate legacyResetPasswordTemplate = 8;
    // Reset password email template.
    EmailTemplate resetPasswordTemplate = 9;
    // Whether to use email sending provided by Firebear.
    bool useEmailSending = 10;
    // Verify email template.
    EmailTemplate verifyEmailTemplate = 11;
}

message IdentitytoolkitRelyingpartySetProjectConfigResponse {
    // Project ID of the relying party.
    string projectId = 1;
}

message IdentitytoolkitRelyingpartySignOutUserRequest {
    // Instance id token of the app.
    string instanceId = 1;
    // The local ID of the user.
    string localId = 2;
}

message IdentitytoolkitRelyingpartySignOutUserResponse {
    // The local ID of the user.
    string localId = 1;
}

message IdentitytoolkitRelyingpartySignupNewUserRequest {
    // The captcha challenge.
    string captchaChallenge = 1;
    // Response to the captcha.
    string captchaResponse = 2;
    // Whether to disable the user. Only can be used by service account.
    bool disabled = 3;
    // The name of the user.
    string displayName = 4;
    // The email of the user.
    string email = 5;
    // Mark the email as verified or not. Only can be used by service account.
    bool emailVerified = 6;
    // The GITKit token of the authenticated user.
    string idToken = 7;
    // Instance id token of the app.
    string instanceId = 8;
    // Privileged caller can create user with specified user id.
    string localId = 9;
    // The new password of the user.
    string password = 10;
    // Privileged caller can create user with specified phone number.
    string phoneNumber = 11;
    // The photo url of the user.
    string photoUrl = 12;
}

message IdentitytoolkitRelyingpartyUploadAccountRequest {
    // Whether allow overwrite existing account when user local_id exists.
    bool allowOverwrite = 1;
    int32 blockSize = 2;
    // The following 4 fields are for standard scrypt algorithm.
    int32 cpuMemCost = 3;
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 4;
    int32 dkLen = 5;
    // The password hash algorithm.
    string hashAlgorithm = 6;
    // Memory cost for hash calculation. Used by scrypt similar algorithms.
    int32 memoryCost = 7;
    int32 parallelization = 8;
    // Rounds for hash calculation. Used by scrypt and similar algorithms.
    int32 rounds = 9;
    // The salt separator.
    string saltSeparator = 10;
    // If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
    bool sanityCheck = 11;
    // The key for to hash the password.
    string signerKey = 12;
    // Specify which project (field value is actually project id) to operate. Only used when provided credential.
    string targetProjectId = 13;
    // The account info to be stored.
    repeated UserInfo users = 14;
}

message IdentitytoolkitRelyingpartyVerifyAssertionRequest {
    // When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.
    bool autoCreate = 1;
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 2;
    // The GITKit token of the authenticated user.
    string idToken = 3;
    // Instance id token of the app.
    string instanceId = 4;
    // The GITKit token for the non-trusted IDP pending to be confirmed by the user.
    string pendingIdToken = 5;
    // The post body if the request is a HTTP POST.
    string postBody = 6;
    // The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.
    string requestUri = 7;
    // Whether return 200 and IDP credential rather than throw exception when federated id is already linked.
    bool returnIdpCredential = 8;
    // Whether to return refresh tokens.
    bool returnRefreshToken = 9;
    // Whether return sts id token and refresh token instead of gitkit token.
    bool returnSecureToken = 10;
    // Session ID, which should match the one in previous createAuthUri request.
    string sessionId = 11;
}

message IdentitytoolkitRelyingpartyVerifyCustomTokenRequest {
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 1;
    // Instance id token of the app.
    string instanceId = 2;
    // Whether return sts id token and refresh token instead of gitkit token.
    bool returnSecureToken = 3;
    // The custom token to verify
    string token = 4;
}

message IdentitytoolkitRelyingpartyVerifyPasswordRequest {
    // The captcha challenge.
    string captchaChallenge = 1;
    // Response to the captcha.
    string captchaResponse = 2;
    // GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    string delegatedProjectNumber = 3;
    // The email of the user.
    string email = 4;
    // The GITKit token of the authenticated user.
    string idToken = 5;
    // Instance id token of the app.
    string instanceId = 6;
    // The password inputed by the user.
    string password = 7;
    // The GITKit token for the non-trusted IDP, which is to be confirmed by the user.
    string pendingIdToken = 8;
    // Whether return sts id token and refresh token instead of gitkit token.
    bool returnSecureToken = 9;
}

message IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest {
    string code = 1;
    string idToken = 2;
    string operation = 3;
    string phoneNumber = 4;
    // The session info previously returned by IdentityToolkit-SendVerificationCode.
    string sessionInfo = 5;
    string temporaryProof = 6;
    string verificationProof = 7;
}

message IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse {
    string expiresIn = 1;
    string idToken = 2;
    bool isNewUser = 3;
    string localId = 4;
    string phoneNumber = 5;
    string refreshToken = 6;
    string temporaryProof = 7;
    string temporaryProofExpiresIn = 8;
    string verificationProof = 9;
    string verificationProofExpiresIn = 10;
}

message IdpConfig {
    // OAuth2 client ID.
    string clientId = 1;
    // Whether this IDP is enabled.
    bool enabled = 2;
    // Percent of users who will be prompted/redirected federated login for this IDP.
    int32 experimentPercent = 3;
    // OAuth2 provider.
    string provider = 4;
    // OAuth2 client secret.
    string secret = 5;
    // Whitelisted client IDs for audience check.
    repeated string whitelistedAudiences = 6;
}

message Relyingparty {
    // whether or not to install the android app on the device where the link is opened
    bool androidInstallApp = 1;
    // minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app
    string androidMinimumVersion = 2;
    // android package name of the android app to handle the action code
    string androidPackageName = 3;
    // whether or not the app can handle the oob code without first going to web
    bool canHandleCodeInApp = 4;
    // The recaptcha response from the user.
    string captchaResp = 5;
    // The recaptcha challenge presented to the user.
    string challenge = 6;
    // The url to continue to the Gitkit app
    string continueUrl = 7;
    // The email of the user.
    string email = 8;
    // iOS app store id to download the app if it's not already installed
    string iOSAppStoreId = 9;
    // the iOS bundle id of iOS app to handle the action code
    string iOSBundleId = 10;
    // The user's Gitkit login token for email change.
    string idToken = 11;
    // The fixed string "identitytoolkit#relyingparty".
    string kind = 12;
    // The new email if the code is for email change.
    string newEmail = 13;
    // The request type.
    string requestType = 14;
    // The IP address of the user.
    string userIp = 15;
}

message ResetPasswordResponse {
    // The user's email. If the out-of-band code is for email recovery, the user's original email.
    string email = 1;
    // The fixed string "identitytoolkit#ResetPasswordResponse".
    string kind = 2;
    // If the out-of-band code is for email recovery, the user's new email.
    string newEmail = 3;
    // The request type.
    string requestType = 4;
}

message SetAccountInfoResponse {
    // The name of the user.
    string displayName = 1;
    // The email of the user.
    string email = 2;
    // If email has been verified.
    bool emailVerified = 3;
    // If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
    string expiresIn = 4;
    // The Gitkit id token to login the newly sign up user.
    string idToken = 5;
    // The fixed string "identitytoolkit#SetAccountInfoResponse".
    string kind = 6;
    // The local ID of the user.
    string localId = 7;
    // The new email the user attempts to change to.
    string newEmail = 8;
    // The user's hashed password.
    string passwordHash = 9;
    // The photo url of the user.
    string photoUrl = 10;
    // The user's profiles at the associated IdPs.
    message ProviderUserInfo {
            // The user's display name at the IDP.
    string displayName = 1;
            // User's identifier at IDP.
    string federatedId = 2;
            // The user's photo url at the IDP.
    string photoUrl = 3;
            // The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
    string providerId = 4;
    }
    repeated ProviderUserInfo providerUserInfo = 11;
    // If idToken is STS id token, then this field will be refresh token.
    string refreshToken = 12;
}

message SignupNewUserResponse {
    // The name of the user.
    string displayName = 1;
    // The email of the user.
    string email = 2;
    // If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
    string expiresIn = 3;
    // The Gitkit id token to login the newly sign up user.
    string idToken = 4;
    // The fixed string "identitytoolkit#SignupNewUserResponse".
    string kind = 5;
    // The RP local ID of the user.
    string localId = 6;
    // If idToken is STS id token, then this field will be refresh token.
    string refreshToken = 7;
}

message UploadAccountResponse {
    // The error encountered while processing the account info.
    message Error {
            // The index of the malformed account, starting from 0.
    int32 index = 1;
            // Detailed error message for the account info.
    string message = 2;
    }
    repeated Error error = 1;
    // The fixed string "identitytoolkit#UploadAccountResponse".
    string kind = 2;
}

message UserInfo {
    // User creation timestamp.
    string createdAt = 1;
    // The custom attributes to be set in the user's id token.
    string customAttributes = 2;
    // Whether the user is authenticated by the developer.
    bool customAuth = 3;
    // Whether the user is disabled.
    bool disabled = 4;
    // The name of the user.
    string displayName = 5;
    // The email of the user.
    string email = 6;
    // Whether the email has been verified.
    bool emailVerified = 7;
    // last login timestamp.
    string lastLoginAt = 8;
    // The local ID of the user.
    string localId = 9;
    // The user's hashed password.
    string passwordHash = 10;
    // The timestamp when the password was last updated.
    double passwordUpdatedAt = 11;
    // User's phone number.
    string phoneNumber = 12;
    // The URL of the user profile photo.
    string photoUrl = 13;
    // The IDP of the user.
    message ProviderUserInfo {
            // The user's display name at the IDP.
    string displayName = 1;
            // User's email at IDP.
    string email = 2;
            // User's identifier at IDP.
    string federatedId = 3;
            // User's phone number.
    string phoneNumber = 4;
            // The user's photo url at the IDP.
    string photoUrl = 5;
            // The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
    string providerId = 6;
            // User's raw identifier directly returned from IDP.
    string rawId = 7;
            // User's screen name at Twitter or login name at Github.
    string screenName = 8;
    }
    repeated ProviderUserInfo providerUserInfo = 14;
    // The user's plain text password.
    string rawPassword = 15;
    // The user's password salt.
    string salt = 16;
    // User's screen name at Twitter or login name at Github.
    string screenName = 17;
    // Timestamp in seconds for valid login token.
    string validSince = 18;
    // Version of the user's password.
    int32 version = 19;
}

message VerifyAssertionResponse {
    // The action code.
    string action = 1;
    // URL for OTA app installation.
    string appInstallationUrl = 2;
    // The custom scheme used by mobile app.
    string appScheme = 3;
    // The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
    string context = 4;
    // The birth date of the IdP account.
    string dateOfBirth = 5;
    // The display name of the user.
    string displayName = 6;
    // The email returned by the IdP. NOTE: The federated login user may not own the email.
    string email = 7;
    // It's true if the email is recycled.
    bool emailRecycled = 8;
    // The value is true if the IDP is also the email provider. It means the user owns the email.
    bool emailVerified = 9;
    // Client error code.
    string errorMessage = 10;
    // If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
    string expiresIn = 11;
    // The unique ID identifies the IdP account.
    string federatedId = 12;
    // The first name of the user.
    string firstName = 13;
    // The full name of the user.
    string fullName = 14;
    // The ID token.
    string idToken = 15;
    // It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.
    string inputEmail = 16;
    // True if it's a new user sign-in, false if it's a returning user.
    bool isNewUser = 17;
    // The fixed string "identitytoolkit#VerifyAssertionResponse".
    string kind = 18;
    // The language preference of the user.
    string language = 19;
    // The last name of the user.
    string lastName = 20;
    // The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
    string localId = 21;
    // Whether the assertion is from a non-trusted IDP and need account linking confirmation.
    bool needConfirmation = 22;
    // Whether need client to supply email to complete the federated login flow.
    bool needEmail = 23;
    // The nick name of the user.
    string nickName = 24;
    // The OAuth2 access token.
    string oauthAccessToken = 25;
    // The OAuth2 authorization code.
    string oauthAuthorizationCode = 26;
    // The lifetime in seconds of the OAuth2 access token.
    int32 oauthExpireIn = 27;
    // The OIDC id token.
    string oauthIdToken = 28;
    // The user approved request token for the OpenID OAuth extension.
    string oauthRequestToken = 29;
    // The scope for the OpenID OAuth extension.
    string oauthScope = 30;
    // The OAuth1 access token secret.
    string oauthTokenSecret = 31;
    // The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email.
    string originalEmail = 32;
    // The URI of the public accessible profiel picture.
    string photoUrl = 33;
    // The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the "providerId" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the "identifier" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.
    string providerId = 34;
    // Raw IDP-returned user info.
    string rawUserInfo = 35;
    // If idToken is STS id token, then this field will be refresh token.
    string refreshToken = 36;
    // The screen_name of a Twitter user or the login name at Github.
    string screenName = 37;
    // The timezone of the user.
    string timeZone = 38;
    // When action is 'map', contains the idps which can be used for confirmation.
    repeated string verifiedProvider = 39;
}

message VerifyCustomTokenResponse {
    // If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
    string expiresIn = 1;
    // The GITKit token for authenticated user.
    string idToken = 2;
    // True if it's a new user sign-in, false if it's a returning user.
    bool isNewUser = 3;
    // The fixed string "identitytoolkit#VerifyCustomTokenResponse".
    string kind = 4;
    // If idToken is STS id token, then this field will be refresh token.
    string refreshToken = 5;
}

message VerifyPasswordResponse {
    // The name of the user.
    string displayName = 1;
    // The email returned by the IdP. NOTE: The federated login user may not own the email.
    string email = 2;
    // If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
    string expiresIn = 3;
    // The GITKit token for authenticated user.
    string idToken = 4;
    // The fixed string "identitytoolkit#VerifyPasswordResponse".
    string kind = 5;
    // The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
    string localId = 6;
    // The OAuth2 access token.
    string oauthAccessToken = 7;
    // The OAuth2 authorization code.
    string oauthAuthorizationCode = 8;
    // The lifetime in seconds of the OAuth2 access token.
    int32 oauthExpireIn = 9;
    // The URI of the user's photo at IdP
    string photoUrl = 10;
    // If idToken is STS id token, then this field will be refresh token.
    string refreshToken = 11;
    // Whether the email is registered.
    bool registered = 12;
}

enum Alt {
    JSON = 0;
}

service GoogleIdentityToolkitService {
    // Creates the URI used by the IdP to authenticate the user.
    rpc PostCreateAuthUri(PostCreateAuthUriRequest) returns (CreateAuthUriResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/createAuthUri"
        body: "body"
      };
    }
    // Delete user account.
    rpc PostDeleteAccount(PostDeleteAccountRequest) returns (DeleteAccountResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/deleteAccount"
        body: "body"
      };
    }
    // Batch download user accounts.
    rpc PostDownloadAccount(PostDownloadAccountRequest) returns (DownloadAccountResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/downloadAccount"
        body: "body"
      };
    }
    // Reset password for a user.
    rpc PostEmailLinkSignin(PostEmailLinkSigninRequest) returns (EmailLinkSigninResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/emailLinkSignin"
        body: "body"
      };
    }
    // Returns the account info.
    rpc PostGetAccountInfo(PostGetAccountInfoRequest) returns (GetAccountInfoResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/getAccountInfo"
        body: "body"
      };
    }
    // Get a code for user action confirmation.
    rpc PostGetOobConfirmationCode(PostGetOobConfirmationCodeRequest) returns (GetOobConfirmationCodeResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/getOobConfirmationCode"
        body: "body"
      };
    }
    // Get project configuration.
    rpc GetGetProjectConfig(GetGetProjectConfigRequest) returns (IdentitytoolkitRelyingpartyGetProjectConfigResponse) {
      option (google.api.http) = {
        get: "/identitytoolkit/v3/relyingparty/getProjectConfig"
      };
    }
    // Get recaptcha secure param.
    rpc GetGetRecaptchaParam(GetGetRecaptchaParamRequest) returns (GetRecaptchaParamResponse) {
      option (google.api.http) = {
        get: "/identitytoolkit/v3/relyingparty/getRecaptchaParam"
      };
    }
    // Get token signing public key.
    rpc GetPublicKeys(GetPublicKeysRequest) returns (IdentitytoolkitRelyingpartyGetPublicKeysResponse) {
      option (google.api.http) = {
        get: "/identitytoolkit/v3/relyingparty/publicKeys"
      };
    }
    // Reset password for a user.
    rpc PostResetPassword(PostResetPasswordRequest) returns (ResetPasswordResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/resetPassword"
        body: "body"
      };
    }
    // Send SMS verification code.
    rpc PostSendVerificationCode(PostSendVerificationCodeRequest) returns (IdentitytoolkitRelyingpartySendVerificationCodeResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/sendVerificationCode"
        body: "body"
      };
    }
    // Set account info for a user.
    rpc PostSetAccountInfo(PostSetAccountInfoRequest) returns (SetAccountInfoResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/setAccountInfo"
        body: "body"
      };
    }
    // Set project configuration.
    rpc PostSetProjectConfig(PostSetProjectConfigRequest) returns (IdentitytoolkitRelyingpartySetProjectConfigResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/setProjectConfig"
        body: "body"
      };
    }
    // Sign out user.
    rpc PostSignOutUser(PostSignOutUserRequest) returns (IdentitytoolkitRelyingpartySignOutUserResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/signOutUser"
        body: "body"
      };
    }
    // Signup new user.
    rpc PostSignupNewUser(PostSignupNewUserRequest) returns (SignupNewUserResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/signupNewUser"
        body: "body"
      };
    }
    // Batch upload existing user accounts.
    rpc PostUploadAccount(PostUploadAccountRequest) returns (UploadAccountResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/uploadAccount"
        body: "body"
      };
    }
    // Verifies the assertion returned by the IdP.
    rpc PostVerifyAssertion(PostVerifyAssertionRequest) returns (VerifyAssertionResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/verifyAssertion"
        body: "body"
      };
    }
    // Verifies the developer asserted ID token.
    rpc PostVerifyCustomToken(PostVerifyCustomTokenRequest) returns (VerifyCustomTokenResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/verifyCustomToken"
        body: "body"
      };
    }
    // Verifies the user entered password.
    rpc PostVerifyPassword(PostVerifyPasswordRequest) returns (VerifyPasswordResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/verifyPassword"
        body: "body"
      };
    }
    // Verifies ownership of a phone number and creates/updates the user account accordingly.
    rpc PostVerifyPhoneNumber(PostVerifyPhoneNumberRequest) returns (IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse) {
      option (google.api.http) = {
        post: "/identitytoolkit/v3/relyingparty/verifyPhoneNumber"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googlecloudresourcemanager;

message GetV1LiensRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The maximum number of items to return. This is a suggestion for the server.
    int32 pageSize = 9;
    // The `next_page_token` value returned from a previous List request, if any.
    string pageToken = 10;
    // The name of the resource to list all attached Liens.
    // For example, `projects/1234`.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1LiensRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Lien body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Organizations:SearchRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SearchOrganizationsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1ProjectsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // An expression for filtering the results of the request.  Filter rules are
    // case insensitive. The fields eligible for filtering are:
    // 
    // + `name`
    // + `id`
    // + <code>labels.<em>key</em></code> where *key* is the name of a label
    // 
    // Some examples of using labels as filters:
    // 
    // |Filter|Description|
    // |------|-----------|
    // |name:how*|The project's name starts with "how".|
    // |name:Howl|The project's name is `Howl` or `howl`.|
    // |name:HOWL|Equivalent to above.|
    // |NAME:howl|Equivalent to above.|
    // |labels.color:*|The project has the label `color`.|
    // |labels.color:red|The project's label `color` has the value `red`.|
    // |labels.color:red&nbsp;labels.size:big|The project's label `color` has the value `red` and its label `size` has the value `big`.
    // 
    // If you specify a filter that has both `parent.type` and `parent.id`, then
    // the `resourcemanager.projects.list` permission is checked on the parent.
    // If the user has this permission, all projects under the parent will be
    // returned after remaining filters have been applied. If the user lacks this
    // permission, then all projects for which the user has the
    // `resourcemanager.projects.get` permission will be returned after remaining
    // filters have been applied. If no filter is specified, the call will return
    // projects for which the user has `resourcemanager.projects.get` permissions.
    // 
    // Optional.
    string filter = 7;
    string key = 8;
    string oauth_token = 9;
    // The maximum number of Projects to return in the response.
    // The server can return fewer Projects than requested.
    // If unspecified, server picks an appropriate default.
    // 
    // Optional.
    int32 pageSize = 10;
    // A pagination token returned from a previous call to ListProjects
    // that indicates from where listing should continue.
    // 
    // Optional.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1ProjectsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Project body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1ProjectsProjectIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // The Project ID (for example, `my-project-123`).
    // 
    // Required.
    string projectId = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV1ProjectsProjectIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Project body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project ID (for example, `my-project-123`).
    // 
    // Required.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1ProjectsProjectIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // The Project ID (for example, `foo-bar-123`).
    // 
    // Required.
    string projectId = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1ProjectsProjectId:GetAncestryRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GetAncestryRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The Project ID (for example, `my-project-123`).
    // 
    // Required.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1ProjectsProjectId:UndeleteRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UndeleteProjectRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project ID (for example, `foo-bar-123`).
    // 
    // Required.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1ProjectsResource:GetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1ProjectsResource:SetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1ProjectsResource:TestIamPermissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    TestIamPermissionsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name/identifier of the Lien to delete.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Resource:ClearOrgPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ClearOrgPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Name of the resource for the `Policy` to clear.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:GetEffectiveOrgPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GetEffectiveOrgPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of the resource to start computing the effective `Policy`.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:GetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:GetOrgPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GetOrgPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Name of the resource the `Policy` is set on.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:ListAvailableOrgPolicyConstraintsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ListAvailableOrgPolicyConstraintsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Name of the resource to list `Constraints` for.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:ListOrgPoliciesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ListOrgPoliciesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Name of the resource to list Policies for.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:SetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:SetOrgPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SetOrgPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Resource name of the resource to attach the `Policy`.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:TestIamPermissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    TestIamPermissionsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Ancestor {
    // Resource id of the ancestor.
    ResourceId resourceId = 1;
}

message AuditConfig {
    // The configuration for logging of each type of permission.
    // Next ID: 4
    repeated AuditLogConfig auditLogConfigs = 1;
    // Specifies a service that will be enabled for audit logging.
    // For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
    // `allServices` is a special value that covers all services.
    string service = 2;
}

message AuditLogConfig {
    // Specifies the identities that do not cause logging for this type of
    // permission.
    // Follows the same format of Binding.members.
    repeated string exemptedMembers = 1;
    // The log type that this config enables.
    enum AuditLogConfig_LogType {
        AUDITLOGCONFIG_LOGTYPE_LOG_TYPE_UNSPECIFIED = 0;
        AUDITLOGCONFIG_LOGTYPE_ADMIN_READ = 1;
        AUDITLOGCONFIG_LOGTYPE_DATA_WRITE = 2;
        AUDITLOGCONFIG_LOGTYPE_DATA_READ = 3;
    }
    AuditLogConfig_LogType logType = 2;
}

message Binding {
    // Specifies the identities requesting access for a Cloud Platform resource.
    // `members` can have the following values:
    // 
    // * `allUsers`: A special identifier that represents anyone who is
    //    on the internet; with or without a Google account.
    // 
    // * `allAuthenticatedUsers`: A special identifier that represents anyone
    //    who is authenticated with a Google account or a service account.
    // 
    // * `user:{emailid}`: An email address that represents a specific Google
    //    account. For example, `alice@gmail.com` or `joe@example.com`.
    // 
    // 
    // * `serviceAccount:{emailid}`: An email address that represents a service
    //    account. For example, `my-other-app@appspot.gserviceaccount.com`.
    // 
    // * `group:{emailid}`: An email address that represents a Google group.
    //    For example, `admins@example.com`.
    // 
    // 
    // * `domain:{domain}`: A Google Apps domain name that represents all the
    //    users of that domain. For example, `google.com` or `example.com`.
    // 
    repeated string members = 1;
    // Role that is assigned to `members`.
    // For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    // Required
    string role = 2;
}

message BooleanConstraint {
}

message BooleanPolicy {
    // If `true`, then the `Policy` is enforced. If `false`, then any
    // configuration is acceptable.
    // 
    // Suppose you have a `Constraint` `constraints/compute.disableSerialPortAccess`
    // with `constraint_default` set to `ALLOW`. A `Policy` for that
    // `Constraint` exhibits the following behavior:
    //   - If the `Policy` at this resource has enforced set to `false`, serial
    //     port connection attempts will be allowed.
    //   - If the `Policy` at this resource has enforced set to `true`, serial
    //     port connection attempts will be refused.
    //   - If the `Policy` at this resource is `RestoreDefault`, serial port
    //     connection attempts will be allowed.
    //   - If no `Policy` is set at this resource or anywhere higher in the
    //     resource hierarchy, serial port connection attempts will be allowed.
    //   - If no `Policy` is set at this resource, but one exists higher in the
    //     resource hierarchy, the behavior is as if the`Policy` were set at
    //     this resource.
    // 
    // The following examples demonstrate the different possible layerings:
    // 
    // Example 1 (nearest `Constraint` wins):
    //   `organizations/foo` has a `Policy` with:
    //     {enforced: false}
    //   `projects/bar` has no `Policy` set.
    // The constraint at `projects/bar` and `organizations/foo` will not be
    // enforced.
    // 
    // Example 2 (enforcement gets replaced):
    //   `organizations/foo` has a `Policy` with:
    //     {enforced: false}
    //   `projects/bar` has a `Policy` with:
    //     {enforced: true}
    // The constraint at `organizations/foo` is not enforced.
    // The constraint at `projects/bar` is enforced.
    // 
    // Example 3 (RestoreDefault):
    //   `organizations/foo` has a `Policy` with:
    //     {enforced: true}
    //   `projects/bar` has a `Policy` with:
    //     {RestoreDefault: {}}
    // The constraint at `organizations/foo` is enforced.
    // The constraint at `projects/bar` is not enforced, because
    // `constraint_default` for the `Constraint` is `ALLOW`.
    bool enforced = 1;
}

message ClearOrgPolicyRequest {
    // Name of the `Constraint` of the `Policy` to clear.
    string constraint = 1;
    // The current version, for concurrency control. Not sending an `etag`
    // will cause the `Policy` to be cleared blindly.
    string etag = 2;
}

message Constraint {
    // Defines this constraint as being a BooleanConstraint.
    BooleanConstraint booleanConstraint = 1;
    // The evaluation behavior of this constraint in the absense of 'Policy'.
    enum Constraint_ConstraintDefault {
        CONSTRAINT_CONSTRAINTDEFAULT_CONSTRAINT_DEFAULT_UNSPECIFIED = 0;
        CONSTRAINT_CONSTRAINTDEFAULT_ALLOW = 1;
        CONSTRAINT_CONSTRAINTDEFAULT_DENY = 2;
    }
    Constraint_ConstraintDefault constraintDefault = 2;
    // Detailed description of what this `Constraint` controls as well as how and
    // where it is enforced.
    // 
    // Mutable.
    string description = 3;
    // The human readable name.
    // 
    // Mutable.
    string displayName = 4;
    // Defines this constraint as being a ListConstraint.
    ListConstraint listConstraint = 5;
    // Immutable value, required to globally be unique. For example,
    // `constraints/serviceuser.services`
    string name = 6;
    // Version of the `Constraint`. Default version is 0;
    int32 version = 7;
}

message Empty {
}

message FolderOperation {
    // The resource name of the folder or organization we are either creating
    // the folder under or moving the folder to.
    string destinationParent = 1;
    // The display name of the folder.
    string displayName = 2;
    // The type of this operation.
    enum FolderOperation_OperationType {
        FOLDEROPERATION_OPERATIONTYPE_OPERATION_TYPE_UNSPECIFIED = 0;
        FOLDEROPERATION_OPERATIONTYPE_CREATE = 1;
        FOLDEROPERATION_OPERATIONTYPE_MOVE = 2;
    }
    FolderOperation_OperationType operationType = 3;
    // The resource name of the folder's parent.
    // Only applicable when the operation_type is MOVE.
    string sourceParent = 4;
}

message FolderOperationError {
    // The type of operation error experienced.
    enum FolderOperationError_ErrorMessageId {
        FOLDEROPERATIONERROR_ERRORMESSAGEID_ERROR_TYPE_UNSPECIFIED = 0;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_ACTIVE_FOLDER_HEIGHT_VIOLATION = 1;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_MAX_CHILD_FOLDERS_VIOLATION = 2;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_FOLDER_NAME_UNIQUENESS_VIOLATION = 3;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_RESOURCE_DELETED_VIOLATION = 4;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_PARENT_DELETED_VIOLATION = 5;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_CYCLE_INTRODUCED_VIOLATION = 6;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_FOLDER_BEING_MOVED_VIOLATION = 7;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_FOLDER_TO_DELETE_NON_EMPTY_VIOLATION = 8;
        FOLDEROPERATIONERROR_ERRORMESSAGEID_DELETED_FOLDER_HEIGHT_VIOLATION = 9;
    }
    FolderOperationError_ErrorMessageId errorMessageId = 1;
}

message GetAncestryRequest {
}

message GetAncestryResponse {
    // Ancestors are ordered from bottom to top of the resource hierarchy. The
    // first ancestor is the project itself, followed by the project's parent,
    // etc.
    repeated Ancestor ancestor = 1;
}

message GetEffectiveOrgPolicyRequest {
    // The name of the `Constraint` to compute the effective `Policy`.
    string constraint = 1;
}

message GetIamPolicyRequest {
}

message GetOrgPolicyRequest {
    // Name of the `Constraint` to get the `Policy`.
    string constraint = 1;
}

message Lien {
    // The creation time of this Lien.
    string createTime = 1;
    // A system-generated unique identifier for this Lien.
    // 
    // Example: `liens/1234abcd`
    string name = 2;
    // A stable, user-visible/meaningful string identifying the origin of the
    // Lien, intended to be inspected programmatically. Maximum length of 200
    // characters.
    // 
    // Example: 'compute.googleapis.com'
    string origin = 3;
    // A reference to the resource this Lien is attached to. The server will
    // validate the parent against those for which Liens are supported.
    // 
    // Example: `projects/1234`
    string parent = 4;
    // Concise user-visible strings indicating why an action cannot be performed
    // on a resource. Maximum lenth of 200 characters.
    // 
    // Example: 'Holds production API key'
    string reason = 5;
    // The types of operations which should be blocked as a result of this Lien.
    // Each value should correspond to an IAM permission. The server will
    // validate the permissions against those for which Liens are supported.
    // 
    // An empty list is meaningless and will be rejected.
    // 
    // Example: ['resourcemanager.projects.delete']
    repeated string restrictions = 6;
}

message ListAvailableOrgPolicyConstraintsRequest {
    // Size of the pages to be returned. This is currently unsupported and will
    // be ignored. The server may at any point start using this field to limit
    // page size.
    int32 pageSize = 1;
    // Page token used to retrieve the next page. This is currently unsupported
    // and will be ignored. The server may at any point start using this field.
    string pageToken = 2;
}

message ListAvailableOrgPolicyConstraintsResponse {
    // The collection of constraints that are settable on the request resource.
    repeated Constraint constraints = 1;
    // Page token used to retrieve the next page. This is currently not used.
    string nextPageToken = 2;
}

message ListConstraint {
    // Optional. The Google Cloud Console will try to default to a configuration
    // that matches the value specified in this `Constraint`.
    string suggestedValue = 1;
}

message ListLiensResponse {
    // A list of Liens.
    repeated Lien liens = 1;
    // Token to retrieve the next page of results, or empty if there are no more
    // results in the list.
    string nextPageToken = 2;
}

message ListOrgPoliciesRequest {
    // Size of the pages to be returned. This is currently unsupported and will
    // be ignored. The server may at any point start using this field to limit
    // page size.
    int32 pageSize = 1;
    // Page token used to retrieve the next page. This is currently unsupported
    // and will be ignored. The server may at any point start using this field.
    string pageToken = 2;
}

message ListOrgPoliciesResponse {
    // Page token used to retrieve the next page. This is currently not used, but
    // the server may at any point start supplying a valid token.
    string nextPageToken = 1;
    // The `Policies` that are set on the resource. It will be empty if no
    // `Policies` are set.
    repeated OrgPolicy policies = 2;
}

message ListPolicy {
    // The policy all_values state.
    enum ListPolicy_AllValue {
        LISTPOLICY_ALLVALUE_ALL_VALUES_UNSPECIFIED = 0;
        LISTPOLICY_ALLVALUE_ALLOW = 1;
        LISTPOLICY_ALLVALUE_DENY = 2;
    }
    ListPolicy_AllValue allValues = 1;
    // List of values allowed  at this resource. Can only be set if no values
    // are set for `denied_values` and `all_values` is set to
    // `ALL_VALUES_UNSPECIFIED`.
    repeated string allowedValues = 2;
    // List of values denied at this resource. Can only be set if no values are
    // set for `allowed_values` and `all_values` is set to
    // `ALL_VALUES_UNSPECIFIED`.
    repeated string deniedValues = 3;
    // Determines the inheritance behavior for this `Policy`.
    // 
    // By default, a `ListPolicy` set at a resource supercedes any `Policy` set
    // anywhere up the resource hierarchy. However, if `inherit_from_parent` is
    // set to `true`, then the values from the effective `Policy` of the parent
    // resource are inherited, meaning the values set in this `Policy` are
    // added to the values inherited up the hierarchy.
    // 
    // Setting `Policy` hierarchies that inherit both allowed values and denied
    // values isn't recommended in most circumstances to keep the configuration
    // simple and understandable. However, it is possible to set a `Policy` with
    // `allowed_values` set that inherits a `Policy` with `denied_values` set.
    // In this case, the values that are allowed must be in `allowed_values` and
    // not present in `denied_values`.
    // 
    // For example, suppose you have a `Constraint`
    // `constraints/serviceuser.services`, which has a `constraint_type` of
    // `list_constraint`, and with `constraint_default` set to `ALLOW`.
    // Suppose that at the Organization level, a `Policy` is applied that
    // restricts the allowed API activations to {`E1`, `E2`}. Then, if a
    // `Policy` is applied to a project below the Organization that has
    // `inherit_from_parent` set to `false` and field all_values set to DENY,
    // then an attempt to activate any API will be denied.
    // 
    // The following examples demonstrate different possible layerings:
    // 
    // Example 1 (no inherited values):
    //   `organizations/foo` has a `Policy` with values:
    //     {allowed_values: “E1” allowed_values:”E2”}
    //   ``projects/bar`` has `inherit_from_parent` `false` and values:
    //     {allowed_values: "E3" allowed_values: "E4"}
    // The accepted values at `organizations/foo` are `E1`, `E2`.
    // The accepted values at `projects/bar` are `E3`, and `E4`.
    // 
    // Example 2 (inherited values):
    //   `organizations/foo` has a `Policy` with values:
    //     {allowed_values: “E1” allowed_values:”E2”}
    //   `projects/bar` has a `Policy` with values:
    //     {value: “E3” value: ”E4” inherit_from_parent: true}
    // The accepted values at `organizations/foo` are `E1`, `E2`.
    // The accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`.
    // 
    // Example 3 (inheriting both allowed and denied values):
    //   `organizations/foo` has a `Policy` with values:
    //     {allowed_values: "E1" allowed_values: "E2"}
    //   `projects/bar` has a `Policy` with:
    //     {denied_values: "E1"}
    // The accepted values at `organizations/foo` are `E1`, `E2`.
    // The value accepted at `projects/bar` is `E2`.
    // 
    // Example 4 (RestoreDefault):
    //   `organizations/foo` has a `Policy` with values:
    //     {allowed_values: “E1” allowed_values:”E2”}
    //   `projects/bar` has a `Policy` with values:
    //     {RestoreDefault: {}}
    // The accepted values at `organizations/foo` are `E1`, `E2`.
    // The accepted values at `projects/bar` are either all or none depending on
    // the value of `constraint_default` (if `ALLOW`, all; if
    // `DENY`, none).
    // 
    // Example 5 (no policy inherits parent policy):
    //   `organizations/foo` has no `Policy` set.
    //   `projects/bar` has no `Policy` set.
    // The accepted values at both levels are either all or none depending on
    // the value of `constraint_default` (if `ALLOW`, all; if
    // `DENY`, none).
    // 
    // Example 6 (ListConstraint allowing all):
    //   `organizations/foo` has a `Policy` with values:
    //     {allowed_values: “E1” allowed_values: ”E2”}
    //   `projects/bar` has a `Policy` with:
    //     {all: ALLOW}
    // The accepted values at `organizations/foo` are `E1`, E2`.
    // Any value is accepted at `projects/bar`.
    // 
    // Example 7 (ListConstraint allowing none):
    //   `organizations/foo` has a `Policy` with values:
    //     {allowed_values: “E1” allowed_values: ”E2”}
    //   `projects/bar` has a `Policy` with:
    //     {all: DENY}
    // The accepted values at `organizations/foo` are `E1`, E2`.
    // No value is accepted at `projects/bar`.
    bool inheritFromParent = 4;
    // Optional. The Google Cloud Console will try to default to a configuration
    // that matches the value specified in this `Policy`. If `suggested_value`
    // is not set, it will inherit the value specified higher in the hierarchy,
    // unless `inherit_from_parent` is `false`.
    string suggestedValue = 5;
}

message ListProjectsResponse {
    // Pagination token.
    // 
    // If the result set is too large to fit in a single response, this token
    // is returned. It encodes the position of the current result cursor.
    // Feeding this value into a new list request with the `page_token` parameter
    // gives the next page of the results.
    // 
    // When `next_page_token` is not filled in, there is no next page and
    // the list returned is the last page in the result set.
    // 
    // Pagination tokens have a limited lifetime.
    string nextPageToken = 1;
    // The list of Projects that matched the list filter. This list can
    // be paginated.
    repeated Project projects = 2;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation.  It typically
    // contains progress information and common metadata such as create time.
    // Some services might not provide such metadata.  Any method that returns a
    // long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `operations/some/unique/name`.
    string name = 4;
    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    map<string, > response = 5;
}

message OrgPolicy {
    // For boolean `Constraints`, whether to enforce the `Constraint` or not.
    BooleanPolicy booleanPolicy = 1;
    // The name of the `Constraint` the `Policy` is configuring, for example,
    // `constraints/serviceuser.services`.
    // 
    // Immutable after creation.
    string constraint = 2;
    // An opaque tag indicating the current version of the `Policy`, used for
    // concurrency control.
    // 
    // When the `Policy` is returned from either a `GetPolicy` or a
    // `ListOrgPolicy` request, this `etag` indicates the version of the current
    // `Policy` to use when executing a read-modify-write loop.
    // 
    // When the `Policy` is returned from a `GetEffectivePolicy` request, the
    // `etag` will be unset.
    // 
    // When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value
    // that was returned from a `GetOrgPolicy` request as part of a
    // read-modify-write loop for concurrency control. Not setting the `etag`in a
    // `SetOrgPolicy` request will result in an unconditional write of the
    // `Policy`.
    string etag = 3;
    // List of values either allowed or disallowed.
    ListPolicy listPolicy = 4;
    // Restores the default behavior of the constraint; independent of
    // `Constraint` type.
    RestoreDefault restoreDefault = 5;
    // The time stamp the `Policy` was previously updated. This is set by the
    // server, not specified by the caller, and represents the last time a call to
    // `SetOrgPolicy` was made for that `Policy`. Any value set by the client will
    // be ignored.
    string updateTime = 6;
    // Version of the `Policy`. Default version is 0;
    int32 version = 7;
}

message Organization {
    // Timestamp when the Organization was created. Assigned by the server.
    // @OutputOnly
    string creationTime = 1;
    // A friendly string to be used to refer to the Organization in the UI.
    // Assigned by the server, set to the primary domain of the G Suite
    // customer that owns the organization.
    // @OutputOnly
    string displayName = 2;
    // The organization's current lifecycle state. Assigned by the server.
    // @OutputOnly
    enum Organization_LifecycleState {
        ORGANIZATION_LIFECYCLESTATE_LIFECYCLE_STATE_UNSPECIFIED = 0;
        ORGANIZATION_LIFECYCLESTATE_ACTIVE = 1;
        ORGANIZATION_LIFECYCLESTATE_DELETE_REQUESTED = 2;
    }
    Organization_LifecycleState lifecycleState = 3;
    // Output Only. The resource name of the organization. This is the
    // organization's relative path in the API. Its format is
    // "organizations/[organization_id]". For example, "organizations/1234".
    string name = 4;
    // The owner of this Organization. The owner should be specified on
    // creation. Once set, it cannot be changed.
    // This field is required.
    OrganizationOwner owner = 5;
}

message OrganizationOwner {
    // The Google for Work customer id used in the Directory API.
    string directoryCustomerId = 1;
}

message Policy {
    // Specifies cloud audit logging configuration for this policy.
    repeated AuditConfig auditConfigs = 1;
    // Associates a list of `members` to a `role`.
    // `bindings` with no members will result in an error.
    repeated Binding bindings = 2;
    // `etag` is used for optimistic concurrency control as a way to help
    // prevent simultaneous updates of a policy from overwriting each other.
    // It is strongly suggested that systems make use of the `etag` in the
    // read-modify-write cycle to perform policy updates in order to avoid race
    // conditions: An `etag` is returned in the response to `getIamPolicy`, and
    // systems are expected to put that etag in the request to `setIamPolicy` to
    // ensure that their change will be applied to the same version of the policy.
    // 
    // If no `etag` is provided in the call to `setIamPolicy`, then the existing
    // policy is overwritten blindly.
    string etag = 3;
    // Version of the `Policy`. The default version is 0.
    int32 version = 4;
}

message Project {
    // Creation time.
    // 
    // Read-only.
    string createTime = 1;
    // The labels associated with this Project.
    // 
    // Label keys must be between 1 and 63 characters long and must conform
    // to the following regular expression: \[a-z\](\[-a-z0-9\]*\[a-z0-9\])?.
    // 
    // Label values must be between 0 and 63 characters long and must conform
    // to the regular expression (\[a-z\](\[-a-z0-9\]*\[a-z0-9\])?)?.
    // 
    // No more than 256 labels can be associated with a given resource.
    // 
    // Clients should store labels in a representation such as JSON that does not
    // depend on specific characters being disallowed.
    // 
    // Example: <code>"environment" : "dev"</code>
    // Read-write.
    map<string, string> labels = 2;
    // The Project lifecycle state.
    // 
    // Read-only.
    enum Project_LifecycleState {
        PROJECT_LIFECYCLESTATE_LIFECYCLE_STATE_UNSPECIFIED = 0;
        PROJECT_LIFECYCLESTATE_ACTIVE = 1;
        PROJECT_LIFECYCLESTATE_DELETE_REQUESTED = 2;
        PROJECT_LIFECYCLESTATE_DELETE_IN_PROGRESS = 3;
    }
    Project_LifecycleState lifecycleState = 3;
    // The user-assigned display name of the Project.
    // It must be 4 to 30 characters.
    // Allowed characters are: lowercase and uppercase letters, numbers,
    // hyphen, single-quote, double-quote, space, and exclamation point.
    // 
    // Example: <code>My Project</code>
    // Read-write.
    string name = 4;
    // An optional reference to a parent Resource.
    // 
    // The only supported parent type is "organization". Once set, the parent
    // cannot be modified. The `parent` can be set on creation or using the
    // `UpdateProject` method; the end user must have the
    // `resourcemanager.projects.create` permission on the parent.
    // 
    // Read-write.
    ResourceId parent = 5;
    // The unique, user-assigned ID of the Project.
    // It must be 6 to 30 lowercase letters, digits, or hyphens.
    // It must start with a letter.
    // Trailing hyphens are prohibited.
    // 
    // Example: <code>tokyo-rain-123</code>
    // Read-only after creation.
    string projectId = 6;
    // The number uniquely identifying the project.
    // 
    // Example: <code>415104041262</code>
    // Read-only.
    string projectNumber = 7;
}

message ProjectCreationStatus {
    // Creation time of the project creation workflow.
    string createTime = 1;
    // True if the project can be retrieved using GetProject. No other operations
    // on the project are guaranteed to work until the project creation is
    // complete.
    bool gettable = 2;
    // True if the project creation process is complete.
    bool ready = 3;
}

message ResourceId {
    // Required field for the type-specific id. This should correspond to the id
    // used in the type-specific API's.
    string id = 1;
    // Required field representing the resource type this id is for.
    // At present, the valid types are: "organization"
    string type = 2;
}

message RestoreDefault {
}

message SearchOrganizationsRequest {
    // An optional query string used to filter the Organizations to return in
    // the response. Filter rules are case-insensitive.
    // 
    // 
    // Organizations may be filtered by `owner.directoryCustomerId` or by
    // `domain`, where the domain is a Google for Work domain, for example:
    // 
    // |Filter|Description|
    // |------|-----------|
    // |owner.directorycustomerid:123456789|Organizations with
    // `owner.directory_customer_id` equal to `123456789`.|
    // |domain:google.com|Organizations corresponding to the domain `google.com`.|
    // 
    // This field is optional.
    string filter = 1;
    // The maximum number of Organizations to return in the response.
    // This field is optional.
    int32 pageSize = 2;
    // A pagination token returned from a previous call to `SearchOrganizations`
    // that indicates from where listing should continue.
    // This field is optional.
    string pageToken = 3;
}

message SearchOrganizationsResponse {
    // A pagination token to be used to retrieve the next page of results. If the
    // result is too large to fit within the page size specified in the request,
    // this field will be set with a token that can be used to fetch the next page
    // of results. If this field is empty, it indicates that this response
    // contains the last page of results.
    string nextPageToken = 1;
    // The list of Organizations that matched the search query, possibly
    // paginated.
    repeated Organization organizations = 2;
}

message SetIamPolicyRequest {
    // REQUIRED: The complete policy to be applied to the `resource`. The size of
    // the policy is limited to a few 10s of KB. An empty policy is a
    // valid policy but certain Cloud Platform services (such as Projects)
    // might reject them.
    Policy policy = 1;
    // OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
    // the fields in the mask will be modified. If no mask is provided, the
    // following default mask is used:
    // paths: "bindings, etag"
    // This field is only used by Cloud IAM.
    string updateMask = 2;
}

message SetOrgPolicyRequest {
    // `Policy` to set on the resource.
    OrgPolicy policy = 1;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message TestIamPermissionsRequest {
    // The set of permissions to check for the `resource`. Permissions with
    // wildcards (such as '*' or 'storage.*') are not allowed. For more
    // information see
    // [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
    repeated string permissions = 1;
}

message TestIamPermissionsResponse {
    // A subset of `TestPermissionsRequest.permissions` that the caller is
    // allowed.
    repeated string permissions = 1;
}

message UndeleteProjectRequest {
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudResourceManagerService {
    // List all Liens applied to the `parent` resource.
    // 
    // Callers of this method will require permission on the `parent` resource.
    // For example, a Lien with a `parent` of `projects/1234` requires permission
    // `resourcemanager.projects.get`.
    rpc GetV1Liens(GetV1LiensRequest) returns (ListLiensResponse) {
      option (google.api.http) = {
        get: "//v1/liens"
      };
    }
    // Create a Lien which applies to the resource denoted by the `parent` field.
    // 
    // Callers of this method will require permission on the `parent` resource.
    // For example, applying to `projects/1234` requires permission
    // `resourcemanager.projects.updateLiens`.
    // 
    // NOTE: Some resources may limit the number of Liens which may be applied.
    rpc PostV1Liens(PostV1LiensRequest) returns (Lien) {
      option (google.api.http) = {
        post: "//v1/liens"
        body: "body"
      };
    }
    // Searches Organization resources that are visible to the user and satisfy
    // the specified filter. This method returns Organizations in an unspecified
    // order. New Organizations do not necessarily appear at the end of the
    // results.
    // 
    // Search will only return organizations on which the user has the permission
    // `resourcemanager.organizations.get`
    rpc PostV1Organizations:Search(PostV1Organizations:SearchRequest) returns (SearchOrganizationsResponse) {
      option (google.api.http) = {
        post: "//v1/organizations:search"
        body: "body"
      };
    }
    // Lists Projects that are visible to the user and satisfy the
    // specified filter. This method returns Projects in an unspecified order.
    // New Projects do not necessarily appear at the end of the list.
    rpc GetV1Projects(GetV1ProjectsRequest) returns (ListProjectsResponse) {
      option (google.api.http) = {
        get: "//v1/projects"
      };
    }
    // Request that a new Project be created. The result is an Operation which
    // can be used to track the creation process. It is automatically deleted
    // after a few hours, so there is no need to call DeleteOperation.
    // 
    // Our SLO permits Project creation to take up to 30 seconds at the 90th
    // percentile. As of 2016-08-29, we are observing 6 seconds 50th percentile
    // latency. 95th percentile latency is around 11 seconds. We recommend
    // polling at the 5th second with an exponential backoff.
    // 
    // Authorization requires the Google IAM permission
    // `resourcemanager.projects.create` on the specified parent for the new
    // project.
    rpc PostV1Projects(PostV1ProjectsRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/projects"
        body: "body"
      };
    }
    // Retrieves the Project identified by the specified
    // `project_id` (for example, `my-project-123`).
    // 
    // The caller must have read permissions for this Project.
    rpc GetV1ProjectsProjectId(GetV1ProjectsProjectIdRequest) returns (Project) {
      option (google.api.http) = {
        get: "//v1/projects/{projectId}"
      };
    }
    // Updates the attributes of the Project identified by the specified
    // `project_id` (for example, `my-project-123`).
    // 
    // The caller must have modify permissions for this Project.
    rpc PutV1ProjectsProjectId(PutV1ProjectsProjectIdRequest) returns (Project) {
      option (google.api.http) = {
        put: "//v1/projects/{projectId}"
        body: "body"
      };
    }
    // Marks the Project identified by the specified
    // `project_id` (for example, `my-project-123`) for deletion.
    // This method will only affect the Project if the following criteria are met:
    // 
    // + The Project does not have a billing account associated with it.
    // + The Project has a lifecycle state of
    // ACTIVE.
    // 
    // This method changes the Project's lifecycle state from
    // ACTIVE
    // to DELETE_REQUESTED.
    // The deletion starts at an unspecified time,
    // at which point the Project is no longer accessible.
    // 
    // Until the deletion completes, you can check the lifecycle state
    // checked by retrieving the Project with GetProject,
    // and the Project remains visible to ListProjects.
    // However, you cannot update the project.
    // 
    // After the deletion completes, the Project is not retrievable by
    // the  GetProject and
    // ListProjects methods.
    // 
    // The caller must have modify permissions for this Project.
    rpc DeleteV1ProjectsProjectId(DeleteV1ProjectsProjectIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/projects/{projectId}"
      };
    }
    // Gets a list of ancestors in the resource hierarchy for the Project
    // identified by the specified `project_id` (for example, `my-project-123`).
    // 
    // The caller must have read permissions for this Project.
    rpc PostV1ProjectsProjectId:GetAncestry(PostV1ProjectsProjectId:GetAncestryRequest) returns (GetAncestryResponse) {
      option (google.api.http) = {
        post: "//v1/projects/{projectId}:getAncestry"
        body: "body"
      };
    }
    // Restores the Project identified by the specified
    // `project_id` (for example, `my-project-123`).
    // You can only use this method for a Project that has a lifecycle state of
    // DELETE_REQUESTED.
    // After deletion starts, the Project cannot be restored.
    // 
    // The caller must have modify permissions for this Project.
    rpc PostV1ProjectsProjectId:Undelete(PostV1ProjectsProjectId:UndeleteRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/projects/{projectId}:undelete"
        body: "body"
      };
    }
    // Returns the IAM access control policy for the specified Project.
    // Permission is denied if the policy or the resource does not exist.
    // 
    // Authorization requires the Google IAM permission
    // `resourcemanager.projects.getIamPolicy` on the project
    rpc PostV1ProjectsResource:GetIamPolicy(PostV1ProjectsResource:GetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1/projects/{resource}:getIamPolicy"
        body: "body"
      };
    }
    // Sets the IAM access control policy for the specified Project. Replaces
    // any existing policy.
    // 
    // The following constraints apply when using `setIamPolicy()`:
    // 
    // + Project does not support `allUsers` and `allAuthenticatedUsers` as
    // `members` in a `Binding` of a `Policy`.
    // 
    // + The owner role can be granted only to `user` and `serviceAccount`.
    // 
    // + Service accounts can be made owners of a project directly
    // without any restrictions. However, to be added as an owner, a user must be
    // invited via Cloud Platform console and must accept the invitation.
    // 
    // + A user cannot be granted the owner role using `setIamPolicy()`. The user
    // must be granted the owner role using the Cloud Platform Console and must
    // explicitly accept the invitation.
    // 
    // + Invitations to grant the owner role cannot be sent using
    // `setIamPolicy()`;
    // they must be sent only using the Cloud Platform Console.
    // 
    // + Membership changes that leave the project without any owners that have
    // accepted the Terms of Service (ToS) will be rejected.
    // 
    // + If the project is not part of an organization, there must be at least
    // one owner who has accepted the Terms of Service (ToS) agreement in the
    // policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
    // from the policy will fail. This restriction also applies to legacy
    // projects that no longer have owners who have accepted the ToS. Edits to
    // IAM policies will be rejected until the lack of a ToS-accepting owner is
    // rectified.
    // 
    // + Calling this method requires enabling the App Engine Admin API.
    // 
    // Note: Removing service accounts from policies or changing their roles
    // can render services completely inoperable. It is important to understand
    // how the service account is being used before removing or updating its
    // roles.
    // 
    // Authorization requires the Google IAM permission
    // `resourcemanager.projects.setIamPolicy` on the project
    rpc PostV1ProjectsResource:SetIamPolicy(PostV1ProjectsResource:SetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1/projects/{resource}:setIamPolicy"
        body: "body"
      };
    }
    // Returns permissions that a caller has on the specified Project.
    // 
    // There are no permissions required for making this API call.
    rpc PostV1ProjectsResource:TestIamPermissions(PostV1ProjectsResource:TestIamPermissionsRequest) returns (TestIamPermissionsResponse) {
      option (google.api.http) = {
        post: "//v1/projects/{resource}:testIamPermissions"
        body: "body"
      };
    }
    // Gets the latest state of a long-running operation.  Clients can use this
    // method to poll the operation result at intervals as recommended by the API
    // service.
    rpc GetV1Name(GetV1NameRequest) returns (Operation) {
      option (google.api.http) = {
        get: "//v1/{name}"
      };
    }
    // Delete a Lien by `name`.
    // 
    // Callers of this method will require permission on the `parent` resource.
    // For example, a Lien with a `parent` of `projects/1234` requires permission
    // `resourcemanager.projects.updateLiens`.
    rpc DeleteV1Name(DeleteV1NameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/{name}"
      };
    }
    // Clears a `Policy` from a resource.
    rpc PostV1Resource:ClearOrgPolicy(PostV1Resource:ClearOrgPolicyRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{resource}:clearOrgPolicy"
        body: "body"
      };
    }
    // Gets the effective `Policy` on a resource. This is the result of merging
    // `Policies` in the resource hierarchy. The returned `Policy` will not have
    // an `etag`set because it is a computed `Policy` across multiple resources.
    rpc PostV1Resource:GetEffectiveOrgPolicy(PostV1Resource:GetEffectiveOrgPolicyRequest) returns (OrgPolicy) {
      option (google.api.http) = {
        post: "//v1/{resource}:getEffectiveOrgPolicy"
        body: "body"
      };
    }
    // Gets the access control policy for an Organization resource. May be empty
    // if no such policy or resource exists. The `resource` field should be the
    // organization's resource name, e.g. "organizations/123".
    // 
    // Authorization requires the Google IAM permission
    // `resourcemanager.organizations.getIamPolicy` on the specified organization
    rpc PostV1Resource:GetIamPolicy(PostV1Resource:GetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1/{resource}:getIamPolicy"
        body: "body"
      };
    }
    // Gets a `Policy` on a resource.
    // 
    // If no `Policy` is set on the resource, a `Policy` is returned with default
    // values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The
    // `etag` value can be used with `SetOrgPolicy()` to create or update a
    // `Policy` during read-modify-write.
    rpc PostV1Resource:GetOrgPolicy(PostV1Resource:GetOrgPolicyRequest) returns (OrgPolicy) {
      option (google.api.http) = {
        post: "//v1/{resource}:getOrgPolicy"
        body: "body"
      };
    }
    // Lists `Constraints` that could be applied on the specified resource.
    rpc PostV1Resource:ListAvailableOrgPolicyConstraints(PostV1Resource:ListAvailableOrgPolicyConstraintsRequest) returns (ListAvailableOrgPolicyConstraintsResponse) {
      option (google.api.http) = {
        post: "//v1/{resource}:listAvailableOrgPolicyConstraints"
        body: "body"
      };
    }
    // Lists all the `Policies` set for a particular resource.
    rpc PostV1Resource:ListOrgPolicies(PostV1Resource:ListOrgPoliciesRequest) returns (ListOrgPoliciesResponse) {
      option (google.api.http) = {
        post: "//v1/{resource}:listOrgPolicies"
        body: "body"
      };
    }
    // Sets the access control policy on an Organization resource. Replaces any
    // existing policy. The `resource` field should be the organization's resource
    // name, e.g. "organizations/123".
    // 
    // Authorization requires the Google IAM permission
    // `resourcemanager.organizations.setIamPolicy` on the specified organization
    rpc PostV1Resource:SetIamPolicy(PostV1Resource:SetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1/{resource}:setIamPolicy"
        body: "body"
      };
    }
    // Updates the specified `Policy` on the resource. Creates a new `Policy` for
    // that `Constraint` on the resource if one does not exist.
    // 
    // Not supplying an `etag` on the request `Policy` results in an unconditional
    // write of the `Policy`.
    rpc PostV1Resource:SetOrgPolicy(PostV1Resource:SetOrgPolicyRequest) returns (OrgPolicy) {
      option (google.api.http) = {
        post: "//v1/{resource}:setOrgPolicy"
        body: "body"
      };
    }
    // Returns permissions that a caller has on the specified Organization.
    // The `resource` field should be the organization's resource name,
    // e.g. "organizations/123".
    // 
    // There are no permissions required for making this API call.
    rpc PostV1Resource:TestIamPermissions(PostV1Resource:TestIamPermissionsRequest) returns (TestIamPermissionsResponse) {
      option (google.api.http) = {
        post: "//v1/{resource}:testIamPermissions"
        body: "body"
      };
    }
}

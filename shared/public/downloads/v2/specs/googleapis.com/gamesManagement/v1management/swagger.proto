syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googleplaygameservicesmanagement;

message PostAchievementsResetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostAchievementsResetAllForAllPlayersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostAchievementsResetMultipleForAllPlayersRequest {
    alt alt = 1;
    AchievementResetMultipleForAllRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostAchievementsAchievementIdResetRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostAchievementsAchievementIdResetForAllPlayersRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetApplicationsApplicationIdPlayersHiddenRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of player resources to return in the response, used for paging. For any response, the actual number of player resources returned may be less than the specified maxResults.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostApplicationsApplicationIdPlayersHiddenPlayerIdRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // A player ID. A value of me may be used in place of the authenticated player's ID.
    string playerId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteApplicationsApplicationIdPlayersHiddenPlayerIdRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // A player ID. A value of me may be used in place of the authenticated player's ID.
    string playerId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostEventsResetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostEventsResetAllForAllPlayersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostEventsResetMultipleForAllPlayersRequest {
    alt alt = 1;
    EventsResetMultipleForAllRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostEventsEventIdResetRequest {
    alt alt = 1;
    // The ID of the event.
    string eventId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostEventsEventIdResetForAllPlayersRequest {
    alt alt = 1;
    // The ID of the event.
    string eventId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostLeaderboardsLeaderboardIdScoresResetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the leaderboard.
    string leaderboardId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostLeaderboardsLeaderboardIdScoresResetForAllPlayersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the leaderboard.
    string leaderboardId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostQuestsResetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostQuestsResetAllForAllPlayersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostQuestsResetMultipleForAllPlayersRequest {
    alt alt = 1;
    QuestsResetMultipleForAllRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostQuestsQuestIdResetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The ID of the quest.
    string questId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostQuestsQuestIdResetForAllPlayersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The ID of the quest.
    string questId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostRoomsResetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostRoomsResetForAllPlayersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostScoresResetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostScoresResetAllForAllPlayersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostScoresResetMultipleForAllPlayersRequest {
    alt alt = 1;
    ScoresResetMultipleForAllRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostTurnbasedmatchesResetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostTurnbasedmatchesResetForAllPlayersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message AchievementResetAllResponse {
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#achievementResetAllResponse.
    string kind = 1;
    // The achievement reset results.
    repeated AchievementResetResponse results = 2;
}

message AchievementResetMultipleForAllRequest {
    // The IDs of achievements to reset.
    repeated string achievement_ids = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#achievementResetMultipleForAllRequest.
    string kind = 2;
}

message AchievementResetResponse {
    // The current state of the achievement. This is the same as the initial state of the achievement.
    // Possible values are:  
    // - "HIDDEN"- Achievement is hidden. 
    // - "REVEALED" - Achievement is revealed. 
    // - "UNLOCKED" - Achievement is unlocked.
    string currentState = 1;
    // The ID of an achievement for which player state has been updated.
    string definitionId = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#achievementResetResponse.
    string kind = 3;
    // Flag to indicate if the requested update actually occurred.
    bool updateOccurred = 4;
}

message EventsResetMultipleForAllRequest {
    // The IDs of events to reset.
    repeated string event_ids = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#eventsResetMultipleForAllRequest.
    string kind = 2;
}

message GamesPlayedResource {
    // True if the player was auto-matched with the currently authenticated user.
    bool autoMatched = 1;
    // The last time the player played the game in milliseconds since the epoch in UTC.
    string timeMillis = 2;
}

message GamesPlayerExperienceInfoResource {
    // The current number of experience points for the player.
    string currentExperiencePoints = 1;
    // The current level of the player.
    GamesPlayerLevelResource currentLevel = 2;
    // The timestamp when the player was leveled up, in millis since Unix epoch UTC.
    string lastLevelUpTimestampMillis = 3;
    // The next level of the player. If the current level is the maximum level, this should be same as the current level.
    GamesPlayerLevelResource nextLevel = 4;
}

message GamesPlayerLevelResource {
    // The level for the user.
    int32 level = 1;
    // The maximum experience points for this level.
    string maxExperiencePoints = 2;
    // The minimum experience points for this level.
    string minExperiencePoints = 3;
}

message HiddenPlayer {
    // The time this player was hidden.
    string hiddenTimeMillis = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#hiddenPlayer.
    string kind = 2;
    // The player information.
    Player player = 3;
}

message HiddenPlayerList {
    // The players.
    repeated HiddenPlayer items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#hiddenPlayerList.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
}

message Player {
    // The base URL for the image that represents the player.
    string avatarImageUrl = 1;
    // The url to the landscape mode player banner image.
    string bannerUrlLandscape = 2;
    // The url to the portrait mode player banner image.
    string bannerUrlPortrait = 3;
    // The name to display for the player.
    string displayName = 4;
    // An object to represent Play Game experience information for the player.
    GamesPlayerExperienceInfoResource experienceInfo = 5;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#player.
    string kind = 6;
    // Details about the last time this player played a multiplayer game with the currently authenticated player. Populated for PLAYED_WITH player collection members.
    GamesPlayedResource lastPlayedWith = 7;
    // An object representation of the individual components of the player's name. For some players, these fields may not be present.
    message Name {
            // The family name of this player. In some places, this is known as the last name.
    string familyName = 1;
            // The given name of this player. In some places, this is known as the first name.
    string givenName = 2;
    }
    Name name = 8;
    // The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.
    string originalPlayerId = 9;
    // The ID of the player.
    string playerId = 10;
    // The player's profile settings. Controls whether or not the player's profile is visible to other players.
    ProfileSettings profileSettings = 11;
    // The player's title rewarded for their game activities.
    string title = 12;
}

message PlayerScoreResetAllResponse {
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#playerScoreResetResponse.
    string kind = 1;
    // The leaderboard reset results.
    repeated PlayerScoreResetResponse results = 2;
}

message PlayerScoreResetResponse {
    // The ID of an leaderboard for which player state has been updated.
    string definitionId = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#playerScoreResetResponse.
    string kind = 2;
    // The time spans of the updated score.
    // Possible values are:  
    // - "ALL_TIME" - The score is an all-time score. 
    // - "WEEKLY" - The score is a weekly score. 
    // - "DAILY" - The score is a daily score.
    repeated string resetScoreTimeSpans = 3;
}

message ProfileSettings {
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#profileSettings.
    string kind = 1;
    // The player's current profile visibility. This field is visible to both 1P and 3P APIs.
    bool profileVisible = 2;
}

message QuestsResetMultipleForAllRequest {
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#questsResetMultipleForAllRequest.
    string kind = 1;
    // The IDs of quests to reset.
    repeated string quest_ids = 2;
}

message ScoresResetMultipleForAllRequest {
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#scoresResetMultipleForAllRequest.
    string kind = 1;
    // The IDs of leaderboards to reset.
    repeated string leaderboard_ids = 2;
}

enum Alt {
    JSON = 0;
}

service GooglePlayGameServicesManagementService {
    // Resets all achievements for the currently authenticated player for your application. This method is only accessible to whitelisted tester accounts for your application.
    rpc PostAchievementsReset(PostAchievementsResetRequest) returns (AchievementResetAllResponse) {
      option (google.api.http) = {
        post: "/games/v1management/achievements/reset"
      };
    }
    // Resets all draft achievements for all players. This method is only available to user accounts for your developer console.
    rpc PostAchievementsResetAllForAllPlayers(PostAchievementsResetAllForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/achievements/resetAllForAllPlayers"
      };
    }
    // Resets achievements with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft achievements may be reset.
    rpc PostAchievementsResetMultipleForAllPlayers(PostAchievementsResetMultipleForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/achievements/resetMultipleForAllPlayers"
        body: "body"
      };
    }
    // Resets the achievement with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
    rpc PostAchievementsAchievementIdReset(PostAchievementsAchievementIdResetRequest) returns (AchievementResetResponse) {
      option (google.api.http) = {
        post: "/games/v1management/achievements/{achievementId}/reset"
      };
    }
    // Resets the achievement with the given ID for all players. This method is only available to user accounts for your developer console. Only draft achievements can be reset.
    rpc PostAchievementsAchievementIdResetForAllPlayers(PostAchievementsAchievementIdResetForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/achievements/{achievementId}/resetForAllPlayers"
      };
    }
    // Get the list of players hidden from the given application. This method is only available to user accounts for your developer console.
    rpc GetApplicationsApplicationIdPlayersHidden(GetApplicationsApplicationIdPlayersHiddenRequest) returns (HiddenPlayerList) {
      option (google.api.http) = {
        get: "/games/v1management/applications/{applicationId}/players/hidden"
      };
    }
    // Hide the given player's leaderboard scores from the given application. This method is only available to user accounts for your developer console.
    rpc PostApplicationsApplicationIdPlayersHiddenPlayerId(PostApplicationsApplicationIdPlayersHiddenPlayerIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/applications/{applicationId}/players/hidden/{playerId}"
      };
    }
    // Unhide the given player's leaderboard scores from the given application. This method is only available to user accounts for your developer console.
    rpc DeleteApplicationsApplicationIdPlayersHiddenPlayerId(DeleteApplicationsApplicationIdPlayersHiddenPlayerIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/games/v1management/applications/{applicationId}/players/hidden/{playerId}"
      };
    }
    // Resets all player progress on all events for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application. All quests for this player will also be reset.
    rpc PostEventsReset(PostEventsResetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/events/reset"
      };
    }
    // Resets all draft events for all players. This method is only available to user accounts for your developer console. All quests that use any of these events will also be reset.
    rpc PostEventsResetAllForAllPlayers(PostEventsResetAllForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/events/resetAllForAllPlayers"
      };
    }
    // Resets events with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft events may be reset. All quests that use any of the events will also be reset.
    rpc PostEventsResetMultipleForAllPlayers(PostEventsResetMultipleForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/events/resetMultipleForAllPlayers"
        body: "body"
      };
    }
    // Resets all player progress on the event with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application. All quests for this player that use the event will also be reset.
    rpc PostEventsEventIdReset(PostEventsEventIdResetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/events/{eventId}/reset"
      };
    }
    // Resets the event with the given ID for all players. This method is only available to user accounts for your developer console. Only draft events can be reset. All quests that use the event will also be reset.
    rpc PostEventsEventIdResetForAllPlayers(PostEventsEventIdResetForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/events/{eventId}/resetForAllPlayers"
      };
    }
    // Resets scores for the leaderboard with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
    rpc PostLeaderboardsLeaderboardIdScoresReset(PostLeaderboardsLeaderboardIdScoresResetRequest) returns (PlayerScoreResetResponse) {
      option (google.api.http) = {
        post: "/games/v1management/leaderboards/{leaderboardId}/scores/reset"
      };
    }
    // Resets scores for the leaderboard with the given ID for all players. This method is only available to user accounts for your developer console. Only draft leaderboards can be reset.
    rpc PostLeaderboardsLeaderboardIdScoresResetForAllPlayers(PostLeaderboardsLeaderboardIdScoresResetForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/leaderboards/{leaderboardId}/scores/resetForAllPlayers"
      };
    }
    // Resets all player progress on all quests for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
    rpc PostQuestsReset(PostQuestsResetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/quests/reset"
      };
    }
    // Resets all draft quests for all players. This method is only available to user accounts for your developer console.
    rpc PostQuestsResetAllForAllPlayers(PostQuestsResetAllForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/quests/resetAllForAllPlayers"
      };
    }
    // Resets quests with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft quests may be reset.
    rpc PostQuestsResetMultipleForAllPlayers(PostQuestsResetMultipleForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/quests/resetMultipleForAllPlayers"
        body: "body"
      };
    }
    // Resets all player progress on the quest with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
    rpc PostQuestsQuestIdReset(PostQuestsQuestIdResetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/quests/{questId}/reset"
      };
    }
    // Resets all player progress on the quest with the given ID for all players. This method is only available to user accounts for your developer console. Only draft quests can be reset.
    rpc PostQuestsQuestIdResetForAllPlayers(PostQuestsQuestIdResetForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/quests/{questId}/resetForAllPlayers"
      };
    }
    // Reset all rooms for the currently authenticated player for your application. This method is only accessible to whitelisted tester accounts for your application.
    rpc PostRoomsReset(PostRoomsResetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/rooms/reset"
      };
    }
    // Deletes rooms where the only room participants are from whitelisted tester accounts for your application. This method is only available to user accounts for your developer console.
    rpc PostRoomsResetForAllPlayers(PostRoomsResetForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/rooms/resetForAllPlayers"
      };
    }
    // Resets all scores for all leaderboards for the currently authenticated players. This method is only accessible to whitelisted tester accounts for your application.
    rpc PostScoresReset(PostScoresResetRequest) returns (PlayerScoreResetAllResponse) {
      option (google.api.http) = {
        post: "/games/v1management/scores/reset"
      };
    }
    // Resets scores for all draft leaderboards for all players. This method is only available to user accounts for your developer console.
    rpc PostScoresResetAllForAllPlayers(PostScoresResetAllForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/scores/resetAllForAllPlayers"
      };
    }
    // Resets scores for the leaderboards with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft leaderboards may be reset.
    rpc PostScoresResetMultipleForAllPlayers(PostScoresResetMultipleForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/scores/resetMultipleForAllPlayers"
        body: "body"
      };
    }
    // Reset all turn-based match data for a user. This method is only accessible to whitelisted tester accounts for your application.
    rpc PostTurnbasedmatchesReset(PostTurnbasedmatchesResetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/turnbasedmatches/reset"
      };
    }
    // Deletes turn-based matches where the only match participants are from whitelisted tester accounts for your application. This method is only available to user accounts for your developer console.
    rpc PostTurnbasedmatchesResetForAllPlayers(PostTurnbasedmatchesResetForAllPlayersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1management/turnbasedmatches/resetForAllPlayers"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package androiddeviceprovisioningpartner;

message PostV1PartnersMetadataOwnerIdDevicesDeviceIdMetadataRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UpdateDeviceMetadataRequest body = 5;
    string callback = 6;
    // ID of the partner.
    string deviceId = 7;
    string fields = 8;
    string key = 9;
    // The owner of the newly set metadata. Set this to the partner ID.
    string metadataOwnerId = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1PartnersPartnerIdCustomersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The ID of the partner.
    string partnerId = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1PartnersPartnerIdDevices:ClaimRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ClaimDeviceRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // ID of the partner.
    string partnerId = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1PartnersPartnerIdDevices:ClaimAsyncRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ClaimDevicesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Partner ID.
    string partnerId = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1PartnersPartnerIdDevices:FindByIdentifierRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    FindDevicesByDeviceIdentifierRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // ID of the partner.
    string partnerId = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1PartnersPartnerIdDevices:FindByOwnerRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    FindDevicesByOwnerRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // ID of the partner.
    string partnerId = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1PartnersPartnerIdDevices:UnclaimRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UnclaimDeviceRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // ID of the partner.
    string partnerId = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1PartnersPartnerIdDevices:UnclaimAsyncRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UnclaimDevicesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Partner ID.
    string partnerId = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1PartnersPartnerIdDevices:UpdateMetadataAsyncRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UpdateDeviceMetadataInBatchRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Partner ID.
    string partnerId = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // Resource name in `partners/[PARTNER_ID]/devices/[DEVICE_ID]`.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1ParentCustomersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CreateCustomerRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Required. The parent resource ID in format `partners/[PARTNER_ID]` that
    // identifies the reseller.
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message ClaimDeviceRequest {
    // The customer to claim for.
    string customerId = 1;
    // The device identifier of the device to claim.
    DeviceIdentifier deviceIdentifier = 2;
    // The section to claim.
    enum ClaimDeviceRequest_SectionType {
        CLAIMDEVICEREQUEST_SECTIONTYPE_SECTION_TYPE_UNSPECIFIED = 0;
        CLAIMDEVICEREQUEST_SECTIONTYPE_SECTION_TYPE_ZERO_TOUCH = 1;
    }
    ClaimDeviceRequest_SectionType sectionType = 3;
}

message ClaimDeviceResponse {
    // The device ID of the claimed device.
    string deviceId = 1;
    // The resource name of the device in the format
    // `partners/[PARTNER_ID]/devices/[DEVICE_ID]`.
    string deviceName = 2;
}

message ClaimDevicesRequest {
    // List of claims.
    repeated PartnerClaim claims = 1;
}

message Company {
    // Input only. Optional. Email address of customer's users in the admin role.
    // Each email address must be associated with a Google Account.
    repeated string adminEmails = 1;
    // Output only. The ID of the company. Assigned by the server.
    string companyId = 2;
    // Required. The name of the company. For example _XYZ Corp_. Characters
    // allowed are: Latin letters, numerals, hyphens, and spaces. Displayed to the
    // customer's employees in the zero-touch enrollment portal.
    string companyName = 3;
    // Output only. The API resource name of the company in the format
    // `partners/[PARTNER_ID]/customers/[CUSTOMER_ID]`. Assigned by the server.
    string name = 4;
    // Input only. Email address of customer's users in the owner role. At least
    // one `owner_email` is required. Each email address must be associated with a
    // Google Account. Owners share the same access as admins but can also add,
    // delete, and edit your organization's portal users.
    repeated string ownerEmails = 5;
}

message CreateCustomerRequest {
    // Required. The company data to populate the new customer. Must contain a
    // value for `companyName` and at least one `owner_email` that's associated
    // with a Google Account. The values for `companyId` and `name` must be empty.
    Company customer = 1;
}

message Device {
    // Claims.
    repeated DeviceClaim claims = 1;
    // The resource name of the configuration.
    // Only set for customers.
    string configuration = 2;
    // Device ID.
    string deviceId = 3;
    // Device identifier.
    DeviceIdentifier deviceIdentifier = 4;
    // Device metadata.
    DeviceMetadata deviceMetadata = 5;
    // Resource name in `partners/[PARTNER_ID]/devices/[DEVICE_ID]`.
    string name = 6;
}

message DeviceClaim {
    // Owner ID.
    string ownerCompanyId = 1;
    // Section type of the device claim.
    enum DeviceClaim_SectionType {
        DEVICECLAIM_SECTIONTYPE_SECTION_TYPE_UNSPECIFIED = 0;
        DEVICECLAIM_SECTIONTYPE_SECTION_TYPE_ZERO_TOUCH = 1;
    }
    DeviceClaim_SectionType sectionType = 2;
}

message DeviceIdentifier {
    // IMEI number.
    string imei = 1;
    // Manufacturer name to match `android.os.Build.MANUFACTURER` (required).
    // Allowed values listed in
    // [manufacturer names](/zero-touch/resources/manufacturer-names).
    string manufacturer = 2;
    // MEID number.
    string meid = 3;
    // Serial number (optional).
    string serialNumber = 4;
}

message DeviceMetadata {
    // Metadata entries
    map<string, string> entries = 1;
}

message DevicesLongRunningOperationMetadata {
    // Number of devices parsed in your requests.
    int32 devicesCount = 1;
    // The overall processing status.
    enum DevicesLongRunningOperationMetadata_ProcessingStatu {
        DEVICESLONGRUNNINGOPERATIONMETADATA_PROCESSINGSTATU_BATCH_PROCESS_STATUS_UNSPECIFIED = 0;
        DEVICESLONGRUNNINGOPERATIONMETADATA_PROCESSINGSTATU_BATCH_PROCESS_PENDING = 1;
        DEVICESLONGRUNNINGOPERATIONMETADATA_PROCESSINGSTATU_BATCH_PROCESS_IN_PROGRESS = 2;
        DEVICESLONGRUNNINGOPERATIONMETADATA_PROCESSINGSTATU_BATCH_PROCESS_PROCESSED = 3;
    }
    DevicesLongRunningOperationMetadata_ProcessingStatu processingStatus = 2;
    // Processing progress from 0 to 100.
    int32 progress = 3;
}

message DevicesLongRunningOperationResponse {
    // Processing status for each device.
    // One `PerDeviceStatus` per device. The order is the same as in your requests.
    repeated OperationPerDevice perDeviceStatus = 1;
    // Number of succeesfully processed ones.
    int32 successCount = 2;
}

message Empty {
}

message FindDevicesByDeviceIdentifierRequest {
    // The device identifier to search.
    DeviceIdentifier deviceIdentifier = 1;
    // Number of devices to show.
    string limit = 2;
    // Page token.
    string pageToken = 3;
}

message FindDevicesByDeviceIdentifierResponse {
    // Found devices.
    repeated Device devices = 1;
    // Page token of the next page.
    string nextPageToken = 2;
}

message FindDevicesByOwnerRequest {
    // List of customer IDs to search for.
    repeated string customerId = 1;
    // The number of devices to show in the result.
    string limit = 2;
    // Page token.
    string pageToken = 3;
    // The section type.
    enum FindDevicesByOwnerRequest_SectionType {
        FINDDEVICESBYOWNERREQUEST_SECTIONTYPE_SECTION_TYPE_UNSPECIFIED = 0;
        FINDDEVICESBYOWNERREQUEST_SECTIONTYPE_SECTION_TYPE_ZERO_TOUCH = 1;
    }
    FindDevicesByOwnerRequest_SectionType sectionType = 4;
}

message FindDevicesByOwnerResponse {
    // Devices found.
    repeated Device devices = 1;
    // Page token of the next page.
    string nextPageToken = 2;
}

message ListCustomersResponse {
    // List of customers related to this partner.
    repeated Company customers = 1;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // This field will always be not set if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. In this case, error information for each device is set in `response.perDeviceStatus.result.status`.
    Status error = 2;
    // This field will contain a `DevicesLongRunningOperationMetadata` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `operations/some/unique/name`.
    string name = 4;
    // This field will contain a `DevicesLongRunningOperationResponse` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.
    map<string, > response = 5;
}

message OperationPerDevice {
    // Request to claim a device.
    PartnerClaim claim = 1;
    // Processing result for every device.
    PerDeviceStatusInBatch result = 2;
    // Request to unclaim a device.
    PartnerUnclaim unclaim = 3;
    // Request to set metadata for a device.
    UpdateMetadataArguments updateMetadata = 4;
}

message PartnerClaim {
    // Customer ID to claim for.
    string customerId = 1;
    // Device identifier of the device.
    DeviceIdentifier deviceIdentifier = 2;
    // Metadata to set at claim.
    DeviceMetadata deviceMetadata = 3;
    // Section type to claim.
    enum PartnerClaim_SectionType {
        PARTNERCLAIM_SECTIONTYPE_SECTION_TYPE_UNSPECIFIED = 0;
        PARTNERCLAIM_SECTIONTYPE_SECTION_TYPE_ZERO_TOUCH = 1;
    }
    PartnerClaim_SectionType sectionType = 4;
}

message PartnerUnclaim {
    // Device ID of the device.
    string deviceId = 1;
    // Device identifier of the device.
    DeviceIdentifier deviceIdentifier = 2;
    // Section type to unclaim.
    enum PartnerUnclaim_SectionType {
        PARTNERUNCLAIM_SECTIONTYPE_SECTION_TYPE_UNSPECIFIED = 0;
        PARTNERUNCLAIM_SECTIONTYPE_SECTION_TYPE_ZERO_TOUCH = 1;
    }
    PartnerUnclaim_SectionType sectionType = 3;
}

message PerDeviceStatusInBatch {
    // Device ID of the device if process succeeds.
    string deviceId = 1;
    // Error identifier.
    string errorIdentifier = 2;
    // Error message.
    string errorMessage = 3;
    // Process result.
    enum PerDeviceStatusInBatch_Statu {
        PERDEVICESTATUSINBATCH_STATU_SINGLE_DEVICE_STATUS_UNSPECIFIED = 0;
        PERDEVICESTATUSINBATCH_STATU_SINGLE_DEVICE_STATUS_UNKNOWN_ERROR = 1;
        PERDEVICESTATUSINBATCH_STATU_SINGLE_DEVICE_STATUS_OTHER_ERROR = 2;
        PERDEVICESTATUSINBATCH_STATU_SINGLE_DEVICE_STATUS_SUCCESS = 3;
        PERDEVICESTATUSINBATCH_STATU_SINGLE_DEVICE_STATUS_PERMISSION_DENIED = 4;
        PERDEVICESTATUSINBATCH_STATU_SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER = 5;
        PERDEVICESTATUSINBATCH_STATU_SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE = 6;
        PERDEVICESTATUSINBATCH_STATU_SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS = 7;
    }
    PerDeviceStatusInBatch_Statu status = 4;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message UnclaimDeviceRequest {
    // The device ID returned by `ClaimDevice`.
    string deviceId = 1;
    // The device identifier you used when you claimed this device.
    DeviceIdentifier deviceIdentifier = 2;
    // The section type to unclaim for.
    enum UnclaimDeviceRequest_SectionType {
        UNCLAIMDEVICEREQUEST_SECTIONTYPE_SECTION_TYPE_UNSPECIFIED = 0;
        UNCLAIMDEVICEREQUEST_SECTIONTYPE_SECTION_TYPE_ZERO_TOUCH = 1;
    }
    UnclaimDeviceRequest_SectionType sectionType = 3;
}

message UnclaimDevicesRequest {
    // List of devices to unclaim.
    repeated PartnerUnclaim unclaims = 1;
}

message UpdateDeviceMetadataInBatchRequest {
    // List of metadata updates.
    repeated UpdateMetadataArguments updates = 1;
}

message UpdateDeviceMetadataRequest {
    // The metdata to set.
    DeviceMetadata deviceMetadata = 1;
}

message UpdateMetadataArguments {
    // Device ID of the device.
    string deviceId = 1;
    // Device identifier.
    DeviceIdentifier deviceIdentifier = 2;
    // The metadata to update.
    DeviceMetadata deviceMetadata = 3;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service AndroidDeviceProvisioningPartnerService {
    // Update the metadata.
    rpc PostV1PartnersMetadataOwnerIdDevicesDeviceIdMetadata(PostV1PartnersMetadataOwnerIdDevicesDeviceIdMetadataRequest) returns (DeviceMetadata) {
      option (google.api.http) = {
        post: "//v1/partners/{metadataOwnerId}/devices/{deviceId}/metadata"
        body: "body"
      };
    }
    // Lists the customers that are enrolled to the reseller identified by the
    // `partnerId` argument. This list includes customers that the reseller
    // created and customers that enrolled themselves using the portal.
    rpc GetV1PartnersPartnerIdCustomers(GetV1PartnersPartnerIdCustomersRequest) returns (ListCustomersResponse) {
      option (google.api.http) = {
        get: "//v1/partners/{partnerId}/customers"
      };
    }
    // Claim the device identified by device identifier.
    rpc PostV1PartnersPartnerIdDevices:Claim(PostV1PartnersPartnerIdDevices:ClaimRequest) returns (ClaimDeviceResponse) {
      option (google.api.http) = {
        post: "//v1/partners/{partnerId}/devices:claim"
        body: "body"
      };
    }
    // Claim devices asynchronously.
    rpc PostV1PartnersPartnerIdDevices:ClaimAsync(PostV1PartnersPartnerIdDevices:ClaimAsyncRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/partners/{partnerId}/devices:claimAsync"
        body: "body"
      };
    }
    // Find devices by device identifier.
    rpc PostV1PartnersPartnerIdDevices:FindByIdentifier(PostV1PartnersPartnerIdDevices:FindByIdentifierRequest) returns (FindDevicesByDeviceIdentifierResponse) {
      option (google.api.http) = {
        post: "//v1/partners/{partnerId}/devices:findByIdentifier"
        body: "body"
      };
    }
    // Find devices by ownership.
    rpc PostV1PartnersPartnerIdDevices:FindByOwner(PostV1PartnersPartnerIdDevices:FindByOwnerRequest) returns (FindDevicesByOwnerResponse) {
      option (google.api.http) = {
        post: "//v1/partners/{partnerId}/devices:findByOwner"
        body: "body"
      };
    }
    // Unclaim the device identified by the `device_id` or the `deviceIdentifier`.
    rpc PostV1PartnersPartnerIdDevices:Unclaim(PostV1PartnersPartnerIdDevices:UnclaimRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/partners/{partnerId}/devices:unclaim"
        body: "body"
      };
    }
    // Unclaim devices asynchronously.
    rpc PostV1PartnersPartnerIdDevices:UnclaimAsync(PostV1PartnersPartnerIdDevices:UnclaimAsyncRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/partners/{partnerId}/devices:unclaimAsync"
        body: "body"
      };
    }
    // Set metadata in batch asynchronously.
    rpc PostV1PartnersPartnerIdDevices:UpdateMetadataAsync(PostV1PartnersPartnerIdDevices:UpdateMetadataAsyncRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/partners/{partnerId}/devices:updateMetadataAsync"
        body: "body"
      };
    }
    // Get a device.
    rpc GetV1Name(GetV1NameRequest) returns (Device) {
      option (google.api.http) = {
        get: "//v1/{name}"
      };
    }
    // Creates a customer for zero-touch enrollment. After the method returns
    // successfully, admin and owner roles can manage devices and EMM configs
    // by calling API methods or using their zero-touch enrollment portal. The API
    // doesn't notify the customer that they have access.
    rpc PostV1ParentCustomers(PostV1ParentCustomersRequest) returns (Company) {
      option (google.api.http) = {
        post: "//v1/{parent}/customers"
        body: "body"
      };
    }
}
